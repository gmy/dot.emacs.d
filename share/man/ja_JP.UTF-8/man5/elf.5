.\"	$OpenBSD: elf.5,v 1.12 2003/10/27 20:23:58 jmc Exp $
.\"Copyright (c) 1999 Jeroen Ruigrok van der Werven
.\"All rights reserved.
.\"
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that the following conditions
.\"are met:
.\"1. Redistributions of source code must retain the above copyright
.\"   notice, this list of conditions and the following disclaimer.
.\"2. Redistributions in binary form must reproduce the above copyright
.\"   notice, this list of conditions and the following disclaimer in the
.\"   documentation and/or other materials provided with the distribution.
.\"
.\"THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\"ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\"IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\"ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\"FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\"DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\"HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\"LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\"SUCH DAMAGE.
.\"
.\"	$FreeBSD: src/share/man/man5/elf.5,v 1.21 2001/10/01 16:09:23 ru Exp $
.\"
.\" Slightly adapted - aeb, 2004-01-01
.\" 2005-07-15, Mike Frysinger <vapier@gentoo.org>, various fixes
.\" 2007-10-11, Mike Frysinger <vapier@gentoo.org>, various fixes
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.\" Japanese Version Copyright (c) 2004-2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Thu Dec 16 02:17:58 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Sat Sep 10 02:29:40 JST 2005 by Yuichi SATO
.\" Updated 2008-02-12, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.77
.\"
.TH ELF 5 2007-12-28 "Linux" "Linux Programmer's Manual"
.SH 名前
elf \- 実行可能リンクフォーマット (ELF) ファイルのフォーマット
.SH 書式
.nf
.\" .B #include <elf_abi.h>
.B #include <elf.h>
.fi
.SH 説明
ヘッダファイル
.I <elf.h>
は ELF 実行可能バイナリファイルのフォーマットを定義する。
これらのファイルとしては、通常の実行可能ファイル・
再配置可能オブジェクトファイル・コアファイル・共有ライブラリがある。
.PP
ELF ファイルフォーマットを使う実行可能ファイルは、
ELF ヘッダの後にプログラムヘッダテーブルまたは
セクションヘッダテーブル (またはその両方) が続く構成である。
ELF ヘッダは常にファイルのオフセット 0 にある。
プログラムヘッダテーブルとセクションヘッダテーブルの
ファイル内でのオフセットは、ELF ヘッダに定義されている。
この 2 つのテーブルはファイルの残りの部分の詳細を記述する。
.PP
.\" ネイティブなアーキテクチャの ELF バイナリファイルを処理したい
.\" アプリケーションは、ソースコードに
.\" .I <elf_abi.h>
.\" を含めるだけでよい。
.\" これらのアプリケーションは、ジェネリック名
.\" all the types and structures by their generic names
.\" "Elf_xxx"
.\" によって全ての型と構造体を参照したり、
.\" "ELF_xxx"
.\" によってマクロを参照したりするすべきである。
.\" このようにして書かれたアプリケーションは、
.\" ホストが 32 ビットか 64 ビットかに関わらず、
.\" どのアーキテクチャ上でもコンパイルできる。
.\" .PP
.\" アプリケーションが未知のアーキテクチャの ELF ファイルを
.\" 処理する必要がある場合、そのアプリケーションは明示的に
.\" "Elf32_xxx"
.\" または
.\" "Elf64_xxx"
.\" という型名と構造体名を使う必要がある。
.\" 同様に、マクロは
.\" "ELF32_xxx"
.\" または
.\" "ELF64_xxx"
.\" で識別される必要がある。
.\" .PP
このヘッダファイルは上記のヘッダを C 言語の構造体で記述し、
また動的セクション・再配置可能セクション・シンボルテーブルの構造体も
含んでいる。
.PP
以下の型は N ビットアーキテクチャで使われる (N=32,64 であり
.I ElfN
は
.I Elf32
または
.I Elf64
を表し、
.I uintN_t
は
.I uint32_t
または
.I uint64_t
を表す):
.in +4n
.nf

ElfN_Addr       符号なしのプログラムアドレス, uintN_t
ElfN_Off        符号なしのファイルオフセット, uintN_t
ElfN_Section    符号なしのセクションインデックス, uint16_t
ElfN_Versym     符号なしのバージョンシンボル情報, uint16_t
Elf_Byte        unsigned char
ElfN_Half       uint16_t
ElfN_Sword      int32_t
ElfN_Word       uint32_t
ElfN_Sxword     int64_t
ElfN_Xword      uint64_t
.\" Elf32_Size  符号なしのオブジェクトサイズ
.fi
.in
.PP
(注意: *BSD での用語は少し異なる。
.I Elf64_Half
は
.I Elf32_Half
の 2 倍であり、
.I Elf64Quarter
が
.I uint16_t
に用いられる。
混乱を避けるため、以下では、これらの型はサイズが自明な型に置き換えてある。)
.PP
このファイルフォーマットが定義する全てのデータ構造体は、
関連するクラスの
"自然な"
サイズと配置の指針に従う。
必要な場合、データ構造体では明示的なパディング (padding, 詰め込み)
が行なわれる。これは 4 バイトオブジェクトに対する
4 バイト配置を保証するためや、
構造体のサイズを 4 の倍数にするためなどである。
.PP
ELF ヘッダは型
.I Elf32_Ehdr
または
.I Elf64_Ehdr
で記述される:
.in +4n
.nf

#define EI_NIDENT 16

typedef struct {
    unsigned char e_ident[EI_NIDENT];
    uint16_t      e_type;
    uint16_t      e_machine;
    uint32_t      e_version;
    ElfN_Addr     e_entry;
    ElfN_Off      e_phoff;
    ElfN_Off      e_shoff;
    uint32_t      e_flags;
    uint16_t      e_ehsize;
    uint16_t      e_phentsize;
    uint16_t      e_phnum;
    uint16_t      e_shentsize;
    uint16_t      e_shnum;
    uint16_t      e_shstrndx;
} ElfN_Ehdr;
.fi
.in
.PP
フィールドは以下の意味を持つ:
.\" .Bl -tag -width "e_phentsize"
.TP 12
.IR e_ident
このバイト配列は、プロセッサやファイルの他の部分には依存せずに、
ファイルを解釈 (interpret) するために指定される。
この配列内のすべてのものは、接頭辞
.BR EI_
で始まるマクロの名前が付き、接頭辞
.BR ELF
で始まる値を持つ。
以下のマクロが定義されている:
.RS 12
.\" .Bl -tag -width "EI_VERSION" \" EI_ABIVERSION
.TP 12
.BR EI_MAG0
マジックナンバーの第 1 バイト。
.BR ELFMAG0
で埋めなければならない。
(0: 0x7f)
.TP
.BR EI_MAG1
マジックナンバーの第 2 バイト。
.BR ELFMAG1
で埋めなければならない。
(1: \(aqE\(aq)
.TP
.BR EI_MAG2
マジックナンバーの第 3 バイト。
.BR ELFMAG2
で埋めなければならない。
(2: \(aqL\(aq)
.TP
.BR EI_MAG3
マジックナンバーの第 4 バイト。
.BR ELFMAG3
で埋めなければならない。
(3: \(aqF\(aq)
.TP
.BR EI_CLASS
第 5 バイトは、このバイナリのアーキテクチャを示す:
.RS 12
.\" .Bl -tag -width "ELFCLASSNONE" -compact
.TP 14
.PD 0
.BR ELFCLASSNONE
このクラスは不正である。
.TP
.BR ELFCLASS32
32 ビットアーキテクチャを定義する。
ファイルと仮想アドレス空間が 4 ギガバイトまでのマシンをサポートする。
.TP
.BR ELFCLASS64
64 ビットアーキテクチャを定義する。
.PD
.RE
.\" .El
.TP
.BR EI_DATA
第 6 バイトはファイル内のプロセッサ固有データの
データエンコーディングを指定する。
現在のところ以下のエンコーディングがサポートされている:
.\" .Bl -tag -width "ELFDATA2LSB" -compact
.RS 12
.TP 14
.PD 0
.BR ELFDATANONE
不明なデータフォーマット。
.TP
.BR ELFDATA2LSB
2 の補数、リトルエンディアン。
.TP
.BR ELFDATA2MSB
2 の補数、ビッグエンディアン。
.PD
.RE
.\" .El
.TP
.PD 0
.BR EI_VERSION
ELF 仕様のバージョン番号:
.\" .Bl -tag -width "EV_CURRENT" -compact
.RS 12
.TP 14
.BR EV_NONE
不正なバージョン。
.TP
.BR EV_CURRENT
現在のバージョン。
.PD
.RE
.\".El
.TP
.BR EI_OSABI
このバイトはオブジェクトのターゲットとなる
オペレーティングシステムと ABI を示す。
他の ELF 構造体のフィールドには、
プラットフォーム固有の意味を持つフラグや値を持つものもある;
これらのフィールドの解釈は、このバイトの値によって決定される。
例えば:
.\" .Bl -tag -width "ELFOSABI_STANDALONE" -compact
.RS 12
.TP 20
.PD 0
.BR ELFOSABI_NONE
ELFOSABI_SYSV と同じ。
.\" 0
.TP
.BR ELFOSABI_SYSV
UNIX System V ABI.
.\" 0
.\" synonym: ELFOSABI_NONE
.TP
.BR ELFOSABI_HPUX
HP-UX ABI.
.\" 1
.TP
.BR ELFOSABI_NETBSD
NetBSD ABI.
.\" 2
.TP
.BR ELFOSABI_LINUX
Linux ABI.
.\" 3
.\" .TP
.\" .BR ELFOSABI_HURD
.\" Hurd ABI.
.\" 4
.\" .TP
.\" .BR ELFOSABI_86OPEN
.\" 86Open Common IA32 ABI.
.\" 5
.TP
.BR ELFOSABI_SOLARIS
Solaris ABI.
.\" 6
.\" .It Dv ELFOSABI_MONTEREY
.\" Monterey project ABI.
.\" ELFOSABI_AIX
.\" 7
.TP
.BR ELFOSABI_IRIX
IRIX ABI.
.\" 8
.TP
.BR ELFOSABI_FREEBSD
FreeBSD ABI.
.\" 9
.TP
.BR ELFOSABI_TRU64
TRU64 UNIX ABI.
.\" 10
.\" ELFOSABI_MODESTO
.\" 11
.\" ELFOSABI_OPENBSD
.\" 12
.TP
.BR ELFOSABI_ARM
ARM アーキテクチャ ABI.
.\" 97
.TP
.BR ELFOSABI_STANDALONE
スタンドアロン (組み込み) ABI.
.\" 255
.\" .El
.PD
.RE
.TP
.BR EI_ABIVERSION
このバイトはオブジェクトがターゲットとしている ABI のバージョンを示す。
このフィールドは互換性のない ABI のバージョンを区別するために使われる。
このバージョン番号の解釈は、
.B EI_OSABI
フィールドで識別される ABI に依存する。
この仕様に準拠するアプリケーションは、値 0 を使う。
.TP
.BR EI_PAD
パディングの開始。
これらのバイトは予約されており、0 に設定されている。
これらを読み込むプログラムは、これらのバイトを無視すべきである。
現在使われていないバイトに意味が与えられる場合、
.B EI_PAD
の値は将来変更されるかもしれない。
.TP
.BR EI_BRAND
アーキテクチャ ID の開始。
.TP
.BR EI_NIDENT
.I e_ident
配列のサイズ。
.\" .El
.RE
.TP
.IR e_type
この構造体のメンバはオブジェクトファイルタイプを示す:
.RS 12
.\" .Bl -tag -width "ET_NONE" -compact
.TP 12
.PD 0
.BR ET_NONE
不明なタイプ。
.TP
.BR ET_REL
再配置可能ファイル。
.TP
.BR ET_EXEC
実行可能ファイル。
.TP
.BR ET_DYN
共有オブジェクト。
.TP
.BR ET_CORE
コアファイル。
.PD
.RE
.\" .El
.TP
.IR e_machine
このメンバは個々のファイルに必要とされるアーキテクチャを指定する。
例:
.RS 12
.\" .Bl -tag -width "EM_MIPS_RS4_BE" -compact
.TP 12
.PD 0
.BR EM_NONE
不明なマシン。
.\" 0
.TP
.BR EM_M32
AT&T WE 32100.
.\" 1
.TP
.BR EM_SPARC
Sun Microsystems SPARC.
.\" 2
.TP
.BR EM_386
Intel 80386.
.\" 3
.TP
.BR EM_68K
Motorola 68000.
.\" 4
.TP
.BR EM_88K
Motorola 88000.
.\" 5
.\" .It Dv EM_486
.\" Intel 80486.
.\" 6
.TP
.BR EM_860
Intel 80860.
.\" 7
.TP
.BR EM_MIPS
MIPS RS3000 (ビッグエンディアンのみ)。
.\" 8
.\" EM_S370
.\" 9
.\" .It Dv EM_MIPS_RS4_BE
.\" MIPS RS4000 (ビッグエンディアンのみ)。非推奨。
.\" 10
.\" EM_MIPS_RS3_LE (MIPS R3000 リトルエンディアン)。
.\" 10
.TP
.BR EM_PARISC
HP/PA.
.\" 15
.TP
.BR EM_SPARC32PLUS
拡張命令セット付き SPARC。
.\" 18
.TP
.BR EM_PPC
PowerPC.
.\" 20
.TP
.BR EM_PPC64
PowerPC 64-bit.
.\" 21
.TP
.BR EM_S390
IBM S/390
.\" 22
.TP
.BR EM_ARM
Advanced RISC Machines
.\" 40
.TP
.BR EM_SH
Renesas SuperH
.\" 42
.TP
.BR EM_SPARCV9
SPARC v9 64-bit.
.\" 43
.TP
.BR EM_IA_64
Intel Itanium
.\" 50
.TP
.BR EM_X86_64
AMD x86-64
.\" 62
.TP
.BR EM_VAX
DEC Vax.
.\" 75
.\" EM_CRIS
.\" 76
.\" .It Dv EM_ALPHA
.\" Compaq [DEC] Alpha.
.\" .It Dv EM_ALPHA_EXP
.\" 拡張命令セット付き Compaq [DEC] Alpha。
.PD
.RE
.\" .El
.TP
.IR e_version
このメンバはファイルバージョンを示す:
.\" .Bl -tag -width "EV_CURRENT" -compact
.RS 12
.TP 12
.PD 0
.BR EV_NONE
不正なバージョン。
.TP
.BR EV_CURRENT
現在のバージョン。
.\" .El
.PD
.RE
.TP
.IR e_entry
このメンバは、システムが最初に制御を渡す、
つまりプロセスを開始する仮想アドレスを指定する。
ファイルにエントリポイントが関連付けられていない場合、
このメンバには 0 が入る。
.TP
.IR e_phoff
このメンバはプログラムヘッダテーブルの
ファイルオフセット (バイト単位) を保持する。
ファイルにプログラムヘッダテーブルがない場合、
このメンバには 0 が入る。
.TP
.IR e_shoff
このメンバはセクションヘッダテーブルの
ファイルオフセット (バイト単位) を保持する。
ファイルにセクションヘッダテーブルがない場合、
このメンバには 0 が入る。
.TP
.IR e_flags
このメンバはファイルに関連付けられたプロセッサ固有のフラグを保持する。
フラグの名前は EF_`machine_flag' という形式である。
現在のところフラグは定義されていない。
.TP
.IR e_ehsize
このメンバは ELF ヘッダサイズ (バイト単位) を保持する。
.TP
.IR e_phentsize
このメンバはこのファイルのプログラムヘッダテーブルの
1 エントリあたりのサイズ (バイト単位) を保持する;
全てのエントリは同じサイズである。
.TP
.IR e_phnum
このメンバはプログラムヘッダテーブルにあるエントリの数を保持する。
よって
.IR e_phentsize
と
.IR e_phnum
の積がテーブルサイズ (バイト単位) になる。
ファイルにプログラムヘッダがない場合、
.IR e_phnum
は値 0 を保持する。
.TP
.IR e_shentsize
このメンバはセクションヘッダのサイズ (バイト単位) を保持する。
セクションヘッダはセクションヘッダテーブルの 1 つのエントリである;
全てのエントリは同じサイズである。
.TP
.IR e_shnum
このメンバはセクションヘッダテーブルにあるエントリの数を保持する。
よって
.IR e_shentsize
と
.IR e_shnum
の積はセクションヘッダテーブルのサイズ (バイト単位) になる。
ファイルにセクションヘッダテーブルがない場合、
.IR e_shnum
は値 0 を保持する。
.TP
.IR e_shstrndx
このメンバはセクション名文字列テーブルに関連付けられたエントリの
セクションヘッダテーブルインデックスを保持する。
ファイルにセクション名文字列テーブルがない場合、
このメンバは値
.BR SHN_UNDEF
を保持する。
.BR SHN_UNDEF .
.RS 12
.\" .Bl -tag -width "SHN_LORESERVE"
.TP 14
.BR SHN_UNDEF
この値は未定義・存在しない・無関係その他、
意味のないセクションの参照であることを表す。
例えば、セクション番号
.BR SHN_UNDEF
に関連づけて「定義」されたシンボルは、「未定義」なシンボルである。
.\"nakano ここの "defined" は通常の文の一部では？
.TP
.BR SHN_LORESERVE
この値は予約済みのインデックス範囲の下限を指定する。
.TP
.BR SHN_LOPROC
この値以上で
.BR SHN_HIPROC
以下の値は、プロセッサ固有の意味に予約されている。
.TP
.BR SHN_HIPROC
この値以下で
.BR SHN_LOPROC
以上の値は、プロセッサ固有の意味に予約されている。
.\"sato: SHN_{HI,LO}PROC の説明は、原文の間違いらしい。
.TP
.BR SHN_ABS
この値は対応する参照の絶対値を指定する。
例えば、セクション番号
.BR SHN_ABS
に関連づけられたシンボルは絶対値を保持し、再配置に影響されない。
.TP
.BR SHN_COMMON
このセクションに関連して定義されたシンボルは、
Fortran の COMMON や C の未割り当て external 変数のような、
共通シンボルである。
.TP
.BR SHN_HIRESERVE
この値は予約されたインデックスの範囲の上限を指定する。
.BR SHN_LORESERVE
と
.BR SHN_HIRESERVE
は含まれる。
この値はセクションヘッダテーブルを参照しない。
つまり、セクションヘッダテーブルは
予約されたインデックスのエントリを
.I 含まない 。
.RE
.\" .El
.\" .El
.PP
実行可能ファイルまたは共有オブジェクトファイルのプログラムヘッダテーブルは、
システムによるプログラム実行準備に必要な、
セグメント等の情報を記述する構造体の配列である。
オブジェクトファイルの
.IR セグメント
には 1 つ以上の
.IR セクション
が含まれる。
プログラムヘッダは実行可能ファイルと共有オブジェクトファイルでのみ意味を持つ。
ファイルは自身のプログラムヘッダサイズを ELF ヘッダの
.IR e_phentsize
メンバと
.IR e_phnum
メンバで指定する。
ELF プログラムヘッダは
.I Elf32_Phdr
型または
.I Elf64_Phdr
型で記述される
(どちらになるかはアーキテクチャ依存):
.in +4n
.nf

typedef struct {
    uint32_t   p_type;
    Elf32_Off  p_offset;
    Elf32_Addr p_vaddr;
    Elf32_Addr p_paddr;
    uint32_t   p_filesz;
    uint32_t   p_memsz;
    uint32_t   p_flags;
    uint32_t   p_align;
} Elf32_Phdr;
.fi
.in
.in +4n
.nf

typedef struct {
    uint32_t   p_type;
    uint32_t   p_flags;
    Elf64_Off  p_offset;
    Elf64_Addr p_vaddr;
    Elf64_Addr p_paddr;
    uint64_t   p_filesz;
    uint64_t   p_memsz;
    uint64_t   p_align;
} Elf64_Phdr;
.fi
.in
.PP
32 ビットと 64 ビットのプログラムヘッダの主な違いは、構造体における
.IR p_flags
メンバの位置にある。
.\" .Bl -tag -width "p_offset"
.TP 12
.IR p_type
Phdr 構造体のこのメンバは、
この配列要素がどのような種類のセグメントを記述しているか、
またはこの配列要素の情報をどのように解釈するか、を表す。
.\" .Bl -tag -width "PT_DYNAMIC"
.RS 12
.TP 12
.BR PT_NULL
この配列要素は使用されておらず、その他のメンバの値は未定義である。
これにより、このプログラムヘッダのエントリは無視される。
.TP
.BR PT_LOAD
この配列要素は
.IR p_filesz
と
.IR p_memsz
で記述されるロード可能セグメントを指定する。
このファイルからのバイトデータが、このメモリセグメントの先頭からマップされる。
セグメントのメモリサイズ
.IR Sy p_memsz
がファイルサイズ
.IR Sy p_filesz
より大きい場合、
「余った」バイトは値 0 となり、
そのセグメント初期化データの後ろに置かれると定められている。
ファイルサイズはメモリサイズより大きくてはいけない。
プログラムヘッダテーブルのロード可能セグメントエントリは、
.IR p_vaddr
メンバの昇順にソートされて出現する。
.TP
.BR PT_DYNAMIC
この配列要素は動的リンク情報を指定する。
.TP
.BR PT_INTERP
この配列要素は、インタプリタとして起動されるパス名 (NULL 文字終端)
の位置とサイズを指定する。
このセグメント型は (共有オブジェクトにもあるかも知れないが)
実行可能ファイルでのみ意味を持つ。
ただし、このセグメント型は 1 つのファイルに 2 回以上出現してはならない。
もし存在する場合、このセグメント型は
全てのロード可能セグメントエントリより前になければならない。
.TP
.BR PT_NOTE
この配列要素は補足情報 (auxiliary information) の位置とサイズを指定する。
.TP
.BR PT_SHLIB
このセグメント型は予約されているが、意味は指定されていない。
この型の配列要素を保持するプログラムは ABI に準拠しない。
.TP
.BR PT_PHDR
この配列要素は、もし存在しているならば、
ファイルおよびプログラムのメモリイメージ双方における
プログラムヘッダテーブル自身の位置とサイズを指定する。
このセグメント型は 1 つのファイルに 2 回以上出現してはならない。
さらに、このセグメント型が存在してもよいのは、プログラムヘッダテーブルが
プログラムのメモリイメージの一部である場合のみである。
もし存在する場合、これは全てのロード可能セグメントエントリより
前になければならない。
.TP
.BR PT_LOPROC
この値以上で
.BR PT_HIPROC
以下の値はプロセッサ固有の意味に予約されている。
.TP
.BR PT_HIPROC
この値以下で
.BR PT_LOPROC
以上の値はプロセッサ固有の意味に予約されている。
.\"sato: PT_{HI,LO}PROC の説明は、原文の間違いらしい。
.TP
.BR PT_GNU_STACK
GNU 拡張であり、Linux カーネルが
.I p_flags
のメンバーにセットされたフラグ経由でスタックの状態を制御するために使用する。
.\" .El
.RE
.TP
.IR p_offset
このメンバは、セグメントの先頭バイトがある
(ファイル先頭からの) オフセットを保持する。
.TP
.IR p_vaddr
このメンバは、セグメントの先頭バイトがある
メモリの仮想アドレスを保持する。
.TP
.IR p_paddr
物理アドレスが意味をもつシステムでは、
このメンバはセグメントの物理アドレスとして予約されている。
BSD ではこのメンバは使用されない。0 でなければならない。
.TP
.IR p_filesz
このメンバはセグメントのファイルイメージのバイト数を保持する。
これは 0 でもよい。
.TP
.IR p_memsz
このメンバはセグメントのメモリイメージのバイト数を保持する。
これは 0 でもよい。
.TP
.IR p_flags
このメンバはセグメントに関連するフラグのビットマップを保持する:
.\" .Bl -tag -width "PF_X" -compact
.RS 12
.TP
.PD 0
.BR PF_X
実行可能セグメント。
.TP
.BR PF_W
書き込み可能セグメント.
.TP
.BR PF_R
読み込み可能セグメント。
.PD
.RE
.\" .El
.IP
テキストセグメントは一般にフラグ
.BR PF_X
と
.BR PF_R
を持つ。
データセグメントは一般に
.BR PF_X ,
.BR PF_W ,
.BR PF_R
を持つ。
.TP
.IR p_align
このメンバは、セグメントがメモリおよびファイルにおいて配置 (align)
される値を保持する。
.\"nakano align の定訳はありましたっけ？
ロード可能プロセスセグメントは、ページサイズを法として
.IR p_vaddr
と
.IR p_offset
と合同でなければならない
(訳注:「p_vaddr mod ページサイズ = p_offset mod ページサイズ」
でなければならない)。。
.\"nakano こういう場合は普通 congruent "with" だけど…
0 と 1 という値は配置が必要ないことを意味する。
それ以外の場合、
.IR p_align
は正で 2 の整数乗でなければならず、
.IR p_vaddr
は
.IR p_align
を法として
.IR p_offset
と合同でなければならない
(訳注:「p_vaddr mod p_align = p_offset mod p_align」でなければならない)。
.\" .El
.PP
ファイルのセクションヘッダテーブルには、
全てのファイルセクションの場所が記述されている。
セクションヘッダテーブルは
.I Elf32_Shdr
構造体または
.I Elf64_Shdr
構造体の配列である。
ELF ヘッダの
.IR e_shoff
メンバはファイルの先頭から
セクションヘッダテーブルへのバイトオフセットである。
.IR e_shnum
はセクションヘッダテーブルに含まれるエントリの数を保持する。
.IR e_shentsize
は各エントリのサイズ (バイト単位) を保持する。
.PP
セクションヘッダテーブルインデックスは、この配列の要素を指定する。
いくつかのセクションヘッダテーブルインデックスは予約されている。
オブジェクトファイルは、これらの特別なインデックスに対応する
セクションを持たない:
.\" .Bl -tag -width "SHN_LORESERVE"
.TP 14
.BR SHN_UNDEF
この値は未定義・不明・無関係・無意味なセクション参照の印となる。
.TP
.BR SHN_LORESERVE
この値は予約済みのインデックス領域の下限を指定する。
.TP
.BR SHN_LOPROC
この値以上で
.BR SHN_HIPROC
以下の値はプロセッサ固有の意味に予約されている。
.TP
.BR SHN_HIPROC
この値以下で
.BR SHN_HIPROC
以上の値はプロセッサ固有の意味に予約されている。
.\"sato: SHN_{HI,LO}PROC の説明は、原文の間違いらしい。
.TP
.BR SHN_ABS
この値は対応する参照の絶対値を指定する。
例えば、セクション番号
.BR SHN_ABS
に関連して定義されているシンボルは、
絶対値を保持しているので、再配置に影響されない。
.\"nakano "relative to" がちょっと訳しにくい。
.\"nakano 要するに SHN_ABS のセクションには絶対値が store される、
.\"nakano 後述の SHN_COMMON には global 変数が store される、
.\"nakano ということなのでしょうが。
.TP
.BR SHN_COMMON
このセクションに関連して定義されているシンボルは、
FORTRAN の COMMON や C の未割り当て外部変数のような共通シンボルである。
.TP
.BR SHN_HIRESERVE
この値は予約済みのインデックス領域の上限を指定する。
システムは
.BR SHN_LORESERVE
と
.BR SHN_HIRESERVE
を含む範囲を予約する。
セクションヘッダテーブルは予約されたインデックスに対応するエントリを持たない。
.\" .El
.PP
セクションヘッダは以下の構造体を持つ:
.in +4n
.nf

typedef struct {
    uint32_t   sh_name;
    uint32_t   sh_type;
    uint32_t   sh_flags;
    Elf32_Addr sh_addr;
    Elf32_Off  sh_offset;
    uint32_t   sh_size;
    uint32_t   sh_link;
    uint32_t   sh_info;
    uint32_t   sh_addralign;
    uint32_t   sh_entsize;
} Elf32_Shdr;
.fi
.in
.in +4n
.nf

typedef struct {
    uint32_t   sh_name;
    uint32_t   sh_type;
    uint64_t   sh_flags;
    Elf64_Addr sh_addr;
    Elf64_Off  sh_offset;
    uint64_t   sh_size;
    uint32_t   sh_link;
    uint32_t   sh_info;
    uint64_t   sh_addralign;
    uint64_t   sh_entsize;
} Elf64_Shdr;
.fi
.in
.PP
32 ビットと 64 ビットのセクションヘッダには実際の違いはない。
.\" .Bl -tag -width "sh_addralign"
.TP 10
.IR sh_name
このメンバはセクション名を定める。
この値はセクションヘッダ文字列テーブルセクションのインデックスであり、
NULL 文字で終端された文字列の場所を示す。
.TP
.IR sh_type
このメンバはセクションの内容と意味が含まれるカテゴリを示す。
.\" .Bl -tag -width "SHT_PROGBITS"
.RS 10
.TP 15
.BR SHT_NULL
この値はセクションヘッダが不活性であることを示す。
これは関連するセクションを持たない。
このセクションヘッダの他のメンバは、未定義の値を持つ。
.TP
.BR SHT_PROGBITS
このセクションはプログラムにより定義される情報を保持する。
この情報の形式と意味は、ひとえにプログラムによって決定される。
.TP
.BR SHT_SYMTAB
このセクションはシンボルテーブルを保持する。
一般には
.BR SHT_SYMTAB
はリンク編集のためのシンボルを提供するが、
動的リンクにも使われる。
完全なシンボルテーブルとして、動的リンクには不要な
多くのシンボルを保持できる。
オブジェクトファイルも
.BR SHT_DYNSYM
セクションを持つことができる。
.TP
.BR SHT_STRTAB
このセクションは文字列テーブルを保持する。
オブジェクトファイルは複数の文字列テーブルセクションを持つことができる。
.TP
.BR SHT_RELA
このセクションは明示的な加数 (addend) を持つ再配置エントリを保持する。
再配置エントリの型は、オブジェクトファイルの 32 ビットクラスでは
.IR Elf32_Rela
である。
オブジェクトファイルは複数の再配置セクションを持つことができる。
.TP
.BR SHT_HASH
このセクションはシンボルハッシュテーブルを保持する。
動的リンクされるオブジェクトは、
シンボルハッシュテーブルを含んでいなければならない。
オブジェクトファイルは 1 つのハッシュテーブルのみを持つことができる。
.TP
.BR SHT_DYNAMIC
このセクションは動的リンクの情報を保持する。
オブジェクトファイルは 1 つの動的セクションのみを持つことができる。
.TP
.BR SHT_NOTE
このセクションはファイルに何らかの印を付ける情報を保持する。
.TP
.BR SHT_NOBITS
このタイプのセクションはファイルの領域を使わないという以外は、
.BR SHT_PROGBITS
と似ている。
このセクションは 1 バイトも含まないが、
.IR sh_offset
メンバは概念的なファイルオフセットを持つ。
.TP
.BR SHT_REL
このセクションは明示的な加数を持たない再配置オフセットを保持する。
再配置オフセットの型は、オブジェクトファイルの 32 ビットクラスでは
.IR Elf32_Rel
である。
オブジェクトファイルは複数の再配置セクションを持つことができる。
.TP
.BR SHT_SHLIB
このセクションは予約されているが、意味は指定されていない。
.TP
.BR SHT_DYNSYM
このセクションは動的リンクシンボルの最小セットを保持する。
オブジェクトファイルは
.BR SHT_SYMTAB
セクションも含むことができる。
.TP
.BR SHT_LOPROC
この値以上で
.BR SHT_HIPROC
以下の範囲はプロセッサ固有の意味に予約されている。
.TP
.BR SHT_HIPROC
この値以下で
.BR SHT_LOPROC
以上の範囲はプロセッサ固有の意味に予約されている。
.TP
.BR SHT_LOUSER
この値はアプリケーションプログラムのために予約される
インデックス範囲の下限を指定する。
.TP
.BR SHT_HIUSER
この値はアプリケーションプログラムのために予約される
インデックス範囲の上限を指定する。
.BR SHT_LOUSER
から
.BR SHT_HIUSER
の間のセクションタイプは、
現在または将来のシステム定義セクションタイプと衝突することなく、
アプリケーションで使用することができる。
.\" .El
.RE
.TP
.IR sh_flags
様々な属性を記述するための 1 ビットのフラグをサポートするセクション。
フラグビットが
.IR sh_flags
に設定された場合、そのセクションについての属性は
"オン"
になる。
それ以外の場合、属性が
"オフ"
であるか属性が適用されない。
未定義の属性は 0 に設定される。
.\" .Bl -tag -width "SHF_EXECINSTR" -compact
.RS 10
.TP 15
.BR SHF_WRITE
このセクションはプロセス実行中に書き込み可能なデータを含む。
.TP
.BR SHF_ALLOC
このセクションはプロセス実行中にメモリを使用する。
制御セクションの中には、オブジェクトファイルのメモリイメージには
存在しないものもある。
そうしたセクションの場合、この属性はオフである。
.TP
.BR SHF_EXECINSTR
このセクションは実行可能なマシン命令を含む。
.TP
.BR SHF_MASKPROC
このマスクに含まれる全てのビットはプロセッサ固有の意味に予約されている。
.RE
.\" .El
.TP
.IR sh_addr
このセクションがプロセスのメモリイメージにある場合、
このメンバはセクションの最初のバイトが存在するアドレスを保持する。
それ以外の場合、このメンバは 0 である。
.TP
.IR sh_offset
このメンバの値は、ファイルの先頭からセクションの最初のバイトへの
バイトオフセットを保持する。
セクションタイプ
.BR SHT_NOBITS
はファイルの領域を全く使用せず、このタイプの
.IR sh_offset
メンバはファイルの概念的な位置を示す。
.\"nakano conceptual placement とは？
.TP
.IR sh_size
このメンバはセクションのサイズ (バイト単位) を保持する。
セクションタイプが
.BR SHT_NOBITS
でない限り、そのセクションはファイル中の
.IR sh_size
バイトを使用する。
タイプが
.BR SHT_NOBITS
のセクションはサイズが 0 でないが、ファイルの領域を使用しない。
.TP
.IR sh_link
このメンバは、セクションヘッダテーブルインデックスリンクを保持する。
この解釈はセクションタイプに依存する。
.TP
.IR sh_info
このメンバは追加情報を保持する。
この解釈はセクションタイプに依存する。
.TP
.IR sh_addralign
アドレス配置に制約があるセクションもある。
セクションが倍長語 (doubleword) を保持する場合、
システムは全てのセクションについて倍長語の配置を保証しなければならない。
つまり、
.IR sh_addr
の値は
.IR sh_addralign
の値を法として 0 と合同でなければならない
(訳注:「sh_addr mod sh_addralign = 0 でなければならない)。
2 の 0 乗と正の整数乗のみが許可される。
0 または 1 はセクションの配置に制約がないことを意味する。
.TP
.IR sh_entsize
シンボルテーブルのような固定サイズエントリのテーブルを保持する
セクションもある。
このようなセクションでは、
このメンバは各エントリのサイズ (バイト単位) を表す。
このメンバが 0 の場合、
そのセクションは固定サイズエントリのテーブルを保持しない。
.\" .El
.PP
さまざまなセクションにプログラム情報・制御情報が保持される:
.\" .Bl -tag -width ".shstrtab"
.TP 10
.IR .bss
このセクションはプログラムのメモリイメージに配置される
非初期化データを保持する。
定義上、システムはプログラムの実行開始時に、データを 0 で初期化する。
このセクションのタイプは
.BR SHT_NOBITS
である。
属性タイプは
.BR SHF_ALLOC
と
.BR SHF_WRITE
である。
.TP
.IR .comment
このセクションはバージョン制御情報を保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは使用されない。
.TP
.IR .ctors
このセクションは C++ コンストラクタ関数への初期化されたポインタを保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは
.BR SHF_ALLOC
と
.BR SHF_WRITE
である。
.TP
.IR .data
このセクションはプログラムのメモリイメージに配置される
初期化済みデータを保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは
.BR SHF_ALLOC
と
.BR SHF_WRITE
である。
.TP
.IR .data1
このセクションはプログラムのメモリイメージに配置される
初期化済みデータを保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは
.BR SHF_ALLOC
と
.BR SHF_WRITE
である。
.TP
.IR .debug
このセクションはシンボリックデバッグ用の情報を保持する。
その内容は指定されていない。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは使用されない。
.TP
.IR .dtors
このセクションは C++ デストラクタ関数への初期化されたポインタを保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは
.BR SHF_ALLOC
と
.BR SHF_WRITE
である。
.TP
.IR .dynamic
このセクションは動的リンク情報を保持する。
このセクションの属性は
.BR SHF_ALLOC
ビットを含む。
.BR SHF_WRITE
ビットが設定されるか否かはプロセッサによる。
このセクションのタイプは
.BR SHT_DYNAMIC
である。
上記の属性を参照すること。
.TP
.IR .dynstr
このセクションは動的リンクに必要な文字列を保持する。
最も一般的には、この文字列はシンボルテーブルエントリと
関連づけられた名前を表す。
このセクションのタイプは
.BR SHT_STRTAB
である。
使用される属性タイプは
.BR SHF_ALLOC
である。
.TP
.IR .dynsym
このセクションは動的リンクシンボルテーブルを保持する。
このセクションのタイプは
.BR SHT_DYNSYM
である。
使用される属性タイプは
.BR SHF_ALLOC
である。
.TP
.IR .fini
このセクションはプロセス終了コードに置かれる実行可能命令を保持する。
プロセスが正常に終了した場合、システムはこのセクションにある
コードを配置して実行する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
使用される属性タイプは
.BR SHF_ALLOC
と
.BR SHF_EXECINSTR
である。
.TP
.IR .gnu.version
このセクションはバージョン・シンボル・テーブルを保持する。
その内容は
.I ElfN_Half
要素の配列である。
このセクションのタイプは
.B SHT_GNU_versym
である。
使用される属性タイプは
.B SHF_ALLOC
である。
.TP
.IR .gnu.version_d
このセクションはバージョンシンボルの定義を保持する。
その内容は
.I ElfN_Verdef
構造体のテーブルである。
このセクションのタイプは
.B SHT_GNU_verdef
である。
使用される属性タイプは
.B SHF_ALLOC
である。
.TP
.IR .gnu.version_r
このセクションはバージョンシンボルが必要とする要素を保持する。
その内容は
.I ElfN_Verneed
構造体のテーブルである。
このセクションのタイプは
.B SHT_GNU_versym
である。
使用される属性タイプは
.B shf_alloc
である。
.TP
.IR .got
このセクションはグローバルオフセットテーブルを保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性はプロセッサ毎に異なる。
.TP
.IR .hash
このセクションはシンボルハッシュテーブルを保持する。
セクションのタイプは
.BR SHT_HASH
である。
使用される属性は
.BR SHF_ALLOC
である。
.TP
.IR .init
このセクションはプロセス初期化コードに配置される実行可能命令を保持する。
プログラムが実行を開始すると、
システムはメインプログラムエントリポイントを呼び出す前に、
このセクションにあるコードを配置して実行する。
このセクションはのタイプは
.BR SHT_PROGBITS
である。
使用される属性は
.BR SHF_ALLOC
と
.BR SHF_EXECINSTR
である。
.TP
.IR .interp
このセクションはプログラムインタプリタのパス名を保持する。
ファイルにこのセクションを含むロード可能セグメントがある場合、
そのセクションの属性には
.BR SHF_ALLOC
ビットが含まれる。
それ以外の場合このビットはオフになる。
このセクションのタイプは
.BR SHT_PROGBITS
である。
.TP
.IR .line
このセクションはシンボリックデバッグのための行番号情報を保持する。
ここにはプログラムソースコードとマシンコードの対応関係が記述される。
内容は指定されていない。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性タイプは使用されない。
.TP
.IR .note
このセクションは以下に記述されている
"Note Section"
形式で情報を保持する。
このセクションのタイプは
.BR SHT_NOTE
である。
属性タイプは使用されない。
通常
OpenBSD
ネイティブ実行可能ファイルは自身を識別するために
.IR .note.openbsd.ident
セクションを持つ。
これによりカーネルは、ファイルをロードする際に
互換 ELF バイナリエミュレーションテストを回避できる。
.TP
.IR .note.GNU-stack
このセクションは Linux のオブジェクトファイルで
スタック属性を宣言するのに使用される。
セクションのタイプは
.B SHT_PROGBITS
である。使用される属性は
.B SHF_EXECINSTR
だけである。この属性は GNU リンカに対して
オブジェクトファイルが実行可能なスタック (executable stack) を必要とする
示すものである。
.TP
.IR .plt
このセクションは手続き (procedure) リンクテーブルを保持する。
このセクションのタイプは
.BR SHT_PROGBITS
である。
属性はプロセッサ毎に異なる。
.TP
.IR .relNAME
このセクションは以下に記述される再配置情報を保持する。
ファイルが再配置を含むロード可能セグメントを持っている場合、
このセクションの属性は
.BR SHF_ALLOC
ビットを含む。
それ以外の場合、そのビットはオフである。
慣例として、
"NAME"
は再配置が適用されるセクションが指定される。
よって
.BR .text
についての再配置セクションは、通常は
.BR .rel.text
という名前を持つ。
このセクションのタイプは
.BR SHT_REL
である。
.TP
.IR .relaNAME
このセクションは以下に記述される再配置情報を保持する。
ファイルが再配置を含むロード可能セグメントを持っている場合、
このセクションの属性は
.BR SHF_ALLOC
ビットを含む。
それ以外の場合、そのビットはオフである。
慣例として、
"NAME"
は再配置が適用されるセクションが指定される。
よって
.BR .text
についての再配置セクションは、通常は
.BR .rela.text
という名前を持つ。
このセクションのタイプは
.BR SHT_RELA
である。
.TP
.IR .rodata
このセクションはリードオンリーのデータを保持する。
このデータはプロセスイメージにおける書き込み不可能なセグメントに置かれる。
このセクションのタイプは
.BR SHT_PROGBITS
である。
使用される属性は
.BR SHF_ALLOC
である。
.TP
.IR .rodata1
このセクションはリードオンリーのデータを保持する。
このデータはプロセスイメージにおける書き込み不可能なセグメントに置かれる。
このセクションのタイプは
.BR SHT_PROGBITS
である。
使用される属性は
.BR SHF_ALLOC
である。
.TP
.IR .shstrtab
このセクションはセクション名を保持する。
このセクションのタイプは
.BR SHT_STRTAB
である。
属性タイプは使用されない。
.TP
.IR .strtab
このセクションは文字列を保持する。
最も一般的なのは、シンボルテーブルエントリに関連づけられた
名前を表す文字列である。
ファイルがシンボル文字列テーブルを含むロード可能セグメントを持つ場合、
セクションの属性は
.BR SHF_ALLOC
ビットを含む。
それ以外の場合、そのビットはオフである。
このセクションのタイプは
.BR SHT_STRTAB
である。
.TP
.IR .symtab
このセクションはシンボルテーブルを保持する。
ファイルがシンボルテーブルを含むロード可能セグメントを持つ場合、
セクションの属性は
.BR SHF_ALLOC
ビットを含む。
それ以外の場合、ビットはオフである。
このセクションのタイプは
.BR SHT_SYMTAB
である。
.TP
.IR .text
このセクションはプログラムの
"テキスト"
または実行可能命令を保持する。
セクションのタイプは
.BR SHT_PROGBITS
である。
使用される属性は
.BR SHF_ALLOC
と
.BR SHF_EXECINSTR
である。
.\" .El
.PP
文字列テーブルセクションは NULL 文字で終端されたキャラクタ配列
(通常文字列と呼ばれるもの) を保持する。
オブジェクトファイルはこれらの文字列を
シンボル名とセクション名を表すために使う。
文字列は、文字列テーブルセクションへのインデックスとして参照される。
インデックス 0 の最初のバイトは、NULL バイト (\(aq\\0\(aq) を
保持すると定義されている。
同様に文字列テーブルの最後のバイトも NULL 文字を保持すると定義されている。
これは全ての文字列が NULL バイトで終端されていることを保証するためである。
.PP
オブジェクトファイルのシンボルテーブルは、
プログラムのシンボル定義と参照を配置または再配置するのに
必要な情報を保持する。
.in +4n
.nf

typedef struct {
    uint32_t      st_name;
    Elf32_Addr    st_value;
    uint32_t      st_size;
    unsigned char st_info;
    unsigned char st_other;
    uint16_t      st_shndx;
} Elf32_Sym;
.fi
.in
.in +4n
.nf

typedef struct {
    uint32_t      st_name;
    unsigned char st_info;
    unsigned char st_other;
    uint16_t      st_shndx;
    Elf64_Addr    st_value;
    uint64_t      st_size;
} Elf64_Sym;
.fi
.in
.PP
32 ビット版と 64 ビット版は同じメンバを持ち、単に順番が異なるだけである。
.\" .Bl -tag -width "st_value"
.TP 10
.IR st_name
このメンバはオブジェクトファイルのシンボル文字列テーブルの
インデックスを保持する。
シンボル文字列テーブルはシンボル名の文字表現を保持する。
この値が 0 でない場合、シンボル名を得るための文字テーブルインデックスを表す。
それ以外の場合、シンボルテーブルは名前を持たない。
.TP
.IR st_value
このメンバは関連づけられたシンボルの値を表す。
.TP
.IR st_size
多くのシンボルにはそれに関連づけられたサイズがある。
シンボルがサイズを持たない場合、またはサイズが不明な場合、
このメンバは 0 である。
.TP
.IR st_info
このメンバはシンボルのタイプとバインディング (binding) 属性を指定する:
.RS 10
.TP 12
.BR STT_NOTYPE
シンボルのタイプが定義されていない。
.TP
.BR STT_OBJECT
シンボルはデータオブジェクトに関連づけられている。
.TP
.BR STT_FUNC
シンボルは関数またはその他の実行コードに関連づけられている。
.TP
.BR STT_SECTION
シンボルはセクションに関連づけられている。
このタイプのシンボルテーブルエントリは、
主として再配置のために存在し、通常は
.BR STB_LOCAL
バインディングを持つ。
.TP
.BR STT_FILE
慣例として、シンボルの名前は
オブジェクトファイルに関連づけられたソースファイルの名前を指定する。
ファイルシンボルは
.BR STB_LOCAL
バインディングを持ち、そのセクションインデックスは
.BR SHN_ABS
である。
ファイルシンボルは、ファイルに他の
.BR STB_LOCAL
シンボルがある場合は、それよりも先に来る。
.TP
.BR STT_LOPROC
この値以上で
.BR STT_HIPROC
以下の範囲はプロセッサ固有の意味に予約されている。
.TP
.BR STT_HIPROC
この値以下で
.BR STT_LOPROC
以上の範囲はプロセッサ固有の意味に予約されている。
.\" .El
.\" .Bl -tag -width "STB_GLOBAL"
.TP
.BR STB_LOCAL
局所的シンボルはその定義を含むオブジェクトファイルの外からは見えない。
同じ名前の局所的シンボルは、お互いに影響を受けることなく、
複数のファイルに存在できる。
.TP
.BR STB_GLOBAL
大域的シンボルは結びつけられている全てのオブジェクトファイルから見える。
1 つのファイルで大域的シンボルが定義されていたら、
他のファイルでは同じシンボルへの参照は未定義でなければならない。
.TP
.BR STB_WEAK
弱シンボルは大域的シンボルに似ているが、その定義は優先度が低い。
.TP
.BR STB_LOPROC
この値以上で
.BR STB_HIPROC
以下の範囲はプロセッサ固有の意味に予約されている。
.TP
.BR STB_HIPROC
この値以下で
.BR STB_LOPROC
以上の範囲はプロセッサ固有の意味に予約されている。
.IP
バインディングとタイプフィールドを
パックしたりアンパックしたりするマクロがある:
.IP
.BR ELF32_ST_BIND (info)
または
.BR ELF64_ST_BIND (info)
.I st_info
の値からバインディングを取り出す。
.IP
.BR ELF32_ST_TYPE (info)
または
.BR ELF64_ST_TYPE (info)
.br
.I st_info
の値からタイプを取り出す。
.IP
.BR ELF32_ST_INFO "(bind, type)"
または
.BR ELF64_ST_INFO "(bind, type)"
.br
バインディングとタイプを
.I st_info
の値に変換する。
.RE
.\" .El
.TP
.IR st_other
このメンバはシンボルの visibility (見える範囲) を規定する。
.\" .Bl -tag -width "STV_PROTECTED"
.RS 10
.TP 16
.PD 0
.BR STV_DEFAULT
デフォルトのシンボル visibility ルール。
.TP
.BR STV_INTERNAL
プロセッサ固有の隠しクラス。
.TP
.BR STV_HIDDEN
シンボルは他のモジュールからは利用できない。
.TP
.BR STV_PROTECTED
横取りできず (not preemptible)、公開されない。
.PD
.PP
visibility 種別を抽出するためのマクロがある。
.PP
.BR ELF32_ST_VISIBILITY (other)
または
.BR ELF64_ST_VISIBILITY (other)
.RE
.\" .El
.TP
.IR st_shndx
各シンボルテーブルエントリは、いくつかのセクションに関連して
"定義されている"。
このメンバは関連するセクションヘッダテーブルインデックスを保持する。
.\" .El
.PP
再配置はシンボル参照とシンボル定義を結合するプロセスである。
再配置可能ファイルはセクションの内容をどのように修正するかに関する
情報を持たなければならない。
これにより、実行可能ファイルと共有オブジェクトファイルは
プロセスのプログラムイメージについての正しい情報を持つことができる。
再配置エントリは以下のようなデータである。
.PP
加数を必要としない再配置構造体。
.in +4n
.nf

typedef struct {
    Elf32_Addr r_offset;
    uint32_t   r_info;
} Elf32_Rel;
.fi
.in
.in +4n
.nf

typedef struct {
    Elf64_Addr r_offset;
    uint64_t   r_info;
} Elf64_Rel;
.fi
.in
.PP
加数を必要とする再配置構造体。
.in +4n
.nf

typedef struct {
    Elf32_Addr r_offset;
    uint32_t   r_info;
    int32_t    r_addend;
} Elf32_Rela;
.fi
.in
.in +4n
.nf

typedef struct {
    Elf64_Addr r_offset;
    uint64_t   r_info;
    int64_t    r_addend;
} Elf64_Rela;
.fi
.in
.\" .Bl -tag -width "r_offset"
.TP 12
.IR r_offset
このメンバは再配置動作が適用される位置を与える。
再配置可能ファイルの場合、この値はセクションの先頭から
再配置で影響を受ける格納単位 (storage unit) までのバイトオフセットである。
実行可能ファイルまたは共有オブジェクトの場合、
この値は再配置で影響を受ける格納単位の仮想アドレスである。
.TP
.IR r_info
このメンバは、再配置が行われなければならないシンボルテーブルインデックスと、
適用される再配置のタイプの両方を与える。
再配置タイプはプロセッサ毎に異なる。
テキストが再配置エントリの再配置タイプ
またはシンボルテーブルインデックスを参照している場合、
それぞれエントリの
.IR r_info
メンバに対して、それぞれ
.BR ELF_[32|64]_R_TYPE
と
.BR ELF[32|64]_R_SYM
を適用した結果を意味する。
.TP
.IR r_addend
このメンバは定数の加数を指定する。
この加数は再配置可能フィールドに格納される値を計算するために使われる。
.\" .El
.PP
\&.dynamic セクションは、関連する動的リンク情報を保持している
一連の構造体を保持する。
d_tag メンバは d_un の解釈を制御する。
.in +4n
.nf

typedef struct {
    Elf32_Sword    d_tag;
    union {
        Elf32_Word d_val;
        Elf32_Addr d_ptr;
    } d_un;
} Elf32_Dyn;
extern Elf32_Dyn _DYNAMIC[];
.fi
.in
.in +4n
.nf

typedef struct {
    Elf64_Sxword    d_tag;
    union {
        Elf64_Xword d_val;
        Elf64_Addr  d_ptr;
    } d_un;
} Elf64_Dyn;
extern Elf64_Dyn _DYNAMIC[];
.fi
.in
.\" .Bl -tag -width "d_tag"
.TP 10
.IR d_tag
このメンバは以下の値を持つことができる:
.\" .Bl -tag -width "DT_SYMBOLIC"
.RS 10
.TP 12
.BR DT_NULL
動的セクションの終りのマーク
.TP
.BR DT_NEEDED
必要なライブラリの名前への文字列テーブルオフセット
.TP
.BR DT_PLTRELSZ
PLT 再配置 (reloc) テーブルのサイズ (バイト単位)
.TP
.BR DT_PLTGOT
PLT と GOT (または何れか一方) のアドレス
.TP
.BR DT_HASH
シンボルハッシュテーブルのアドレス
.TP
.BR DT_STRTAB
文字列テーブルのアドレス
.TP
.BR DT_SYMTAB
シンボルテーブルのアドレス
.TP
.BR DT_RELA
Rela 再配置テーブルのアドレス
.TP
.BR DT_RELASZ
Rela テーブルのサイズ (バイト単位)
.TP
.BR DT_RELAENT
Rela テーブルエントリのサイズ (バイト単位)
.TP
.BR DT_STRSZ
文字列テーブルのサイズ (バイト単位)
.TP
.BR DT_SYMENT
シンボルテーブルエントリのサイズ (バイト単位)
.TP
.BR DT_INIT
初期化関数のアドレス
.TP
.BR DT_FINI
終了関数のアドレス
.TP
.BR DT_SONAME
共有オブジェクトの名前への文字列テーブルオフセット
.TP
.BR DT_RPATH
ライブラリ検索パスへの文字列テーブルオフセット (推奨されない)
.TP
.BR DT_SYMBOLIC
リンカがシンボルの実行可能ファイルより前に
この共有オブジェクトを検索した場合は、警告を出す。
.TP
.BR DT_REL
Rel 再配置テーブルのアドレス
.TP
.BR DT_RELSZ
Rel テーブルのサイズ (バイト単位)
.TP
.BR DT_RELENT
Rel テーブルエントリのサイズ (バイト単位)
.TP
.BR DT_PLTREL
PLT が参照する再配置テーブルのタイプ (Rela または Rel)
.TP
.BR DT_DEBUG
デバッグのために使用されている。内容は定義されていない。
.TP
.BR DT_TEXTREL
これが指定されていない場合、
書き込み不可のセグメントには再配置は適用されない。
.TP
.BR DT_JMPREL
PLT 専用の再配置エントリのアドレス
.TP
.BR DT_BIND_NOW
実行可能ファイルに制御を譲る前に、
全ての再配置を処理するように動的リンカに指示する。
.TP
.BR DT_RUNPATH
ライブラリ検索パスへの文字列テーブルオフセット
.TP
.BR DT_LOPROC
プロセッサ固有の意味の開始
.TP
.BR DT_HIPROC
プロセッサ固有の意味の終了
.RE
.\" .El
.TP
.IR d_val
このメンバは様々な意味に解釈される整数値である。
.TP
.IR d_ptr
このメンバはプログラムの仮想アドレスを表す。
これらのアドレスを解釈する際に、
実際のアドレスは元々のファイルの値と
メモリの基底アドレスから計算される。
ファイルにはこれらのアドレスを修正するための
再配置エントリを含めてはならない。
.TP
.IR _DYNAMIC
\&.dynamic セクションにある全ての動的構造体を含む配列。
これは自動的にリンカに渡される。
.\" .El
.SH 備考
.\" OpenBSD
.\" ELF のサポートは
.\" OpenBSD 1.2
.\" で初めて登場した。
.\" しかし、これをサポートするプラットフォームの全てが
.\" ネイティブバイナリファイルフォーマットとして使っていた訳ではない。
ELF は System V で初めて登場した。
ELF 自体は
System V
で初めて登場した。
ELF フォーマットは採択された標準である。
.\" .SH 著者
.\" この man ページの元々のバージョンは、BSDi の
.\" .Bsx
.\" .Nm elf
.\" man ページに刺激を受けて
.\" .An Jeroen Ruigrok van der Werven
.\" .Aq asmodai@FreeBSD.org
.\" が書いた。
.SH 関連項目
.BR as (1),
.BR gdb (1),
.BR ld (1),
.BR objdump (1),
.BR execve (2),
.BR core (5)
.PP
Hewlett-Packard,
.IR "Elf-64 Object File Format" .
.PP
Santa Cruz Operation,
.IR "System V Application Binary Interface" .
.PP
Unix System Laboratories,
"Object Files",
.IR "Executable and Linking Format (ELF)" .
