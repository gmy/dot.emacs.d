'\" t
.\" Don't change the first line, it tells man that tbl is needed.
.\" This man page is Copyright (c) 1998 by Andi Kleen. Subject to the GPL.
.\" Based on the original comments from Alexey Kuznetsov
.\" $Id: netlink.7,v 1.8 2000/06/22 13:23:00 ak Exp $
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2001-04-04 by Yuichi SATO <ysato@h4.dion.ne.jp>, catch up to LDP v1.35
.\" Updated 2006-06-23 by Yuichi SATO <ysato444@yahoo.co.jp>, catch up to LDP v2.29
.\"
.\"WORD		payload		ペイロード
.\"WORD		capability	権限
.\"
.TH NETLINK  7 2008-11-11 "Linux" "Linux Programmer's Manual"
.SH 名前
netlink \- カーネルとユーザー空間の通信 (AF_NETLINK)
.SH 書式
.nf
.B #include <asm/types.h>
.B #include <sys/socket.h>
.B #include <linux/netlink.h>

.BI "netlink_socket = socket(AF_NETLINK, " socket_type ", " netlink_family );
.fi
.SH 説明
netlink はカーネルモジュールとユーザー空間のプロセス間で
情報をやりとりするために用いられる。
netlink は、ユーザープロセスに対しては
標準的なソケットベースのインターフェースを、
カーネルモジュールにはカーネルの内部 API を提供する。
カーネル内部のインターフェースについてはこの man ページでは記述しない。
また、netlink キャラクタデバイスを用いた
obsolete な netlink インターフェースもあるが、これもこの文書では解説しない。
これは単に過去互換性のために用意されているものにすぎない。

netlink はデータグラム指向のサービスである。
.I socket_type
には
.B SOCK_RAW
と
.B SOCK_DGRAM
の両方とも指定可能である。
しかし netlink プロトコルはデータグラムと raw ソケットの区別をしない。

.I netlink_family
は、通信するカーネルモジュールや netlink グループの選択に用いる。
現在割り当てられている netlink ファミリーは以下の通り。
.TP
.B NETLINK_ROUTE
ルーティングとリンクの更新を受信する。
(IPv4 と IPv6 両方の) ルーティングテーブル・
IP アドレス・リンクパラメータ・近傍設定 (neighbor setup)・
キューイングルール (queueing dicipline)・トラフィッククラス・
パケットのクラス分類の修正に用いることができるだろう
.RB ( rtnetlink (7)
を見よ)。
.TP
.B NETLINK_W1
単線 (1-wire) のサブシステムからのメッセージ。
.TP
.B NETLINK_USERSOCK
ユーザーモードソケットプロトコルのために予約されている。
.TP
.B NETLINK_FIREWALL
IPv4 パケットを netfilter からユーザー空間へ転送する。
.I ip_queue
カーネルモジュールで使用される。
.TP
.B NETLINK_INET_DIAG
.\" FIXME More details on NETLINK_INET_DIAG needed.
INET ソケットをモニタリングする。
.TP
.B NETLINK_NFLOG
Netfilter/iptables ULOG.
.TP
.B NETLINK_XFRM
.\" FIXME More details on NETLINK_XFRM needed.
IPsec.
.TP
.B NETLINK_SELINUX
SELinux のイベント通知。
.TP
.B NETLINK_ISCSI
.\" FIXME More details on NETLINK_ISCSI needed.
Open-iSCSI.
.TP
.B NETLINK_AUDIT
.\" FIXME More details on NETLINK_AUDIT needed.
監査 (audit) を行う。
.TP
.B NETLINK_FIB_LOOKUP
.\" FIXME More details on NETLINK_FIB_LOOKUP needed.
ユーザー空間から FIB ルックアップにアクセスする。
.TP
.B NETLINK_CONNECTOR
カーネルコネクタ。
より詳しい情報はカーネルソースの
.I Documentation/connector/*
を参照すること。
.TP
.B NETLINK_NETFILTER
.\" FIXME More details on NETLINK_NETFILTER needed.
netfilter サブシステム。
.TP
.B NETLINK_IP6_FW
IPv6 パケットを netfilter からユーザー空間へ転送する。
.I ip6_queue
カーネルモジュールで使用される。
.TP
.B NETLINK_DNRTMSG
DECnet ルーティングメッセージ。
.TP
.B NETLINK_KOBJECT_UEVENT
.\" FIXME More details on NETLINK_KOBJECT_UEVENT needed.
ユーザー空間へのカーネルメッセージ
.TP
.B NETLINK_GENERIC
netlink を簡単に使用するための一般的な netlink ファミリー。
.PP
netlink メッセージはバイトストリームからなり、
一つ以上の
.I nlmsghdr
ヘッダと、それに対応するペイロード (payload) が含まれる。
バイトストリームには、標準の
.B NLMSG_*
マクロによってのみアクセスすべきである。
より詳しい情報は
.BR netlink (3)
を見よ。

マルチパートメッセージ (一つ以上の
.I nlmsghdr
ヘッダと、それに対応するペイロードが
一つバイトストリームに含まれる) においては、
先頭のヘッダ・後続のヘッダには
.B NLM_F_MULTI
フラグがセットされる。ただし最後のヘッダだけは例外で、
.B NLMSG_DONE
タイプとなる。

それぞれの
.B nlmsghdr
の後にはペイロードが続く。

.in +4n
.nf
struct nlmsghdr {
    __u32 nlmsg_len;    /* ヘッダを含むメッセージの長さ */
    __u16 nlmsg_type;   /* メッセージの内容のタイプ */
    __u16 nlmsg_flags;  /* 追加フラグ */
    __u32 nlmsg_seq;    /* シーケンス番号 */
    __u32 nlmsg_pid;    /* 送信プロセスの PID */
};
.fi
.in

.I nlmsg_type
は標準のメッセージタイプのどれか一つである:
.B NLMSG_NOOP
メッセージは無視される。
.B NLMSG_ERROR
メッセージはエラーを示し、ペイロードには
.I nlmsgerr
構造体が入る。
.B NLMSG_DONE
メッセージはマルチパートメッセージの終了を伝える。

.in +4n
.nf
struct nlmsgerr {
    int error;        /* 負または 0 の errno は応答を表す */
    struct nlmsghdr msg;  /* エラーを起こしたメッセージのヘッダ */
};
.fi
.in

ある netlink ファミリーで指定できるメッセージタイプは、
通常もっと多い。これらに関しては適切な man ページを見てほしい。
たとえば
.B NETLINK_ROUTE
に関しては
.BR rtnetlink (7)
に書いてある。

.I nlmsg_flags
の標準フラグビット
.br
---------------------------------
.TS
tab(:);
lB l.
NLM_F_REQUEST:要求メッセージ全てでセットされなければならない。
NLM_F_MULTI:T{
このメッセージはマルチパートメッセージの一部である。
マルチパートメッセージは
.B NLMSG_DONE
で終端する。
T}
NLM_F_ACK:成功した場合の応答を要求する。
NLM_F_ECHO:この要求をエコーする。
.TE

GET 要求における追加フラグビット
.br
-------------------------------------
.TS
tab(:);
lB l.
.\" FIXME NLM_F_ATOMIC is not used any more?
NLM_F_ROOT:単一のエントリではなくテーブル全体を返す。
NLM_F_MATCH:T{
メッセージの内容で渡された基準 (criteria) にマッチする
全てのエントリを返す。
まだ実装されていない。
T}
NLM_F_ATOMIC:テーブルのアトミックなスナップショットを返す。
NLM_F_DUMP:便利なマクロ。(NLM_F_ROOT|NLM_F_MATCH) と同じ。
.TE

.B NLM_F_ATOMIC
を使う場合は、
.B CAP_NET_ADMIN
権限を持つか実効ユーザー ID が 0 でなければならない点に注意すること。

NEW 要求における追加フラグビット
.br
-------------------------------------
.TS
tab(:);
lB l.
NLM_F_REPLACE:現存のオブジェクトを置換する。
NLM_F_EXCL:すでにオブジェクトがあったら置換しない。
NLM_F_CREATE:まだオブジェクトがなければ作成する。
NLM_F_APPEND:オブジェクトリストの最後に追加する。
.TE

.I nlmsg_seq
と
.I nlmsg_pid
はメッセージの追跡に使用される。
.I nlmsg_pid
はメッセージの送信元を表す。
メッセージが netlink ソケットで送信されている場合、
.I nlmsg_pid
とプロセスの PID は 1:1 の関係ではない点に注意すること。
より詳しい情報は、
.RB 「 アドレスのフォーマット 」
のセクションを参照すること。

.I nlmsg_seq
と
.I nlmsg_pid
は netlink のコアには見えない (opaque)。

netlink は信頼性の高いプロトコルではない。
netlink はメッセージを行き先に届けるために最善を尽くすが、
メモリが足りなかったりエラーが起こったりすると
メッセージを取りこぼすこともある。
信頼性の高い転送を行いたいときは、
送信者は受信者に応答を要求することもできる。
これには
.B NLM_F_ACK
フラグをセットする。
応答は
.B NLMSG_ERROR
パケットのエラーフィールドを 0 にしたものになる。
アプリケーションは自分自身のメッセージを受けたときには、
応答を生成しなければならない。
カーネルは失敗したパケットに対して、
.B NLMSG_ERROR
メッセージを送ろうとする。
ユーザープロセスはこの慣習にも従う必要がある。

しかし、どのような場合でもカーネルからユーザーへの
信頼性の高い転送は不可能である。
ソケットバッファが満杯の場合、カーネルは netlink メッセージを送信できない。
メッセージは取りこぼされて、カーネルとユーザー空間プロセスは、
カーネルの状態についての同じビューを持つことができなくなる。
これが起こったこと
.RB ( recvmsg (2)
によって
.B ENOBUFS
エラーが返される) を検知して再び同期させるのは、
アプリケーションの責任である。
.SS アドレスのフォーマット
.I sockaddr_nl
構造体はユーザー空間やカーネル空間で netlink クライアントを記述する。
.I sockaddr_nl
はユニキャスト (単一の接続先にだけ送られる) にもできるし、
netlink マルチキャストグループ
.RI ( nl_groups
が 0 でない場合) にも送ることができる。

.in +4n
.nf
struct sockaddr_nl {
    sa_family_t     nl_family;  /* AF_NETLINK */
    unsigned short  nl_pad;     /* 0 である */
    pid_t           nl_pid;     /* プロセス ID */
    __u32           nl_groups;  /* マルチキャストグループマスク */
};
.fi
.in

.I nl_pid
は netlink ソケットのユニキャストアドレスである。
行き先がカーネルの場合は、常に 0 である。
ユーザー空間プロセスの場合、通常は
.I nl_pid
は行き先のソケットを所有しているプロセスの PID である。
ただし、
.I nl_pid
はプロセスではなく netlink ソケットを同定する。
プロセスが複数の netlink ソケットを所有する場合、
.I nl_pid
は最大でも一つのソケットのプロセス ID としか等しくならない。
.I nl_pid
を netlink ソケットに割り当てる方法は 2 つある。
アプリケーションが
.BR bind (2)
を呼ぶ前に
.I nl_pid
を設定する場合、
.I nl_pid
が一意であることを確認するのはアプリケーションの責任となる。
アプリケーションが
.I nl_pid
を 0 に設定した場合、カーネルがこの値を割り当てる。
カーネルはプロセスが最初にオープンした
netlink ソケットに対してプロセス ID を割り当て、
それ以降にプロセスが作成した全ての netlink ソケットにも一意な
.I nl_pid
を割り当てる。

.I nl_groups
はビットマスクで、すべてのビットが netlink グループ番号を表す。
それぞれの netlink ファミリーは 32 のマルチキャストグループのセットを持つ。
それぞれの netlink ファミリーは 32 のマルチキャストグループの
セットを持つ。
.BR bind (2)
がソケットに対して呼ばれると、
.I sockaddr_nl
の
.I nl_groups
フィールドには listen したいグループのビットマスクがセットされる。
デフォルトの値は 0 で、マルチキャストを一切受信しない。
.BR sendmsg (2)
や
.BR connect (2)
によって、あるソケットからメッセージをマルチキャストしたいときは、
.I nl_groups
に送信したいグループのビットマスクをセットすればよい。
実効ユーザー ID が 0 か、
.B CAP_NET_ADMIN
権限を持つユーザーのみが netlink マルチキャストグループに
送信したり、これを listen したりすることができる。
マルチキャストグループ向けメッセージを受信した場合、これ対する応答は
送り主の PID とマルチキャストグループとに送り返すべきである。
.SH バージョン
netlink へのソケットインターフェースは Linux 2.2 の新機能である。

Linux 2.0 は、もっと原始的なデバイスベースの netlink インターフェースを
サポートしていた (これも互換性のために今でも使用できる)。
古いインターフェースに関してはここでは記述しない。

NETLINK_SELINUX は Linux 2.6.4 で登場した。

NETLINK_AUDIT は Linux 2.6.6 で登場した。

NETLINK_KOBJECT_UEVENT は Linux 2.6.10 で登場した。

NETLINK_W1, NETLINK_FIB_LOOKUP は Linux 2.6.13 で登場した。

NETLINK_INET_DIAG, NETLINK_CONNECTOR, NETLINK_NETFILTER は
Linux 2.6.14 で登場した。

NETLINK_GENERIC, NETLINK_ISCSI は Linux 2.6.15 で登場した。
.SH 注意
低レベルのカーネルインターフェースより、
.I libnetlink
または
.I libnl
を通して netlink を利用するほうが良いことが多い。
.SH バグ
この man ページは完成していない。
.SH 例
以下の例では、
.B RTMGRP_LINK
(ネットワークインターフェースの create/delete/up/down イベント) と
.B RTMGRP_IPV4_IFADDR
(IPv4 アドレスの add/delete イベント) マルチキャストグループを listen する
.B NETLINK_ROUTE
netlink を作成している。

.in +4n
.nf
struct sockaddr_nl sa;

memset(&sa, 0, sizeof(sa));
sa.nl_family = AF_NETLINK;
sa.nl_groups = RTMGRP_LINK | RTMGRP_IPV4_IFADDR;

fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
bind(fd, (struct sockaddr *) &sa, sizeof(sa));
.fi
.in

次の例では、netlink メッセージをカーネル (pid 0) に送る方法を示している。
応答を追跡する際の信頼性を高めるために、アプリケーションが
メッセージのシーケンス番号を正しく処理しなければならない点に注意すること。

.in +4n
.nf
struct nlmsghdr *nh;    /* 送信する nlmsghdr とペイロード */
struct sockaddr_nl sa;
struct iovec iov = { (void *) nh, nh\->nlmsg_len };
struct msghdr msg;

msg = { (void *)&sa, sizeof(sa), &iov, 1, NULL, 0, 0 };
memset(&sa, 0, sizeof(sa));
sa.nl_family = AF_NETLINK;
nh\->nlmsg_pid = 0;
nh\->nlmsg_seq = ++sequence_number;
/* NLM_F_ACK を設定することで、カーネルに応答を要求する */
nh\->nlmsg_flags |= NLM_F_ACK;

sendmsg(fd, &msg, 0);
.fi
.in

最後は、netlink メッセージの読み込みの例である。

.in +4n
.nf
int len;
char buf[4096];
struct iovec iov = { buf, sizeof(buf) };
struct sockaddr_nl sa;
struct msghdr msg;
struct nlmsghdr *nh;

msg = { (void *)&sa, sizeof(sa), &iov, 1, NULL, 0, 0 };
len = recvmsg(fd, &msg, 0);

for (nh = (struct nlmsghdr *) buf; NLMSG_OK (nh, len);
     nh = NLMSG_NEXT (nh, len)) {
    /* マルチパートメッセージの終わり */
    if (nh\->nlmsg_type == NLMSG_DONE)
        return;

    if (nh\->nlmsg_type == NLMSG_ERROR)
        /* 何らかのエラー処理を行う */
    ...

    /* ペイロードの解析を続ける */
    ...
}
.fi
.in
.SH 関連項目
.BR cmsg (3),
.BR netlink (3),
.BR capabilities (7),
.BR rtnetlink (7)
.PP
libnetlink に関する情報は
ftp://ftp.inr.ac.ru/ip-routing/iproute2*

libnl に関する情報は
http://people.suug.ch/~tgr/libnl/

RFC 3549 "Linux Netlink as an IP Services Protocol"
