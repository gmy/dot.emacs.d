.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\"
.\" 2.4 Updates by Nivedita Singhvi 4/20/02 <nivedita@us.ibm.com>.
.\" Modified, 2004-11-11, Michael Kerrisk and Andries Brouwer
.\"	Updated details of interaction of TCP_CORK and TCP_NODELAY.
.\"
.\" 2008-11-21, mtk, many, many updates.
.\"     The descriptions of /proc files and socket options should now
.\"     be more or less up to date and complete as at Linux 2.6.27
.\"     (other than the remaining FIXMEs in the page source below).
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2002-11-15, NAKANO Takeo
.\" Updated 2005-02-21, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-09-07, Akihiro MOTOKI
.\" Updated 2005-12-26, Akihiro MOTOKI
.\" Updated 2006-07-19, Akihiro MOTOKI, LDP v2.36
.\" Updated 2008-08-07, Akihiro MOTOKI, LDP v3.05
.\" Updated 2008-12-31, Akihiro MOTOKI, LDP v3.15
.\" Updated 2009-03-01, Akihiro MOTOKI, LDP v3.19
.\"
.\"WORD         full duplex connection  全二重通信
.\"WORD         listening state         接続待ち受け状態
.\"WORD         denial of service attack	DoS 攻撃
.\"WORD         urgent data             緊急データ
.\"
.TH TCP  7 2009-09-30 "Linux" "Linux Programmer's Manual"
.SH 名前
tcp \- TCP プロトコル
.SH 書式
.B #include <sys/socket.h>
.br
.B #include <netinet/in.h>
.br
.B #include <netinet/tcp.h>
.sp
.B tcp_socket = socket(AF_INET, SOCK_STREAM, 0);
.SH 説明
これは RFC\ 793, RFC\ 1122, RFC\ 2001 で定義されている TCP プロトコルを
NewReno 拡張と SACK 拡張を含めて実装したものである。
TCP は、
.BR ip (7)
上の二つのソケット間に、信頼性の高い、ストリーム指向の全二重
(full-duplex) 通信を提供する。
v4 と v6 の両方のバージョンの
.BR ip (7)
に対応している。
TCP は、データが順序を守って到着すること、途中で失われたパケットが
再送されることを保証する。また、パケット単位にチェックサムを
生成、検査することで、転送エラーを検知する。
TCP はレコード境界 (record boundary) を保存しない。

新しく生成されたばかりの TCP ソケットは、
リモートアドレスかローカルアドレスがなく、
したがって詳細が完全に指定された状態ではない。
外部への TCP 接続を生成するには、
.BR connect (2)
を用いてもう一方の TCP ソケットへの接続を確立する。
外部からの新たな接続を受けるには、まず
.BR bind (2)
でソケットをローカルなアドレスとポートに結びつけ、次に
.BR listen (2)
を呼んでソケットを接続待ち受け状態にする。
その後、到着した接続要求に対して
.BR accept (2)
を用い、ソケットを新しく生成する。
.BR accept (2)
または
.BR connect (2)
のコールが成功したソケットは、詳細が完全に指定された状態となり、
データのやりとりが可能となる。接続待ち受け状態の (listening) ソケットや、
接続 (connect) されていないソケットを通してデータをやりとりすることはできない。

Linux は RFC\ 1323 の TCP high performance 拡張をサポートしている。
これには、Protection Against Wrapped Sequence Numbers (PAWS)、
ウィンドウスケーリング、タイムスタンプなどが含まれている。
ウィンドウスケーリングを利用すると、遅延または帯域の大きな接続で、
(64K 以上の) 巨大な TCP ウィンドウを用いることが可能となる。
これを用いるには、送受信のバッファサイズを大きくしなければならない。
システム全体に対するバッファサイズの変更は、ファイル
.I /proc/sys/net/ipv4/tcp_wmem
と
.I /proc/sys/net/ipv4/tcp_rmem
を用いて行うことができる。
また、個々のソケットのみを大きくしたい場合には、
.B SO_SNDBUF
や
.B SO_RCVBUF
ソケットオプションを用いて
.BR setsockopt (2)
コールを用いて設定すればよい。

.B SO_SNDBUF
や
.B SO_RCVBUF
のメカニズムで宣言されるソケットバッファの最大サイズは、ファイル
.I /proc/sys/net/core/rmem_max
や
.I /proc/sys/net/core/wmem_max
で指定されたシステムとしての制限値を超えることはできない。
TCP は実際には
.BR setsockopt (2)
コールが要求したバッファサイズの二倍を割り当てる。
そのため、この後で
.BR getsockopt (2)
コールを行うと、
.BR setsockopt (2)
で要求したバッファサイズとは異なる値が返る。
TCP はこの余分な空間を、管理目的やカーネル内部の構造体に用いている。
.I /proc
ファイルの値は、これらを反映し、実際の TCP ウィンドウよりも大きな値となる。
各接続におけるソケットのバッファサイズ変更を有効にするには、
.BR listen (2)
や
.BR connect (2)
コールの前に設定しなければならない。
より詳しい情報は
.BR socket (7)
を見よ。
.PP
TCP は緊急データ (urgent data) をサポートしている。緊急データは
何らかの重要なメッセージがデータストリームに含まれていること、
そのデータをできるだけ早く処理すべきこと、を受信者に伝えるために用いられる。
緊急データを送るには、
.BR send (2)
に
.B MSG_OOB
オプションを指定する。
緊急データを受信すると、カーネルは
.B SIGURG
シグナルを送信する。送信先は
.B SIOCSPGRP
や
.B FIOSETOWN
ioctl (や POSIX.1-2001 で規定されている
.BR fcntl (2)
.B F_SETOWN
操作) を用いてそのソケットの「所有者」として設定された
プロセスかプロセスグループである。
.B SO_OOBINLINE
ソケットオプションが有効になっていると、緊急データは
通常のデータストリームの中に混ぜて送られる (プログラムは下記の
.B SIOCATMARK
ioctl を使って緊急データの場所を調べることができる)。
無効になっている場合には、
.BR recv (2)
や
.BR recvmsg (2)
で
.B MSG_OOB
フラグがセットされているときにのみ、緊急データを受信できる。

Linux 2.4 では多くの変更がなされ、
スループットとスケーリングが向上し、機能も高まった。
これらの機能には、ゼロコピー
.BR sendfile (2)、
Explicit Congestion Notification、
TIME_WAIT ソケットの新しい管理法、
keep-alive ソケットオプション、
Duplicate SACK 拡張のサポートなどがある。
.SS アドレスのフォーマット
TCP は IP の上層に構築されている
.RB ( ip (7)
を参照)。
.BR ip (7)
に定義されているアドレスフォーマットは TCP にも適用される。
TCP は point-to-point の通信だけをサポートする。
ブロードキャストやマルチキャストはサポートしない。
.SS /proc インタフェース
システム全体に対する TCP パラメータの設定には、
.I /proc/sys/net/ipv4/
ディレクトリ内のファイルによりアクセスできる。
さらに、IP に関連する
.I /proc
インタフェースのほとんどは TCP についても適用される。
.BR ip (7)
を参照のこと。
.I Boolean
は整数値で、
0 以外の値 ("true") は対応するオプションが有効、
0 値 ("false") は無効、であることを意味する。
.TP
.IR tcp_abc " (Integer; default: 0; Linux 2.6.15 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
RFC 3465 で定義されている Appropriate Byte Count (ABC) を制御する。
ABC は、部分的な ACK に応じた輻輳ウィンドウ
.RI ( cwnd )
の増加をより緩やかにする方法である。
以下の値を指定できる。
.RS
.IP 0 3
ACK を受信する毎に
.I cwnd
を増やす (ABC なし)。
.IP 1
フルサイズのセグメントの ACK を受信する毎に
.I cwnd
を増やす。
.IP 2
ACK が遅延 ACK (delayed acknowledgment) を相殺するための 2 セグメントに
対する ACK の場合に、
.I cwnd
を 2 増やすことができる。
.RE
.TP
.IR tcp_abort_on_overflow " (Boolean; default: disabled; Linux 2.4 以降)"
.\" Since 2.3.41
接続を待ち受けているサービスが遅すぎて、受信についていけない場合に、
接続をリセットできるようにする。
これを用いると、バーストによってオーバーフローが起こったときに、
接続を回復できるようになる。このオプションを用いるのは、
受信デーモンを高速化できない場合に「限定する」こと。
このオプションを用いると、そのサーバに接続しているクライアント
にとっては害になることがある。
.TP
.IR tcp_adv_win_scale " (integer; default: 2; Linux 2.4 以降)"
.\" Since 2.4.0-test7
バッファリングのオーバーヘッドの計算方法を、
.I tcp_adv_win_scale
が正の場合は
.I "bytes/2^tcp_adv_win_scale"
に、
.I tcp_adv_win_scale
が負か 0 の場合は
.I "bytes-bytes/2^(\-tcp_adv_win_scale)"
とする。

ソケットの受信バッファ空間はアプリケーションとカーネルで共有される。
TCP はバッファの一部を TCP ウィンドウとして管理し、
これを受信ウィンドウとして接続の他端に通知する。
空間の残りは「アプリケーション」バッファとして用いられ、
スケジューリングやアプリケーションの遅延からネットワークを隔離する。
.I tcp_adv_win_scale
のデフォルト値は 2 であり、
この場合アプリケーションバッファは全体の 1/4 になる。
.TP
.IR tcp_allowed_congestion_control " (String; default: see text; Linux 2.4.20 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
非特権プロセスで利用できる輻輳制御アルゴリズムの選択肢を表示/設定する
.RB ( TCP_CONGESTION
ソケットオプションの説明を参照のこと)。
このリストは
.I tcp_available_congestion_control
で表示されるリストの部分集合となる。
.\" FIXME How are the items in this delimited? Null bytes, spaces, commas?
このリストのデフォルト値は、"reno" と
.I tcp_congestion_control
のデフォルト設定をあわせたものとなる。
.TP
.IR tcp_available_congestion_control " (String; read-only; Linux 2.4.20 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
登録されている輻輳制御アルゴリズムのリストを表示する。
.\" FIXME How are the items in this delimited? Null bytes, spaces, commas?
このリストに載っているものだけが、
.I tcp_allowed_congestion_control
に表示される。
他の輻輳制御アルゴリズムがモジュールとして利用可能だが、
モジュールがロードされていないこともある。
.TP
.IR tcp_app_win  " (integer; default: 31; Linux 2.4 以降)"
.\" Since 2.4.0-test7
この変数は、TCP ウィンドウの何バイト分を
バッファリングのオーバーヘッド用に予約するかを指定する。

そのウィンドウの \fIwindow/2^tcp_app_win\fP と mss の大きいほう (バイト単位)
がアプリケーションバッファとして予約される。
0 を指定すると一切予約領域を取らない。
.\"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_base_mss " (Integer; default: 512; Linux 2.6.17 以降)"
パケット化レイヤの Path MTU discovery (MTU probing) で、
.I search_low
の初期値と使用される値。
MTU probing が有効な場合、この値はその接続の MSS の初期値となる。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_bic " (Boolean; default: disabled; Linux 2.4.27/2.6.6 から 2.6.13 まで)"
BIC TCP 輻輳制御アルゴリズムを有効にする。
BIC-TCP は送信側のみの変更で、
スケーラビリティと TCP 親和性 (friendliness) の両方を提供しつつ、
大きなウィンドウの下での線形な RTT 公平性を保証するものである。
このプロトコルでは additive increase (追加的な増加) と
binary search increase (二分探索増加) といわれる二つの仕組みを
組み合わせている。輻輳ウィンドウが大きいときは、増分の大きい
additive increase により、スケーラビリティを確保しながら
線形な RTT 公平性を保証する。
輻輳ウィンドウが小さいときには binary search increase により
TCP 親和性を達成している。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_bic_low_window " (integer; default: 14; Linux 2.4.27/2.6.6 以降 2.6.13 まで)"
BIC TCP が輻輳ウィンドウの調整を開始する閾値ウィンドウ (パケット単位)
を設定する。この閾値を下回る場合、BIC TCP はデフォルトの TCP Reno と
同じ動作をする。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_bic_fast_convergence " (Boolean; default: enabled; Linux 2.4.27/2.6.6 以降 2.6.13 まで)"
BIC TCP が輻輳ウィンドウの変化により速く反応するようにする。
同じコネクションを共有する二つのフローが一つにまとまるのを
より速く行うようにする。
.TP
.IR tcp_congestion_control " (String; default: 説明参照; Linux 2.4.13 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
新規の接続で使用されるデフォルトの輻輳制御アルゴリズムを設定する。
"reno" アルゴリズムは常に利用可能だが、
カーネル設定次第では別の選択肢が利用できることもある。
このファイルのデフォルト値はカーネル設定の一つとして設定される。
.TP
.IR tcp_dma_copybreak " (integer; default: 4096; Linux 2.6.24 以降)"
システムに DMA コピーエンジンが存在し、カーネルで
.B CONFIG_NET_DMA
オプションが有効になっている場合に、
DMA コピーエンジンにオフロードされるソケットの読み込みサイズの下限値
(バイト単位)。
.TP
.IR tcp_dsack " (Boolean; default: enabled; Linux 2.4 以降)"
.\" Since 2.4.0-test7
RFC\ 2883 の TCP Duplicate SACK のサポートを有効にする。
.TP
.IR tcp_ecn " (Boolean; default: disabled; Linux 2.4 以降)"
.\" Since 2.4.0-test7
RFC\ 2884 の Explicit Congestion Notification を有効にする。
これを有効にすると、間違った振舞いをする古いルータが
経路の途中にあるような接続先に対して影響が生じ、
場合によっては接続が落ちるかもしれない。
.TP
.IR tcp_fack " (Boolean; default: enabled; Linux 2.2 以降)"
.\" Since 2.1.92
TCP Forward Acknowledgement のサポートを有効にする。
.TP
.IR tcp_fin_timeout " (integer; default: 60; Linux 2.2 以降)"
.\" Since 2.1.53
ソケットを強制的にクローズする前に、
最後の FIN パケットを待つ時間を秒単位で指定する。
これは厳密には TCP の仕様を満たしていないが、
DoS 攻撃 (denial of service attack) から身を守るために必要である。
Linux 2.2 ではデフォルト値は 180 であった。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_frto " (integer; default: 0; Linux 2.4.21/2.6 以降)"
.\" Since 2.4.21/2.5.43
F-RTO を有効にする。F-RTO は TCP 再送タイムアウト (RTO) からの
復旧性能を向上させたアルゴリズムである。
この機能は無線環境で特に効果を発揮する。
無線環境では、通常は、中間ルータの輻輳ではなくランダムな無線の干渉
によりパケットロスが発生する。
詳細は RFC\ 4138 を参照。

このファイルは以下のいずれかの値を取ることができる。
.RS
.IP 0 3
F-RTO を無効にする。
.IP 1
基本版の F-RTO アルゴリズムを有効にする。
.IP 2
そのフローで SACK を使用する場合、SACK 拡張版の F-RTO を有効にする。
基本版の F-RTO も SACK が使用されている場合にも使用できるが、
基本版の場合には F-RTO が SACK が有効になった TCP フローでの
パケット数計測と、相性が悪く相互干渉が起こる場面が存在する。
.RE
.IP
Linu 2.6.22 より前では、このパラメータはブール値であり、
上記の 0 と 1 のみをサポートしていた。
.TP
.IR tcp_frto_response " (integer; default: 0; Linux 2.6.22 以降)"
F-RTO が TCP 再送タイムアウトが偽物だと検出した場合
(つまり、TCP がもっと長い再送タイムアウトを設定していれば
タイムアウトが避けられた場合)、
次にどうするかに関して選択肢がいくつかある。
以下の値を選択できる。
.RS
.IP 0 3
レートを元の半分にする。
滑らかで、保守的な反応を行い、RTT 1回分の時間後に
輻輳ウィンドウ
.RI ( cwnd )
とスロースタートの閾値
.RI ( ssthresh )
が半分になる。
.IP 1
非常に保守的な反応。このオプションの使用は推奨されない。
反応が正しかった場合であっても、Linux TCP の他の部分と
うまく連携できないからである。
.I cwnd
と
.I ssthresh
は直ちに半分にされる。
.IP 2
積極的な反応。
不要と判明した輻輳制御の測定情報を取り消す
(TCP がもっと注意深く扱うべき再送が失われる可能性を無視する)。
。
.I cwnd
と
.I ssthresh
はタイムアウト前の値に戻される。
.RE
.TP
.IR tcp_keepalive_intvl " (integer; default: 75; Linux 2.4 以降)"
.\" Since 2.3.18
TCP keep-alive のプローブを送る間隔 (秒単位)。
.TP
.IR tcp_keepalive_probes " (integer; default: 9; Linux 2.2 以降)"
.\" Since 2.1.43
TCP keep-alive プローブの最大回数。
この回数だけ試しても接続先から反応が得られない場合は、
あきらめて接続を切断する。
.TP
.IR tcp_keepalive_time " (integer; default: 7200; Linux 2.2 以降)"
.\" Since 2.1.43
接続がアイドル状態になってから、keep-alive
プローブを送信するまでの時間を秒単位で指定する。
.B SO_KEEPALIVE
ソケットオプションが有効になっていないと
keep-alive は送られない。
デフォルト値は 7200 秒 (2 時間)。
keep-alive が有効になっている場合、
さらにおよそ 11 分 (75 秒間隔の 9 プローブ分)
経過するとアイドル状態の接続は終了させられる。

下層にある接続追跡機構やアプリケーションでのタイムアウトは、
もっとずっと短いかもしれない。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_low_latency " (Boolean; default: disabled; Linux 2.4.21/2.6 以降)"
.\" Since 2.4.21/2.5.60
有効にすると、TCP スタックはスループットを高くするよりも
遅延を少なくすることを優先して判断を行う。
このオプションを無効にすると、スループットを高くすることが優先される。
このデフォルト値を変更した方がよいアプリケーションの例としては
Beowulf コンピュータクラスタが挙げられるだろう。
.TP
.IR tcp_max_orphans " (integer; default: see below; Linux 2.4 以降)"
.\" Since 2.3.41
システムが許容する、
orphan な (どのユーザファイルハンドルにもアタッチされていない)
TCP ソケットの最大数。
この数を越えると、orphan な接続はリセットされ、警告が表示される。
この制限が存在するのは、単純な使用不能 (denial-of-service) 攻撃を
防ぐために過ぎない。この値を小さくすることは推奨しない。
ネットワークの条件によっては、この数値を大きくしないといけないかもしれないが、
orphan なソケットひとつあたり
64K 程度のスワップ不可能なメモリを消費することも注意せよ。
デフォルトの初期値はカーネルパラメータの NR_FILE と等しい。
この初期デフォルト値はシステムのメモリに応じて調整される。
.TP
.IR tcp_max_syn_backlog " (integer; default: 下記参照; Linux 2.2 以降)"
.\" Since 2.1.53
接続してきているクライアントから
ack を受信していない状態の接続リクエストをキューに置ける最大数。
この数値を越えると、カーネルはリクエストを捨て始める。
デフォルトの値は 256 で、
システムに充分なメモリがある (128Mb 以上) 場合は 1024 になり、
メモリが非常に少ない場合 (32 Mb 以下) は 128 になる。
この数値を 1024 以上に増やしたい場合は、
.I include/net/tcp.h
の TCP_SYNQ_HSIZE を
TCP_SYNQ_HSIZE*16<=tcp_max_syn_backlog のように修正し、
カーネルを再コンパイルすることを奨める。
.TP
.IR tcp_max_tw_buckets " (integer; default: 下記参照; Linux 2.4 以降)"
.\" Since 2.3.41
システムが許容する TIME_WAIT 状態にあるソケットの最大数。
この制限が存在するのは、
単純な使用不能 (denial-of-service) 攻撃を防ぐために過ぎない。
デフォルト値は NR_FILE*2 で、システムのメモリに応じて調整される。
この数値を越えると、そのようなソケットはクローズされ、警告が表示される。
.TP
.IR tcp_moderate_rcvbuf " (Boolean; default: enabled; Linux 2.4.17/2.6.7 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
有効にすると、TCP は受信バッファの自動調整を行う。
具体的には、
.RI ( tcp_rmem[2]
を超えない範囲で) バッファの大きさを自動的に変化させ、
その経路で最大のスループットを達成するのに必要な大きさに合わせようとする。
.TP
.IR tcp_mem " (Linux 2.4 以降)"
.\" Since 2.4.0-test7
これは 3 つの整数 [low, pressure, high] からなるベクトル値である。
これらは TCP がメモリ使用量を追跡するために用いられる
(使用量はシステムのページサイズ単位で計測される)。
デフォルトはブート時に利用できるメモリの量から計算される。
(実際には、TCP は
.I "low memory"
のみを使用する。値は 32ビットシステムでは約 900 メガバイトに制限される。
64 ビットシステムではこの制限はない。)
.RS
.TP 10
.I low
TCP は、グローバルにアロケートしたページがこの数値以下の場合は、
メモリアロケーションを調整しない。
.TP
.I pressure
TCP がアロケートしたメモリがこの数値分のページ数を越えると、
TCP はメモリ消費を抑えるようになる。
アロケートしたページ数が
.I low
以下になると、このメモリ圧迫状態から脱する。
.TP
.I high
TCP がグローバルに割り当てるページ数の最大値。
この値はカーネルによって課されるあらゆる制限よりも優先される。
.RE
.TP
.IR tcp_mtu_probing " (integer; default: 0; Linux 2.6.17 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
このパラメータは、TCP のパケット化レイヤの Path MTU discovery を制御する。
このファイルには以下の値を設定できる。
.RS
.IP 0 3
無効にする。
.IP 1
デフォルトでは無効だが、ICMP ブラックホールが検出された場合は有効にする。
.IP 2
常に有効にする。
MSS の初期値として
.I tcp_base_mss
が使用される。
.RE
.TP
.IR tcp_no_metrics_save " (Boolean; default: disabled; Linux 2.6.6 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
デフォルトでは、TCP は接続クローズ時に各種の接続パラメータを
ルートキャッシュ (route cache) に保存し、近い将来に接続が確立された際に
これらの情報を初期状態として使用できるようになっている。
通常は、これにより全体として性能が向上するが、
時として性能の劣化を引き起こすこともある。
.I tcp_no_metrics_save
を有効にすると、TCP は接続クローズ時に接続パラメータをキャッシュ
しなくなる。
.TP
.IR tcp_orphan_retries " (integer; default: 8; Linux 2.4 以降)"
.\" Since 2.3.41
こちらからクローズした接続について、
先方をプローブする最大試行数。
.TP
.IR tcp_reordering " (integer; default: 3; Linux 2.4 以降)"
.\" Since 2.4.0-test7
TCP パケットストリームでパケット順序の逆転が発生しただけであり、
パケットロスが起こったとはみなさない、パケット数の最大値。
この値を超えてパケットの順序逆転が起こると、パケットロスが生じたと
みなし、slow start に入る。
この数値は変更しないほうが良い。
これは、接続中のパケットの並び替えによって生じる
不必要な速度低下や再送を最小化するように設計された、
パケット並び替え (packet reordering) の検知メトリックなのである。
.TP
.IR tcp_retrans_collapse " (Boolean; default: enabled; Linux 2.2 以降)"
.\" Since 2.1.96
再送の際にフルサイズのパケットを送ろうとする。
.TP
.IR tcp_retries1 " (integer; default: 3; Linux 2.2 以降)"
.\" Since 2.1.43
普通に確立されている接続上に、
TCP がネットワーク層を巻き込まずに再送を試みる回数。
再送がこの回数を越えると、まず最初に、
新しい再送を送る前に可能ならネットワーク層に経路を更新させる。
デフォルトは RFC が指定している最少数である 3。
.TP
.IR tcp_retries2 " (integer; default: 15; Linux 2.2 以降)"
.\" Since 2.1.43
確立状態の接続に、この回数 TCP パケットの再送信を
行なってもだめな場合はあきらめる。
デフォルト値は 15 で、これは (再送のタイムアウトに依存するが)
およそ 13〜30 分程度の期間に対応する。
RFC\ 1122 は最小の限界を 100 秒と置いているが、
これはたいていの場合には短すぎると思われる。
.TP
.IR tcp_rfc1337 " (Boolean; default: disabled; Linux 2.2 以降)"
.\" Since 2.1.90
TCP の動作を RFC\ 1337 に準拠させる。
無効にすると、TIME_WAIT 状態のときに RST が受信された場合、
TIME_WAIT 期間の終了を待たずにそのソケットを直ちにクローズする。
.TP
.IR tcp_rmem " (Linux 2.4 以降)"
.\" Since 2.4.0-test7
これは 3 つの整数 [min, default, max] からなるベクトル値である。
これらは TCP が受信バッファサイズを調整するために用いられる。
TCP は、システムで利用できるメモリに応じて、
受信バッファのサイズをこれらの変数の範囲で
以下に示すデフォルトから動的に調整する。
.RS
.TP 10
.I min
各 TCP ソケットが用いる受信バッファの最小サイズ。
デフォルト値はシステムのページサイズである
(Linux 2.4 では、デフォルト値は 4K バイトで、
メモリの少ないシステムでは
.B PAGE_SIZE
バイトに減らされる)。
この値は、メモリ圧迫モードにおいても、
このサイズの割り当てが成功することを保証するために用いられる。
これは、
.B SO_RCVBUF
を用いてソケットの最低受信バッファサイズを宣言する際には用いられない。
.\"nakano Documentation/networking/ip-sysctls.txt
.\"nakano をみる限りではこういう内容のような。
.TP
.I default
TCP ソケットの受信バッファのデフォルトサイズ。
この値は、すべてのプロトコルに対して定義されている、
ジェネリックなグローバルのデフォルトバッファサイズ
.I net.core.rmem_default
より優先される。
デフォルト値は 87380 バイトである
(Linux 2.4 では、メモリの少ないシステムの場合
43689 まで減らされる)。
大きな受信バッファサイズが必要な場合は、
この値を増やすべきである (すべてのソケットに影響する)。
大きな TCP ウィンドウを用いるには、
.I net.ipv4.tcp_window_scaling
を有効にしておかなければならない (デフォルトは有効)。
.TP
.I max
各 TCP ソケットで用いる受信バッファの最大サイズ。
この値よりもグローバルの
.I net.core.rmem_max
が優先される。
これは、
.B SO_RCVBUF
を用いてソケットの受信バッファサイズ制限を宣言する際には用いられない。
.\"nakano 同上。
デフォルト値は以下の式で計算される。

    max(87380, min(4MB, \fItcp_mem\fP[1]*PAGE_SIZE/128))

(Linux 2.4 では、デフォルト値は 87380*2 バイトで、
メモリの少ないシステムでは 87380 まで減らされる。)
.RE
.TP
.IR tcp_sack " (Boolean; default: enabled; Linux 2.2 以降)"
.\" Since 2.1.36
RFC\ 2018 の TCP Selective Acknowledgements を有効にする。
.TP
.IR tcp_slow_start_after_idle " (Boolean; default: enabled; Linux 2.6.18 以降)"
.\" The following is from 2.6.28-rc4: Documentation/networking/ip-sysctl.txt
有効にすると、RFC 2861 の動作が行われ、
アイドル時間経過後に輻輳ウィンドウをタイムアウトさせる。
アイドル時間は現在の RTO (再送タイムアウト) で定義される。
無効にすると、輻輳ウィンドウはアイドル時間経過後もタイムアウトされない。
.TP
.IR tcp_stdurg " (Boolean; default: disabled; Linux 2.2 以降)"
.\" Since 2.1.44
このオプションを有効にすると、 TCP 緊急ポインタ (urgent-pointer)
フィールドを RFC\ 1122 に従った解釈を行う。
.\" RFC\ 793 は緊急ポインタの意味の規定が曖昧であった。
.\" RFC\ 1122 (と RFC\ 961) ではこの曖昧さに一つの解決策を定めた
.\" (残念ながら "間違った" 解決策であったが)。
この解釈に従うと、緊急ポインタは緊急データの最後のバイトを指す。
このオプションを無効にすると、緊急ポインタの解釈が BSD 互換の方法で
行われる: 緊急ポインタは緊急データの後の最初のバイトを指す。
このオプションを有効にすると、相互運用性に問題が生じるかもしれない。
.TP
.IR tcp_syn_retries  " (integer; default: 5; Linux 2.2 以降)"
.\" Since 2.1.38
アクティブな TCP 接続に初期 SYN の再送を試みる最大回数。
この数値は 255 よりも大きくすべきではない。
デフォルトの値は 5 で、およそ 180 秒に対応する。
.TP
.IR tcp_synack_retries " (integer; default: 5; Linux 2.2 以降)"
.\" Since 2.1.38
passive な TCP 接続の SYN/ACK セグメントで再送を試みる最大数。
この数値は 255 よりも大きくすべきではない。
.TP
.IR tcp_syncookies " (Boolean; Linux 2.2 以降)"
.\" Since 2.1.43
.TCP syncookies を有効にする。カーネルは
.B CONFIG_SYNCOOKIES
をつけてコンパイルしておかなければならない。
ソケットのバックログキューがオーバーフローすると、
syncookies が送信される。
syncookies 機能は、SYN flood 攻撃からソケットを守ろうとする。
これはいずれにしても、最終手段として用いるべきである。
これは TCP プロトコルに違反しており、
TCP 拡張のような、TCP の他の部分と衝突してしまう。
クライアントやリレーで問題が起こることもある。
過負荷や設定間違いによって負荷の大きな状態にあるサーバを調整して救うための
機構とみなすべきではない。
そのような用途には、代わりに
.IR tcp_max_syn_backlog ,
.IR tcp_synack_retries ,
.I tcp_abort_on_overflow
などの使用を考えること。
.TP
.IR tcp_timestamps " (Boolean; default: enabled; Linux 2.2 以降)"
.\" Since 2.1.36
RFC\ 1323 の TCP timestamps を有効にする。
.TP
.IR tcp_tso_win_divisor " (integer; default: 3; Linux 2.6.9 以降)"
このパラメータは、一つの TCP Segmentation Offload (TSO) フレームで
消費できる輻輳ウィンドウの割合 (パーセント) を制御する。
バースト性と、どれだけ大きな TSO フレームを構築するかのはトレードオフであり、
このパラメータはその度合いを設定する。
.TP
.IR tcp_tw_recycle " (Boolean; default: disabled; Linux 2.4 以降)"
.\" Since 2.3.15
TIME_WAIT ソケットの素早い再利用を有効にする。
このオプションを有効にすると、
NAT (ネットワークアドレス変換) を用いていると問題が生じるので、
あまり推奨しない。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_tw_reuse " (Boolean; default: disabled; Linux 2.4.19/2.6 以降)"
.\" Since 2.4.19/2.5.43
プロトコルの面から見て問題ない場合に新規コネクションに TIME_WAIT
状態のソケットを再利用することを許可する。技術的に詳しい人の助言や
要請なしにこのオプションを変更すべきではない。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_vegas_cong_avoid  " (Boolean; default: disabled; Linux 2.2 から 2.6.13 まで)"
.\" Since 2.1.8; removed in 2.6.13
TCP Vegas 輻輳制御アルゴリズムを有効にする。
TCP Vegas は帯域を推測することで輻輳の起こり始めを予想するように
TCP の送信側のみに変更を加えたものである。
TCP Vegas は輻輳ウィンドウを修正することで、送信レートを調整する。
TCP Vegas は TCP Reno と比べてパケットロスは少ないが、
TCP Reno ほど積極的な挙動はしない。
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
.TP
.IR tcp_westwood " (Boolean; default: disabled; Linux 2.4.26/2.6.3 から 2.6.13 まで)"
TCP Westwood+ 輻輳制御アルゴリズムを有効にする。
TCP Westwood+ は TCP 輻輳制御の性能を最適化するように TCP Reno の
プロトコルスタックの送信側のみに修正を加えたものである。
輻輳が起こった後で、輻輳ウィンドウや slow start の閾値を
通信両端間の帯域の推測に基づいて設定する。
この推測を使って、TCP Westwood+ は輻輳が発生した時に使っていた
帯域を考慮に入れた slow start の閾値と輻輳ウィンドウを設定する。
TCP Westwood+ は、有線ネットワークにおける TCP Reno の公平性
(fairness) と、無線リンクでのスループットを大きく向上する。
.TP
.IR tcp_window_scaling " (Boolean; default: enabled; Linux 2.2 以降)"
.\" Since 2.1.36
RFC\ 1323 の TCP ウィンドウスケーリングを有効にする。
この機能を用いると、接続先が対応していれば、
TCP 接続で大きな (64K 以上の) ウィンドウが使えるようになる。
通常は TCP ヘッダのウインドウ長フィールドは 16 ビットなので、
ウィンドウサイズは 64K バイト以下に限られる。
もっと大きなウィンドウを使いたい場合は、
アプリケーションはソケットバッファのサイズを増やして、
ウィンドウスケーリングのオプションを利用すればよい。
.I tcp_window_scaling
を無効にしていると、
TCP は他端との接続設定の際に、
ウィンドウスケーリングのネゴシエーションを行なわない。
.TP
.IR tcp_wmem " (Linux 2.4 以降)"
.\" Since 2.4.0-test7
これは 3 つの整数 [min, default, max] からなるベクトル値である。
これらは TCP が送信バッファサイズを調整するために用いられる。
TCP は、システムで利用できるメモリに応じて、送信バッファのサイズを
これらの変数の範囲で以下に示すデフォルトから動的に調整する。
.RS
.TP 10
.I min
各 TCP ソケットが用いる送信バッファの最小サイズ。
デフォルト値はシステムのページサイズである
(Linux 2.4 では、デフォルト値は 4K である)。
この値は、メモリ圧迫モードにおいても、
このサイズ以下の割り当てが成功することを保証するために用いられる。
これは、
.B SO_SNDBUF
を用いてソケットの最低送信バッファサイズを宣言する際には用いられない。
.TP
.I default
TCP ソケットの送信バッファのデフォルトサイズ。
この値は、すべてのプロトコルに対して定義されている、
ジェネリックなグローバルのデフォルトバッファサイズ
.I /proc/sys/net/core/wmem_default
より優先される。
デフォルト値は 16K バイトである。
.\" Linux 2.4 と 2.6 では正しい。
大きな送信バッファサイズが必要な場合は、
この値を増やすべきである (すべてのソケットに影響する)。
大きな TCP ウィンドウを用いるには、
.I /proc/sys/net/ipv4/tcp_window_scaling
を 0 以外の値 (デフォルト値) にしておかなければならない。
.TP
.I max
各 TCP ソケットで用いる送信バッファの最大サイズ。
この値よりも
.IR /proc/sys/net/core/wmem_max
が優先される。
これは
.B SO_SNDBUF
を用いてソケットの送信バッファサイズ制限を宣言する際には用いられない。
デフォルト値は以下の式で計算される。

    max(65536, min(4MB, \fItcp_mem\fP[1]*PAGE_SIZE/128))

(Linux 2.4 では、デフォルト値は 128K バイトで、
メモリの少ないシステムでは 64K にまで減らされる。)
.RE
.TP
.IR tcp_workaround_signed_windows " (Boolean; default: disabled; Linux 2.6.26 以降)"
有効にすると、ウィンドウスケーリングオプションを受信しないのは、
接続相手の TCP が壊れていると考え、ウィンドウを符号付きの量とみなす。
無効にすると、接続相手からウィンドウスケーリングオプションを受信しなかった
場合であっても、接続相手の TCP が壊れているとはみなさない。
.SS ソケットオプション
TCP ソケットのオプションは、
オプションレベル引数に
.I IPPROTO_TCP
を指定した
.BR setsockopt (2)
で設定でき、
.BR getsockopt (2)
で取得できる。
さらに、ほとんどの
.B IPPROTO_IP
ソケットオプションも TCP ソケットに対して有効である。詳細は
.BR ip (7)
を見よ。
.\" FIXME Document TCP_CONGESTION (new in 2.6.13)
.TP
.BR TCP_CORK " (Linux 2.2 以降)"
.\" precisely: since 2.1.127
セットされると、 partial フレームを送信しない。
このオプションが解除されると、
キューイングされた partial フレームが送られる。これは
.BR sendfile (2)
を呼ぶ前にヘッダを前置したり、
スループットを最適化したい場合に便利である。
現在の実装では、
.B TCP_CORK
で出力を抑えることができる時間の上限は 200 ミリ秒である。
この上限に達すると、キューイングされたデータは自動的に送信される。
Linux 2.5.71 以降においてのみ、このオプションを
.B TCP_NODELAY
と同時に用いることができる。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_DEFER_ACCEPT " (Linux 2.4 以降)"
.\" Precisely: since 2.3.38
これを用いると、リスナはデータがソケットに到着した時のみ目覚めるようになる。
整数値 (秒) をとり、
TCP が接続を完了しようと試みる回数を制限できる。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_INFO " (Linux 2.4 以降)"
このソケットの情報を収集するのに用いる。
カーネルは
.I /usr/include/linux/tcp.h
ファイルで定義されている
\fIstruct tcp_info\fP を返す。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_KEEPCNT " (Linux 2.4 以降)"
.\" Precisely: since 2.3.18
接続を落とす前に TCP が試みる keepalive プローブの最大回数。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_KEEPIDLE " (Linux 2.4 以降)"
.\" Precisely: since 2.3.18
この時間 (秒単位) を越えて接続がアイドル状態に留まっていると、
このソケットに
.B SO_KEEPALIVE
ソケットオプションが設定されている場合、
TCP は keepalive プローブを送りはじめる。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_KEEPINTVL " (Linux 2.4 以降)"
.\" Precisely: since 2.3.18
各 keepalive プローブの間隔 (秒単位)。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_LINGER2 " (Linux 2.4 以降)"
.\" Precisely: since 2.3.41
orphan された FIN_WAIT2 状態のソケットの寿命。
このオプションを用いると、システム全体に適用されるファイル
.I /proc/sys/net/ipv4/tcp_fin_timeout
の値を、このソケットに対してのみ変更できる。
.BR socket (7)
レベルのオプション
.B SO_LINGER
と混同しないこと。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.B TCP_MAXSEG
.\" Present in Linux 1.0
送出 TCP パケットの最大セグメントサイズ。
このオプションを接続確立の前に設定すると、
初期パケットで他端にアナウンスする MSS の値も変化する。
インターフェースの MTU よりも大きな (あるいは大きくなってしまった)
値は効果を持たない。
また TCP は、この値よりも最小・最大の制限の方を優先する。
.\" FIXME
.\" Document TCP_MD5SIG, added in Linux 2.6.20,
.\" Needs CONFIG_TCP_MD5SIG
.\" From net/inet/Kconfig
.\" bool "TCP: MD5 Signature Option support (RFC2385) (EXPERIMENTAL)"
.\" RFC2385 specifies a method of giving MD5 protection to TCP sessions.
.\" Its main (only?) use is to protect BGP sessions between core routers
.\" on the Internet.
.\"
.\" There is a TCP_MD5SIG option documented in FreeBSD's tcp(4),
.\" but probably many details are different on Linux
.\" Authors were yoshfuji@linux-ipv6.org and Dave Muller
.\" http://thread.gmane.org/gmane.linux.network/47490
.\" http://www.daemon-systems.org/man/tcp.4.html
.\" http://article.gmane.org/gmane.os.netbsd.devel.network/3767/match=tcp_md5sig+freebsd
.TP
.B TCP_NODELAY
.\" Present in Linux 1.0
設定すると Nagle アルゴリズムを無効にする。
すなわち、データ量が少ない場合でも
各セグメントは可能な限り早く送信される。
設定されていないと、
送信する分だけ溜まるまでデータはバッファされ、
小さなパケットを頻繁に送らずにすみ、
ネットワークを有効に利用できる。
このオプションは
.B TCP_CORK
により上書きされる。しかしながら、
.B TCP_CORK
が設定されている場合であっても、このオプションを設定すると、
送信待ちの出力を明示的に掃き出す (flush) ことになる。
.TP
.BR TCP_QUICKACK " (Linux 2.4.4 以降)"
設定されていると quickack モードを有効にし、クリアされると無効にする。
通常の TCP 動作では ack は必要に応じて遅延されるのに対し、
quickack モードでは ack はすぐに送信される。
このフラグは永続的なものではなく、
quickack モードから/モードへ切り替えるためのものである。
これ以降の TCP プロトコルの動作によっては、
内部のプロトコル処理や、遅延 ack タイムアウトの発生、
データ転送などの要因によって、
再び quickack から出たり入ったりする。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_SYNCNT " (Linux 2.4 以降)"
.\" Precisely: since 2.3.18
接続の試行を中止させる前に TCP が送る SYN 再送数を設定する。
これは 255 より大きくはできない。
移植性の必要なプログラムではこのオプションを用いるべきではない。
.TP
.BR TCP_WINDOW_CLAMP " (Linux 2.4 以降)"
.\" Precisely: since 2.3.41
広報するウィンドウのサイズをこの値に固定する。
カーネルによって最小サイズは SOCK_MIN_RCVBUF/2 に制限されている。
このオプションは移植性の必要なコードでは用いるべきでない。
.SS ソケット API
TCP は帯域外データ (out-of-band data) を限定的にサポートしており、
(1 バイトの) 緊急データという形である。
つまり Linux においては、
接続先が (新しいやり方の) 帯域外データを送ってきた場合、
(古いやり方の)
緊急データは通常のデータとしてストリームに挿入されることになる (これは
.B SO_OOBINLINE
がセットされている場合でも同様である)。
これは BSD ベースのスタックとは異なる。
.PP
Linux は、デフォルトでは urgent ポインタフィールドの解釈に
BSD 互換の方法を用いる。これは RFC\ 1122 に反しているが、
他のスタックと同時に動作させるにはやむを得ない。これは
.I /proc/sys/net/ipv4/tcp_stdurg
によって変更できる。

.BR recv (2)
の
.B MSG_PEEK
フラグを使うと、帯域外データを覗き見することができる。

Linux 2.4 以降では、
.BR recv (2)
(や
.BR recvmsg (2))
の
.I flags
引き数に
.B MSG_TRUNC
を使うことができる。
このフラグを指定すると、受信データは、呼び出し元から渡されたバッファ
にコピーされて返されるのではなく、廃棄されるようになる。
Linux 2.4.4 以降では、
.B MSG_PEEK
を、帯域外データを受信するための
.B MSG_OOB
と組み合わせて使った場合にも、これと同じ効果を持つようになっている。
.SS ioctl
以下の
.BR ioctl (2)
呼び出しは
.I value
に情報を入れて返す。
正しい書式は以下の通り。
.PP
.RS
.nf
.BI int " value";
.IB error " = ioctl(" tcp_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.PP
.I ioctl_type
は以下のいずれか一つである:
.TP
.B SIOCINQ
受信バッファのキューにある、まだ読んでいないデータの量を返す。
ソケットは LISTEN 状態にあってはならず、
さもないとエラー
.RB ( EINVAL )
が返る。
.TP
.B SIOCATMARK
受信データストリームが緊急マークの位置であれば、真を返す (つまり
.I value
が 0 以外)。
.sp
.B SO_OOBINLINE
ソケットオプションが設定されていて、
.B SIOCATMARK
が真を返した場合、次のソケットからの読み込みでは緊急データが
返される。
.B SO_OOBINLINE
ソケットオプションが設定されておらず、
.B SIOCATMARK
が真を返した場合、次のソケットからの読み込みでは緊急データに
続くデータが返される (実際に緊急データを読み込むには
.B recv(MSG_OOB)
とフラグをつける必要がある)。

データの一回の読み込みでは緊急マークを跨がっての読み込みは行われない。
アプリケーションが緊急データの存在を
.RI ( exceptfds
引き数を使って)
.BR select (2)
経由または
.B SIGURG
シグナルの配送を通じて知らされた場合、
.B SIOCATMARK
のチェックと読み込み (何バイト読み込み要求をしてもよい) を
.B SIOCATMARK
が偽を返さなくなるまで繰り返し行うことで、緊急マークの位置まで
読み進めることができる。
.TP
.B SIOCOUTQ
ソケットの送信キューに残っている未送信データの量を返す。
ソケットは LISTEN 状態にあってはならない。
LISTEN 状態の場合にはエラー
.RB ( EINVAL )
となる。
.SS エラー処理
ネットワークエラーが起こると、 TCP はパケットの再送を試みる。
何回かやっても成功しなければ、この接続に対して
.B ETIMEOUT
エラーか最後に受信したエラーが返される。
.PP
アプリケーションによっては、もっと早くエラーを知らせてほしい場合がある。
これには
.B IPPROTO_IP
レベルの
.B IP_RECVERR
ソケットオプションを用いると良い。このオプションが有効になっていると、
到着したエラーはすべてただちにユーザープログラムに渡される。
このオプションは慎重に用いること \(em ルーティングの変更など、
通常ありうるネットワーク状態に対して TCP をより脆弱にしてしまう。
.SH エラー
.TP
.B EAFNOTSUPPORT
.I sin_family
に渡されたソケットアドレスのタイプが
.B AF_INET
ではなかった。
.TP
.B EPIPE
接続先が予期しなかったかたちでソケットをクローズした。
またはシャットダウンされたソケットに読み込みが実行された。
.TP
.B ETIMEDOUT
接続先が、何回かデータを再送しても反応しない。
.PP
.BR ip (7)
で定義されているエラーや、ジェネリックなソケット層におけるエラーも
TCP に返されることがある。
.SH バージョン
Explicit Congestion Notification、zero-copy の
.BR sendfile (2)、
並び替えのサポート、SACK 拡張 (DSACK) などのサポートは
2.4 で導入された。
フォワード確認 (FACK)、TIME_WAIT リサイクル、接続ごとの keepalive
に対するソケットオプションは 2.3 で導入された。
.SH バグ
まだ説明されていないエラーがある。
.br
IPv6 に関する記述がない。
.\" Only a single Linux kernel version is described
.\" Info for 2.2 was lost. Should be added again,
.\" or put into a separate page.
.\" .SH 著者
.\" この man ページは最初 Andi Kleen によって書かれた。
.\" Alexey Kuznetsov の文書 Documentation/networking/ip-sysctl.txt
.\" の情報を元に、Nivedita Singhvi が 2.4 向けに更新した。
.SH 関連項目
.BR accept (2),
.BR bind (2),
.BR connect (2),
.BR getsockopt (2),
.BR listen (2),
.BR recvmsg (2),
.BR sendfile (2),
.BR sendmsg (2),
.BR socket (2),
.BR ip (7),
.BR socket (7)
.sp
RFC\ 793: TCP の仕様。
.br
RFC\ 1122: TCP の要求事項と Nagle アルゴリズムの記述。
.br
RFC\ 1323: TCP のタイムスタンプ・ウィンドウスケーリング各オプション。
.br
RFC\ 1644: TIME_WAIT assassination hazard に関する記述。
.br
RFC\ 3168: Explicit Congestion Notification に関する記述。
.br
RFC\ 2581: TCP 輻輳制御アルゴリズム。
.br
RFC\ 2018 と RFC\ 2883: SACK とその拡張。
