'\" t
.\" Don't change the first line, it tells man that we need tbl.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and copyright (c) 1999 Matthew Wilcox.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\"
.\" 2002-10-30, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added description of SO_ACCEPTCONN
.\" 2004-05-20, aeb, added SO_RCVTIMEO/SO_SNDTIMEO text.
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"	A few small grammar fixes
.\" FIXME
.\" The following are not yet documented:
.\"	SO_PEERNAME
.\"	SO_TIMESTAMPNS
.\"	SO_MARK
.\"	SO_TIMESTAMPING
.\"	SO_PROTOCOL (2.6.32)
.\"	SO_DOMAIN (2.6.32)
.\"	SO_RXQ_OVFL (2.6.33)
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2003-01-20, Akihiro Motoki <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-02-23, Akihiro MOTOKI
.\" Updated 2005-10-05, Akihiro MOTOKI
.\" Updated 2005-12-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.16
.\" Updated 2005-12-26, Akihiro MOTOKI, Catch up to LDP man-pages 2.18
.\" Updated 2006-04-15, Akihiro MOTOKI, Catch up to LDP man-pages 2.29
.\" Updated 2007-01-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.43
.\"
.\"WORD         protocol family         プロトコルファミリー
.\"WORD         socket type             ソケットタイプ
.\"WORD         file descriptor         ファイルディスクリプタ
.\"WORD         anonymous socket        名前無しソケット
.\"WORD         asynchronous            非同期 (的)
.\"WORD         credential              信任状
.\"WORD         capability              権限
.\"WORD         ancillary data          補助データ
.\"
.TH SOCKET 7 2008-12-03 Linux "Linux Programmer's Manual"
.SH 名前
socket \- Linux のソケットインターフェース
.SH 書式
.B #include <sys/socket.h>
.sp
.IB sockfd " = socket(int " socket_family ", int " socket_type ", int " protocol );
.SH 説明
このマニュアルページは Linux ネットワークのソケット層に対する
ユーザインターフェースを記述するものである。
BSD 互換ソケットは、ユーザプロセスとカーネル内部の
ネットワークプロトコルスタック群との間に、
統一的なインターフェースを提供するものである。
プロトコルモジュールは
.I "プロトコルファミリー (protocol familiy)"
(例：
.BR AF_INET ", " AF_IPX ", " AF_PACKET )
と
.I "ソケットタイプ (socket types)"
(例：
.BR SOCK_STREAM ", " SOCK_DGRAM )
に分類できる。
これらに関するより詳しい情報は
.BR socket (2)
を参照のこと。
.SS ソケット層の関数群
これらの関数はユーザプロセスがパケットを送受信したり、その他のソケット操作を
行ったりするために用いられる。詳細はそれぞれのマニュアルページを
見てほしい。

.BR socket (2)
はソケットを生成する。
.BR connect (2)
はソケットをリモートのソケットアドレスに接続する。
.BR bind (2)
はソケットをローカルのソケットアドレスにバインドする。
.BR listen (2)
はソケットに新しい接続が来たら受信するように伝え、
.BR accept (2)
は外部からやってきた接続に対して新しいソケットを得るために用いられる。
.BR socketpair (2)
は互いに接続された二つの名前無しソケット (anonymous socket) を返す
.RB ( AF_UNIX
のような、いくつかのローカルなファミリーでしか実装されていない)。
.PP
.BR send (2),
.BR sendto (2),
.BR sendmsg (2)
はソケットを通してデータを送信し、
.BR recv (2)
.BR recvfrom (2),
.BR recvmsg (2)
はソケットからデータを受信する。
.BR poll (2)
と
.BR select (2)
はデータの到着を待ったり、データ送信の準備ができるまで待ったりする。
さらに、
.BR write (2),
.BR writev (2),
.BR sendfile (2),
.BR read (2),
.BR readv (2)
のような標準的な I/O 操作もデータの読み書きに用いることができる。
.PP
.BR getsockbyname (2)
はローカルのソケットアドレスを返し、
.BR getpeername (2)
はリモートのソケットアドレスを返す。
.BR getsockopt (2)
と
.BR setsockopt (2)
はソケット層のオプションやプロトコルオプションの取得・設定に用いられる。
他のいくつかのオプションの取得・設定には
.BR ioctl (2)
を使うことができる。
.PP
.BR close (2)
はソケットをクローズする。
.BR shutdown (2)
は全二重なソケット接続を部分的にクローズする。
.PP
シーク動作や、 0 以外の位置に対する
.BR pread (2)
や
.BR pwrite (2)
はソケットではサポートされていない。
.PP
非ブロッキングな I/O をソケットで行うことは可能で、
.BR fcntl (2)
を使ってソケットのファイルディスクリプタに
.B O_NONBLOCK
フラグをセットすれば良い。
こうするとブロックされる操作は、 (通常)
.B EAGAIN
エラーで戻ることになる
(後で処理が再試行されることが期待されている)。
.BR connect (2)
では
.B EINPROGRESS
エラーが返される。
この場合、ユーザはさまざまなイベントを
.BR poll (2)
や
.BR select (2)
を使って待つことができる。
.TS
tab(:) allbox;
c s s
l l l.
I/O イベント
イベント:poll フラグ:内容
Read:POLLIN:T{
新しいデータが到着した。
T}
Read:POLLIN:T{
(接続志向のソケットで)
接続の設定が終了した。
T}
Read:POLLHUP:T{
接続先で切断要求が生成された。
T}
Read:POLLHUP:T{
接続が壊れた (接続志向のプロトコルのみ)。
この場合、ソケットに書き込みが行われると
.B SIGPIPE
も送信される。
T}
Write:POLLOUT:T{
ソケットには新しいデータを書き込むのに
充分なバッファ領域がある。
T}
Read/Write:T{
POLLIN|
.br
POLLOUT
T}:T{
外部向けの
.BR connect (2)
が終了した。
T}
Read/Write:POLLERR:T{
非同期的 (asynchronous) なエラーが起こった。
T}
Read/Write:POLLHUP:接続先が片方向を切断した。
Exception:POLLPRI:T{
緊急データ (urgent data) が到着した。
この場合は
.B SIGURG
が送信される。
T}
.\" FIXME . The following is not true currently:
.\" It is no I/O event when the connection
.\" is broken from the local end using
.\" .BR shutdown (2)
.\" or
.\" .BR close (2).
.TE

.PP
.BR poll (2)
や
.BR select (2)
を使う代わりに、カーネルからアプリケーションに
イベントを通知させるのに
.B SIGIO
シグナルを使う方法もある。
この方法を使うには、
.BR fcntl (2)
を用いてソケットのファイルディスクリプタに
.B O_ASYNC
フラグをセットし、
.B SIGIO
に対する有効なシグナルハンドラを
.BR sigaction (2)
によって設定しておく必要がある。
後述の
.I シグナル
に関する議論も参考にすること。
.SS ソケットオプション
これらのソケットオプションは、
.BR setsockopt (2)
を用いれば設定でき、
.BR getsockopt (2)
を用いれば取得できる。
但し、どのソケットの場合も
ソケットレベルには
.B SOL_SOCKET
を指定すること。
.\" SO_ACCEPTCONN は POSIX.1-2001 で定義されており、元は
.\" W R Stevens の UNPv1 に書かれていた。
.TP
.B SO_ACCEPTCONN
このソケットが
.BR listen (2)
によって接続待ち受け状態に設定されているかどうかを示す値を返す。
値 0 は listen 状態のソケットでないことを、
値 1 は listen 状態のソケットであることを示す。
.BR getsockopt (2)
からのみ読み出し可能である。
.TP
.B SO_BINDTODEVICE
このソケットを、引き数で渡したインターフェース名で指定される
(\(lqeth0\(rq のような) 特定のデバイスにバインドする。
名前が空文字列だったり、オプションの長さ (optlen) が 0 の場合には、
ソケットのバインドが削除される。渡すオプションは、インターフェース名が
入ったヌル文字で終端された可変長の文字列である。
文字列の最大のサイズは
.B IFNAMSIX
である。
ソケットがインターフェースにバインドされると、
その特定のインターフェースから受信されたパケットだけを処理する。
このオプションはいくつかのソケットタイプ、特に
.B AF_INET
に対してのみ動作する点に注意すること。
パケットソケットではサポートされていない (通常の
.BR bind (8)
を使うこと)。
.TP
.B SO_BROADCAST
ブロードキャストフラグを設定・取得する。有効になっていると、
データグラムソケットはブロードキャストアドレスに送られたパケットを受信したり、
ブロードキャストアドレスにパケットを送信したりできるようになる。
ストリーム指向のソケットには何の効果もない。
.TP
.B SO_BSDCOMPAT
BSD のバグに対して互換性を取るための機能を有効にする。
この機能は Linux 2.0 と 2.2 の UDP プロトコルモジュールで使用されている。
有効になっていると、 UDP ソケットで受信された ICMP エラーは
ユーザプログラムに渡されない。
これ以降のバージョンのカーネルでは、このオプションのサポートは
段階的に廃止されてきた。
Linux 2.4 ではこのオプションは黙って無視され、
Linux 2.6 ではプログラムがこのオプションを使用すると (printk() を使って)
カーネルの警告メッセージが出力される。
Linux 2.0 では、このオプションを指定すると、
raw ソケットにおいても BSD のバグ (ランダムヘッダ変更、
ブロードキャストフラグのスキップ)
に対する互換機能が有効になっていた。
しかし、こちらは Linux 2.2 で削除された。
.TP
.B SO_DEBUG
ソケットのデバッグ機能を有効にする。
.B CAP_NET_ADMIN
権限を持つプロセスか、実効ユーザ ID が 0 のプロセスでしか
利用できない。
.TP
.B SO_ERROR
保留になっていたソケットエラーを取得してクリアする。
.BR getsockopt (2)
でのみ用いることができる。
整数値をとる。
.TP
.B SO_DONTROUTE
ゲートウェイを経由せず、直接接続されているホストに送信する。
.BR send (2)
操作で
.B MSG_DONTROUTE
フラグをセットした場合も同じ効果が得られる。
ブール整数のフラグを取る。
.TP
.B SO_KEEPALIVE
接続志向のソケットに対する keep-alive メッセージの送信を有効にする。
ブール値の整数フラグをとる。
.TP
.B SO_LINGER
.B SO_LINGER
オプションを取得・設定する。引き数には
.I linger
構造体を取る。
.sp
.in +4n
.nf
struct linger {
    int l_onoff;    /* linger active */
    int l_linger;   /* how many seconds to linger for */
};
.fi
.in
.IP
有効になっていると、
.BR close (2)
や
.BR shutdown (2)
は、そのソケットにキューイングされたメッセージがすべて送信完了するか、
linger (居残り) タイムアウトになるまで返らない。無効になっていると、
これらのコールはただちに戻り、クローズ動作はバックグラウンドで行われる。
ソケットのクローズを
.BR exit (2)
の一部として行った場合には、残っているソケットの
クローズ動作は必ずバックグラウンドに送られる。
.TP
.B SO_OOBINLINE
このオプションを有効にすると、帯域外データ (out-of-band data) は
受信データストリーム中に置かれる。有効にしなければ、
帯域外データは受信時に
.B MSG_OOB
フラグがセットされている場合に限って渡される。
.\" あまりに危険なことができるので、このオプションについては記載しないこと。
.\".B SO_NO_CHECK
.TP
.B SO_PASSCRED
.B SCM_CREDENTIALS
制御メッセージの受信を有効/無効にする。詳細は
.BR unix (7)
を参照のこと。
.\" FIXME Document SO_PASSSEC, added in 2.6.18; there is some info
.\" in the 2.6.18 ChangeLog
.TP
.B SO_PEERCRED
このソケットに接続してきた外部プロセスの信任状 (credential) を返す。
このソケットオプションが利用できるのは、
接続された
.B AF_UNIX
ストリームソケット間、および
.BR socketpair (2)
を使って作成された
.B AF_UNIX
のストリームソケットとデータグラムソケットのペアだけである。
.BR unix (7)
を参照のこと。
.BR connect (2)
や
.BR socketpair (2)
が呼ばれた時に有効であった信任状が返される。
引き数は
.I ucred
構造体である。
.BR getsockopt (2)
でのみ用いることができる。
.TP
.B SO_PRIORITY
プロトコルで定義された優先度を、このソケットから
送信される全てのパケットにセットする。 Linux はネットワークキュー内部の
整列にこの値を用いる。高い優先度を持っているパケットは先に処理される。
ただしそのデバイスのキュー処理のやり方に依存する。
.BR ip (7)
では、外向けパケットの IP type-of-service (TOS) フィールドにもこの値が設定される。
0 から 6 以外の優先度をセットするには
.B CAP_NET_ADMIN
ケーパビリティが必要である。
.TP
.B SO_RCVBUF
ソケットの受信バッファの最大サイズを設定・取得する (バイト単位)。
.BR setsockopt (2)
を使って値が設定されたときに (管理オーバヘッド用の領域を確保するために)
カーネルはこの値を 2倍し、
.\" 他のほとんどの (全ての?) 実装ではこんなことは行っていない -- MTK, Dec 05
.BR getsockopt (2)
はこの 2倍された値を返す。
デフォルトの値は
.I /proc/sys/net/core/rmem_default
ファイルで設定され、許容される最大の値は
.I /proc/sys/net/core/rmem_max
ファイルで設定される。
このオプションの最小値は (2倍した値で) 256 である。
.TP
.BR SO_RCVBUFFORCE " (Linux 2.6.14 以降)"
このソケットオプションを使うと、特権プロセス
.RB ( CAP_NET_ADMIN
を持つプロセス) は
.B SO_RCVBUF
と同じことを実行できる。
ただし、上限
.I rmem_max
を上書きすることができる。
.TP
.BR SO_RCVLOWAT " と " SO_SNDLOWAT
バッファ中に溜めることのできるデータの最小値を指定する。
このサイズを越えると、ソケット層はそのデータをプロトコルに渡し
.RB ( SO_SNDLOWAT )、
受信時にはユーザに渡す
.RB ( SO_RCVLOWAT )。
これら二つの値は 1 に初期化される。
.B SO_SNDLOWAT
は Linux では変更できない
.RB ( setsockopt (2)
は
.B ENOPROTOOPT
エラーで失敗する)。
.B SO_RCVLOWAT
は Linux 2.4 以降でのみ変更可能である。
現状、Linux ではシステムコール
.BR select (2)
と
.BR poll (2)
は
.B SO_RCVLOWAT
の設定を考慮に入れずに動作し、
データが1バイト利用可能になっただけでも、
ソケットは読み出し可能とのマークをつける。
一方、それに続けて行うソケットからの read は
.B SO_RCVLOWAT
バイトのデータが利用可能になるまで停止してしまう。
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=111049368106984&w=2
.\" Tested on kernel 2.6.14 -- mtk, 30 Nov 05
.TP
.BR SO_RCVTIMEO " と " SO_SNDTIMEO
.\" 2.0 では実装されていない。
.\" getsockopt については 2.1.11 で実装された。常に 0 の構造体を返す。
.\" setsockopt については 2.3.41 で実装され、実際に使われている。
送信・受信のタイムアウトを指定する。これを越えるとエラーを報告する。
引き数は
.I "struct timeval"
である。
入出力関数がタイムアウト時間の間ブロックされ、かつデータの送信または
受信が行われていた場合は、転送されたデータ量が関数の返り値となる。
何もデータが転送されずにタイムアウトに達した場合は、
\-1 を返し、
.I errno
に
.B EAGAIN
か
.B EWOULDBLOCK
を設定され、
.\" 実際には EAGAIN が設定される
あたかもソケットに非ブロッキングが指定されたように見える。
タイムアウト値に (デフォルト値である) 0 に設定すると、
操作は決してタイムアウトしなくなる。
タイムアウトが影響を及ぼすのは、
ソケット I/O を実行するシステムコールだけ
(例えば
.BR read (2),
.BR recvmsg (2),
.BR send (2),
.BR sendmsg (2))
である。
.BR select (2),
.BR poll (2),
.BR epoll_wait (2)
などにはタイムアウトは影響を及ぼさない。
.TP
.B SO_REUSEADDR
.BR bind (2)
コールに与えられたアドレスが正しいかを判断するルールで、
ローカルアドレスの再利用を可能にする。
つまり
.B AF_INET
ソケットなら、そのアドレスにバインドされたアクティブな listen
状態のソケットが存在しない限り、バインドが行える。
listen 状態のソケットがアドレス
.B INADDR_ANY
で特定のポートにバインドされている場合には、
このポートに対しては、どんなローカルアドレスでもバインドできない。
引き数はブール整数のフラグである。
.TP
.B SO_SNDBUF
ソケットの送信バッファの最大サイズを設定・取得する (バイト単位)。
.BR setsockopt (2)
を使って値が設定されたときに (管理オーバヘッド用の領域を確保するために)
カーネルはこの値を 2倍し、
.\" 他のほとんどの (全ての?) 実装ではこんなことは行っていない -- MTK, Dec 05
.BR getsockopt (2)
はこの 2倍された値を返す。
デフォルトの値は
.I /proc/sys/net/core/wmem_default
ファイルで設定され、許容される最大の値は
.I /proc/sys/net/core/wmem_max
ファイルで設定される。
このオプションの最小値は (2倍した値で) 2048 である。
.TP
.BR SO_SNDBUFFORCE " (Linux 2.6.14 以降)"
このソケットオプションを使うと、特権プロセス
.RB ( CAP_NET_ADMIN
を持つプロセス) は
.B SO_SNDBUF
と同じことを実行できる。
ただし、上限
.I wmem_max
を上書きすることができる。
.TP
.B SO_TIMESTAMP
.B SO_TIMESTAMP
制御メッセージの受信を有効/無効にする。
タイムスタンプ制御メッセージはレベル
.B SOL_SOCKET
で送信され、
.I cmsg_data
フィールドはこのシステムコールでユーザに渡した
最後のパケットの受信時刻を示す
.I "struct timeval"
である。
制御メッセージの詳細については
.BR cmsg (3)
を参照。
.TP
.B SO_TYPE
ソケットのタイプを整数で取得する (例:
.BR SOCK_STREAM )。
.BR getsockopt (2)
からのみ読み出し可能である。
.SS シグナル
(ローカルもしくはリモート側で) 切断された
接続指向 (connection-oriented) のソケットに対して
書き込みを行うと、その書き込みを行ったプロセスに
.B SIGPIPE
が送られ、
.B EPIPE
が返される。 write 呼び出しに
.B MSG_NOSIGNAL
フラグを指定していた場合はシグナルは送られない。
.PP
.B FIOSETOWN
.BR fcntl (2)
や
.B SIOCSPGRP
.BR ioctl (2)
をプロセスまたはプロセスグループに指定しておくと、
I/O イベントが起きたときに
.B SIGIO
が送られる。
.BR poll (2)
や
.BR select (2)
をシグナルハンドラ内で用いれば、どのソケットでイベントが起こったかを
知ることができる。
(Linux 2.2 における) 別の方法としては、
.B F_SETSIG
.BR fcntl (2)
を用いてリアルタイムシグナルを設定するやり方もある。
リアルタイムシグナルのハンドラは、
.I siginfo_t
の
.I si_fd
フィールドにファイルディスクリプタが入った状態で呼び出される。
詳細は
.BR fcntl (2)
を参照のこと。
.PP
状況によっては (例えば複数のプロセスが一つのソケットにアクセスしているなど)、
.B SIGIO
の原因となった状態は、プロセスがそのシグナルへの対応を行ったときには
消えてしまっているかもしれない。
この場合は、プロセスは再び待つようにすべきである。
Linux は同じシグナルを後で再送するからである。
.\" .SS Ancillary Messages
.SS /proc インタフェース
core のソケットのネットワーキングパラメータには、
.I /proc/sys/net/core/
ディレクトリ内のファイルを通してアクセスできる。
.TP
.I rmem_default
ソケットの受信バッファサイズのデフォルト値 (バイト単位)。
.TP
.I rmem_max
.B SO_RCVBUF
ソケットオプションを用いてユーザが設定できる
ソケットの受信バッファサイズの最大値 (バイト単位)。
.TP
.I wmem_default
ソケットの送信バッファサイズのデフォルト値 (バイト単位)。
.TP
.I wmem_max
.B SO_SNDBUF
ソケットオプションを用いてユーザが設定できる
ソケットの送信バッファサイズの最大値 (バイト単位)。
.TP
.IR message_cost " と " message_burst
トークン・バケット・フィルターを設定する。
これは外部のネットワークイベントによって引き起こされた
負荷限界の警告メッセージに用いられる。
.\"NAKANO "load limit" だと思うんだけど...
.TP
.I netdev_max_backlog
グローバルな入力キューにおける最大のパケット数。
.TP
.I optmem_max
ソケットあたりの、補助データ (ancillary data) とユーザ制御データ
(iovecs のようなもの) との和の最大長。
.\" netdev_fastroute is not documented because it is experimental
.SS ioctl
以下に示す操作には
.BR ioctl (2)
を用いてアクセスできる。

.in +4n
.nf
.IB error " = ioctl(" ip_socket ", " ioctl_type ", " &value_result ");"
.fi
.in
.TP
.B SIOCGSTAMP
最後にユーザに渡されたパケットの受信タイムスタンプを
.I struct timeval
に入れて返す。
これは round trip 時間を正確に測りたいときに便利である。
.I struct timeval
の説明は
.BR setitimer (2)
を見てほしい。
.\"
この ioctl は、ソケットオプション
.B SO_TIMESTAMP
がソケットにセットされていない場合にのみ使用すべきである。
さもなければ、この ioctl は
.B SO_TIMESTAMP
がセットされていなかった間に受信した最後のパケットの時刻を返すか、
そのようなパケットを受信していない場合には失敗する
(つまり、
.BR ioctl (2)
は \-1 を返し、
.I errno
に
.B ENOENT
をセットする)。
.TP
.B SIOCSPGRP
非同期 I/O 操作の終了時や緊急データの受信時に
.B SIGIO
や
.B SIGURG
シグナル群を送るプロセスやプロセスグループを設定する。
引き数は
.I pid_t
へのポインタである。
引き数が正だと、そのプロセスにシグナルが送られる。負だと、
引き数の絶対値を ID に持つプロセスグループにシグナルが送られる。
シグナル受信先には、自分自身のプロセス / 自分の所属するプロセスグループ
しか指定できない。但し、
.B CAP_KILL
ケーパビリティを持っている場合、及び実効ユーザ ID が 0 のプロセスの場合は
この限りではない。
.TP
.B FIOASYNC
.B O_ASYNC
フラグを変更し、ソケットの非同期 (asynchronous) I/O モードを
有効/無効にする。非同期 I/O モードでは、
新しい I/O イベントが起きたときに、
.B SIGIO
シグナルや
.B F_SETSIG
で設定されたシグナル・セットが発行される。
.IP
引き数はブール整数のフラグである。
(この操作は
.BR fcntl (2)
を使って
.B O_ASYNC
フラグをセットするのと同じ意味である。)
.\"
.TP
.B SIOCGPGRP
.B SIGIO
や
.B SIGURG
を受信したカレントプロセス・プロセスグループを取得する。
ない場合は 0 が返る。
.PP
有効な
.BR fcntl (2)
操作:
.TP
.B FIOGETOWN
.B SIOCGPGRP
.BR ioctl (2)
と同じ。
.TP
.B FIOSETOWN
.B SIOCSPGRP
.BR ioctl (2)
と同じ。
.SH バージョン
.B SO_BINDTODEVICE
は Linux 2.0.30 で導入された。
.B SO_PASSCRED
は Linux 2.2 で登場した。
.I /proc
インタフェースは Linux 2.2 で導入された。
.B SO_RCVTIMEO
と
.B SO_SNDTIMEO
は Linux 2.3.41 以降でサポートされている。
それ以前は、タイムアウトはプロトコル固有の固定の設定値で、
読み書きをすることはできなかった。
.SH 注意
Linux は、送受信バッファの半分を内部のカーネル構造体で用いると仮定している。
したがって、対応する
.I /proc
ファイルはネットワーク回線上での大きさの 2 倍になる。

Linux では、
.B SO_REUSEADDR
オプションでポートの再利用が許可されるのは、
そのポートに対して
.BR bind (2)
を前に実行したプログラムとそのポートを再利用
しようとするプログラムの両方で
.B SO_REUSEADDR
がセットされた場合のみである。
この動作は (FreeBSD などの) いくつかの実装とは異なる。これらでは、
後でポートを再利用しようとするプログラムで
.B SO_REUSEADDR
オプションをセットするだけでよい。
たいていはこの違いは見えない。なぜなら、例えばサーバプログラムは
常にこのオプションをセットするように設計されるからである。
.SH バグ
.\" FIXME Document SO_ATTACH_FILTER and SO_DETACH_FILTER
.B CONFIG_FILTER
ソケットオプションである
.B SO_ATTACH_FILTER
と
.B SO_DETACH_FILTER
について記載されていない。これらは libpcap ライブラリを通して
用いる方が良い。
.\" .SH 著者
.\" この man ページは Andi Kleen が書いた。
.SH 関連項目
.BR getsockopt (2),
.BR setsockopt (2),
.BR socket (2),
.BR capabilities (7),
.BR ddp (7),
.BR ip (7),
.BR packet (7),
.BR tcp (7),
.BR udp (7),
.BR unix (7)
