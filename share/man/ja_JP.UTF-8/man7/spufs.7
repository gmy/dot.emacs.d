.\" This is _*_ nroff _*_ source. Emacs, gimme all those colors :)
.\"
.\" Copyright (c) International Business Machines Corp., 2006
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
.\" the GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston,
.\" MA 02111-1307 USA
.\"
.\" HISTORY:
.\" 2005-09-28, created by Arnd Bergmann <arndb@de.ibm.com>,
.\"   Mark Nutter <mnutter@us.ibm.com> and
.\"   Ulrich Weigand <Ulrich.Weigand@de.ibm.com>
.\" 2006-06-16, revised by Eduardo M. Fleury <efleury@br.ibm.com>
.\" 2007-07-10, quite a lot of polishing by mtk
.\"
.\" Japanese Version Copyright (c) 2007  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2007-10-23, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH SPUFS 7 2007-07-10 "Linux" "Linux Programmer's Manual"
.SH 名前
spufs \- SPU ファイルシステム
.SH 説明
SPU ファイルシステムは、Cell Broadband Engine アーキテクチャを実装した
PowerPC マシンにおいて、Synergistic Processor Unit (SPU) にアクセスする
ために使用される。

このファイルシステムでは、POSIX 共有メモリやメッセージキューに
似た名前空間が提供される。
ファイルシステムに書き込み許可を持つユーザは
.BR spu_create (2)
を使って spufs のルートディレクトリに SPU コンテキストを作成できる。

各 SPU コンテキストは、あらかじめ定義されたファイル群を含む
ディレクトリとして表現される。
これらのファイルを使って、論理 SPU の状態を操作できる。
ユーザはこれらのファイルのアクセス許可を変更することはできるが、
ファイルの追加・削除を行うことはできない。
.SS マウントオプション
.TP
.B uid=<uid>
マウントポイントを所有するユーザを設定する。
デフォルトは 0 (root) である。
.TP
.B gid=<gid>
マウントポイントを所有するグループを設定する。
デフォルトは 0 (root) である。
.SS ファイル
.I spufs
のファイルは、ほとんどの場合
.BR read (2)
や
.BR write (2)
といった通常のシステムコールに対する標準的な振る舞いを示すが、
多くの場合通常のファイルシステムでサポートされている操作の一部分だけが
サポートされている。以下のリストでは、サポートされている操作と
それぞれのマニュアルページに書かれている標準的な振る舞いとの違いに
ついて説明する。

.BR read (2)
操作に対応している全てのファイルは
.BR readv (2)
にも対応している。また、
.BR write (2)
操作に対応している全てのファイルは
.BR writev (2)
にも対応している。

全てのファイルは、
.BR access (2)
と
.BR stat (2)
系の操作に対応しているが、
.BR stat (2)
では、呼び出した際に返される
.I stat
構造体のフィールドのうち信頼できる情報が入っているのは
.IR st_mode ,
.IR st_nlink ,
.IR st_uid ,
.I st_gid
だけである。

全てのファイルは
.BR chmod (2)/ fchmod (2)
と
.BR chown (2)/ fchown (2)
の操作に対応しているが、
そのファイルが対応している操作と矛盾するアクセス許可を
付与することはできない (例えば、
.I wbox
ファイルに対する読み出しアクセスなど)。

現時点でのファイルは以下の通りである。
.TP
.B /mem
SPU のローカルストレージの内容。
このファイルは通常の共有メモリファイルと同様にアクセスでき、
SPU のアドレス空間にはコードとデータの両方を格納できる。
オープンされた
.I mem
ファイルに可能な操作は以下である。
.RS
.TP
.BR read "(2), " pread "(2), " write "(2), " pwrite "(2), " lseek (2)
これらは通常通り動作するが、
ファイル末尾を越えての
.BR lseek (2),
.BR write (2),
.BR pwrite (2)
に対応していない点だけが異なる。
ファイルサイズは SPU のローカルストレージのサイズであり、
通常は 256 キロバイトである。
.TP
.BR mmap (2)
.I mem
をプロセスのアドレス空間にマッピングすると、
プロセスのアドレス空間の一部として
SPU のローカル・ストレージにアクセスできるようになる。
.RE
.TP
.B /mbox
SPU から CPU への通信用の一つ目のメールボックス。
このファイルは読み出し専用で、読み出しは 32ビット単位で行う。
このファイルは非停止 (non-blocking) モードでのみ使用でき、
.BR poll (2)
であってもこのファイルで停止 (block) することはない。
オープンされた
.I mbox
ファイルに可能な操作は以下である。
.RS
.TP
.BR read (2)
.I count
が 4 より小さい場合、
.BR read (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
メールボックスにデータがない場合、\-1 が返り、
.I errno
が
.B EAGAIN
に設定される。データの読み出しに成功した場合、
4 バイトがデータバッファに格納され、返り値として 4 が返される。
.RE
.TP
.B /ibox
SPU から CPU への通信用の二つ目のメールボックスである。
このファイルは一つ目のメールボックスファイルと似ているが、
停止 (blocking) I/O モードでの読み出しが可能である。したがって、
.BR poll (2)
や同様のシステムコールを使って、このファイルを監視することができる。
オープンされた
.I ibox
ファイルに可能な操作は以下である。
.RS
.TP
.BR read (2)
.I count
が 4 より小さい場合、
.BR read (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
メールボックスにデータがない場合、ファイルディスクリプタが
.B O_NONBLOCK
でオープンされていれば、返り値は \-1 となり、
.I errno
は
.B EAGAIN
に設定される。

メールボックスにデータがない場合で、ファイルディスクリプタが
.B O_NONBLOCK
なしでオープンされていれば、
SPU が自分の割り込みメールボックスチャネル (interrupt mailbox channel)
に書き込みを行うまで
.BR read (2)
は停止 (block) する。
データの読み出しに成功した場合、
4 バイトがデータバッファに格納され、返り値として 4 が返される。
.TP
.BR poll (2)
.I ibox
ファイルに対する
.BR poll (2)
は、読み出しデータが利用可能になる度に
.I "(POLLIN | POLLRDNORM)"
を返す。
.RE
.TP
.B /wbox
CPU から SPU への通信用のメールボックス。
このファイルは書き込み専用で、書き込みは 32ビット単位で行う。
メールボックスが一杯の場合、
.BR write (2)
は停止 (block) し、
.BR poll (2)
を使ってメールボックスに再度空きができるまで待つことができる。
オープンされた
.I wbox
ファイルに可能な操作は以下である。
.RS
.TP
.BR write (2)
.I count
が 4 より小さい場合、
.BR write (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
メールボックスに空き領域がない場合、ファイルディスクリプタが
.B O_NONBLOCK
でオープンされていれば、返り値は \-1 となり、
.I errno
は
.B EAGAIN
に設定される。

メールボックスに空き領域がない場合で、ファイルディスクリプタが
.B O_NONBLOCK
なしでオープンされていれば、
SPU が自分の PPE メールボックスチャネルから読み出しを行うまで
.BR write (2)
は停止 (block) する。
データの書き込みに成功した場合、返り値として 4 が返される。
.TP
.BR poll (2)
.I wbox
ファイルに対する
.BR poll (2)
は、書き込み用の空間が利用可能になる度に
.I "(POLLOUT | POLLWRNORM)"
を返す。
.RE
.TP
.BR /mbox_stat ", " /ibox_stat ", " /wbox_stat
これらのファイルは読み出し専用で、
各メールボックスの現在のキュー長を保持する。
具体的には、停止 (blocking) せずに、
.IR mbox " や " ibox
から何ワードを読み出すことができ、
.I wbox
に何ワードを書き込むことができるか、ということである。
これらのファイルは 4 バイト単位でのみ読み出しが可能で、
ビッグ・エンディアンの整数値を返す。
オープンされた
.I *box_stat
ファイルに可能な操作は以下である。
.RS
.TP
.BR read (2)
.I count
が 4 より小さい場合、
.BR read (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
それ以外の場合、データバッファに 4 バイトの値が書き込まれる。
この値は、各メールボックスにおいて停止せずに、または
.B EAGAIN
エラーなしで、読み出し可能なエレメント数
.RI ( mbox_stat
や
.I ibox_stat
の場合)、書き込み可能なエレメント数
.RI ( wbox_stat
の場合) である。
.RE
.TP
.BR /npc ", " /decr ", " /decr_status ", " /spu_tag_mask ", " \
/event_mask ", " /srr0
これらのファイルは SPU の内部レジスタを公開するものである。
値は、各レジスタの数値を含むアスキー文字列で表現される。
これらのファイルはデバッグ用として読み出し/書き込みの両モードで利用できるが、
プログラムの通常の操作はこれらのファイルに依存すべきではない。
なぜなら、これらのファイルのうち
.I npc
以外へのアクセスでは SPU コンテキストの保存が必須であり、
SPU コンテキストの保存は非常に効率が悪いからである。
.IP
これらのファイルの内容は以下の通り。
.RS
.TP 16
.I npc
次のプログラムカウンタ
.TP
.I decr
SPU Decrementer
.TP
.I decr_status
Decrementer の状態
.TP
.I spu_tag_mask
SPU の DMA 用の MFA タグマスク
.TP
.I event_mask
SPU の割り込みのイベントマスク
.TP
.I srr0
割り込みリターンアドレスレジスタ
.RE
.IP
これらのファイルに対して可能な操作は以下である。
.RS
.TP
.BR read (2)
.BR read (2)
に渡された
.I count
がレジスタ値と改行 (newline) 文字 1 個を格納するのに必要な長さより短い場合、
同じファイルディスクリプタを続けて read することで、文字列全体を読み出すこと
ができる。この際、実行中の SPU タスクによりレジスタ値の変更の影響は受けない。
文字列全体が読み出されると、それ以降の read 操作では 0 バイトが返され、
新しい値を読み出すには新しいファイルディスクリプタをオープンする必要がある。
.TP
.BR write (2)
このファイルへの
.BR write (2)
操作はレジスタ値を文字列で指定された値に設定する。
文字列の解釈は先頭から開始され、数字以外の文字が初めて登場するか、
バッファの末尾に達するまで行われる。
同じファイルディスクリプタへ続けて write を行うと、
後の write により前の設定が上書きされる。
.RE
.TP
.B /fpcr
このファイルにより Floating Point Status and Control Register に
アクセスできる。このファイルは大きさ 4 バイトである。
.I fpcr
ファイルに可能な操作は以下である。
.RS
.TP
.BR read (2)
.I count
が 4 より小さい場合、
.BR read (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
それ以外の場合、データバッファに 4 バイトの値が書き込まれる。
書き込まれる値は
.I fpcr
レジスタの現在の値である。
.TP
.BR write (2)
.I count
が 4 より小さい場合、
.BR write (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
それ以外の場合、 4 バイトの値がデータバッファからコピーされ、
.I fpcr
レジスタの値が更新される。
.RE
.TP
.BR /signal1 ", " /signal2
これらのファイルにより
SPU の二つのシグナル通知チャネル (signal notification channel) に
アクセスできる。
これらは 32 ビット単位の読み書きができる。
これらのファイルの一つに書き込みを行うと、その SPU の割り込みが
発生するトリガーとなる。
シグナルファイルへ書き込まれた値は、チャネル経由で SPU で読み出したり、
このファイル経由でホストのユーザ空間で読み出したりできる。
SPU が値を読み出した後では、値は 0 にリセットされる。
オープンされた
.I signal1
や
.I signal2
ファイルに可能な操作は以下である。
.RS
.TP
.BR read (2)
.I count
が 4 より小さい場合、
.BR read (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
それ以外の場合、データバッファに 4 バイトの値が書き込まれる。
書き込まれる値は、指定されたシグナル通知レジスタの現在の値である。
.TP
.BR write (2)
.I count
が 4 より小さい場合、
.BR write (2)
は \-1 を返し、
.I errno
を
.B EINVAL
に設定する。
それ以外の場合、 4 バイトの値がデータバッファからコピーされ、
指定されたシグナル通知レジスタの値が更新される。
シグナル通知レジスタの更新には、レジスタ値を入力データで置き換えるモードと
以前の値と入力データのビット単位の OR をとった値に更新するモードがある。
どちらのモードになるかは、それぞれ
.IR signal1_type ,
.I signal2_type
ファイルの内容によって決まる。
.RE
.TP
.BR /signal1_type ", " /signal2_type
これらのファイルは、シグナル通知ファイル
.I signal1
と
.I signal2
の動作を変更する。
これらのファイルは数値を表すアスキー文字列を保持し、
読み出すと "1" か "0" のどちらかが得られる。
モード 0 (上書きモード) では、ハードウェアはシグナルチャネルの内容を
シグナルチャネルに書き込まれたデータで置き換える。
モード 1 (論理 OR モード) では、ハードウェアはシグナルチャネルに
書き込まれたビットを積算していく。
オープンされた
.I signal1_type
や
.I signal2_type
ファイルに可能な操作は以下である。
.RS
.TP
.BR read (2)
.BR read (2)
に渡された
.I count
がレジスタの数値と改行 (newline) 文字 1 個を格納するのに必要な長さより
短い場合、同じファイルディスクリプタを続けて read することで、
文字列全体を読み出すことができる。
文字列全体が読み出されると、それ以降の read 操作では 0 バイトが返され、
新しい値を読み出すには新しいファイルディスクリプタをオープンする必要がある。
.TP
.BR write (2)
このファイルへの
.BR write (2)
操作はレジスタ値を文字列で指定された値に設定する。
文字列の解釈は先頭から開始され、数字以外の文字が初めて登場するか、
バッファの末尾に達するまで行われる。
同じファイルディスクリプタへ続けて write を行うと、
後の write により前の設定が上書きされる。
.RE
.SH 例
.TP
.IR /etc/fstab "  entry"
none  	/spu  	spufs  	gid=spu  	0	0
.\" .SH AUTHORS
.\" Arnd Bergmann <arndb@de.ibm.com>,
.\" Mark Nutter <mnutter@us.ibm.com> and
.\" Ulrich Weigand <Ulrich.Weigand@de.ibm.com>
.SH 関連項目
.BR close (2),
.BR spu_create (2),
.BR spu_run (2)
