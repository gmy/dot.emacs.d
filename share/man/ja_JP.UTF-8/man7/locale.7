.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sat Jul 24 17:28:34 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Jun 01 17:16:34 1997 by Jochen Hein
.\"   <jochen.hein@delphi.central.de>
.\" Modified Thu Apr 25 00:43:19 2002 by Bruno Haible <bruno@clisp.org>
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Wed Dec 24 21:08:08 JST 1997
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified Thu 14 Nov 2002 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"
.\"WORD:	locale	ロケール
.\"
.TH LOCALE 7  2008-12-05 "Linux" "Linux Programmer's Manual"
.SH 名前
locale \- 多言語サポートの解説
.SH 書式
.nf
.B #include <locale.h>
.fi
.SH 説明
ロケール (locale) は言語や文化ルールの集合である。
これらは、メッセージ出力に使用する言語・いろいろな文字集合・
表記に関する慣習といったような面をカバーしている。
プログラムをいろいろな文化に移植可能とするには、
そのプログラムは自分のロケールを決めて、
それに応じた適切な動作ができなければならない。
.PP
ヘッダーファイル
.I <locale.h>
には、この目的に便利なデータ型・関数・マクロなどの宣言がある。
.PP
このヘッダーファイルで宣言されている関数には、
現在のロケールを設定する
.BR setlocale (3)
と、数値のフォーマット方法についての情報を取得する
.BR localeconv (3)
がある。
.PP
プログラムの必要に応じて、ローカル情報はいろいろなカテゴリに分かれており、
それらはマクロとして宣言されている。
これらのマクロを
.BR setlocale (3)
関数の最初の引き数に用いると、
これらのどれかを望むロケールに設定できる。
.TP
.B LC_COLLATE
これは地域的なアルファベット文字列の比較に使用する
.BR strcoll (3)
関数と
.BR strxfrm (3)
関数の動作を変更する。例えばドイツ語のエスツェット (鋭い s)
は、ソートの際 "ss" として扱われる。
.TP
.B LC_CTYPE
これは
.BR isupper (3)
や
.BR toupper (3)
のような文字の判定・操作をする関数や、多バイト文字を扱う
.BR mblen (3)
や
.BR wctomb (3)
のような関数の動作を変更する。
.TP
.B LC_MONETARY
.BR localeconv (3)
によって返される情報を変更する。
これには小数点や区切りコンマの位置など、
数字の表示方法に関する詳細が含まれている。この情報は
.BR strfmon (3)
関数が内部で使用する。
.TP
.B LC_MESSAGES
メッセージ表示に使用する言語を変更する。
また肯定的・否定的な回答をどのように表示するかを変更する。
これらの情報を簡単に使用するために、 GNU C ライブラリには
.BR gettext (3),
.BR ngettext (3),
.BR rpmatch (3)
関数が含まれている。
GNU gettext ファミリーに属する関数は、カテゴリが
.B """C"""
以外の有効なロケールに設定されている場合、環境変数
.B LANGUAGE
にも従う
.RB ( LANGUAGE
はコロン区切りのロケールのリストである)。
.TP
.B LC_NUMERIC
.BR printf (3)
関数および
.BR scanf (3)
関数のファミリーでロケール設定を使うよう指示された場合に
用いる情報を変更する。この情報は
.BR localeconv (3)
関数で取得することもできる。
.TP
.B LC_TIME
.BR strftime (3)
関数の動作を変更し、
地域で利用されている方法で現在時刻を表示する。
例えば、ヨーロッパの多くでは 24時間式の時計を使うが、
アメリカでは 12時間式の時計を使う。
.TP
.B LC_ALL
上記の全て。
.\" FIXME glibc 2.2.2 added new nonstandard locale categories:
.\" LC_ADDRESS, LC_IDENTIFICATION, LC_MEASUREMENT, LC_NAME,
.\" LC_PAPER, LC_TELEPHONE.  These need to be documented.
.PP
.BR setlocale (3)
の二番目の引き数が空文字列 \fB""\fP の場合、
デフォルトのロケールは以下の手順で決定する:
.IP 1.
環境変数
.B LC_ALL
が設定されている場合には
.B LC_ALL
の値が使用される。
.IP 2.
上記のカテゴリのどれかと同じ名前の環境変数が設定されている場合には、
そのカテゴリにはその値が使用される。
.IP 3.
環境変数
.B LANG
が設定されている場合には
.B LANG
の値が使用される。
.PP
地域的な数値フォーマットの情報は
.BR localeconv (3)
関数によって返される
.I struct lconv
で得ることができ、これは以下のように宣言されている:
.in +4n
.nf

struct lconv {

    /* (通貨以外の) 数値情報 */

    char *decimal_point;     /* 小数点の文字 */
    char *thousands_sep;     /* 小数点の左側の数字のグループの
                                区切り文字 */
    char *grouping; /* それぞれの要素は各グループの数字の個数である。
                       インデックス値が大きいほど、左側のグループを表す。
                       要素の値が CHAR_MAX の場合は、最後のグループで
                       あることを意味する。要素の値が 0 の場合は、
                       その要素より左側の全ての要素に前の要素と同じ値を
                       使用することを意味する。 */

    /* 残りのフィールドは通貨情報用である */

    char *int_curr_symbol;   /* 最初の三つの文字は ISO 4217 の通貨記号。
                                四番目の文字は区切り文字。
                                五番目は \(aq\0\(aq。 */
    char *currency_symbol;   /* 地域の通貨記号 */
    char *mon_decimal_point; /* 小数点の文字 */
    char *mon_thousands_sep; /* 上記の `thousands_sep' と同様 */
    char *mon_grouping;      /* 上記の `grouping' と同様 */
    char *positive_sign;     /* 正の値の符号 */
    char *negative_sign;     /* 負の値の符号 */
    char  int_frac_digits;   /* 国際的な小数部の数字 */
    char  frac_digits;       /* 地域の小数部の数字 */
    char  p_cs_precedes;     /* 正の値の前に通貨記号を置く場合は 1,
                                後ろに置く場合は 0 */
    char  p_sep_by_space;    /* 正の値と通貨記号の間にスペースを
                                入れる場合は 1 */
    char  n_cs_precedes;     /* 負の値の前に通貨記号を置く場合は 1,
                                後ろに置く場合は 0 */
    char  n_sep_by_space;    /* 負の値と通貨記号の間にスペースを
                                入れる場合は 1 */
    /* 正と負の符号の位置:
       0 値と通貨記号を括弧で囲む
       1 符号は値と通貨記号の前に置く
       2 符号は値と通貨記号の後に置く
       3 符号は通貨記号の直後に置く
       4 符号は通貨記号の直前に置く    */
    char  p_sign_posn;
    char  n_sign_posn;
};
.fi
.in
.SH 準拠
POSIX.1-2001

GNU gettext 関数ファミリーは LI18NUX2000 で規定されている。
.SH 関連項目
.BR locale (1),
.BR localedef (1),
.BR gettext (3),
.BR localeconv (3),
.BR ngettext (3),
.BR nl_langinfo (3),
.BR rpmatch (3),
.BR setlocale (3),
.BR strcoll (3),
.BR strfmon (3),
.BR strftime (3),
.BR strxfrm (3)
