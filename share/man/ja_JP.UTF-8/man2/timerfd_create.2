.\" Copyright (C) 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston,
.\" MA  02111-1307  USA
.\"
.\" Japanese Version Copyright (c) 2008  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2008-11-19, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.13
.\" Updated 2009-04-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP 3.20
.\" 
.TH TIMERFD_CREATE 2 2009-03-10 Linux "Linux Programmer's Manual"
.SH 名前
timerfd_create, timerfd_settime, timerfd_gettime \-
ファイルディスクリプタ経由で通知するタイマー
.SH 書式
.nf
.B #include <sys/timerfd.h>
.sp
.BI "int timerfd_create(int " clockid ", int " flags );
.sp
.BI "int timerfd_settime(int " fd ", int " flags ,
.BI "                    const struct itimerspec *" new_value ,
.BI "                    struct itimerspec *" old_value );
.sp
.BI "int timerfd_gettime(int " fd ", struct itimerspec *" curr_value );
.fi
.SH 説明
これらのシステムコールは、満了通知をファイルディスクリプタ経由で配送する
タイマーの生成と操作を行う。
これらは、
.BR setitimer (2)
や
.BR timer_create (2)
を用いる方法の代わりとなるものであり、このファイルディスクリプタを
.BR select (2),
.BR poll (2),
.BR epoll (7)
で監視できるという利点がある。

これらのシステムコールを使うのは、それぞれ
.BR timer_create (2),
.BR timer_settime (2),
.BR timer_gettime (2)
を使うのと同様である
.RB ( timer_getoverrun (2)
に対応するものはなく、以下で説明するように
この機能は
.BR read (2)
により提供される)。
.\"
.SS timerfd_create()
.BR timerfd_create ()
は新規のタイマーオブジェクトを生成し、そのタイマーを参照するファイル
ディスクリプタを返す。
.I clockid
引き数は、タイマーの進捗を管理するためのクロックを指定するもので、
.B CLOCK_REALTIME
か
.B CLOCK_MONOTONIC
のいずれかでなければならない。
.B CLOCK_REALTIME
はシステム全体で使用されるクロックで、このクロックは変更可能である。
.B CLOCK_MONOTONIC
は変更されることのないクロックで、(システム時刻の手動での変更などの)
システムクロックの不連続な変化の影響を受けない。
これらのクロックの現在の値は
.BR clock_gettime (2)
を使って取得できる。

Linux 2.6.27 以降では、
以下の値のいくつかをビット単位の論理和 (OR) で指定することで、
.BR timerfd_create ()
の振舞いを変更することができる。
.TP 14
.B TFD_NONBLOCK
新しく生成されるオープンファイル記述 (open file description) の
.B O_NONBLOCK
ファイルステータスフラグをセットする。
このフラグを使うことで、
.B O_NONBLOCK
をセットするために
.BR fcntl (2)
を追加で呼び出す必要がなくなる。
.TP
.B TFD_CLOEXEC
新しいファイルディスクリプタに対して
close-on-exec
.RB ( FD_CLOEXEC )
フラグをセットする。
このフラグが役に立つ理由については、
.BR open (2)
の
.B O_CLOEXEC
フラグの説明を参照のこと。
.PP
バージョン 2.6.26 以前の Linux では、
.I flags
引き数は未使用であり、0 を指定しなければならない。
.SS timerfd_settime()
.BR timerfd_settime ()
は、ファイルディスクリプタ
.I fd
により参照されるタイマーを開始したり停止したりする。

.I new_value
引き数は、タイマーの満了時間 (expiration) の初期値と間隔 (interval) を
指定する。この引き数で使用されている
.I itimerspec
構造体には 2 つのフィールドがあり、各フィールドは
.I timespec
型の構造体である。
.in +4n
.nf

struct timespec {
    time_t tv_sec;                /* Seconds */
    long   tv_nsec;               /* Nanoseconds */
};

struct itimerspec {
    struct timespec it_interval;  /* Interval for periodic timer */
    struct timespec it_value;     /* Initial expiration */
};
.fi
.in
.PP
.I new_value.it_value
はタイマーの満了時間の初期値を、秒とナノ秒で指定する。
.I new_value.it_value
のフィールドのうち少なくとも一方に 0 以外の値を設定すると、
タイマーが開始される。
両方のフィールドに 0 を設定すると、タイマーが停止する。

.I new_value.it_interval
はタイマーの一回目の満了後に繰り返しタイマーの満了間隔を、秒とナノ秒で指定する。
.I new_value.it_interval
のフィールドのうち少なくとも一方に 0 以外の値を設定すると、
繰り返しタイマーが有効になる。
両方のフィールドに 0 を設定した場合、タイマーは
.I new_value.it_value
で指定された時間後に、一回だけ満了して停止する。

.I flags
引き数には 0 か
.B TFD_TIMER_ABSTIME
を指定する。
0 は相対時刻タイマーを意味し、
.I new_value.it_interval
では
.I clockid
で指定されたクロックの現在の値からの相対的な時刻を指定する。
.B TFD_TIMER_ABSTIME
は絶対時刻タイマーを意味し、
.I new_value.it_interval
では
.I clockid
で指定されたクロックの絶対時刻を指定する。つまり、
クロックの値が
.I new_value.it_interval
で指定された時刻に達したら、タイマーが満了する。

.I old_value
引き数を通じて、
.BR timerfd_settime ()
を呼び出した時点でのタイマーの設定を保持した構造体が返される。
下記の
.BR timerfd_gettime ()
の説明を参照。
.\"
.SS timerfd_gettime()
.BR timerfd_gettime ()
は、ファイルディスクリプタ
.I fd
で参照されるタイマーの現在の設定が入った
.I itimerspec
構造体を、
.I curr_value
に格納して返す。

.I it_value
フィールドは、タイマーが次に満了するまでの残り時間を返す。
この構造体の両方のフィールドが 0 であれば、タイマーは現在停止している。
タイマー設定時に
.B TFD_TIMER_ABSTIME
フラグが指定されたかに関わらず、このフィールドは常に相対値が格納される。

.I it_interval
フィールドは、タイマーの間隔を返す。
この構造体の両方のフィールドが 0 であれば、タイマーは
.I new_value.it_value
で指定された時間後に一回だけ満了して停止するように設定されている。
.SS タイマー・ファイルディスクリプタに対する操作
.BR timerfd_create ()
が返すファイルディスクリプタは以下の操作をサポートしている。
.TP
.BR read (2)
.BR timerfd_settime ()
を使ってタイマーの設定が最後変更されて以降、または
.BR read (2)
の呼び出しに最後に成功して以降に、タイマーの満了が一回以上発生していれば、
.BR read (2)
に渡されたバッファに、タイマー満了回数を示す 8 バイトの unsigned 型の整数
.RI ( uint64_t )
が返される
(返される値はホストバイトオーダ、つまりそのホストマシンにおける
整数の通常のバイトオーダである)。
.IP
.BR read (2)
を行った時点でタイマーの満了が発生していなければ、
.BR read (2)
は停止 (block) する、もしくはファイルディスクリプタが
非停止 (nonblocking) に設定されている場合はエラー
.B EAGAIN
で失敗する (非停止モードにするには、
.BR fcntl (2)
の
.B F_SETFL
命令で
.B O_NONBLOCK
フラグをセットする)。
.IP
渡されたバッファのサイズが 8 バイト未満の場合、
.BR read (2)
はエラー
.B EINVAL
で失敗する。
.TP
.BR poll "(2), " select "(2) (と同様の操作)"
一つ以上のタイマー満了が発生していれば、
ファイルディスクリプタは読み出し可能となる
.RB ( select (2)
の
.I readfds
引き数や
.BR poll (2)
の
.B POLLIN
フラグ)。
.IP
このファイルディスクリプタは、他のファイルディスクリプタ多重 API である
.BR pselect (2),
.BR ppoll (2),
.BR epoll (7)
もサポートしている。
.TP
.BR close (2)
ファイルディスクリプタがそれ以降は必要なくなった際には、クローズすべきである。
同じ timer オブジェクトに関連付けられたファイルディスクリプタが全て
クローズされると、そのタイマーは解除され、
そのオブジェクト用の資源がカーネルにより解放される。
.\"
.SS fork(2) での扱い
.BR fork (2)
が行われると、子プロセスは
.BR timerfd_create ()
により生成されたファイルディスクリプタのコピーを
継承する。そのファイルディスクリプタは、親プロセスの対応する
ファイルディスクリプタと同じタイマーオブジェクトを参照しており、
子プロセスの
.BR read (2)
でも同じタイマーの満了に関する情報が返される。
.\"
.SS execve(2) での扱い
.BR execve (2)
の前後で
.BR timerfd_create ()
により生成されたファイルディスクリプタは保持され、
タイマーが開始されていた場合にはタイマーの満了が発生し続ける。
.SH 返り値
成功すると、
.BR timerfd_create ()
は新しいファイルディスクリプタを返す。
エラーの場合、\-1 を返し、
.I errno
にエラーを示す値を設定する。

.BR timerfd_settime ()
と
.BR timerfd_gettime ()
は成功すると 0 を返す。
エラーの場合、\-1 を返し、
.I errno
にエラーを示す値を設定する。
.SH エラー
.BR timerfd_create ()
は以下のエラーで失敗する可能性がある。
.TP
.B EINVAL
.I clockid
引き数が
.B CLOCK_MONOTONIC
でも
.B CLOCK_REALTIME
でもない。
.TP
.B EINVAL
.I flags
が無効である。もしくは、Linux 2.6.26 以前の場合は
.I flags
が 0 以外である。
.TP
.B EMFILE
オープン済みのファイルディスクリプタの数がプロセスあたりの上限に
達していた。
.TP
.B ENFILE
オープン済みのファイル総数がシステム全体の上限に達していた。
.TP
.B ENODEV
(カーネル内の) 無名 inode デバイスをマウントできなかった。
.TP
.B ENOMEM
タイマーを作成するのに十分なカーネルメモリがなかった。
.PP
.BR timerfd_settime ()
と
.BR timerfd_gettime ()
は以下のエラーで失敗する可能性がある。
.TP
.B EBADF
.I fd
が有効なファイルディスクリプタでない。
.TP
.B EFAULT
.IR new_value ,
.IR old_value ,
.I curr_value
が有効なポインタではない。
.TP
.B EINVAL
.I fd
が有効な timerfd ファイルディスクリプタでない。
.PP
.BR timerfd_settime ()
は以下のエラーで失敗することもある。
.TP
.B EINVAL
.I new_value
が適切に初期化されていない
.RI ( tv_nsec
の一つが 0 から 999,999,999 までの範囲に入っていない)。
.TP
.B EINVAL
.\" This case only checked since 2.6.29, and 2.2.2[78].some-stable-version.
.\" In older kernel versions, no check was made for invalid flags.
.I flags
が無効である。
.SH バージョン
これらのシステムコールはカーネル 2.6.25 以降の Linux で利用可能である。
ライブラリ側のサポートはバージョン 2.8 以降の glibc で提供されている。
.SH 準拠
これらのシステムコールは Linux 固有である。
.SH 例
以下のプログラムは、タイマーを作成し、その進捗をモニターするものである。
このプログラムは最大で 3 個のコマンドライン引き数を取り、
第一引き数ではタイマーの満了時間の初期値 (秒数単位) を、
第二引き数ではタイマーの間隔 (秒数単位) を、
第三引き数ではタイマーが何回満了したらプログラムが終了するかを指定する。
第二引き数と第三引き数は省略可能である。

以下のシェルのセッションはこのプログラムの使用例を示したものである。
.in +4n
.nf

.RB "$" " a.out 3 1 100"
0.000: timer started
3.000: read: 1; total=1
4.000: read: 1; total=2
.BR "^Z " "                 # type control-Z to suspend the program"
[1]+  Stopped                 ./timerfd3_demo 3 1 100
.RB "$ " "fg" "                # Resume execution after a few seconds"
a.out 3 1 100
9.660: read: 5; total=7
10.000: read: 1; total=8
11.000: read: 1; total=9
.BR "^C " "                 # type control-C to suspend the program"
.fi
.in
.SS プログラムのソース
\&
.nf
.\" The commented out code here is what we currently need until
.\" the required stuff is in glibc
.\"
.\"
.\"/* Link with -lrt */
.\"#define _GNU_SOURCE
.\"#include <sys/syscall.h>
.\"#include <unistd.h>
.\"#include <time.h>
.\"#if defined(__i386__)
.\"#define __NR_timerfd_create 322
.\"#define __NR_timerfd_settime 325
.\"#define __NR_timerfd_gettime 326
.\"#endif
.\"
.\"static int
.\"timerfd_create(int clockid, int flags)
.\"{
.\"    return syscall(__NR_timerfd_create, clockid, flags);
.\"}
.\"
.\"static int
.\"timerfd_settime(int fd, int flags, struct itimerspec *new_value,
.\"        struct itimerspec *curr_value)
.\"{
.\"    return syscall(__NR_timerfd_settime, fd, flags, new_value,
.\"                   curr_value);
.\"}
.\"
.\"static int
.\"timerfd_gettime(int fd, struct itimerspec *curr_value)
.\"{
.\"    return syscall(__NR_timerfd_gettime, fd, curr_value);
.\"}
.\"
.\"#define TFD_TIMER_ABSTIME (1 << 0)
.\"
.\"////////////////////////////////////////////////////////////
#include <sys/timerfd.h>
#include <time.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>        /* Definition of uint64_t */

#define handle_error(msg) \\
        do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
print_elapsed_time(void)
{
    static struct timespec start;
    struct timespec curr;
    static int first_call = 1;
    int secs, nsecs;

    if (first_call) {
        first_call = 0;
        if (clock_gettime(CLOCK_MONOTONIC, &start) == \-1)
            handle_error("clock_gettime");
    }

    if (clock_gettime(CLOCK_MONOTONIC, &curr) == \-1)
        handle_error("clock_gettime");

    secs = curr.tv_sec \- start.tv_sec;
    nsecs = curr.tv_nsec \- start.tv_nsec;
    if (nsecs < 0) {
        secs\-\-;
        nsecs += 1000000000;
    }
    printf("%d.%03d: ", secs, (nsecs + 500000) / 1000000);
}

int
main(int argc, char *argv[])
{
    struct itimerspec new_value;
    int max_exp, fd;
    struct timespec now;
    uint64_t exp, tot_exp;
    ssize_t s;

    if ((argc != 2) && (argc != 4)) {
        fprintf(stderr, "%s init\-secs [interval\-secs max\-exp]\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    if (clock_gettime(CLOCK_REALTIME, &now) == \-1)
        handle_error("clock_gettime");

    /* Create a CLOCK_REALTIME absolute timer with initial
       expiration and interval as specified in command line */

    new_value.it_value.tv_sec = now.tv_sec + atoi(argv[1]);
    new_value.it_value.tv_nsec = now.tv_nsec;
    if (argc == 2) {
        new_value.it_interval.tv_sec = 0;
        max_exp = 1;
    } else {
        new_value.it_interval.tv_sec = atoi(argv[2]);
        max_exp = atoi(argv[3]);
    }
    new_value.it_interval.tv_nsec = 0;

    fd = timerfd_create(CLOCK_REALTIME, 0);
    if (fd == \-1)
        handle_error("timerfd_create");

    if (timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL) == \-1)
        handle_error("timerfd_settime");

    print_elapsed_time();
    printf("timer started\\n");

    for (tot_exp = 0; tot_exp < max_exp;) {
        s = read(fd, &exp, sizeof(uint64_t));
        if (s != sizeof(uint64_t))
            handle_error("read");

        tot_exp += exp;
        print_elapsed_time();
        printf("read: %llu; total=%llu\\n",
                (unsigned long long) exp,
                (unsigned long long) tot_exp);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH バグ
現在のところ、
.\" 2.6.29
.BR timerfd_create ()
が対応している clockid の種類は
.BR timer_create (2)
よりも少ない。
.SH 関連項目
.BR eventfd (2),
.BR poll (2),
.BR read (2),
.BR select (2),
.BR setitimer (2),
.BR signalfd (2),
.BR timer_create (2),
.BR timer_gettime (2),
.BR timer_settime (2),
.BR epoll (7),
.BR time (7)
