.\" Copyright (C) 2000 by Werner Almesberger
.\" May be distributed under GPL
.\"
.\" Written 2000-02-23 by Werner Almesberger
.\" Modified 2004-06-17 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Japanese Version Copyright (c) 2000 NAKANO Takeo all rights reserved.
.\" Translated Wed Jun 14 2000 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"
.TH PIVOT_ROOT 2 2007-06-01 "Linux" "Linux Programmer's Manual"
.SH 名前
pivot_root \- root ファイルシステムを変更する
.SH 書式
.BI "int pivot_root(const char *" new_root ", const char *" put_old );
.SH 説明
.BR pivot_root ()
は呼び出し元のプロセスの root ファイルシステムを
.I put_old
ディレクトリに移動し、
.I new_root
を呼び出し元のプロセスの新しい root ファイルシステムにする。
.\"
.\" .B CAP_SYS_ADMIN
.\" ケーパビリティが必要である。

.BR pivot_root ()
の典型的な利用法は、システムの起動中にシステムが一時的な
root ファイルシステム (例えば
.BR initrd )
をマウントし、これに続いて本当の root ファイルシステムをマウントし、
後者を必要な全てのプロセス・スレッドの
カレント root に変更するような場合である。

古い root ディレクトリを使っていた全てのプロセスやスレッドの
カレント root とカレントワーキングディレクトリを、
.BR pivot_root ()
が変更するかどうかはわからない。
.BR pivot_root ()
の呼びだしプロセスは、古い root やカレントワーキングディレクトリを使っていた
プロセスが、いずれの場合でも正しく動作することを保証しなければならない。
これを簡単に行うには、それらのプロセスの root と
カレントワーキングディレクトリを
.BR pivot_root ()
を呼び出す前に
.I new_root
に変更しておくことである。

上記の段落は、将来
.BR pivot_root ()
が変更されるかも知れないことを鑑みて、わざと曖昧に書いてある。
本ページを記述している時点では、
.BR pivot_root ()
は古い root ディレクトリを用いている全てのプロセス・スレッドの root と
カレントワーキングディレクトリを
.I new_root
に変更する。これはカーネルのスレッドが古い root ディレクトリを
busy 状態にしないために必要である。これらのスレッドが
古いディレクトリを root やカレントワーキングディレクトリとしていると、
ファイルシステムに一切アクセスしない場合でも
古い root が busy になってしまうからである。
.\"nakano: ちと冗長...
将来は、カーネルスレッドがあらゆるファイルシステムへのアクセスを
明示的に放棄するメカニズムができ、このでしゃばりな機能は
.BR pivot_root ()
から削除されるかもしれない。

これは呼び出し元のプロセスについても当てはまることに注意。
.BR pivot_root ()
がカレントプロセスのカレントワーキングディレクトリに影響するかどうかは
分からない。したがって
.BR pivot_root ()
の直後に
.B chdir("/")
を呼び出すとよい。

.IR new_root " および " put_old
には以下の制限がある:
.IP \- 3
ディレクトリでなければならない。
.IP \- 3
.IR new_root " と " put_old
は現在の root と同じファイルシステムにあってはならない。
.IP \- 3
.IR put_old " は " new_root
以下になければならない。すなわち
.I put_old
を差す文字列に 1 個以上の
.I ../
を付けることによって
.I new_root
と同じディレクトリが得られなければならない。
.IP \- 3
他のファイルシステムが
.I put_old
にマウントされていてはならない。
.PP
利用例については
.BR pivot_root (8)
を参照のこと。

現在の root がマウントポイントではない
.RB ( chroot (2)
や
.BR pivot_root ()
の後など。以下も参照) 場合、
古い root ディレクトリではなく、
そのファイルシステムのマウントポイントが
.I put_old
にマウントされる。

.I new_root
はマウントポイントでなくてもよい。
この場合
.I /proc/mounts
は、
.I new_root
を root
.RI ( / )
とするファイルシステムのマウントポイントを表示する。
.SH 返り値
成功すると 0 を返す。エラーが起ると \-1 を返し、
.I errno
が適切な値に設定される。
.SH エラー
.BR pivot_root ()
は
.BR stat (2)
の返すあらゆるエラーを
.RI ( errno
に) 返す可能性がある。さらに以下を返すことがある:
.TP
.B EBUSY
.IR new_root " または " put_old
が、現在の root ファイルシステム上にあるか、既に
.I put_old
になんらかのファイルシステムがマウントされている。
.TP
.B EINVAL
.IR put_old " が " new_root
の下層にない。
.TP
.B ENOTDIR
.IR new_root " または " put_old
がディレクトリでない。
.TP
.B EPERM
呼び出し元のプロセスが
.B CAP_SYS_ADMIN
ケーパビリティを持っていない。
.SH バージョン
.BR pivot_root ()
は Linux 2.3.41 で導入された。
.SH 準拠
.BR pivot_root ()
は Linux に固有のものなので、移植性はない。
.SH 注意
glibc はこのシステムコールに対するラッパー関数を提供していない。
.BR syscall (2)
を使って呼び出すこと。
.SH バグ
.BR pivot_root ()
はシステムの他のプロセス全ての root と
カレントワーキングディレクトリとを変更しなくてもよいはずである。

.BR pivot_root ()
の使い方がもうちょっと曖昧になると、
あっという間にわけのわからない状態になってしまうだろう
.SH 関連項目
.BR chdir (2),
.BR chroot (2),
.BR stat (2),
.BR initrd (4),
.BR pivot_root (8)
