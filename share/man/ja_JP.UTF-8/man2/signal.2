.\" Copyright (c) 2000 Andries Brouwer <aeb@cwi.nl>
.\" and Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"      <mtk.manpages@gmail.com>
.\" and Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"      <mtk.manpages@gmail.com>
.\" based on work by Rik Faith <faith@cs.unc.edu>
.\" and Mike Battersby <mike@starbug.apana.org.au>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 2004-11-19, mtk:
.\" added pointer to sigaction.2 for details of ignoring SIGCHLD
.\" 2007-06-03, mtk: strengthened portability warning, and rewrote
.\"     various sections.
.\" 2008-07-11, mtk: rewrote and expanded portability discussion.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-03-03, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2000-09-24, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2002-01-14, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2004-01-17, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-01-07, Yuichi SATO
.\" Updated 2007-06-01, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.50
.\" Updated 2007-06-13, Akihiro MOTOKI, LDP v2.55
.\" Updated 2008-08-08, Akihiro MOTOKI, LDP v3.05
.\"
.\"WORD:	signal			シグナル
.\"WORD:	signal handler		シグナル・ハンドラ
.\"WORD:	library			ライブラリ
.\"WORD:	semantics		方式
.\"WORD:	prototype		型宣言
.\"WORD:	architecture		アーキテクチャー
.\"WORD:	endless loop		無限ループ
.\"WORD:	feature test macro	機能検査マクロ
.\"WORD:	disposition		処理方法
.\"
.TH SIGNAL 2 2008-07-11 "Linux" "Linux Programmer's Manual"
.SH 名前
signal \- ANSI C シグナル操作
.SH 書式
.B #include <signal.h>
.sp
.B typedef void (*sighandler_t)(int);
.sp
.BI "sighandler_t signal(int " signum ", sighandler_t " sighandler );
.SH 説明
.BR signal ()
の動作は UNIX のバージョンにより異なる。
また、歴史的に見て Linux のバージョンによっても異なっている。
\fBこのシステムコールの使用は避け、\fP
代わりに
.BR sigaction (2)
を使用すること。
下記の「移植性」を参照。

.BR signal ()
はシグナル
.I signum
の処理方法を
.I handler
に設定する。
.I handler
には、
.BR SIG_IGN "、"
.BR SIG_DFL "、"
プログラマが定義した関数 (「シグナル・ハンドラ」) のアドレスの
いずれかを指定する。

シグナル
.I signum
がプロセスに配送されると、以下のいずれかが発生する。
.TP 3
*
処理方法が
.B SIG_IGN
に設定されている場合、そのシグナルは無視される。
.TP
*
処理方法が
.B SIG_DFL
に設定されている場合、シグナルに関連づけられた
デフォルトの動作が行われる
.RB ( signal (7)
参照)。
.TP
*
処理方法として関数が設定されている場合、
まず最初に処理方法が
.B SIG_DFL
にリセットされるかそのシグナルのブロックが実行された後、
.I signum
を引き数として
.I handler
が呼び出される。
ハンドラが起動される際にシグナルがブロックされた場合、
ハンドラが返る際にそのシグナルのブロックが解除される。
.PP
シグナル
.B SIGKILL
と
.B SIGSTOP
は捕捉できず、無視することもできない。
.SH 返り値
.BR signal ()
は、今までのシグナル・ハンドラの値を返す。エラーの場合は
.B SIG_ERR
を返す。
.SH エラー
.TP
.B EINVAL
.I signum
が不正である。
.SH 準拠
C89, C99, POSIX.1-2001.
.SH 注意
マルチスレッドプロセスにおける
.BR signal ()
の結果は、指定されていない。
.PP
POSIX によると、
.BR kill (2)
や
.BR raise (3)
で生成できない
.BR SIGFPE ,
.BR SIGILL ,
.B SIGSEGV
シグナルを無視した後の動作は未定義である。
0 による整数割り算の結果は未定義となる。
ある種のアーキテクチャでは、これは
.B SIGFPE
シグナルを生成する。
(同様に負の最大整数を \-1 で割ると
.B SIGFPE
が生成されるかもしれない。)
このシグナルを無視すると無限ループに陥るかもしれない。
.PP
.B SIGCHLD
の動作として
.B SIG_IGN
を設定した場合の詳細な動作については、
.BR sigaction (2)
を参照すること。
.PP
シグナル・ハンドラ内から安全に呼び出すことができる、
async-signal-safe functions (非同期シングルで安全な関数) の
リストについては
.BR signal (7)
を参照。
.PP
.I sighandler_t
の使用は GNU 拡張である。
各種バージョンの libc でこの型は定義済みである;
libc4 と libc5 では
.I SignalHandler
を定義している。
glibc では
.I sig_t
を定義しており、
.B _GNU_SOURCE
が定義されている場合には
.I sighandler_t
も定義されている。
このような型を使用しないと、
.BR signal ()
の宣言は読みにくいものとなる。
.in +4n
.nf

.BI "void ( *" signal "(int " signum ", void (*" handler ")(int)) ) (int);"
.fi
.in
.SS 移植性
移植性のある
.BR signal ()
の使い方は、シグナルの処理方法を
.BR SIG_DFL
か
.BR SIG_IGN
に設定する方法だけである。
シグナル・ハンドラを設定するのに
.BR signal ()
を使ったときの動作はシステムにより異なる
(POSIX.1 は明示的にこの違いを認めている)。
.B "移植性が必要なときはこのシステムコールを使用しないこと。"

POSIX.1 は、
.BR sigaction (2)
を規定することで移植性に関する混乱を解決した。
.BR sigaction (2)
はシグナル・ハンドラが起動される際の挙動を明示的に制御できる。
.BR signal ()
の代わりにこのインターフェイスを使うこと。

オリジナルの UNIX システムでは、
.BR signal ()
を使って設定されたハンドラがシグナルの配送により起動されると、
そのシグナルの処理方法は
.B SIG_DFL
にリセットされ、システムは同じシグナルがさらに生成されても
シグナルの配送をブロックしなかった。
System V でも、
.BR signal ()
に対してこれらの挙動を規定している。
こうした挙動はまずく、ハンドラがハンドラ自身を再設定する機会が
来るより前に、同じシグナルがまた配送される可能性がある。
さらに、同じシグナルが立て続けに配送されると、同じシグナルが
ハンドラを繰り返し起動されることになる。

BSD では、シグナル処理の挙動を変更することで、この状況を改善した
(しかし、残念なことに、
.BR signal ()
を使ってハンドラを設定する際に挙動が黙って変更される)。
BSD では、シグナルハンドラが起動された際、
シグナルの処理方法はリセットされず、
ハンドラの実行中は、同じシグナルのさらなる生成は配送がブロックされる。

Linux での状況は以下の通りである。
.IP * 2
カーネルの
.BR signal ()
システムコールは System V 方式を提供している。
.IP *
デフォルトでは、glibc 2 以降では、
.BR signal ()
ラッパー関数はカーネルのシステムコールを起動しない。
代わりに、ラッパー関数は BSD 方式を示すフラグを使って
.BR sigaction (2)
を呼び出す。
機能検査マクロ
.B _BSD_SOURCE
を定義していれば、このデフォルトの動作となる。
デフォルトでは、
.B _BSD_SOURCE
が定義される。
.B _BSD_SOURCE
は
.B _GNU_SOURCE
が定義された場合には暗黙のうちに定義され、
もちろん明示的に定義することもできる。
.sp
glibc 2 以降では、機能検査マクロ
.B _BSD_SOURCE
が定義されていなければ、
.BR signal ()
は System V 方式となる。
.RB ( gcc (1)
が標準指定モード
.RI ( -std=xxx " or " -ansi )
で起動された場合、もしくは
.BR _POSIX_SOURCE ,
.BR _XOPEN_SOURCE ,
.B _SVID_SOURCE
といった他の様々な機能検査マクロが定義された場合、
デフォルトの
.B _BSD_SOURCE
の暗黙の定義は行われない。
.BR feature_test_macros (7)
を参照のこと。)
.\"
.\" System V semantics are also provided if one uses the separate
.\" .BR sysv_signal (3)
.\" function.
.IP *
Linux の libc4 と libc5 の
.BR signal ()
関数は System V 方式である。
libc5 システムにおいて
.I <signal.h>
のかわりに
.I <bsd/signal.h>
をインクルードすると、
.BR signal ()
は
.BR __bsd_signal ()
に再定義され、
.BR signal ()
は BSD 方式となる。
.SH 関連項目
.BR kill (1),
.BR alarm (2),
.BR kill (2),
.BR killpg (2),
.BR pause (2),
.BR sigaction (2),
.BR signalfd (2),
.BR sigpending (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR bsd_signal (3),
.BR raise (3),
.BR siginterrupt (3),
.BR sigqueue (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR sysv_signal (3),
.BR signal (7)
