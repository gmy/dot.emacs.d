.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sat Jul 24 00:06:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Wed Jan 17 16:02:32 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Thu Apr 11 19:26:35 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jan 31 16:47:33 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jul 12 20:45:39 1997 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 1997-09-28, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2005-02-24, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-10-14, Akihiro MOTOKI
.\" Updated 2008-02-10, Akihiro MOTOKI, LDP v2.77
.\" Updated 2009-04-13, Akihiro MOTOKI, LDP v3.20
.\"
.\"WORD:	descriptor		ディスクリプター
.\"WORD:	buffer			バッファー
.\"WORD:	signal			シグナル
.\"WORD:	process group		プロセス・グループ
.\"WORD:	backgraound		バックグランド
.\"WORD:	orphan			孤立
.\"WORD:	open			オープン
.\"WORD:	directory		ディレクトリ
.\"WORD:	object			オブジェクト
.\"
.TH READ 2 2009-02-23 "Linux" "Linux Programmer's Manual"
.SH 名前
read \- ファイル・ディスクリプターから読み込む
.SH 書式
.nf
.B #include <unistd.h>
.sp
.BI "ssize_t read(int " fd ", void *" buf ", size_t " count );
.fi
.SH 説明
.BR read ()
はファイル・ディスクリプター (file descriptor)
.I fd
から最大
.I count
バイトを
.I buf
で始まるバッファーへ読み込もうとする。
.PP
.I count
が 0 ならば、
.BR read ()
は 0 を返し、他に何も起きない。
.I count
が
.B SSIZE_MAX
より大きければ、結果は特定できない。
.SH 返り値
成功した場合、読み込んだバイト数を返す (0 はファイルの終りを意味する)。
ファイル位置はこの数だけ進められる。
この数が要求した数より小さかったとしてもエラーではない;
例えば今すぐには実際にそれだけの数しかない場合 (ファイルの最後に近いのかも
しれないし、パイプ (pipe) や端末 (terminal) から読み込んでいるかもしれない) や
.BR read ()
がシグナル (signal) によって割り込まれた場合にこれは起こりえる。
エラーの場合は、\-1 が返され、
.I errno
が適切に設定される。この場合はファイル位置が変更されるかどうかは
不定である。
.SH エラー
.TP
.B EAGAIN
ファイル・ディスクリプター
.I fd
がソケット以外のファイルを参照していて、
非停止 (nonblocking) モード
.RB ( O_NONBLOCK )
に設定されており、読み込みを行うと停止する状況にある。
.TP
.BR EAGAIN " または " EWOULDBLOCK
.\" Actually EAGAIN on Linux
ファイル・ディスクリプター
.I fd
がソケットを参照していて、非停止 (nonblocking) モード
.RB ( O_NONBLOCK )
に設定されており、読み込みを行うと停止する状況にある。
POSIX.1-2001 は、この場合にどちらのエラーを返すことも認めており、
これら 2 つの定数が同じ値を持つことも求めていない。
したがって、移植性が必要なアプリケーションでは、両方の可能性を
確認すべきである。
.TP
.B EBADF
.I fd
が有効なファイル・ディスクリプターでないか、読み込みのために
オープン (open) されていない。
.TP
.B EFAULT
.I buf
がアクセス可能なアドレス空間の外にある。
.TP
.B EINTR
何のデータも読み込まないうちにシグナルに割り込まれた。
.BR signal (7)
参照。
.TP
.B EINVAL
.I fd
は読み込みに適していないオブジェクトを参照している。
もしくは、ファイルが
.B O_DIRECT
フラグを指定してオープンされているが、
.I buf
に指定されたアドレス、
.I count
に指定された値、
現在のファイルオフセットのいずれかの
アラインメントが不適切である。
.TP
.B EINVAL
.I fd
が
.BR timerfd_create (2)
の呼び出しで作成されたが、
.BR read ()
に間違ったサイズのバッファが渡された。
さらなる情報は
.BR timerfd_create (2)
を参照のこと。
.TP
.B EIO
I/O エラー。これは例えばプロセスがバックグランド・プロセス・グループで、
それを制御している tty から読み込もうとし、
.B SIGTTIN
が無視 (ignore) または禁止 (blocking) されている場合や、
そのプロセス・グループが孤立 (orphan) している場合に起こる。
またディスクやテープを読んでいる時に低レベル I/O エラー
が発生した場合にも起こる。
.TP
.B EISDIR
.I fd
がディレクトリを参照している。
.PP
.I fd
が接続しているオブジェクトによっては他のエラーも起こりえる。
POSIX では、
いくらかのデータを読んだ後に割り込みが起こった場合、
.BR read ()
は
.RI ( errno
に
.B EINTR
を設定して) \-1 を返してもよいし、
既に読み込んだバイト数を返してもよい。
.SH 準拠
SVr4, 4.3BSD, POSIX.1-2001.
.SH 注意
NFS において。少量のデータを読み込む場合、最初の時のみにタイム
スタンプが更新され、続くコールでは更新されないだろう。
これはクライアント側で属性のキャッシングを行なうためである。
なぜならば、もし全ての NFS クライアントが st_atime (最終ファイルアクセス時刻)
の更新をサーバーに送らず、クライアント側でキャッシュを読むことに満足して
いれば、サーバー側での read は発生しないので st_atime の更新は行なわれからだ。
UNIX の方式では、クライアント側の属性のキャッシングを無効にすることで、
これを得ることができる。しかしほとんどの状況ではこれは続くサーバーの
負荷を増加させ、パフォーマンスの低下をもたらす。
.PP
多くのファイルシステムやディスクは
.B O_NONBLOCK
の実装はしなくても済むくらいに十分に高速であると考えられている。
それでそのようなファイルやディスクには
.B O_NONBLOCK
は利用できないかもしれない。
.SH 関連項目
.BR close (2),
.BR fcntl (2),
.BR ioctl (2),
.BR lseek (2),
.BR open (2),
.BR pread (2),
.BR readdir (2),
.BR readlink (2),
.BR readv (2),
.BR select (2),
.BR write (2),
.BR fread (3)
