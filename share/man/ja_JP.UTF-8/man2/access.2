.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-21 Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Michael Chastain (mec@shell.portal.com):
.\"   Removed note about old kernel (pre-1.1.44) using wrong id on path.
.\" Modified 1996-03-18 by Martin Schulze (joey@infodrom.north.de):
.\"   Stated more clearly how it behaves with symbolic links.
.\" Added correction due to Nick Duffek (nsd@bbc.com), aeb, 960426
.\" Modified 1996-09-07 by Michael Haardt:
.\"   Restrictions for NFS
.\" Modified 1997-09-09 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 1998-01-13 by Michael Haardt:
.\"   Using access is often insecure
.\" Modified 2001-10-16 by aeb
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-23 by Michael Kerrisk
.\" 2007-06-10, mtk, various parts rewritten, and added BUGS section.
.\"
.\" Japanese Version Copyright (c) 1997-1998 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-12-17, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 1998-05-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-12-14, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-06-17, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-23, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-09-04, Akihiro MOTOKI, LDP v2.64
.\"
.\"WORD:	permission		アクセス権
.\"WORD:	privileges		権限
.\"WORD:	user			ユーザー
.\"WORD:	file system		ファイル・システム
.\"WORD:	object			オブジェクト
.\"WORD:	symbolic link		シンボリック・リンク
.\"WORD:	refer			参照する
.\"WORD:	mask			マスク
.\"WORD:	path			パス
.\"WORD:	effective user-ID	実効ユーザーID
.\"WORD:	real user-ID		実ユーザーID
.\"WORD:	uid			ユーザー ID
.\"WORD:	gid			グループ ID
.\"WORD:	directory		ディレクトリ
.\"WORD:	call			コール
.\"WORD:	kernel			カーネル
.\"WORD:	memory			メモリ
.\"WORD:	dangling		参照先のない
.\"
.TH ACCESS 2 2007-07-10 "Linux" "Linux Programmer's Manual"
.SH 名前
access \- ファイルに対する実ユーザーでのアクセス権をチェックする
.SH 書式
.nf
.B #include <unistd.h>
.sp
.BI "int access(const char *" pathname ", int " mode );
.fi
.SH 説明
.BR access ()
は、呼び出し元プロセスがファイル
.I pathname
にアクセスできるかどうかをチェックする。
.I pathname
がシンボリック・リンクの場合、シンボリック・リンクは展開される。

.\" F_OK is defined as 0 on every system that I know of.
.I mode
はチェックを行うアクセス権を指定するもので、その値は
.BR F_OK 、
.\" 私が知っているすべてのシステムで F_OK は 0 に定義されている。
もしくは
.BR R_OK ", " W_OK ", " X_OK
の 1個以上のビット単位の論理和から構成されるマスクである。
.B F_OK
はファイルが存在するかどうかのみを検査する。
.BR R_OK ", " W_OK ", " X_OK
は、ファイルが存在して、それぞれ読み込み、書き込み、実行の許可があるか
を検査する。

チェックは、実際に操作が行われる際に使用される実効 (effective) ID でなく、
呼び出し元プロセスの
.I "実 (real)"
UID と
.I "実 (real)"
GID を使って行われる。
これにより、set-user-ID プログラムで、プログラムを起動するユーザの権限を
簡単に決定することができる。

呼び出し元プロセスが特権プロセス (つまり、プロセスの実 UID が 0) の場合、
通常のファイルに対する
.B X_OK
のチェックは、そのファイルの所有者、グループ、他人のいずれかの
実行許可が有効になっていれば成功する。
.SH 返り値
成功した場合(全ての要求された許可が得られたら)、ゼロが返される。
エラーの場合 (少なくとも一つの
.I mode
で要求された許可がなかった場合や、他のエラーが起きた場合)、
\-1 が返され、
.I errno
が適切に設定される。
.SH エラー
.BR access ()
は以下の場合に失敗する。
.TP
.B EACCES
要求されたアクセスは
そのファイル自身に拒否されたか
.I pathname
へ至るまでディレクトリのいずれかに対する検索許可
(search permission) が得られなかった。
.RB ( path_resolution (7)
も参照のこと)
.TP
.B ELOOP
.I pathname
を解決する際に遭遇したシンボリック・リンクが多過ぎる。
.TP
.B ENAMETOOLONG
.I pathname
が長過ぎる。
.TP
.B ENOENT
.I pathname
を構成するパスのいずれかが、存在しないか、
参照先のない (dangling) シンボリックリンクになっている。
.TP
.B ENOTDIR
.I pathname
のディレクトリ部分が、実際にはディレクトリでない。
.TP
.B EROFS
読み込み専用 (read-only) のファイル・システムに対して書き込み許可を
要求した。
.PP
.BR access ()
は以下の理由により失敗することがある。
.TP
.B EFAULT
.I pathname
がアクセス可能なアドレス空間の外を指している。
.TP
.B EINVAL
.I mode
に不正な値が指定された。
.TP
.B EIO
I/O エラーが発生した。
.TP
.B ENOMEM
カーネルに十分なメモリがない。
.TP
.B ETXTBSY
実行中のファイルに対して書き込みを要求した。
.SH 準拠
SVr4, 4.3BSD, POSIX.1-2001.
.SH 注意
.PP
.BR 警告 :
あるユーザが、例えば
.BR open (2)
によるアクセスが可能かどうかを、(実際に行う前に)
.BR access ()
を使ってチェックするのは、セキュリティホールの原因になる。
なぜならチェックをしてから
実際にファイルのオープン操作をする間の短い間隔を悪用できるからである。
.BR この理由があるので、このシステムコールを使うのは避けるべきである。
.PP
.I mode
で指定されたアクセス種別のいずれか一つでも拒否されると、
たとえ
.I mode
で指定された他のアクセス種別が許可されたとしても、
.BR access ()
はエラーを返す。
.PP
POSIX.1-2001 では、
呼び出し元プロセスが適切な特権を持っている場合
(つまり、スーパーユーザの場合)、
たとえファイルの実行許可ビットが全くセットされていなくても
.B X_OK
のチェックとして成功を返す実装が認められている。
.\" HPU-UX 11 と Tru64 5.1 はこのようになっている。
Linux はこのようにはなっていない。
.PP
.I pathname
のプレフィックスを構成するディレクトリの全てに対して
検索アクセス (すなわち、実行アクセス) が許可された場合にのみ、
ファイルはアクセス可能となる。
いずれかのディレクトリがアクセス不可の場合、
ファイル自身のアクセス許可に関わらず、
.BR access ()
は失敗する。
.PP
アクセス・ビットのみがチェックされ、ファイルの種類や内容はチェックされない。
従って、ディレクトリが書き込み可能となった場合は、ディレクトリに
ファイルを作成することが可能なことを意味するのであり、ディレクトリに
ファイルとして書き込むことができるわけではない。
同様に DOS のファイルは「実行可能」と判断されるが、
.BR execve (2)
コールは失敗するだろう。
.PP
.BR access ()
は、 UID マッピングを使用した NFS ファイル・システムでは正常に
機能しないかもしれない。なぜならば UID のマッピングはサーバーで
行なわれ、権利のチェックをするクライアントには見えないからである。
.SH バグ
バージョン 2.4 (とそれ以前) のカーネルには、スーパーユーザでの
.B X_OK
のチェックの扱いに奇妙な点がある。
ディレクトリ以外のファイルで
(ユーザ、グループ、他人の) 全てのカテゴリについて
実行許可がない場合、
.BR access ()
のチェックで \-1 が返るのは
.I mode
に
.B X_OK
だけが指定されたときだけであり
.I mode
に
.B R_OK
や
.B W_OK
が一緒に指定された場合には
.BR access ()
は 0 を返す。
.\" この挙動は実装時の事故だったようである。
(バージョン 2.6.3 以前の) 初期の 2.6 系のカーネルも
2.4 系のカーネルと同様の動作をする。

2.6.20 より前のカーネルでは、
ファイルが存在するファイルシステムを
.BR mount (2)
する際に指定された
.B MS_NOEXEC
フラグの効果を、
.BR access ()
は無視していた。
カーネル 2.6.20 以降では、
.BR access ()
はこのフラグを考慮するようになっている。
.SH 関連項目
.BR chmod (2),
.BR chown (2),
.BR faccessat (2),
.BR open (2),
.BR setgid (2),
.BR setuid (2),
.BR stat (2),
.BR eauidaccess (3),
.BR credentials (7),
.BR path_resolution (7)
