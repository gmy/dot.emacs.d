.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt (michael@moria.de)
.\" Modified Sat Jul 24 14:29:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 961203 and 001211 and 010326 by aeb@cwi.nl
.\" Modified 001213 by Michael Haardt (michael@moria.de)
.\" Modified 13 Jun 02, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on nonstandard behavior when SIGCHLD is ignored.
.\" Modified 2004-11-16, mtk, Noted that the nonconformance when
.\"	SIGCHLD is being ignored is fixed in 2.6.9; other minor changes
.\" Modified 2004-12-08, mtk, in 2.6 times() return value changed
.\" 2005-04-13, mtk
.\"	Added notes on nonstandard behavior: Linux allows 'buf' to
.\"	be NULL, but POSIX.1 doesn't specify this and it's nonportable.
.\"
.\" Japanese Version Copyright (c) 1996 Satoshi Nozawa
.\"         all rights reserved.
.\" Translated 1996-06-25, Satoshi I. Nozawa <snozawa@env.sci.ibaraki.ac.jp>
.\" Modified 1997-12-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-02-16, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-04-10, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-05-21, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-10-21, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-04-20, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2008-02-12, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.77
.\"
.\" WORD:	clock ticks	クロック数
.\"
.TH TIMES 2 2008-06-25 "Linux" "Linux Programmer's Manual"
.SH 名前
times - プロセス時間を取得する
.SH 書式
.B #include <sys/times.h>
.sp
.BI "clock_t times(struct tms *" buf );
.SH 説明
.BR times ()
は現在のプロセス時間を
.I buf
が指している
.B "struct tms"
に格納する。
.I struct tms
は
.I <sys/times.h>
で以下のように定義されている:
.sp
.in +4n
.nf
struct tms  {
    clock_t tms_utime;  /* user time */
    clock_t tms_stime;  /* system time */
    clock_t tms_cutime; /* user time of children */
    clock_t tms_cstime; /* system time of children */
};
.fi
.in
.LP
.I tms_utime
フィールドは、呼び出したプロセスが命令を実行するのに消費した
CPU 時間である。
.I tms_stime
フィールドは、呼び出したプロセスのために実行されたタスクで、
システムが消費した CPU 時間である。
.I tms_cutime
フィールドは、
終了を待っている全ての子プロセスの
.I tms_utime
と
.I tms_cutime
の合計である。
.I tms_cstime
フィールドは、
終了を待っている全ての子プロセスの
.I tms_stime
と
.I tms_cstime
の合計である。
.LP
終了する子(及びその子孫)プロセスの時間は
.BR wait (2)
や
.BR waitpid (2)
がプロセス ID を返した瞬間に加算される。
つまり、子がまだ終了を待っていない状態では
孫プロセスの時間は決して現れない。
.LP
全ての時間はクロック数で返される。
.SH 返り値
.BR times ()
は過去のある時点から経過したクロック数 (clock tick) を返す。
この返り値は
.I clock_t
型が取り得る範囲からオーバーフローするかもしれない。
エラーの場合、\fI(clock_t)\ \-1\fP が返され、
.I errno
が適切に設定される。
.\" The only possible error is EFAULT.
.SH 準拠
SVr4, 4.3BSD, POSIX.1-2001.
.SH 注意
一秒あたりのクロック数は
.in +4n

sysconf(_SC_CLK_TCK);

.in
を使って得ることが出来る。
.PP
POSIX.1-1996 では、\fBCLK_TCK\fP シンボル
.RI ( <time.h>
で定義されている) は古いものであると記述されている。
今ではこれは古いものである。
.PP
Linux 2.6.9 より前のバージョンでは、
.B SIGCHLD
を
.B SIG_IGN
に設定すると
終了した子プロセスの回数は
自動的に
.I tms_cstime
と
.I tms_cutime
フィールドに含まれる。
しかし、POSIX.1-2001 では、この動作は呼び出し元が
.BR wait (2)
関数群で子プロセスを待った場合にのみ起きるべきだとしている。
標準とは異なるこの動作は Linux 2.6.9 以降で修正されている。
.\" See the description of times() in XSH, which says:
.\"	The times of a terminated child process are included... when wait()
.\"	or waitpid() returns the process ID of this terminated child.

Linux では、
.I buf
引数に NULL を指定することができ、その場合は
.BR times ()
は単に関数の結果を返す。
しかし、POSIX はこの振る舞いは規定されておらず、
その他のほとんどの UNIX 実装は
.I buf
の値として非 NULL の値を要求する。
.LP
.BR clock (3)
も
.I clock_t
型の値を返すが、この値は
.BR times ()
で使用されるクロック tick 数ではなく、
.B CLOCKS_PER_SEC
が単位である点に注意すること。

Linux では、
.BR times ()
の返り値を計算する起点となる「過去の任意の時点」は、カーネルのバージョン
により異なる。
Linux 2.4 以前では、この時点はシステムが起動した瞬間である。
Linux 2.6 以降では、この時点はシステム起動時刻の \fI(2^32/HZ) \- 300\fP
(および 4億2900万) 秒前である。
このようにカーネルバージョン (や UNIX の実装) により異なることと、
返り値が
.I clock_t
の範囲をオーバーフローする可能性があるという事実を考慮すると、
移植性が必要なアプリケーションではこの値を使うのは避けるのが賢明であろう。
経過時間を測りたい場合には、代わりに
.BR gettimeofday (2)
を使用すること。
.\" .PP
.\" 古いシステムでは一秒あたりのクロック数は HZ 変数で与えられる。
.SS 歴史
SVr1-3 では
.I long
を返し、構造体のメンバに
.I time_t
型を使っていたが、紀元からの秒数ではなくクロック数を格納していた。
V7 では構造体のメンバに
.I long
型を使っていた。まだ
.I time_t
型がなかったからである。
.SH バグ
いくつかのアーキテクチャ (特に i386) における Linux のシステムコールの慣習の
制限により、Linux 2.6 では起動直後は (41秒と) タイムウィンドウが小さく、
.BR times ()
がエラーが起こったことを示す \-1 を間違って返すことがある。
返り値が
.I clockid_t
が格納可能な最大値を超過した際にも同じ問題が起こり得る。
.\" The problem is that a syscall return of -4095 to -1
.\" is interpreted by glibc as an error, and the wrapper converts
.\" the return value to -1.
.\" http://marc.info/?l=linux-kernel&m=119447727031225&w=2
.\" "compat_sys_times() bogus until jiffies >= 0"
.\" November 2007
.SH 関連項目
.BR time (1),
.BR getrusage (2),
.BR wait (2),
.BR clock (3),
.BR sysconf (3),
.BR time (7)
