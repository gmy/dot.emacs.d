.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu) and
.\" and Copyright 2002 Michael Kerrisk
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Fri Jan 31 16:26:07 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Dec 11 17:57:27 1998 by Jamie Lokier <jamie@imbolc.ucc.ie>
.\" Modified 24 Apr 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Substantial rewrites and additions
.\" 2005-05-10 mtk, noted that lock conversions are not atomic.
.\"
.\" FIXME: Maybe document LOCK_MAND, LOCK_RW, LOCK_READ, LOCK_WRITE
.\"        which only have effect for SAMBA.
.\"
.\" Japanese Version Copyright (c) 1996 Takeshi Ueno
.\"         all rights reserved.
.\" Translated 1996-07-03, Takeshi Ueno <tueno@vio.co.jp>
.\" Modified 1997-12-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 1999-08-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2002-09-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Modified 2005-02-26, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH FLOCK 2 2009-07-25 "Linux" "Linux Programmer's Manual"
.SH 名前
flock \- オープンされたファイルに対するアドバイザリ・ロックの適用、解除を行う
.SH 書式
.B #include <sys/file.h>
.sp
.BI "int flock(int " fd ", int " operation );
.SH 説明
オープンされたファイルにアドバイザリ・ロック (advisory lock) の適用
や解除を行う。
ファイルは
.I fd
で指定する。引き数
.I operation
には以下のいずれか一つを指定する:
.RS 4
.TP 9
.B LOCK_SH
共有ロックを適用する。 指定したファイルに対して、
一つ以上のプロセスが同時に共有ロックを保持することができる。
.TP
.B LOCK_EX
排他ロックを適用する。  指定したファイルに対して、
ただ一つのプロセスだけが同時に排他ロックを保持することができる。
.TP
.B LOCK_UN
このプロセスが保持している既存のロックを解除する。
.RE
.PP
.BR flock ()
を呼び出したときに、指定したロック種別と異なるロックが別プロセスによって
保持されていると、
.BR flock ()
は停止 (block) されることがある。
非停止 (nonblocking) タイプの要求を行うためには、
上記の操作 (operation) に
.B LOCK_NB
を論理和の形で指定する。

一つのファイルに共有ロックと排他ロックを同時に設定することはできない。

.BR flock ()
によって作られるロックは、
オープンされたファイルのテーブル・エントリと関連付けられる。
したがって、ファイル・ディスクリプタの複製
.RB ( fork (2)
や
.BR dup (2)
などにより作成される) は同じロックを参照し、
これらのファイル・ディスクリプタのどれを使っても
このロックを変更したり解放したりできる。
また、ロックの解放は、
上記の複数のファイル・ディスクリプタのいずれかに対して
明示的に
.B LOCK_UN
操作を指示した場合か、これらのファイル・ディスクリプタがすべて
閉じられた場合に行われる。

あるプロセスが
.BR open (2)
(もしくは同様の方法) を使って同じファイルに対して
複数のディスクリプタを取得した場合、
.BR flock ()
はこれら複数のディスクリプタを各々独立のものとして扱う。
これらのファイル・ディスクリプタの一つを使ってファイルをロックしようと
した際、そのロック要求は、呼び出し元のプロセスがそのファイルの別の
ディスクリプタ経由ですでに設定しているロックによって拒否される場合がある。

一つのプロセスは、一つのファイルに対して (共有ロックと排他ロックのうち)
いずれか一種類のロックしか設定できない。
既にロックされたファイルに対して
.BR flock ()
を呼び出すと、既存のロックを新しいロックモードに変更することになる。

.BR flock ()
により作成されたロックは
.BR execve (2)
の前後で保存される。

共有ロックも排他ロックも、ファイルがどのモードでオープンされたかに
関係なく適用することができる。
.SH 返り値
成功の場合、0 が返される。エラーの場合は、\-1 が返され、
.I errno
に適切な値が設定される。
.SH エラー
.TP
.B EBADF
.I fd
がオープンされたファイル・ディスクリプタではない。
.TP
.B EINTR
ロックの獲得を待っている間に、ハンドラにより捕捉されたシグナルを
受信し、
.BR flock ()
が中断された。
.BR signal (7)
参照。
.TP
.B EINVAL
.I oepration
が無効である。
.TP
.B ENOLCK
ロック・レコードを割り当てるためのメモリが不足している。
.TP
.B EWOULDBLOCK
指定したファイルがロックされており、
.B LOCK_NB
フラグが指定されている。
.SH 準拠
4.4BSD
.RB ( flock ()
コールは 4.2BSD で最初に登場した)。
.BR fcntl (2)
で実装されているものなどを含めると、
.BR flock ()
の機能はほとんどの UNIX システムで実装されている。
.SH 注意
.BR flock ()
は NFS 上のファイルのロックをしない。代わりに
.BR fcntl (2)
を使用すること。これにより、十分に新しいバージョンの Linux と、ロック機能を
サポートした NFS サーバを使用することにより、NFS 上でロックができる。
.PP
kernel 2.0 以降では、
.BR flock ()
は、GNU C ライブラリでの
.BR fcntl (2)
を呼び出してのエミュレーションではなく、
それ自体がシステムコールとして実装されている。
これにより正真正銘の BSD での動作が達成される:
.BR flock ()
と
.BR fcntl (2)
で適用されるロックの種別には相互作用がなくなり、
.BR flock ()
がデッドロックを検出しなくなる。
.PP
.BR flock ()
アドバイザリ・ロックだけを適用する。したがって、ファイルに適切なアクセス権を
付与していれば、プロセスは
.BR flock ()
の使用に無視して、ファイルへの入出力を行うことができる。
.PP
.BR flock ()
と
.BR fcntl (2)
は fork されたプロセスと
.BR dup (2)
で違った動作をする。
.BR flock ()
を
.BR fcntl (2)
を使って実装しているシステムでは、
.BR flock ()
の動作はこのマニュアル・ページに記載されているものとは違うだろう。
.PP
ロックの変換 (共有ロックから排他ロックへ、もしくはその反対) がアトミックに
行われることは保証されていない: 既存のロックがまず削除され、それから新しい
ロックが設定される。この 2つのステップの間に、他のプロセスからの処理待ちの
ロック要求が認められるかもしれず、結果として変換は停止 (block) したり、
.RB ( LOCK_NB
が指定された場合には) 失敗したりする。
(これは元々の BSD の動作であり、多くの他の実装でも起こる。)
.\" カーネル 2.5.21 で少し動作が変更された: ロック変換の最中は
.\" そのロックを行おうとしているプロセスが最高優先となる -- mtk
.SH 関連項目
.BR close (2),
.BR dup (2),
.BR execve (2),
.BR fcntl (2),
.BR fork (2),
.BR open (2),
.BR lockf (3)

カーネルソース内の
.I Documentation/filesystem/locks.txt
(以前のカーネルでは
.IR Documentation/locks.txt )
も参照のこと。
