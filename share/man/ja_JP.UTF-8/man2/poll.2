.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2006, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Additions from Richard Gooch <rgooch@atnf.CSIRO.AU> and aeb, 971207
.\" 2006-03-13, mtk, Added ppoll() + various other rewordings
.\" 2006-07-01, mtk, Added POLLRDHUP + various other wording and
.\"	formatting changes.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-12-11, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated & Modified 2004-05-22, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2005-01-03, Yuichi SATO
.\" Updated & Modified 2005-10-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-12-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.16
.\" Updated 2006-04-16, Akihiro MOTOKI, Catch up to LDP man-pages 2.28
.\" Updated 2006-07-23, Akihiro MOTOKI, Catch up to LDP man-pages 2.36
.\"
.\"WORD:	descriptor		ディスクリプタ
.\"
.TH POLL 2 2010-09-20 "Linux" "Linux Programmer's Manual"
.SH 名前
poll, ppoll \- ファイルディスクリプタにおけるイベントを待つ
.SH 書式
.nf
.B #include <poll.h>
.sp
.BI "int poll(struct pollfd *" fds ", nfds_t " nfds ", int " timeout );
.sp
.BR "#define _GNU_SOURCE" "         /* feature_test_macros(7) 参照 */"
.B #include <poll.h>
.sp
.BI "int ppoll(struct pollfd *" fds ", nfds_t " nfds ", "
.BI "        const struct timespec *" timeout_ts ", const sigset_t *" sigmask );
.fi
.SH 説明
.BR poll ()
は
.BR select (2)
と同様の仕事を行う、つまり、ファイルディスクリプタ集合のいずれか一つが
I/O を実行可能な状態になるのを待つ。

監視するファイルディスクリプタ集合は、
.I fds
引き数で指定する。
.I fds
は、以下の型の構造体の配列である。
.in +4n
.nf

struct pollfd {
    int   fd;         /* file descriptor */
    short events;     /* requested events */
    short revents;    /* returned events */
};
.in
.fi
.PP
.I nfds
には、
.I fds
配列の要素数を指定する。

構造体の
.I fd
にはオープンしたファイルのファイルディスクリプタを入れる。

構造体の
.I events
要素は入力パラメータで、アプリケーションが興味を持っているイベントの
ビットマスクを指定する。

.I revents
要素は出力パラメータで、実際に起こったイベントがカーネルにより設定される。
.I revents
で返されるビット列には、
.I events
で指定したもののどれか、もしくは
.BR POLLERR ,
.BR POLLHUP ,
.B POLLNVAL
のうちの一つが含まれる
.RB ( POLLERR ,
.BR POLLHUP ,
.B POLLNVAL
の 3つのビットは
.I events
に指定しても意味がなく、対応した状態が真の場合に
.I revents
に設定される)。

どのファイルディスクリプタにも要求したイベントが発生しておらず、
エラーも起こらない場合、
.BR poll ()
はイベントのうちいずれか一つが発生するまで停止 (block) する。

.I timeout
引き数は
.BR poll ()
が停止する時間の上限を設定するもので、ミリ秒単位で指定する。
.I timeout
に負の値を指定すると、タイムアウト時間が無限となる。

.I events
に指定したり、
.I revents
で返されるビットは \fI<poll.h>\fP で定義されている:
.RS
.TP
.B POLLIN
読み出し可能なデータがある。
.TP
.B POLLPRI
読み出し可能な緊急データ (urgent data) がある
(例えば、TCP ソケットの帯域外 (out-of-band data) データを受信した場合や、
パケットモードの擬似端末のマスタがスレーブ側の変化を見つけたとき)。
.TP
.B POLLOUT
書き込みが停止 (block) しない状態である。
.TP
.BR POLLRDHUP " (Linux 2.6.17 以降)"
ストリームソケットの他端が、コネクションを close したか、
コネクションの書き込み側を shutdown した。
この定義を有効にするには、
(「どの」ヘッダファイルをインクルードするよりも前に)
.B _GNU_SOURCE
機能検査マクロを定義しなければならない。
.TP
.B POLLERR
エラー状態 (出力の場合のみ)。
.TP
.B POLLHUP
ハングアップした (出力の場合のみ)。
.TP
.B POLLNVAL
不正な要求:
.I fd
がオープンされていない (出力の場合のみ)。
.RE
.PP
.B _XOPEN_SOURCE
を定義してコンパイルした場合には、以下の定義も行われる。
ただし、上記のリストにあるビット以上の情報が得られる訳ではない。
.RS
.TP
.B POLLRDNORM
.B POLLIN
と同じ。
.TP
.B POLLRDBAND
優先帯域データ (priority band data) が読み出し可能である
(普通は Linux では使用されない)。
.\" POLLRDBAND is used in the DECnet protocol.
.TP
.B POLLWRNORM
.B POLLOUT
と同じ。
.TP
.B POLLWRBAND
優先帯域データ (priority data) が書き込み可能である。
.RE
.PP
Linux では
.B POLLMSG
も定義されているが、使用されていない。
.SS ppoll()
.BR poll ()
と
.BR ppoll ()
の関係は
.BR select (2)
と
.BR pselect (2)
の関係と同じようなものである:
.BR pselect (2)
と同様に、
.BR ppoll ()
を使うと、アプリケーションはファイルディスクリプタの状態変化
もしくはシグナルの捕捉を安全に待つことができる。
.PP
.I timeout
引き数の精度の違いを除くと、以下の
.BR ppoll ()
の呼び出しは、
.nf

    ready = ppoll(&fds, nfds, timeout_ts, &sigmask);

.fi
次のコールを
.I atomic
に実行するのと等価である。
.nf

    sigset_t origmask;
    int timeout;

    timeout = (timeout_ts == NULL) ? \-1 :
              (timeout_ts.tv_sec * 1000 + timeout_ts.tv_nsec / 1000000);
    sigprocmask(SIG_SETMASK, &sigmask, &origmask);
    ready = poll(&fds, nfds, timeout);
    sigprocmask(SIG_SETMASK, &origmask, NULL);
.fi
.PP
なぜ
.BR ppoll ()
が必要なのかについての説明は
.BR pselect (2)
の説明を参照のこと。

.I sigmask
引き数に NULL が指定された場合、シグナルマスクの操作は行われない
(したがって、
.BR ppoll ()
の
.BR poll ()
との違いは
.I timeout
引き数の精度だけとなる)。

.I timeout
引き数は
.BR ppoll ()
が停止する時間の上限を指定するものである。
この引き数には以下の型の構造体へのポインタを指定する。
.in +4n
.nf

struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
};
.fi
.in

.I timeout_ts
に NULL が指定された場合、
.B ppoll
は無限に停止することがあり得る。
.SH 返り値
成功した場合は正の数を返す。この数は 0 以外の
.I revents
要素を持つ構造体の数である (別の言い方をすると、これらのディスクリプタ
にはイベントかエラー報告がある)。
値 0 は、タイムアウトとなり、どのファイルディスクリプタでもイベントが
発生しなかったことを示す。エラーの場合は \-1 が返され、
.I errno
が適切に設定される。
.SH エラー
.TP
.B EFAULT
引き数として指定した配列が、呼び出したプロセスのアドレス空間に
含まれていない。
.TP
.B EINTR
要求されたイベントのどれかが起こる前にシグナルが発生した。
.BR signal (7)
参照。
.TP
.B EINVAL
.I nfds
の値が
.B RLIMIT_NOFILE
を超えた。
.TP
.B ENOMEM
ファイルディスクリプタ・テーブルを確保するためのメモリがない。
.SH バージョン
.BR poll ()
システムコールは Linux 2.1.23 で導入された。
.BR poll ()
ライブラリ・コールは libc 5.4.28 から導入された
(これはカーネルが
.BR poll ()
システムコールをサポートしていない場合に
.BR select (2)
を使用してエミュレートを行う)。

.BR ppoll ()
システムコールは カーネル 2.6.16 で Linux に追加された。
.BR ppoll ()
ライブラリコールは glibc 2.4 に追加された。
.SH 準拠
.BR poll ()
は POSIX.1-2001 に準拠している。
.BR ppoll ()
は Linux 固有である。
.\" NetBSD 3.0 には pollts() がある。
.\" pollts() は Linux ppoll () と同じようなものである。
.SH 注意
いくつかの実装では、値 \-1 を持った非標準の定数
.B INFTIM
が定義されており、
.BR poll ()
の
.I timeout
の指定に使用できる。
この定数は glibc では定義されていない。
.SS "Linux での注意"
Linux の
.BR ppoll ()
システムコールは
.I timeout_ts
引き数を変更する。
しかし、glibc のラッパー関数は、システムコールに渡す timeout 引き数
としてローカル変数を使うことでこの動作を隠蔽している。
このため、glibc の
.BR ppoll ()
関数では
.I timeout_ts
引き数は変更されない。
.SH バグ
.BR select (2)
の「バグ」の節に書かれている、誤った準備完了通知 (spurious readiness
notifications) についての議論を参照のこと。
.SH 関連項目
.BR select (2),
.BR select_tut (2),
.BR time (7)
