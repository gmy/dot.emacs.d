.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) Michael Kerrisk, 2004
.\"	using some material drawn from earlier man pages
.\"	written by Thomas Kuhn, Copyright 1996
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330,
.\" Boston, MA 02111, USA.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2003-10-12, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2004-05-23, kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-03-29, kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-11-04, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2006-02-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2008-11-10, Akihiro MOTOKI, LDP v3.13
.\"
.\"WORD:	unlock			ロック解除
.\"WORD:	previlege		特権
.\"
.TH MLOCK 2 2008-09-25 "Linux" "Linux Programmer's Manual"
.SH 名前
mlock \- メモリのロックとロック解除を行う
.SH 書式
.nf
.B #include <sys/mman.h>
.sp
.BI "int mlock(const void *" addr ", size_t " len );
.BI "int munlock(const void *" addr ", size_t " len );
.sp
.BI "int mlockall(int " flags );
.B int munlockall(void);
.fi
.SH 説明
.BR mlock ()
と
.BR mlockall ()
はそれぞれ、呼び出し元プロセスの仮想アドレス空間の一部または全部を
RAM 上にロックし、メモリがスワップエリアにページングされるのを防ぐ。
.BR munlock ()
と
.BR munlockall ()
は逆の操作で、それぞれ呼び出し元プロセスの仮想アドレス空間の一部または全部を
ロック解除する。つまり、指定された仮想アドレス範囲のページは
カーネルメモリマネージャーから要求されればスワップアウトするようになる。
メモリのロックとロック解除はページ単位で行われる。
.SS "mlock() と munlock()"
.BR mlock ()
は
.I addr
から始まる長さ
.I len
バイトのアドレス範囲のページをロックする。
呼び出しが成功した場合には、
指定されたアドレス範囲を含む全てのページは
RAM に残り続けることが保証される。
これらのページは後でロック解除されるまで RAM に残り続けることが保証される。

.BR munlock ()
は、
.I addr
から始まる長さ
.I len
バイトのアドレス範囲のページのロックを解除する。
この呼び出しを行った後は、カーネルが、指定されたメモリ範囲を含む
全てのページを外部のスワップ空間に移動できるようになる。
.SS "mlockall() と munlockall()"
.BR mlockall ()
は呼び出し元プロセスのアドレス空間にマップされている全てのページを
ロックする。これにはコード、データ、スタックの
各セグメント、共有ライブラリ、カーネルのユーザー空間データ、
共有メモリ、メモリ・マップされたファイルが含まれる。
システム・コールが成功した場合には全てのマップされたページは RAM に
残ることを保証される。
これらのページは後でロック解除されるまで RAM に残り続けることが保証される。

.I flags
引数は以下の内容の一つまたは複数のビット OR から構成される:
.TP 1.2i
.B MCL_CURRENT
現在、プロセスのアドレス空間にマップされている全てのページをロックする。
.TP
.B MCL_FUTURE
将来、プロセスのアドレス空間にマップされる全てのページをロックする。
例えば、ヒープ (heap) やスタックの成長により新しく必要になったページだけで
なく、新しくメモリマップされたファイルや共有メモリ領域もロックされる。
.PP
.B MCL_FUTURE
が指定されていると、以後のシステムコール (例えば、
.BR mmap (2),
.BR sbrk (2),
.BR malloc (3))
は、ロックするバイト数が許可された最大値 (下記参照) を超えた場合に
失敗する可能性がある。
同様に、スタックの成長も失敗する可能性がある。
その場合、カーネルはスタックの拡張を拒否し、
.B SIGSEGV
をプロセスに送る。

.BR munlockall ()
は、呼び出し元プロセスのアドレス空間にマッピングされている
全てのページをロック解除する。
.SH 返り値
成功した場合は、これらのシステムコールはゼロを返す。
エラーの場合は \-1 が返され、
.I errno
が適切に設定され、プロセスのアドレス空間におけるロックは変更されない。
.SH エラー
.TP
.B ENOMEM
(Linux 2.6.9 以降) 呼び出し元は非ゼロの
ソフト資源制限
.B RLIMIT_MEMLOCK
を持つが、制限が許可している以上のメモリをロックしようとした。
この制限は、プロセスが特権
.RB ( CAP_IPC_LOCK )
を持っている場合は適用されない。
.TP
.B ENOMEM
(Linux 2.4 以前) 呼び出し元プロセスが RAM の半分以上をロックしようとした。
.TP
.B EPERM
(Linux 2.6.9 以降) 呼び出し元は特権
.RB ( CAP_IPC_LOCK )
を持たず、ソフト資源制限
.B RLIMIT_MEMLOCK
が 0 である。
.TP
.B EPERM
(Linux 2.6.8 以前)
呼び出し元プロセスが
.BR munlockall ()
を呼び出すのに必要な特権を所有していなかった。
Linux では、
.B CAP_IPC_LOCK
ケーパビリティが必要である。
.\"SVr4 のドキュメントには、これ以外にエラーコード EAGAIN の記載がある。
.LP
.BR mlock ()
と
.BR munlock ()
用として:
.TP
.B EAGAIN
指定されたアドレス範囲の一部または全てをロックすることができなかった。
.TP
.B EINVAL
.I len
が負の数である。
.TP
.B EINVAL
(Linux ではこの意味で使われない)
.I addr
がページサイズの倍数ではない。
.TP
.B ENOMEM
指定されたアドレス範囲がプロセスのアドレス空間にマップされたページと
一致しない。
.LP
.BR mlockall ()
用として:
.TP
.B EINVAL
未知の \fIflags\fP が指定された。
.LP
.BR munlockall ()
用として:
.TP
.B EPERM
(Linux 2.6.8 以前) 呼び出し元が権限
.RB ( CAP_IPC_LOCK )
を持っていない。
.SH 準拠
POSIX.1-2001, SVr4.
.SH 可用性
.BR mlock ()
と
.BR munlock ()
が使用可能な POSIX システムでは
.B _POSIX_MEMLOCK_RANGE
が \fI<unistd.h>\fP で定義されている。
また、ページあたりのバイト数は、
\fI<limits.h>\fP で定義される定数
.B PAGESIZE
から (定義されている場合)、もしくは
.I sysconf(_SC_PAGESIZE)
を呼び出すことで決定できる。

.BR mlockall ()
と
.BR munlockall ()
が利用可能な POSIX システムでは、
.B _POSIX_MEMLOCK
は \fI<unistd.h>\fP で 0 より大きい値に定義されている
.RB ( sysconf (3)
も参照のこと)。
.\" POSIX.1-2001: この変数は -1 か 0 か 200112l のいずれかに
.\" 定義すべきとなっている。
.\" -1: 利用できない、0: sysconf() に問い合わせる
.\" glibc では 1 に定義している。
.SH 注意
メモリのロックの用途としては主に二つある: リアルタイム
アルゴリズムと高いセキュリティの必要なデータ処理である。リアルタイムの
アプリケーションは決定的なタイミングやスケジューリングを必要とするが、
ページングは予期しないプログラムの実行遅延をもたらす主要な要因となる。
リアルタイムのアプリケーションはたいていは
.BR sched_setscheduler (2)
でリアルタイムスケジューラに変更される。
暗号やセキュリティのソフトウェアはしばしばパスワードや秘密鍵のデータの
ような重要なバイト列を扱う。ページングの結果、これらの秘密が
スワップ用の固定媒体に転送されるかもしれない。そして、セキュリティ・
ソフトウェアが RAM 上の秘密を削除して終了したずっと後になっても、
このスワップされたデータには敵がアクセスできる可能性がある
(しかし、ラップトップといくつかのデスクトップコンピュータの
サスペンドモードはシステムの RAM の内容をメモリのロックに関わらず
ディスクに保存することに注意)。

リアルタイムプロセスが
.BR mlockall ()
を使ってページフォールトによる遅延を防ごうとする場合、
関数呼び出しによってページフォールトが発生しないように、
時間制限の厳しい部分 (time-critical section) に入る前に
十分な量のロックされたスタックを確保しておく必要がある。
これを実現するには、十分な大きさの自動変数 (の配列) を確保し、
これらのスタック用のページがメモリ上に確保されるようにこの配列に
書き込みを行う関数を用意し、これを呼び出せばよい。こうすることで、
十分な量のページがスタックにマッピングされ、RAM にロックされる。
ダミーの書き込みを行うことによって、
時間制限の厳しい部分 (critical section) 内では書き込み時コピーによる
ページフォールトさえも発生しないことが保証される。

メモリロックは
.BR fork (2)
で作成された子プロセスには継承されず、
.BR execve (2)
が呼ばれたり、プロセスが終了した場合は
自動的に削除される (ロック解除される)。

あるアドレス範囲に対するメモリロックは、そのアドレス範囲が
.BR munmap (2)
によってアンマップされた場合は削除される。

メモリのロックは累積しない。
すなわち複数回
.BR mlock ()
や
.BR mlockall ()
を呼び出してロックされたページでも、
対応する範囲に対して
.BR munlock ()
を 1 回呼び出したり
.BR munlockall ()
を呼び出したりするだけでロック解除される。
複数の場所や複数のプロセスにマップされているページは、少なくとも一つの場所、
一つのプロセスでロックされている限りは RAM に残り続ける。
.SS Linux での注意
Linux では、
.BR mlock ()
と
.BR munlock ()
は自動的に
.I addr
を端数切り捨てにより一番近いページ境界へと丸める。
しかし POSIX.1-2001 は
.I addr
がページ境界に合っていることを要求する実装も許している。
そのため移植性を意図したアプリケーションではきちんと境界に合わせた方が良い。
.SS 制限と権限
Linux 2.6.8 以前では、メモリをロックするためには特権
.RB ( CAP_IPC_LOCK )
が必要で、
ソフト資源制限
.B RLIMIT_MEMLOCK
はプロセスがどれだけのメモリをロックできるかの制限を定義する。

Linux 2.6.9 以降では、特権を持つプロセスがロックできるメモリ量は無制限となり、
代わりにソフト資源制限
.B RLIMIT_MEMLOCK
は特権を持たないプロセスがロックできるメモリ量の制限を定義する。
.SH バグ
2.4.17 までの 2.4 シリーズの Linux カーネルには、
.BR mlockall ()
.B MCL_FUTURE
フラグが
.BR fork (2)
で継承されると言うバグがある。
これはカーネル 2.4.18 で修正された。

カーネル 2.6.9 以降では、特権を持ったプロセスが
.I mlockall(MCL_FUTURE)
を呼び出した後で、特権をなくした場合 (例えば、
実効 UID を 0 以外の値に変更するなどにより、
.B CAP_IPC_LOCK
ケーパビリティを失った場合)、リソース上限
.B RLIMIT_MEMLOCK
に達すると、それ以降のメモリ割り当て (例えば
.BR mmap (2),
.BR brk (2))
は失敗する。
.\" LKML の以下のスレッドを参照:
.\" http://marc.theaimsgroup.com/?l=linux-kernel&m=113801392825023&w=2
.\" "Rationale for RLIMIT_MEMLOCK"
.\" 23 Jan 2006
.SH 関連項目
.BR mmap (2),
.BR setrlimit (2),
.BR shmctl (2),
.BR sysconf (3),
.BR capabilities (7)
