.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt <drew@cs.colorado.edu>, March 28, 1992
.\" and Copyright (c) Michael Kerrisk, 2001, 2002, 2005
.\" May be distributed under the GNU General Public License.
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 24 Jul 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   New man page (copied from 'fork.2').
.\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 25 April 1998 by Xavier Leroy <Xavier.Leroy@inria.fr>
.\" Modified 26 Jun 2001 by Michael Kerrisk
.\"     Mostly upgraded to 2.4.x
.\"     Added prototype for sys_clone() plus description
.\"	Added CLONE_THREAD with a brief description of thread groups
.\"	Added CLONE_PARENT and revised entire page remove ambiguity
.\"		between "calling process" and "parent process"
.\"	Added CLONE_PTRACE and CLONE_VFORK
.\"	Added EPERM and EINVAL error codes
.\"	Renamed "__clone" to "clone" (which is the prototype in <sched.h>)
.\"	various other minor tidy ups and clarifications.
.\" Modified 26 Jun 2001 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Updated notes for 2.4.7+ behavior of CLONE_THREAD
.\" Modified 15 Oct 2002 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added description for CLONE_NEWNS, which was added in 2.4.19
.\" Slightly rephrased, aeb.
.\" Modified 1 Feb 2003 - added CLONE_SIGHAND restriction, aeb.
.\" Modified 1 Jan 2004 - various updates, aeb
.\" Modified 2004-09-10 - added CLONE_PARENT_SETTID etc. - aeb.
.\" 2005-04-12, mtk, noted the PID caching behavior of NPTL's getpid()
.\"	wrapper under BUGS.
.\" 2005-05-10, mtk, added CLONE_SYSVSEM, CLONE_UNTRACED, CLONE_STOPPED.
.\" 2005-05-17, mtk, Substantially enhanced discussion of CLONE_THREAD.
.\" 2008-11-18, mtk, order CLONE_* flags  alphabetically
.\" 2008-11-18, mtk, document CLONE_NEWPID
.\" 2008-11-19, mtk, document CLONE_NEWUTS
.\" 2008-11-19, mtk, document CLONE_NEWIPC
.\" 2008-11-19, Jens Axboe, mtk, document CLONE_IO
.\"
.\" FIXME Document CLONE_NEWUSER, which is new in 2.6.23
.\"       (also supported for unshare()?)
.\" FIXME . 2.6.25 marks the unused CLONE_STOPPED as obsolete, and it will
.\"       probably be removed in the future.
.\"
.\" Japanese Version Copyright (c) 2001 HANATAKA Shinya
.\"     and Copyright(c) 2002, 2005-2008 Akihiro MOTOKI
.\" Translated 2001-08-17, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2002-09-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Modified 2005-02-02, Akihiro MOTOKI
.\" Updated 2005-04-17, Akihiro MOTOKI
.\" Updated 2005-09-10, Akihiro MOTOKI
.\" Updated 2006-03-05, Akihiro MOTOKI, LDP v2.25
.\" Updated 2007-01-05, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-06-13, Akihiro MOTOKI, LDP v2.55
.\" Updated 2008-08-04, Akihiro MOTOKI, LDP v3.05
.\" Updated 2008-11-09, Akihiro MOTOKI, LDP v3.10
.\" Updated 2009-03-02, Akihiro MOTOKI, LDP v3.19
.\" Updated 2010-04-11, Akihiro MOTOKI, LDP v3.24
.\"
.\"WORD:	capability	ケーパビリティ
.\"WORD:	pending signals	処理待ちシグナル
.\"WORD:	namespace	名前空間
.\"
.TH CLONE 2 2010-11-01 "Linux" "Linux Programmer's Manual"
.SH 名前
clone, __clone2 \- 子プロセスを作成する
.SH 書式
.nf
.BR "#define _GNU_SOURCE" "             /* feature_test_macros(7) 参照 */"
.\" Actually _BSD_SOURCE || _SVID_SOURCE
.\" See http://sources.redhat.com/bugzilla/show_bug.cgi?id=4749
.B #include <sched.h>

.BI "int clone(int (*" "fn" ")(void *), void *" child_stack ,
.BI "          int " flags ", void *" "arg" ", ... "
.BI "          /* pid_t *" ptid ", struct user_desc *" tls \
", pid_t *" ctid " */ );"
.fi
.SH 説明
.BR clone ()
は
.BR fork (2)
と同じような方法で新しいプロセスを作成する。
.BR clone ()
には、ライブラリ関数とその下層にあたる
.BR clone ()
システムコールが存在する。以下の説明では、システムコールの方を
.B sys_clone
と表すこととする。
.B sys_clone
に関する説明はこのマニュアルの最後の方にある。

.BR fork (2)
とは異なり、これらのコールでは、子プロセス (child process)
と呼び出し元のプロセスとが、メモリ空間、
ファイルディスクリプタのテーブル、シグナル・ハンドラのテーブルなどの
実行コンテキストの一部を共有できる。
(このマニュアルにおける「呼び出し元のプロセス」は、通常は
「親プロセス」と一致する。但し、後述の
.B CLONE_PARENT
の項も参照のこと)

.BR clone ()
の主要な使用法はスレッド (threads) を実装することである:
一つのプログラムの中の複数のスレッドは共有されたメモリ空間で
同時に実行される。

.BR clone ()
で子プロセスが作成された時に、作成された子プロセスは関数
.IR fn ( arg )
を実行する。
(この点が
.BR fork (2)
とは異なる。
.BR fork (2)
の場合、子プロセスは
.BR fork (2)
が呼び出された場所から実行を続ける。)
.I fn
引き数は、子プロセスが実行を始める時に子プロセスが呼び出す
関数へのポインタである。
.I arg
引き数はそのまま
.I fn
関数へと渡される。

.IR fn ( arg )
関数が終了すると、子プロセスは終了する。
.I fn
によって返された整数が子プロセスの終了コードとなる。
子プロセスは、
.BR exit (2)
を呼んで明示的に終了することもあるし、致命的なシグナルを受信した
場合に終了することもある。

.I child_stack
引き数は、子プロセスによって使用されるスタックの位置を指定する。
子プロセスと呼び出し元のプロセスはメモリを共有することがあるため、
子プロセスは呼び出し元のプロセスと同じスタックで実行することができない。
このため、呼び出し元のプロセスは子プロセスのスタックのためのメモリ空間を
用意して、この空間へのポインタを
.BR clone ()
へ渡さなければならない。
(HP PA プロセッサ以外の) Linux が動作する全てのプロセッサでは、
スタックは下方 (アドレスが小さい方向) へと伸びる。このため、普通は
.I child_stack
は子プロセスのスタックのために用意したメモリ空間の一番大きい
アドレスを指すようにする。

.I flags
の下位 1 バイトは子プロセスが死んだ場合に親プロセスへと送られる
.I "終了シグナル (termination signal)"
の番号を指定する。このシグナルとして
.B SIGCHLD
以外が指定された場合、親プロセスは、
.BR wait (2)
で子プロセスを待つ際に、オプションとして
.B __WALL
または
.B __WCLONE
を指定しなければならない。
どのシグナルも指定されなかった場合、子プロセスが終了した時に親プロセス
にシグナルは送られない。

.I flags
には、以下の定数のうち 0個以上をビット毎の論理和 (bitwise-or)
をとったものを指定できる。これらの定数は呼び出し元のプロセスと
子プロセスの間で何を共有するかを指定する:
.TP
.BR CLONE_CHILD_CLEARTID " (Linux 2.5.49 以降)"
子プロセスが終了したときに子プロセスのメモリ内の
.I ctid
が指す場所にある子プロセスのスレッド ID を消去し、
そのアドレスで futex を wake (起床) させる。
このアドレスは
.BR set_tid_address (2)
システムコールで変更することができる。
この機能はスレッドライブラリで使用される。
.TP
.BR CLONE_CHILD_SETTID " (Linux 2.5.49 以降)"
子プロセスのメモリ内の
.I ctid
が指す場所に子プロセスのスレッド ID を格納する。
.TP
.B CLONE_FILES
.B CLONE_FILES
が設定された場合、呼び出し元のプロセスと子プロセスはファイルディスクリプタの
テーブルを共有する。
呼び出し元プロセスとその子プロセスの一方が作成した
ファイルディスクリプタは、もう一方においても有効である。
同じように、一方のプロセスがファイルディスクリプタを閉じたり、
.RB ( fcntl (2)
.B F_SETFD
操作を使って) ディスクリプタに関連するフラグを変更したりすると、
もう一方のプロセスにも影響する。

.B CLONE_FILES
が設定されていない場合、子プロセスは、
.BR clone ()
が実行された時点で、呼び出し元のプロセスがオープンしている全ての
ファイルディスクリプタのコピーを継承する
(子プロセスの複製されたファイルディスクリプタは、
対応する呼び出し元のプロセスのファイルディスクリプタと
同じファイル記述
.RB ( open (2)
参照) を参照する)。
これ以降に、呼び出し元のプロセスと子プロセスの一方が
ファイルディスクリプタの操作 (ファイルディスクリプタの
オープン・クローズや、ファイルディスクリプタ・フラグの変更)
を行っても、もう一方のプロセスには影響を与えない。
.TP
.B CLONE_FS
.B CLONE_FS
が設定された場合、呼び出し元のプロセスと子プロセスが同じファイル・システム
情報を共有する。ファイル・システム情報は、ファイル・システムのルート (root)、
カレント・ワーキング・ディレクトリ (current working directory)
や umask などである。
呼び出し元のプロセスや子プロセスのどちらか一方によって
.BR chroot (2),
.BR chdir (2),
.BR umask (2)
が呼び出されると、もう一方のプロセスにも影響が及ぶ。

.B CLONE_FS
が設定されていない場合、子プロセスは、
.BR clone ()
が実行された時点での、呼び出し元のプロセスのファイル・システム情報のコピーを
使用する。
これ以降は、呼び出し元のプロセスと子プロセスの一方が
.BR chroot (2),
.BR chdir (2),
.BR umask (2)
を呼び出しても、もう一方のプロセスには影響を与えない。
.TP
.BR CLONE_IO " (Linux 2.6.25 以降)"
.B CLONE_IO
が設定された場合、新しいプロセスは呼び出し元のプロセスと
I/O コンテキストを共有する。
このフラグが設定されていない場合には、
.RB ( fork (2)
の場合と同様) 新しいプロセスは自分専用の I/O コンテキストを持つ。

.\" The following based on text from Jens Axboe
I/O コンテキストは、ディスクスケジュールの I/O スコープである
(言い換えると、I/O コンテキストは I/O スケジューラがプロセス I/O の
スケジューリングをモデル化するのに使用される)。
複数のプロセスが同じ I/O コンテキストを共有する場合、
これらのプロセスは I/O スケジューラからは一つとして扱われる。
結果として、これらのプロセスはディスクアクセスの時間を共有するようになる。
いくつかの I/O スケジューラでは、
.\" 予測スケジューラと CFQ スケジューラ
二つのプロセスが I/O コンテキストを共有している場合、
これらのプロセスはディスクアクセスを交互に行うことができる。
同じプロセスの複数のスレッドが I/O を実行している場合
(例えば
.BR aio_read (3))、
.B CLONE_IO
を利用することで I/O 性能を良くすることができる。
.\" CFQ と AS の場合

カーネルの設定が
.B CONFIG_BLOCK
オプション付きでない場合、
このフラグは何の意味も持たない。
.TP
.BR CLONE_NEWIPC " (Linux 2.6.19 以降)"
.B CLONE_NEWIPC
が設定された場合、新しい IPC 名前空間 (namespace) でプロセスを作成する。
このフラグが設定されていない場合、
.RB ( fork (2)
の場合と同様) 呼び出し元のプロセスと同じ IPC 名前空間でプロセスが
作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

IPC 名前空間は、System V IPC オブジェクト用の識別子 (identifiers) の
集合で構成される
(System V IPC オブジェクトは
.BR msgctl (2),
.BR semctl (2),
.BR shmctl (2)
を使って作成される)。
ある IPC 名前空間に作成されたオブジェクトは、
その名前空間のメンバーである他のすべてのプロセスからも見えるが、
違う IPC 名前空間のプロセスからは見えない。

IPC 名前空間が破棄される時
(すなわち、その名前空間のメンバーの最後のプロセスが終了する時)、
その名前空間の全ての IPC オブジェクトは自動的に破棄される。

このフラグを使用するためには、
カーネルでオプション
.B CONFIG_SYSVIPC
と
.B CONFIG_IPC_NS
を有効になっていること、
プロセスが特権
.RB ( CAP_SYS_ADMIN )
を持っていることが必要である。
このフラグは
.B CLONE_SYSVSEM
と組み合わせて使うことはできない。
.TP
.BR CLONE_NEWNET " (Linux 2.6.24 以降)"
(このフラグの実装は、Linux 2.6.29 あたりまでに完成した。)

.B CLONE_NEWNET
が設定された場合、新しいネットワーク名前空間 (network namaspace)
でプロセスを作成する。
このフラグが設定されていない場合、
.RB ( fork (2)
の場合と同様) 呼び出し元のプロセスと同じネットワーク名前空間でプロセスが
作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

ネットワーク名前空間は、分離されたネットワークスタックを提供するものである
(ネットワークスタックとは、
ネットワークデバイスインタフェース、IPv4 や IPv6 プロトコルスタック、
.IR /proc/net 、
.I /sys/class/net
ディレクトリツリー、ソケットなどである)。
物理ネットワークデバイスが所属できるネットワーク名前空間は一つだけである。
仮想ネットワークデバイス ("veth") のペアにより
パイプ風の抽象化 (abstraction) が実現されており、
これを使うことで、ネットワーク名前空間間のトンネルを作成したり、
別の名前空間の物理ネットワークデバイスへのブリッジを作成したり
することができる。

ネットワーク名前空間が解放される時
(すなわち、その名前空間の最後のプロセスが終了する時)、
物理ネットワークデバイスは初期ネットワーク名前空間
(initial network namespace) に戻される
(親プロセスのネットワーク名前空間に戻される訳ではない)。

このフラグを使用するためには、
カーネルでオプション
.B CONFIG_NET_NS
を有効になっていること、
プロセスが特権
.RB ( CAP_SYS_ADMIN )
を持っていることが必要である。
.TP
.BR CLONE_NEWNS " (Linux 2.4.19 以降)"
子プロセスを新しいマウント名前空間 (mount namespace) で開始する。

各プロセスはある一つのマウント名前空間中に存在する。プロセスの
.I "名前空間 (namespace)"
は、そのプロセスから見えるファイル階層を表すデータ (mount の集合) である。
.B CLONE_NEWNS
フラグがセットされずに
.BR fork (2)
か
.BR clone ()
が呼ばれると、子プロセスは親プロセスと同じマウント名前空間に作成される。
システムコール
.BR mount (2)、
.BR umount (2)
が呼ばれると呼び出し元のプロセスのマウント名前空間が変更され、この結果
呼び出し元のプロセスと同じ名前空間にいるプロセスはすべて影響を受けるが、
異なるマウント名前空間にいるプロセスは影響を受けない。

.B CLONE_NEWNS
フラグがセットされて
.BR clone ()
が呼ばれると、clone で作成された子プロセスは新しいマウント名前空間で
開始される。新しい名前空間は親プロセスの名前空間のコピーで初期化される。

特権プロセス (\fBCAP_SYS_ADMIN\fP ケーパビリティを持つプロセス) のみが
.B CLONE_NEWNS
フラグを指定することができる。
一つの
.BR clone ()
呼び出しで、
.B CLONE_NEWNS
と
.B CLONE_FS
の両方を指定することはできない。
.TP
.BR CLONE_NEWPID " (Linux 2.6.24 以降)"
.\" This explanation draws a lot of details from
.\" http://lwn.net/Articles/259217/
.\" Authors: Pavel Emelyanov <xemul@openvz.org>
.\" and Kir Kolyshkin <kir@openvz.org>
.\"
.\" The primary kernel commit is 30e49c263e36341b60b735cbef5ca37912549264
.\" Author: Pavel Emelyanov <xemul@openvz.org>
.B CLONE_NEWPID
が設定された場合、新しい PID 名前空間でプロセスを作成する。
このフラグが設定されていない場合、
.RB ( fork (2)
の場合と同様) 呼び出し元のプロセスと同じ PID 名前空間で
プロセスが作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

PID 名前空間は、PID に関して分離された環境を提供するものである。
新しい名前空間における PID は 1 から始まり
(これはスタンドアロンのシステムと似たような感じ)、
.BR fork (2),
.BR vfork (2),
.BR clone ()
を呼び出すと、その名前空間で一意な PID を持ったプロセスが作成される。

新しい名前空間で作成される最初のプロセス
(つまり、
.B CLONE_NEWPID
フラグを使って作成されたプロセス) の PID は 1 であり、
このプロセスはその名前空間における "init" プロセスとなる。
この名前空間において孤児 (orphaned) となった子プロセスについては、
.BR init (8)
ではなくこのプロセスが親プロセスとなる。
昔ながらの
.B init
プロセスとは違い、PID 名前空間の "init" プロセスは終了 (terminated) する
ことができ、その場合には、この名前空間の全てのプロセスが終了される。

PID 名前空間間には階層構造が形成される。
新しい PID 名前空間が作成されると、その名前空間のプロセスは、
新しい名前空間を作成したプロセスの PID 名前空間で見える。
同様に、親の PID 名前空間自体が別の PID 名前空間の子供の場合には、
子供の PID 名前空間と親の PID 名前空間のプロセスはどれも
親の親の PID 名前空間でも見えることになる。
反対に、「子供」の PID 名前空間のプロセスには、
親の名前空間のプロセスは見えない。
名前空間に階層構造が存在するということは、個々のプロセスは
複数の PID を持つということを意味している。
そのプロセスが見える名前空間一つにつき PID が一つあり、
それぞれの PID は対応する名前空間において一意である。
.RB ( getpid (2)
を呼び出すと、常にそのプロセスが存在している名前空間における
PID が返される。)

新しい名前空間の作成後には、
子プロセスにおいて、
.BR ps (1)
といったツールが正しく動作するように、
自身の root ディレクトリを変更し、
.I /proc
に新しい procfs インスタンスをマウントするのがよいだろう。
.\" mount -t proc proc /proc
.RB ( flags
に
.B CLONE_NEWNS
も指定されていた場合には、root ディレクトリを変更する必要はなく、
いきなり新しい procfs インスタンスを
.I /proc
にマウントすることができる。)

このフラグを使用するためには、
カーネルでオプション
.B CONFIG_PID_NS
を有効になっていること、
プロセスが特権
.RB ( CAP_SYS_ADMIN )
を持っていることが必要である。
このフラグは
.B CLONE_THREAD
と組み合わせて使うことはできない。
.TP
.BR CLONE_NEWUTS " (Linux 2.6.19 以降)"
.B CLONE_NEWUTS
が設定された場合、新しい UTS 名前空間でプロセスを作成する。
新しい UTS 名前空間の識別子の初期値は、呼び出し元のプロセスの
UTS 名前空間の識別子を複製したものとなる。
このフラグが設定されていない場合、
.RB ( fork (2)
の場合と同様) 呼び出し元のプロセスと同じ UTS 名前空間で
プロセスが作成される。
このフラグは、コンテナの実装での使用を意図して用意されたものである。

UTS 名前空間は、
.BR uname (2)
が返す識別子の集合である。
識別子としてはドメイン名とホスト名があり、
それぞれ
.BR setdomainname (2),
.BR sethostname (2)
で修正することができる。
ある UTS 名前空間における識別子の変更は同じ名前空間の他のすべての
プロセスに見えるが、別の UTS 名前空間のプロセスには見えない。

このフラグを使用するためには、
カーネルでオプション
.B CONFIG_UTS_NS
を有効になっていること、
プロセスが特権
.RB ( CAP_SYS_ADMIN )
を持っていることが必要である。
.TP
.BR CLONE_PARENT " (Linux 2.3.12 以降)"
.B CLONE_PARENT
が設定された場合、新しい子供の
.RB ( getppid (2)
で返される) 親プロセスは呼び出し元のプロセスの親プロセスと同じになる。

.B CLONE_PARENT
が設定されていない場合、
.RB ( fork (2)
と同様に) 呼び出し元のプロセスがその子供の親になる。

子供が終了した時にシグナルが送られるのは
.BR getppid (2)
が返す親プロセスである点に注意すること。このため
.B CLONE_PARENT
が設定された場合、呼び出し元のプロセスではなく呼び出し元のプロセスの
親プロセスにシグナルが送られる。
.TP
.BR CLONE_PARENT_SETTID " (Linux 2.5.49 以降)"
親プロセスと子プロセスのメモリ内の
.I ptid
が指す領域に子プロセスのスレッド ID を格納する。
(Linux 2.5.32-2.5.48 では、
同じことをする
.B CLONE_SETTID
というフラグが存在した。)
.TP
.BR CLONE_PID " (廃止予定)"
.B CLONE_PID
が設定された場合、子プロセスは呼び出し元のプロセスと同じプロセス ID
で作成される。これはシステムをハッキングするのには便利だが、
それ以外にはあまり使われない。 Linux 2.3.21 以降では、
システムのブートプロセス (PID 0) だけがこのフラグを指定できる。
Linux 2.5.16 で削除された。
.TP
.B CLONE_PTRACE
.B CLONE_PTRACE
が指定され、かつ呼び出し元のプロセスが追跡 (trace) されていた場合、子プロセスも
同様に追跡される。
.RB ( ptrace (2)
を参照のこと)
.TP
.BR CLONE_SETTLS " (Linux 2.5.32 以降)"
.I newtls
引き数は、新しい TLS (Thread Local Storage) ディスクリプタである。
.RB ( set_thread_area (2)
を参照のこと)
.TP
.B CLONE_SIGHAND
.B CLONE_SIGHAND
が設定された場合、呼び出し元のプロセスと子プロセスは同じシグナル・ハン
ドラのテーブルを共有する。呼び出し元のプロセスまたは子プロセスのどちらかが
.BR sigaction (2)
を呼び出してシグナルに対応する動作を変更した場合、
もう一方のプロセスのシグナル動作も変更される。
但し、呼び出し元のプロセスと子プロセスは、
プロセス毎に、シグナル・マスク (signal mask) と処理待ちシグナルの集合
を持っている。このため、あるプロセスは、
.BR sigprocmask (2)
を使用して、もう一方のプロセスに影響を与えずに
シグナルを禁止 (block) したり許可 (unblock) したりできる。

.B CLONE_SIGHAND
が設定されていない場合、子プロセスは
.BR clone ()
が実行された時点での、呼び出し元のプロセスのシグナル・ハンドラの
コピーを継承する。これ以降は、一方のプロセスが
.BR sigaction (2)
を呼び出しても、もう一方のプロセスには影響を与えない。

Linux 2.6.0-test6 以降では、
.B CLONE_SIGHAND
を指定する場合、
.B CLONE_VM
も
.I flags
に含めなければならない。
.TP
.BR CLONE_STOPPED " (Linux 2.6.0-test2 以降)"
.B CLONE_STOPPED
が設定されると、子プロセスは最初
.RB ( SIGSTOP
シグナルを送られたかのように) 停止した状態となる。
子プロセスを再開させるには
.B SIGCONT
シグナルを送信しなければならない。

.I "Linux 2.6.25 以降、このフラグは非推奨である。"
このフラグを使いたいと思うことは決してないだろうし、
確実に使わないようにすべきである。
このフラグは近いうちになくなることだろう。
.\" glibc 2.8 removed this defn from bits/sched.h
.TP
.BR CLONE_SYSVSEM " (Linux 2.5.10 以降)"
.B CLONE_SYSVSEM
がセットされると、子プロセスと呼び出し元プロセスは一つの
System V セマフォのアンドゥ値リスト
.RB ( semop (2)
参照) を共有する。このフラグがセットされていなければ、
子プロセスは独自のアンドゥリストを持つ (リストの初期値は空である)。
.TP
.BR CLONE_THREAD " (Linux 2.4.0-test8以降)"
.B CLONE_THREAD
が設定された場合、子プロセスは呼び出し元のプロセスと同じスレッド・グループに
置かれる。
.B CLONE_THREAD
についての以降の議論を読みやすくするため、
「スレッド」という用語はスレッド・グループの中のプロセスを
参照するのに使うこととする。

スレッド・グループは、 スレッド集合で一つの PID を共有するという POSIX
スレッドの概念をサポートするために Linux 2.4 に加えられた機能であった。
内部的には、この共有 PID はいわゆるそのスレッドグループの
スレッド・グループ識別子 (TGID) である。
Linux 2.4 以降では、
.BR getpid (2)
の呼び出しではそのプロセスのスレッド・グループ ID を返す。

あるグループに属するスレッドは (システム全体で) 一意なスレッド ID (TID)
で区別できる。新しいスレッドの TID は
.BR clone ()
の呼び出し元へ関数の結果として返され、
スレッドは自分自身の TID を
.BR gettid (2)
で取得できる。

.B CLONE_THREAD
を指定せずに
.BR clone ()
の呼び出しが行われると、
生成されたスレッドはそのスレッドの TID と同じ値の TGID を持つ
新しいスレッド・グループに置かれる。このスレッドは
新しいスレッド・グループの「リーダー」である。

.B CLONE_THREAD
を指定して作成された新しいスレッドは、
.RB ( CLONE_PARENT
の場合と同様に)
.BR clone ()
を呼び出し元と同じ親プロセスを持つ。
そのため、
.BR getppid (2)
を呼ぶと、一つのスレッド・グループに属すスレッドは全て同じ値を返す。
.B CLONE_THREAD
で作られたスレッドが終了した際に、
そのスレッドを
.BR clone ()
を使って生成したスレッドには
.B SIGCHLD
(もしくは他の終了シグナル) は送信されない。
また、
.BR wait (2)
を使って終了したスレッドの状態を取得することもできない
(そのようなスレッドは
.I detached
(分離された) といわれる)。

スレッド・グループに属す全てのスレッドが終了した後、
そのスレッド・グループの親プロセスに
.B SIGCHLD
(もしくは他の終了シグナル) が送られる。

スレッド・グループに属すいずれかのスレッドが
.BR execve (2)
を実行すると、スレッド・グループ・リーダー以外の全てのスレッドは
終了され、新しいプロセスがそのスレッド・グループ・リーダーの下で
実行される。

スレッド・グループに属すスレッドの一つが
.BR fork (2)
を使って子プロセスを作成した場合、
スレッド・グループのどのスレッドであっても
その子供を
.BR wait (2)
できる。

Linux 2.5.35 以降では、
.B CLONE_THREAD
を指定する場合、
.I flags
に
.B CLONE_SIGHAND
も含まれていなければならない。

.BR kill (2)
を使ってスレッド・グループ全体 (つまり TGID) にシグナルを送ることもできれば、
.BR tgkill (2)
を使って特定のスレッド (つまり TID) にシグナルを送ることもできる。

シグナルの配送と処理はプロセス全体に影響する:
ハンドラを設定していないシグナルがあるスレッドに配送されると、
そのシグナルはスレッド・グループの全メンバーに影響を及ぼす
(終了したり、停止したり、動作を継続したり、無視されたりする)。

各々のスレッドは独自のシグナルマスクを持っており、
.BR sigprocmask (2)
で設定できる。
だが、処理待ちのシグナルには、
.BR kill (2)
で送信されるプロセス全体に対するもの (つまり、スレッド・グループの
どのメンバーにも配送できるもの) と、
.BR tgkill (2)
で送信される個々のスレッドに対するものがありえる。
.BR sigpending (2)
を呼び出すと、プロセス全体に対する処理待ちシグナルと呼び出し元の
スレッドに対する処理待ちシグナルを結合したシグナル集合が返される。

.BR kill (2)
を使ってスレッド・グループにシグナルが送られた場合で、
そのスレッド・グループがそのシグナルに対するシグナル・ハンドラが
登録されていたときには、シグナル・ハンドラはスレッド・グループの
メンバーのうち、ただ一つのスレッドでだけ起動される。ハンドラが
起動されるスレッドは、そのシグナルを禁止 (block) していない
メンバーの中から一つだけが勝手に (arbitrarily) 選ばれる。
スレッド・グループに属す複数のスレッドが
.BR sigwaitinfo (2)
を使って同じシグナルを待っている場合、
これらのスレッドの中から一つをカーネルが勝手に選択し、
そのスレッドが
.B kill (2)
を使って送信されたシグナルを受信する。
.TP
.BR CLONE_UNTRACED " (Linux 2.5.46 以降)"
.B CLONE_UNTRACED
が指定されると、 trace を行っているプロセスは
この子プロセスに
.B CLONE_PTRACE
を適用することができない。
.TP
.B CLONE_VFORK
.B CLONE_VFORK
が設定された場合、
.RB ( vfork (2)
と同様に) 子プロセスが
.BR execve (2)
または
.BR _exit (2)
によって仮想メモリを解放するまで、呼び出し元のプロセスの実行は停止される。

.B CLONE_VFORK
が設定されていない場合、
.BR clone ()
呼び出し後は、呼び出し元のプロセスと子プロセスの
両方がスケジュール対象となり、アプリケーションはこれらのプロセスの
実行順序に依存しないようにすべきである。
.TP
.B CLONE_VM
.B CLONE_VM
が設定された場合、呼び出し元のプロセスと子プロセスは同じメモリ空間で
実行される。特に、呼び出し元のプロセスや子プロセスの一方がメモリに
書き込んだ内容はもう一方のプロセスからも見ることができる。さらに、
子プロセスや呼び出し元のプロセスの一方が
.BR mmap (2)
や
.BR munmap (2)
を使ってメモリをマップしたりアンマップした場合、
もう一方のプロセスにも影響が及ぶ。

.B CLONE_VM
が設定されていない場合、子プロセスは
.BR clone ()
が実行された時点での、親プロセスのメモリ空間をコピーした
別のメモリ空間で実行される。
一方のプロセスが行ったメモリへの書き込みや
ファイルのマップ/アンマップは、
.BR fork (2)
の場合と同様、もう一方のプロセスには影響しない。
.SS "sys_clone"
.B sys_clone
システムコールは、より
.BR fork (2)
に近いかたちになっており、子プロセスの実行が呼び出しが行われた場所から
続けられる。
そのため、
.B sys_clone
が必要とする引き数は
.I flags
と
.I child_stack
だけであり、それらは
.BR clone ()
と同じ意味を持つ
(これらの引き数の順番は
.BR clone ()
とは異なることに注意せよ)。

.B sys_clone
のもう一つの違いは、
.I child_stack
引き数がゼロでも良いことである。この場合には、どちらかのプロセスが
スタックを変更した時に、書き込み時コピー (copy-on-write) 方式により
子プロセスがスタック・ページの独立したコピーを得られることが保証される。
この場合、正常に動作させるためには、
.B CLONE_VM
オプションを指定してはならない。

Linux 2.4 以前では、
.BR clone ()
は引き数
.IR ptid ,
.IR tls ,
.IR ctid
を取らない。
.SH 返り値
.\" gettid(2) は current->pid を返す
.\" getpid(2) は current->tgid を返す
成功した場合、呼び出し元の実行スレッドには子プロセスのスレッドID が返される。
失敗した場合、 呼び出し元のコンテキストには \-1 が返され、子プロセスは
作成されず、
.I errno
が適切に設定される。
.SH エラー
.TP
.B EAGAIN
すでに実行中のプロセスが多すぎる。
.TP
.B EINVAL
.B CLONE_SIGHAND
が指定されていたが、
.B CLONE_VM
が指定されていなかった。
(Linux 2.6.0-test6 以降)
.TP
.B EINVAL
.B CLONE_THREAD
が指定されていたが、
.B CLONE_SIGHAND
が指定されていなかった。
(Linux 2.5.35 以降)
.\" .TP
.\" .B EINVAL
.\" .B CLONE_DETACHED
.\" と
.\" .B CLONE_THREAD
.\" のいずれか一方だけが指定された。
.\" (Linux 2.6.0-test6 以降)
.TP
.B EINVAL
.B CLONE_FS
と
.B CLONE_NEWNS
の両方が
.I flags
に指定された。
.TP
.B EINVAL
.B CLONE_NEWIPC
と
.B CLONE_SYSVSEM
の両方が
.I flags
に指定された。
.TP
.B EINVAL
.B CLONE_NEWPID
と
.B CLONE_THREAD
の両方が
.I flags
に指定された。
.TP
.B EINVAL
.I child_stack
にゼロを指定した場合に
.BR clone ()
が返す。
.TP
.B EINVAL
.I flags
に
.B CLONE_NEWIPC
が指定されたが、カーネルでオプション
.B CONFIG_SYSVIPC
と
.B CONFIG_IPC_NS
が有効になっていなかった。
.TP
.B EINVAL
.I flags
に
.B CLONE_NEWNET
が指定されたが、カーネルでオプション
.B CONFIG_NET_NS
が有効になっていなかった。
.TP
.B EINVAL
.I flags
に
.B CLONE_NEWPID
が指定されたが、カーネルでオプション
.B CONFIG_PID_NS
が有効になっていなかった。
.TP
.B EINVAL
.I flags
に
.B CLONE_NEWUTS
が指定されたが、カーネルでオプション
.B CONFIG_UTS
が有効になっていなかった。
.TP
.B ENOMEM
子プロセスのために確保すべきタスク構造体や、呼び出し元のコンテキストの
一部をコピーするのに必要なメモリを十分に割り当てることができない。
.TP
.B EPERM
非特権プロセス (\fBCAP_SYS_ADMIN\fP を持たないプロセス) が
.BR CLONE_NEWIPC ,
.BR CLONE_NEWNET ,
.BR CLONE_NEWNS ,
.BR CLONE_NEWPID ,
.BR CLONE_NEWUTS
を指定した。
.TP
.B EPERM
PID が 0 以外のプロセスによって
.B CLONE_PID
が指定された。
.SH バージョン
libc5 には
.BR clone ()
はない。glibc2 では
.BR clone ()
が提供されており、このマニュアルページに記載の通りである。
.SH 準拠
.BR clone ()
と
.B sys_clone
コールは Linux 特有であり、移植を考慮したプログラムでは使用すべき
ではない。
.SH 注意
カーネル 2.4.x 系列では、一般的には
.B CLONE_THREAD
フラグを指定しても新しいスレッドの親を
呼び出し元プロセスの親と同じにはしない。
しかし、バージョン 2.4.7〜2.4.18 のカーネルでは、
(カーネル 2.6 と同じように) CLONE_THREAD フラグを指定すると、
暗黙のうちに CLONE_PARENT フラグを指定したことになる。

.B CLONE_DETACHED
というフラグが、2.5.32 で導入されて以来しばらくの間存在した。
このフラグは親プロセスが子プロセス終了のシグナルを必要としないことを
表すものである。
2.6.2 で、 CLONE_DETATCHED を CLONE_THREAD と一緒に指定する必要はなくなった。
このフラグはまだ定義されているが、何の効果もない。

i386 上では、
.BR clone ()
は vsyscall 経由ではなく、直接
.I "int $0x80"
経由で呼び出すべきである。

ia64 では、別のシステムコールが使用される:
.nf

.BI "int __clone2(int (*" "fn" ")(void *), "
.BI "             void *" child_stack_base ", size_t " stack_size ,
.BI "             int " flags ", void *" "arg" ", ... "
.BI "          /* pid_t *" ptid ", struct user_desc *" tls \
", pid_t *" ctid " */ );"
.fi
.PP
.BR __clone2 ()
システムコールは
.BR clone ()
と同じように動作するが、以下の点が異なる:
.I child_stack_base
は子プロセスのスタックエリアの最小のアドレスを指し、
.I stack_size
は
.I child_stack_base
が指し示すスタックエリアの大きさを示す。
.SH バグ
NPTL スレッド・ライブラリを含んでいる GNU C ライブラリのいくつかのバージョン
には、
.BR getpid (2)
のラッパー関数が含まれており、このラッパー関数は PID をキャッシュする。
このキャッシュ処理が正しく動作するためには glibc の
.BR clone ()
のラッパー関数での助けが必要だが、現状の実装では、
ある状況下においてキャッシュが最新とならない可能性がある。
特に、
.BR clone ()
の呼び出し直後にシグナルが子プロセスに配送された場合に、
そのシグナルに対するハンドラ内で
.BR getpid (2)
を呼び出すと、それまでに clone のラッパー関数が子プロセスの PID キャッシュを
更新する機会が得られていなければ、呼び出し元プロセス ("親プロセス") の PID が
返される可能性がある。
(この議論では、子プロセスが
.B CLONE_THREAD
を使って作成された場合のことは無視している。
子プロセスが
.B CLONE_THREAD
を作って作成された場合には、
呼び出し元と子プロセスは同じスレッド・グループに属すので、
.BR getpid (2)
は子プロセスと
.BR clone ()
を呼び出したプロセスで同じ値を返すのが「正しい」。
キャッシュが最新とならない問題 (stale-cache problem) は、
.I flags
に
.B CLONE_VM
が含まれている場合にも発生しない。)
本当の値を得るためには、次のようなコードを使う必要があるかもしれない。
.nf

    #include <syscall.h>

    pid_t mypid;

    mypid = syscall(SYS_getpid);
.fi
.\" See also the following bug reports
.\" https://bugzilla.redhat.com/show_bug.cgi?id=417521
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=6910
.SH 関連項目
.BR fork (2),
.BR futex (2),
.BR getpid (2),
.BR gettid (2),
.BR set_thread_area (2),
.BR set_tid_address (2),
.BR tkill (2),
.BR unshare (2),
.BR wait (2),
.BR capabilities (7),
.BR pthreads (7)
