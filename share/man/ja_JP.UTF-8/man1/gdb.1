.\" Copyright (c) 1991 Free Software Foundation
.\" See section COPYING for conditions for redistribution
.\" %FreeBSD: src/gnu/usr.bin/binutils/gdb/gdb.1,v 1.7 1999/08/27 23:34:49 peter Exp %
.\" $FreeBSD: doc/ja_JP.eucJP/man/man1/gdb.1,v 1.7 2001/05/14 01:07:24 horikawa Exp $
.TH gdb 1 "4nov1991" "GNU Tools" "GNU Tools"
.SH 名称
gdb \- GNU デバッガ
.SH 書式
.na
.TP
.B gdb
.RB "[\|" \-help "\|]"
.RB "[\|" \-nx "\|]"
.RB "[\|" \-q "\|]"
.RB "[\|" \-batch "\|]"
.RB "[\|" \-cd=\c
.I dir\c
\|]
.RB "[\|" \-f "\|]"
.RB "[\|" \-k "\|]"
.RB "[\|" \-wcore "\|]"
.RB "[\|" "\-b\ "\c
.IR bps "\|]"
.RB "[\|" "\-tty="\c
.IR dev "\|]"
.RB "[\|" "\-s "\c
.I symfile\c
\&\|]
.RB "[\|" "\-e "\c
.I prog\c
\&\|]
.RB "[\|" "\-se "\c
.I prog\c
\&\|]
.RB "[\|" "\-c "\c
.I core\c
\&\|]
.RB "[\|" "\-x "\c
.I cmds\c
\&\|]
.RB "[\|" "\-d "\c
.I dir\c
\&\|]
.RB "[\|" \c
.I prog\c
.RB "[\|" \c
.IR core \||\| procID\c
\&\|]\&\|]
.ad b
.SH 解説
GDB をはじめとするデバッガは、プログラムが実行中もしくはクラッシュした時にその
プログラムの ``内部'' で何が行なわれているか/行われていたかを調べるのに
使用されます。

GDB は、4 つの機能 (加えてこれらをサポートする機能) によって
実行中にバグを見つけることを手助けします。

.TP
\ \ \ \(bu
プログラムの動作を詳細に指定してプログラムを実行させる。

.TP
\ \ \ \(bu
指定した条件でプログラムを停止させる。

.TP
\ \ \ \(bu
プログラムが止まった時に、何が起こったか調べる。

.TP
\ \ \ \(bu
バグによる副作用を修正し、別のバグを調べるためプログラムの状態を変更する。
.PP

GDB では C, C++, Modula-2 などで書かれたプログラムのデバッグが行なえます。
GNU Fortran コンパイラが完成すれば Fortran もサポートされます。

GDB はシェルコマンド\c
.B gdb\c
\&で起動されます。いったん起動すると、GDB コマンド\c
.B quit\c
\&を実行して終了するまで、端末からコマンドを読み続けます。
.B gdb\c
\&のオンラインヘルプは(\c
.B gdb\c
の中で)
.B help\c
\&コマンドを実行すれば表示されます。

.B gdb\c
\& は引数やオプション無しで起動できますが、
たいてい、1 つか 2 つの引数を付けて起動します。実行プログラムを
引数にする場合は以下のようになります:
.sp
.br
gdb\ program
.br
.sp

また実行プログラムと core ファイルの両方を指定することもできます:
.sp
.br
gdb\ program\ core
.br
.sp

もし実行中のプロセスのデバッグを行ないたい場合には、
第 2 引数として core の代わりにプロセス ID を指定します:
.sp
.br
gdb\ program\ 1234
.br
.sp

これは GDB をプロセス ID \c
.B 1234\c
\& のプロセスに接続します(このとき`\|\c
.B 1234\c
\&\|'という名前のファイルが存在してはいけません。
GDB はまず core ファイルを最初にチェックしにいくからです)。

よく利用される GDB コマンドには以下のようなものがあります:
.TP
.B break \fR[\|\fIfile\fB:\fR\|]\fIfunction
\&
プレークポイントを \c
\& (\c
.I file\c
\&内の)
.I function\c
に設定します。
.TP
.B run \fR[\|\fIarglist\fR\|]
プログラムの実行を開始します(もしあれば
.I arglist\c
\&を\c
引数として)。
.TP
.B bt
バックトレース: プログラムのスタックを表示します。
.TP
.BI print " expr"\c
\&
式の値を表示します。
.TP
.B c
プログラムの実行を再開します。(たとえばブレークポイントで実行を中断した後で)
.TP
.B next
次のプログラム行を実行します 。
その行内の全ての関数は 1 ステップで実行されます。
.TP
.B step
次のプログラム行を実行します。
もしその行に関数が含まれていれば、その関数内をステップ実行していきます。
.TP
.B help \fR[\|\fIname\fR\|]
GDB コマンド \c
.I name\c
\&についての情報や、
GDB を使う上での一般的な情報を表示します。
.TP
.B quit
GDB を終了します。
.PP
GDB の詳細については\c
.I
Using GDB: A Guide to the GNU Source-Level Debugger\c
\&, by Richard M. Stallman and Roland H. Pesch. を参照して下さい。
同じテキストは、
.B info\c
\& プログラム内の
.B gdb\c
\& エントリからオンラインで参照できます。
.SH オプション
オプション以外の引数は、実行ファイルと core ファイル (もしくはプロセス ID)
を表します。つまりオプションフラグでもオプションフラグの引数でもない最初の
引数は `\|\c
.B \-se\c
\&\|' オプションで指定するファイルと同じになり、(もしあれば)次の 2 番目の引数は
`\|\c
.B \-c\c
\&\|' オプションで指定するファイルと同じになります。

オプションの多くは、長い表記法と短い表記法の両方で指定することができま
すが、ここではその両方を示します。
長い表記法は、どのオプションであるのかが明確であれば、短く切り詰めても
構いません。
(好みにより `\|\c
.B \-\c
\&\|' の代わりに
`\|\c
.B +\c
\&\|' が使用できますが、ここではよく用いられる表記で記します。)

全てのオプションとコマンドライン引数は指定した順番に処理されます。
`\|\c
.B \-x\c
\&\|' オプションが使用されると、この順番は変わってきます。

.TP
.B \-help
.TP
.B \-h
短い説明つきで、全てのオプションを表示します。

.TP
.BI "\-symbols=" "file"\c
.TP
.BI "\-s " "file"\c
\&
シンボルテーブルをファイル \c
.I file\c
\&から読みます。

.TP
.BI "\-exec=" "file"\c
.TP
.BI "\-e " "file"\c
\&
ファイル \c
.I file\c
\& を実行可能ファイルとして利用します。
core dump と連係して pure data を調べるのにも用いられます。

.TP
.BI "\-se=" "file"\c
\&
ファイル \c
.I file\c
\& からシンボルテーブルを読み、同時にそれを実行可能ファイルとして利用します。

.TP
.BI "\-core=" "file"\c
.TP
.BI "\-c " "file"\c
\&
ファイル \c
.I file\c
\& を core dump として利用します。

.TP
.BI "\-command=" "file"\c
.TP
.BI "\-x " "file"\c
\&
ファイル \c
.I file\c
\&から GDB のコマンドを読み込み、実行します。

.TP
.BI "\-directory=" "directory"\c
.TP
.BI "\-d " "directory"\c
\&
ソースファイルを探すサーチパスに \c
.I directory\c
\& を追加します。
.PP

.TP
.B \-nx
.TP
.B \-n
初期化ファイル `\|\c
.B .gdbinit\c
\&\|' からコマンドを読み込みません。
通常は、
全てのコマンドオプションと引数が処理された後で、
初期化ファイル内のコマンドが実行されます。

.TP
.B \-quiet
.TP
.B \-q
起動時のメッセージおよび copyright を表示しません。
これらのメッセージはバッチモードでも抑制されます。

.TP
.B \-batch
バッチモードで動作します。`\|\c
.B \-x\c
\&\|' で指定したファイル(および、-nx か -n で抑制されていなければ `\|\c
.B .gdbinit\c
\&\|') 内の全てのコマンドを
処理した後、戻り値として \c
.B 0\c
\& を返して終了します。
コマンドファイル内の GDB コマンドの実行中にエラーが生じた場合は、
0 以外の値で終了します。

バッチモードは GDB をフィルタとして実行する場合、
たとえばプログラムをダウンロードして別のコンピュータ上で実行したりする場合
に便利です。
以下のメッセージ
.sp
.br
Program\ exited\ normally.(プログラムは正常に終了しました。)
.br
.sp
は通常、GDB の制御端末上で実行されるプログラムが終了するたびに
出力されるものですが、
バッチモードではこのようなメッセージは出力されません。
.TP
.BI "\-cd=" "directory"\c
\&
カレントディレクトリの代わりに \c
.I directory\c
\& を GDB の作業用ディレクトリとして実行します。

.TP
.B \-fullname
.TP
.B \-f
Emacs が GDB をサブプロセスとして実行する際にこのオプションを付加します。
このとき GDB は、スタックフレームが表示される度(プログラムが中断する度を
含みます)に、完全なファイル名と行番号を標準的な認識しやすい形式で表示します。
この表示書式は 2 つの
`\|\c
.B \032\c
\&\|'
文字、ファイル名、コロンで区切られた行番号と文字位置、改行の順になっ
ています。これは Emacs→GDB インタフェースプログラムにおいて、
フレームに対応するソースコードを表示するために 2 つの
`\|\c
.B \032\c
\&\|' 文字を使うことになっているからです。

.TP
.B \-kernel
.TP
.B \-k
gdb をカーネルデバッグモードで使用します。
プロンプトは ``(kgdb)'' になります。

.TP
.B \-wcore
このオプションはカーネルデバッグモードで
「動作中の」カーネルをデバッグしている時のみ使用可能であり、
コアファイル (/dev/mem) を書き込み可能にします。

.TP
.BI "\-b " "bps"\c
\&
リモートデバッグ用に GDB が利用するシリアルインタフェースの転送速度を
(ボーレートまたはビット/秒で)セットします。

.TP
.BI "\-tty=" "device"\c
\&
プログラムの標準入出力に \c
.I device\c
\& を利用します。
.PP

.SH "関連項目"
.B info\c
内の
.RB "`\|" gdb "\|'"
エントリ
\&;
.I
Using GDB: A Guide to the GNU Source-Level Debugger\c
, Richard M. Stallman and Roland H. Pesch, July 1991.
.SH COPYING
Copyright (c) 1991 Free Software Foundation, Inc.
.PP
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
