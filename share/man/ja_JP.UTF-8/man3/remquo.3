.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" Distributed under GPL
.\" based on glibc infopages
.\" polished, aeb
.\"
.\" Japanese Version Copyright (c) 2005 Yuichi SATO
.\" and Copyright (c) 2008 Akihiro MOTOKI
.\" Translated Tue Feb  1 06:39:08 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2008-09-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH REMQUO 3 2010-09-20 "GNU" "Linux Programmer's Manual"
.SH 名前
remquo, remquof, remquol \- 商の一部と剰余を求める
.SH 書式
.nf
.B #include <math.h>
.sp
.BI "double remquo(double " x ", double " y ", int *" quo );
.br
.BI "float remquof(float " x ", float " y ", int *" quo );
.br
.BI "long double remquol(long double " x ", long double " y ", int *" quo );
.fi
.sp
\fI\-lm\fP でリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR remquo (),
.BR remquof (),
.BR remquol ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH 説明
これらの関数は
.I x
を
.I y
で割ったときの商の一部と剰余を計算する。
商のいくつかのビットが
.I quo
ポインタを使って格納される。
剰余は関数の結果として返される。

剰余の値は
.BR remainder (3)
関数で計算されるものと同じである。

.I quo
ポインタを使って格納される値には、
.I "x\ /\ y"
の符号と最低でも商の下位 3 ビットが含まれる。

たとえば \fIremquo(29.0,\ 3.0)\fP は \-1.0 を返し、
(訳注: quo の指しているものには) 2 が格納される。
実際の商が整数値にならない点に注意すること。
.\" この関数を利用するアプリケーションとしては、
.\" sin(x) の計算などがあるかもしれない。
.\" sin(x) では remquo(x, pi/2, &quo) などを計算する。
.\"
.\" glibc, UnixWare: 3 ビットを返す。
.\" MacOS 10: 7 ビットを返す。
.SH 返り値
成功すると、これらの関数は
.BR remainder (3)
に書かれている同様の関数と同じ値を返す。

.I x
か
.I y
が NaN の場合、NaN が返される。

.I x
が無限大で
.I y
が NaN でない場合、
領域エラー (domain error) が発生し、NaN が返される。

.I y
がゼロで
.I x
が NaN でない場合、
領域エラー (domain error) が発生し、NaN が返される。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は
.BR math_error (7)
を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP
領域エラー (domain error): \fIx\fP が無限大か \fIy\fP が 0 で、 \
他の引き数が NaN でない
.\" .I errno
.\" is set to
.\" .BR EDOM .
不正 (invalid) 浮動小数点例外
.RB ( FE_INVALID )
が上がる。
.PP
これらの関数は
.I errno
を設定しない。
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6802
.SH バージョン
これらの関数は glibc バージョン 2.1 で初めて登場した。
.SH 準拠
C99, POSIX.1-2001.
.SH 関連項目
.BR fmod (3),
.BR logb (3),
.BR remainder (3)
