.\" Copyright 1993 Mitchum DSouza <m.dsouza@mrc-apu.cam.ac.uk>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified, jmv@lucifer.dorms.spbu.ru, 1999-11-08
.\" Modified, aeb, 2000-04-07
.\" Updated from glibc docs, C. Scott Ananian, 2001-08-25
.\" Modified, aeb, 2001-08-31
.\" Modified, wharms 2001-11-12, remark on white space and example
.\"
.\" Japanese Version Copyright (c) 1998 SHOJI Yasushi all rights reserved.
.\" Translated Fri Jun 26 1998 by SHOJI Yasushi <yashi@yashi.com>
.\" Updated & Modefied Sun Mar 7 1999 by Shouichi Saito
.\" Updated Tue Oct 10 22:29:13 JST 2000
.\" 	by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" Updated Tue Apr  3 20:49:00 JST 2001
.\"     by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated Thu Oct 11 10:05:36 JST 2001 by Yuichi SATO
.\" Updated Fri Dec 14 16:34:23 JST 2001 by Yuichi SATO
.\" Updated Sat Jan  5 22:17:34 JST 2002 by Yuichi SATO
.\" Updated Wed Jan 14 23:21:57 JST 2002 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\"WORD:	modifier	修正子
.\"WORD:	broken-down time	要素別の時刻
.\"
.TH STRPTIME 3 2009-12-05 "GNU" "Linux Programmer's Manual"
.SH 名前
strptime \- 文字列であらわされている時間を tm 構造体の時間に変換する
.SH 書式
.BR "#define _XOPEN_SOURCE" "       /* feature_test_macros(7) 参照 */"
.br
.B #include <time.h>
.sp
.BI "char *strptime(const char *" s ", const char *" format ,
.BI "struct tm *" tm );
.SH 説明
.BR strptime ()
関数は
.BR strftime (3)
の逆関数であり、ポインタ
.I s
が指す文字列を時間に変換する。
変換の際には
.I format
で指定したフォーマットを用い、値はポインタ
.I tm
が指す
.I tm
構造体に収められる。
.I format
は、
.BR scanf (3)
で使われているような、
フィールドディスクリプターとテキスト文字で構成されている文字列である。
個々のフィールドディスクリプターは
.B %
とそれに続く文字からなり、
後者にフィールドディスクリプターを置き換える内容を指定する。
.I format
文字列中の他の全ての文字には、入力文字列にマッチする文字がなければならない。
フォーマット文字列中にある空白は例外であり、
入力文字列中の 0 個以上の空白とマッチする。
2 つのフィールドディスクリプターの間には、
空白・英字・数字がなければならない。
.PP
.BR strptime ()
関数は、入力文字列を左から右へ処理する。
入力された 3 つの要素 (空白・文字・フォーマット) は、順に処理される。
入力がフォーマット文字列とマッチできない場合、関数は停止する。
残りのフォーマット文字列と入力文字列は処理されない。
.PP
使用可能なフィールドディスクリプターを以下に挙げる。
(曜日や月の名前といった) 文字列をマッチさせる場合、
大文字と小文字は区別せずに比較する。
数をマッチさせる場合、前に 0 をつけても構わないが必ずしも必要ではない。
.TP
.B %%
文字としての
.BR % 。
.TP
.BR %a " または " %A
現在のロケールでの曜日名 (省略名または完全な名前)。
.TP
.BR %b " または " %B " または " %h
現在のロケールでの月名 (省略名または完全な名前)。
.TP
.B %c
現在のロケールでの日付と時刻の表現。
.TP
.B %C
1 世紀中の年 (0-99)。
.TP
.BR %d " または " %e
月内の日付 (1-31)。
.TP
.B %D
日付。
.B %m/%d/%y
と同じ。
(これはアメリカ式の日付形式で、
ヨーロッパでは特に
.B %d/%m/%y
という形式が広く使われているために、
アメリカ人以外には紛らわしく感じられる。
ISO 8601 規格では
.B %Y-%m-%d
という形式である。)
.TP
.B %H
時間 (0-23)。
.TP
.B %I
12 時間制での時間 (1-12)。
.TP
.B %j
年の初めからの通算の日付 (1-366)。
.TP
.B %m
数字表現の月 (1-12)。
.TP
.B %M
分 (0-59)。
.TP
.B %n
任意の空白。
.TP
.B %p
ロケールの AM (午前) と PM (午後) に対応するもの。
(注意: 対応するものがないかもしれない。)
.TP
.B %r
(ロケールの AM と PM を使った) 12 時間制の時間。
POSIX ロケールでは
.B %I:%M:%S %p
と同じ。
現在のロケールにおいて
.B LC_TIME
パートの
\fIt_fmt_ampm\fP が定義されていない場合、
動作は未定義である。
.TP
.B %R
.B %H:%M
と同じ。
.TP
.B %S
秒 (0-60; 60 は閏秒を示す。以前は 61 も指定できた)。
.TP
.B %t
任意の空白。
.TP
.B %T
.B %H:%M:%S
と同じ。
.TP
.B %U
日曜日を週の始まりとした年通算での週数 (0-53)。
1 月の最初の日曜日を第 1 週目の最初の日する。
.TP
.B %w
日曜日を 0 とした数字表記の曜日 (0-6)。
.TP
.B %W
月曜日を週の始まりとした年通算での週数 (0-53)。
1 月の最初の月曜日を第 1 週目の最初の日する。
.TP
.B %x
日付。ロケールの日付フォーマットを使う。
.TP
.B %X
時刻。ロケールの時刻フォーマットを使う。
.TP
.B %y
1 世紀中の年 (0-99)。
世紀が指定されない場合、
値が 69-99 の範囲のときは 20 世紀の年 (1969-1999)、
値が 00-68 の範囲のときは 21 世紀の年 (2000-2068) とする。
.TP
.B %Y
年。世紀の部分を含む (例: 1991)。
.LP
E や O という修正子を使うことで変更できるフィールドディスクリプタもある。
これらの修正子は、別のフォーマットや仕様を使うことを指示する。
別のフォーマットや仕様が現在のロケールに存在しないときは、
変更していないフィールドディスクリプタが使われる。
.LP
E 修正子は、ロケールに依存した日付と時刻の別の表現形式が
入力文字列に含まれていることを指定する。
.TP
.B %Ec
日付と時刻。ロケールに依存した別の表現形式を使う。
.TP
.B %EC
基準年 (期間) の名前。ロケールに依存した別の表現形式を使う。
.TP
.B %Ex
日付。ロケールに依存した別の表現形式を使う。
.TP
.B %EX
時刻。ロケールに依存した別の表現形式を使う。
.TP
.B %Ey
.B %EC
(年のみ) からのオフセット。ロケールに依存した別の表現形式を使う。
.TP
.B %EY
完全な形式の年。別の表現型式を使う。
.LP
O 修正子は、ロケールに依存した別のフォーマットの中に
数値の入力があることを指定する。
.TP
.BR %Od " または " %Oe
月の初めからの通算の日付。ロケールに依存した別の数値シンボルを使う。
0 を頭につけてもよいが、必須ではない。
.TP
.B %OH
時間 (24 時間制)。ロケールに依存した別の数値シンボルを使う。
.TP
.B %OI
時間 (12 時間制)。ロケールに依存した別の数値シンボルを使う。
.TP
.B %Om
月。ロケールに依存した別の数値シンボルを使う。
.TP
.B %OM
分。ロケールに依存した別の数値シンボルを使う。
.TP
.B %OS
秒。ロケールに依存した別の数値シンボルを使う。
.TP
.B %OU
年の初めからの通算の週数 (日曜日を週の始めとする)。
ロケールに依存した別の数値シンボルを使う。
.TP
.B %Ow
数値表記の曜日 (日曜日を 0 とする)。
ロケールに依存した別の数値シンボルを使う。
.TP
.B %OW
年の初めからの通算の週数 (月曜日を週の始めとする)。
ロケールに依存した別の数値シンボルを使う。
.TP
.B %Oy
年
.RB ( %C
からのオフセット)。ロケールに依存した別の数値シンボルを使う。
.LP
要素別の時刻構造体 \fItm\fP は
\fI<time.h>\fP 内で以下の様に定義されている。
.sp
.in +4n
.nf
struct tm {
    int tm_sec;        /* 秒 */
    int tm_min;        /* 分 */
    int tm_hour;       /* 時間 */
    int tm_mday;       /* 日 */
    int tm_mon;        /* 月 */
    int tm_year;       /* 年 */
    int tm_wday;       /* 曜日 */
    int tm_yday;       /* 年内通算日 */
    int tm_isdst;      /* 夏時間 */
};
.fi
.in
.SH 返り値
この関数の返り値は、関数の中で処理されなかった最初の文字へのポインタである。
フォーマット文字列が必要する以上の文字が入力文字列に含まれている場合、
返り値は最後に処理された入力文字の次の文字を指す。
すべての入力文字列が処理された場合、
返り値は文字列末尾の NULL バイトを指す。
.BR strptime ()
がフォーマット文字列のすべての比較に失敗し、
エラーが起こった場合、関数は NULL ポインタを返す。
.SH 準拠
SUSv2, POSIX.1-2001.
.SH 注意
.LP
原則として、この関数は \fItm\fP の初期化はせずに、
指定された値のみを入れる。
つまり、この関数の呼び出しの前に \fItm\fP を初期化しなければならない。
他の UNIX システムとは、細かい点で異なる。
glibc の実装では、明示的に指定されないフィールドは変更されない。
例外として、年・月・日のいずれかの要素が変更された場合に
.I tm_wday
と
.I tm_yday
が再計算される。
.PP
この関数は、libc 4.6.8 以降で使用できる。
Linux の libc4 と libc5 のインクルードファイルは、
この関数のプロトタイプを常に定義する。
glibc2 のインクルードファイルは、
.B _XOPEN_SOURCE
または
.B _GNU_SOURCE
が定義された場合のみ、
この関数のプロトタイプを提供する。
.PP
libc 5.4.13 より前では、空白 (と \(aqn\(aq または \(aqt\(aq 指定) は扱われなかった。
ロケールの修正子 \(aqE\(aq と \(aqO\(aq は受け付けられなかった。
また、\(aqC\(aq の指定は \(aqc\(aq の指定と同じ意味で扱われた。
.PP
\(aqy\(aq (1 世紀中の年) の指定は、libc4 と libc5 では 20 世紀の年として解釈される。
glibc 2.0 では 1950-2049 の範囲として解釈される。
glibc 2.1 からは 1969-2068 の範囲として解釈される。
.\" libc4 と libc5 では %I 用のコードが壊れている (glibc で修正された;
.\" %OI は glibc 2.2.4 で修正された)。
.SS glibc での注意
対象性のために、glibc では
.BR strptime ()
に
.BR strftime (3)
と同じフォーマット文字をサポートさせようとしている。
多くの場合、対応するフィールドが解釈されるが、
\fItm\fP フィールドは変更されない。
使用可能なフォーマット文字を以下に示す。
.TP
.B %F
\fB%Y-%m-%d\fP と同じ。ISO 8601 の日付形式。
.TP
.B %g
ISO 週数に対応した西暦年。世紀は含まず (0-99) の範囲。
.TP
.B %G
ISO 週数に対応した西暦年 (例えば 1991)。
.TP
.B %u
10 進数表記の曜日 (1-7 で月曜日を 1 とする)。
.TP
.B %V
ISO 8601:1988 形式での年通算の 10 進数表記での週数 (1-53)。
1 月 1 日を含む (月曜日から始まる) 週に 4 日以上が含まれている場合は、
その週を第 1 週とする。
3 日以下しか含まれていない場合は、1 月 1 日を含む週を前年の最終の週として、
次の週を第 1 週とする。
.TP
.B %z
RFC-822/ISO 8601 標準タイムゾーンを指定する。
.TP
.B %Z
タイムゾーン名。
.LP
同様に、
.BR strftime (3)
の GNU 版での拡張に対応するために、
.B %k
は
.B %H、
.B %P
は
.B %p
と等価に扱われる。また、
.B %l
は
.B %I
と等価に扱われるようになるはずである。

さらに以下も定義されている。
.TP
.B %s
紀元 (Epoch; 1970-01-01 00:00:00 +0000 (UTC)) からの通算の秒数。
閏秒がサポートされていない限り、閏秒はカウントしない。
.LP
glibc における実装では、2 つのフィールド間の空白は必要ない。
.SH 例
以下の例は
.BR strptime ()
と
.BR strftime (3)
の使用法を示している。
.sp
.nf
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

int
main(void)
{
    struct tm tm;
    char buf[255];

    memset(&tm, 0, sizeof(struct tm));
    strptime("2001\-11\-12 18:31:01", "%Y\-%m\-%d %H:%M:%S", &tm);
    strftime(buf, sizeof(buf), "%d %b %Y %H:%M", &tm);
    puts(buf);
    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
.BR time (2),
.BR getdate (3),
.BR scanf (3),
.BR setlocale (3),
.BR strftime (3)
