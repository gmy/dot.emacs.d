.\" Copyright 2003 Walter Harms, Andries Brouwer
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" Distributed under GPL.
.\"
.\" Japanese Version Copyright (c) 2004-2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sat Jul 24 10:14:17 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Mon Jan 10 08:17:08 JST 2005 by Yuichi SATO
.\" Updated 2008-09-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH FDIM 3 2010-09-20 "" "Linux Programmer's Manual"
.SH 名前
fdim, fdimf, fdiml \- 正の差分を計算する
.SH 書式
.B #include <math.h>
.sp
.BI "double fdim(double " x ", double " y );
.br
.BI "float fdimf(float " x ", float " y );
.br
.BI "long double fdiml(long double " x ", long double " y );
.sp
\fI-lm\fP でリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR fdimf (),
.BR fdiml ():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I cc\ -std=c99
.RE
.ad
.SH 説明
これらの関数は、二つの引き数間の正の差分 max(\fIx\fP-\fIy\fP,0) を返す。
.SH 返り値
成功すると、これらの関数は正の差分を返す。

.I x
か
.I y
が NaN の場合、NaN が返される。

結果がオーバーフローする場合、範囲エラーが発生し、
各関数はそれぞれ
.BR HUGE_VAL ,
.BR HUGE_VALF ,
.B HUGE_VALL
を返す。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は
.BR math_error (7)
を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP
範囲エラー (range error)、オーバーフローの場合
.\" .I errno
.\" is set to
.\" .BR ERANGE .
オーバーフロー浮動小数点例外
.RB ( FE_OVERFLOW )
が上がる。
.PP
これらの関数は
.I errno
を設定しない。
.\" FIXME . Is it intentional that these functions do not set errno?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6796
.SH バージョン
これらの関数は glibc バージョン 2.1 で初めて登場した。
.SH 準拠
C99, POSIX.1-2001.
.SH 関連項目
.BR fmax (3)
