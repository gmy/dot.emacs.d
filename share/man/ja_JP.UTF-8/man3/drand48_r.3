.\" Copyright 2003 Walter Harms, 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Created 2004-10-31. Text taken from a page by Walter Harms, 2003-09-08
.\"
.\" Japanese Version Copyright (c) 2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Sat Jan 29 04:28:24 JST 2005
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH DRAND48_R 3 2007-07-26 "GNU" "Linux Programmer's Manual"
.SH 名前
drand48_r, erand48_r, lrand48_r, nrand48_r, mrand48_r, jrand48_r, srand48_r, seed48_r, lcong48_r \- 一様分布する疑似乱数をリエントラント (reentrant) に生成する
.SH 書式
.nf
.B #include <stdlib.h>
.sp
.BI "int drand48_r(struct drand48_data *" buffer ", double *" result );
.sp
.BI "int erand48_r(unsigned short " xsubi [3] ","
.br
.BI "              struct drand48_data *"buffer ", double *" result ");"
.sp
.BI "int lrand48_r(struct drand48_data *" buffer ", long int *" result );
.sp
.BI "int nrand48_r(unsigned short int " xsubi[3] ","
.br
.BI "              struct drand48_data *"buffer ", long int *" result ");"
.sp
.BI "int mrand48_r(struct drand48_data *" buffer ",long int *" result ");"
.sp
.BI "int jrand48_r(unsigned short int " xsubi[3] ","
.br
.BI "              struct drand48_data *" buffer ", long int *" result ");"
.sp
.BI "int srand48_r(long int " seedval ", struct drand48_data *" buffer ");"
.sp
.BI "int seed48_r(unsigned short int " seed16v[3] ","
.br
.BI "             struct drand48_data *" buffer ");"
.sp
.BI "int lcong48_r(unsigned short int " param[7] ","
.br
.BI "              struct drand48_data *" buffer ");"
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
上記の全ての関数:
.\" .BR drand48_r (),
.\" .BR erand48_r (),
.\" .BR lrand48_r (),
.\" .BR nrand48_r (),
.\" .BR mrand48_r (),
.\" .BR jrand48_r (),
.\" .BR srand48_r (),
.\" .BR seed48_r (),
.\" .BR lcong48_r ():
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.ad b
.SH 説明
これらの関数は
.BR drand48 (3)
で説明されている関数に類似するリエントラントな関数である。
大域的な乱数生成の状態を変更する代わりに、
これらの関数は指定されたデータ
.I buffer
を使う。

最初に使う前に、この構造体は初期化されていなければならない。
初期化は、たとえば 0 で埋めたり、関数
.BR srand48_r (),
.BR seed48_r (),
.BR lcong48_r ()
のいずれかを呼び出すことによって行われる。
.SH 返り値
返り値は 0 である。
.SH 準拠
これらの関数は GNU による拡張であり、移植性はない。
.SH 関連項目
.BR drand48 (3),
.BR rand (3),
.BR random (3)
