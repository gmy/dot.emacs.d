.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   OpenGroup's Single UNIX specification
.\"	http://www.UNIX-systems.org/online.html
.\" 2000-06-30 correction by Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" 2000-11-15 aeb, fixed prototype
.\"
.\" Japanese Version Copyright (c) 2000 Yuichi SATO
.\"         all rights reserved.
.\" Translated 2000-07-11, Yuichi SATO <sato@complex.eng.hokudai.ac.jp>
.\" Updated 2008-09-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.09
.\"
.\"WORD:	conversion	変換
.\"WORD:	descriptor	ディスクリプター
.\"WORD:	sequence	文字列
.\"WORD:	
.\"
.TH ICONV 3 2008-09-08 "GNU" "Linux Programmer's Manual"
.SH 名前
iconv \- 文字セット変換を行う
.SH 書式
.nf
.B #include <iconv.h>
.sp
.BI "size_t iconv(iconv_t " cd ,
.BI "             char **" inbuf ", size_t *" inbytesleft ,
.BI "             char **" outbuf ", size_t *" outbytesleft );
.fi
.SH 説明
引き数 \fIcd\fP は、関数
.BR iconv_open (3)
を使って生成される
変換ディスクリプターでなければならない。
.PP
主に使われるのは、
「\fIinbuf\fP が NULL でなく、かつ \fI*inbuf\fP が NULL でない」
という場合である。
この場合、
.BR iconv ()
関数は、
\fI*inbuf\fP で始まるマルチバイト文字列を
\fI*outbuf\fP で始まるマルチバイト文字列に変換する。
\fI*inbuf\fP を先頭として最大 \fI*inbytesleft\fP バイトが読み込まれ、
\fI*outbuf\fP を先頭として最大 \fI*outbytesleft\fP バイトが書き出される。
.PP
.BR iconv ()
関数は 1 度に 1 つのマルチバイト文字を変換する。
そして、各文字変換毎に、変換された入力バイトの数だけ
\fI*inbuf\fP を増加させ、\fI*inbytesleft\fP を減少させる。
また、変換された出力バイトの数だけ
\fI*outbuf\fP を増加させ、\fI*outbytesleft\fP を減少させる。
さらに、\fIcd\fP に含まれる変換状態を更新する。
入力の文字エンコーディングがが状態を持つ場合、
.BR iconv ()
関数は入力バイトの列に対して変換にも対応しており、
バイト出力を伴わずに変換状態を更新することができる。
変換は、次の 4 つの場合に停止する。
.PP
1. 入力に無効なマルチバイト文字列があった場合。
この場合、関数は \fIerrno\fP を \fBEILSEQ\fP に設定し、
.I (size_t)\ \-1
を返す。
\fI*inbuf\fP は、無効なマルチバイト文字列の先頭を指したままになる。
.PP
2. 入力バイト文字列が完全に変換され、\fI*inbytesleft\fP が 0 になった場合。
この場合、
.BR iconv ()
は、呼出しの間に非可逆変換が行われた回数を返す。
.PP
3. 入力に不完全なマルチバイト文字列があり、
入力バイト文字列がその後で終了している場合。
この場合、関数は、\fIerrno\fP を \fBEINVAL\fP に設定し、
.I (size_t)\ \-1
を返す。
\fI*inbuf\fP は、不完全なマルチバイト文字列の先頭を指したままにされる。
.PP
4. 出力バッファーに次の変換された文字列のための空きがない場合。
この場合、\fIerrno\fP が \fBE2BIG\fP に設定され、
.I (size_t)\ \-1
が返される。
.PP
別のケースとしては、
「\fIinbuf\fP が NULL、または \fI*inbuf\fP が NULL である。
しかし、\fIoutbuf\fP が NULL でなく、かつ \fI*outbuf\fP が NULL でない」
という場合がある。
この場合、
.BR iconv ()
関数は、\fIcd\fP の変換状態を初期状態にして、
対応するシフト文字列を \fI*outbuf\fP に保存しようとする。
最大 \fI*outbytesleft\fP バイトが、\fI*outbuf\fP を始めとして書き出される。
このリセットされた文字列に対して、出力バッファーに空きがない場合、
この関数は \fIerrno\fP を \fBE2BIG\fP に設定し、
.I (size_t)\ \-1
を返す。
それ以外の場合、この関数は、書き込まれたバイトの数だけ
\fI*outbuf\fP を増加させ、\fI*outbytesleft\fP を減少させる。
.PP
3 番目のケースしては、
「\fIinbuf\fP が NULL、または \fI*inbuf\fP が NULL である。
かつ、\fIoutbuf\fP が NULL、または \fI*outbuf\fP が NULL である」
という場合がある。
この場合、
.BR iconv ()
関数は、\fIcd\fP の変換状態を初期状態にする。
.SH 返り値
.BR iconv ()
関数は、呼出しの間に非可逆な方法で変換された文字数を返す。
つまり、可逆変換はカウントされない。
エラーの場合、この関数は \fIerrno\fP を設定し、
.I (size_t)\ \-1
を返す。
.SH エラー
他のいろいろなエラーのうちから、以下のエラーが起こりうる。
.TP
.B E2BIG
\fI*outbuf\fP に十分な空きがない。
.TP
.B EILSEQ
入力に無効なマルチバイト文字列があった。
.TP
.B EINVAL
入力に不完全なマルチバイト文字列があった。
.SH バージョン
この関数はバージョン 2.1 以降の glibc で利用可能である。
.SH 準拠
POSIX.1-2001.
.SH 関連項目
.BR iconv_close (3),
.BR iconv_open (3)
