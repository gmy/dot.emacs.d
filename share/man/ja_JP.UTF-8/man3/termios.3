.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de)
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1995-02-25 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" Modified 1995-09-02 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\" moved to man3, aeb, 950919
.\" Modified 2001-09-22 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2001-12-17, aeb
.\" Modified 2004-10-31, aeb
.\" 2006-12-28, mtk:
.\"     Added .SS headers to give some structure to this page; and a
.\"     small amount of reordering.
.\"     Added a section on canonical and noncanonical mode.
.\"     Enhanced the discussion of "raw" mode for cfmakeraw().
.\"     Document CMSPAR.
.\"
.\" Japanese Version Copyright (c) 1998-1999
.\"   Michihide Hotta and NAKANO Takeo all rights reserved.
.\" Translated 1998-02-02, Michihide Hotta <sim@remus.dti.ne.jp>
.\" Updated 1999-03-14, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 2001-02-17, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-10-16, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-01-04, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2003-09-01, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2006-07-26, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.36
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-09-06, Akihiro MOTOKI, LDP v2.64
.\"
.\"WORD:	carriage return		復帰(文字)
.\"WORD:	new line		改行(文字)
.\"WORD:	fill character		補填文字
.\"WORD:	horizontal tab		水平タブ
.\"WORD:	backspace		後退(文字)
.\"WORD:	vertical tab		垂直タブ
.\"WORD:	feature test macro	機能検査マクロ
.\"
.TH TERMIOS 3 2010-06-20 "Linux" "Linux Programmer's Manual"
.SH 名前
termios, tcgetattr, tcsetattr, tcsendbreak, tcdrain, tcflush, tcflow,
cfmakeraw, cfgetospeed, cfgetispeed, cfsetispeed, cfsetospeed, cfsetspeed \-
ターミナル属性の取得・設定、ライン制御、ボーレートの取得・設定
.SH 書式
.nf
.B #include <termios.h>
.br
.B #include <unistd.h>
.sp
.BI "int tcgetattr(int " fd ", struct termios *" termios_p );
.sp
.BI "int tcsetattr(int " fd ", int " optional_actions ,
.BI "              const struct termios *" termios_p );
.sp
.BI "int tcsendbreak(int " fd ", int " duration );
.sp
.BI "int tcdrain(int " fd );
.sp
.BI "int tcflush(int " fd ", int " queue_selector );
.sp
.BI "int tcflow(int " fd ", int " action );
.sp
.BI "void cfmakeraw(struct termios *" termios_p );
.sp
.BI "speed_t cfgetispeed(const struct termios *" termios_p );
.sp
.BI "speed_t cfgetospeed(const struct termios *" termios_p );
.sp
.BI "int cfsetispeed(struct termios *" termios_p ", speed_t " speed );
.sp
.BI "int cfsetospeed(struct termios *" termios_p ", speed_t " speed );
.sp
.BI "int cfsetspeed(struct termios *" termios_p ", speed_t " speed );
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR cfsetspeed (),
.BR cfmakeraw ():
_BSD_SOURCE
.SH 説明
termios 関数群は、非同期通信ポートを制御するための汎用
ターミナルインタフェースである。
.SS "termios 構造体"
.LP
ここに示されている関数の多くは、引き数に \fItermios_p\fP を用いる。
この引き数は \fItermios\fP 構造体へのポインタである。
この構造体には少なくとも以下に示すメンバが含まれる:
.sp
.in +4n
.nf
tcflag_t c_iflag;      /* input modes */
tcflag_t c_oflag;      /* output modes */
tcflag_t c_cflag;      /* control modes */
tcflag_t c_lflag;      /* local modes */
cc_t     c_cc[NCCS];   /* control chars */
.fi
.in
.PP
以下に、これらのフィールドに割り当て可能な値について説明する。
最初の 4 つのビットマスクフィールドでは、
関係するフラグの定義のいくつかは、特定の機能検査マクロ
.RB ( feature_test_macros (7)
参照) が定義された場合にのみ公開される。
必要な機能検査マクロは角括弧 ("[]") 内に書かれている。
.PP
以下の説明で、 "POSIX にはない" は
その値が POSIX.1-2001 で規定されていないことを意味し、
"XSI" はその値が POSIX.1-2001 の XSI 拡張で
規定されていることを意味する。
.PP
\fIc_iflag\fP フラグには以下の要素を指定できる:
.TP
.B IGNBRK
入力中の BREAK 信号を無視する。
.TP
.B BRKINT
\fBIGNBRK\fP が設定されている場合は、BREAK 信号は無視される。
\fBIGNBRK\fP が設定されていないが、\fBBRKINT\fP が設定されている場合は、
BREAK 信号によって入出力キューがフラッシュされ、
さらに、端末がフォアグラウンドプロセスグループの制御端末の場合は、
フォアグラウンドプロセスグループに \fBSIGINT\fP が送られる。
\fBIGNBRK\fP も \fBBRKINT\fP も設定されていない場合、
BREAK を NULL バイト (\(aq\\0\(aq) として読み込む。
ただし、\fBPARMRK\fP が設定されている場合は \\377 \\0 \\0 のシーケンスとして
読み込む。
.TP
.B IGNPAR
フレームエラーおよびパリティエラーを無視する。
.TP
.B PARMRK
\fBIGNPAR\fP が設定されていない場合、パリティエラーあるいはフレームエラー
の発生した文字の前に \\377 \\0 を付加する。\fBIGNPAR\fP も \fBPARMRK\fP も
設定されていない場合、パリティエラーあるいはフレームエラーの発生した文字を
\\0 として読み込む。
.TP
.B INPCK
入力のパリティチェックを有効にする。
.TP
.B ISTRIP
8 ビット目を落とす。
.TP
.B INLCR
入力の NL (New Line: 改行文字) を CR (Carriage Return: 復帰文字) に
置き換える。
.TP
.B IGNCR
入力の CR を無視する。
.TP
.B ICRNL
(\fBIGNCR\fP が設定されていない場合) 入力の CR を NL に置き換える。
.TP
.B IUCLC
(POSIX にはない) 入力の大文字を小文字に置き換える。
.TP
.B IXON
出力の XON/XOFF フロー制御を有効にする。
.TP
.B IXANY
(XSI) 任意の文字を入力すると、停止していた出力を再開する
(デフォルトでは、START 文字でのみ出力が再開される)。
.TP
.B IXOFF
入力の XON/XOFF フロー制御を有効にする。
.TP
.B IMAXBEL
(POSIX にはない) 入力キューが一杯の時にベルを鳴らす。
Linux ではこのビットは実装されておらず、
常にセットされているかのように振舞う。
.TP
.BR IUTF8 " (Linux 2.6.4 以降)"
(POSIX にはない) 入力が UTF8 である;
これにより cooked mode で文字削除 (character-erase) を
正しく機能させることができる。
.PP
POSIX.1 で定義されている \fIc_oflag\fP フラグを以下に示す:
.TP
.B OPOST
実装に依存した出力処理を有効にする。
.PP
残りの \fIc_oflag\fP フラグは、特記のない限り POSIX.1-2001 で定義されている。
.TP
.B OLCUC
(POSIX にはない) 出力時に小文字を大文字に変換する。
.TP
.B ONLCR
(XSI) 出力の NL を CR-NL に置き換える。
.TP
.B OCRNL
出力の CR を NL に置き換える。
.TP
.B ONOCR
0 桁目で CR を出力しない。
.TP
.B ONLRET
CR を出力しない。
.TP
.B OFILL
転送時間を遅らせるのではなく、補填文字 (fill character) を送る。
(訳注:特定の文字に対して、端末側の処理を待つために転送を一定時間
遅らせることができる。また、 \fBOFILL\fP を指定すると
転送を遅らせる代わりに補填文字を送る。)
.TP
.B OFDEL
(POSIX にはない) 補填文字を ASCII DEL にする。
このフラグが設定されていない場合は ASCII NUL (\(aq\\0\(aq) になる。
(Linux では実装されていない)
.TP
.B NLDLY
NL の遅延を設定する。値は \fBNL0\fP (遅延なし) および \fBNL1\fP である。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
か
.B _XOPEN_SOURCE
が必要]
.TP
.B CRDLY
CR の遅延を設定する。値は \fBCR0\fP (遅延なし),
\fBCR1\fP, \fBCR2\fP,\fBCR3\fP である。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
か
.B _XOPEN_SOURCE
が必要]
.TP
.B TABDLY
水平タブ (horizontal tab) の遅延を設定する。
値は \fBTAB0\fP (遅延なし),
\fBTAB1\fP, \fBTAB2\fP, \fBTAB3\fP (\fBXTABS\fP) である。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
か
.B _XOPEN_SOURCE
が必要]
XTAB3 (これは XTABS と同じである) の値はタブをスペース何個に変換するかを示す
(タブは 8 桁毎に止まる)。
.TP
.B BSDLY
後退 (backspace) の遅延を設定する。
値は \fBBS0\fP (遅延なし) あるいは \fBBS1\fP である。
(実装されたことはない)
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
か
.B _XOPEN_SOURCE
が必要]
.TP
.B VTDLY
垂直タブ (vertical tab) の遅延を設定する。
値は \fBVT0\fP (遅延なし) あるいは \fBVT1\fP である。
.TP
.B FFDLY
頁送り (form feed) の遅延を設定する。
値は \fBFF0\fP (遅延なし) あるいは \fBFF1\fP である。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
か
.B _XOPEN_SOURCE
が必要]
.PP
\fIc_cflag\fP フラグは以下の通り:
.TP
.B CBAUD
(POSIX にはない) ボーレートマスク (4+1 ビット)。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B CBAUDEX
(POSIX にはない) 追加のボーレートマスク (1 ビット)。
.B CBAUD
に含まれている。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.sp
(POSIX では、
.I termios
構造体に格納されたボーレートは正確なものではなく、
ボーレートを操作するために
.BR cfgetispeed ()
と
.BR cfsetispeed ()
が提供されている。
.I c_cflag
内の
.B CBAUD
で選択されたビットを使うシステムもあれば、
.I sg_ispeed
や
.I sg_ospeed
といった独立したフィールドを使うものもある。)
.TP
.B CSIZE
文字サイズを設定する。
値は \fBCS5\fP, \fBCS6\fP, \fBCS7\fP, \fBCS8\fP である。
.TP
.B CSTOPB
ストップビットを 1 ではなく 2 にする。
.TP
.B CREAD
受信を有効にする。
.TP
.B PARENB
出力にパリティを付加し、入力のパリティチェックを行う。
.TP
.B PARODD
設定されると、入力および出力に対するパリティが奇数パリティとなる。
設定されない場合、偶数パリティが使用される。
.TP
.B HUPCL
最後のプロセスがデバイスをクローズした後、モデムの制御線を low にする
(切断する)。
.TP
.B CLOCAL
モデムの制御線を無視する。
.TP
.B LOBLK
(POSIX にはない) 現在のシェル層以外からの出力を抑制する。
 \fBshl\fP (シェル層) で用いられる。(Linux では実装されていない)
.TP
.B CIBAUD
(POSIX にはない) 入力速度のマスク。
.B CIBAUD
ビットのための値は
.B CBAUD
ビットのための値と同じであり、
左に
.B IBSHIFT
ビットシフトしたものである。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
(Linux では実装されていない)
.TP
.B CMSPAR
(POSIX にはない)
(一部のシリアルデバイスでサポートされている)
「スティック (stick)」パリティ (マーク/スペース パリティ)を使用する。
.B PARODD
が設定された場合パリティビットは常に 1 となり、
設定されない場合は常に 0 となる。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B CRTSCTS
(POSIX にはない) RTS/CTS (ハードウェア) フロー制御を有効にする。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.PP
\fIc_lflag\fP フラグは以下の通り:
.TP
.B ISIG
INTR, QUIT, SUSP, DSUSP の文字を受信した時、対応するシグナルを
発生させる。
.TP
.B ICANON
カノニカルモードを有効にする (下記参照)。
.TP
.B XCASE
(POSIX にはない; Linux では対応していない)
\fBICANON\fP が同時に設定された場合、端末は大文字のみが有効である。
入力された文字は \\ が付いた文字を除いて小文字に変換される。
出力時は、大文字の前に \\ が付き、小文字は大文字に変換される。
.RB [ _BSD_SOURCE
が
.B _SVID_SOURCE
か
.B _XOPEN_SOURCE
が必要]
.\" 以下はおそらく glibc の間違いであろう。
.\" .B XCASE
.\" を公開するには
.\" .B _XOPEN_SOURCE
.\" を定義すること。
.TP
.B ECHO
入力された文字をエコーする。
.TP
.B ECHOE
\fBICANON\fP も同時に設定された場合、ERASE 文字は前の文字を削除し、
WERASE 文字は前の単語を削除する。
.TP
.B ECHOK
\fBICANON\fP も同時に設定された場合、KILL 文字は現在の行を削除する。
.TP
.B ECHONL
\fBICANON\fP も同時に設定された場合、
ECHO が設定されていなくても NL 文字をエコーする。
.TP
.B ECHOCTL
(POSIX にはない) \fBECHO\fP も同時に設定された場合、
TAB, NL, START, STOP の ASCII 制御文字が \fB^X\fP としてエコーされる。
X は制御文字より ASCII コードで 0x10 だけ大きな文字である。
例えば文字 0x28 (BS) は \fB^H\fP とエコーされる。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B ECHOPRT
(POSIX にはない) \fBICANON\fP および \fBIECHO\fP が同時に設定されている場合、
削除された文字も表示される。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B ECHOKE
(POSIX にはない) \fBICANON\fP も設定された場合、
KILL が行の各文字を消去する代わりにエコーされる。
これは \fBECHOE\fP および \fBECHOPRT\fP を指定することと等しい。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B DEFECHO
(POSIX にはない) プロセスが読み込んだときにだけエコーする。
(Linux では実装されていない)
.TP
.B FLUSHO
(POSIX にはない; Linux では対応していない)
出力をフラッシュする。このフラグは DISCARD 文字を入力することで切替えられる。
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B NOFLSH
.\" Stevens lets SUSP only flush the input queue
INT, QUIT, SUSP 文字に対応するシグナルを発生する際の
入力・出力キューのフラッシュを無効にする。
.TP
.B TOSTOP
バックグラウンドプロセスのプロセスグループで制御端末へ
文字を出力しようとしているプロセスに対して
.B SIGTTOU
シグナルを送る。
.TP
.B PENDIN
(POSIX にはない; Linux では対応していない)
次の文字を読み込んだ時、入力キュー中の全文字を再表示する。
.RB ( bash (1)
は入力行をこのように処理している。)
.RB [ _BSD_SOURCE
か
.B _SVID_SOURCE
が必要]
.TP
.B IEXTEN
実装依存の入力処理を有効にする。
このフラグは、特殊文字である EOL2, LNEXT, REPRINT, WERASE や、
\fBIUCLC\fP フラグを有効にするために必要である。
.PP
\fIc_cc\fP 配列は特殊な制御文字を定義している。
シンボルの一覧 (初期値) と意味は以下の通り。
.TP
.B VINTR
(003, ETX, Ctrl-C か 0177, DEL, rubout)
割り込み文字。
.B SIGINT
シグナルを送る。
.B ISIG
がセットされている場合に認識し、入力には渡されない。
.TP
.B VQUIT
(034, FS, Ctrl-\e)
終了文字。
.B SIGQUIT
シグナルを送る。
.B ISIG
がセットされている場合に認識し、入力には渡されない。
.TP
.B VERASE
(0177, DEL, rubout か 010, BS, Ctrl-H か #)
消去文字。これにより、直前の未消去文字を消去する。
しかし、EOF や行頭を超えては消去しない。
.B ICANON
がセットされている場合に認識し、入力には渡されない。
.TP
.B VKILL
(025, NAK, Ctrl-U か Ctrl-X か @)
完全消去文字。直前の EOF か行頭以降の全ての入力を消去する。
.B ICANON
がセットされている場合に認識し、入力には渡されない。
.TP
.B VEOF
(004, EOT, Ctrl-D)
ファイル終端文字。
より正確には、tty バッファの内容を行末を待たずにユーザープログラムに送る。
これが行の最初の文字だった場合、ユーザープログラムの
.BR read (2)
は 0 を
返し、ファイル終端であることを知らせる。
.B ICANON
がセットされている場合に認識し、入力には渡されない。
.TP
.B VMIN
非カノニカル読み込み時の最小文字数。
.TP
.B VEOL
(0, NUL)
追加の行末文字。
.B ICANON
がセットされている場合に認識する。
.TP
.B VTIME
非カノニカル読み込み時のタイムアウト時間 (1/10 秒単位)。
.TP
.B VEOL2
(POSIX にはない; 0, NUL)
追加の行末文字。
.B ICANON
がセットされている場合に認識する。
.TP
.B VSWTCH
(POSIX にはない; Linux では対応していない; 0, NUL)
スイッチ文字 (\fBshl\fP でのみ用いられる)。
.TP
.B VSTART
(021, DC1, Ctrl-Q)
開始文字。停止文字で停止した出力を再開する。
.B IXON
がセットされている場合に認識し、入力には渡されない。
.TP
.B VSTOP
(023, DC3, Ctrl-S)
停止文字。開始文字が入力されるまで出力を停止する。
.B IXON
が設定されている場合に認識し、入力には渡されない。
.TP
.B VSUSP
(032, SUB, Ctrl-Z)
中断文字。
.B SIGTSTP
シグナルを送る。
.B ISIG
がセットされている場合に認識し、入力には渡されない。
.TP
.B VDSUSP
(POSIX にはない; Linux では対応していない; 031, EM, Ctrl-Y)
遅延中断文字。ユーザープログラムから文字が読み込まれた時に
.B SIGTSTP
シグナルを送る。
.B IEXTEN
と
.B ISIG
がセットされていて、システムがジョブ制御に対応している場合に
認識し、入力には渡されない。
.TP
.B VLNEXT
(POSIX にはない; 026, SYN Ctrl-V)
リテラル。次の入力文字をエスケープし、特別な意味があっても解釈しない。
.B IEXTEN
がセットされている場合に認識し、入力には渡されない。
.TP
.B VWERASE
(POSIX にはない; 027, ETB, Ctrl-W)
単語消去。
.B ICANON
と
.B IEXTEN
がセットされている場合に認識し、入力には渡されない。
.TP
.B VREPRINT
(POSIX にはない; 022, DC2, Ctrl-R)
まだ読み込んでいない文字列を再表示する。
.B ICANON
と
.B IEXTEN
がセットされている場合に認識し、入力には渡されない。
.TP
.B VDISCARD
(POSIX にはない; Linux では対応していない; 017, SI, Ctrl-O)
未送信バッファの内容の破棄/保存を切り替える。
.B IEXTEN
がセットされている場合に認識し、入力には渡されない。
.TP
.B VSTATUS
(POSIX にはない; Linux では対応していない;
状態要求: 024, DC4, Ctrl-T)
.LP
これらのシンボルの示す値は全て異なる。
ただし、
.BR VTIME ,
.B VMIN
はそれぞれ
.BR VEOL ,
.B VEOF
と同じ値である。
非カノニカルモードでは、特殊文字の意味はタイムアウトの意味に変わる。
.B VMIN
と
.B VTIME
の説明については、下記の非カノニカルモードの説明を参照のこと。
.SS "端末の設定の取得と変更"
.PP
.BR tcgetattr ()
は \fIfd\fP に関するパラメータを取得し、\fItermios_p\fP が参照する構
造体 \fItermios\fP に設定する。この関数はバックグラウンドプロセスから
呼ばれることもあるが、この場合、端末の属性はフォアグラウンドプロセス
によって変化することもある。
.LP
.BR tcsetattr ()
は端末に関連したパラメータを設定する (ハードウェアの設定に必要で、ここで
設定できないものを除く)。設定には \fItermios_p\fP が参照する
\fItermios\fP 構造体を用いる。
\fIoptional_actions\fP には変更が有効となるタイミングを設定する:
.IP \fBTCSANOW\fP
ただちに変更が有効となる。
.IP \fBTCSADRAIN\fP
.I fd
への出力がすべて転送された後に変更が有効になる。この機能は
出力に影響するパラメータを変更する時に使用するべきである。
.IP \fBTCSAFLUSH\fP
パラメータを変更する前に、
.I fd
への出力がすべて転送され、受信したがまだ読み込んでいないすべての
入力が破棄される。
.SS "カノニカルモードと非カノニカルモード"
.I c_lflag
の
.B ICANON
フラグの設定により、端末がカノニカルモードで動作するかが決定される。
.B ICANON
がセットされた場合、カノニカルモード (canonical mode) となり、
セットされない場合、非カノニカルモード (noncanonical mode) となる。
デフォルトでは、
.B ICANON
はセットされる。

カノニカルモードでは、以下のような動作となる。
.IP * 2
入力は行単位に行われる。
行区切り文字が打ち込まれた時点で、入力行が利用可能となる。
行区切り文字は NL, EOL, EOL2 および行頭での EOF である。
EOF 以外の場合、
.BR read (2)
が返すバッファに行区切り文字も含められる。
.IP * 2
行編集が有効となる (ERASE, KILL が効果を持つ。
.B IEXTEN
フラグが設定された場合は、
WERASE, REPRINT, LNEXT も効果を持つ)。
.BR read (2)
は最大でも 1行の入力しか返さない。
.BR read (2)
が要求したバイト数が現在の入力行のバイト数よりも少ない場合、
要求したのと同じバイト数だけが読み込まれ、
残りの文字は次回の
.BR read (2)
で読み込まれる。
.PP
非カノニカルモードでは、入力は即座に利用可能となり
(ユーザは行区切り文字を打ち込む必要はない)、
行編集は無効となる。
MIN
.RI ( c_cc[VMIN] )
と TIME
.RI ( c_cc[VTIME] )
の設定により、
.BR read (2)
が完了する条件が決定される。4種類の場合がある:
.IP * 2
MIN == 0; TIME == 0:
データが利用可能であれば、
.BR read (2)
はすぐに返る。このときの返り値は、そのとき利用可能なバイト数か
.BR read (2)
の要求バイト数のうち小さい方となる。
利用可能なデータがない場合
.BR read (2)
は 0 を返す。
.IP * 2
MIN > 0; TIME == 0:
.BR read (2)
は、利用可能なデータが MIN バイトか要求バイト数のいずれかに達するまで
停止する。返り値は、MIN か要求バイト数の小さい方となる。
.IP * 2
MIN == 0; TIME > 0:
TIME はタイマの上限を規定し、単位は 1/10 秒である。
タイマは
.BR read (2)
が呼ばれた時点で開始される。
.BR read (2)
が返るのは、少なくとも 1バイトのデータが利用可能となった時点、
またはタイマが時間切れとなった時点である。
入力が全くなくタイマが時間切れとなった場合、
.BR read (2)
は 0 を返す。
.IP * 2
MIN > 0; TIME > 0:
TIME はタイマの上限を規定し、単位は 1/10 秒である。
入力の最初のバイトが利用可能になった後は、
新たに 1バイト受信する度にタイマがリセットされる。
.BR read (2)
が返るのは、MIN バイトか要求バイト数のうち少ない方まで読み出された時点か、
バイト間タイマが時間切れとなった時点である。
は最初のバイトが利用可能にならないとタイマは開始されないので、
少なくとも 1バイトは読み込まれる。
.SS "Raw mode"
.LP
.BR cfmakeraw ()
は、端末を昔の Version 7 端末ドライバの
"raw" モードのように設定する。
入力は文字単位に可能であり、エコーが無効となり、
端末の入出力文字に対する特殊処理はすべて無効となる。
端末の属性は以下のように設定される:
.nf

    termios_p\->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                    | INLCR | IGNCR | ICRNL | IXON);
    termios_p\->c_oflag &= ~OPOST;
    termios_p\->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
    termios_p\->c_cflag &= ~(CSIZE | PARENB);
    termios_p\->c_cflag |= CS8;
.fi
.SS "ライン制御"
.LP
.BR tcsendbreak ()
は端末が非同期のシリアルデータ転送を用いている場合に、
連続した0のビット列を一定間隔で転送する。
\fIduration\fP が 0 の場合は、0 のビットを 0.25 秒以上、
0.5 秒以下の間隔で転送する。 \fIduration\fP が 0 でない場合は、
0 のビットを実装依存の時間間隔で送る。
.LP
端末が非同期のシリアルデータ転送モードでない場合、
.BR tcsendbreak ()
は何も行わずに戻る。
.LP
.BR tcdrain ()
は
.I fd
が行っている出力の転送が完了するまで待つ。
.LP
.BR tcflush ()
は
.I fd
が行っているデータの出力でまだ転送されていないもの、あるいは受信し
たがまだ入力していないものを破棄する。いずれを行うかは
.I queue_selector
の値で定める:
.\"??nakano flush == discard?
.IP \fBTCIFLUSH\fP
受信したが読んでいないデータをフラッシュする。
.IP \fBTCOFLUSH\fP
書いたが送信していないデータをフラッシュする。
.IP \fBTCIOFLUSH\fP
受信したが読んでいないデータ・書いたが送信していないデータ両方
をフラッシュする。
.LP
.BR tcflow ()
は
.I fd
で指定されたオブジェクトにおけるデータの送信あるいは受信を一時的に中断する。
送信と受信のどちらかは、
.IR action で決まる:
.IP \fBTCOOFF\fP
出力の中断。
.IP \fBTCOON\fP
中断した出力の再開。
.IP \fBTCIOFF\fP
STOP 文字の送信。
STOP 文字は端末デバイスからシステムへのデータ送信を停止する。
.IP \fBTCION\fP
START 文字の送信。
START 文字は端末デバイスからシステムへのデータ送信を開始する。
.LP
端末ファイルがオープンされたときのデフォルトでは、
入力も出力も中断されていない。
.SS "ライン速度"
ボーレート関数は \fItermios\fP 構造体中の入出力ボーレートを
取得、設定するために提供される。
設定された値は
.BR tcsetattr ()
の呼び出しが成功するまでは有効ではない。

速度を \fBB0\fP に設定した場合、モデムは停止 (hang up) する。
\fBB38400\fP に該当する実際のビットレートは
.BR setserial (8)
で
変更できる。
.LP
入力および出力ボーレートは \fItermios\fP 構造体に格納される。
.LP
.BR cfgetospeed ()
は
.I termios_p
が示している \fItermios\fP 構造体に格納されている
出力ボーレートを返す。
.LP
.BR cfsetospeed ()
は \fItermios_p\fP で示されている \fItermios\fP 構造体中の出力ボーレートを
\fIspeed\fP に設定する。値は以下のいずれかでなければならない:
.nf

.ft B
	B0
	B50
	B75
	B110
	B134
	B150
	B200
	B300
	B600
	B1200
	B1800
	B2400
	B4800
	B9600
	B19200
	B38400
	B57600
	B115200
	B230400
.ft P

.fi
0ボー (\fBB0\fP) は接続の中断に用いられる。
B0が指定された場合、モデムの制御線は使用されない状態になり、一般にはこれで
接続が切断される。
\fBCBAUDEX\fP はPOSIX.1で定義されている速度の範囲外 (57600 およびそれ以上)
を設定する。すなわち例えば \fBB57600\fP & \fBCBAUDEX\fP は 0 でない。
.LP
.BR cfgetispeed ()
は \fItermios\fP 構造体中の入力ボーレートを返す。
.LP
.BR cfsetispeed ()
は \fItermios\fP 構造体中の入力ボーレートを
.I speed
に設定する。
.I speed
には、上述の
.BR cfsetospeed ()
のボーレート定数 \fBBnnn\fP のいずれか一つを指定しなければならない。
入力ボーレートが 0 に設定された場合、入力ボーレートは出力ボーレート
と同じ値となる。
.LP
.BR cfsetspeed ()
は 4.4BSD による拡張である。この関数は
.BR cfsetispeed ()
と同じ引き数をとり、入出力両方の速度を設定する。
.SH 返り値
.LP
.BR cfgetispeed ()
は \fItermios\fP 構造体中の入力ボーレートを返す。
.LP
.BR cfgetospeed ()
は \fItermios\fP 構造体中の出力ボーレートを返す。
.LP
他のすべての関数の戻り値:
.IP 0
実行成功。
.IP \-1
実行失敗。
.I errno
がエラーの種類を示す。
.LP
.BR tcsetattr ()
は \fIなんらかの\fP 変更要求が成功した場合に成功を返すことに注意。
従って、複数の変更を行った場合には、引き続いて
.BR tcgetattr ()
を呼び出して全ての変更が実行されているかを確認する必要があるかもしれない。
.SH 準拠
.BR tcgetattr (),
.BR tcsetattr (),
.BR tcsendbreak (),
.BR tcdrain (),
.BR tcflush (),
.BR tcflow (),
.BR cfgetispeed (),
.BR cfgetospeed (),
.BR cfsetispeed (),
.BR cfsetospeed ()
は POSIX.1-2001 で規定されている。

.BR cfmakeraw ()
と
.BR cfsetspeed ()
は非標準だが、BSD では利用可能である。
.SH 注意
UNIX V7 とその後のいくつかのシステムでは、ボーレートの 14 個のリストである
B0, ..., B9600 の後ろに EXTA, EXTB ("External A" と "External B") の 2 つを
追加している。
多くのシステムではさらに高速なボーレートのためにリストを拡張している。
.LP
.BR tcsendbreak ()
で \fIduration\fP に 0 以外を指定した場合の効果は様々である。
SunOS は
.IB duration * N
秒のブレークを規定している。ここで \fIN\fP は 0.25 以上 0.5 未満である。
Linux, AIX, DU, Tru64 は
.I duration
ミリ秒のブレークを送信する。
FreeBSD, NetBSD, HP-UX, MacOS は
.I duration
の値を無視する。
Solaris と UnixWare では、非ゼロの
.I duration
を指定した
.BR tcsendbreak ()
の振る舞いは
.BR tcdrain ()
と同様である。
.SH 関連項目
.BR stty (1),
.BR console_ioctl (4),
.BR tty_ioctl (4),
.BR setserial (8)
