.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\"
.\" Earlier versions of this page influenced the present text.
.\" It was derived from a Berkeley page with version
.\"       @(#)printf.3    6.14 (Berkeley) 7/30/91
.\" converted for Linux by faith@cs.unc.edu, updated by
.\" Helmut.Geyer@iwr.uni-heidelberg.de, agulbra@troll.no and Bruno Haible.
.\"
.\" 1999-11-25 aeb - Rewritten, using SUSv2 and C99.
.\" 2000-07-26 jsm28@hermes.cam.ac.uk - three small fixes
.\" 2000-10-16 jsm28@hermes.cam.ac.uk - more fixes
.\"
.\" Japanese Version Copyright (c) 1997 YOSHINO Takashi all rights reserved.
.\" Translated 1998-02-17, YOSHINO Takashi <yoshino@civil.jcn.nihon-u.ac.jp>
.\" Updated 2000-10-02, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-01-29, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-01-03, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-10-17, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-03-15, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2006-07-20, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2008-02-10, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.77
.\" Updated 2009-03-03, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.19
.\"
.\" WORD: conversion specifier	変換指定子
.\" WORD: length modifier	長さ修飾子
.\"
.TH PRINTF 3  2011-09-28 "GNU" "Linux Programmer's Manual"
.SH 名前
printf, fprintf, sprintf, snprintf, vprintf, vfprintf, vsprintf,
vsnprintf \- 指定された書式に変換して出力を行う
.SH 書式
.B #include <stdio.h>
.sp
.BI "int printf(const char *" format ", ...);"
.br
.BI "int fprintf(FILE *" stream ", const char *" format ", ...);"
.br
.BI "int sprintf(char *" str ", const char *" format ", ...);"
.br
.BI "int snprintf(char *" str ", size_t " size ", const char *" format ", ...);"
.sp
.B #include <stdarg.h>
.sp
.BI "int vprintf(const char *" format ", va_list " ap );
.br
.BI "int vfprintf(FILE *" stream ", const char *" format ", va_list " ap );
.br
.BI "int vsprintf(char *" str ", const char *" format ", va_list " ap );
.br
.BI "int vsnprintf(char *" str ", size_t " size ", const char *" format \
", va_list " ap );
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR snprintf (),
.BR vsnprintf ():
.RS 4
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
_POSIX_C_SOURCE\ >=\ 200112L;
.br
or
.I "cc -std=c99"
.RE
.ad
.SH 説明
.BR printf ()
関数グループは、以下で述べるように、
.I format
に従って出力を生成するものである。
.BR printf ()
と
.BR vprintf ()
は出力を
.I stdout
(標準出力ストリーム) に書き出す。
.BR fprintf ()
と
.BR vfprintf ()
は出力を指定された出力
.I stream
に書き出す。
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
.BR vsnprintf ()
は出力を文字列
.IR str
に書き込む。
.PP
.BR snprintf ()
と
.BR vsnprintf ()
は最大で
.I size
バイトを
.I str
に書き込む
.RI ( size
には文字列を終端する NULL バイト (\(aq\e0\(aq) もを含まれる)。
.PP
.BR vprintf (),
.BR vfprintf (),
.BR vsprintf (),
.BR vsnprintf ()
の各関数はそれぞれ
.BR printf (),
.BR fprintf (),
.BR sprintf (),
.BR snprintf (),
の各関数と等価であり、可変数引き数の代わりに
.I va_list
を引き数として呼び出される点だけが異なる。
これらの関数では
.I va_end
マクロは呼び出されない。
これらの関数は
.I va_arg
を呼び出すので、呼び出し後の
.I ap
の値は未定義である。
.BR stdarg (3)
を参照のこと。
.PP
これらの 8 つの関数は
.I format
文字列の制御に従って出力を書き出す。
.I format
文字列は、これに続く引き数 (または
.BR stdarg (3)
の可変長引き数機構を使ってアクセスできる引き数)
をどのように変換して出力するかを指定する。

C99 と POSIX.1-2001 では、
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
.BR vsnprintf ()
の呼び出しで、範囲が重複するオブジェクト間でコピーが発生する場合の
結果は不定であると規定されている (例えば、出力先の文字列と入力された
引き数の一つが同じバッファを参照している場合などである)。
「注意」の節を参照。
.SS 返り値
成功時には、上記の関数は書き込まれた文字数を返す
(文字列の最後を示すために使用する NULL バイトは数に含まれない)。

.BR snprintf ()
と
.BR vsnprintf ()
は、
.I size
バイトを越える文字数を書き込まない
.RI ( size
には文字列を終端する NULL バイト (\(aq\e0\(aq) も含まれる)。
この制限によって出力が切り詰められた場合には、
もし十分なスペースがあれば書き込まれたであろう文字の個数
(文字列を終端する NULL バイトを除く) を返す。
従って、返り値が
.I size
以上だった場合、出力が切り詰められたことを意味する
(後述の注意も参照のこと)。

エラーが発生した場合は、負の数を返す。
.SS フォーマット文字列のフォーマット
フォーマット文字列は文字の列で、
(もしあるなら) 初期シフト状態で始まり、初期シフト状態で終わる。
フォーマット用の文字列は 0 個以上の命令 (directives) によって構成される。
命令には、通常文字と変換指定 (conversion specifications) がある。
通常文字は
.B %
以外の文字で、出力ストリームにそのままコピーされる。
変換指定は、それぞれが 0 個以上の引き数を取る。
各変換指定は文字
.B %
で始まり、
.I "変換指定子 (conversion specifier)"
で終わる。
.B %
と変換指定子の間には、0 個以上の
.I フラグ 、
最小
.I フィールド幅 、
.I 精度 、
.I 長さ修飾子
を (この順序で) 置くことができる。

引き数は (型の格上げの後は) 変換指定子が表す型と正確に対応しなければならない。
デフォルトでは、\(aq*\(aq や変換指定子が出てくる毎に次の引き数を要求され、
引き数は指定された順序で使用されていく
(指定された引き数の個数が不十分ならエラーとなる)。
また、引き数が必要な箇所で \(aq%\(aq の代わりに "%m$"、
\(aq*\(aqの代わりに "*m$" と書くことで、
明示的にどの引き数を使用するかを指定することもできる。
ここで 10進の整数 m は希望の引き数の引き数リストでの位置を示す
(最初の引き数の番号が 1 である)。
従って、以下の二つは等価である。
.in +4n
.nf

printf("%*d", width, num);

printf("%2$*1$d", width, num);

.fi
.in
は等価である。
二番目の書き方では同じ引き数を繰り返し参照することができる。
C99 標準には、 Single UNIX Specification 由来の \(aq$\(aq を使った書き方は含まれていない。
\(aq$\(aq を使ったスタイルを使うと、引き数を取る変換及び幅と精度の引き数を
全てこのスタイルで指定しなければならないが、
引き数を消費しない "%%" フォーマットと混ざっているかもしれない。
\(aq$\(aq で指定される引き数の番号に空きがあってはならない。
例えば、もし引き数 1 と 3 が指定されると、引き数 2 もフォーマット文字列のどこかで
指定されなければならない。

数値変換には小数点や 1000 単位の区切り文字を使うものもある。
実際にどの文字を使うかはロケールの
.B LC_NUMERIC
による。
POSIX ロケールでは小数点に \(aq.\(aq を用い、
区切り文字は使わない。
従って、
.in +4n
.nf

printf("%\(aq.2f", 1234567.89);

.fi
.in
は、 POSIX ロケールでは "1234567.89" 、 nl_NL ロケールでは "1234567,89"、
da_DK ロケールでは "1.234.567,89" となる。
.SS フラグ文字
% 文字の後ろには 0 個以上のフラグ文字が続く。
.TP
.B #
値は「別の形式」に変換される。
.B o
変換の場合、(先頭文字が 0 になっていない場合に先頭に 0 を追加することで)
出力文字列の最初の文字を 0 にする。
.B x
と
.B X
変換の場合、数値が 0 でないときには文字列 "0x"
.RB ( X
変換の場合には "0X") が前に付与される。
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
.B G
変換では、 小数点に続く数字がなくても、
出力には常に小数点が含まれる
(通常は、小数点の後に数字が続く場合にのみ、
小数点が表示される)。
.B g
と
.B G
変換の場合、他の変換とは異なり、末尾のゼロが変換結果から削除されない。
その他の変換では、結果は未定義である。
.TP
.B \&0
値をゼロで埋める。
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X ,
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
.B G
変換では、変換した値の左側を空白文字の代わりにゼロで埋める。
.B \&0
と
.B \-
が両方とも指定された場合は、
.B \&0
フラグは無視される。
精度が数値変換
.RB ( d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.BR X )
と同時に指定された場合には、
.B \&0
フラグは無視される。
その他の変換では、動作は未定義である。
.TP
.B \-
変換値をフィールド境界で左揃えにする
(デフォルトは右揃えである)。
.B n
変換以外では、変換された値は
左側ではなく右側を空白文字やゼロで埋められる。
.B \-
と
.B \&0
の両方が指定された場合には、
.B \-
が優先される。
.TP
.B ' '
(1個の半角スペース)
符号付き変換で生成された正の数字の前に空白 (または空文字列) が置かれる。
.TP
.B +
符号付き変換によって出力される数字の前に、常に符号 (+ か \-) が置かれる。
デフォルトでは、符号は負の数字の場合のみ付与される。
.B +
と半角スペースの
両方が使われている場合には、
.B +
が優先される。
.PP
上記の 5 つのフラグは C 標準で定義されている。
SUSv2 では、さらにもう一つフラグ文字が規定されている。
.TP
.B \(aq
10進数変換
.RB ( i ,
.BR d ,
.BR u ,
.BR f ,
.BR F ,
.BR g ,
.BR G )
において、ロケール情報に指定があれば 1000 単位の区切り文字を出力する。
.BR gcc (1)
の多くのバージョンは、このオプションを解釈することができず、
警告を出力することに注意せよ。
%\(aqF は SUSv2 には含まれていない。
.PP
glibc 2.2 では、さらに一つフラグ文字が追加されている。
.TP
.B I
10進整数変換
.RB ( i ,
.BR d ,
.BR u )
において、ロケールの代替出力数字があれば、それを用いて出力する。
例えば、 glibc 2.2.3 以降では、ペルシア ("fa_IR") ロケールで
アラビア数字 (Arabic-Indic digits) を出力できる。
.\" ロケールファイルには outdigits というキーワードがある。
.SS フィールド幅
最小のフィールド幅を指定する 10進数の数値文字列 (文字列の最初の文字は
ゼロ以外)。本項目はオプションである。
変換された値の文字数がフィールド長よりも少ない場合、
フィールドの左側をスペースで埋める
(左揃えのフラグがある場合は右側を埋める)。
10進数の文字列の代わりに "*" や "*m$" (\fIm\fP は 10進整数) を書くこともできる。
"*" と "*m$" はそれぞれ、次の引き数と \fIm\fP 番目の引き数をフィールド幅として
使うことを指定する (これらの引き数は
.I int
型でなければならない)。
フィールド幅に負の数が指定された場合は、
\(aq\-\(aq フラグと正の数のフィールド幅として扱われる。
フィールド幅が小さかったり指定がなかったりしても、フィールドが切り詰められる
ことはない。もし変換結果がフィールド幅よりも広かった場合、
フィールドは変換結果が入る幅に広げられる。
.SS 精度
オプションである精度は、ピリオド (\(aq.\(aq) とそれに続く10進数という
形式で指定する (10進数はオプション) 。
10進数の文字列の代わりに "*" や "*m$" (m は 10 進整数)を書くこともできる。
"*" と "*m$" はそれぞれ、次の引き数と m 番目の引き数を精度として
使うことを指定する (これらの引き数は
.I int
型でなければならない)。
精度として \(aq.\(aq だけが指定されたり、精度が負の数だった場合、
精度はゼロとみなされる。
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.B X
変換では、表示される最小の桁数を指定する。
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.B F
変換では、小数点以下に表示される数字の桁数を指定する。
.B g
と
.B G
変換では、有効数字の最大桁数を指定する。
.B s
と
.B S
変換では、文字列から出力される最大文字数を指定する。
.SS 長さ修飾子
「整数変換」とは、
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
.B X
変換のことである。
.TP
.B hh
整数変換に対応する引き数が
.I signed char
か
.I unsigned char
で、
.B n
変換に対応する引き数が
.I signed char
へのポインタであることを示す。
.TP
.B h
整数変換に対応する引き数が
.I short int
か
.I unsigned short int
で、
.B n
変換に対応する引き数が
.I short int
へのポインタであることを示す。
.TP
.BR l " (エル)"
各変換に対応する引き数が、
整数変換では
.IR "long int" か
.IR "unsigned long int" 、
.B n
変換では
.I long long int
へのポインタ、
.B c
変換では
.IR wint_t 、
.B s
変換では
.I wchar_t
へのポインタであることを示す。

.TP
.BR ll " (エルエル)"
整数変換に対応する引き数が
.I long long int
か
.I unsigned long long int
で、
.B n
変換に対応する引き数が
.I long int
へのポインタであることを示す。
.TP
.B L
.BR a ,
.BR A ,
.BR e ,
.BR E ,
.BR f ,
.BR F ,
.BR g ,
.B G
変換に対応する引き数が
.I long double
であることを示す。
(C99 では %LF を使うことを認めているが、SUSv2 では認められていない。)
.TP
.B q
("quad"。 4.4BSD と Linux libc5 のみ有効。使ってはならない。)
.B ll
と同じ意味である。
.TP
.B j
整数変換に対応する引き数が
.I intmax_t
か
.I uintmax_t
であることを示す。
.TP
.B z
整数変換に対応する引き数が
.I size_t
か
.I ssize_t
であることを示す。
(Linux libc5 では、これを指定するのに
.B Z
を用いる。使ってはならない。)
.TP
.B t
整数変換に対応する引き数が
.I ptrdiff_t
であることを示す。
.PP
SUSv2 で長さ修飾子として使用できるのは、
.B h
.RB ( hd ,
.BR hi ,
.BR ho ,
.BR hx ,
.BR hX ,
.BR hn ),
.B l
.RB ( ld ,
.BR li ,
.BR lo ,
.BR lx ,
.BR lX ,
.BR ln ,
.BR lc ,
.BR ls ),
.B L
.RB ( Le ,
.BR LE ,
.BR Lf ,
.BR Lg ,
.BR LG )
だけである。
.SS 変換指定子
適用される変換の型を指定する文字。
.PP
変換指定子とその意味は以下の通りである。
.TP
.BR d ", " i
.I int
引き数を符号付き 10 進表記に変換する。
精度指定があれば、精度で指定した桁数は必ず出力される。変換後の値が
指定された桁数に足りない場合は、左側が 0 で埋められる。
デフォルトの精度は 1 である。
0 を表示しようとした時に、明示的に精度として 0 が指定されていると、
出力は空文字列となる。
.TP
.BR o ", " u ", " x ", " X
.I "unsigned int"
引き数を、
符号なし8進数
.RB ( o ),
符号なし10進数
.RB ( u ),
符号なし16進数
.RB ( x
と
.BR X )
に変換する。
.B x
変換では
.B abcdef
が使用され、
.B X
変換では
.B ABCDEF
が使用される。
精度指定があれば、精度で指定した桁数は必ず出力される。変換後の値が
指定された桁数に足りない場合は、左側が 0 で埋められる。
.TP
.BR e ", " E
.I double
引き数を丸めて
.if \w'\*(Pm'=0 .ds Pm \(+-
.RB [\-]d \&. ddd e \\*(Pmdd
の形に変換する。
小数点の前には一桁の数字があり、小数点以下の桁数は精度で指定された
桁数になる。精度は指定されなかった場合 6 とみなされる。
精度が 0 の場合には、小数点以下は表示されない。
.B E
変換では、指数を表現するときに
.RB ( e
ではなく)
.B E
が使われる。
指数部分は少なくとも 2桁表示される。
つまり、指数の値が 0 の場合には、00 と表示される。
.TP
.BR f ", " F
.I double
引き数を丸めて
.RB [\-]ddd \&. ddd
の形の10進表現に変換する。
小数点の後の桁数は、精度で指定された値となる。
精度が指定されていない場合には 6 として扱われる。
精度として明示的に 0 が指定されたときには、小数点以下は表示されない。
小数点を表示する際には、小数点の前に少なくとも一桁は数字が表示される。

(SUSv2 では、
.B F
は規定されておらず、無限や NaN に関する文字列表現を
行ってもよいことになっている。
 C99 標準では、
.B f
変換では、無限は "[\-]inf" か "[\-]infinity" と表示し、
NaN は文字列の先頭に `nan' をつけて表示するように規定されている。
.B F
変換の場合は "[\-]INF", "[\-]INFINITY", "NAN*" と表示される。)
.TP
.BR g ", " G
.I double
引き数を
.B f
か
.B e
.RB ( G
変換の場合は
.B F
か
.BR E )
の形式に変換する。
精度は表示する桁数を指定する。
精度が指定されない場合は、6桁とみなされる。
精度が 0 の場合は、1桁とみなされる。
変換される値の指数が、 \-4 より小さいか、精度以上の場合に、
.B e
形式が使用される。
変換された結果の小数部分の末尾の 0 は削除される。小数点が表示されるのは、
小数点以下に数字が少なくとも一つある場合にだけである。
.TP
.BR a ", " A
(C99 にはあるが SUSv2 にはない)
.B a
変換では、
.I double
引き数を (abcdef の文字を使って)
.RB [\-] 0x h \&. hhhh p \\*(Pmd;
形式の 16 進表記に変換する。
.B A
変換では、前置文字列
.BR 0X ,
文字 ABCDEF, 指数文字
.B P
を用いる。
小数点の前には 1桁の16進数が置かれ、小数点の後ろの桁数は
精度で指定された値となる。
デフォルトの精度は、その値が 2進数で正確に表現できる場合には、
その値を正確に表現できる桁数となる。それ以外の場合は、
.I double
型の値を区別するのに十分な大きさとなる。
.\" motoki 2005/03/19: 合っているかな？
小数点の前の数字は、正規化されていない数の場合はいくつになるか分からない。
正規化された数の場合は、 0 以外の値になるが、いくつになるかは分からない。
.TP
.B c
.B l
修飾子がなければ、
.I int
引き数を
.IR "unsigned char"
に変換して、その結果に対応する文字を出力する。
.B l
修飾子があれば、
.I wint_t
(ワイド文字) 引き数を、
.BR wcrtomb (3)
関数を初期シフト状態で呼び出してマルチバイト文字列に変換し、
変換されたマルチバイト文字列を出力する。
.TP
.B s
.B l
修飾子がない場合、
引き数は
.I "const char *"
型で文字型の配列へのポインタ (文字列へのポインタ) であることが
期待されている。配列中の文字は、終端の NULL バイト (\(aq\\0\(aq)
が出てくるまで出力される (終端文字は出力されない)。
精度が指定されていると、指定された字数以上は出力されない。
精度が指定された場合には、終端バイトが存在する必要はない。
精度が指定されていなかったり、精度の値が配列の大きさより大きい場合には、
配列は終端の NULL バイトを含んでいなければならない。

.B l
修飾子が指定されている場合、
引き数は
.I "const wchar_t *"
型でワイド文字の配列へのポインタであることが期待されている。
配列中のワイド文字は (1文字毎に
.BR wcrtomb (3)
を呼び出して) マルチバイト文字に変換される
(最初のワイド文字の変換の前に
.BR wcrtomb ()
のシフト状態を初期状態に戻してから変換は行われる)。
マルチバイト文字への変換は、文字列を終端する NULL ワイド文字が
出てくるまで行われ、終端 NULL ワイド文字も含めて変換される。
結果のマルチバイト文字列は、終端の NULL バイトが出てくるまで
出力される (終端の NULL バイトは出力されない)。
精度が指定された場合、指定されたバイト数以上には出力されない。
但し、マルチバイト文字の一部分だけが出力されることはない。
精度は「バイト」数を指定するものであり、「ワイド文字」数や
「画面での位置」を指定するものではないことに注意。
精度が指定されていて、さらに出力が配列の末尾に達する前に出力バイト数が
精度の値を超える場合だけは、配列は NULL ワイド文字で終端されていなくてもよい。
それ以外の場合は、必ず配列は NULL ワイド文字で終端されていなければならない。
.TP
.B C
(C99 にはないが SUSv2 にはある)
.B lc
と同じ。使ってはならない。
.TP
.B S
(C99 にはないが SUSv2 にはある)
.B ls
と同じ。使ってはならない。
.TP
.B p
.I "void *"
ポインタ引き数を
.RB ( %#x
や
.BR  %#lx
のような) 16 進数で出力する。
.TP
.B n
これまでに出力された文字数を
.I "int *"
(または類似の型) のポインタ引き数が指す整数に保存する。
引き数の変換は行われない。
.TP
.B m
(glibc での拡張)
.I strerror(errno)
の出力を表示する。引き数は必要ない。
.TP
.B %
\(aq%\(aq 文字を出力する。変換される引き数は無い。
変換指定全体を書くと "%%" となる。
.SH 準拠
.BR fprintf (),
.BR printf (),
.BR sprintf (),
.BR vprintf (),
.BR vfprintf (),
.BR vsprintf ()
関数は、C89 と C99 に準拠している。
.BR snprintf ()
と
.BR vsnprintf ()
は C99 に準拠している。
.PP
.BR snprintf ()
の返り値を見ると、
SUSv2 と C99 標準は互いに矛盾している。
SUSv2 では、
.BR snprintf ()
が
.IR size =0
で呼び出された場合、 1 未満の値を何か返り値とするように規定している。
一方 C99 では、このような場合
.I str
を NULL とし、返り値として (通常通り) 出力バッファが十分な大きさが
あった場合に出力されるであろう文字数を返す。
.PP
Linux libc4 では、 5 つの C 標準のフラグ、
長さ修飾子 \fBh\fP, \fBl\fP, \fBL\fP、変換
\fBc\fP, \fBd\fP, \fBe\fP, \fBE\fP, \fBf\fP, \fBF\fP,
\fBg\fP, \fBG\fP, \fBi\fP, \fBn\fP, \fBo\fP, \fBp\fP,
\fBs\fP, \fBu\fP, \fBx\fP, \fBX\fP
が使える。
但し \fBF\fP は \fBf\fP と同義である。
また、 \fBD\fP, \fBO\fP, and \fBU\fP を \fBld\fP, \fBlo\fP, and \fBlu\fP
と同じものとして使える
(これはまずい仕様で、 後に \fB%D\fP の対応が打ち切られた時に深刻なバグを
引き起こした)。ロケール依存の小数点、1000 区切り、 NaN と無限、
"%m$" と "*m$" は使えない。
.PP
Linux libc5 では、 5 つの C 標準のフラグと \(aq フラグ、ロケール、
"%m$" と "*m$" が使える。
また、長さ修飾子 \fBh\fP, \fBl\fP, \fBL\fP, \fBZ\fP, iand \fBq\fP が使えるが、
\fBL\fP と \fBq\fP は両方とも
\fIlong double\fP と \fIlong long int\fP に対応している (これはバグである)。
現在では変換 \fBF\fP, \fBD\fP, \fBO\fP, \fBU\fP は認識されないが、変換文字
.B m
が追加された。これは
.I strerror(errno)
を出力するものである。
.PP
glibc 2.0 では、変換文字 \fBC\fP と \fBS\fP が追加された。
.PP
glibc 2.1 では、長さ修飾子 \fBhh\fP, \fBj\fP, \fBt\fP, \fBz\fP
と変換文字 \fBa\fP, \fBA\fP が追加された。
.PP
glibc 2.2 では、 C99 で規定された意味での変換文字 \fBF\fP と
フラグ文字 \fBI\fP が追加された。
.SH 注意
テキストを
.I buf
に追加するのに、軽率にも次のようなコードを使っているプログラムがある。

    sprintf(buf, "%s some further text", buf);

しかしながら、標準規格では、
.BR sprintf (),
.BR snprintf (),
.BR vsprintf (),
.BR vsnprintf ()
の呼び出しにおいて、コピー元とコピー先のバッファが重なっていた場合の
結果は不定である、と明記されている。
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=7075
使用する
.BR gcc (1)
のバージョンや指定したコンパイラのオプション次第では、
上記のような呼び出しで、期待した結果が得られ「ない」ことがある。

glibc の
.BR snprintf ()
と
.BR vsnprintf ()
の実装は、バージョン 2.1 以降は C99 標準に準拠しており、
上記の通りの動作をする。
glibc 2.0.6 までは、出力が切り詰められた場合は \-1 を返す。
.\" .SH 歴史
.\" UNIX V7 では
.\" .BR printf (),
.\" .BR fprintf (),
.\" .BR sprintf ()
.\" の 3 つの関数と、フラグ \-、幅と精度での *、長さ修飾子 l、
.\" 変換 doxfegcsu、そして ld,ld,lu,lx の同義語として D,O,U,X が定義されている。
.\" 2.9.1BSD でもこれは同じだったが、 2.10BSD では
.\" フラグ #, +, 空白が追加され、 D,O,U,X については記載されなくなった。
.\" 2.11BSD では
.\" .BR vprintf (),
.\" .BR vfprintf (),
.\" .BR vsprintf ()
.\" が追加され、 D,O,U,X を使わないように警告された。
.\" 4.3BSD Reno ではフラグ 0、長さ修飾子 h と L、
.\" 変換 n, p, E, G, (現在の意味での) X が追加され、
.\" D,O,U は非推奨扱いとなった。
.\" 4.4BSD では、関数
.\" .BR snprintf ()と
.\" .BR vsnprintf ()、
.\" 長さ修飾子 q が導入された。
.\" FreeBSD では、
.\" .BR sprintf ()
.\" のために十分なバッファを確保する
.\" .BR asprintf ()
.\" と
.\" .BR vasprintf ()
.\" が追加されている。
.\" glibc には、関数
.\" .BR dprintf (),
.\" .BR vdprintf ()
.\" があり、これらはストリームではなくファイルディスクリプタに出力する。
.SH バグ
.BR sprintf ()
と
.BR vsprintf ()
は勝手に十分に長い文字列領域があると仮定するので、呼び出し側は
実際の領域からあふれないように注意しなければならない。
しかし、これを保証することが不可能な場合が多い。
生成される文字列の長さはロケール依存であり、予測が難しいことに注意。
代わりに
.BR snprintf ()
と
.BR vsnprintf ()
(または
.BR asprintf (3)
と
.BR vasprintf (3))
を使うこと。
.PP
Linux libc4.[45] には
.BR snprintf ()
はないが、 libbsd が提供されており、
その中には
.BR sprintf ()
と等価な (つまり
.I size
引き数を無視する)
.BR snprintf ()
がある。
したがって、初期の libc4 で
.BR snprintf ()
を使うと、深刻なセキュリティ問題を引き起こすことがある。
.PP
.BI printf( foo );
のようなコードはしばしばバグを引き起こす。
なぜなら
.I foo
に % 文字が含まれてるかもしれないからである。
.I foo
が信頼できないユーザー入力から作られている場合には、
その中に \fB%n\fP が含まれていることがあり、
.BR printf ()
呼び出し時にメモリへの書き込みが起こり、
セキュリティーホールを作ることになるかもしれない。
.\".PP
.\".\"O Some floating-point conversions under early libc4
.\".\"O caused memory leaks.
.\"初期の libc4 での実数変換にはメモリリークを引き起こすことがある。
.SH 例
.if \w'\*(Pi'=0 .ds Pi pi
\*(Pi を 5 桁で出力する。
.in +4n
.nf

#include <math.h>
#include <stdio.h>
fprintf(stdout, "pi = %.5f\en", 4 * atan(1.0));
.fi
.in
.PP
日付と時間を "Sunday, July 3, 10:02" の形式で出力する。
.RI ( weekday
と
.I month
は文字列へのポインタである)
.in +4n
.nf

#include <stdio.h>
fprintf(stdout, "%s, %s %d, %.2d:%.2d\en",
	weekday, month, day, hour, min);
.fi
.in
.PP
日 - 月 - 年 の順序で表示を行う国も多い。
従って、国際版では書式で指定された順番で
引き数を表示できなければならない。
.in +4n
.nf

#include <stdio.h>
fprintf(stdout, format,
	weekday, month, day, hour, min);

.fi
.in
.I format
はロケールに依存しており、引き数の順番を変えることもできる。
.I format
が
.in +4n
.nf

"%1$s, %3$d. %2$s, %4$d:%5$.2d\en"

.fi
.in
であれば、 "Sonntag, 3. Juli, 10:02" という結果になる。
.PP
十分に大きな文字列領域を確保して、そこにメッセージを格納するには
(glibc 2.0 と glibc 2.1 の両方で正しく動作するコード):
.nf

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
char *
make_message(const char *fmt, ...)
{
    int n;
    int size = 100;     /* Guess we need no more than 100 bytes. */
    char *p, *np;
    va_list ap;

    if ((p = malloc(size)) == NULL)
        return NULL;

    while (1) {

        /* Try to print in the allocated space. */

        va_start(ap, fmt);
        n = vsnprintf(p, size, fmt, ap);
        va_end(ap);

        /* If that worked, return the string. */

        if (n > \-1 && n < size)
            return p;

        /* Else try again with more space. */

        if (n > \-1)    /* glibc 2.1 */
            size = n+1; /* precisely what is needed */
        else           /* glibc 2.0 */
            size *= 2;  /* twice the old size */

        if ((np = realloc (p, size)) == NULL) {
            free(p);
            return NULL;
        } else {
            p = np;
        }
    }
}
.fi
.SH 関連項目
.BR printf (1),
.BR asprintf (3),
.BR dprintf (3),
.BR scanf (3),
.BR setlocale (3),
.BR wcrtomb (3),
.BR wprintf (3),
.BR locale (5)
