.\" Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\" Distributed under GPL
.\"
.\" Corrected, aeb, 2002-05-30
.\"
.\" Japanese Version Copyright (c) 2002-2003 Yuichi SATO
.\"         all rights reserved.
.\" Translated Tue Aug  6 04:34:20 JST 2002
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified Thu Nov 27 01:02:55 JST 2003
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.\"WORD:	sign-extend	符号拡張
.\"
.TH A64L 3 2010-09-20 "" "Linux Programmer's Manual"
.SH 名前
a64l, l64a \- long と base-64 を変換する
.SH 書式
.B #include <stdlib.h>
.sp
.BI "long a64l(char *" str64 );
.sp
.BI "char *l64a(long " value );
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR a64l (),
.BR l64a ():
.br
.RS 4
.ad l
_SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 ||
_XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH 説明
これらの関数は 32 ビット long 整数と
リトルエンディアン base-64 ASCII 文字列 (長さ 0 〜 6) の間の変換を行う。
.BR a64l ()
の引き数の文字列が 7 文字以上の場合、
最初の 6 バイトが使われる。
.I long
型が 32 ビットより大きい場合、
.BR l64a ()
は
.I value
の下位 32 ビットのみを使い、
.BR a64l ()
は 32 ビットの結果を符号拡張 (sign-extend) する。
.LP
base-64 システムで使われる 64 個の文字は以下の通りである:
.RS
.nf

\&\(aq.\(aq	は 0 を表す。
\&\(aq/\(aq	は 1 を表す。
0-9	は 2-11 を表す。
A-Z	は 12-37 を表す。
a-z	は 38-63 を表す。

.fi
.RE
よって 123 = 59*64^0 + 1*64^1 = "v/" である。
.SH 準拠
POSIX.1-2001.
.SH 注意
.BR l64a ()
で返される値は静的バッファへのポインタかもしれないので、
以降の呼び出しで上書きされる可能性がある。
.LP
.I value
が負の場合、
.BR l64a ()
の動作は定義されていない。
.I value
が 0 の場合は空文字列を返す。
.LP
これらの関数は glibc 2.2.5 以前では間違っている
(最上位デジットを最初にしている)。
.LP
これは
.BR uuencode (1)
で使われるエンコーディングではない。
.SH 関連項目
.BR uuencode (1),
.\" .BR itoa (3),
.BR strtoul (3)
