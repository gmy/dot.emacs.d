Info file: emacs-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.


Emacs 20.6版対応に改訂した`GNU Emacs Manual' 13版です.

INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* Emacs: (emacs).	The extensible self-documenting text editor.
END-INFO-DIR-ENTRY


Published by the Free Software Foundation 59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995, 1996, 1997, 1998,
1999 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the sections entitled "The GNU Manifesto", "Distribution" and "GNU
General Public License" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "The GNU Manifesto",
"Distribution" and "GNU General Public License" may be included in a
translation approved by the Free Software Foundation instead of in the
original English.





File: emacs-ja, Node: Rmail Output, Next: Rmail Labels, Prev: Rmail Files, Up: Rmail

ファイルへのメッセージのコピー
==============================

以下のコマンドで, rmailファイルから別のファイルへメッセージをコピーで
きます.

`o FILE RET'
     デフォルトではrmailファイル形式を用いて, カレントメッセージのコピー
     をファイルFILEへ追加する.  （`rmail-output-to-rmail-file'）.

`C-o FILE RET'
     デフォルトではシステムのinboxファイル形式を用いて, カレントメッセー
     ジのコピーをファイルFILEへ追加する.

`w FILE RET'
     メッセージのヘッダ`Subject'からデフォルトのファイル名を作り, メッ
     セージの本文だけをファイルFILEに書き出す.

コマンド`o'と`C-o'は, カレントメッセージを指定したファイルへコピーしま
す.  そのファイルは, rmailファイルでもシステムのinbox形式でもかまいま
せん.  出力コマンドは, ファイルの形式を確かめその形式に従ってメッセー
ジのコピーを書き込みます.

メッセージをUNIXのmailファイル形式のファイルにコピーする場合, これらの
コマンドは現在表示しているヘッダもコピーします.  表示（しコピー）する
ヘッダを指定したい場合には, あらかじめ`t'コマンドを使ってください.

コマンド`o'と`C-o'は2つの点で異ります.  それぞれ, 独自のデフォルトのファ
イル名を持ち, ファイルが既存でない場合に使用する形式も別です.  新たに
ファイルを作成するとき, `o'コマンドはrmail形式を使いますが, `C-o'コマ
ンドはシステムのinbox形式を使います.  デフォルトのファイル名は, `o'で
は最後に`o'で使ったものになり, `C-o'も最後に`C-o'で使ったものです.

出力ファイルが, 現在Emacsバッファで訪れているrmailファイルのときには, 
出力コマンドはメッセージをバッファにコピーします.  そのバッファをファ
イルに保存するのはユーザーの責任です.

ときどき, ファイルの内容をそのまま本文にしたようなメッセージを受け取る
こともあるでしょう.  `w'（`rmail-output-body-to-file'）コマンドで, 
（メッセージのヘッダを除いて）本文をファイルに保存できます.  こうした
メッセージでは, `Subject'フィールドに意図するファイル名が入れているこ
とがままあるので, `w'コマンドはデフォルトの出力ファイル名に`Subject'
フィールドを使います.  しかし, ミニバッファでファイル名を読み取るので, 
好きなファイル名を指定できます.

メニューを使ってrmailファイルにメッセージを出力することもできます.  ま
ず, メニューバーの項目Classifyを選択し, Classifyメニューから項目Output
Rmail File Menuを選択します.  そして, 望むrmailファイルを選択します. 
これは, `o'コマンドのように, カレントメッセージをそのファイルに出力し
ます.  変数`rmail-secondary-file-directory'と 変数
`rmail-secondary-file-regexp'で, メニューに含めるべきファイル名を選択
します.  最初の変数では探すべきディレクトリを指定し, 2番目の変数ではディ
レクトリ中のどのファイルか（正規表現に一致するもの）を指定します.

メッセージをコピーすると, もとのメッセージには`filed'属性が付きます. 
そのメッセージがカレントメッセージになると, モード行に`filed'と表示さ
れます.  メイルメッセージをそれぞれ1個だけにしておきたい場合には, 変数
`rmail-delete-after-output'に`t'を設定します.  すると, コマンド`o'と
`C-o'は, メッセージをコピーするともとのメッセージを削除します.  （必要
ならば, もとのメッセージをアンデリートできます. ）

システムのinbox形式でファイルにメッセージをコピーするときには, rmailで
今表示しているヘッダフィールドを使います.  したがって, `t'コマンドを使っ
てヘッダ全体を見えるようにしてからメッセージをコピーすると, ヘッダ全体
がコピーされます.  *Note Rmail Display::.

変数`rmail-output-file-alist'を使うと, カレントメッセージの内容に基づ
いてデフォルトの出力ファイルを賢く指定できます.  値はつぎの形式の要素
から成るリストである必要があります.

     (REGEXP . NAME-EXP)

カレントメッセージがREGEXPで指定されるパターンに一致すると, デフォルト
の出力ファイル名はNAME-EXPになります.  複数の要素がメッセージに一致す
る場合は, 最初に一致した要素がデフォルトのファイル名になります.  部分
要素NAME-EXPは, ファイル名を指定する文字列か, より一般的には, 文字列と
してファイル名を返すLisp式です.  変数`rmail-output-file-alist'は, `o'
と`C-o'の両方に適用されます.



File: emacs-ja, Node: Rmail Labels, Next: Rmail Attributes, Prev: Rmail Output, Up: Rmail

ラベル
======

各メッセージには分類のためにいろいろな"ラベル"（label）が付きます.  各
ラベルには名前があって, 名前が異なれば別のラベルです.  どのラベルもメッ
セージに付いているか付いていないかのどちらかです.  少数のラベル名には
標準的な意味があり, 適切な場合にはrmailが自動的にメッセージに付けます. 
これらの特別なラベルを"属性"（attribute）と呼びます.  （*Note Rmail
Attributes::. ）それ以外のすべてのラベルはユーザーだけが付けます.

`a LABEL RET'
     カレントメッセージにラベルLABELを付ける（`rmail-add-label'）.
`k LABEL RET'
     カレントメッセージからラベルLABELを取り去る（`rmail-kill-label'）.
`C-M-n LABELS RET'
     ラベル群LABELSのどれか1つを持つつぎのメッセージへ移動する
     （`rmail-next-labeled-message'）.
`C-M-p LABELS RET'
     ラベル群LABELSのどれか1つを持つまえのメッセージへ移動する
     （`rmail-previous-labeled-message'）.
`C-M-l LABELS RET'
     ラベル群LABELSのどれかを持つすべてのメッセージのサマリを作成する
     （`rmail-summary-by-labels'）.

コマンド`a'（`rmail-add-label'）と`k'（`rmail-kill-label'）で, カレン
トメッセージに任意のラベルを付けたり取り去ったりできます.  引数が空の
場合は, もっとも最近に付けたり取り去ったりしたものと同じラベルを意味し
ます.

分類するためのラベルをメッセージにいったん付ければ, そのラベルを使って
2つのこと, つまり, 移動とサマリ作成ができます.

コマンド`C-M-n LABELS RET'（`rmail-next-labeled-message'）は, ラベル群
LABELSのどれか1つを持つつぎのメッセージへ移動します.  引数LABELSには,
1つのラベル名, あるいは, コンマで区切って複数のラベル名を指定します.
`C-M-p'（`rmail-previous-labeled-message'）も同様ですが, まえのメッセー
ジへ向かって逆向きに移動します.  これらのコマンドに対する数引数は, 反
復回数になります.

コマンド`C-M-l LABELS RET'（`rmail-summary-by-labels'）は, 指定したラ
ベルの集まりの中の少なくとも1つのラベルを持つようなメッセージからなる
サマリを表示します.  引数LABELSは, 1つのラベル名, あるいは, コンマで区
切った複数のラベル名です.  サマリについては, *Note Rmail Summary::.

`C-M-n', `C-M-p', `C-M-l'に対する引数LABELSが空の場合には, これらのコ
マンドのどれかにもっとも最近に指定したラベルの集まりを意味します.



File: emacs-ja, Node: Rmail Attributes, Next: Rmail Reply, Prev: Rmail Labels, Up: Rmail

rmailの属性
===========

`deleted'や`filed'のようなラベルのいくつかには組み込みの意味付けがあり, 
適切なときに自動的にメッセージに付けられたり取り去られたりします.  こ
のようなラベルを"属性"（attribute）と呼びます.  以下はrmailの属性の一
覧です.

`unseen'
     メッセージが一度もカレントメッセージになったことがないことを意味
     する.  inboxファイルから取り込またときにメッセージに付けられ, メッ
     セージがカレントメッセージになると取り去られる.  rmailを起動する
     と, まずこの属性を持つ最初のメッセージが表示される.
`deleted'
     メッセージが削除されたことを意味する.  削除コマンドが付け, アンデ
     リートコマンドが取り去る（*Note Rmail Deletion::）.
`filed'
     メッセージは他のファイルへコピーされたことを意味する.  ファイル出
     力コマンドが付ける（*Note Rmail Files::）.
`answered'
     メッセージに返信したことを意味する.  `r'（`rmail-reply'）コマンド
     が付ける.  *Note Rmail Reply::.
`forwarded'
     メッセージを他者に転送したことを意味する.  `f'（`rmail-forward'）
     コマンドが付ける.  *Note Rmail Reply::.
`edited'
     rmail内でメッセージのテキストを編集したことを意味する.  *Note
     Rmail Editing::.
`resent'
     メッセージを再送信したことを意味する.  `M-xrmail-resend'コマンド
     が付ける.  *Note Rmail Reply::.

これら以外のすべてのラベルはユーザーだけが付けたり取り去ったりするので
あって, 標準的な意味はまったくありません.



File: emacs-ja, Node: Rmail Reply, Next: Rmail Summary, Prev: Rmail Attributes, Up: Rmail

返事の送信
==========

rmailには, メイルの送信にメイル（mail）モードを使うコマンドがいくつか
あります.  メイル（mail）モードの使用方法については, rmailから使えるあ
る種の機能も含めて, *Note Sending Mail::.  本節では, メイル（mail）モー
ドへ入るrmailに特有のコマンドを説明します.  メイル送信のための通常のキー,
`C-x m', `C-x 4 m', `C-x 5 m'は, rmailモードでも使え, その動作もまった
く同じであることに注意してください.

`m'
     メッセージを送信する（`rmail-mail'）.
`c'
     書き始めたメッセージの編集を再開する（`rmail-continue'）.
`r'
     カレントメッセージに対する返事を送信する（`rmail-reply'）.
`f'
     カレントメッセージを他のユーザーに転送する（`rmail-forward'）.
`C-u f'
     カレントメッセージを他のユーザーに再送信する（`rmail-resend'）.
`M-m'
     送信できずに戻ってきたメッセージを再度送信する
     （`rmail-retry-failure'）.

rmailからメッセージを送信するのは, ほとんどの場合, 読んでいるメッセー
ジに返信するためでしょう.  それには, `r'（`rmail-reply'）と打ちます. 
すると, `C-x 4 m'のように別のウィンドウに`*mail*'バッファが表示されま
すが, 返事を出そうとするメッセージに基づいて`Subject', `To', `CC',
`In-reply-to'のヘッダフィールドがあらかじめ埋められています.  `To'フィー
ルドにはそのメッセージの送信者が書かれ, `CC'フィールドにはそのメッセー
ジのすべての受信者が書かれます.

変数`rmail-dont-reply-to-names'を使うと, `CC'に自動的に含まれる受信者
から特定の受信者を除くことができます.  この変数の値は（文字列で表した）
正規表現である必要があります.  この正規表現に一致する受信者は`CC'フィー
ルドから除かれます.  デフォルトの値は, あなた自身の名前と`info-'で始ま
る名前です.  （このような名前は, 大規模なメイリングリストで全員に送信
するために使う習慣があるから. ）

`CC'フィールドを完全に省いて返信したいときには, 数引数を指定して返信コ
マンドを入力します.  つまり, `C-u r'や`1 r'です.

ひとたび`*mail*'バッファが初期化されれば, メイルの編集や送信は通常どお
りです（*Note Sending Mail::）.  あらかじめ用意されたヘッダフィールド
が適切でなければ, 編集してかまいません.  また, メイル（mail）モードの
コマンドを使うこともでき（*Note Mail Mode::）, `C-c C-y'コマンドでもと
の返信メッセージをヤンクすることもできます.  rmailバッファに切り替えて
から別のメッセージを選択し, もとに戻って新しいカレントメッセージをヤン
クしてもかまいません.

メッセージが相手先へ届かない場合があります.  メイル配送プログラムは, 
通常, 失敗したメッセージを"失敗メッセージ"に同封して発信者に送り返しま
す.  rmailのコマンド`M-m'（`rmail-retry-failure'）は, 同じメッセージを
再送する準備をします.  前回と同じ本文とヘッダフィールドで`*mail*'バッ
ファを立ち上げます.  すぐに`C-c C-c'と打つと, 前回とまったく同様にメッ
セージを再送信します.  あるいは, 本文やヘッダを編集してから送信するこ
ともできます.  変数`rmail-ignored-headers'（*Note Rmail Display::）と
同じ形式の変数`rmail-retry-ignored-headers'は, 再送信するときに送信に
失敗したメッセージから取り除くヘッダを制御します.  デフォルトでは`nil'
です.

rmailからメッセージを送信する別の場面は, 他のユーザーにメッセージを"転
送"（forward）することでしょう.  `f'（`rmail-forward'）はこれを簡単に
行えるようにします.  つまり, カレントメッセージをテキストとして
`*mail*'バッファを初期化し, `Subject'も転送メッセージである旨の初期化
をします.  あとは, 受信者を埋め込んで送信するだけです.  メッセージを転
送したとき, 受信者はあなた『から』メッセージを受け取りますが, 内容はも
とのメッセージのままです.

転送されるメッセージは, 2つの区切り行に挟まれています. 
また, 各行は, 行頭に`- 'を挿入してハイフンで始まるように
修正されます. 
転送メッセージを受け取って, たとえばプログラムのソースコードのように
文書以外に何か役立つようなものが含まれているときには, 
このような変更をもとに戻せたら便利です. 
これを行うには, 転送メッセージを選択して
`M-x unforward-rmail-message'と打ちます. 
このコマンドは, 挿入された`- 'を削除してもとのメッセージを取り出し, 
それをrmailファイルのカレントメッセージの直後に別のメッセージとして挿入します. 

"再送"（resending）は転送に似ている別の手段です.  異なる点は, 再送はも
ともとの送信者『から』メッセージをもう一度送ることです.  また, あなた
から送られたことを示すために`Resent-from'と`Resent-to'のヘッダフィール
ドが付加されます.  rmailでメッセージを再送するには, `C-u f'を使います. 
（`f'は`rmail-forward'を実行するが, 数引数を指定すると`rmail-resend'を
実行するようになっている. ）

`m'（`rmail-mail'）コマンドは, 返信ではない送信メッセージを編集し始め
るのに使います.  ヘッダフィールドは空のままです.  このコマンドと`C-x 4
m'との唯一の違いは, ちょうど`r'がするように`C-c C-y'でrmailバッファを
参照できるようにすることです.  したがって, `m'コマンドでメッセージに返
信したり転送したりできます.  `r'や`f'でできることは何でもできます.

`c'（`rmail-continue'）コマンドは, 書きかけのメッセージの編集を完了し
たり, 送信したメッセージを変更したりするために`*mail*'バッファの編集を
再開します.

変数`rmail-mail-new-frame'に`nil'以外の値を設定すると, メッセージの送
信を始めるすべてのrmailコマンドは編集用に新しいフレームを作ります.  メッ
セージを送信したり`Mail'メニューの項目`Don't Send'を使うと, このフレー
ムは削除されます.

メッセージを送信するためすべてのrmailコマンドは, あなたが選択したメイ
ル作成方式を使います（*Note Mail Methods::）.



File: emacs-ja, Node: Rmail Summary, Next: Rmail Sorting, Prev: Rmail Reply, Up: Rmail

rmailのサマリ機能
=================

"サマリ"（summary）とは, rmailファイルにあるメイルの概要を示すために1
メッセージにつき1行の情報を収めたバッファです.  各行には, メッセージ番
号, 送信者, ラベル, サブジェクト（`Subject'の内容）が表示されます.  ほ
とんどすべてのrmailコマンドはサマリバッファでも有効で, サマリの現在行
が指すメッセージに適用されます.  サマリバッファでポイントを動かすと, 
ポイントがある行が指すメッセージを選択します.

1つのサマリバッファは, それに対応した1つのrmailファイルにしか適用され
ません.  複数のrmailファイルを編集している場合には, それぞれに専用のサ
マリバッファを作れます.  サマリバッファの名前は, rmailバッファの名前に
`-summary'を付け加えたものです.  通常, 一度に表示されるサマリバッファ
は1つだけです.

* Menu:

* Rmail Make Summary::	     Making various sorts of summaries.
* Rmail Summary Edit::	     Manipulating messages from the summary.



File: emacs-ja, Node: Rmail Make Summary, Next: Rmail Summary Edit, Prev: Rmail Summary, Up: Rmail Summary

サマリの作成
------------

現在のrmailファイルのサマリを作成するコマンドを説明します.  いったん
rmailファイルに対するサマリバッファを作っておくと, （メッセージの削除／
抹消, 新着メイルの取得などで）rmailファイルが変更されると自動的にサマ
リも更新されます.

`h'
`C-M-h'
     すべてのメッセージのサマリを作成する（`rmail-summary'）.
`l LABELS RET'
`C-M-l LABELS RET'
     指定したラベルのいずれかを含むメッセージのサマリを作成する
     （`rmail-summary-by-labels'）.
`C-M-r RCPTS RET'
     指定した受信者名のいずれかを含むメッセージのサマリを作成する
     （`rmail-summary-by-recipients'）.
`C-M-t TOPIC RET'
     指定した正規表現TOPICに一致するサブジェクトを持つメッセージのサマ
     リを作成する（`rmail-summary-by-topic'）.

コマンド`h'や`C-M-h'（`rmail-summary'）は, 現在のrmailファイルのサマリ
バッファをこのファイルの全メッセージのサマリで満たします.  そして, 別
のウィンドウにサマリバッファを表示し選択します.

`C-M-l LABELS RET'（`rmail-summary-by-labels'）は, ラベルLABELSのいず
れかを含むメッセージに対する部分的なサマリを作ります.  LABELSはラベル
名をコンマで区切ったものである必要があります.

`C-M-r RCPTS RET'（`rmail-summary-by-recipients'）は, 受信者名RCPTSの
いずれかを含むメッセージに対する部分的なサマリを作ります.  RCPTSはメイ
ルアドレスをコンマで区切ったものである必要があります.

`C-M-t TOPIC RET'（`rmail-summary-by-topic'）は, 正規表現TOPICに一致す
るサブジェクトを持つメッセージに対する部分的なサマリを作成します.

どのrmailファイルにも1つのサマリバッファしかないことに注意してください. 
ある種類のサマリを作成すると, それ以前のサマリは消されてしまいます.

変数`rmail-summary-window-size'は, サマリウィンドウに使う行数を指定し
ます.  変数`rmail-summary-line-count-flag' は, 各メッセージのサマリ行
にメッセージの行数を表示するかどうかを制御します.



File: emacs-ja, Node: Rmail Summary Edit, Next: Rmail Sorting, Prev: Rmail Make Summary, Up: Rmail Summary

サマリでの編集
--------------

rmailバッファ自体にできることは, rmailサマリバッファでもほとんどできま
す.  実際, いったんサマリバッファを作っておけば, rmailバッファに切り替
える必要はありません.

サマリバッファ上でポイントを行から行へ移動するだけで, サマリバッファか
らrmailバッファのさまざまなメッセージを選択し表示できます.  どんな
Emacsコマンドを使ってポイントを移動してもかまいません.  コマンドを実行
し終ったときにポイントがある行がどこであっても, rmailバッファのそれに
対応するメッセージが選択されます.

ほとんどすべてのrmailコマンドは, rmailバッファと同様にサマリバッファで
も機能します.  つまり, `d'はサマリバッファでもカレントメッセージを削除
し, `u'はアンデリートし, `x'は抹消します.  `o'と`C-o'はカレントメッセー
ジをファイルに書き込みます.  `r'は返信を開始します.  サマリバッファに
いても, SPCとDELを使ってカレントメッセージをスクロールできます.

メッセージのあいだを移動するrmailコマンドもサマリバッファで使えますが, 
事情が少々違っています.  つまり, 現在サマリが作られているメッセージの
あいだでしか移動できません.  また, rmailバッファが必ず画面に表示される
ようにします.  （カーソル移動のコマンドはrmailバッファの内容を更新しま
すが, rmailバッファがウィンドウに表示されていなければ表示されませ
ん. ）以下はこれらのコマンドの一覧です.

`n'
     （削除された）「deleted」となっている行を飛び越してつぎの行に移動
     し, そのメッセージを選択する.
`p'
     （削除された）「deleted」となっている行を飛び越してまえの行に移動
     し, そのメッセージを選択する.
`M-n'
     つぎの行に移動し, そのメッセージを選択する.
`M-p'
     まえの行に移動し, そのメッセージを選択する.
`>'
     最後の行に移動し, そのメッセージを選択する.
`<'
     最初の行に移動し, そのメッセージを選択する.
`M-s PATTERN RET'
     カレントメッセージから始めてPATTERNに一致するメッセージを探索する. 
     みつかったメッセージを選択し, サマリバッファ内のそのメッセージに
     対応する行にポイントを移動する.

rmailバッファで, 削除, アンデリート, 新着メイルの取得, 別のメッセージ
の選択を実行すると, サマリバッファを必ず更新します.  変数
`rmail-redisplay-summary'が`nil'以外ならば, これらのコマンドを実行する
とサマリバッファは画面に表示されます.

サマリを使い終ったら`Q'（`rmail-summary-wipe'）と打ってサマリバッファ
のウィンドウを削除します.  サマリでrmailを終了することもできます.  `q'
（`rmail-summary-quit'）はサマリウィンドウを削除し, rmailファイルを保
存してrmailを抜け, 別のバッファに切り替えます.



File: emacs-ja, Node: Rmail Sorting, Next: Rmail Display, Prev: Rmail Summary, Up: Rmail

rmailファイルのソート
=====================

`M-x rmail-sort-by-date'
     現在のrmailファイルのメッセージを日付順にソートする.

`M-x rmail-sort-by-subject'
     現在のrmailファイルのメッセージを`Subject'順にソートする.

`M-x rmail-sort-by-author'
     現在のrmailファイルのメッセージを筆者名順にソートする.

`M-x rmail-sort-by-recipient'
     現在のrmailファイルのメッセージを受け手名順にソートする.

`M-x rmail-sort-by-correspondent'
     現在のrmailファイルのメッセージを他の文通者名順にソートする.

`M-x rmail-sort-by-lines'
     現在のrmailファイルのメッセージを行数順にソートする.

`M-x rmail-sort-by-keywords RET LABELS RET'
     現在のrmailファイルのメッセージをラベル順にソートする.  引数 
     LABELSは, コンマで区切られたラベルの並びである必要がある.  ラベル
     の順序がメッセージの順序を決める.  最初のラベルを持つメッセージが
     最初にきて, 2番目のラベルを持つものが2番目にくるというようになる. 
     指定したラベルも持たないメッセージは最後にくる.

rmailのソートコマンドは, *順序を保存するソート*（stable sort）を行いま
す.  2つのメッセージのどちらを先にするか明確な基準がないときには, その
順序関係は保存されます.  これを用いれば, 複数の基準でソートできます. 
たとえば, `rmail-sort-by-date'を使ってから`rmail-sort-by-author'を使う
と, 同じ筆者のメッセージは日付順に並びます.

数引数を指定するとこれらのすべてのコマンドは逆順序に並べます.  つまり, 
新しいものから古いものへ, 大きなものから小さなものへ, アルファベットの
逆順にメッセージをソートします.



File: emacs-ja, Node: Rmail Display, Next: Rmail Editing, Prev: Rmail Sorting, Up: Rmail

メッセージの表示
================

初めてメッセージを表示するとき, rmailはメッセージのヘッダを整形し直し
てから表示します.  むだな表示を削るために重要でないヘッダフィールドを
隠します.  `t'コマンドを使うと, ヘッダ全体を表示したり再度整形すること
ができます.

`t'
     ヘッダ全体を表示するかどうかを切り替える（`rmail-toggle-header'）.

ヘッダの整形では, 各ヘッダフィールドの重要性に基づいてほとんどのヘッダ
フィールドを削除することになります.  変数`rmail-ignored-headers'には, 
このようにして隠すヘッダフィールドを指定する正規表現を記述します.  ヘッ
ダフィールドの先頭部分がこの正規表現に一致するとそのフィールド全体を隠
します.

rmailは整形を行うまえにもとのヘッダ全体を保存します.  これを見るには
`t'（`rmail-toggle-header'）コマンドを使います.  カレントメッセージの
整形されたヘッダを捨て, もとのヘッダを表示します.  `t'を再度実行すると, 
メッセージのヘッダを再度整形します.  メッセージを選択し直しても再度整
形します.

この結果として, （*Note Rmail Editing::）整形されたヘッダを（`e'コマン
ドで）編集しても, そのあとに`t'を使うと編集したものは破棄されます
（*Note Rmail Editing::）.  一方, `t'のあとに`e'を使ってもとの（整形し
ていない）ヘッダを編集すると, その変更は保存されます.

`t'コマンドに数引数を付けると, 正の引数ならは整形したヘッダを表示し, 
ゼロか負ならばヘッダ全体を表示します.

複数のフォントを使えるウィンドウシステムで使用すると, rmailは特に重要
なある種のヘッダフィールドを強調表示します.  デフォルトでは, `From'フィー
ルドと`Subject'フィールドです.  変数`rmail-highlighted-headers'には, 
強調表示したいヘッダフィールドを指定する正規表現を記述します.  ヘッダ
フィールドの先頭部分がこの正規表現に一致するとそのフィールド全体を強調
表示します.

テキストの前景や背景に標準的でない色を指定すると, うまく強調表示できな
いこともあります.  そのような場合には, `highlight'フェイスに別の色を指
定します.  `highlight'フェイスはrmail以外の強調表示にも使われるので, 
指定を行う価値があります.  方法は, *Note Faces::.

rmailの強調表示をすべてやめるには, 変数`rmail-highlighted-headers'に
`nil'を設定してください.



File: emacs-ja, Node: Rmail Editing, Next: Rmail Digest, Prev: Rmail Display, Up: Rmail

メッセージの編集
================

rmailモードでも通常のEmacsコマンドのほとんどを使えますが, `C-M-n'や
`C-M-h'のように他の目的のためにrmailで再定義されたものもいくつかありま
す.  しかし, rmail バッファは通常読み出し専用であり, アルファベット文
字のほとんどもrmailコマンドとして再定義されています.  メッセージのテキ
ストを編集したいときには, rmailコマンド`e'を使う必要があります.

`e'
     カレントメッセージを通常のテキストとして編集する.

`e'（`rmail-edit-current-message'）コマンドは, rmailモードからrmail編
集（rmail-edit）モードに移行します.  このモードは, テキスト（text）モー
ドとほとんど同じ別のメジャーモードです.  モード行にこの変化が表示され
ます.

rmail編集（rmail-edit）モードでは, 文字は通常どおり挿入でき, rmailコマ
ンドは使えません.  メッセージを編集し終えてrmailへ戻るには, `C-c C-c'
と打ちます.  するとrmailモードに戻ります.  あるいは, 行った編集をすべ
て取り消してrmailモードに戻るには, `C-c C-]'と打ちます.

rmail編集（rmail-edit）モードに入るとき, フック`text-mode-hook'が実行
されます.  それからフック`rmail-edit-mode-hook' が実行されます （*Note
Hooks::）.  メッセージには属性`edited' が付けられます.  さらに, メッセー
ジのヘッダ全体が表示されるので, メッセージの本文と同様にヘッダも編集で
きます.  ヘッダに対する変更も保存されます.



File: emacs-ja, Node: Rmail Digest, Next: Out of Rmail, Prev: Rmail Editing, Up: Rmail

ダイジェストメッセージ
======================

"ダイジェストメッセージ"（digest message）は, 数個のメッセージをまとめ
て運ぶためのメッセージです.  ダイジェストは管理人のいるメイリングリス
ト上で使われます.  1日単位などの一定期間内にリスト宛に受け取ったすべて
のメッセージを1つのダイジェストにまとめて加入者に送ります.  合計のサイ
ズが同じであったとしても, ダイジェストにして送るほうが個々にメッセージ
を送るよりコンピュータの使用時間がずっと少なくてすみます.  というのは, 
メイル送信に必要なメッセージあたりのネットワーク上のオーバーヘッドがと
ても大きいからです.

ダイジェストメッセージを受け取ったならば, もっとも簡単な読み方は, それ
を"アンダイジェスト"（undigestify）して個々のメッセージに戻すことです. 
そうすれば好きなように, 個々のメッセージを読んだり削除したりできます.

アンダイジェストするには, ダイジェストメッセージを選び, コマンド`M-x
undigestify-rmail-message'を打ちます.  これは, （ダイジェストメッセー
ジ内の）サブメッセージを別々のrmailメッセージとして取り出し, ダイジェ
ストのあとにそれらのメッセージを挿入します.  ダイジェストメッセージ自
体は削除されます.



File: emacs-ja, Node: Out of Rmail, Next: Rmail Rot13, Prev: Rmail Digest, Up: Rmail

rmailファイルからinbox形式への変換
==================================

コマンド `M-x unrmail'は, rmail形式のファイルを（システムのメイルボッ
クス形式としても知られる）inbox形式に変換します.  こうすると, そのファ
イルを別のメイル編集ツールでも使えるようになります.  2つの引数, rmail
ファイル名と変換後のファイル名を指定する必要があります.  `M-x unrmail'
はrmailファイル自体には変更を加えません.



File: emacs-ja, Node: Rmail Rot13, Next: Movemail, Prev: Out of Rmail, Up: Rmail

rot13メッセージの読み方
=======================

特定の読者に不快を与える可能性があるメイリングリストのメッセージは,
"rot13"と呼ばれる単純な方法で暗号化してある場合があります.  この名前は, 
アルファベットを13文字分巡回させることに由来します.  これは機密保持の
ためではなく, そのような機能もありません.  不快に感じるかもしれない読
者がメッセージの本当の本文を見ないようにするために使います.

rot13暗号を使っているバッファを見るには, コマンド`M-x
rot13-other-window'を使います.  テキストを表示するときに暗号を解いて別
のウィンドウにカレントバッファを表示します.



File: emacs-ja, Node: Movemail, Next: Dired, Prev: Rmail Rot13, Up: Rmail

`movemail'とPOP
===============

新着メイルを取得するとき, rmailはまずinboxファイルからrmailファイルに
新着メイルをコピーします.  それから, rmailファイルを保存します.  そし
て, inboxファイルの内容を消します.  こうすると, システムがクラッシュす
るとinboxとrmailファイルにメイルを重複して持つことになりますが, メイル
を紛失することはありえません.  変数`rmail-preserve-inbox'が`nil'以外な
らば, rmailは, inboxファイルからrmailファイルに新着メイルをコピーして
からinboxファイルの内容を消しません.  たとえば, 旅行中は携帯コンピュー
タでPOPを介してメイルを調べ, メイルをサーバーに残しておいてあとでワー
クステーションに保存するようにするには, このような設定をします.

場合によっては, rmailは間接的にinboxファイルから新着メイルをコピーしま
す.  まず, `movemail'プログラムを実行して, inboxから
`~/.newmail-INBOXNAME'という中間ファイルにメイルを移動します.  それか
ら, rmailは中間ファイルから新着メイルを併合してrmailファイルを保存して
から中間ファイルを削除します.  これを実行中の都合が悪いときにクラッシュ
すると中間ファイルが残ってしまい, rmailがつぎにinboxから新着メイルを取
得するときにまたそのファイルを使ってしまいます.

rmailが`~/.newmail-INBOXNAME'のデータを独自形式（Babyl形式）に変換でき
ないと, 同じデータでトラブルが再発しないようにファイル名を
`~/RMAILOSE.N' （Nは名前が一意になるような整数）に変えます.  このファ
イルを調べて, rmailが解釈できなかったメッセージ（たぶん, コントロール
下線の文字, 8進コード037を使ったメッセージかもしれない）を探してそれを
削除します.  そうしてから, `1 g'コマンドを使って修正したファイルから新
着メイルを取り込みます.

inboxファイルにデータを保存するかわりに, POPと呼ばれる方法を用いてユー
ザーのinboxのデータを参照する場合もあります.  `movemail'をコンパイルす
るときにマクロ`MAIL_USE_POP'を定義してコンパイルすれば`movemail'はPOP
を使って動きます.  （Emacsをインストールするとき, `--with-pop'を指定し
て`configure'を実行すれば, このようにできる. ）`movemail'はPOP3でしか
動かず, POPの古いバージョンでは使えません.

`movemail'を適切にコンパイルしてインストールしたとすると, rmailファイ
ルのinboxリストで, `po:USERNAME'の形の『ファイル名』でPOPのinboxを指定
できます.  `movemail'は, そのような名前に対しては, POPサーバーに対する
接続を開きます.  `MAILHOST'環境変数で, どのマシンでサーバーを探すかを
指定します.

POP経由でメイルを参照するにはパスワードが必要です.  変数
`rmail-pop-password'が`nil'以外のときは, これはPOPに対してを使うパスワー
ドを指定します.  あるいは, 変数`rmail-pop-password-required'が`nil'以
外ならば, rmailはユーザーにパスワードを尋ねます.

`movemail'にコマンド行オプションを追加する必要があるときには, 変数
`rmail-movemail-flags'に指定したいオプションのリストを設定します.
inboxの内容を保存するオプション`-p'を指定するためにこの変数を使わない
でください.  かわりに`rmail-preserve-inbox'を使ってください.

読者のサイトでインストールした`movemail'プログラムは, Kerberos認証を使
うかもしれません.  その場合, `rmail-pop-password'と
`rmail-pop-password-required'が設定されていなければ, POPでメイルを取得
するときにデフォルトでKerberos認証を使います.

POPサーバーによってはメッセージを逆順序に保存します.  そのようなサーバー
で受信順にメイルを読むには, `rmail-movemail-flags'にフラグ`-r'を追加し
て, ダウンロードしたメッセージを逆順にするように`movemail'に指示します.


File: emacs-ja, Node: Dired, Next: Calendar/Diary, Prev: Rmail, Up: Top

ディレクトリエディタdired
*************************

diredはディレクトリ一覧をバッファに作成します.  場合によっては, サブディ
レクトリの一覧も含まれます.  普通のEmacsコマンドでこのバッファの中を動
き廻ったり, 特別なdiredコマンドで一覧中にあるファイルを操作できます.

* Menu:

* Enter: Dired Enter.         How to invoke Dired.
* Commands: Dired Commands.   Commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* Flagging Many Files::       Flagging files based on their names.
* Visit: Dired Visiting.      Other file operations through Dired.
* Marks vs Flags::	      Flagging for deletion vs marking.
* Operating on Files::	      How to copy, rename, print, compress, etc.
			        either one file or several files.
* Shell Commands in Dired::   Running a shell command on the marked files.
* Transforming File Names::   Using patterns to rename multiple files.
* Comparison in Dired::	      Running `diff' by way of Dired.
* Subdirectories in Dired::   Adding subdirectories to the Dired buffer.
* Subdirectory Motion::	      Moving across subdirectories, and up and down.
* Hiding Subdirectories::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.	      Using `find' to choose the files for Dired.



File: emacs-ja, Node: Dired Enter, Next: Dired Commands, Prev: Dired, Up: Dired

diredの起動
===========

diredを起動するには, `C-x d'か`M-x dired'を使います.  このコマンドは, 
一覧表示するファイルを指定するためのディレクトリ名やファイルのワイルド
カードパターンをミニバッファで読み取ります.  `dired'が`list-directory'
と違うのは, バッファがdiredモードになっていて特別なdiredコマンドを使え
るようになることです.

変数`dired-listing-switches'には, ディレクトリ一覧を作成する`ls'プログ
ラムに与えるオプションを指定します.  オプション中には`-l'が必ず含まれ
ている*必要*があります.  `dired'コマンドに数引数を指定すると, ミニバッ
ファでディレクトリを指定するまえに`ls'のオプションを指定できます.

diredバッファを現在選択しているウィンドウではなく別のウィンドウに表示
したい場合には, `C-x d'のかわりに`C-x 4 d'（`dired-other-window'）を使
います.  `C-x 5 d'（`dired-other-frame'）は別のフレームにdiredバッファ
を表示します.



File: emacs-ja, Node: Dired Commands, Next: Dired Deletion, Prev: Dired Enter, Up: Dired

diredバッファ内のコマンド
=========================

diredバッファは『読み出し専用』であり, このバッファに文字を挿入しても
意味がないので, `d'や`x'のような通常の印字文字は特別なdiredコマンドに
使われます.  diredコマンドのいくつかは, diredバッファの"カレントファイ
ル"（current file, つまり, 現在行のファイル）に"印"（mark）や"フラグ"
（flag）を付けます.  他のコマンドは, 印やフラグが付いたファイル群に作
用します.

Emacsの普通のカーソル移動コマンドはdiredバッファでも使えます.  特殊用
途のカーソル移動コマンドもあります.  `C-n'と`C-p'は, カーソルを行の先
頭ではなくファイル名の先頭に位置合わせするように再定義されています.

さらに便利なように, diredモードではSPCと`n'は`C-n'に等価です.  `p'は
`C-p'に等価です.  （diredでは行単位の移動をよく行うため, 打鍵しやすく
してある. ）DEL（上に移動してフラグを消す）は, 単に上へ移動する場合に
は便利です.



File: emacs-ja, Node: Dired Deletion, Next: Flagging Many Files, Prev: Dired Commands, Up: Dired

diredでのファイル削除
=====================

diredの主な利用法は, ファイルに削除のフラグを付けてから, フラグの付い
ているファイルを（本当に）削除することです.

`d'
     このファイルに削除フラグを付ける.
`u'
     この行の削除フラグを消す.
`DEL'
     ポイントをまえの行に移し, その行の削除フラグを消す.
`x'
     削除フラグが付いたファイルを（本当に）削除する.

ファイルに削除フラグを付けるには, そのファイルを表示している行に移動し
て`d'と打ちます.  削除フラグは, 行頭に表示される`D'という文字でわかり
ます.  このコマンドはポイントをつぎの行に進めますから, `d'コマンドを繰
り返し実行すれば後続のファイルにもフラグを付けることができます.  数引
数は反復回数になります.

即座にファイルを削除するかわりに削除フラグを付けるので, 誤ってファイル
を消してしまう危険性は低くなります.  フラグを付けたファイルを抹消する
ようにdiredに指示するまでは, `u'やDELを使って削除フラグを消せます.
`u'（`dired-unmark'）は, `d'と同じように動作しますが, フラグを付けるの
ではなくフラグを消します.  `DEL'（`dired-unmark-backward'）は上に移動
してフラグを消します.  これは, 数引数-1を指定した`u'と同じです.

削除フラグが付いたファイルを（本当に）削除するには, `x'
（`dired-expunge'）と打ちます.  このコマンドは, 削除フラグが付いたファ
イルの一覧を表示し, `yes'での確認応答を求めます.  確認するとdiredはフ
ラグが付いたファイルを削除し, diredバッファからそれらに対応する行を削
除します.  小さくなったdiredバッファは選択されたままです.

確認に`no'と答えたり, `C-g'で中断すると, ただちにdiredに戻りますが, 削
除フラグは付いたままで, ファイルを実際に削除しません.



File: emacs-ja, Node: Flagging Many Files, Next: Dired Visiting, Prev: Dired Deletion, Up: Dired

一度に多数のファイルにフラグを付ける
====================================

`#'
     （名前が`#'で始まり`#'で終る）すべての自動保存ファイルに削除フラ
     グを付ける.  （*Note Auto Save::）.

`~'
     （名前が`~'で終る）すべてのバックアップファイルに削除フラグを付け
     る.  （*Note Backup::）.

`&'
     簡単に作成し直せるような名前のすべてのファイルに削除フラグを付け
     る.

`. （ピリオド）'
     余分な番号付きバックアップファイルに削除フラグを付ける.  新しいバッ
     クアップファイル数個と古いのもの数個を除いて, そのあいだのものに
     フラグを付ける.

`% d REGEXP RET'
     名前が正規表現REGEXPに一致するすべてのファイルに削除フラグを付け
     る.

`#', `~', `&', `.'のコマンドは, ファイル名に基づいて数多くのファイルに
削除フラグを付けます.  これらのコマンドは本当に便利です.  というのは, 
ファイルを実際には削除しないからです.  残しておきたいファイルの削除フ
ラグは消せばいいのです.

`&'（`dired-flag-garbage-files'）は, 変数`dired-garbage-files-regexp' 
で指定される正規表現に一致する名前のファイルに削除フラグを付けます. 
デフォルトは, TeXが生成するある種のファイルと`patch'プログラム (1)
(*Note Flagging Many Files-Footnotes::) が生成する`.orig'と`.rej'のファ
イルです.

`#'（`dired-flag-auto-save-files'）は, 自動保存ファイルと思われる名前
のファイル, すなわち, 名前が`#'で始まり`#'で終るものすべてに削除フラグ
を付けます.  `~'（`dired-flag-backup-files'）は, バックアップファイル
と思われる名前のファイル, すなわち, 名前が`~'で終るものすべてに削除フ
ラグを付けます.

`.'（ピリオド, `dired-clean-directory'）は, バックアップファイルのいく
つか, つまり, 古いもの数個と新しいもの数個を除くすべてに削除フラグを付
けます.  通常, 変数`dired-kept-versions' （保存するときに適用される変
数`kept-new-versions'では*ない*）には新しい版を何個残すかを指定し, 変
数`kept-old-versions'には古い版を何個残すかを指定します.

`C-u 3 .'のように正の数引数をピリオドに指定すると, 変数
`dired-kept-versions'を無視して新しい版を何個残すか指定します.  負の数
引数は変数`kept-old-versions'を無視して数引数の絶対値で古い版を何個残
すか指定します.

`% d'コマンドは, 指定した正規表現（`dired-flag-files-regexp'）に一致す
る名前のファイルに削除フラグを付けます.  ファイル名のうちディレクトリ
に無関係な部分についてだけ一致を調べます.  `^'（先頭）や`$'（末尾）で, 
一致箇所を固定できます.  サブディレクトリを隠蔽すれば, サブディレクト
リを一致検査から除外できます（*Note Hiding Subdirectories::）.


File: emacs-ja  Node: Flagging Many Files-Footnotes, Up: Flagging Many Files

(1) 【訳注】数種類の形式の`diff'の出力を解釈して, テキストファイ
ルを更新するためのプログラム



File: emacs-ja, Node: Dired Visiting, Next: Marks vs Flags, Prev: Flagging Many Files, Up: Dired

diredでのファイルの訪問
=======================

diredには, diredバッファに表示したファイルを訪問したり調べたりするため
のコマンドがあります.  これらは現在行のファイルに作用します.  そのファ
イルが実際にはディレクトリであると, これらのコマンドはそのサブディレク
トリに対して（別のdiredバッファを作って）diredを起動します.

`f'
     `C-x C-f'と打鍵したのと同様に, 現在行が表すファイルを訪問する
     （`dired-find-file'）*Note Visiting::.

`RET'
     `f'と等価.

`o'
     `f'と同様だが, ファイルのバッファを別のウィンドウに表示する
     （`dired-find-file-other-window'）.  diredバッファは最初のウィン
     ドウに表示されたまま残る.  これは`C-x 4 C-f'でファイルを訪問する
     のに似ている.  *Note Windows::.

`C-o'
     現在行が表すファイルを訪問して別のウィンドウに表示するが, そのウィ
     ンドウを選択しない（`dired-display-file'）.

`Mouse-2'
     クリックした行が表すファイルを訪問する
     （`dired-mouse-find-file-other-window'）.  `o'コマンドのように, 
     ファイルの表示には別のウィンドウを使う.

`v'
     `M-x view-file'を用いて現在行が表すファイルを閲覧する
     （`dired-view-file'）.

     ファイルを閲覧することはファイルを訪問することに似ているが, ファ
     イルの中で移動できることに重きを置き, ファイルの変更は許されない.
     *Note View File: Misc File Ops.



File: emacs-ja, Node: Marks vs Flags, Next: Operating on Files, Prev: Dired Visiting, Up: Dired

diredの印とフラグ
=================

ファイルに`D'で示される削除フラグを付けるかわりに他の文字（通常`*'）で
示される"印"を付けることもできます.  『抹消』（`x'）以外のほとんどの
diredコマンドは, `*'で印付けしたファイルを扱えます.

以下のコマンドは, `*'で印付けするコマンド, 印を消すコマンド, 印に作用
するコマンドです.  （フラグを付けたり消したりするコマンドについては
*Note Dired Deletion::. ）

`m'
`* m'
     カレントファイルに`*'で印を付ける（`dired-makr'）.  数引数Nを指定
     すると, カレントファイルから始めて後続のN個のファイルに印を付ける. 
     （Nが負の場合は, 上の-N個のファイルに印を付ける. ）

`* *'
     実行ファイルすべてに`*'で印を付ける（`dired-mark-executables'）. 
     数引数を指定すると, これらのファイルすべての印を消す.

`* @'
     シンボリックリンクすべてに`*'で印を付ける（`dired-mark-symlinks'）. 
     数引数を指定すると, これらのファイルすべての印を消す.

`* /'
     `.'と`..'を除くすべてのディレクトリに`*'で印を付ける
     （`dired-mark-directories'）.  数引数を指定すると, これらのディレ
     クトリすべての印を消す.

`* s'
     現在のサブディレクトリ内の`.'と`..'を除くすべてのファイルに印を付
     ける（`dired-mark-subdir-files'）.

`u'
`* u'
     この行の印を消す（`dired-unmark'）.

`DEL'
`* DEL'
     ポイントをまえの行へ動かし, その行の印を消す
     （`dired-unmark-backward'）.

`* !'
     diredバッファのすべてのファイルの印を消す
     （`dired-unmark-all-files-no-query'）.

`* ? MARKCHAR'
     指定した文字MARKCHARの印すべてを消す（`dired-unmark-all-files'）. 
     引数は1文字.  RETで入力を終えてはならない.

     数引数を指定すると, このコマンドは印の付いたファイルごとに印を消
     すかどうか聞いてくる.  `y'は消すの意味, `n'は消さないの意味.  `!'
     で答えると残りのファイルすべてについて問い合わせずに印を消す.

`* C-n'
     印が付いているつぎのファイルへ進む（`dired-next-marked-file'）. 
     ファイルに『印』が付いているとは, なんらかの印があること.

`* C-p'
     印が付いているまえのファイルへ戻る（`dired-prev-marked-file'）

`* t'
     すべての印を切り替える（`dired-do-toggle'）.  つまり, `*'で印が付
     いているファイルの印を消し, 印が付いていなかったファイルすべてに
     `*'で印を付ける.  `*'以外で印が付いたファイル群は影響されない.

`* c OLD NEW'
     文字OLDの印を文字NEWの印に置き換える（`dired-change-marks'）.  こ
     のコマンドは, `*'や`D'以外の文字で印を付けるための主要な手段.  引
     数はそれぞれ1文字.  RETで入力を終えてはならない.

     このコマンドではほとんどどんな文字でも印として使えるため, ファイ
     ルをいろいろに分類できる.  OLDが空白（` '）であると, コマンドは印
     が付いていないすべてのファイルに作用する.  NEWが空白であると, コ
     マンドは作用するファイルの印を消す.

     下の例はこのコマンドの能力を例示するものであり, 印のないファイル
     すべてに`D'フラグを付け, `D'フラグが付いているものすべてからはフ
     ラグを消します.

          * c D t  * c SPC D  * c t SPC

     ここでは, `t'で印を付けたファイルはないものと仮定します.

`% m REGEXP RET'
`* % REGEXP RET'
     正規表現REGEXPに一致する名前のファイルすべてに（`*'で）印を付ける
     （`dired-mark-files-regexp'）.  このコマンドは`% d'に似ているが, 
     削除フラグ`D'のかわりに`*'でファイルに印を付ける.  *Note Flagging
     Many Files::.

     ファイル名のうちディレクトリに無関係な部分だけで一致を検査する.
     `^'（先頭）や`$'（末尾）で, 一致箇所を固定できる.  サブディレクト
     リを一致検査から除外するには, サブディレクトリを隠蔽する.

`% g REGEXP RET'
     ファイルの*内容*が正規表現REGEXPに一致するすべてのファイルに（`*'
     で）印を付ける（`dired-mark-files-containing-regexp'）.  このコマ
     ンドは`% m'に似ているが, ファイル名ではなくその内容で探す.

`C-_'
     印の追加や削除などのdiredバッファに対する変更をアンドゥする
     （`dired-undo'）



File: emacs-ja, Node: Operating on Files, Next: Shell Commands in Dired, Prev: Marks vs Flags, Up: Dired

ファイルの操作
==============

本節では, ファイルを操作する基本的なdiredコマンドについて説明します. 
コマンドはすべて大文字であり, 実行前に, 引数を読み取ったり確認を求める
ためにミニバッファを使います.  これらすべてのコマンドには, 操作対象と
なるファイルを指定する方法がいくつかあります.

   * コマンドに数引数Nを与えると, カレントファイルから始めて後続のN個
     のファイルを操作する.  （Nが負の場合には, 現在行から上の-N個のファ
     イルを操作する. ）

   * さもなければ, ファイルに`*'で印が付いていれば, コマンドは印が付い
     ているすべてのファイルを操作する.

   * さもなければ, コマンドはカレントファイルのみを操作する.

以下は, 上のように操作対象を選ぶファイル操作コマンドの一覧です.  （`!'
や`%'などの他のdiredコマンドも, 操作対象とするファイルを決定するのに上
の方法を用いる. ）

`C NEW RET'
     指定したファイルをコピーする（`dired-do-copy'）.  引数NEWはコピー
     先のディレクトリか, （1つのファイルをコピーする場合は）新しい名前.

     変数`dired-copy-preserve-time'が`nil'以外の場合には, このコマンド
     でコピーしたファイルの更新時間はもとのファイルと同じになる.

`D'
     指定したファイルを削除する（`dired-do-delete'）.  本節の他のコマ
     ンドと同様に, このコマンドは*印付け*されたファイル, あるいは, 後
     続のN個のファイルに作用する.  対照的に, `x'（`dired-expunge'）は,
     "フラグ"が付いたファイルを削除する.

`R NEW RET'
     指定したファイルの名前を変更する（`dired-do-rename'）.  引数NEWは
     移動先のディレクトリか, （1つのファイルの名前を変える場合には）新
     しい名前.

     diredは, 名前を変更したファイルに対応するバッファの訪問先のファイ
     ル名を自動的に変更するので, 新しい名前が反映される.

`H NEW RET'
     指定したファイルにハードリンクを張る（`dired-do-hardlink'）.  引
     数NEWはリンクを置くディレクトリか, （1つのリンクを張る場合には）
     リンクに与える名前.

`S NEW RET'
     指定したファイルにシンボリックリンクを張る（`dired-do-symlink'）. 
     引数NEWはリンクを置くディレクトリか, （1つのリンクを張る場合には）
     リンクに与える名前.

`M MODESPEC RET'
     指定したファイルのモード（いわゆるパーミッションビット）を変更す
     る（`dired-do-chmod'）.  このコマンドは`chmod'プログラムを使うの
     で, MODSPECには`chmod'が扱える任意の引数を指定できる.

`G NEWGROUP RET'
     指定したファイルのグループをNEWGROUPに変更する（`dired-do-chgrp'）.

`O NEWOWNER RET'
     指定したファイルの所有者をNEWOWNERに変更する（`dired-do-chown'）. 
     （ほとんどのシステムでは, スーパーユーザーだけがこれを実行でき
     る. ）

     変数`dired-chown-program'で, 実際の操作を行うために使用するプログ
     ラムの名前を指定する.  （システムによっては, `chown'を置く場所が
     異なる. ）

`P COMMAND RET'
     指定したファイルを印刷する（`dired-do-print'）.  ファイルを印刷す
     るコマンドを指定する必要があるが, （`lpr-buffer'が使うのと同じ）
     変数`lpr-command'と`lpr-switches'とから推定した適切なものがミニバッ
     ファに示される.

`Z'
     指定したファイルを圧縮する（`dired-do-compress'）.  ファイルがす
     でに圧縮済みと思われるときは展開する.

`L'
     指定したEmacs Lispのファイルをロードする（`dired-do-load'）.
     *Note Lisp Libraries::.

`B'
     指定したEmacs Lispのファイルをバイトコンパイルする
     （`dired-do-byte-compile'）.  *Note バイトコンパイル:
     (elisp-ja)Byte Compilation..。

`A REGEXP RET'
     指定したファイル群に対して正規表現REGEXPに一致するものを探す
     （`dired-do-search'）.

     このコマンドは`tags-search'の変形.  最初にみつかったところで探索
     は終る.  探索を再開してつぎに一致するものを探すには, `M-,'を使う.
     *Note Tags Search::.

`Q FROM RET TO RET'
     指定したファイル群のそれぞれについて, `query-replace-regexp'（問
     い合わせながら正規表現を置換する）を実行し, FROM（正規表現）に一
     致する部分をTOに置換する（`dired-do-query-replace'）.

     このコマンドは`tags-search'の変形.  置換のループを抜けたあとに, 
     探索を再開してさらに置換を行うには, `M-,'を使う.  *Note Tags
     Search::.

`+'は特別なファイル操作コマンドです（`dired-create-directory'）.  この
コマンドは, ディレクトリ名を読み取り, それが既存でなければ新たに作成し
ます.



File: emacs-ja, Node: Shell Commands in Dired, Next: Transforming File Names, Prev: Operating on Files, Up: Dired

diredでのシェルコマンド
=======================

diredコマンドの`!'（`dired-do-shell-command'）は, ミニバッファからシェ
ルコマンドを読み取り, 指定したファイルすべてについてそのシェルコマンド
を実行します.  diredコマンドの普通の方法で操作対象のファイルを指定でき
ます（*Note Operating on Files::）.  複数ファイルにシェルコマンドを適
用する方法は2通りあります.

   * シェルコマンド中に`*'を使うと, 指定したファイル名のリストで`*'を
     置き換えてコマンドを一度だけ実行する.  リスト内でファイルが現れる
     順番はdiredバッファに表示されている順.

     したがって, `! tar cf foo.tar * RET'は`tar'を実行し, 指定した一連
     のファイルを`foo.tar'というtarファイルにまとめる.

   * コマンド文字列に`*'が含まれていない場合には, コマンド文字列の最後
     にそれぞれのファイル名を付け加えて*各ファイルごと*にコマンドを1回
     ずつ実行する.

     たとえば, `! uudecode RET'は, 各ファイルに対して`uudecode'コマン
     ドを実行する.

各ファイルごとにコマンドを1回実行したいが, コマンドの最後ではなく途中
にファイル名を指定したい場合にはどうするのでしょう？` ' あるいは, もっ
と複雑にファイル名を指定したい場合にはどうするのでしょう？` ' それには
シェルのループを使います.  下の例では, 指定した各ファイルに対して
`uuencode'を実行しますが, その出力は対応する`.uu'というファイルに格納
します.

     for file in *; do uuencode $file $file >$file.uu; done

シェルコマンドの作業ディレクトリは, diredバッファのトップディレクトリ
です.

`!'コマンドは, 実行後に新たにできたファイルや変更されたファイルを表示
するためにdiredバッファを更新することはしません.  これはシェルコマンド
を実際には理解しておらず, シェルコマンドがどのファイルを変更するのかわ
からないからです.  diredバッファを更新するには`g'コマンドを使います
（*Note Dired Updating::）.



File: emacs-ja, Node: Transforming File Names, Next: Comparison in Dired, Prev: Shell Commands in Dired, Up: Dired

diredでのファイル名の変換
=========================

ここにあげるコマンドはファイル名を組織的に変更します.

`% u'
     選択したファイルの名前を大文字に変える（`dired-upcase'）.  古いファ
     イル名が`Foo'と`bar'だった場合, 新しいファイル名は`FOO'と`BAR'に
     なる.

`% l'
     選択したファイルの名前を小文字に変える（`dired-downcase'）.  古い
     ファイル名が`Foo'と`bar'だった場合, 新しいファイル名は`foo'と
     `bar'になる.

`% R FROM RET TO RET'
`% C FROM RET TO RET'
`% H FROM RET TO RET'
`% S FROM RET TO RET'
     これらの4つのコマンドは, それぞれ, ファイル名を変更する, コピーす
     る, ハードリンクを張る, シンボリックリンクを張る.  これらのコマン
     ドは, いずれも, 古いファイル名から正規表現の置換で新しいファイル
     名を決定する.

正規表現の置換を用いる4つのコマンドは, 実質的には, diredバッファにおい
て一連の選択したファイルの名前を探索して置換を行います.  これらは引数
を2つ読み取ります.  正規表現FROMと置換パターンTOです.

これらのコマンドは, 正規表現FROMに一致する各『古い』ファイル名の一致し
た部分をTOで置換します.  `replace-regexp'（*Note Regexp Replace::）の
ように, TOの中では`\&'や`\DIGIT'を用いて古いファイル名に一致したパター
ン全体やその一部を参照できます.  ファイル名の2箇所以上の部分に正規表現
が一致する場合には, 最初の一致部分が置換されます.

たとえば, `% R ^.*$ RET x-\& RET'は, 選択されたファイルの名前の先頭に
x-を付け加える形で名前を変えます.  逆に, 各ファイルの名前の先頭の`x-'
を取り去ることもできて, 1つの方法は, `% R ^x-\(.*\)$ RET \1 RET'です. 
あるいは, `% R ^x- RET RET'でもできます.  （ファイル名全体に一致するよ
うにするには`^'と`$'を使う. ）

通常, 置換処理ではファイル名のディレクトリ部分は考慮しません.  ディレ
クトリ内のファイルの名前だけを操作します.  数引数0を指定すると, 置換は
ディレクトリ名を含んだ絶対ファイル名に作用します.

一連のファイルを操作対象に選ぶときに, それらを操作するときに使うのと同
じREGEXP（正規表現）を使いたい場合があるでしょう.  これを行うには, `%
m REGEXP RET'でまず一連のファイルに印を付けてから, それらを操作するコ
マンドにも同じ正規表現を使います.  これを簡単に行えるように, `%'の付い
たコマンドは, `%'付きコマンドいずれかに最近指定した正規表現をデフォル
トで使います.



File: emacs-ja, Node: Comparison in Dired, Next: Subdirectories in Dired, Prev: Transforming File Names, Up: Dired

diredでのファイルの比較
=======================

diredには, 指定したファイルを`diff'で比較するコマンドが2つあります.

`='
     `diff'プログラム（`dired-diff'）を用いて, （ポイントがある箇所の）
     カレントファイルを（マークがある箇所の）他のファイルと比較する. 
     マークがある箇所のファイルが`diff'の第1引数で, ポイントがある箇所
     のファイルが第2引数になる.

`M-='
     カレントファイルとその最新のバックアップファイルとを比較する
     （`dired-backup-diff'）.  カレントファイルがバックアップファイル
     そのものであるときは, バックアップファイルのバックアップファイル
     との比較を行う.  このようにして, 任意の版のバックアップファイルと
     の比較を行える.

     バックアップファイルは`diff'の第1引数になる.



File: emacs-ja, Node: Subdirectories in Dired, Next: Subdirectory Motion, Prev: Comparison in Dired, Up: Dired

diredのサブディレクトリ
=======================

通常, diredバッファは1つのディレクトリだけを表示します.  しかし, その
サブディレクトリ群を一緒に表示させることもできます.

1つのdiredバッファ内に複数のディレクトリを表示させるもっとも簡単な方法
は, `ls'を実行するときにオプション`-lR'を指定することです.  （diredを
実行するときに数引数を指定すると, これらのオプションをミニバッファで指
定できる. ）これにより, すべてのレベルのすべてのサブディレクトリを表示
した再帰的なディレクトリ一覧を作れます.

しかし, 一般には, すべてのサブディレクトリでは多すぎます.  普通は, 特
定のサブディレクトリだけを含めたいでしょう.  それには, `i'コマンドを使
います.

`i'
     指定したサブディレクトリの内容をバッファの終りに追加する.

ディレクトリであるファイルを表す行で, `i'（`dired-maybe-insert-subdir'）
コマンドを使います.  指定したサブディレクトリの内容を同じdiredバッファ
に挿入し, その箇所へ移動します.  挿入されたサブディレクトリの内容は,
`ls -lR'の出力と同様に, diredバッファのトップレベルのディレクトリのあ
とに続きます.

すでにサブディレクトリの内容がバッファにある場合には, `i'コマンドはそ
の表示箇所に移動するだけです.

どちらの場合においても, `i'は移動するまえにEmacsのマークを設定するので,
`C-u C-SPC'でバッファ内のもとの箇所（そのサブディレクトリを表す行）へ
戻れます.

サブディレクトリの内容を更新するには, `l'（`dired-do-redisplay'）コマ
ンドを使います.  サブディレクトリを削除するには`k'を使います.  *Note
Dired Updating::.



File: emacs-ja, Node: Subdirectory Motion, Next: Hiding Subdirectories, Prev: Subdirectories in Dired, Up: Dired

サブディレクトリへの移動
========================

diredバッファにサブディレクトリが表示されている場合, コマンド`C-x ['と
`C-x ]'でディレクトリ単位に移動できます.

以下のコマンドは, 1つのdiredバッファ内でディレクトリ木構造を上下に移動
するコマンドです.  これらはすべて"ディレクトリのヘッダ行" （directory
header lines）, つまり, ディレクトリの内容を表示する部分の先頭にあるディ
レクトリ名を示す行に移動します.

`C-M-n'
     レベルに関係なくつぎのサブディレクトリのヘッダ行へ進む
     （`dired-next-subdir'）.

`C-M-p'
     レベルに関係なくまえのサブディレクトリのヘッダ行へ戻る
     （`dired-prev-subdir'）.

`C-M-u'
     親ディレクトリのディレクトリヘッダ行へ移動する（`dired-tree-up'）.

`C-M-d'
     ディレクトリ木構造を1つ降りて最初のサブディレクトリのヘッダ行へ移
     動する（`dired-tree-down'）.

`<'
     まえのディレクトリファイルの表示行へ戻る（`dired-prev-dirline'）. 
     これらの行は, 親ディレクトリにおいてファイルとしてディレクトリを
     表す行.

`>'
     つぎのディレクトリファイルの表示行へ進む（`dired-next-dirline'）.



File: emacs-ja, Node: Hiding Subdirectories, Next: Dired Updating, Prev: Subdirectory Motion, Up: Dired

サブディレクトリの隠蔽
======================

サブディレクトリの"隠蔽"（hide）とは, 選択的表示（*Note Selective
Display::）を用いてヘッダ行以外を見えなくすることです.

`$'
     ポイント位置にあるサブディレクトリを隠蔽, あるいは, 再表示して, 
     ポイントをつぎのサブディレクトリへ移動する（`dired-hide-subdir'）. 
     数引数は反復回数.

`M-$'
     diredバッファ中のすべてのサブディレクトリを隠蔽し, サブディレクト
     リのヘッダ行だけを残す（`dired-hide-all'）.  あるいは, 隠蔽されて
     いるサブディレクトリがある場合には, すべてのサブディレクトリを再
     表示する.  このコマンドを使うと, 深いディレクトリ木構造の概形を調
     べたり, 遠く離れたサブディレクトリへ素早く移動できる.

通常のdiredコマンドは, 隠蔽されたサブディレクトリ内のファイルについて
まったく考慮しません.  たとえば, 印を付けたファイルに作用するコマンド
は, 隠蔽されたディレクトリ内に印を付けたファイルがあったとしてもそれら
を無視します.  したがって, サブディレクトリを一時的に隠蔽すれば, 印を
消さなくてもサブディレクトリを操作対象から外せます.

サブディレクトリを隠蔽するコマンドはトグルとして働きます.  つまり, 表
示されていれば隠蔽し, 隠蔽されていれば表示します.



File: emacs-ja, Node: Dired Updating, Next: Dired and Find, Prev: Hiding Subdirectories, Up: Dired

diredバッファの更新
===================

本節では, （diredとは無関係に）外部でのディレクトリやファイルの変更を
diredバッファに反映させるコマンド, および, diredバッファの一部を削除す
るコマンドを説明します.

`g'
     diredバッファの全内容を更新する（`revert-buffer'）.

`l'
     指定したファイルを更新する（`dired-do-redisplay'）.

`k'
     指定したファイルの*表示行*を削除する.  ファイルではなく, 単に表示
     行だけを消す（`dired-do-kill-lines'）.

`s'
     アルファベット順の表示と日付／時間順の表示を切り替える
     （`dired-sort-toggle-or-edit'）.

`C-u s SWITCHES RET'
     オプションSWITCHESを`dired-listing-switches'として用いてdiredバッ
     ファを更新する.

`g'（`revert-buffer'）コマンドを実行すると, 表示されているファイルやディ
レクトリの変更に基づいてdiredバッファを更新します.  このコマンドは消さ
れたファイルに対するものを除いてすべての印やフラグを保存します.  隠蔽
されたサブディレクトリも更新されますが, 隠蔽されたままです.

いくつかのファイルだけを更新する場合には, `l'（`dired-do-redisplay'）
と打ちます.  このコマンドは, 後続のN個のファイル, 印を付けたファイルが
あればそれらのファイル, カレントファイルのいずれかに作用します.  それ
らを更新するとは, それらのファイルの現状をファイルシステムから取得し, 
それを正しく反映するようにバッファを更新します.

`l'をサブディレクトリのヘッダ行で実行すると, 対応するサブディレクトリ
の内容を更新します.

指定した*ファイルの表示行*を削除する, つまり, ファイルそのものではなく
行だけを削除するには`k'（`dired-do-kill-lines'）と打ちます.  数引数Nを
指定すると, このコマンドは, 後続のN個のファイルに作用します.  さもなけ
れば, 印を付けたファイルに作用します.

削除するファイルの表示行がディレクトリだった場合には, そのディレクトリ
の内容もバッファから削除されます.  サブディレクトリのヘッダ行で`C-u k'
と打っても, diredバッファからサブディレクトリの内容を削除できます.

`g'コマンドは, このようにして削除した表示行を画面に呼び戻すことができ
ますが, サブディレクトリに関してはできません.  各サブディレクトリを再
度挿入するには`i'を使う必要があります.

diredバッファ内のファイルは, 通常, ファイル名のアルファベット順に並ん
でいます.  diredは日付／時間順に並べ替えることもできます.  diredコマン
ド`s'（`dired-sort-toggle-or-edit'）は, これら2つのソート方法を切り替
えます.  diredバッファのモード行には, アルファベット順と日付／時間順の
どちらで現在表示しているかが示されます.

`C-u s SWITCHES RET'で, 変数`dired-listing-switches'に新しい値を設定で
きます.



File: emacs-ja, Node: Dired and Find, Next: Calendar/Diary, Prev: Dired Updating, Up: Dired

diredと`find'プログラム
=======================

`find'プログラムを使ってファイルを選べば, diredバッファ上に表示する一
連のファイルをもっと柔軟に選択できます.

ワイルドカードに一致する名前のファイルを探索するには`M-x
find-name-dired'を使います.  このコマンドは, 2つの引数DIRECTORYと
PATTERNを読み取り, DIRECTORYにあるすべてのファイル, あるいは, そのサブ
ディレクトリ下にあるPATTERNに一致する名前のファイルを選択します.

このようにして選択されたファイルはdiredバッファに表示され, このバッファ
ではもとのdiredコマンドを使えます.

ファイル名ではなくファイルの内容で調べたい場合には, `M-x
find-grep-dired'を使います.  このコマンドはミニバッファから2つの引数
DIRECTORYとREGEXPを読み取ります.  DIRECTORYにあるすべてのファイル, あ
るいは, REGEXPに一致するものを含む一連のサブディレクトリを選択します. 
このコマンドは, プログラム`find'と`grep'を実行して動作します.  *Note
Compilation::の`M-x grep-find'も参照してください.  Emacsの正規表現では
なく`grep'の正規表現を書くことを忘れないでください.

このような一連のコマンドの中でもっとも一般的なコマンドは`M-x
find-dired'で, `find'が検査に用いる任意の条件を指定できます.  このコマ
ンドはミニバッファから2つの引数DIRECTORYとFIND-ARGSを読み取ります.  検
査すべき条件を指示するFIND-ARGSを渡して, DIRECTORYにおいて`find'を実行
します.  このコマンドを使うには, `find'の使い方を知っている必要があり
ます.

これらのコマンドが出力する表示形式は変数`find-ls-option'で制御されます. 
デフォルトは, `ls'に使うオプションとして`-ld'を指定します.  出力形式が
壊れて見える場合には, この変数の値を変更する必要があるかもしれません.


File: emacs-ja, Node: Calendar/Diary, Next: Gnus, Prev: Dired, Up: Top

暦と日誌
********

Emacsには, 過去や将来の予定を記録する日誌の機能を持つカレンダー機能が
あります.  カレンダーに入るには`M-x calendar'と打ちます.  すると, 今月
を中央月として3か月分のカレンダーが表示され, ポイントは今日の日付に置
かれます.  `C-u M-x calendar'のように数引数を指定すると, 3か月分のカレ
ンダーの中央に表示する月と年を聞いてきます.  カレンダーは専用のバッファ
を使い, そのメジャーモードはカレンダー（calendar）モードです.

カレンダー内で`Mouse-2'をクリックすると, その日付で使用できる機能のメ
ニューが表示されます.  `C-Mouse-3'をクリックすると, 特定の日付に関わら
ずに使える機能のメニューが表示されます.  カレンダーから抜けるには`q'と
打ちます.  カレンダーと日誌のカスタマイズに関しては, *Note カレンダー
と日誌のカスタマイズ: (elisp-ja)Calendar.。

* Menu:

* Calendar Motion::     Moving through the calendar; selecting a date.
* Scroll Calendar::     Bringing earlier or later months onto the screen.
* Counting Days::       How many days are there between two dates?
* General Calendar::    Exiting or recomputing the calendar.
* LaTeX Calendar::      Print a calendar using LaTeX.
* Holidays::            Displaying dates of holidays.
* Sunrise/Sunset::      Displaying local times of sunrise and sunset.
* Lunar Phases::        Displaying phases of the moon.
* Other Calendars::     Converting dates to other calendar systems.
* Diary::               Displaying events from your diary.
* Appointments::	Reminders when it's time to do something.
* Daylight Savings::    How to specify when daylight savings time is active.



File: emacs-ja, Node: Calendar Motion, Next: Scroll Calendar, Prev: Calendar/Diary, Up: Calendar/Diary

カレンダー内の移動
==================

カレンダー（calendar）モードでは, 日, 週, 月, 年といった論理的単位で移
動します.  始めに表示された3か月の外に移動すると, カレンダーは自動的に
『スクロール』して指定された日付の箇所が表示されるようにします.  ある
日付へ移動すると, 祝祭日の名称や日誌記録を見たり, その日付を別の暦に変
換したりできます.  カレンダーを単にスクロールすれば, 大きな時間単位で
の移動に便利です.

* Menu:

* Calendar Unit Motion::      Moving by days, weeks, months, and years.
* Move to Beginning or End::  Moving to start/end of weeks, months, and years.
* Specified Dates::           Moving to the current date or another
                                specific date.



File: emacs-ja, Node: Calendar Unit Motion, Next: Move to Beginning or End, Prev: Calendar Motion, Up: Calendar Motion

日／週／月／年単位の移動
------------------------

カレンダー内を移動するコマンドはテキスト内を移動するコマンドに対比でき
ます.  日, 週, 月, 年を単位として前後に移動できます.

`C-f'
     1日後にポイントを進める（`calendar-forward-day'）.
`C-b'
     1日前にポイントを戻す（`calendar-backward-day'）.
`C-n'
     1週間後にポイントを進める（`calendar-forward-week'）.
`C-p'
     1週間前にポイントを戻す（`calendar-backward-week'）.
`M-}'
     1か月後にポイントを進める（`calendar-forward-month'）.
`M-{'
     1か月前にポイントを戻す（`calendar-backward-month'）.
`C-x ]'
     1年後にポイントを進める（`calendar-forward-year'）.
`C-x ['
     1年前にポイントを戻す（`calendar-backward-year'）.

日や週を単位とした移動は, Emacsの通常の文字単位や行単位の移動の類推で
す.  `C-n'は通常はつぎの行の同じ桁に移動しますが, カレンダー（calendar）
モードではつぎの週の同じ曜日に移動します.  また, `C-p'はまえの週の同じ
曜日に移動します.

矢印キーは他のモードと同様に, それぞれ, `C-f', `C-b', `C-n', `C-p'に等
価です.

月単位や年単位の移動コマンドは週単位の移動と同じように働きますが, 
より大きな単位での移動です. 
月単位の移動コマンド`M-}'と`M-{'は, それぞれ, 
翌月, 前月に移動します. 
年単位の移動コマンド`C-x ]'と`C-x ['は, 
それぞれ, 1年後, 1年前に移動します. 

これらのコマンドを簡単に覚えるには, それぞれ, 月と年を段落とページに対
比させることです.  しかし, コマンド自体は同じではありません.  Emacsの
通常の段落移動コマンドは段落の先頭か末尾に移動しますが, 月単位や年単位
の移動コマンドは1か月分や1年分で移動しますから, 月や年の区切りを普通は
飛び越します.

これらのコマンドはすべて数引数を反復回数として扱います.  簡単のために, 
カレンダー（calendar）モードではMeta修飾なしでも数字とマイナス記号で数
引数を指定できます.  たとえば, `100 C-f'は100日後の日付にポイントを進
めます.



File: emacs-ja, Node: Move to Beginning or End, Next: Specified Dates, Prev: Calendar Unit Motion, Up: Calendar Motion

週／月／年の始めと終り
----------------------

週（または, 月, 年）というのは, 単に1日1日が集まったものではありません. 
週（月, 年）は特定の日で始まると考えます.  そこで, カレンダー
（calendar）モードには, 週, 月, 年の始めや終りに移動するコマンドがあり
ます.

`C-a'
     週の始めにポイントを移動する（`calendar-beginning-of-week'）.
`C-e'
     週の終りにポイントを移動する（`calendar-end-of-week'）.
`M-a'
     月の始めにポイントを移動する（`calendar-beginning-of-month'）.
`M-e'
     月の終りにポイントを移動する（`calendar-end-of-month'）.
`M-<'
     年の始めにポイントを移動する（`calendar-beginning-of-year'）.
`M->'
     年の終りにポイントを移動する（`calendar-end-of-year'）.

これらのコマンドは数引数を反復回数と扱い, 何週, 何か月, 何年だけ前後に
移動するのかを指定します.

デフォルトでは, 週は日曜から始まります.  月曜から始めるには, 変数
`calendar-week-start-day'に1を設定します. (1) (*Note Move to Beginning
or End-Footnotes::)


File: emacs-ja  Node: Move to Beginning or End-Footnotes, Up: Move to Beginning or End

(1) 【訳注】この変数はどの曜日を週の始めにするかを示しており, 5を設定
すると金曜日から始まる.



File: emacs-ja, Node: Specified Dates, Next: Scroll Calendar, Prev: Move to Beginning or End, Up: Calendar Motion

特定の日付
----------

カレンダー（calendar）モードには, さまざまな方法で指定した特定の日付へ
移動するコマンドがあります.

`g d'
     指定した日付へポイントを移動する（`calendar-goto-date'）.
`o'
     指定した月をカレンダーの中央月にする（`calendar-other-month'）.
`.'
     ポイントを今日の日付に移動する（`calendar-goto-today'）.

`g d'（`calendar-goto-date'）は, 年, 月, 日を読み取ってその日付に移動
します.  カレンダーには西暦紀元がすべて含まれているため, 西暦年を略さ
ずに打つ必要があります.  つまり, `90'ではなく`1990'です.

`o'（`calendar-other-month'）は, 月と年を読み取って, その月を中央月と
して3か月分のカレンダーを表示します.

`.'（`calendar-goto-today'）で, 今日の日付に戻ることができます.



File: emacs-ja, Node: Scroll Calendar, Next: Counting Days, Prev: Calendar Motion, Up: Calendar/Diary

カレンダーのスクロール
======================

見えている範囲を越えて移動するとカレンダーは自動的にスクロールします. 
手動でスクロールすることもできます.  カレンダーを表示しているウィンド
ウでは, 長い長い紙に月を印刷したものの一部が見えているのだと考えてくだ
さい.  カレンダーをスクロールするとは, 新しい月が見えるようにこの紙を
動かすことに相当します.

`C-x <'
     カレンダーを1か月後にスクロールする（`scroll-calendar-left'）.
`C-x >'
     カレンダーを1か月前にスクロールする（`scroll-calendar-right'）.
`C-v'
`NEXT'
     カレンダーを3か月後にスクロールする
     （`scroll-calendar-left-three-months'）.
`M-v'
`PRIOR'
     カレンダーを3か月前にスクロールする
     （`scroll-calendar-right-three-months'）.

カレンダーをスクロールするもっとも基本的なコマンドは, 一度に1か月分ス
クロールします.  つまり, コマンドの実行前後の表示を比べると, 2か月分重
複しています.  `C-x <'はカレンダーを1か月分左にスクロールします.  つま
り, 時間的に1か月後を表示します.  `C-x >'コマンドはカレンダーを右にス
クロールし, 時間的に1か月前に戻します.

コマンド`C-v'と`M-v'は, カレンダーを『1画面分』, つまり, 3か月分スクロー
ルします.  これは, 通常のモードでのこれらのコマンドと意味的に同じになっ
ています.  `C-v'は将来の日付を見えるようにし, `M-v'は過去の日付を見え
るようにします.  これらのコマンドは数引数を反復回数として扱います.  た
とえば, `C-u'は後続のコマンドを4回反復するので, `C-u C-v'と打てば1年分
先へカレンダーをスクロールし, `C-u M-v'と打てば1年分前へカレンダーをス
クロールします.

ファンクションキーNEXTとPRIORは, 他のモードと同様に, それぞれ, `C-v'と
`M-v'に等価です.



File: emacs-ja, Node: Counting Days, Next: General Calendar, Prev: Scroll Calendar, Up: Calendar/Diary

日数計算
========

`M-='
     カレントリージョン内の日数を表示する
     （`calendar-count-days-region'）.

リージョン内の日数を調べるには, `M-='（`calendar-count-days-region'）
と打ちます.  このコマンドで表示される日数は, マークとポイントで指定し
た両日を*含んだ*日数です.



File: emacs-ja, Node: General Calendar, Next: LaTeX Calendar, Prev: Counting Days, Up: Calendar/Diary

その他のカレンダーコマンド
==========================

`p d'
     通年日（1年のうちの何日目の日か）を表示する
     （`calendar-print-day-of-year'）.
`C-c C-l'
     カレンダーを表示しているウィンドウを再表示する（`redraw-calendar'）.
`SPC'
     別のウィンドウをスクロールする（`scroll-other-window'）.
`q'
     カレンダーから抜ける（`exit-calendar'）.

年始から数えた日数, あるいは, 1年の残り日数を表示するには, `p d'
（`calendar-print-day-of-year'）コマンドを打ちます.  すると, 上の2つの
日数をエコー領域に表示します.  年始からの日数には指定した日が含まれま
す.  また, 残りの日数には指定した日は含まれません.

カレンダーのウィンドウのテキストが壊れた場合には, `C-c C-l'
（`redraw-calendar'）と打って再表示させます.  （カレンダー（calendar）
モード以外の編集用コマンドを使った場合に限り, 表示がおかしくなる. ）

カレンダー（calendar）モードでは, SPC（`scroll-other-window'）を使って
別のウィンドウをスクロールできます.  このコマンドは, 別のウィンドウに
祝祭日や日誌記録の一覧を表示しているときに便利です.

カレンダーから抜けるには, `q'（`exit-calendar'）と打ちます.  このコマ
ンドはカレンダーに関係したすべてのバッファを閉じ, 別のバッファを選択し
ます.  （カレンダー関連のウィンドウ専用のフレームであった場合には, カ
レンダーを終了するとそのフレームをアイコン化する. ）



File: emacs-ja, Node: LaTeX Calendar, Next: Holidays, Prev: General Calendar, Up: Calendar/Diary

LaTeXカレンダー
===============

カレンダーLaTeXコマンドは, カレンダーを印刷するLaTeXコードのバッファに
作成します.  使用するコマンドに依存して, ポイント位置の日, 週, 月, 年
のいずれかを含んだカレンダーを印刷できます.

`t m'
     1か月分のカレンダーを生成する（`cal-tex-cursor-month'）.
`t M'
     横づかいで1か月分のカレンダーを生成する
     （`cal-tex-cursor-month-landscape'）.
`t d'
     1日分のカレンダーを生成する（`cal-tex-cursor-day'）.
`t w 1'
     1週間分の1ページのカレンダーを生成する（`cal-tex-cursor-week'）.
`t w 2'
     1週間分の2ページのカレンダーを生成する（`cal-tex-cursor-week2'）.
`t w 3'
     1週間分のISOスタイルのカレンダーを生成する
     （`cal-tex-cursor-week-iso'）.
`t w 4'
     月曜から始まる1週間分のカレンダーを生成する
     （`cal-tex-cursor-week-monday'）.
`t f w'
     ファイロファックス（システム手帳）スタイルの見開き2週間分のカレン
     ダーを生成する（`cal-tex-cursor-filofax-2week'）.
`t f W'
     ファイロファックス（システム手帳）スタイルの見開き1週間分のカレン
     ダーを生成する（`cal-tex-cursor-filofax-week'）.
`t y'
     1年分のカレンダーを生成する（`cal-tex-cursor-year'）.
`t Y'
     横づかいで1年分のカレンダーを生成する
     （`cal-tex-cursor-year-landscape'）.
`t f y'
     ファイロファックス（システム手帳）スタイルの1年分のカレンダーを生
     成する（`cal-tex-cursor-filofax-year'）.

これらのコマンドのいくつかは, 横づかい（つまり, 『ランドスケープ』）の
カレンダーを印刷し, 横長になります.  いくつかのコマンドでは, ファイロ
ファックス（システム手帳）サイズ（3.75インチ×6.75インチ, 約95.25mm×
171.45mm）を使います.  これらのコマンドはすべて, 印刷する日数, 週数, 
月数, 年数を数引数で指定できます（つねに選択した日から始まる）.

変数`cal-tex-holidays'が`nil'以外（デフォルト）ならば, 印刷されるカレ
ンダーには`calendar-holidays'の祝祭日が表示されます.  変数
`cal-tex-diary'が`nil'以外（デフォルトは`nil'）ならば, 日誌記録も一緒
に印刷されます（週間および月間カレンダーの場合だけ）.



File: emacs-ja, Node: Holidays, Next: Sunrise/Sunset, Prev: LaTeX Calendar, Up: Calendar/Diary

祝祭日
======

Emacsのカレンダーはすべての祝祭日を把握しており, それらをカレンダーに
表示できます.

`h'
     選択された日付の祝祭日を表示する（`calendar-cursor-holidays'）.
`Mouse-2 Holidays'
     マウスでクリックした日付の祝祭日を表示する.
`x'
     カレンダーウィンドウの祝祭日に印を付ける
     （`mark-calendar-holidays'）.
`u'
     カレンダーウィンドウの印を消す（`calendar-unmark'）.
`a'
     表示中の3か月分のカレンダーのすべての祝祭日を別のウィンドウに表示
     する（`list-calendar-holidays'）.
`M-x holidays'
     今日を中心とした3か月間のすべての祝祭日を別のウィンドウに表示する.
`M-x list-holidays'
     指定した範囲の年の祝祭日を別のウィンドウに表示する.

カレンダー上のある日付が祝祭日かどうかを知るには, その日付にポイントを
動かし`h'コマンドを使います.  あるいは, その日付を`Mouse-2'でクリック
し, 立ち上がったメニューから`Holidays'を選択します.  いずれの方法でも, 
その日付に関する祝祭日情報が, エコー領域に収まればエコー領域に, あるい
は, 別のウィンドウに表示されます.

カレンダーに表示されている期間内にどれだけの祝祭日があるかを知るには,
`x'コマンドを使います.  祝祭日である日を異なるフェイスで（複数のフェイ
スを使えなければ, 日付のあとに`*'を付けて）表示します.  このコマンドは, 
画面に見えている期間だけでなく, スクロールすると見えてくる期間にも適用
されます.  印を消してもとの状態に戻るには`u'コマンドを使いますが, 日誌
の印も同時に消えます.  （*Note Diary::）.

より詳しい情報を得るには, `a'コマンドを使います.  これは, 現在の3か月
間に含まれるすべての祝祭日の一覧を別のバッファに表示します.  カレンダー
のウィンドウでSPCを使うと, その一覧をスクロールできます.

コマンド`M-x holidays'は, 今月を中央月として前後1か月に含まれる祝祭日
の一覧を表示します.  カレンダーウィンドウがなくてもこのコマンドを使え
ます.  別の月を中央月とした祝祭日の一覧が必要な場合は, `C-u M-x
holidays'を使います.  （中央月の）月と年を聞いてきます.

Emacsが知っている祝祭日は, アメリカ合衆国の祝祭日, キリスト教の祝祭日, 
ユダヤ教の祝祭日, イスラム教の祝祭日, 夏至, 冬至, 春分, 秋分です.

コマンド`M-x list-holidays'は, 指定した数年間の祝祭日の一覧を表示しま
す.  始めの年と終りの年を聞いてくるので, すべての祝祭日, ある特定の種
類の祝祭日を選べます.  カレンダーウィンドウがなくてもこのコマンドを使
えます.

Emacsが祝祭日を決定するために用いる暦は, 歴史的な事実に基づくものでは
なく, *現在用いている*ものです.  たとえば, 歴史的には夏時間 (1) (*Note
Holidays-Footnotes::) （daylight savings time）を始める時期や施行する
かどうかは, 年ごとにばらばらでした.  現在の合衆国の法律では4月の最初の
日曜から始めると定めています.  合衆国の夏時間を適用するかどうかをEmacs 
は現在の定義に基づいて決定しますので, 昔の年代については誤りである場合
もあります.


File: emacs-ja  Node: Holidays-Footnotes, Up: Holidays

(1) 【訳注】主に高緯度地域で夏期に時計を進める習慣.  日本でも戦後すぐ
に一度使われた.  現在, 省エネルギーなどを名目に再導入が検討されている
ようだが….



File: emacs-ja, Node: Sunrise/Sunset, Next: Lunar Phases, Prev: Holidays, Up: Calendar/Diary

日出入時刻
==========

カレンダーの特別なコマンドで, 任意の日付の日出入時刻を2分以内の精度で
調べられます.

`S'
     選択した日付の日出入時刻を表示する（`calendar-sunrise-sunset'）.
`Mouse-2 Sunrise/Sunset'
     クリックした日付の日出入時刻を表示する.
`M-x sunrise-sunset'
     今日の日出入時刻を表示する.
`C-u M-x sunrise-sunset'
     指定した日付の日出入時刻を表示する

カレンダー内で*地方時*（local times）で日出入時刻を表示するには, 目的
の日付にポイントを移動してから`S'と打ちます.  あるいは, 目的の日付を
`Mouse-2'でクリックするとメニューが立ち上がるのでその中から
`Sunrise/Sunset'を選びます.  カレンダーの外からでも, 今日や指定した日
付の日出入時刻を`M-x sunrise-sunset'コマンドで調べられます.  今日以外
の日付を指定するには, `C-u M-x sunrise-sunset'コマンドを使います.  す
ると, 年月日を聞いてきます.

`C-u C-u M-x sunrise-sunset'で, 任意の場所の任意の日付の日出入時刻を表
示できます.  経度, 緯度, 協定世界時 (1) (*Note
Sunrise/Sunset-Footnotes::) からの分単位のずれ, 日付の指定を聞いてきま
す.  すると, その場所でのその日付の日出入時刻が表示されます.

日出入時刻は, 地球上の場所に依存しますので, これらのコマンドを使うまえ
にEmacsに現在いる場所の緯度／経度と土地の名前を教えなければなりません. 
これにはつぎのようにします.

     (setq calendar-latitude 40.1)
     (setq calendar-longitude -88.2)
     (setq calendar-location-name "Urbana, IL")

変数`calendar-latitude'と`calendar-longitude'の値には, 小数点以下1桁ま
で指定します.

タイムゾーンは, 地方時で表した日出入時刻に影響します.  通常, Emacsはオ
ペレーティングシステムからタイムゾーンを取得しますが, それがまちがって
いる場合（あるいは, オペレーティングシステムがその情報を与えない場合）
には, 自分で設定する必要があります.  つぎは設定例です.

     (setq calendar-time-zone -360)
     (setq calendar-standard-time-zone-name "CST")
     (setq calendar-daylight-time-zone-name "CDT")

`calendar-time-zone'の値は, 協定世界時（グリニッジ標準時）と地方標準時
との差を分単位で表したものです.  `calendar-standard-time-zone-name'と
`calendar-daylight-time-zone-name'は, 現在いる場所のタイムゾーンの省略
名称です.  Emacsは*夏時間を補正して*日出入時刻を表示します.  夏時間を
どのように決定するかは, *Note Daylight Savings::.

ユーザーとしては, 個人の`.emacs'ファイルでカレンダーの位置関連の変数に
普段いる場所の値を設定すると便利でしょう.  あるいは, Emacsをマシンにイ
ンストールするときに, そのマシンの大部分のユーザー用に典型的な場所に関
する情報を`default.el'ファイルに設定してもかまいません.  *Note Init
File::.


