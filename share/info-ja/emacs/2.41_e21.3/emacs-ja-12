Info file: emacs-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs-ja: (emacs-ja).	            Emacs21.3日本語マニュアル.
END-INFO-DIR-ENTRY








File: emacs-ja, Node: Dired Updating, Next: Dired and Find, Prev: Hiding Subdirectories, Up: Dired

diredバッファの更新
===================

本節では、（diredとは無関係に）外部でのディレクトリやファイルの変更を
diredバッファに反映させるコマンド、および、diredバッファの一部を削除す
るコマンドを説明します。

`g'
     diredバッファの全内容を更新する（`revert-buffer'）。

`l'
     指定したファイルを更新する（`dired-do-redisplay'）。

`k'
     指定したファイルの*表示行*を削除する。ファイルではなく、単に表示行
     だけを消す（`dired-do-kill-lines'）。

`s'
     アルファベット順の表示と日付／時間順の表示を切り替える
     （`dired-sort-toggle-or-edit'）。

`C-u s SWITCHES RET'
     オプションSWITCHESを`dired-listing-switches'として用いてdiredバッ
     ファを更新する。

`g'（`revert-buffer'）コマンドを実行すると、表示されているファイルやディ
レクトリの変更に基づいてdiredバッファを更新します。このコマンドは消され
たファイルに対するものを除いてすべての印やフラグを保存します。隠蔽され
たサブディレクトリも更新されますが、隠蔽されたままです。

いくつかのファイルだけを更新する場合には、`l'（`dired-do-redisplay'）と
打ちます。このコマンドは、後続のN個のファイル、印を付けたファイルがあれ
ばそれらのファイル、カレントファイルのいずれかに作用します。それらを更
新するとは、それらのファイルの現状をファイルシステムから取得し、それを
正しく反映するようにバッファを更新します。

`l'をサブディレクトリのヘッダ行で実行すると、対応するサブディレクトリの
内容を更新します。

指定した*ファイルの表示行*を削除する、つまり、ファイルそのものではなく
行だけを削除するには`k'（`dired-do-kill-lines'）と打ちます。数引数Nを指
定すると、このコマンドは、後続のN個のファイルに作用します。さもなければ、
印を付けたファイルに作用します。

削除するファイルの表示行がディレクトリだった場合には、そのディレクトリ
の内容もバッファから削除されます。サブディレクトリのヘッダ行で`C-u k'と
打っても、diredバッファからサブディレクトリの内容を削除できます。

`g'コマンドは、このようにして削除した表示行を画面に呼び戻すことができま
すが、サブディレクトリに関してはできません。各サブディレクトリを再度挿
入するには`i'を使う必要があります。

diredバッファ内のファイルは、通常、ファイル名のアルファベット順に並んで
います。diredは日付／時間順に並べ替えることもできます。diredコマンド
`s'（`dired-sort-toggle-or-edit'）は、これら2つのソート方法を切り替えま
す。diredバッファのモード行には、アルファベット順と日付／時間順のどちら
で現在表示しているかが示されます。

`C-u s SWITCHES RET'で、変数`dired-listing-switches'に新しい値を設定で
きます。



File: emacs-ja, Node: Dired and Find, Prev: Dired Updating, Up: Dired

diredと`find'プログラム
=======================

`find'プログラムを使ってファイルを選べば、diredバッファ上に表示する一連
のファイルをもっと柔軟に選択できます。

ワイルドカードに一致する名前のファイルを探索するには`M-x
find-name-dired'を使います。このコマンドは、2つの引数DIRECTORYと
PATTERNを読み取り、DIRECTORYにあるすべてのファイル、あるいは、そのサブ
ディレクトリ下にあるPATTERNに一致する名前のファイルを選択します。

このようにして選択されたファイルはdiredバッファに表示され、このバッファ
ではもとのdiredコマンドを使えます。

ファイル名ではなくファイルの内容で調べたい場合には、`M-x
find-grep-dired'を使います。このコマンドはミニバッファから2つの引数
DIRECTORYとREGEXPを読み取ります。DIRECTORYにあるすべてのファイル、ある
いは、REGEXPに一致するものを含む一連のサブディレクトリを選択します。こ
のコマンドは、プログラム`find'と`grep'を実行して動作します。*Note
Compilation::の`M-x grep-find'も参照してください。Emacsの正規表現ではな
く`grep'の正規表現を書くことを忘れないでください。

このような一連のコマンドの中でもっとも一般的なコマンドは`M-x
find-dired'で、`find'が検査に用いる任意の条件を指定できます。このコマン
ドはミニバッファから2つの引数DIRECTORYとFIND-ARGSを読み取ります。検査す
べき条件を指示するFIND-ARGSを渡して、DIRECTORYにおいて`find'を実行しま
す。このコマンドを使うには、`find'の使い方を知っている必要があります。

これらのコマンドが出力する表示形式は変数`find-ls-option'で制御されます。
デフォルトは、`ls'に使うオプションとして`-ld'を指定します。出力形式が壊
れて見える場合には、この変数の値を変更する必要があるかもしれません。


File: emacs-ja, Node: Calendar/Diary, Next: Gnus, Prev: Dired, Up: Top

暦と日誌
********

Emacsには、過去や将来の予定を記録する日誌の機能を持つカレンダー機能があ
ります。カレンダーに入るには`M-x calendar'と打ちます。すると、今月を中
央月として3か月分のカレンダーが表示され、ポイントは今日の日付に置かれま
す。`C-u M-x calendar'のように数引数を指定すると、3か月分のカレンダーの
中央に表示する月と年を聞いてきます。カレンダーは専用のバッファを使い、
そのメジャーモードはカレンダー（calendar）モードです。

カレンダー内で`Mouse-2'をクリックすると、その日付で使用できる機能のメ
ニューが表示されます。`C-Mouse-3'をクリックすると、特定の日付に関わらず
に使える機能のメニューが表示されます。カレンダーから抜けるには`q'と打ち
ます。カレンダーと日誌のカスタマイズに関しては、*Note カレンダーと日誌
のカスタマイズ: (elisp)Calendar。

* Menu:

* Calendar Motion::     Moving through the calendar; selecting a date.
* Scroll Calendar::     Bringing earlier or later months onto the screen.
* Counting Days::       How many days are there between two dates?
* General Calendar::    Exiting or recomputing the calendar.
* LaTeX Calendar::      Print a calendar using LaTeX.
* Holidays::            Displaying dates of holidays.
* Sunrise/Sunset::      Displaying local times of sunrise and sunset.
* Lunar Phases::        Displaying phases of the moon.
* Other Calendars::     Converting dates to other calendar systems.
* Diary::               Displaying events from your diary.
* Appointments::	Reminders when it's time to do something.
* Daylight Savings::    How to specify when daylight savings time is active.



File: emacs-ja, Node: Calendar Motion, Next: Scroll Calendar, Prev: Calendar/Diary, Up: Calendar/Diary

カレンダー内の移動
==================

カレンダー（calendar）モードでは、日、週、月、年といった論理的単位で移
動します。始めに表示された3か月の外に移動すると、カレンダーは自動的に
『スクロール』して指定された日付の箇所が表示されるようにします。ある日
付へ移動すると、祝祭日の名称や日誌記録を見たり、その日付を別の暦に変換
したりできます。カレンダーを単にスクロールすれば、大きな時間単位での移
動に便利です。

* Menu:

* Calendar Unit Motion::      Moving by days, weeks, months, and years.
* Move to Beginning or End::  Moving to start/end of weeks, months, and years.
* Specified Dates::           Moving to the current date or another
                                specific date.



File: emacs-ja, Node: Calendar Unit Motion, Next: Move to Beginning or End, Prev: Calendar Motion, Up: Calendar Motion

日／週／月／年単位の移動
------------------------

カレンダー内を移動するコマンドはテキスト内を移動するコマンドに対比でき
ます。日、週、月、年を単位として前後に移動できます。

`C-f'
     1日後にポイントを進める（`calendar-forward-day'）。
`C-b'
     1日前にポイントを戻す（`calendar-backward-day'）。
`C-n'
     1週間後にポイントを進める（`calendar-forward-week'）。
`C-p'
     1週間前にポイントを戻す（`calendar-backward-week'）。
`M-}'
     1か月後にポイントを進める（`calendar-forward-month'）。
`M-{'
     1か月前にポイントを戻す（`calendar-backward-month'）。
`C-x ]'
     1年後にポイントを進める（`calendar-forward-year'）。
`C-x ['
     1年前にポイントを戻す（`calendar-backward-year'）。

日や週を単位とした移動は、Emacsの通常の文字単位や行単位の移動の類推です。
`C-n'は通常はつぎの行の同じ桁に移動しますが、カレンダー（calendar）モー
ドではつぎの週の同じ曜日に移動します。また、`C-p'はまえの週の同じ曜日に
移動します。

矢印キーは他のモードと同様に、それぞれ、
`C-f'、`C-b'、`C-n'、`C-p'に等価です。

月単位や年単位の移動コマンドは週単位の移動と同じように働きますが、
より大きな単位での移動です。
月単位の移動コマンド`M-}'と`M-{'は、それぞれ、
翌月、前月に移動します。
年単位の移動コマンド`C-x ]'と`C-x ['は、
それぞれ、1年後、1年前に移動します。

これらのコマンドを簡単に覚えるには、それぞれ、月と年を段落とページに対
比させることです。しかし、コマンド自体は同じではありません。Emacsの通常
の段落移動コマンドは段落の先頭か末尾に移動しますが、月単位や年単位の移
動コマンドは1か月分や1年分で移動しますから、月や年の区切りを普通は飛び
越します。

これらのコマンドはすべて数引数を反復回数として扱います。簡単のために、
カレンダー（calendar）モードではMeta修飾なしでも数字とマイナス記号で数
引数を指定できます。たとえば、`100 C-f'は100日後の日付にポイントを進め
ます。



File: emacs-ja, Node: Move to Beginning or End, Next: Specified Dates, Prev: Calendar Unit Motion, Up: Calendar Motion

週／月／年の始めと終り
----------------------

週（または、月、年）というのは、単に1日1日が集まったものではありません。
週（月、年）は特定の日で始まると考えます。そこで、カレンダー（calendar）
モードには、週、月、年の始めや終りに移動するコマンドがあります。

`C-a'
     週の始めにポイントを移動する（`calendar-beginning-of-week'）。
`C-e'
     週の終りにポイントを移動する（`calendar-end-of-week'）。
`M-a'
     月の始めにポイントを移動する（`calendar-beginning-of-month'）。
`M-e'
     月の終りにポイントを移動する（`calendar-end-of-month'）。
`M-<'
     年の始めにポイントを移動する（`calendar-beginning-of-year'）。
`M->'
     年の終りにポイントを移動する（`calendar-end-of-year'）。

これらのコマンドは数引数を反復回数と扱い、何週、何か月、何年だけ前後に
移動するのかを指定します。

デフォルトでは、週は日曜から始まります。月曜から始めるには、変数
`calendar-week-start-day'に1を設定します。 (1) (*Note Move to
Beginning or End-Footnotes::)


File: emacs-ja  Node: Move to Beginning or End-Footnotes, Up: Move to Beginning or End

(1) 【訳注】この変数はどの曜日を週の始めにするかを示しており、5を設定す
ると金曜日から始まる。



File: emacs-ja, Node: Specified Dates, Prev: Move to Beginning or End, Up: Calendar Motion

特定の日付
----------

カレンダー（calendar）モードには、さまざまな方法で指定した特定の日付へ
移動するコマンドがあります。

`g d'
     指定した日付へポイントを移動する（`calendar-goto-date'）。
`o'
     指定した月をカレンダーの中央月にする（`calendar-other-month'）。
`.'
     ポイントを今日の日付に移動する（`calendar-goto-today'）。

`g d'（`calendar-goto-date'）は、年、月、日を読み取ってその日付に移動し
ます。カレンダーには西暦紀元がすべて含まれているため、西暦年を略さずに
打つ必要があります。つまり、`90'ではなく`1990'です。

`o'（`calendar-other-month'）は、月と年を読み取って、その月を中央月とし
て3か月分のカレンダーを表示します。

`.'（`calendar-goto-today'）で、今日の日付に戻ることができます。



File: emacs-ja, Node: Scroll Calendar, Next: Counting Days, Prev: Calendar Motion, Up: Calendar/Diary

カレンダーのスクロール
======================

見えている範囲を越えて移動するとカレンダーは自動的にスクロールします。
手動でスクロールすることもできます。カレンダーを表示しているウィンドウ
では、長い長い紙に月を印刷したものの一部が見えているのだと考えてくださ
い。カレンダーをスクロールするとは、新しい月が見えるようにこの紙を動か
すことに相当します。

`C-x <'
     カレンダーを1か月後にスクロールする（`scroll-calendar-left'）。
`C-x >'
     カレンダーを1か月前にスクロールする（`scroll-calendar-right'）。
`C-v'
`NEXT'
     カレンダーを3か月後にスクロールする
     （`scroll-calendar-left-three-months'）。
`M-v'
`PRIOR'
     カレンダーを3か月前にスクロールする
     （`scroll-calendar-right-three-months'）。

カレンダーをスクロールするもっとも基本的なコマンドは、一度に1か月分スク
ロールします。つまり、コマンドの実行前後の表示を比べると、2か月分重複し
ています。`C-x <'はカレンダーを1か月分左にスクロールします。つまり、時
間的に1か月後を表示します。`C-x >'コマンドはカレンダーを右にスクロール
し、時間的に1か月前に戻します。

コマンド`C-v'と`M-v'は、
カレンダーを『1画面分』、つまり、3か月分スクロールします。
これは、通常のモードでのこれらのコマンドと意味的に同じになっています。
`C-v'は将来の日付を見えるようにし、
`M-v'は過去の日付を見えるようにします。
これらのコマンドは数引数を反復回数として扱います。
たとえば、`C-u'は後続のコマンドを4回反復するので、
`C-u C-v'と打てば1年分先へカレンダーをスクロールし、
`C-u M-v'と打てば1年分前へカレンダーをスクロールします。

ファンクションキーNEXTとPRIORは、他のモードと同様に、それぞれ、`C-v'と
`M-v'に等価です。



File: emacs-ja, Node: Counting Days, Next: General Calendar, Prev: Scroll Calendar, Up: Calendar/Diary

日数計算
========

`M-='
     カレントリージョン内の日数を表示する
     （`calendar-count-days-region'）。

リージョン内の日数を調べるには、`M-='（`calendar-count-days-region'）と
打ちます。このコマンドで表示される日数は、マークとポイントで指定した両
日を*含んだ*日数です。



File: emacs-ja, Node: General Calendar, Next: LaTeX Calendar, Prev: Counting Days, Up: Calendar/Diary

その他のカレンダーコマンド
==========================

`p d'
     通年日（1年のうちの何日目の日か）を表示する
     （`calendar-print-day-of-year'）。
`C-c C-l'
     カレンダーを表示しているウィンドウを再表示する
     （`redraw-calendar'）。
`SPC'
     別のウィンドウをスクロールする（`scroll-other-window'）。
`q'
     カレンダーから抜ける（`exit-calendar'）。

年始から数えた日数、あるいは、1年の残り日数を表示するには、`p
d'（`calendar-print-day-of-year'）コマンドを打ちます。すると、上の2つの
日数をエコー領域に表示します。年始からの日数には指定した日が含まれます。
また、残りの日数には指定した日は含まれません。

カレンダーのウィンドウのテキストが壊れた場合には、`C-c
C-l'（`redraw-calendar'）と打って再表示させます。（カレンダー
（calendar）モード以外の編集用コマンドを使った場合に限り、表示がおかし
くなる。）

カレンダー（calendar）モードでは、SPC（`scroll-other-window'）を使って
別のウィンドウをスクロールできます。このコマンドは、別のウィンドウに祝
祭日や日誌記録の一覧を表示しているときに便利です。

カレンダーから抜けるには、`q'（`exit-calendar'）と打ちます。このコマン
ドはカレンダーに関係したすべてのバッファを閉じ、別のバッファを選択しま
す。（カレンダー関連のウィンドウ専用のフレームであった場合には、カレン
ダーを終了するとそのフレームをアイコン化する。）



File: emacs-ja, Node: LaTeX Calendar, Next: Holidays, Prev: General Calendar, Up: Calendar/Diary

LaTeXカレンダー
===============

カレンダーLaTeXコマンドは、カレンダーを印刷するLaTeXコードのバッファに
作成します。使用するコマンドに依存して、ポイント位置の日、週、月、年の
いずれかを含んだカレンダーを印刷できます。

`t m'
     1か月分のカレンダーを生成する（`cal-tex-cursor-month'）。
`t M'
     横づかいで1か月分のカレンダーを生成する
     （`cal-tex-cursor-month-landscape'）。
`t d'
     1日分のカレンダーを生成する（`cal-tex-cursor-day'）。
`t w 1'
     1週間分の1ページのカレンダーを生成する（`cal-tex-cursor-week'）。
`t w 2'
     1週間分の2ページのカレンダーを生成する（`cal-tex-cursor-week2'）。
`t w 3'
     1週間分のISOスタイルのカレンダーを生成する
     （`cal-tex-cursor-week-iso'）。
`t w 4'
     月曜から始まる1週間分のカレンダーを生成する
     （`cal-tex-cursor-week-monday'）。
`t f w'
     ファイロファックス（システム手帳）スタイルの見開き2週間分のカレン
     ダーを生成する（`cal-tex-cursor-filofax-2week'）。
`t f W'
     ファイロファックス（システム手帳）スタイルの見開き1週間分のカレン
     ダーを生成する（`cal-tex-cursor-filofax-week'）。
`t y'
     1年分のカレンダーを生成する（`cal-tex-cursor-year'）。
`t Y'
     横づかいで1年分のカレンダーを生成する
     （`cal-tex-cursor-year-landscape'）。
`t f y'
     ファイロファックス（システム手帳）スタイルの1年分のカレンダーを生
     成する（`cal-tex-cursor-filofax-year'）。

これらのコマンドのいくつかは、横づかい（つまり、『ランドスケープ』）の
カレンダーを印刷し、横長になります。いくつかのコマンドでは、ファイロ
ファックス（システム手帳）サイズ（3.75インチ×6.75インチ、約95.25mm×
171.45mm）を使います。これらのコマンドはすべて、印刷する日数、週数、月
数、年数を数引数で指定できます（つねに選択した日から始まる）。

変数`cal-tex-holidays'が`nil'以外（デフォルト）ならば、印刷されるカレン
ダーには`calendar-holidays'の祝祭日が表示されます。変数`cal-tex-diary'
が`nil'以外（デフォルトは`nil'）ならば、日誌記録も一緒に印刷されます
（週間および月間カレンダーの場合だけ）。



File: emacs-ja, Node: Holidays, Next: Sunrise/Sunset, Prev: LaTeX Calendar, Up: Calendar/Diary

祝祭日
======

Emacsのカレンダーはすべての祝祭日を把握しており、それらをカレンダーに表
示できます。

`h'
     選択された日付の祝祭日を表示する（`calendar-cursor-holidays'）。
`Mouse-2 Holidays'
     マウスでクリックした日付の祝祭日を表示する。
`x'
     カレンダーウィンドウの祝祭日に印を付ける
     （`mark-calendar-holidays'）。
`u'
     カレンダーウィンドウの印を消す（`calendar-unmark'）。
`a'
     表示中の3か月分のカレンダーのすべての祝祭日を別のウィンドウに表示
     する（`list-calendar-holidays'）。
`M-x holidays'
     今日を中心とした3か月間のすべての祝祭日を別のウィンドウに表示する。
`M-x list-holidays'
     指定した範囲の年の祝祭日を別のウィンドウに表示する。

カレンダー上のある日付が祝祭日かどうかを知るには、その日付にポイントを
動かし`h'コマンドを使います。あるいは、その日付を`Mouse-2'でクリックし、
立ち上がったメニューから`Holidays'を選択します。いずれの方法でも、その
日付に関する祝祭日情報が、エコー領域に収まればエコー領域に、あるいは、
別のウィンドウに表示されます。

カレンダーに表示されている期間内にどれだけの祝祭日があるかを知るには、
`x'コマンドを使います。祝祭日である日を異なるフェイスで（複数のフェイス
を使えなければ、日付のあとに`*'を付けて）表示します。このコマンドは、画
面に見えている期間だけでなく、スクロールすると見えてくる期間にも適用さ
れます。印を消してもとの状態に戻るには`u'コマンドを使いますが、日誌の印
も同時に消えます。（*Note Diary::）。

より詳しい情報を得るには、`a'コマンドを使います。これは、現在の3か月間
に含まれるすべての祝祭日の一覧を別のバッファに表示します。カレンダーの
ウィンドウでSPCを使うと、その一覧をスクロールできます。

コマンド`M-x holidays'は、今月を中央月として前後1か月に含まれる祝祭日の
一覧を表示します。カレンダーウィンドウがなくてもこのコマンドを使えます。
別の月を中央月とした祝祭日の一覧が必要な場合は、`C-u M-x holidays'を使
います。（中央月の）月と年を聞いてきます。

Emacsが知っている祝祭日は、アメリカ合衆国の祝祭日、キリスト教の祝祭日、
ユダヤ教の祝祭日、イスラム教の祝祭日、夏至、冬至、春分、秋分です。

コマンド`M-x list-holidays'は、指定した数年間の祝祭日の一覧を表示します。
始めの年と終りの年を聞いてくるので、すべての祝祭日、ある特定の種類の祝
祭日を選べます。カレンダーウィンドウがなくてもこのコマンドを使えます。

Emacsが祝祭日を決定するために用いる暦は、歴史的な事実に基づくものではな
く、*現在用いている*ものです。たとえば、歴史的には夏時間 (1) (*Note
Holidays-Footnotes::) （daylight savings time）を始める時期や施行するか
どうかは、年ごとにばらばらでした。現在の合衆国の法律では4月の最初の日曜
から始めると定めています。合衆国の夏時間を適用するかどうかをEmacsは現在
の定義に基づいて決定しますので、昔の年代については誤りである場合もあり
ます。


File: emacs-ja  Node: Holidays-Footnotes, Up: Holidays

(1) 【訳注】主に高緯度地域で夏期に時計を進める習慣。日本でも戦後すぐに
一度使われた。現在、省エネルギーなどを名目に再導入が検討されているよう
だが…。



File: emacs-ja, Node: Sunrise/Sunset, Next: Lunar Phases, Prev: Holidays, Up: Calendar/Diary

日出入時刻
==========

カレンダーの特別なコマンドで、任意の日付の日出入時刻を2分以内の精度で調
べられます。

`S'
     選択した日付の日出入時刻を表示する（`calendar-sunrise-sunset'）。
`Mouse-2 Sunrise/Sunset'
     クリックした日付の日出入時刻を表示する。
`M-x sunrise-sunset'
     今日の日出入時刻を表示する。
`C-u M-x sunrise-sunset'
     指定した日付の日出入時刻を表示する

カレンダー内で*地方時*（local times）で日出入時刻を表示するには、目的の
日付にポイントを移動してから`S'と打ちます。あるいは、目的の日付を
`Mouse-2'でクリックするとメニューが立ち上がるのでその中から
`Sunrise/Sunset'を選びます。カレンダーの外からでも、今日や指定した日付
の日出入時刻を`M-x sunrise-sunset'コマンドで調べられます。今日以外の日
付を指定するには、`C-u M-x sunrise-sunset'コマンドを使います。すると、
年月日を聞いてきます。

`C-u C-u M-x sunrise-sunset'で、任意の場所の任意の日付の日出入時刻を表
示できます。経度、緯度、協定世界時 (1) (*Note
Sunrise/Sunset-Footnotes::) からの分単位のずれ、日付の指定を聞いてきま
す。すると、その場所でのその日付の日出入時刻が表示されます。

日出入時刻は、地球上の場所に依存しますので、これらのコマンドを使うまえ
にEmacsに現在いる場所の緯度／経度と土地の名前を教えなければなりません。
これにはつぎのようにします。

     (setq calendar-latitude 40.1)
     (setq calendar-longitude -88.2)
     (setq calendar-location-name "Urbana, IL")

変数`calendar-latitude'と`calendar-longitude'の値には、小数点以下1桁ま
で指定します。

タイムゾーンは、地方時で表した日出入時刻に影響します。通常、Emacsはオペ
レーティングシステムからタイムゾーンを取得しますが、それがまちがってい
る場合（あるいは、オペレーティングシステムがその情報を与えない場合）に
は、自分で設定する必要があります。つぎは設定例です。

     (setq calendar-time-zone -360)
     (setq calendar-standard-time-zone-name "CST")
     (setq calendar-daylight-time-zone-name "CDT")

`calendar-time-zone'の値は、協定世界時（グリニッジ標準時）と
地方標準時との差を分単位で表したものです。
`calendar-standard-time-zone-name'と
`calendar-daylight-time-zone-name'は、
現在いる場所のタイムゾーンの省略名称です。
Emacsは*夏時間を補正して*日出入時刻を表示します。
夏時間をどのように決定するかは、
*Note Daylight Savings::。

ユーザーとしては、個人の`.emacs'ファイルで
カレンダーの位置関連の変数に普段いる場所の値を設定すると便利でしょう。
あるいは、Emacsをマシンにインストールするときに、
そのマシンの大部分のユーザー用に典型的な場所に関する
情報を`default.el'ファイルに設定してもかまいません。
*Note Init File::。


File: emacs-ja  Node: Sunrise/Sunset-Footnotes, Up: Sunrise/Sunset

(1) 【訳注】グリニッジ標準時と呼称していたものに相当。



File: emacs-ja, Node: Lunar Phases, Next: Other Calendars, Prev: Sunrise/Sunset, Up: Calendar/Diary

朔弦望（新月、上弦、満月、下弦）
================================

以下のコマンドは、朔弦望（新月、上弦、満月、下弦）の日付と時刻を表示し
ます。これらの機能は、『朔弦望に依存する』問題をデバッグするときに重宝
します。

`M'
     表示してある3か月間の朔弦望の日付／時刻の一覧を表示する
     （`calendar-phases-of-moon'）。
`M-x phases-of-moon'
     今日を中央にした3か月間の朔弦望の日付／時刻の一覧を表示する。

カレンダー内で`M'コマンドを使うと、現在の3か月間の朔弦望の日付／時刻を
別のバッファに表示します。一覧内の日付／時刻は数分以内の精度です。

カレンダーの外からでも、`M-x phases-of-moon'コマンドを使って、今月を中
央月として前後1か月の朔弦望の日付／時刻を表示できます。別の期間に関して
調べるには`C-u M-x phases-of-moon'を使います。すると、月と年を聞いてき
ます。

朔弦望の日付／時刻は（必要ならば夏時間を補正して）地方時で与えられます。
しかし、変数`calendar-time-zone'が設定されていなければ、
協定世界時（グリニッジ標準時）が使われます。
*Note Daylight Savings::。



File: emacs-ja, Node: Other Calendars, Next: Diary, Prev: Lunar Phases, Up: Calendar/Diary

他の暦との相互変換
==================

Emacsのカレンダーは*つねに* グレゴリオ暦（Gregorian calendar）で表示し
ます。この暦は『新暦』とも呼ばれ、今日では世界の大部分で使われています。
しかし、この暦は16世紀以前には存在せず、18世紀になるまでは普及していま
せんでした。ユリウス暦（Julian calendar）に置き替って世界的に受け入れら
れたのは20世紀初頭になってからです。Emacsのカレンダーは西暦1年1月以降の
任意のカレンダーを表示できますが、グレゴリオ暦が存在しなかった時代に関
してもグレゴリオ暦に基づいた暦を表示します。

Emacsは他の暦を表示することはできませんが、指定した日付と他の暦の日付と
を相互に変換できます。

* Menu:

* Calendar Systems::	   The calendars Emacs understands
			     (aside from Gregorian).
* To Other Calendar::	   Converting the selected date to various calendars.
* From Other Calendar::	   Moving to a date specified in another calendar.
* Mayan Calendar::	   Moving to a date specified in a Mayan calendar.



File: emacs-ja, Node: Calendar Systems, Next: To Other Calendar, Prev: Other Calendars, Up: Other Calendars

参照可能な暦
------------

ISO商用暦はヨーロッパで広く使われています。

ユリウス暦は、ジュリアス・シーザー（ユリウス・カエサル、Julius Caesar）
に因んで命名されたもので、中世から19世紀にかけてヨーロッパ中で使われて
いました。

天文学者は、ユリウス暦紀元前4713年1月1日月曜の正午からの経過日数を使います。
この経過日数を*ユリウス日*（Julian day number）とか
*天文通算日*（Astronomical day number）と呼びます。

ヘブライ暦は昔からユダヤ教で使われてきました。Emacsのカレンダープログラ
ムは、ユダヤの祝祭日がどの日付かを決定するのにヘブライ暦を使います。ヘ
ブライ暦では1日は日没から始まり日没で終ります。 (1) (*Note Calendar
Systems-Footnotes::)

イスラム暦は多くのイスラム教の国々で使われています。Emacsはイスラム暦を
用いてイスラム教の祝祭日を決定します。イスラムの世界ではカレンダーにつ
いての世界的な取り決めが存在しません。Emacsは広く受け入れられているもの
を使用していますが、イスラム教の祝祭日の正確な日付は、計算によってでは
なく宗教上の権威筋の布告によってしばしば決定されます。そのため、実際の
日付とEmacsが計算した日付には少々違いがあります。イスラム暦の1日は日没
から始まり日没で終ります。

フランス革命暦は、1789年の大革命以降にジャコバン党によって作成されまし
た。より永続的で自然に準じて年周期を捉えることを目的に、度量衡に類似し
た合理的な尺度ということで1週間を10日にしています。フランス政府は、この
暦を1805年の終りに公式に放棄しました。

中央アメリカのマヤでは、3種類の別だが重複している暦の体系、*ロングカウ
ント*（long count）、*ゾルキン*（tzolkin）、*ハアブ*（haab）を使ってい
ました。Emacsはこれらの3つの暦をすべて知っています。専門家はマヤ暦とわ
れわれの暦が正確にはどのように関連しているか議論している最中です。
Emacsは、グッドマン・マーチンス・トンプソンの関連付けを用いて計算します。

コプト教徒は古代エジプト太陽暦に基づく暦を使っています。この暦は、おの
おの30日からなる12個の月と、それに続く余分の5日間で構成されます。4年に
一度、余分の5日間に閏日（1日間）を付け加えて6日間とします。エチオピア暦
は構造的にはコプト暦と同一ですが、コプト暦とは異なった年数と月の名前を
用いています。

ペルシア人はオマール・カイヤーム（Omar Khayyam） (2) (*Note Calendar
Systems-Footnotes::)が作った暦に基づいた太陽暦を使っています。この暦は、
12個の月から成り、最初の6個の月は31日、つぎの5個の月は30日、最後の1個の
月は平年は29日で閏年には30日となります。閏年は4年か5年に一度入る複雑な
パターンで起こります。

中国暦は、朔望月を太陽年に埋め込んだ複雑なものです。年は60を単位として
一周し、平年は12個の月ですが、閏年は13個の月です。各月は29日か30日です。
年、平月、日は、10の天の主節 (3) (*Note Calendar Systems-Footnotes::)と
12の地の副節 (4) (*Note Calendar Systems-Footnotes::) に従って名付けら
れ、60を周期として巡回します。 (5) (*Note Calendar
Systems-Footnotes::)


File: emacs-ja  Node: Calendar Systems-Footnotes, Up: Calendar Systems

(1) 【訳注】蛇足ですが、クリスマスは本来ユダヤ教の祝祭日で、12月24日の
日没から始まる。これがクリスマスイブを祝う本当の理由。

(2) 【訳注】ペルシアの数学者・天文学者・詩人

(3) 【訳注】十干。五行（木、火、土、金、水）に兄、弟を付け加えた甲（き
のえ）、乙（きのと）、丙（ひのえ）、丁（ひのと）、戊（つちのえ）、己
（つちのと）、庚（かのえ）、辛（かのと）、壬（みずのえ）、癸（みずのと）
からなる。

(4) 【訳注】十二支。子（ね）、丑（うし）、寅（とら）、卯（う）、辰（た
つ）、巳（み）、午（うま）、未（ひつじ）、申（さる）、酉（とり）、戌
（いぬ）、亥（い）からなる。

(5) 【訳注】甲子（きのえね）、乙丑、丙寅、…、癸亥（みずのとい）までの
60通り（12と10の最小公倍数）になる。辛亥革命の辛亥、壬申の乱の壬申など
は年を表している。



File: emacs-ja, Node: To Other Calendar, Next: From Other Calendar, Prev: Calendar Systems, Up: Other Calendars

他の暦への変換
--------------

以下のコマンドは選択した日（ポイントがある日）を他の暦で表示します。

`Mouse-2  Other Calendars'
     クリックした日が、他のさまざまな暦ではどうなるかを表示する。
`p c'
     選択した日をISO商用暦の日付で表示する（`calendar-print-iso-date'）。
`p j'
     選択した日をユリウス暦の日付で表示する
     （`calendar-print-julian-date'）。
`p a'
     選択した日を天文通算日（ユリウス日）で表示する
     （`calendar-print-astro-day-number'）。
`p h'
     選択した日をヘブライ暦の日付で表示する
     （`calendar-print-hebrew-date'）。
`p i'
     選択した日をイスラム暦の日付で表示する
     （`calendar-print-islamic-date'）。
`p f'
     選択した日をフランス革命暦の日付で表示する
     （`calendar-print-french-date'）。
`p C'
     選択した日を中国暦の日付で表示する
     （`calendar-print-chinese-date'）。
`p k'
     選択した日をコプト暦の日付で表示する
     （`calendar-print-coptic-date'）。
`p e'
     選択した日をエチオピア暦の日付で表示する
     （`calendar-print-ethiopic-date'）。
`p p'
     選択した日をペルシア暦の日付で表示する
     （`calendar-print-persian-date'）。
`p m'
     選択した日をマヤ暦の日付で表示する（`calendar-print-mayan-date'）。

XウィンドウシステムでEmacsを使っている場合には、ある日付を他の暦での日
付に変換するいちばん簡単な方法は、その日付を`Mouse-2'でクリックし、立ち
上がったメニューから`Other Calendars'を選びます。対応する日付をEmacsが
知っているすべての暦でメニューに表示します。（このメニューは単なる表示
用なので、項目を選んでも何も起こらない。）

グレゴリオ暦の目的の日付にポイントを動かして適切なキーを打ちます。`p'は
printの意味で、Emacsはその日を指定された暦でエコー領域に表示します。



File: emacs-ja, Node: From Other Calendar, Next: Mayan Calendar, Prev: To Other Calendar, Up: Other Calendars

他の暦からの変換
----------------

Emacsが扱える暦で日付を指定して、カレンダーの対応する日に移動できます。
本節では、マヤ暦を除く暦でこれを行うコマンドを説明します。マヤ暦につい
ては、これに続く節を参照してください。

`g c'
     ISO商用暦で指定した日付に移動する（`calendar-goto-iso-date'）。
`g j'
     ユリウス暦で指定した日付に移動する（`calendar-goto-julian-date'）。
`g a'
     天文通算日（ユリウス日）で指定した日付に移動する
     （`calendar-goto-astro-day-number'）。
`g h'
     ヘブライ暦で指定した日付に移動する（`calendar-goto-hebrew-date'）。
`g i'
     イスラム暦で指定した日付に移動する（`calendar-goto-islamic-date'）。
`g f'
     フランス革命暦で指定した日付に移動する
     （`calendar-goto-french-date'）。
`g C'
     中国暦で指定した日付に移動する（`calendar-goto-chinese-date'）。
`g p'
     ペルシア暦で指定した日付に移動する（`calendar-goto-persian-date'）。
`g k'
     コプト暦で指定した日付に移動する（`calendar-goto-coptic-date'）。
`g e'
     エチオピア暦で指定した日付に移動する
     （`calendar-goto-ethiopic-date'）。

これらのコマンドは、それぞれの暦での日付を聞いてきて、それに対応するグ
レゴリオ暦の日付にポイントを移動します。また、エコー領域には指定した暦
の日付を表示します。Emacsは月の名前をユーザーに聞くときに強い補完
（*Note Completion::）を使うので、ヘブライ暦／イスラム暦／フランス革命
暦などの月の名前の綴りを気にする必要はないでしょう。

ヘブライ暦で問題となるのが追悼記念祭『ヤールツァイト』（yahrzeit）と呼
ばれる命日の計算です。Emacsのカレンダーにはその計算機能があります。カレ
ンダー内にカーソルがあるときに`M-x list-yahrzeit-dates'コマンドを実行す
ると年の範囲を聞いてきます。そして、ポイントがある日付に対応した追悼記
念祭の日付を指定した範囲の年について一覧表示します。カレンダー内にいな
いときにこのコマンドを使うと、まず死亡年月日を聞いてから年の範囲を聞い
てきます。そして、追悼記念祭の日付の一覧を表示します。



File: emacs-ja, Node: Mayan Calendar, Prev: From Other Calendar, Up: Other Calendars

マヤ暦からの変換
----------------

以下はマヤ暦で日付を指定する方法です。

`g m l'
     ロングカウント暦で指定した日付に移動する
     （`calendar-goto-mayan-long-count-date'）。
`g m n t'
     ゾルキン暦のつぎの周期の日に進む（`calendar-next-tzolkin-date'）。
`g m p t'
     ゾルキン暦のまえの周期の日に戻る
     （`calendar-previous-tzolkin-date'）。
`g m n h'
     ハアブ暦のつぎの周期の日に進む（`calendar-next-haab-date'）。
`g m p h'
     ハアブ暦のまえの周期の日に戻る（`calendar-previous-haab-date'）。
`g m n c'
     マヤのカレンダーラウンドのつぎの周期の日に進む
     （`calendar-next-calendar-round-date'）。
`g m p c'
     マヤのカレンダーラウンドのまえの周期の日に戻る
     （`calendar-previous-calendar-round-date'）。

これらのコマンドを理解するには、
マヤ暦を理解しておく必要があります。
"ロングカウント"は以下の単位に基づいて日付を計算したものです。

     1キン（kin） = 1日   1ユイナル（uinal） = 20キン
     1タン（tun） = 18ユイナル   1カタン（katun） = 20タン
     1バクタン（baktun） = 20カタン

したがって、ロングカウントの12.16.11.16.6は、12バクタン、16カタン、11タ
ン、16ユイナル、6キンを表しています。Emacsのカレンダーはマヤ暦ロングカ
ウント7.17.18.13.1 (1) (*Note Mayan Calendar-Footnotes::) まで遡ること
ができますが、それ以前は扱えません。`g m l'コマンドを使ってマヤ暦ロング
カウントの日付を入力するときには、バクタン、カタン、タン、ユイナル、キ
ンをピリオドで区切ってください。

マヤ暦ゾルキンは、独立した13日と20日の周期からなる260日周期です。この周
期が永遠に繰り返されるため、Emacsには、つぎの周期へ進んだりまえの周期へ
戻るコマンドがあります。`g m p t'と打つと、ゾルキン暦のまえの周期の日に
戻ります。このコマンドは、ゾルキン暦の日付を聞いてきて、その日付のまえ
の周期の日にポイントを戻します。同様に、`g m n t'は、ゾルキン暦のつぎの
周期の日に進めます。

マヤ暦ハアブは365日の周期で、20日からなる18個の月と月に属さない5日間か
らなっています。ゾルキン暦の周期と同様に、この周期が永遠に繰り返される
ため、Emacsにはつぎの周期の日へ進んだりまえの周期の日に戻るコマンドがあ
ります。`g m p h'と打つと、ハアブ暦のまえの周期に日に戻ります。このコマ
ンドは、ハアブ暦の日付を聞いてきて、その日付のまえの周期の日にポイント
を戻します。同様に、`g m n h'は、ハアブ暦のつぎの周期の日に進めます。

マヤではゾルキン暦とハアブ暦を組み合わせた暦も使われていました。組み合
わせの1周期は約52年で*カレンダーラウンド*と呼ばれます。`g m p c'と打つ
と、Emacsはハアブ暦の日付とゾルキン暦の日付を聞いてきます。そして、まえ
の組み合わせ周期の日にポイントを戻します。つぎの組み合わせ周期の日にポ
イントを進めるには`g m n c'を使います。これらのコマンドは、指定したハア
ブ暦／ゾルキン暦の日付の組み合わせが不可能であるとエラーを通知します。

Emacsはマヤ暦の名前の入力では強い補完（*Note Strict Completion::）を使
うので、綴りを気にする必要はありません。


File: emacs-ja  Node: Mayan Calendar-Footnotes, Up: Mayan Calendar

(1) 【訳注】この日は西暦1年1月1日で、Emacsのカレンダーは紀元前を扱えな
い。



File: emacs-ja, Node: Diary, Next: Appointments, Prev: Other Calendars, Up: Calendar/Diary

日誌
====

Emacsの日誌機能は、カレンダーと連動して、1日を単位に約束やその他の予定
を管理します。日誌機能を使うには、用事と日付を書き込んだ"日誌ファイル"
（diary file）をまず作っておく必要があります。そうしておくと、Emacsは自
動的にこのファイルを取り込んで、今日／数日先／指定した日付の予定を表示
します。

デフォルトでは、Emacsは日誌ファイルとして`~/diary'を使います。これは
`calendar'プログラムが使うファイルと同じです。以下に`~/diary'ファイルの
例を示します。

     12/22/1988  20回目の結婚記念日！
     &1/1.       新年おめでとう！
     10/22       ルースの誕生日
     * 21, *:    給料日
     Tuesday  10時から院生たちと週間ミーティング
              スポウイット、シェン、ビットナー、カポールと約束
     1/13/89     13日の金曜日！！
     &thu 4pm    ロイドとスカッシュをする
     mar 16      親父の誕生日
     April 15, 1989 所得税の納付期限
     &* 15       勤務表の提出期限

この例では、大部分の予定の項目に余分な空白を入れて整列してありますが、
これは純粋に好みの問題です。

日誌を手で作成しようとしているかもしれませんが、Emacsには、日誌の項目を
眺めたり、追加したり、変更したりするコマンドが数多くあります。

* Menu:

* Diary Commands::         Viewing diary entries and associated calendar dates.
* Format of Diary File::   Entering events in your diary.
* Date Formats::	   Various ways you can specify dates.
* Adding to Diary::	   Commands to create diary entries.
* Special Diary Entries::  Anniversaries, blocks of dates, cyclic entries, etc.



File: emacs-ja, Node: Diary Commands, Next: Format of Diary File, Prev: Diary, Up: Diary

日誌項目の表示コマンド
----------------------

いったん`~/diary'ファイルを作成しておけば、カレンダーを使ってこれを眺め
ることができます。また、カレンダー（calendar）モードの外からでも、今日
の予定を参照できます。

`d'
     選択した日付のすべての日誌項目を表示する（`view-diary-entries'）。
`Mouse-2 Diary'
     クリックした日付のすべての日誌項目を表示する。
`s'
     日誌ファイル全体を表示する（`show-all-diary-entries'）。
`m'
     日誌項目が登録されているすべての日付に印を付ける
     （`mark-diary-entries'）。
`u'
     カレンダーウィンドウの印を消す（`calendar-unmark'）。
`M-x print-diary-entries'
     現在表示している日誌項目をそのまま印刷する。
`M-x diary'
     今日の日付の日誌項目すべてを表示する。
`M-x diary-mail-entries'
     これからの予定を自分自身にメイルする。

`d'で日誌項目を表示すると、別のウィンドウに選択した日付の日誌項目が表示
されます。新しいウィンドウのモード行には、日誌項目の日付とその日付の祝
祭日情報が表示されます。`d'に数引数を指定すると、指定した日数の期間の日
誌項目を表示します。したがって、`2 d'は、選択した日とそのつぎの日のすべ
ての項目を表示します。

ある日付の日誌項目を表示する別の方法として、日付を`Mouse-2'でクリックし、
立ち上がったメニューから項目`Diary'を選ぶことです。

日誌が記載されている日付を知るには`m'コマンドを使います。このコマンドは、
日誌が記載されている日付を別のフェイスで（複数のフェイスを使えなければ、
日付のあとに`+'を付けて）表示します。このコマンドは、画面に見えている期
間だけでなく、スクロールすると見えてくる期間にも適用されます。印を消し
てもとの状態に戻るには`u'コマンドを使いますが、祝祭日の印も同時に消えま
す。（*Note Holidays::）。

日誌ファイル内の数項目ではなく全体を見るには、
`s'コマンドを使います。

選択した日誌項目だけを表示するには、選択表示機能を用いて他の項目を隠し
ます。

画面で見ている日誌用バッファは幻でしかありません。そのため、単純にバッ
ファを印刷しても画面に表示されているようには印刷できません。画面に表示
されている日誌項目を*あるがまま*に印刷するには専用のコマンド`M-x
print-diary-entries'を使う必要があります。このコマンドはデータをプリン
タに直接送ります。`lpr-region'のようにカスタマイズできます（*Note
Hardcopy::）。

コマンド`M-x diary'は、現在のカレンダー表示とは関係なしに、場合によって
は数日後までを含めて今日の日誌を表示します。変数
`number-of-diary-entries'には何日間まで含めるか指定します。*Note カレン
ダーと日誌のカスタマイズ: (elisp)Calendar。

個人の`.emacs'ファイルに`(diary)'と書けば、Emacsを実行すると自動的に当
日の日誌項目をウィンドウに表示します。そのウィンドウのモード行には、日
付と祝祭日情報が表示されます。

多くのユーザーは、日誌に記載した予定を電子メイルで受け取ることを好みま
す。自分自身にそのようなメイルを送るには、コマンド`M-x
diary-mail-entries'を使います。数引数で（今日から始めて）何日間を含める
か指定します。数引数を指定しなければ、変数`diary-mail-days'が日数を指定
します。



File: emacs-ja, Node: Format of Diary File, Next: Date Formats, Prev: Diary Commands, Up: Diary

日誌ファイル
------------

個人の日誌ファイルは、用事と日付の対応付けを記録したファイルです。日誌
ファイルの名前は、変数`diary-file'で指定します。デフォルトは`~/diary'で
す。`calendar'プログラムは、Emacsの日誌機能が扱う形式を部分的に扱えます。
そのため、`calendar'プログラムでもそれなりに日誌ファイルを眺められます
が、正しく解釈されない項目もあるでしょう。

日誌ファイルの各項目は、1つの用事を表し、1行以上の行から成ります。項目
はつねに行頭の日付指定で始まります。項目の残りの部分は用事を説明する単
なるテキストです。項目が1行に収まらないときには、後続行の行頭を白文字で
始めて直前の項目の続きであることを示します。正しい日付指定で始まらない
行や直前の項目の続きの行でないものは無視されます。

カレンダーのウィンドウ内で特定の日誌項目に印を付けないようにできます。
それには、項目の日付指定のまえにアンパーサンド（`&'）を付けます。これは、
日誌ウィンドウに項目を表示するのには影響ありません。カレンダーウィンド
ウの日付の印だけに影響します。印付けを禁止した項目は一般的な項目として
は便利で、こうしないと印が付いた日が多くなりすぎます。

項目の最初の行が日付指定や曜日だけの場合には、最初の行は日誌ウィンドウ
に表示されません。後続の行だけが表示されます。たとえば、つぎの項目は、
日誌ウィンドウでは先頭に日付の行は表示されません。

     02/11/1989
          本日B. ビルがプリンストンに来る
          2pm 認知研究委員会の会合
          2:30-5:30 ローレンスビルにリズ
          4:00pm 歯医者予約
          7:30pm ジョージの所で夕食
          8:00-10:00pm コンサート

この流儀だと1日分の予定を表示する限りはきちんと見えるのですが、2日分以
上の場合には混乱しかねません。

ウィンドウに表示された日誌項目は編集できますが、表示されたバッファには
日誌ファイル*全体*が含まれていて、ある部分が隠されいるのだということを
忘れてはなりません。たとえば、`C-f'（`forward-char'）コマンドで表示上の
行末にポイントを置けますが、実際には隠された行の途中にいるのかもしれま
せん。

*日誌項目を編集するときには注意してください！*` ' 項目に余分な行を追加
したり見えている行の途中に文字を追加／削除しても問題は生じませんが、行
末で編集すると予期しないことが起こる可能性があります。行を削除すると今
は見えていない後続の他の項目を削除してしまうかもしれません。日誌を編集
するまえには、`s'（`show-all-diary-entries'）でファイル全体を表示させる
のが最良です。



File: emacs-ja, Node: Date Formats, Next: Adding to Diary, Prev: Format of Diary File, Up: Diary

日付指定の形式
--------------

以下は日誌項目の例で、使用可能ないくつかの日付指定形式を示しています。
この例では日付をアメリカ形式（月、日、年）で指定していますが、カレンダー
（calendar）モードではオプションでヨーロッパ形式（日、月、年）も使用で
きます。

     4/20/93  新しい計算システムへ切換
     apr. 25  年ごとの計算開始
     4/30     4月分の処理完了〆切
     */25     月ごとのサイクル完了
     Friday   ファイルのバックアップを忘れないこと

最初の項目は1993年4月20日に一度だけ表示されます。2番目と3番目は毎年指定
した日付に表示され、4番目は月の指定にワイルドカード（アスタリスク、`*'）
を使っているため、毎月25日に表示されます。最後の項目は毎週金曜日に表示
されます。

日付には、`MONTH/DAY'や`MONTH/DAY/YEAR'のように数字だけを使ってもかまい
ません。この場合、あとに続く文字は数字であってはいけません。日付自体の
MONTH（月）とDAY（日）は1桁か2桁の数字です。YEAR（年）は省いてもかまい
ませんが、これも数字で、最後の2桁だけに省略してもかまいません。つまり、
`11/12/1989'と書いても`11/12/89'と書いても同じです。

日付を、`MONTHNAME DAY'や`MONTHNAME DAY, YEAR'と書くこともできます。こ
こで、MONTHNAMEは英語の月の名前で3文字の省略形（ピリオドがあってもなく
てもよい）でもかまいません。大文字小文字は区別しません。

日付の指定は"総称的"であってもかまいません。
つまり、特定しない部分があってもかまいません。
そうすると、その指定に一致するすべての日付にその項目が適用されます。
年を指定しなければ、それは総称的であり、その項目は毎年に適用されます。
あるいは、MONTH、DAY、YEARのそれぞれに
`*'を指定できます。
これは、それぞれ、任意の月、任意の日、任意の年に一致します。
したがって、`3/*/*'という日誌項目は、
任意の年の3月のどの日にも一致します。
`march *'も同じことです。

もし、月のまえに日を書くヨーロッパ形式で日付を指定したいときには、
カレンダー中で`M-x european-calendar'と打ちます。
あるいは、カレンダー／日誌コマンドを使う*まえ*に
変数`european-calendar-style'に`t'を設定します。
この状態では、日誌の中のすべての日付指定をヨーロッパ形式で解釈します。
また、日誌の日付を表示するときもヨーロッパ形式です。
（ヨーロッパ形式では、MONTHNAMEのあとにはコンマは付けない。）
（デフォルトの）アメリカ形式の日付に戻るには、
`M-x american-calendar'と打ちます。

ある曜日を指定する総称的な日付として曜日の名前を使えます。曜日の名前は
英語で綴り、3文字の省略形（ピリオドがあってもなくてもよい）でもかまいま
せん。大文字小文字は問いません。



File: emacs-ja, Node: Adding to Diary, Next: Special Diary Entries, Prev: Date Formats, Up: Diary

日誌への追加コマンド
--------------------

カレンダー（calendar）モードの中には、日誌の項目を作成するコマンドがい
くつかあります。

`i d'
     選択した日に日誌項目を追加する（`insert-diary-entry'）。
`i w'
     選択した曜日に日誌項目を追加する（`insert-weekly-diary-entry'）。
`i m'
     選択した月の日に日誌項目を追加する（`insert-monthly-diary-entry'）。
`i y'
     選択した年の日に日誌項目を追加する（`insert-yearly-diary-entry'）。

カレンダーウィンドウ内で日を選択して`i d'コマンドを打てば、選択した日に
日誌項目を作成できます。このコマンドは、別のウィンドウに日誌ファイルの
末尾を表示し、日付を挿入します。そうしたら、日誌項目の残りの部分を打ち
込みます。

特定の曜日に日誌項目を作成したい場合には、その曜日を選択して（どの場所
でもよい）`i w'と打ちます。これで、総称的な日付として曜日名が挿入されま
す。そうしたら、日誌項目の残りの部分を打ち込みます。同様にして、月の特
定の日を選択してから`i m'コマンドを打って、項目の残りの部分を打ち込みま
す。同じように、`i y'コマンドで、毎年の特定の日に項目を挿入できます。

これらのコマンドはすべて、デフォルトでは印付けされる項目を作成します。
印付け禁止の項目を作成するには、コマンドに数引数を指定します。たとえば、
`C-u i w'は毎週の印付け禁止項目を作ります。

日誌ファイルを修正したときには、Emacsを終了するまえにファイルを必ず保存
してください。



File: emacs-ja, Node: Special Diary Entries, Prev: Adding to Diary, Up: Diary

特別な日誌項目
--------------

カレンダーの日付に基づいて項目を追加する以外に、毎年の記念日などを表す
S式項目"（sexp entries）を日誌ファイルに入れることができます。これらの
項目は、Emacsが日誌ファイルを読み込むときにLisp式（S式、sexp）を評価す
ることに基づいています。S式項目では日付のかわりに、`%%'に続けて括弧で括っ
たLisp式があります。Lisp式が項目を適用する日付を決定します。

カレンダー（calendar）モードには、よく使われるS式項目を追加するコマンド
があります。

`i a'
     指定した日付の毎年の記念日の日誌項目を追加する
     （`insert-anniversary-diary-entry'）。
`i b'
     カレントリージョンに対してブロック日誌項目を追加する
     （`insert-block-diary-entry'）。
`i c'
     指定した日から始まる定期的に巡ってくる日誌項目を追加する
     （`insert-cyclic-diary-entry'）。

ある特定の日を毎年の記念日に指定したい場合には、その日付にポイントを移
動してから`i a'コマンドを使います。このコマンドは、別のウィンドウに日誌
ファイルの末尾を表示し、記念日を指定するS式を挿入します。そうしたら、日
誌項目の残りの部分を打ち込みます。以下はその例です。

     %%(diary-anniversary 10 31 1948) アーサーの誕生日

この項目は、1948年以降の毎年10月31日に適用されます。`10 31 1948'は日付
を指定します。（ヨーロッパ形式の日付を使っている場合には、`31'と`10'が
入れ替わる。）この式に開始年が必要なのは、日誌関数で経過年数の計算に使
うからです。

"ブロック"日誌項目は、指定した期間に適用されます。以下は、1990年6月24日
から1990年7月10日までに適用されるブロック日誌項目の例です。

     %%(diary-block 6 24 1990 7 10 1990) 休暇

`6 24 1990'は開始日付を表し、`7 10 1990'は終了日付を表します。（ヨーロッ
パ形式を使っている場合は、月と日が入れ替わる。）

ブロック項目を追加するには、ポイントとマークを期間の開始日付と終了日付
に設定してから`i b'と打ちます。このコマンドは、日誌ファイルの末尾を別の
ウィンドウに表示して、ブロック項目指定を追加します。そうしたら、日誌項
目の残りの部分を打ち込みます。

"周期的"な日誌項目は、一定間隔で繰り返します。これを作るには、開始日を
選択して`i c'コマンドを使います。このコマンドは、間隔を聞いてきます。そ
うしたら、項目を挿入します。以下のようになります。

     %%(diary-cyclic 50 3 1 1990) つぎの投薬

この項目は1990年3月1日から始まり、50日ごとに適用されます。`3 1 1990'は
この開始日を指定しています（ヨーロッパ形式を使っている場合は、月と日が
入れ替わる。）

これら3つのコマンドはいずれも印付けされる項目を作成します。印付け禁止項
目を挿入する場合には、コマンドに数引数を指定します。たとえば、`C-u i
a'は、印付け禁止の記念日の項目を作ります。

日誌のS式項目をカレンダーに印付けするのは*非常に*時間がかかります。なぜ
なら、カレンダーのウィンドウに見えているすべての日付について1つ1つ調べ
る必要があるからです。したがって、S式項目を登録する際にはできる限り
（`&'を付けて）印付け禁止の日誌項目にするのがよいでしょう。

S式項目の別の利用方法には、"流動型"日誌項目があります。これは毎年定期に
起きることがらを日数や週数や月数のオフセットで表したものです。これは
`cron'プログラムが解釈するcrontabの項目と互換性があります。以下は、毎年
11月の最終木曜日に印付け禁止の流動型日誌項目を指定する例です。

     &%%(diary-float 11 4 -1) アメリカの感謝祭

この11は11月を表し、4は木曜（日曜を0として週の4番目の日）を表します。
-1は『最後』を表します
（1は『最初』、2は『2番目『、-2は『最後の1つまえ』などなど）。月の指定
は1個の月でも月のリストでもかまいません。たとえば、上の11を`'(1 2 3)'に
変更すると、1月、2月、3月の最終木曜日に適用する項目になります。月の指定
が`t'ならば、すべての月に適用されます。

もっとも一般的には、日誌のS式項目は適用する日付を決定するために、どんな
計算でもできます。*Note S式項目と装飾日誌表示: (elisp)Sexp Diary
Entries。



File: emacs-ja, Node: Appointments, Next: Daylight Savings, Prev: Diary, Up: Calendar/Diary

約束
====

日誌項目に約束が入っていて、Emacsが認識可能な形で時刻が指定されている場
合には、その予定の何分かまえに「約束がありますよ。」と警告を出す機能が
あります。Emacsはモード行に約束がある旨の警告メッセージを表示します。

約束の警告表示を行わせるには、
まずEmacsの時刻表示機能をオンにする必要があります。
`M-x display-time'（*Note Mode Line::）と打ちます。
さらに、関数`appt-make-list'を以下のようにして
`diary-hook'に追加する必要があります。

     (add-hook 'diary-hook 'appt-make-list)

個人の`.emacs'ファイルに以下のテキストを追加すれば、これまでのことを行
えます。

     (display-time)
     (add-hook 'diary-hook 'appt-make-list)
     (diary 0)

このように準備しておくと、（カレンダーのウィンドウで`d'コマンドを使うか、
`M-x diary'コマンドを使うかして）日誌を表示したときに、Emacsが認識でき
る時刻指定のある約束をすべて取り込み、それらのおのおのについて指定され
た時刻よりも少しまえに警告を表示します。

たとえば、日誌ファイルに以下のような項目があるとします。

     Monday
       9:30am 休憩
      12:00pm 昼食

すると、毎週月曜には、日誌を表示していると午前9時20分にもうすぐ休憩だと
表示を出し、午前11時50分には昼食時間だと表示を出します。

時刻指定は、`9:00am'のようにam/pmスタイルでも（`12:00am'は夜中の12時、
`12:00pm'はお昼の12時を表す）、ヨーロッパや軍隊流の24時間制でもかまいま
せん。また、一貫している必要もなく、日誌ファイルにこれらが混在していて
もかまいません。

Emacsはこれらの約束リストを夜中の12時過ぎに更新します。変数
`appt-display-diary'に`nil'を設定していない限り、日誌用バッファにつぎの
日の予定を表示します。

約束の警告表示を目覚し時計として利用することもできます。
コマンド`M-x appt-add'は、個人の日誌ファイルを変更せずに
約束リストに項目を追加します。
`M-x appt-delete'は、約束リストから項目を削除します。

変数`appt-issue-message'に`nil'を設定すれば、約束の警告表示はいつでもオ
フにできます。



File: emacs-ja, Node: Daylight Savings, Prev: Appointments, Up: Calendar/Diary

夏時間
======

Emacsは標準時と夏時間の違いを理解していて、日出入、夏至、冬至、春分、秋
分、朔弦望の時刻ではこれを補正しています。夏時間の規則は、地域によって
も、また、歴史的にもさまざまです。補正を正しく行うには、使用する規則を
Emacsに与えておく必要があります。

オペレーティングシステムのなかには、その設置場所で適用する規則を記録し
ているものもあります。このようなシステムでは、Emacsは自動的に必要な情報
をシステムから取得します。情報の一部や全部が欠けている場合には、現在マ
サチューセッツ州ケンブリッジで使われている規則でEmacsは欠落部分を補おう
とします。その結果が正しくないならば、変数
`calendar-daylight-savings-starts'と`calendar-daylight-savings-ends'を
設定し、規則をEmacsに与える必要があります。

これらの変数の値は、変数`year'を参照するLisp式である必要があり、評価す
ると、グレゴリオ暦での夏時間の開始日や終了日を表す`(MONTH DAY YEAR)'と
いう形のリストになる必要があります。在住地方で夏時間を採用していない場
合には、これらの値は`nil'にしておきます。

Emacsはこれらの式を用いて夏時間の開始日を決定し、祝祭日一覧や太陽や月に
関する計算の時刻補正に使います。

マサチューセッツ州ケンブリッジの値は以下のとおりです。

     (calendar-nth-named-day 1 0 4 year)
     (calendar-nth-named-day -1 0 10 year)

`year'で指定される年の4月の最初の日曜日（0番目）から始まり、その年の10
月の最後の月曜まで続くことを表します。夏時間の開始日が10月1日に変更され
たならば、変数`calendar-daylight-savings-starts'には以下のように設定し
ます。

     (list 10 1 year)

読者の地方で夏時間を採用していなかったり、すべての時刻を標準時で扱いた
い場合には、変数`calendar-daylight-savings-starts'と変数
`calendar-daylight-savings-ends'には`nil'を設定してください。

変数`calendar-daylight-time-offset'は、夏時間と標準時の差を分単位で指定
します。マサチューセッツ州ケンブリッジでは60（分）です。

2つの変数`calendar-daylight-savings-starts-time'と変数
`calendar-daylight-savings-ends-time'は、夏時間の開始／終了が地方時の真
夜中の0時から何分ずれるかを指定します。マサチューセッツ州ケンブリッジで
はどちらも120（分）です。


File: emacs-ja, Node: Gnus, Next: Customization, Prev: Calendar/Diary, Up: Top

gnus *(2005/05/04)*
===================

gnusは主にネットニュースを読んだり投稿するためのEmacsパッケージです。電
子メイル、リモートディレクトリ、ダイジェストなどのネットニュース以外の
メッセージを読んだりそれらに応答するのにも使えます。

以下ではgnusについて紹介し、いくつかの基本的な機能について説明します。
詳しくは、*Note Gnus: (gnus)Topを参照してください。

gnusを起動するには、`M-x gnus RET'と打ちます。

* Menu:

* Buffers of Gnus::	The group, summary, and article buffers.
* Gnus Startup::	What you should know about starting Gnus.
* Summary of Gnus::	A short description of the basic Gnus commands.



File: emacs-ja, Node: Buffers of Gnus, Next: Gnus Startup

gnusのバッファ
--------------

ふつうのEmacsのパッケージと違って、
gnusは多数の異なるバッファを使って情報を提示したり
ユーザーのコマンドを受け取ります。
ユーザーがもっとも多くの時間を使うことになるバッファは、
"グループバッファ"、"サマリバッファ"、
"記事バッファ"の3つです。

"グループバッファ"はニュースグループの一覧です。gnusが起動すると、まず
このバッファが表示されます。通常はユーザーが購読していて、かつ、未読記
事が存在するグループだけが表示されます。このバッファでグループを選択し
ます。

"サマリバッファ"は選択したグループ内の1つの記事につき1行の情報を表示し
ます。デフォルトでは、各記事の投稿者、題目、行数が表示されますが、gnus
のほとんどの表示内容と同様にこの表示内容はカスタマイズできます。グルー
プバッファでグループを選択するとサマリバッファが作られ、グループから出
ると削除されます。サマリバッファを使って記事を選択します。

"記事バッファ"は記事を表示します。gnusの普通の使い方では、このバッファ
を選択することはありません。記事を操作対象とするコマンド群はサマリバッ
ファで動作します。しかし、望むなら、記事バッファに切り替えて、そこで
gnusのコマンドを実行することも可能です。



File: emacs-ja, Node: Gnus Startup, Next: Summary of Gnus, Prev: Buffers of Gnus

gnusの起動時の動作
------------------

gnusが起動すると、個人のニュース初期化ファイル`.newsrc'を読み込み、ニュー
ス記事を蓄えているローカルのニュースサーバーと通信しようとします。ニュー
スサーバーは、ユーザーがログインしているマシンと同じである必要はありま
せん。

gnusを起動してニュースサーバーと通信したあとでもグループバッファにグルー
プが1つも表示されないときは、`L'や`A k'と打ってすべてのグループを表示さ
せます。つぎに各グループの行で`u'と打って個々のグループの購読／非購読を
切り替えます。

初めてgnusを起動したときは、ごく少数の選ばれたグループのみが
購読状態にあります。
他のグループは"非購読グループ"（killed groups）になっていて、
`A k'を使うと表示されます。
最初の起動以後にニュースサーバー上に追加されたグループはすべて、
"ゾンビグループ"（zombie groups）になっていて、
`A z'を使うと表示されます。
`u'を使えばこれらのグループを購読状態にできます。

`q'でgnusを終了すると、初期化ファイル`.newsrc'と`.newsrc.eld'にすべての
グループの購読／非購読を自動的に記録します。通常はこれらのファイルを手
で編集すべきではありませんが、やりかたがわかっているならかまいません。



File: emacs-ja, Node: Summary of Gnus, Next: Where to Look, Prev: Gnus Startup

gnusコマンドのまとめ *(2005/05/04)*
-----------------------------------

ニュースを読むにはつぎの2つの段階を踏みます。

  1. グループバッファでグループを選択する。

  2. サマリバッファで記事を選択する。記事を選択すると、サマリバッファの
     小さなウィンドウの下の大きめのウィンドウの中の記事バッファに選択し
     た記事が表示される。

gnusの各バッファにはそれぞれ独自のコマンドがあります。しかし、gnusのさ
まざまなバッファのどんなキーの意味も、等価ではないにせよ、だいたい同じ
です。以下は、グループバッファとサマリバッファのコマンドです。

`q'
     グループバッファでは、初期化ファイル`.newsrc'を更新してgnusを終了
     する。

     サマリバッファでは、カレントグループから抜け出てグループバッファに
     戻る。したがって、`q'を2回打つとgnusを終る。

`L'
     グループバッファでは、ニュースサーバーにある（非購読にしたもの以外
     の）すべてのグループを表示する。すごく長いリストになるかもしれない
     ので注意！

`l'
     グループバッファでは、購読中で未読記事があるグループのみを表示する。

`u'
     グループバッファでは、ポイントのある行のグループの購読／非購読を切
     り替える。`q'でgnusを終ると、gnusはこの状態を`.newsrc'ファイルに記
     録する。gnusは、通常、購読グループのみを表示するため、つぎにgnusを
     起動したときには非購読にしたグループは表示されない。

`C-k'
     グループバッファでは、ポイントのある行のグループを「抹消」する。す
     なわち、そのグループは以後`.newsrc'にも現れなくなる。このコマンド
     の効果は、現在のgnusセッションだけでなく将来のgnusセッションにも影
     響する。

     `q'でgnusを終了すると、gnusはファイル`.newsrc'に抹消したグループを
     除くすべてのグループの情報を書き出す。

`SPC'
     グループバッファでは、ポイントのある行に対応するグループを選択し、
     そのグループの最初の未読記事を表示する。

     サマリバッファでは、つぎのようになる。

        * 選択されている記事がなければ、ポイントのある行の記事を選択す
          る。

        * （選択されている記事があれば）その記事のテキストを1画面分進め
          る。

        * 選択されている記事の末尾にいる場合は、つぎの未読記事を選択す
          る。

     すなわち、繰り返しSPCを打と、すべての記事を順に見ていくことができ
     る。

`DEL'
     グループバッファでは、ポイントを未読記事がある1つまえのグループに
     移動する。

     サマリバッファでは、記事のテキストを1画面分戻す。

`n'
     ポイントをつぎの未読グループに進めるか、または、つぎの未読記事を選
     択する。

`p'
     ポイントをまえの未読グループへ戻すか、または、まえの未読記事を選択
     する。

`C-n'
`C-p'
     既読であってもポイントを1つあと／まえの項目に移動する。ポイントが
     ある行の記事やグループを選択することはしない。

`s'
     サマリバッファでは、記事バッファに切り替えて`C-s'を打ったかのよう
     に、記事バッファのテキストに対してインクリメンタルサーチを行う。

`M-s REGEXP RET'
     サマリバッファでは、
     REGEXPに一致する記事がみつかるまで前向きに探索する。





File: emacs-ja, Node: Shell, Next: Emacs Server

Emacsからシェルコマンドを実行する *(2005/05/08)*
================================================

Emacsには、1つのコマンド行を下位のシェルプロセスに渡して実行させる機能
があります。また、入出力を`*shell*'という名前のEmacsバッファに接続して
対話的にシェルを実行する機能やターミナルウィンドウ内でシェルを走らせる
機能もあります。

完全に Emacs 内で実現された shell もあります．ドキュメントは別のマニュ
アルにあります．*Note Eshell: (eshell)Top を参照ください．

`M-! CMD RET'
     シェルコマンドCMDを実行し、その結果を表示する（`shell-command'）。
`M-| CMD RET'
     リージョンの内容を入力としてシェルコマンドCMDを実行する。場合によっ
     ては、リージョンをシェルコマンドの出力で置き換える。
     （`shell-command-on-region'）。
`M-x shell'
     入出力をEmacsバッファに接続してサブシェルを実行する。すると、対話
     的にコマンドを入力できる。
`M-x term'
     Emacs のバッファを通して入力や出力を行うサブシェルを実行します．対
     話的にコマンドを実行できます．完全な端末が利用できます．
`M-x eshell'
     Emacs シェルを実行します．

* Menu:

* Single Shell::           How to run one shell command and return.
* Interactive Shell::      Permanent shell taking input via Emacs.
* Shell Mode::             Special Emacs commands used with permanent shell.
* History: Shell History.  Repeating previous commands in a shell buffer.
* Directory Tracking::     Keeping track when the subshell changes directory.
* Options: Shell Options.  Options for customizing Shell mode.
* Terminal emulator::      An Emacs window as a terminal emulator.
* Term Mode::              Special Emacs commands used in Term mode.
* Paging in Term::         Paging in the terminal emulator.
* Remote Host::            Connecting to another computer.



File: emacs-ja, Node: Single Shell, Next: Interactive Shell, Prev: Where to Look

単一のシェルコマンド *(2005/05/04)*
-----------------------------------

`M-!'（`shell-command'）は、新たに作ったサブシェルにて、ミニバッファで
読み取った1行のテキストをシェルコマンドとして実行します。シェルコマンド
の標準入力はnull装置（つまり空）です。シェルコマンドの出力があれば、エ
コー領域に表示される(もし出力が短かければ)か `*Shell Command Output*'と
いう名前のEmacsバッファに入れて別のウィンドウに表示しますが、（カレント
バッファには）選択しません(もし出力が長ければ)．

例えば，Emacs からファイル `foo.gz' を解凍する方法として，`M-! gunzip
foo.gz RET' を実行する方法があります．このシェルコマンドは普通ファイル
`foo' 作り，出力は生成しません．

`M-1 M-!'のように数引数を指定すると、
別バッファに表示するかわりに，シェルコマンドの出力をカレントバッファに挿入します。
ポイントは（挿入された）出力の先頭に置かれ、マークは出力の末尾に置かれます。例え
ば，`M-1 M-! gunzip < foo.gz RET' を実行すると，現在のバッファに
`foo.gz' を解凍した内容が表示されます．

シェルコマンドの末尾が`&'になっていると、シェルコマンドは非同期に実行さ
れます。同期実行のシェルコマンドでは、Lispプログラムから呼ばれたときに
は、`shell-command'はコマンドの終了状態（0は成功を意味する）を返します。
非同期コマンドは，まだ終了していませんので，状態の情報は得られません．

`M-|'（`shell-command-on-region'）は`M-!'と同様ですが、シェルコマンドの
標準入力は空ではなくリージョンの内容が引き渡されます。数引数を指定する
と、それまでのリージョンは削除されシェルコマンドの出力で置き換わり新た
なリージョンになります。このコマンドは、Lispプログラムから呼ばれたとき
には、コマンドの終了状態を返します。

`M-|' の1つの使い方は `uudecode' を実行することです．例えば，バッファに
uuencode されたテキストが含まれていれば， `C-x h M-| uudecode RET' を実
行すると，バッファ全体の内容がプログラム `uudecode' に送られます．プロ
グラムはエンコードされたテキスト以外はすべて無視をし，デコードされたテ
キストをエンコードされたテキストに特有な名前のファイルに保存されます．

`M-!'も`M-|'も、使用するシェルは`shell-file-name'で指定します。この変数
は、Emacs起動時の環境変数`SHELL'をもとに初期設定されます。ファイル名に
ディレクトリが指定されていなければ、`exec-path'に指定されているディレク
トリ群を探索します。`exec-path'の値は、Emacs起動時の環境変数 `PATH'をも
とに初期設定されます。個人のファイル`.emacs'でこれらの変数の初期値を自
由に変更してかまいません。

`M-!'も`M-|'もシェルコマンドの実行完了を待ち合わせます。待つのをやめた
い場合は、`C-g'で中断できます。この場合、シェルコマンドはシグナル
`SIGINT'で終了させられます。このシグナルは、シェルを使用中に`C-c'が普通
に送るシグナルと同じです。Emacsはシェルコマンドが実際に終了するまで待ち
ます。シェルコマンドが（シグナル`SIGINT'を無視して）停止しない場合は、
再度`C-g'を打ちます。すると、無視できないシグナル`SIGKILL'をシェルコマ
ンドに送ります。

`M-!'や`M-|'で使用するコーディングシステムを指定するには、
これらのコマンドの直前にコマンド`C-x RET c'を使います。
*Note Specify Coding::。

コマンドからのエラー出力は、通常、普通の出力と混ざり合ってしまいます。
変数`shell-command-default-error-buffer'にバッファ名の文字列を設定する
と、その名前のバッファのポイント位置のまえにエラー出力が挿入されます。



File: emacs-ja, Node: Interactive Shell, Next: Shell Mode, Prev: Single Shell

対話的な下位のシェル *(2005/05/08)*
-----------------------------------

サブシェルを対話的に実行し、その対話記録をEmacsバッファに残すには、
`M-x shell'を使います。このコマンドは、`*shell*'という名前のバッファを
作成（または再使用）し、このバッファに入出力するサブシェルを実行します。
つまり、サブシェルの『端末出力』はバッファに挿入されポイントを進め、サ
ブシェルの『端末入力』はバッファから取られます。サブシェルに入力を与え
るには、バッファの末尾へ移動して入力を打ち込み最後にRETを打ちます。

Emacsはサブシェルが何かするのを待つことはしません。シェルが待っていよう
がシェルコマンドを実行していようが、ウィンドウやバッファを切り替えて編
集できます。サブシェルからの出力は、Emacsがそれを取り込む処理を実行でき
るまで待たされます。取り込み処理は、Emacsがキーボード入力を待ったり、時
間待ちに入ったときに行われます。

行を入力し，それを一旦送ると，そのコマンドはフェイス
`comint-highlight-input' を使って表示され，プロンプトはフェイス
`comint-highlight-prompt' を使って表示されます．これにより，前に入力し
たコマンドを簡単に見つけることができます．*Note Faces::．

複数のサブシェルを使うには、`M-x shell' を数引数付きで実行します(例えば
`C-u M-x shell' のように)．実行すると，バンファ名を求められ，そのバッファ
にサブシェルを作成(あるいは，再使用)します．`M-x rename-uniquely' を使っ
て，`*shell*' バッファを別のものに変更することもできます．この時，`M-x
shell' を実行すると，新しく `*shell*' バッファが作成されます．個々のバッ
ファで，すべてのサブシェルは独立かつ並行に実行されます。

サブシェルとして実行するファイル名は、変数`explicit-shell-file-name' の
値が`nil'以外ならば、この変数の値で指定します。`nil'のときは、環境変数
`ESHELL'の値が使われますが、これが存在しない場合は環境変数`SHELL'の値が
使われます。指定されたファイル名が相対名の場合は、`exec-path'に指定され
ているディレクトリ群を探索します。変数`exec-path'は、Emacs起動時の環境
変数`PATH'をもとに初期設定されます。個人のファイル`.emacs'でこれらの変
数を自由に変更してかまいません。

Emacs は，ファイル `~/.emacs_SHELLNAME' が存在して，SHELLNAME が読み込
まれたシェルの名前であれば，新しいシェルに入力としてその内容を送ります．
例えば， bash を使っていれば `~/.emacs_bash' の内容を送ります．

シェルに対するコーディングシステムを指定するには、
`M-x shell'の直前にコマンド`C-x RET c'を使います。
または、シェルを開始したあとにシェルバッファで`C-x RET p'を
使っても指定できます。
*Note Specify Coding::。

もし環境変数 `EMACS' が設定されていなければ，Emacs はサブシェル内で
`t' の値で定義します．シェルスクリプトはこの変数を確認して， Emacs のサ
ブシェルから実行されているかどうかを確認します．



File: emacs-ja, Node: Shell Mode, Next: Shell History, Prev: Interactive Shell

シェルモード（Shellモード） *(2005/05/05)*
------------------------------------------

シェルバッファではシェル（shell）モードが使われ、プレフィックスキー
`C-c'を持つ特別なキーをいくつか定義しています。これらは、まず`C-c'を打
つことを除けば、Emacsの外でシェルを使うときの通常のコマンド行編集やジョ
ブ制御のキーに似せて定義してあります。以下は、シェル（shell）モードでの
特別なバインディングの一覧です。

`RET'
     バッファの末尾で打つと、1行分を入力としてシェルに送る。
     バッファの末尾以外では、現在行をバッファの末尾にコピーしてから、
     それを入力としてシェルに送る（`comint-send-input'）。
     行をコピーするとき、行の先頭部分のプロンプト(入力の前にあるプログラムによって出
     力されるテキスト)は無視されます (変数
     `comint-use-prompt-regexp-instead-of-fields' も参照のこと)．

`TAB'
     シェルバッファでポイントの直前にあるコマンド名やファイル名を補完す
     る（`comint-dynamic-complete'）。TABは、履歴参照（*Note History
     References::）や環境変数名も補完できる。

     変数`shell-completion-fignore'には、シェル（shell）モードでの補完
     において無視したいファイル名の拡張子のリストを指定する。デフォルト
     の設定では、`nil' ですが，ユーザによっては名前が、`~'、`#'、`%'で
     終るファイルを無視するために `("~" "#" "%")' に設定することを好み
     ます。関連する他のcomintモードではかわりに変数
     `comint-completion-fignore'を使う。

`M-?'
     シェルバッファのポイントの直前にあるファイル名の可能な補完内容を一
     時的に表示する（`comint-dynamic-list-filename-completions'）。

`C-d'
     文字を削除するか、または、EOF を送る
     （`comint-delchar-or-maybe-eof'）。シェルバッファの末尾で`C-d'を打
     つとサブシェルに EOF を送る。バッファのそれ以外の位置では、`C-d'を
     打つと通常どおり1文字削除する。

`C-c C-a'
     行の先頭に行く。ただし、プロンプトがある場合にはプロンプトの直後に
     行く（`comint-bol-or-process-mark'）。同じ行でこのコマンドを2回繰
     り返すと、2回目ではプロセスマークへ戻る。プロセスマークとは、サブ
     シェルへまだ送っていない入力の開始位置のこと。（通常、これは同じ場
     所であり、プロセスマークはその行のプロンプトの終りにある。ただし、
     `C-c SPC'のあとでは、プロセスマークはまえの行にあるかもしれない。）

`C-c SPC'
     複数の入力行を溜めておき、まとめて送る。このコマンドは、ポイントの
     まえに改行を挿入するが、少なくともまだ、その行を入力としてサブシェ
     ルへ送らない。RETを打つと、改行のまえの1行とあとの1行を（区切りの
     改行を含めて）まとめて送る。

`C-c C-u'
     バッファの末尾にある、まだシェルに送っていないテキストをすべてキル
     する（`comint-kill-input'）。

`C-c C-w'
     ポイントの直前の1語をキルする（`backward-kill-word'）。

`C-c C-c'
     シェル、または、あればサブジョブに割り込む
     （`comint-interrupt-subjob'）。また、このコマンドはシェルバッファ
     内のまだシェルに送っていないテキストもキルする。

`C-c C-z'
     シェル、または、あればサブジョブを中断する（`comint-stop-subjob'）。
     また、このコマンドはシェルバッファ内のまだシェルに送っていないテキ
     ストもキルする。

`C-c C-\'
     シェル、または、あればサブジョブにシグナルQUITを送る
     （`comint-quit-subjob'）。また、このコマンドはシェルバッファ内のま
     だシェルに送っていないテキストもキルする。

`C-c C-o'
     直前のシェルコマンドからのひとまとまりの出力を削除する
     （`comint-delete-output'）。
     シェルコマンドが大量の出力を出してしまったときなどに有効です。このコマンドは
     `comint-kill-output' が呼ばれるべき時に使われます．

`C-c C-s'
     シェルコマンドからのひとまとまりの出力をファイルに書き込みます
     (`comint-write-output')．数引数を付けると，かわりに追加されます．
     出力の最後にあるプロンプトは書き込まれません．

`C-c C-r'
`C-M-l'
     直前のひとまとまりの出力がウィンドウの先頭にくるようにスクロールす
     る。また、ポイントもそこへ動かす（`comint-show-output'）。

`C-c C-e'
     バッファの末尾がウィンドウの下端にくるようにスクロールする
     （`comint-show-maximum-output'）。

`C-c C-f'
     シェルコマンド1つ分だけ先へ進めるが、現在行の末尾より先へはいかな
     い（`shell-forward-command'）。変数`shell-command-regexp'には、シェ
     ルコマンドの終りの探し方（正規表現）を指定する。

`C-c C-b'
     シェルコマンド1つ分だけ手前へ戻るが、現在行の先頭よりまえへはいか
     ない（`shell-backward-command'）。

`C-c C-l'
     バッファのシェルコマンド履歴を別のウィンドウに表示する
     （`comint-dynamic-list-input-ring'）。

`M-x dirs'
     シェルにカレントディレクトリを問い合わせ、Emacs側のものをシェルに
     合わせる。

`M-x send-invisible RET TEXT RET'
     TEXTをエコーバックせずに読み取り、入力としてシェルへ送る。パスワー
     ドを問い合わせるようなプログラムを起動するシェルコマンドで役立つ。

     かわりに、つぎのようにして、Emacsにパスワードプロンプトを認識させ
     てエコーバックを抑制する方法もある。

          (add-hook 'comint-output-filter-functions
                    'comint-watch-for-password-prompt)

`M-x comint-continue-subjob'
     シェルプロセスを継続させる。これはまちがってシェルプロセスを休止さ
     せてしまった場合に役立つ。 (1) (*Note Shell Mode-Footnotes::)

`M-x comint-strip-ctrl-m'
     現在の一群のシェルの出力から復帰（コントロールM）文字を削除する。
     このコマンドのもっとも便利な使い方の1つは、サブシェルの出力を受け
     取ると自動的にこのコマンドが実行されるように設定しておくことである。
     そのためには、つぎのLisp式を評価すればよい。

          (add-hook 'comint-output-filter-functions
                    'comint-strip-ctrl-m)

`M-x comint-truncate-buffer'
     このコマンドは、変数`comint-buffer-maximum-size'で指定した大きさに
     シェルバッファの行数を切り詰める。サブシェルから出力を受け取るたび
     にこれを自動的に行うにはつぎのようにする。

          (add-hook 'comint-output-filter-functions
                    'comint-truncate-buffer)

シェル（shell）モードでは段落コマンドにも修正を加えてあり、シェルプロン
プトでのみ新しい段落が始まるようになっています。つまり、シェルバッファ
では、1つの段落はシェルコマンドとその出力から成るのです。

シェル（shell）モードは、対話的なサブプロセスと通信するための汎用モード
であるcomintモードからの派生です。ここまでにあげてきたコマンドの名前か
らもわかるように、シェル（shell）モードの数多くの機能は、実は、comintモー
ドからきています。シェル（shell）モードに固有な特別な機能は、カレントディ
レクトリの追跡、および、少数のユーザーコマンドに限られます。

comintモードから派生したEmacsのほかの機能としては、
GUD（*Note Debuggers::）と
`M-x run-lisp'（*Note External Lisp::）があります。

`M-x comint-run'を使うと、シェル（shell）モード固有の機能を持たない
comintモードで、任意のプログラムをサブプロセスとして実行できます。


File: emacs-ja  Node: Shell Mode-Footnotes, Up: Shell Mode

(1) シェルプロセスを休止すべきではない。シェルのサブジョブを休止す
るのとはまったく別のことであり、こちらは普通に行ってよい。ただし、
休止したサブジョブはシェルで再開させる必要がある。このコマンドでは
再開できない。



File: emacs-ja, Node: Shell History, Next: Directory Tracking, Prev: Shell Mode

シェルコマンド履歴 *(2005/05/08)*
---------------------------------

シェルバッファでは、以前に使ったシェルコマンドを再実行する方法が3つあり
ます。1つめは、ミニバッファと同じキーを使う方法です。すなわち、ミニバッ
ファの場合と同様に、ポイントはつねにバッファの末尾にある状態で、以前に
使ったシェルコマンドをバッファに挿入できます。2つめは、バッファ内で以前
のシェルコマンドの箇所に移動して、それをそのまま再実行するかバッファの
末尾にコピーします。3つめは、`!'形式の履歴参照を使うことです。

* Menu:

* Ring: Shell Ring.             Fetching commands from the history list.
* Copy: Shell History Copying.  Moving to a command and then copying it.
* History References::          Expanding `!'-style history references.



File: emacs-ja, Node: Shell Ring, Next: Shell History Copying, Prev: Shell History, Up: Shell History

シェル履歴リング *(2005/05/08)*
...............................

`M-p'
     今のものより1つまえの古いシェルコマンドを持ってくる。

`M-n'
     今のものより1つあとの古いシェルコマンドを持ってくる。

`M-r REGEXP RET'
`M-s REGEXP RET'
     REGEXPに一致する古いシェルコマンドを後向きまたは前向きに探索する。

`C-c C-x (Shell mode)'
     履歴からつぎのコマンドを持ってくる。

`C-c . (Shell mode)'
     以前に入力したシェルコマンドから1つ引数を持ってくる．

シェルバッファには、それまでに入力したシェルコマンドの履歴があります。
この履歴からシェルコマンドを再利用するには、編集コマンド、`M-p'、`M-n'、
`M-r'、`M-s'を使います。これらはミニバッファの履歴コマンドと同様に働き
ますが、（普通はシェルに送るテキストを挿入する）シェルバッファの末尾に
あるテキストに作用する点が異なります。

`M-p'は、1つまえのシェルコマンドをシェルバッファの末尾に持ってきます。
`M-p'を連続して使うと、次々にそれよりまえに実行したシェルコマンドを持っ
てきて、それまでのシェルへの入力用テキストを置き換えます。`M-n'も同様で
すが、次々にそれよりあとのシェルコマンドを持ってくる点が異なります。

履歴探索コマンド`M-r'と`M-s'は、正規表現を読み取り、それに一致するシェ
ルコマンドを履歴の中から探します。どのシェルコマンドを持ってくるかとい
う点を除けば、それらの働きは`M-p'や`M-n'と同じです。正規表現として空文
字列を入力すると、直前に使用した正規表現を再使用します。

再使用したいシェルコマンドを探したならば、RETを打ってそのシェルコマンド
を再実行するか、必要なら編集してから実行します。

以前に連続して実行した一連のシェルコマンドをまとめて再実行できると便利
なことがあります。それには、まず、一連のシェルコマンドの最初のものを探
して再実行します。そうしてから`C-c C-x'と打ちます。これは、直前に再実行
したシェルコマンドの（履歴内で）つぎにあるシェルコマンドを持ってきます。
RETと打って再実行します。このように、`C-c C-x RET'を繰り返し打てば一連
のシェルコマンドを再実行できます。

コマンド `C-c .' (`comint-input-previous-argument') は Bash での
`ESC .' のように，前のコマンドからそれぞれの引数をコピーします．最も単
純な使い方は前のシェルコマンドから最近の引数をコピーすることです．数引
数 N を付けると，かわりに N 番目の引数をコピーします．`C-c .' を繰り返
し実行すると，さらに前のシェルコマンドの引数をコピーできます．この時，
いつも N の値を使います (`C-c .' を繰り返す時には引数を与えないでくださ
い)．

これらのコマンドは過去に実行したシェルコマンドを専用の履歴リストから持っ
てくるのであって、シェルバッファからとってくるのではありません。したがっ
て、シェルバッファを編集したり、その大部分をキルしたとしても、これらの
コマンドが参照する履歴には影響しません。

いくつかのシェルは、コマンド履歴をファイルに保管して以前のセッションの
履歴を引き継げるようになっています。Emacsは、自分の履歴リストを初期設定
するために、ユーザーが使うシェルの履歴ファイルを読み込みます。ファイル
名は、bashであれば`~/.bash_history'、kshであれば`~/.sh_history'、その他
のシェルであれば`~/.history'です。



File: emacs-ja, Node: Shell History Copying, Next: History References, Prev: Shell Ring, Up: Shell History

シェル履歴のコピー
..................

`C-c C-p'
     ポイントを1つまえのプロンプトへ移動する
     （`comint-previous-prompt'）。

`C-c C-n'
     ポイントを1つあとのプロンプトへ移動する（`comint-next-prompt'）。

`C-c RET'
     ポイントがあるところの入力コマンドをバッファの末尾にコピーする
     （`comint-copy-old-input'）。このコマンドはポイントを古いシェルコ
     マンドへ移動したときに役立つ。シェルコマンドをコピーしたら、RETで
     それを（シェルへ）送る。必要ならシェルコマンドを修正してから送って
     もよい。

ポイントをまえの入力箇所に移動してから`C-c RET'でコピーしても、`M-p'を
必要な回数使って履歴リストからまえのコマンドを持ってきたのと（バッファ
の内容が同じという意味で）同じ結果になります。ただし、`C-c RET'はバッファ
からテキストをコピーするので、シェルへ送ったあとでそれをバッファ上で編
集した場合には、履歴リストにあるものとは異なることもあります。



