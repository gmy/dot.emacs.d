Info file: emacs-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs-ja: (emacs-ja).	            Emacs21.3日本語マニュアル.
END-INFO-DIR-ENTRY








File: emacs-ja, Node: Citing Mail, Next: Mail Mode Misc, Prev: Header Editing, Up: Mail Mode

メイルの引用
------------

メイル（mail）モードには、返信対象であるメッセージの全部や一部をヤンク、
つまり、"引用"（cite）するためのコマンドもあります。こうしたコマンドは
rmailコマンドを使ってメッセージを送信する場合にだけ使えます。

`C-c C-y'
     rmailで選択したメッセージをヤンクする（`mail-yank-original'）。
`C-c C-r'
     rmailバッファで選択したリージョンをヤンクする
     （`mail-yank-region'）。
`C-c C-q'
     別のメッセージからの引用を段落に詰め込む
     （`mail-fill-yanked-message'）。

rmailコマンドを使ってrmailメイルリーダからメイル送信を起動したときには、
`C-c C-y'を使って返信対象のメッセージをメイルバッファに挿入できます。こ
のコマンドは、引用メッセージの各行を空白3文字で字下げしてほとんどのヘッ
ダフィールドを削除します。数引数は字下げする文字数を指定します。`C-u'だ
けを指定すると、字下げをせずにヘッダフィールドも削除しません。`C-c
C-y'は、つねにrmailバッファのカレントメッセージを使います。したがって、
rmailで1つメッセージを選択してから`*mail*'バッファに切り替えてヤンクし、
また、rmailに切り替えて別のメッセージを選択してというようにすれば、複数
の古いメッセージを挿入できます。

`C-c C-y'が各行の先頭に挿入する文字列は指定できます。変数
`mail-yank-prefix'に望みの文字列を設定します。（値が`nil'だと字下げしな
い。デフォルトはこれ。）しかし、`C-u C-c C-y'と打った場合、変数
`mail-yank-prefix'の値に関係なく、各行の行頭には何も挿入しません。

届いたメイルの一部だけをヤンクするには、rmailで目的の部分にリージョンを
設定します。そして`*mail*'バッファに移って`C-c C-r'
（`mail-yank-region'）と打ちます。コピーされる各行は、
`mail-yank-prefix'に従って字下げされるか行頭に文字列が挿入されます。

`C-c C-y'や`C-c C-r'を使い終ったら、`C-c
C-q'（`mail-fill-yanked-message'）と打てばヤンクした古いメッセージを段
落に詰め込めます (1) (*Note Citing Mail-Footnotes::)。引用したメッセー
ジを1つの段落に詰め込むには、`M-q'を使います。詰め込み処理で行頭の
文字を自動的に正しく扱えない場合には、詰め込み接頭辞を陽に指定して試し
てください。*Note Filling::。


File: emacs-ja  Node: Citing Mail-Footnotes, Up: Citing Mail

(1) 【訳注】これは欧文用のコマンドで、日本語で入力する場合にはあまり関
係ない。



File: emacs-ja, Node: Mail Mode Misc, Prev: Citing Mail, Up: Mail Mode

その他のメイルモードコマンド
----------------------------

`C-c C-t'
     メッセージの本文の先頭に移動する（`mail-text'）。
`C-c C-w'
     ファイル`~/.signature'をメッセージの本文の末尾に挿入する
     （`mail-signature'）。
`C-c C-i FILE RET'
     FILEの内容を送信メッセージの末尾に挿入する（`mail-attach-file'）。
`M-x ispell-message'
     メッセージの本文について綴りの訂正を行う。ただし、他のメッセージか
     らの引用部分については行わない。

`C-c C-t'（`mail-text'）は、ポイントをヘッダの区切り行のあと、つまり、
メッセージ文の先頭に移動します。

`C-c C-w'（`mail-signature'）は、あなたを識別するための決まり文句（サイ
ン）をメッセージの末尾に追加します。このテキストは、ホームディレクトリ
のファイル`~/.signature'から取ります。このサインを自動的に挿入するよう
にするには、変数`mail-signature'に`t'を設定します。そうすると、メイルメッ
セージに自動的にファイル`~/.signature'の内容が付加されます。特定のメッ
セージにサインを付けたくなければ、送信前にバッファ内で削除してください。

変数`mail-signature'に文字列を指定することもできます。すると、送信メッ
セージを編集し始めると、その文字列はサインとして自動的に挿入されます。
この変数にそれ以外のLisp式を指定すると、毎回その式が評価されその値（文
字列であること）がサインになります。

コマンド`M-x ispell-message'で、
書きあげたメッセージの綴りを訂正できます。
このコマンドは、引用部分については調べませんが、
あなた自身が打ち込んだテキストは検査します。
（字下げや`mail-yank-prefix'を利用して、
引用部分とあなたの入力部分を区別します。）
*Note Spelling::。

送信メッセージにファイルを付加するには、カレントバッファにファイルを挿
入する普通のコマンド`C-x i'を使います。しかし、専用コマンド`C-c
C-i'（`mail-attach-file'）を使うほうがより便利なことがしばしばあります。
このコマンドは、指定したファイルの内容をバッファの最後、サインがあれば
そのうしろに、ファイル名を含んだ区切り行を付けて挿入します。

（`C-x m'が自動的に行うように）メイル（mail）モードをオンにすると、
ノーマルフック、`text-mode-hook'と`mail-mode-hook'とが
実行されます。
新たな送信メッセージを初期化するときには、
ノーマルフック`mail-setup-hook'を実行します。
メイルヘッダに特別なフィールドを追加したり
メイルバッファの外見を変えたいならば、これらのフックを使ってください。
*Note Hooks::。

これらのフックの主な違いは、どの時点で起動されるかです。`M-x mail'と打
鍵すると、`*mail*'バッファを作成後ただちに`mail-mode-hook'が実行されま
す。続いて`mail-setup'関数がバッファにデフォルトの内容を入れます。その
あとで、`mail-setup-hook'が実行されます。



File: emacs-ja, Node: Distracting NSA, Next: Mail Methods, Prev: Mail Mode, Up: Sending Mail

NSAを悩ますには
===============

`M-x spook'は、ランダムに選んだキーワードから成る行を送信メッセージに付
け加えます。破壊活動を画策していると思わせるような単語の一覧表からキー
ワードを選びます。

この機能の思想的背景には、NSA (1) (*Note Distracting NSA-Footnotes::)
は自分たちが関心を持つ特定のキーワードを含んだすべての電子メイルを盗聴
（盗読？）しているのではないかという疑いがあります。（NSAは否定していま
すが、彼らなら*当然*そういい張るだろう。）多くの人々が怪しい単語をメッ
セージに付加しておけば、NSAはこうした疑わしいメイルの盗聴で非常に忙しく
なり、おしまいにはこうした行為を止めるのではないかと考えたからです。


以下は、送信メッセージを編集し始めると自動的に怪しいキーワードを付け加
える方法です。

     (add-hook 'mail-setup-hook 'spook)

これでNSAが混乱してもしなくても、少なくとも人々を楽しませることができま
す。


File: emacs-ja  Node: Distracting NSA-Footnotes, Up: Distracting NSA

(1) 【訳注】NSAとはNational Security Agency （合衆国国家安全保障局）の
略。合衆国の公益に基づいて必要により、電話やInternetなどの盗聴を行って
いると噂されている。この部分は日本国内だけでメイルをやりとりする限りに
おいてはあまり関係はないだろう。



File: emacs-ja, Node: Mail Methods, Prev: Distracting NSA, Up: Sending Mail

メイル作成方式
==============

本章では、メイルを編集／送信するためのEmacsの通常のモード、メイル
（mail）モードについて説明してきました。本書ではふれていませんが、MH-E
やメッセージ（message）モードを含む別のメイル編集／送信機能もEmacsには
あります。コマンド、`C-x m'、`C-x 4 m'、`C-x 5 m'は、指定されたどの方式
にも対応しています。ですから、メイルを送信するEmacsのさまざまなコマンド
や機能を利用できます。

メイル作成方式を指定するには、変数`mail-user-agent'を設定します。
現時点で正しい設定として認められるものは、
`sendmail-user-agent'、`mh-e-user-agent'、
`message-user-agent'です。

異なるメイル作成方式を選択すると、本章で述べた`*mail*'バッファやメイル
（mail）モードについての説明は役に立ちません。異なったメイル作成方式で
は、異なった名前のバッファで異なった形式のまったく異なったコマンドを使
うかもしれないからです。



File: emacs-ja, Node: Rmail, Next: Dired, Prev: Sending Mail, Up: Top

メイルの閲覧rmail
*****************

rmailは、受け取ったメイルを読んだり処理したりするためのEmacsのサブシス
テムです。rmailは、メイルメッセージをrmailファイルと呼ばれるファイルに
格納します。rmailファイル内のメッセージを読むには、rmailモードという特
別なメジャーモードで行います。このモードでは、メイルを取り扱うコマンド
を実行するようにほとんどのアルファベット文字を再定義しています。コマン
ド`rmail-mode'でrmailモードに切り替えます。するといつものようにフック
`rmail-mode-hook'が実行されます。しかし、このコマンドを直接実行しないで
ください。正しいrmailファイルを訪問しているバッファでない限り、このコマ
ンドはまともに動きません。

* Menu:

* Basic: Rmail Basics.       Basic concepts of Rmail, and simple use.
* Scroll: Rmail Scrolling.   Scrolling through a message.
* Motion: Rmail Motion.      Moving to another message.
* Deletion: Rmail Deletion.  Deleting and expunging messages.
* Inbox: Rmail Inbox.        How mail gets into the Rmail file.
* Files: Rmail Files.        Using multiple Rmail files.
* Output: Rmail Output.	     Copying message out to files.
* Labels: Rmail Labels.      Classifying messages by labeling them.
* Attrs: Rmail Attributes.   Certain standard labels, called attributes.
* Reply: Rmail Reply.        Sending replies to messages you are viewing.
* Summary: Rmail Summary.    Summaries show brief info on many messages.
* Sort: Rmail Sorting.       Sorting messages in Rmail.
* Display: Rmail Display.    How Rmail displays a message; customization.
* Editing: Rmail Editing.    Editing message text and headers in Rmail.
* Digest: Rmail Digest.      Extracting the messages from a digest message.
* Out of Rmail::	     Converting an Rmail file to mailbox format.
* Rot13: Rmail Rot13.	     Reading messages encoded in the rot13 code.
* Movemail: Movemail.        More details of fetching new mail.



File: emacs-ja, Node: Rmail Basics, Next: Rmail Scrolling, Prev: Rmail, Up: Rmail

rmailの基本概念
===============

もっとも簡単なrmailの使い方では、`~/RMAIL'という1つのrmailファイルにす
べてのメイルを保存します。これを"主rmailファイル"（primary Rmail file）
といいます。コマンド`M-x rmail'は、主rmailファイルを読み込み、inbox
(1) (*Note Rmail Basics-Footnotes::) 内の新しいメイルを併合して、最初の
未読メッセージを表示してメイルを読み始められるようにします。変数
`rmail-file-name'で、主rmailファイルの名前を指定します。

rmailは、rmailファイルの1つのメッセージだけが見えるようにナロイングしま
す。表示されているメッセージを"カレントメッセージ"（current message）と
呼びます。rmailモードの特別なコマンドを使えば、カレントメッセージを削除
(2) (*Note Rmail Basics-Footnotes::) する、別のファイルへコピーする、返
信を送る、別のメッセージへ移動することができます。また、複数のrmailファ
イルを作って、それらのあいだでメッセージを移すこともできます。

rmailファイル内では、一般にメッセージは受け取った順に並べられます。別の
順序にソートすることもできます。メッセージには"メッセージ番号
（message numbers）として連続した整数が割り振られます。カレントメッセー
ジの番号は、rmailのモード行に表示され、そのあとにファイル内の総メッセー
ジ数も表示されます。`j'キーにメッセージ番号を指定すれば、その番号のメッ
セージに移動できます（*Note Rmail Motion::）。

Emacsの習慣に従って、rmailファイルの変更はファイルを保存したときにだけ
反映されます。`s'（`rmail-save'）で保存しますが、削除（*Note Rmail
Deletion::）と指定されたメッセージをファイルからまず抹消します。抹消せ
ずにファイルを保存するには、`C-x C-s'を使います。さらに、inboxから新着
メイルを併合したあとにもrmailファイルを保存します（*Note Rmail
Inbox::）。

rmailを終了するには`q'（`rmail-quit'）を使います。（メッセージを）抹消
しrmailファイルを保存してから、別のバッファに切り替えます。しかし、正し
く「終了」する必要はありません。rmailから別のバッファへ切り替えて、その
あと戻らなければ終了したことになります。（rmailコマンド`b'、
`rmail-bury'がこれを行う。）（変更したファイルにするのと同様に）rmailファ
イルを確実に保存するようにしてください。これには、`C-x s'がよいでしょう
（*Note Saving::）。


File: emacs-ja  Node: Rmail Basics-Footnotes, Up: Rmail Basics

(1) 【訳注】システムが到着メイルを格納するファイルのこと。実際のファイ
ル名はシステムに依存する。

(2) 【訳注】あとで説明されるように、「削除」といっても実際には「削除印」
を付けるだけ。



File: emacs-ja, Node: Rmail Scrolling, Next: Rmail Motion, Prev: Rmail Basics, Up: Rmail

メッセージをスクロールする
==========================

rmailが表示するメッセージが画面に入りきらないとき、残りの部分を読むには
スクロールする必要があります。これには、`C-v'、`M-v'、`M-<'を使いますが、
rmailではスクロールを頻繁に行うので、もっと簡単な操作を用意してあります。

`SPC'
     先へ進める（`scroll-up'）。
`DEL'
     まえへ戻す（`scroll-down'）。
`.'
     メッセージの先頭へ戻る（`rmail-beginning-of-message'）。

メッセージを読むときもっとも多く行うことは画面単位でのスクロールなので、
rmailでは、SPCとDELは、それぞれ、`C-v'（`scroll-up'）と
`M-v'（`scroll-down'）の同義になっています。

コマンド`.'（`rmail-beginning-of-message'）は、選択されているメッセージ
の先頭に移動します。このコマンドは`M-<'とまったく同じというわけではあり
ません。まず、マークを設定しません。さらに、カレントメッセージを変更し
てあるとバッファの境界を再設定します。



File: emacs-ja, Node: Rmail Motion, Next: Rmail Deletion, Prev: Rmail Scrolling, Up: Rmail

メッセージ間での移動
====================

もっとも基本的な操作は、メッセージを読むことです。rmailでこれを行うには、
メッセージをカレントメッセージにします。メッセージは受け取った順に並ん
でいるので、通常はファイルの中を順に移動して読んでいきます。rmailに入る
と、カレントメッセージにしたことがない最初のメッセージから始まります
（つまり、未読を意味する`unseen'属性が付いている最初のもの。*Note
Rmail Attributes::）。先へ進めば他の新しいメッセージを読めます。まえへ
戻れば古いメッセージを読み直せます。

`n'
     削除されたメッセージを飛ばして、削除されていないつぎのメッセージへ
     移動する（`rmail-next-undeleted-message'）。
`p'
     削除されていないまえのメッセージへ移動する
     （`rmail-previous-undeleted-message'）。
`M-n'
     削除されたメッセージも含めてつぎのメッセージへ移動する
     （`rmail-next-message'）。
`M-p'
     削除されたメッセージも含めてまえのメッセージへ移動する
     （`rmail-previous-message'）。
`j'
     最初のメッセージへ移動する。数引数Nを指定すると、メッセージ番号Nの
     メッセージへ移動する（`rmail-show-message'）。
`>'
     最後のメッセージへ移動する（`rmail-last-message'）。
`<'
     最初のメッセージへ移動する（`rmail-first-message'）。

`M-s REGEXP RET'
     正規表現REGEXPに一致するつぎのメッセージへ移動する
     （`rmail-search'）。

`- M-s REGEXP RET'
     正規表現REGEXPに一致するまえのメッセージへ移動する。

`n'と`p'は、rmailでメッセージ間を移動する普通の方法です。これらのコマン
ドは、メッセージ間を順々に移動していきますが、期待どおりに削除されたメッ
セージは飛び越えます。コマンドの定義名は`rmail-next-undeleted-message'
と`rmail-previous-undeleted-message'です。削除されたメッセージを飛び越
したくない場合、たとえば、削除されたメッセージをアンデリート (1)
(*Note Rmail Motion-Footnotes::)したいときは、（`n'や`p'の）変形である
`M-n'や`M-p'（`rmail-next-message'、`rmail-previous-message'）を使いま
す。これらのコマンドに数引数を指定すると、反復回数とみなします。

rmailでは、数字を打つだけで数引数を指定できます。始めに`C-u'を打つ必要
はありません。

`M-s'（`rmail-search'）コマンドは、rmailにおける探索を行います。
通常のインクリメンタルサーチコマンド`C-s'もrmailで使えますが、
これはカレントメッセージの中だけを探索します。
`M-s'コマンドの目的は、他のメッセージを探すことです。
正規表現（*Note Regexps::）を読み終えてから、
つぎのメッセージの先頭から一致するものを探し始めます。
そしてみつかったメッセージを選択します。
REGEXPが空だと`M-s'は最後に使った正規表現を再使用します。

ファイル内で逆向きに他のメッセージを探索するには、`M-s'に負の数引数を指
定します。rmailでは、`- M-s'と打てばよいのです。

ラベルをもとにメッセージを探索することもできます。
*Note Rmail Labels::。

メッセージ番号を指定してメッセージへ移動するには、
メッセージ番号を引数として`j'（`rmail-show-message'）を使います。
引数がないと`j'は最初のメッセージを選択します。
`<'（`rmail-first-message'）も最初のメッセージを選択します。
`>'（`rmail-last-message'）は最後のメッセージを選択します。


File: emacs-ja  Node: Rmail Motion-Footnotes, Up: Rmail Motion

(1) 【訳注】メッセージに付けた削除印を消すこと。



File: emacs-ja, Node: Rmail Deletion, Next: Rmail Inbox, Prev: Rmail Motion, Up: Rmail

メッセージの削除
================

メッセージを保存しておく必要がなくなったら、そのメッセージを"削除
（delete）できます。「無視せよ」という意味の削除印をメッセージに付けま
す。すると、いくつかのrmailコマンドはそのメッセージが存在しないものとし
て扱います。しかし、そのメッセージはまだrmailファイルの中にあって、メッ
セージ番号も付いています。

rmailファイルを"抹消"（expunging）すると、削除印が付いたメッセージを本
当に消し去ります。残ったメッセージには番号を順に振り直します。抹消は、
アンダイジェスト（*Note Rmail Digest::）を除いて、メッセージ番号を変更
する唯一の動作です。

`d'
     カレントメッセージを削除し、削除されていないつぎのメッセージへ移動
     する（`rmail-delete-forward'）。
`C-d'
     カレントメッセージを削除し、削除されていないまえのメッセージへ移動
     する（`rmail-delete-backward'）。
`u'
     カレントメッセージをアンデリートする、あるいは、削除されたまえのメッ
     セージへ戻ってアンデリートする
     （`rmail-undelete-previous-message'）。
`x'
     rmailファイル（の削除の付いたメッセージ）を抹消する
     （`rmail-expunge'）。

rmailにはメッセージを削除するコマンドが2つあります。どちらもカレントメッ
セージを削除し、別のメッセージを選択します。
`d'（`rmail-delete-forward'）はすでに削除したメッセージを飛ばしてつぎの
メッセージへ移動しますが、`C-d'（`rmail-delete-backward'）はまえのメッ
セージへ移動します。指定した方向に削除されていないメッセージがないとき
は、削除したばかりのメッセージがカレントメッセージのままです。どちらの
コマンドに対しても、数引数を指定すると、削除後の移動方向を反転します。

rmailがメッセージを削除するときはいつでも、`rmail-delete-message-hook'
に登録されている関数（群）を起動します。フック関数が起動されるときには、
メッセージに削除印が付いていますが、rmailバッファではそのメッセージはカ
レントメッセージのままです。

削除したすべてのメッセージをrmailファイルから本当に消すには
`x'（`rmail-expunge'）と打ちます。これを実行するまえならば、"アンデリー
ト"（undelete）、つまり、メッセージの削除印を消すことができます。アンデ
リートコマンド、`u'（`rmail-undelete-previous-message'）は`d'コマンドの
効果をほとんどの場合打ち消します。カレントメッセージが削除されていれば、
カレントメッセージをアンデリートします。そうでなければ、削除されたメッ
セージがみつかるまでまえへ戻り、そのメッセージをアンデリートします。

普通は`u'で`d'をアンドゥできます。
なぜなら、`d'で削除したメッセージを
まえへ戻って探してそのメッセージを`u'がアンデリートするからです。
しかし、`d'がメッセージを削除してから
後続のすでに削除されたメッセージを飛び越す場合には、
うまくいきません。
この場合、`u'コマンドは飛び越したメッセージのうちの
最後のものをアンデリートします。
この問題を回避する簡単な方法はありません。
ですが、`u'コマンドを繰り返せば、
最終的にはアンデリートしたいメッセージに辿り着きます。
あるいは、`M-p'コマンドで目的の削除されたメッセージに移動してから
`u'を打ってアンデリートします。

削除されたメッセージには、`deleted'という属性が付きます。
その結果、カレントメッセージが削除されていると
モード行に`deleted'と表示されます。
メッセージを削除する、あるいは、アンデリートすると、
実際には、メッセージにこの属性を付加する、あるいは、取り去るだけです。
*Note Rmail Attributes::。



File: emacs-ja, Node: Rmail Inbox, Next: Rmail Files, Prev: Rmail Deletion, Up: Rmail

rmailファイルとinbox
====================

オペレーティングシステムは、"inbox"と呼ばれるファイルに到着したメイルを
格納します。rmailを起動すると、`movemail'と呼ばれるCプログラムが走り、
inboxから主rmailファイルへ新着メッセージをコピーします。ただし、主
rmailファイルには、以前のrmailセッションで保存したメッセージも入ってい
ます。実際にrmailで読むメイルはこのファイルの中にあるのです。この操作を、
新着メイルの取得"といいます。rmail内で`g'と打てば、いつでも新着メイルを
取得できます。

変数`rmail-primary-inbox-list'には、
主rmailファイルのinboxとなるファイルのリストを格納します。
この変数を明示的に設定しなければ、
環境変数`MAIL'で初期化するか、あるいは、
最後の手段として、デフォルトのinboxを使うことを意味する
`nil'に設定します。
デフォルトのinboxはオペレーティングシステムに依存して、
`/var/mail/USERNAME'、`/usr/spool/mail/USERNAME'、
`/usr/mail/USERNAME'になります。

システムのデフォルトを調べるには、
`C-h v rmail-primary-inbox RET'を使います。
コマンド`set-rmail-inbox-list'で、
任意のrmailファイルに対して使うinboxファイルを指定できます。
*Note Rmail Files::を参照してください。

rmailファイルとinboxに分ける理由は2つあります。

  1. inboxのファイル形式は、オペレーティングシステムや使用するメイルソ
     フトに依存して異なる。rmailの一部分だけが違いを知っていればよく、
     しかも、rmail独自の形式への変換方法だけを知っていればよい。

  2. メイル紛失という危険を犯さずにinboxを参照するのはたいへん厄介であ
     る。というのは、メイル配送プログラムと相互排除を行う必要があるから。
     さらに、オペレーティングシステムごとに相互排除の手法が異なる。いっ
     たんinboxからメイルを取り出し、あとは別のrmailファイルを使う方式で
     は、rmailファイルしか扱わないのでrmailの各所で相互排除する必要がな
     くなる。

rmailでは独自の内部形式（Babyl形式）を使っています。当初からUNIXやGNUシ
ステムの普通のinbox形式で十分であると気づいていて、inbox形式を内部形式
として使おうと計画しています。しかし、たとえファイルの形式が同一であっ
ても、rmailファイルはinboxファイルとは独立して存在し続けるでしょう。



File: emacs-ja, Node: Rmail Files, Next: Rmail Output, Prev: Rmail Inbox, Up: Rmail

複数のrmailファイルの扱い方
===========================

rmailはデフォルトでは個人の主rmailファイルを操作します。このファイルは、
`~/RMAIL'という名前で、システムのinboxファイルから到着メイルを受け取り
ます。しかし、別のrmailファイルを作ってそれをrmailで編集することもでき
ます。これらのファイルはそれぞれ独自のinboxからメイルを受け取ったり、あ
るいは、rmailコマンドでそれらのあいだでメッセージを移せます（*Note
Rmail Output::）。

`i FILE RET'
     FILEをEmacsに読み込み、それに対してrmailを実行する
     （`rmail-input'）。

`M-x set-rmail-inbox-list RET FILES RET'
     現在のrmailファイルに対してメイルを取り込むinboxファイルを指定する。

`g'
     現在のrmailファイルのinboxから新着メイルを取得する
     （`rmail-get-new-mail'）。

`C-u g FILE RET'
     inboxファイルFILEから新着メイルを取得する。

主rmailファイル以外のファイルに対してrmailを実行するには、rmailで
`i'（`rmail-input'）コマンドを使います。このコマンドは、指定されたファ
イルをrmailモードで訪問します。rmailの外からでも`M-x rmail-input'を使え
ます。

`i'で読み込むファイルは、  通常、正しいrmailファイルであるべきです。
そうでなければ、rmailは既知のさまざまな形式を用いて
メッセージに分解しようと試みます。
それに成功すれば、ファイル全体をrmailファイルに変換します。
存在しないファイル名を指定すると、
`i'コマンドは新たなrmailファイル用の新しいバッファを初期化します。

メニューからrmailファイルを選択することもできます。まず、メニューバーか
ら項目Classifyを選びます。続いて、Classifyメニューから項目Input Rmail
Fileを選びます。そして、望みのrmailファイルを選択します。変数
`rmail-secondary-file-directory'と 変数`rmail-secondary-file-regexp'で、
メニューに含めるべきファイルを指定します。最初の変数では探すべきディレ
クトリを指定し、2番目の変数ではディレクトリ中のどのファイルか（正規表現
に一致するもの）を指定します。これらの変数は出力用のファイルを選択する
ときにも使われます。

各rmailファイルには、inboxファイル名の一覧を持たせることができます。こ
の一覧は、`M-x set-rmail-inbox-list RET FILES RET'で指定します。引数に
は、コンマで区切っていくつもファイル名を書けます。引数が空でもかまいま
せんが、その場合、そのファイルにはinboxがないという指定になります。いっ
たんinboxの一覧を指定すれば、新たに指定し直さない限り、rmailファイルは
それを覚えています。

特別な例外として、主rmailファイルにinboxファイルを指定しないと、システ
ム標準のinboxを使用します。

`g'（`rmail-get-new-mail'）コマンドは、指定されたinboxから現在のrmailファ
イルにメイルを併合します。rmailファイルにinboxが指定されていなければ、
`g'は何もしません。コマンド`M-x rmail'も、主rmailファイルに新着メイルを
併合します。

普通のinboxでないファイルからメイルを併合するには、`C-u g'のように`g'キー
に数引数を指定します。すると、ファイル名を読み取り、そのファイルからメ
イルを併合します。`g'に引数を指定したときには、inboxファイルを削除した
り変更したりしません。したがって、これは、メッセージファイルを別のメッ
セージファイルへ併合する一般的な方法です。



File: emacs-ja, Node: Rmail Output, Next: Rmail Labels, Prev: Rmail Files, Up: Rmail

ファイルへのメッセージのコピー
==============================

以下のコマンドで、rmailファイルから別のファイルへメッセージをコピーでき
ます。

`o FILE RET'
     デフォルトではrmailファイル形式を用いて、カレントメッセージのコピー
     をファイルFILEへ追加する。（`rmail-output-to-rmail-file'）。

`C-o FILE RET'
     デフォルトではシステムのinboxファイル形式を用いて、カレントメッセー
     ジのコピーをファイルFILEへ追加する。

`w FILE RET'
     メッセージのヘッダ`Subject'からデフォルトのファイル名を作り、メッ
     セージの本文だけをファイルFILEに書き出す。

コマンド`o'と`C-o'は、カレントメッセージを指定したファイルへコピーしま
す。そのファイルは、rmailファイルでもシステムのinbox形式でもかまいませ
ん。出力コマンドは、ファイルの形式を確かめその形式に従ってメッセージの
コピーを書き込みます。

メッセージをUNIXのmailファイル形式のファイルにコピーする場合、これらの
コマンドは現在表示しているヘッダもコピーします。表示（しコピー）するヘッ
ダを指定したい場合には、あらかじめ`t'コマンドを使ってください。

コマンド`o'と`C-o'は2つの点で異ります。
それぞれ、独自のデフォルトのファイル名を持ち、
ファイルが既存でない場合に使用する形式も別です。
新たにファイルを作成するとき、
`o'コマンドはrmail形式を使いますが、
`C-o'コマンドはシステムのinbox形式を使います。
デフォルトのファイル名は、
`o'では最後に`o'で使ったものになり、
`C-o'も最後に`C-o'で使ったものです。

出力ファイルが、現在Emacsバッファで訪れているrmailファイルのときには、
出力コマンドはメッセージをバッファにコピーします。そのバッファをファイ
ルに保存するのはユーザーの責任です。

ときどき、ファイルの内容をそのまま本文にしたようなメッセージを受け取る
こともあるでしょう。`w'（`rmail-output-body-to-file'）コマンドで、（メッ
セージのヘッダを除いて）本文をファイルに保存できます。こうしたメッセー
ジでは、`Subject'フィールドに意図するファイル名が入れていることがままあ
るので、`w'コマンドはデフォルトの出力ファイル名に`Subject'フィールドを
使います。しかし、ミニバッファでファイル名を読み取るので、好きなファイ
ル名を指定できます。

メニューを使ってrmailファイルにメッセージを出力することもできます。まず、
メニューバーの項目Classifyを選択し、Classifyメニューから項目Output
Rmail File Menuを選択します。そして、望むrmailファイルを選択します。こ
れは、`o'コマンドのように、カレントメッセージをそのファイルに出力します。
変数`rmail-secondary-file-directory'と 変数
`rmail-secondary-file-regexp'で、メニューに含めるべきファイル名を選択し
ます。最初の変数では探すべきディレクトリを指定し、2番目の変数ではディレ
クトリ中のどのファイルか（正規表現に一致するもの）を指定します。

メッセージをコピーすると、もとのメッセージには`filed'属性が付きます。そ
のメッセージがカレントメッセージになると、モード行に`filed'と表示されま
す。メイルメッセージをそれぞれ1個だけにしておきたい場合には、変数
`rmail-delete-after-output'に`t'を設定します。  すると、コマンド`o'と
`C-o'は、メッセージをコピーするともとのメッセージを削除します。（必要な
らば、もとのメッセージをアンデリートできます。）

システムのinbox形式でファイルにメッセージをコピーするときには、
rmailで今表示しているヘッダフィールドを使います。
したがって、`t'コマンドを使ってヘッダ全体を見えるようにしてから
メッセージをコピーすると、ヘッダ全体がコピーされます。
*Note Rmail Display::。

変数`rmail-output-file-alist'を使うと、カレントメッセージの内容に基づい
てデフォルトの出力ファイルを賢く指定できます。値はつぎの形式の要素から
成るリストである必要があります。

     (REGEXP . NAME-EXP)

カレントメッセージがREGEXPで指定されるパターンに一致すると、
デフォルトの出力ファイル名はNAME-EXPになります。
複数の要素がメッセージに一致する場合は、
最初に一致した要素がデフォルトのファイル名になります。
部分要素NAME-EXPは、ファイル名を指定する文字列か、
より一般的には、文字列としてファイル名を返すLisp式です。
変数`rmail-output-file-alist'は、
`o'と`C-o'の両方に適用されます。



File: emacs-ja, Node: Rmail Labels, Next: Rmail Attributes, Prev: Rmail Output, Up: Rmail

ラベル
======

各メッセージには分類のためにいろいろな"ラベル"（label）が付きます。各ラ
ベルには名前があって、名前が異なれば別のラベルです。どのラベルもメッセー
ジに付いているか付いていないかのどちらかです。少数のラベル名には標準的
な意味があり、適切な場合にはrmailが自動的にメッセージに付けます。これら
の特別なラベルを"属性"（attribute）と呼びます。（*Note Rmail
Attributes::。）それ以外のすべてのラベルはユーザーだけが付けます。

`a LABEL RET'
     カレントメッセージにラベルLABELを付ける（`rmail-add-label'）。
`k LABEL RET'
     カレントメッセージからラベルLABELを取り去る（`rmail-kill-label'）。
`C-M-n LABELS RET'
     ラベル群LABELSのどれか1つを持つつぎのメッセージへ移動する
     （`rmail-next-labeled-message'）。
`C-M-p LABELS RET'
     ラベル群LABELSのどれか1つを持つまえのメッセージへ移動する
     （`rmail-previous-labeled-message'）。
`C-M-l LABELS RET'
     ラベル群LABELSのどれかを持つすべてのメッセージのサマリを作成する
     （`rmail-summary-by-labels'）。

コマンド`a'（`rmail-add-label'）と`k'（`rmail-kill-label'）で、カレント
メッセージに任意のラベルを付けたり取り去ったりできます。引数が空の場合
は、もっとも最近に付けたり取り去ったりしたものと同じラベルを意味します。

分類するためのラベルをメッセージにいったん付ければ、そのラベルを使って
2つのこと、つまり、移動とサマリ作成ができます。

コマンド`C-M-n LABELS RET'（`rmail-next-labeled-message'）は、ラベル群
LABELSのどれか1つを持つつぎのメッセージへ移動します。引数LABELSには、1
つのラベル名、あるいは、コンマで区切って複数のラベル名を指定します。
`C-M-p'（`rmail-previous-labeled-message'）も同様ですが、まえのメッセー
ジへ向かって逆向きに移動します。これらのコマンドに対する数引数は、反復
回数になります。

コマンド`C-M-l LABELS RET'（`rmail-summary-by-labels'）は、指定したラベ
ルの集まりの中の少なくとも1つのラベルを持つようなメッセージからなるサマ
リを表示します。引数LABELSは、1つのラベル名、あるいは、コンマで区切った
複数のラベル名です。サマリについては、*Note Rmail Summary::。

`C-M-n'、`C-M-p'、`C-M-l'に対する引数LABELSが空の場合には、これらのコマ
ンドのどれかにもっとも最近に指定したラベルの集まりを意味します。



File: emacs-ja, Node: Rmail Attributes, Next: Rmail Reply, Prev: Rmail Labels, Up: Rmail

rmailの属性
===========

`deleted'や`filed'のようなラベルのいくつかには組み込みの意味付けがあり、
適切なときに自動的にメッセージに付けられたり取り去られたりします。この
ようなラベルを"属性"（attribute）と呼びます。以下はrmailの属性の一覧で
す。

`unseen'
     メッセージが一度もカレントメッセージになったことがないことを意味す
     る。inboxファイルから取り込またときにメッセージに付けられ、メッセー
     ジがカレントメッセージになると取り去られる。rmailを起動すると、ま
     ずこの属性を持つ最初のメッセージが表示される。
`deleted'
     メッセージが削除されたことを意味する。削除コマンドが付け、アンデリー
     トコマンドが取り去る（*Note Rmail Deletion::）。
`filed'
     メッセージは他のファイルへコピーされたことを意味する。ファイル出力
     コマンドが付ける（*Note Rmail Files::）。
`answered'
     メッセージに返信したことを意味する。
     `r'（`rmail-reply'）コマンドが付ける。
     *Note Rmail Reply::。
`forwarded'
     メッセージを他者に転送したことを意味する。
     `f'（`rmail-forward'）コマンドが付ける。
     *Note Rmail Reply::。
`edited'
     rmail内でメッセージのテキストを編集したことを意味する。
     *Note Rmail Editing::。
`resent'
     メッセージを再送信したことを意味する。
     `M-xrmail-resend'コマンドが付ける。
     *Note Rmail Reply::。

これら以外のすべてのラベルはユーザーだけが付けたり取り去ったりするので
あって、標準的な意味はまったくありません。



File: emacs-ja, Node: Rmail Reply, Next: Rmail Summary, Prev: Rmail Attributes, Up: Rmail

返事の送信
==========

rmailには、メイルの送信にメイル（mail）モードを使うコマンドがいくつかあ
ります。メイル（mail）モードの使用方法については、rmailから使えるある種
の機能も含めて、*Note Sending Mail::。本節では、メイル（mail）モードへ
入るrmailに特有のコマンドを説明します。メイル送信のための通常のキー、
`C-x m'、`C-x 4 m'、`C-x 5 m'は、rmailモードでも使え、その動作もまった
く同じであることに注意してください。

`m'
     メッセージを送信する（`rmail-mail'）。
`c'
     書き始めたメッセージの編集を再開する（`rmail-continue'）。
`r'
     カレントメッセージに対する返事を送信する（`rmail-reply'）。
`f'
     カレントメッセージを他のユーザーに転送する（`rmail-forward'）。
`C-u f'
     カレントメッセージを他のユーザーに再送信する（`rmail-resend'）。
`M-m'
     送信できずに戻ってきたメッセージを再度送信する
     （`rmail-retry-failure'）。

rmailからメッセージを送信するのは、ほとんどの場合、
読んでいるメッセージに返信するためでしょう。
それには、`r'（`rmail-reply'）と打ちます。
すると、`C-x 4 m'のように
別のウィンドウに`*mail*'バッファが表示されますが、
返事を出そうとするメッセージに基づいて
`Subject'、`To'、`CC'、`In-reply-to'の
ヘッダフィールドがあらかじめ埋められています。
`To'フィールドにはそのメッセージの送信者が書かれ、
`CC'フィールドにはそのメッセージのすべての受信者が書かれます。

変数`rmail-dont-reply-to-names'を使うと、`CC'に自動的に含まれる受信者か
ら特定の受信者を除くことができます。この変数の値は（文字列で表した）正
規表現である必要があります。この正規表現に一致する受信者は`CC'フィール
ドから除かれます。デフォルトの値は、あなた自身の名前と`info-'で始まる名
前です。（このような名前は、大規模なメイリングリストで全員に送信するた
めに使う習慣があるから。）

`CC'フィールドを完全に省いて返信したいときには、数引数を指定して返信コ
マンドを入力します。つまり、`C-u r'や`1 r'です。

ひとたび`*mail*'バッファが初期化されれば、メイルの編集や送信は通常どお
りです（*Note Sending Mail::）。あらかじめ用意されたヘッダフィールドが
適切でなければ、編集してかまいません。また、メイル（mail）モードのコマ
ンドを使うこともでき（*Note Mail Mode::）、`C-c C-y'コマンドでもとの返
信メッセージをヤンクすることもできます。rmailバッファに切り替えてから別
のメッセージを選択し、もとに戻って新しいカレントメッセージをヤンクして
もかまいません。

メッセージが相手先へ届かない場合があります。メイル配送プログラムは、通
常、失敗したメッセージを"失敗メッセージ"に同封して発信者に送り返します。
rmailのコマンド`M-m'（`rmail-retry-failure'）は、同じメッセージを再送す
る準備をします。前回と同じ本文とヘッダフィールドで`*mail*'バッファを立
ち上げます。すぐに`C-c C-c'と打つと、前回とまったく同様にメッセージを再
送信します。あるいは、本文やヘッダを編集してから送信することもできます。
変数`rmail-ignored-headers'（*Note Rmail Display::）と同じ形式の変数
`rmail-retry-ignored-headers'は、再送信するときに送信に失敗したメッセー
ジから取り除くヘッダを制御します。デフォルトでは`nil'です。

rmailからメッセージを送信する別の場面は、他のユーザーにメッセージを"転
送"（forward）することでしょう。`f'（`rmail-forward'）はこれを簡単に行
えるようにします。つまり、カレントメッセージをテキストとして`*mail*'バッ
ファを初期化し、`Subject'も転送メッセージである旨の初期化をします。あと
は、受信者を埋め込んで送信するだけです。メッセージを転送したとき、受信
者はあなた『から』メッセージを受け取りますが、内容はもとのメッセージの
ままです。

転送されるメッセージは、2つの区切り行に挟まれています。
また、各行は、行頭に`- 'を挿入してハイフンで始まるように
修正されます。
転送メッセージを受け取って、たとえばプログラムのソースコードのように
文書以外に何か役立つようなものが含まれているときには、
このような変更をもとに戻せたら便利です。
これを行うには、転送メッセージを選択して
`M-x unforward-rmail-message'と打ちます。
このコマンドは、挿入された`- 'を削除してもとのメッセージを取り出し、
それをrmailファイルのカレントメッセージの直後に別のメッセージとして挿入します。

"再送"（resending）は転送に似ている別の手段です。異なる点は、再送はもと
もとの送信者『から』メッセージをもう一度送ることです。また、あなたから
送られたことを示すために`Resent-from'と`Resent-to'のヘッダフィールドが
付加されます。rmailでメッセージを再送するには、`C-u f'を使います。
（`f'は`rmail-forward'を実行するが、数引数を指定すると`rmail-resend'を
実行するようになっている。）

`m'（`rmail-mail'）コマンドは、
返信ではない送信メッセージを編集し始めるのに使います。
ヘッダフィールドは空のままです。
このコマンドと`C-x 4 m'との唯一の違いは、
ちょうど`r'がするように
`C-c C-y'でrmailバッファを参照できるようにすることです。
したがって、`m'コマンドでメッセージに返信したり転送したりできます。
`r'や`f'でできることは何でもできます。

`c'（`rmail-continue'）コマンドは、
書きかけのメッセージの編集を完了したり、
送信したメッセージを変更したりするために
`*mail*'バッファの編集を再開します。

変数`rmail-mail-new-frame'に`nil'以外の値を設定すると、メッセージの送信
を始めるすべてのrmailコマンドは編集用に新しいフレームを作ります。メッセー
ジを送信したり`Mail'メニューの項目`Don't Send'を使うと、このフレームは
削除されます。

メッセージを送信するためすべてのrmailコマンドは、あなたが選択したメイル
作成方式を使います（*Note Mail Methods::）。



File: emacs-ja, Node: Rmail Summary, Next: Rmail Sorting, Prev: Rmail Reply, Up: Rmail

rmailのサマリ機能
=================

"サマリ"（summary）とは、rmailファイルにあるメイルの概要を示すために1メッ
セージにつき1行の情報を収めたバッファです。各行には、メッセージ番号、送
信者、ラベル、サブジェクト（`Subject'の内容）が表示されます。ほとんどす
べてのrmailコマンドはサマリバッファでも有効で、サマリの現在行が指すメッ
セージに適用されます。サマリバッファでポイントを動かすと、ポイントがあ
る行が指すメッセージを選択します。

1つのサマリバッファは、それに対応した1つのrmailファイルにしか適用されま
せん。複数のrmailファイルを編集している場合には、それぞれに専用のサマリ
バッファを作れます。サマリバッファの名前は、rmailバッファの名前に
`-summary'を付け加えたものです。通常、一度に表示されるサマリバッファは
1つだけです。

* Menu:

* Rmail Make Summary::	     Making various sorts of summaries.
* Rmail Summary Edit::	     Manipulating messages from the summary.



File: emacs-ja, Node: Rmail Make Summary, Next: Rmail Summary Edit, Prev: Rmail Summary, Up: Rmail Summary

サマリの作成
------------

現在のrmailファイルのサマリを作成するコマンドを説明します。いったん
rmailファイルに対するサマリバッファを作っておくと、（メッセージの削除／
抹消、新着メイルの取得などで）rmailファイルが変更されると自動的にサマリ
も更新されます。

`h'
`C-M-h'
     すべてのメッセージのサマリを作成する（`rmail-summary'）。
`l LABELS RET'
`C-M-l LABELS RET'
     指定したラベルのいずれかを含むメッセージのサマリを作成する
     （`rmail-summary-by-labels'）。
`C-M-r RCPTS RET'
     指定した受信者名のいずれかを含むメッセージのサマリを作成する
     （`rmail-summary-by-recipients'）。
`C-M-t TOPIC RET'
     指定した正規表現TOPICに一致するサブジェクトを持つメッセージのサマ
     リを作成する（`rmail-summary-by-topic'）。

コマンド`h'や`C-M-h'（`rmail-summary'）は、現在のrmailファイルのサマリ
バッファをこのファイルの全メッセージのサマリで満たします。そして、別の
ウィンドウにサマリバッファを表示し選択します。

`C-M-l LABELS RET'（`rmail-summary-by-labels'）は、
ラベルLABELSのいずれかを含むメッセージに対する部分的なサマリを作ります。
LABELSはラベル名をコンマで区切ったものである必要があります。

`C-M-r RCPTS RET'（`rmail-summary-by-recipients'）は、
受信者名RCPTSのいずれかを含むメッセージに対する部分的な
サマリを作ります。
RCPTSはメイルアドレスをコンマで区切ったものである必要があります。

`C-M-t TOPIC RET'（`rmail-summary-by-topic'）は、正規表現TOPICに一致す
るサブジェクトを持つメッセージに対する部分的なサマリを作成します。

どのrmailファイルにも1つのサマリバッファしかないことに注意してください。
ある種類のサマリを作成すると、それ以前のサマリは消されてしまいます。

変数`rmail-summary-window-size'は、サマリウィンドウに使う行数を指定しま
す。変数`rmail-summary-line-count-flag' は、各メッセージのサマリ行にメッ
セージの行数を表示するかどうかを制御します。



File: emacs-ja, Node: Rmail Summary Edit, Prev: Rmail Make Summary, Up: Rmail Summary

サマリでの編集
--------------

rmailバッファ自体にできることは、rmailサマリバッファでもほとんどできま
す。実際、いったんサマリバッファを作っておけば、rmailバッファに切り替え
る必要はありません。

サマリバッファ上でポイントを行から行へ移動するだけで、サマリバッファか
らrmailバッファのさまざまなメッセージを選択し表示できます。どんなEmacs
コマンドを使ってポイントを移動してもかまいません。コマンドを実行し終っ
たときにポイントがある行がどこであっても、rmailバッファのそれに対応する
メッセージが選択されます。

ほとんどすべてのrmailコマンドは、rmailバッファと同様にサマリバッファ
でも機能します。
つまり、
`d'はサマリバッファでもカレントメッセージを削除し、
`u'はアンデリートし、`x'は抹消します。
`o'と`C-o'はカレントメッセージをファイルに書き込みます。
`r'は返信を開始します。
サマリバッファにいても、
SPCとDELを使ってカレントメッセージをスクロールできます。

メッセージのあいだを移動するrmailコマンドもサマリバッファで使えますが、
事情が少々違っています。つまり、現在サマリが作られているメッセージのあ
いだでしか移動できません。また、rmailバッファが必ず画面に表示されるよう
にします。（カーソル移動のコマンドはrmailバッファの内容を更新しますが、
rmailバッファがウィンドウに表示されていなければ表示されません。）以下は
これらのコマンドの一覧です。

`n'
     （削除された）「deleted」となっている行を飛び越してつぎの行に移動
     し、そのメッセージを選択する。
`p'
     （削除された）「deleted」となっている行を飛び越してまえの行に移動
     し、そのメッセージを選択する。
`M-n'
     つぎの行に移動し、そのメッセージを選択する。
`M-p'
     まえの行に移動し、そのメッセージを選択する。
`>'
     最後の行に移動し、そのメッセージを選択する。
`<'
     最初の行に移動し、そのメッセージを選択する。
`M-s PATTERN RET'
     カレントメッセージから始めてPATTERNに一致するメッセージを探索する。
     みつかったメッセージを選択し、サマリバッファ内のそのメッセージに対
     応する行にポイントを移動する。

rmailバッファで、削除、アンデリート、新着メイルの取得、別のメッセージの
選択を実行すると、サマリバッファを必ず更新します。変数
`rmail-redisplay-summary'が`nil'以外ならば、これらのコマンドを実行する
とサマリバッファは画面に表示されます。

サマリを使い終ったら`Q'（`rmail-summary-wipe'）と打ってサマリバッファの
ウィンドウを削除します。サマリでrmailを終了することもできます。
`q'（`rmail-summary-quit'）はサマリウィンドウを削除し、rmailファイルを
保存してrmailを抜け、別のバッファに切り替えます。



File: emacs-ja, Node: Rmail Sorting, Next: Rmail Display, Prev: Rmail Summary, Up: Rmail

rmailファイルのソート
=====================

`M-x rmail-sort-by-date'
     現在のrmailファイルのメッセージを日付順にソートする。

`M-x rmail-sort-by-subject'
     現在のrmailファイルのメッセージを`Subject'順にソートする。

`M-x rmail-sort-by-author'
     現在のrmailファイルのメッセージを筆者名順にソートする。

`M-x rmail-sort-by-recipient'
     現在のrmailファイルのメッセージを受け手名順にソートする。

`M-x rmail-sort-by-correspondent'
     現在のrmailファイルのメッセージを他の文通者名順にソートする。

`M-x rmail-sort-by-lines'
     現在のrmailファイルのメッセージを行数順にソートする。

`M-x rmail-sort-by-keywords RET LABELS RET'
     現在のrmailファイルのメッセージをラベル順にソートする。引数
     LABELSは、コンマで区切られたラベルの並びである必要がある。ラベルの
     順序がメッセージの順序を決める。最初のラベルを持つメッセージが最初
     にきて、2番目のラベルを持つものが2番目にくるというようになる。指定
     したラベルも持たないメッセージは最後にくる。

rmailのソートコマンドは、*順序を保存するソート*（stable sort）を行いま
す。2つのメッセージのどちらを先にするか明確な基準がないときには、その順
序関係は保存されます。これを用いれば、複数の基準でソートできます。たと
えば、`rmail-sort-by-date'を使ってから`rmail-sort-by-author'を使うと、
同じ筆者のメッセージは日付順に並びます。

数引数を指定するとこれらのすべてのコマンドは逆順序に並べます。つまり、
新しいものから古いものへ、大きなものから小さなものへ、アルファベットの
逆順にメッセージをソートします。



File: emacs-ja, Node: Rmail Display, Next: Rmail Editing, Prev: Rmail Sorting, Up: Rmail

メッセージの表示
================

初めてメッセージを表示するとき、rmailはメッセージのヘッダを
整形し直してから表示します。
むだな表示を削るために重要でないヘッダフィールドを隠します。
`t'コマンドを使うと、ヘッダ全体を表示したり再度整形することができます。

`t'
     ヘッダ全体を表示するかどうかを切り替える（`rmail-toggle-header'）。

ヘッダの整形では、各ヘッダフィールドの重要性に基づいてほとんどのヘッダ
フィールドを削除することになります。変数`rmail-ignored-headers'には、こ
のようにして隠すヘッダフィールドを指定する正規表現を記述します。ヘッダ
フィールドの先頭部分がこの正規表現に一致するとそのフィールド全体を隠し
ます。

rmailは整形を行うまえにもとのヘッダ全体を保存します。これを見るには`t'
（`rmail-toggle-header'）コマンドを使います。カレントメッセージの整形さ
れたヘッダを捨て、もとのヘッダを表示します。`t'を再度実行すると、メッセー
ジのヘッダを再度整形します。メッセージを選択し直しても再度整形します。

この結果として、（*Note Rmail Editing::）整形されたヘッダを（`e'コマン
ドで）編集しても、そのあとに`t'を使うと編集したものは破棄されます
（*Note Rmail Editing::）。一方、`t'のあとに`e'を使ってもとの（整形して
いない）ヘッダを編集すると、その変更は保存されます。

`t'コマンドに数引数を付けると、正の引数ならは整形したヘッダを表示し、ゼ
ロか負ならばヘッダ全体を表示します。

複数のフォントを使えるウィンドウシステムで使用すると、rmailは特に重要な
ある種のヘッダフィールドを強調表示します。デフォルトでは、 `From'フィー
ルドと`Subject'フィールドです。変数`rmail-highlighted-headers'には、強
調表示したいヘッダフィールドを指定する正規表現を記述します。ヘッダフィー
ルドの先頭部分がこの正規表現に一致するとそのフィールド全体を強調表示し
ます。

テキストの前景や背景に標準的でない色を指定すると、うまく強調表示できな
いこともあります。そのような場合には、`highlight'フェイスに別の色を指定
します。`highlight'フェイスはrmail以外の強調表示にも使われるので、指定
を行う価値があります。方法は、*Note Faces::。

rmailの強調表示をすべてやめるには、変数`rmail-highlighted-headers'に
`nil'を設定してください。



File: emacs-ja, Node: Rmail Editing, Next: Rmail Digest, Prev: Rmail Display, Up: Rmail

メッセージの編集
================

rmailモードでも通常のEmacsコマンドのほとんどを使えますが、`C-M-n'や
`C-M-h'のように他の目的のためにrmailで再定義されたものもいくつかありま
す。しかし、rmail バッファは通常読み出し専用であり、アルファベット文字
のほとんどもrmailコマンドとして再定義されています。メッセージのテキスト
を編集したいときには、rmailコマンド`e'を使う必要があります。

`e'
     カレントメッセージを通常のテキストとして編集する。

`e'（`rmail-edit-current-message'）コマンドは、rmailモードからrmail編集
（rmail-edit）モードに移行します。このモードは、テキスト（text）モード
とほとんど同じ別のメジャーモードです。モード行にこの変化が表示されます。

rmail編集（rmail-edit）モードでは、文字は通常どおり挿入でき、
rmailコマンドは使えません。
メッセージを編集し終えてrmailへ戻るには、
`C-c C-c'と打ちます。
するとrmailモードに戻ります。
あるいは、行った編集をすべて取り消してrmailモードに戻るには、
`C-c C-]'と打ちます。

rmail編集（rmail-edit）モードに入るとき、フック`text-mode-hook'が実行さ
れます。それからフック`rmail-edit-mode-hook' が実行されます （*Note
Hooks::）。メッセージには属性`edited' が付けられます。さらに、メッセー
ジのヘッダ全体が表示されるので、メッセージの本文と同様にヘッダも編集で
きます。ヘッダに対する変更も保存されます。



File: emacs-ja, Node: Rmail Digest, Next: Out of Rmail, Prev: Rmail Editing, Up: Rmail

ダイジェストメッセージ
======================

"ダイジェストメッセージ"（digest message）は、数個のメッセージをまとめ
て運ぶためのメッセージです。ダイジェストは管理人のいるメイリングリスト
上で使われます。1日単位などの一定期間内にリスト宛に受け取ったすべてのメッ
セージを1つのダイジェストにまとめて加入者に送ります。合計のサイズが同じ
であったとしても、ダイジェストにして送るほうが個々にメッセージを送るよ
りコンピュータの使用時間がずっと少なくてすみます。というのは、メイル送
信に必要なメッセージあたりのネットワーク上のオーバーヘッドがとても大き
いからです。

ダイジェストメッセージを受け取ったならば、もっとも簡単な読み方は、それ
を"アンダイジェスト"（undigestify）して個々のメッセージに戻すことです。
そうすれば好きなように、個々のメッセージを読んだり削除したりできます。

アンダイジェストするには、ダイジェストメッセージを選び、コマンド`M-x
undigestify-rmail-message'を打ちます。これは、（ダイジェストメッセージ
内の）サブメッセージを別々のrmailメッセージとして取り出し、ダイジェスト
のあとにそれらのメッセージを挿入します。ダイジェストメッセージ自体は削
除されます。



File: emacs-ja, Node: Out of Rmail, Next: Rmail Rot13, Prev: Rmail Digest, Up: Rmail

rmailファイルからinbox形式への変換
==================================

コマンド `M-x unrmail'は、rmail形式のファイルを
（システムのメイルボックス形式としても知られる）inbox形式に変換します。
こうすると、そのファイルを別のメイル編集ツールでも使えるようになります。
2つの引数、rmailファイル名と変換後のファイル名を指定する必要があります。
`M-x unrmail'はrmailファイル自体には変更を加えません。



File: emacs-ja, Node: Rmail Rot13, Next: Movemail, Prev: Out of Rmail, Up: Rmail

rot13メッセージの読み方
=======================

特定の読者に不快を与える可能性があるメイリングリストのメッセージは、
rot13"と呼ばれる単純な方法で暗号化してある場合があります。この名前は、
アルファベットを13文字分巡回させることに由来します。これは機密保持のた
めではなく、そのような機能もありません。不快に感じるかもしれない読者が
メッセージの本当の本文を見ないようにするために使います。

rot13暗号を使っているバッファを見るには、コマンド`M-x
rot13-other-window'を使います。テキストを表示するときに暗号を解いて別の
ウィンドウにカレントバッファを表示します。



File: emacs-ja, Node: Movemail, Prev: Rmail Rot13, Up: Rmail

`movemail'とPOP
===============

新着メイルを取得するとき、rmailはまずinboxファイルからrmailファイルに新
着メイルをコピーします。それから、rmailファイルを保存します。そして、
inboxファイルの内容を消します。こうすると、システムがクラッシュすると
inboxとrmailファイルにメイルを重複して持つことになりますが、メイルを紛
失することはありえません。変数`rmail-preserve-inbox'が`nil'以外ならば、
rmailは、inboxファイルからrmailファイルに新着メイルをコピーしてから
inboxファイルの内容を消しません。たとえば、旅行中は携帯コンピュータで
POPを介してメイルを調べ、メイルをサーバーに残しておいてあとでワークステー
ションに保存するようにするには、このような設定をします。

場合によっては、rmailは間接的にinboxファイルから新着メイルをコピーしま
す。まず、`movemail'プログラムを実行して、inboxから
`~/.newmail-INBOXNAME'という中間ファイルにメイルを移動します。それから、
rmailは中間ファイルから新着メイルを併合してrmailファイルを保存してから
中間ファイルを削除します。これを実行中の都合が悪いときにクラッシュする
と中間ファイルが残ってしまい、rmailがつぎにinboxから新着メイルを取得す
るときにまたそのファイルを使ってしまいます。

rmailが`~/.newmail-INBOXNAME'のデータを独自形式（Babyl形式）に変換でき
ないと、同じデータでトラブルが再発しないようにファイル名を
`~/RMAILOSE.N' （Nは名前が一意になるような整数）に変えます。このファイ
ルを調べて、rmailが解釈できなかったメッセージ（たぶん、コントロール下線
の文字、8進コード037を使ったメッセージかもしれない）を探してそれを削除
します。そうしてから、`1 g'コマンドを使って修正したファイルから新着メイ
ルを取り込みます。

inboxファイルにデータを保存するかわりに、
POPと呼ばれる方法を用いてユーザーのinboxのデータを参照する
場合もあります。
`movemail'をコンパイルするときにマクロ`MAIL_USE_POP'を定義して
コンパイルすれば`movemail'はPOPを使って動きます。
（Emacsをインストールするとき、
`--with-pop'を指定して`configure'を実行すれば、
このようにできる。）
`movemail'はPOP3でしか動かず、POPの古いバージョンでは使えません。

`movemail'を適切にコンパイルしてインストールしたとすると、
rmailファイルのinboxリストで、
`po:USERNAME'の形の『ファイル名』でPOPのinboxを指定できます。
`movemail'は、そのような名前に対しては、
POPサーバーに対する接続を開きます。
`MAILHOST'環境変数で、どのマシンでサーバーを探すかを指定します。

POP経由でメイルを参照するにはパスワードが必要です。変数
`rmail-pop-password'が`nil'以外のときは、これはPOPに対してを使うパスワー
ドを指定します。あるいは、変数`rmail-pop-password-required'が`nil'以外
ならば、rmailはユーザーにパスワードを尋ねます。

`movemail'にコマンド行オプションを追加する必要があるときには、変数
`rmail-movemail-flags'に指定したいオプションのリストを設定します。
inboxの内容を保存するオプション`-p'を指定するためにこの変数を使わないで
ください。かわりに`rmail-preserve-inbox'を使ってください。

読者のサイトでインストールした`movemail'プログラムは、Kerberos認証を使
うかもしれません。その場合、`rmail-pop-password'と
`rmail-pop-password-required'が設定されていなければ、POPでメイルを取得
するときにデフォルトでKerberos認証を使います。

POPサーバーによってはメッセージを逆順序に保存します。
そのようなサーバーで受信順にメイルを読むには、
`rmail-movemail-flags'にフラグ`-r'を追加して、
ダウンロードしたメッセージを逆順にするように
`movemail'に指示します。


File: emacs-ja, Node: Dired, Next: Calendar/Diary, Prev: Rmail, Up: Top

ディレクトリエディタdired
*************************

diredはディレクトリ一覧をバッファに作成します。場合によっては、サブディ
レクトリの一覧も含まれます。普通のEmacsコマンドでこのバッファの中を動き
廻ったり、特別なdiredコマンドで一覧中にあるファイルを操作できます。

* Menu:

* Enter: Dired Enter.         How to invoke Dired.
* Commands: Dired Commands.   Commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* Flagging Many Files::       Flagging files based on their names.
* Visit: Dired Visiting.      Other file operations through Dired.
* Marks vs Flags::	      Flagging for deletion vs marking.
* Operating on Files::	      How to copy, rename, print, compress, etc.
			        either one file or several files.
* Shell Commands in Dired::   Running a shell command on the marked files.
* Transforming File Names::   Using patterns to rename multiple files.
* Comparison in Dired::	      Running `diff' by way of Dired.
* Subdirectories in Dired::   Adding subdirectories to the Dired buffer.
* Subdirectory Motion::	      Moving across subdirectories, and up and down.
* Hiding Subdirectories::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.	      Using `find' to choose the files for Dired.



File: emacs-ja, Node: Dired Enter, Next: Dired Commands, Prev: Dired, Up: Dired

diredの起動
===========

diredを起動するには、`C-x d'か`M-x dired'を使います。このコマンドは、一
覧表示するファイルを指定するためのディレクトリ名やファイルのワイルドカー
ドパターンをミニバッファで読み取ります。`dired'が`list-directory'と違う
のは、バッファがdiredモードになっていて特別なdiredコマンドを使えるよう
になることです。

変数`dired-listing-switches'には、
ディレクトリ一覧を作成する`ls'プログラムに与えるオプションを指定します。
オプション中には`-l'が必ず含まれている*必要*があります。
`dired'コマンドに数引数を指定すると、
ミニバッファでディレクトリを指定するまえに
`ls'のオプションを指定できます。

diredバッファを現在選択しているウィンドウではなく別のウィンドウに表示し
たい場合には、`C-x d'のかわりに`C-x 4 d'（`dired-other-window'）を使い
ます。`C-x 5 d'（`dired-other-frame'）は別のフレームにdiredバッファを表
示します。



File: emacs-ja, Node: Dired Commands, Next: Dired Deletion, Prev: Dired Enter, Up: Dired

diredバッファ内のコマンド
=========================

diredバッファは『読み出し専用』であり、このバッファに文字を挿入しても意
味がないので、`d'や`x'のような通常の印字文字は特別なdiredコマンドに使わ
れます。diredコマンドのいくつかは、diredバッファの"カレントファイル
（current file、つまり、現在行のファイル）に"印"（mark）や"フラグ
（flag）を付けます。他のコマンドは、印やフラグが付いたファイル群に作用
します。

Emacsの普通のカーソル移動コマンドはdiredバッファでも使えます。特殊用途
のカーソル移動コマンドもあります。`C-n'と`C-p'は、カーソルを行の先頭で
はなくファイル名の先頭に位置合わせするように再定義されています。

さらに便利なように、
diredモードではSPCと`n'は`C-n'に等価です。
`p'は`C-p'に等価です。
（diredでは行単位の移動をよく行うため、打鍵しやすくしてある。）
DEL（上に移動してフラグを消す）は、単に上へ移動する場合には便利です。



File: emacs-ja, Node: Dired Deletion, Next: Flagging Many Files, Prev: Dired Commands, Up: Dired

diredでのファイル削除
=====================

diredの主な利用法は、ファイルに削除のフラグを付けてから、フラグの付いて
いるファイルを（本当に）削除することです。

`d'
     このファイルに削除フラグを付ける。
`u'
     この行の削除フラグを消す。
`DEL'
     ポイントをまえの行に移し、その行の削除フラグを消す。
`x'
     削除フラグが付いたファイルを（本当に）削除する。

ファイルに削除フラグを付けるには、そのファイルを表示している行に移動し
て`d'と打ちます。削除フラグは、行頭に表示される`D'という文字でわかりま
す。このコマンドはポイントをつぎの行に進めますから、`d'コマンドを繰り返
し実行すれば後続のファイルにもフラグを付けることができます。数引数は反
復回数になります。

即座にファイルを削除するかわりに削除フラグを付けるので、誤ってファイル
を消してしまう危険性は低くなります。フラグを付けたファイルを抹消するよ
うにdiredに指示するまでは、`u'やDELを使って削除フラグを消せます。
`u'（`dired-unmark'）は、`d'と同じように動作しますが、フラグを付けるの
ではなくフラグを消します。`DEL'（`dired-unmark-backward'）は上に移動し
てフラグを消します。これは、数引数-1を指定した`u'と同じです。

削除フラグが付いたファイルを（本当に）削除するには、
`x'（`dired-expunge'）と打ちます。このコマンドは、削除フラグが付いたファ
イルの一覧を表示し、`yes'での確認応答を求めます。確認するとdiredはフラ
グが付いたファイルを削除し、diredバッファからそれらに対応する行を削除し
ます。小さくなったdiredバッファは選択されたままです。

確認に`no'と答えたり、`C-g'で中断すると、ただちにdiredに戻りますが、削
除フラグは付いたままで、ファイルを実際に削除しません。



File: emacs-ja, Node: Flagging Many Files, Next: Dired Visiting, Prev: Dired Deletion, Up: Dired

一度に多数のファイルにフラグを付ける
====================================

`#'
     （名前が`#'で始まり`#'で終る）すべての自動保存ファイルに削除フラグ
     を付ける。（*Note Auto Save::）。

`~'
     （名前が`~'で終る）すべてのバックアップファイルに削除フラグを付け
     る。（*Note Backup::）。

`&'
     簡単に作成し直せるような名前のすべてのファイルに削除フラグを付ける。

`. （ピリオド）'
     余分な番号付きバックアップファイルに削除フラグを付ける。新しいバッ
     クアップファイル数個と古いのもの数個を除いて、そのあいだのものにフ
     ラグを付ける。

`% d REGEXP RET'
     名前が正規表現REGEXPに一致するすべてのファイルに削除フラグを付ける。

`#'、`~'、`&'、`.'のコマンドは、ファイル名に基づいて数多くのファイルに
削除フラグを付けます。これらのコマンドは本当に便利です。というのは、ファ
イルを実際には削除しないからです。残しておきたいファイルの削除フラグは
消せばいいのです。

`&'（`dired-flag-garbage-files'）は、変数`dired-garbage-files-regexp'で
指定される正規表現に一致する名前のファイルに削除フラグを付けます。デフォ
ルトは、TeXが生成するある種のファイルと`patch'プログラム (1) (*Note
Flagging Many Files-Footnotes::) が生成する`.orig'と`.rej'の
ファイルです。

`#'（`dired-flag-auto-save-files'）は、自動保存ファイルと思われる名前の
ファイル、すなわち、名前が`#'で始まり`#'で終るものすべてに削除フラグを
付けます。`~'（`dired-flag-backup-files'）は、バックアップファイルと思
われる名前のファイル、すなわち、名前が`~'で終るものすべてに削除フラグを
付けます。

`.'（ピリオド、`dired-clean-directory'）は、バックアップファイルのいく
つか、つまり、古いもの数個と新しいもの数個を除くすべてに削除フラグを付
けます。通常、変数`dired-kept-versions' （保存するときに適用される変数
`kept-new-versions'では*ない*）には新しい版を何個残すかを指定し、変数
`kept-old-versions'には古い版を何個残すかを指定します。

`C-u 3 .'のように正の数引数をピリオドに指定すると、変数
`dired-kept-versions'を無視して新しい版を何個残すか指定します。負の数引
数は変数`kept-old-versions'を無視して数引数の絶対値で古い版を何個残すか
指定します。

`% d'コマンドは、指定した正規表現（`dired-flag-files-regexp'）に一致す
る名前のファイルに削除フラグを付けます。ファイル名のうちディレクトリに
無関係な部分についてだけ一致を調べます。`^'（先頭）や`$'（末尾）で、一
致箇所を固定できます。サブディレクトリを隠蔽すれば、サブディレクトリを
一致検査から除外できます（*Note Hiding Subdirectories::）。


File: emacs-ja  Node: Flagging Many Files-Footnotes, Up: Flagging Many Files

(1) 【訳注】数種類の形式の`diff'の出力を解釈して、テキストファイル
を更新するためのプログラム



File: emacs-ja, Node: Dired Visiting, Next: Marks vs Flags, Prev: Flagging Many Files, Up: Dired

diredでのファイルの訪問
=======================

diredには、diredバッファに表示したファイルを訪問したり調べたりするため
のコマンドがあります。これらは現在行のファイルに作用します。そのファイ
ルが実際にはディレクトリであると、これらのコマンドはそのサブディレクト
リに対して（別のdiredバッファを作って）diredを起動します。

`f'
     `C-x C-f'と打鍵したのと同様に、
     現在行が表すファイルを訪問する（`dired-find-file'）
     *Note Visiting::。

`RET'
     `f'と等価。

`o'
     `f'と同様だが、ファイルのバッファを別のウィンドウに表示する
     （`dired-find-file-other-window'）。
     diredバッファは最初のウィンドウに表示されたまま残る。
     これは`C-x 4 C-f'でファイルを訪問するのに似ている。
     *Note Windows::。

`C-o'
     現在行が表すファイルを訪問して別のウィンドウに表示するが、そのウィ
     ンドウを選択しない（`dired-display-file'）。

`Mouse-2'
     クリックした行が表すファイルを訪問する
     （`dired-mouse-find-file-other-window'）。`o'コマンドのように、ファ
     イルの表示には別のウィンドウを使う。

`v'
     `M-x view-file'を用いて現在行が表すファイルを閲覧する
     （`dired-view-file'）。

     ファイルを閲覧することはファイルを訪問することに似ているが、
     ファイルの中で移動できることに重きを置き、
     ファイルの変更は許されない。
     *Note View File: Misc File Ops.。



File: emacs-ja, Node: Marks vs Flags, Next: Operating on Files, Prev: Dired Visiting, Up: Dired

diredの印とフラグ
=================

ファイルに`D'で示される削除フラグを付けるかわりに
他の文字（通常`*'）で示される"印"を付けることもできます。
『抹消』（`x'）以外のほとんどのdiredコマンドは、
`*'で印付けしたファイルを扱えます。

以下のコマンドは、`*'で印付けするコマンド、印を消すコマンド、印に作用す
るコマンドです。（フラグを付けたり消したりするコマンドについては*Note
Dired Deletion::。）

`m'
`* m'
     カレントファイルに`*'で印を付ける（`dired-makr'）。数引数Nを指定す
     ると、カレントファイルから始めて後続のN個のファイルに印を付ける。
     （Nが負の場合は、上の-N個のファイルに印を付ける。）

`* *'
     実行ファイルすべてに`*'で印を付ける（`dired-mark-executables'）。
     数引数を指定すると、これらのファイルすべての印を消す。

`* @'
     シンボリックリンクすべてに`*'で印を付ける（`dired-mark-symlinks'）。
     数引数を指定すると、これらのファイルすべての印を消す。

`* /'
     `.'と`..'を除くすべてのディレクトリに`*'で印を付ける
     （`dired-mark-directories'）。数引数を指定すると、これらのディレク
     トリすべての印を消す。

`* s'
     現在のサブディレクトリ内の`.'と`..'を除くすべてのファイルに印を付
     ける（`dired-mark-subdir-files'）。

`u'
`* u'
     この行の印を消す（`dired-unmark'）。

`DEL'
`* DEL'
     ポイントをまえの行へ動かし、その行の印を消す
     （`dired-unmark-backward'）。

`* !'
     diredバッファのすべてのファイルの印を消す
     （`dired-unmark-all-files-no-query'）。

`* ? MARKCHAR'
     指定した文字MARKCHARの印すべてを消す
     （`dired-unmark-all-files'）。
     引数は1文字。
     RETで入力を終えてはならない。

     数引数を指定すると、このコマンドは印の付いたファイルごとに
     印を消すかどうか聞いてくる。
     `y'は消すの意味、`n'は消さないの意味。
     `!'で答えると残りのファイルすべてについて問い合わせずに印を消す。

`* C-n'
     印が付いているつぎのファイルへ進む（`dired-next-marked-file'）。ファ
     イルに『印』が付いているとは、なんらかの印があること。

`* C-p'
     印が付いているまえのファイルへ戻る（`dired-prev-marked-file'）

`* t'
     すべての印を切り替える（`dired-do-toggle'）。
     つまり、`*'で印が付いているファイルの印を消し、
     印が付いていなかったファイルすべてに`*'で印を付ける。
     `*'以外で印が付いたファイル群は影響されない。

`* c OLD NEW'
     文字OLDの印を文字NEWの印に置き換える
     （`dired-change-marks'）。
     このコマンドは、`*'や`D'以外の文字で印を付けるための主要な手段。
     引数はそれぞれ1文字。
     RETで入力を終えてはならない。

     このコマンドではほとんどどんな文字でも印として使えるため、
     ファイルをいろいろに分類できる。
     OLDが空白（` '）であると、
     コマンドは印が付いていないすべてのファイルに作用する。
     NEWが空白であると、コマンドは作用するファイルの印を消す。

     下の例はこのコマンドの能力を例示するものであり、
     印のないファイルすべてに`D'フラグを付け、
     `D'フラグが付いているものすべてからはフラグを消します。

          * c D t  * c SPC D  * c t SPC

     ここでは、`t'で印を付けたファイルはないものと仮定します。

`% m REGEXP RET'
`* % REGEXP RET'
     正規表現REGEXPに一致する名前のファイルすべてに
     （`*'で）印を付ける（`dired-mark-files-regexp'）。
     このコマンドは`% d'に似ているが、
     削除フラグ`D'のかわりに`*'でファイルに印を付ける。
     *Note Flagging Many Files::。

     ファイル名のうちディレクトリに無関係な部分だけで一致を検査する。
     `^'（先頭）や`$'（末尾）で、一致箇所を固定できる。サブディレクトリ
     を一致検査から除外するには、サブディレクトリを隠蔽する。

`% g REGEXP RET'
     ファイルの*内容*が正規表現REGEXPに一致するすべてのファイルに（`*'
     で）印を付ける（`dired-mark-files-containing-regexp'）。このコマン
     ドは`% m'に似ているが、ファイル名ではなくその内容で探す。

`C-_'
     印の追加や削除などのdiredバッファに対する変更をアンドゥする
     （`dired-undo'）



File: emacs-ja, Node: Operating on Files, Next: Shell Commands in Dired, Prev: Marks vs Flags, Up: Dired

ファイルの操作
==============

本節では、ファイルを操作する基本的なdiredコマンドについて説明します。コ
マンドはすべて大文字であり、実行前に、引数を読み取ったり確認を求めるた
めにミニバッファを使います。これらすべてのコマンドには、操作対象となる
ファイルを指定する方法がいくつかあります。

   * コマンドに数引数Nを与えると、カレントファイルから始めて後続のN個の
     ファイルを操作する。（Nが負の場合には、現在行から上の-N個のファイ
     ルを操作する。）

   * さもなければ、ファイルに`*'で印が付いていれば、コマンドは印が付い
     ているすべてのファイルを操作する。

   * さもなければ、コマンドはカレントファイルのみを操作する。

以下は、上のように操作対象を選ぶファイル操作コマンドの一覧です。（`!'や
`%'などの他のdiredコマンドも、操作対象とするファイルを決定するのに上の
方法を用いる。）

`C NEW RET'
     指定したファイルをコピーする（`dired-do-copy'）。引数NEWはコピー先
     のディレクトリか、（1つのファイルをコピーする場合は）新しい名前。

     変数`dired-copy-preserve-time'が`nil'以外の場合には、このコマンド
     でコピーしたファイルの更新時間はもとのファイルと同じになる。

`D'
     指定したファイルを削除する（`dired-do-delete'）。
     本節の他のコマンドと同様に、このコマンドは*印付け*されたファイル、
     あるいは、後続のN個のファイルに作用する。
     対照的に、`x'（`dired-expunge'）は、
     "フラグ"が付いたファイルを削除する。

`R NEW RET'
     指定したファイルの名前を変更する（`dired-do-rename'）。引数NEWは移
     動先のディレクトリか、（1つのファイルの名前を変える場合には）新し
     い名前。

     diredは、名前を変更したファイルに対応するバッファの訪問先のファイ
     ル名を自動的に変更するので、新しい名前が反映される。

`H NEW RET'
     指定したファイルにハードリンクを張る（`dired-do-hardlink'）。引数
     NEWはリンクを置くディレクトリか、（1つのリンクを張る場合には）リン
     クに与える名前。

`S NEW RET'
     指定したファイルにシンボリックリンクを張る（`dired-do-symlink'）。
     引数NEWはリンクを置くディレクトリか、（1つのリンクを張る場合には）
     リンクに与える名前。

`M MODESPEC RET'
     指定したファイルのモード（いわゆるパーミッションビット）を変更する
     （`dired-do-chmod'）。
     このコマンドは`chmod'プログラムを使うので、
     MODSPECには`chmod'が扱える任意の引数を指定できる。

`G NEWGROUP RET'
     指定したファイルのグループをNEWGROUPに変更する（`dired-do-chgrp'）。

`O NEWOWNER RET'
     指定したファイルの所有者をNEWOWNERに変更する（`dired-do-chown'）。
     （ほとんどのシステムでは、スーパーユーザーだけがこれを実行できる。）

     変数`dired-chown-program'で、実際の操作を行うために使用するプログ
     ラムの名前を指定する。（システムによっては、`chown'を置く場所が異
     なる。）

`P COMMAND RET'
     指定したファイルを印刷する（`dired-do-print'）。ファイルを印刷する
     コマンドを指定する必要があるが、（`lpr-buffer'が使うのと同じ）変数
     `lpr-command'と`lpr-switches'とから推定した適切なものがミニバッファ
     に示される。

`Z'
     指定したファイルを圧縮する（`dired-do-compress'）。ファイルがすで
     に圧縮済みと思われるときは展開する。

`L'
     指定したEmacs Lispのファイルをロードする（`dired-do-load'）。
     *Note Lisp Libraries::。

`B'
     指定したEmacs Lispのファイルをバイトコンパイルする
     （`dired-do-byte-compile'）。*Note バイトコンパイル: (elisp)Byte
     Compilation.。

`A REGEXP RET'
     指定したファイル群に対して正規表現REGEXPに一致するものを探す
     （`dired-do-search'）。

     このコマンドは`tags-search'の変形。
     最初にみつかったところで探索は終る。
     探索を再開してつぎに一致するものを探すには、`M-,'を使う。
     *Note Tags Search::。

`Q FROM RET TO RET'
     指定したファイル群のそれぞれについて、`query-replace-regexp'（問い
     合わせながら正規表現を置換する）を実行し、FROM（正規表現）に一致す
     る部分をTOに置換する（`dired-do-query-replace'）。

     このコマンドは`tags-search'の変形。
     置換のループを抜けたあとに、
     探索を再開してさらに置換を行うには、`M-,'を使う。
     *Note Tags Search::。

`+'は特別なファイル操作コマンドです（`dired-create-directory'）。このコ
マンドは、ディレクトリ名を読み取り、それが既存でなければ新たに作成しま
す。



File: emacs-ja, Node: Shell Commands in Dired, Next: Transforming File Names, Prev: Operating on Files, Up: Dired

diredでのシェルコマンド
=======================

diredコマンドの`!'（`dired-do-shell-command'）は、ミニバッファからシェ
ルコマンドを読み取り、指定したファイルすべてについてそのシェルコマンド
を実行します。diredコマンドの普通の方法で操作対象のファイルを指定できま
す（*Note Operating on Files::）。複数ファイルにシェルコマンドを適用す
る方法は2通りあります。

   * シェルコマンド中に`*'を使うと、指定したファイル名のリストで`*'を置
     き換えてコマンドを一度だけ実行する。リスト内でファイルが現れる順番
     はdiredバッファに表示されている順。

     したがって、`! tar cf foo.tar * RET'は`tar'を実行し、指定した一連
     のファイルを`foo.tar'というtarファイルにまとめる。

   * コマンド文字列に`*'が含まれていない場合には、
     コマンド文字列の最後にそれぞれのファイル名を付け加えて
     *各ファイルごと*にコマンドを1回ずつ実行する。

     たとえば、`! uudecode RET'は、各ファイルに対して`uudecode'コマンド
     を実行する。

各ファイルごとにコマンドを1回実行したいが、コマンドの最後ではなく途中に
ファイル名を指定したい場合にはどうするのでしょう？` ' あるいは、もっと
複雑にファイル名を指定したい場合にはどうするのでしょう？` ' それにはシェ
ルのループを使います。下の例では、指定した各ファイルに対して`uuencode'
を実行しますが、その出力は対応する`.uu'というファイルに格納します。

     for file in *; do uuencode $file $file >$file.uu; done

シェルコマンドの作業ディレクトリは、diredバッファのトップディレクトリで
す。

`!'コマンドは、実行後に新たにできたファイルや変更されたファイルを表示す
るためにdiredバッファを更新することはしません。これはシェルコマンドを実
際には理解しておらず、シェルコマンドがどのファイルを変更するのかわから
ないからです。diredバッファを更新するには`g'コマンドを使います（*Note
Dired Updating::）。



File: emacs-ja, Node: Transforming File Names, Next: Comparison in Dired, Prev: Shell Commands in Dired, Up: Dired

diredでのファイル名の変換
=========================

ここにあげるコマンドはファイル名を組織的に変更します。

`% u'
     選択したファイルの名前を大文字に変える（`dired-upcase'）。古いファ
     イル名が`Foo'と`bar'だった場合、新しいファイル名は`FOO'と`BAR'にな
     る。

`% l'
     選択したファイルの名前を小文字に変える（`dired-downcase'）。古いファ
     イル名が`Foo'と`bar'だった場合、新しいファイル名は`foo'と`bar'にな
     る。

`% R FROM RET TO RET'
`% C FROM RET TO RET'
`% H FROM RET TO RET'
`% S FROM RET TO RET'
     これらの4つのコマンドは、それぞれ、ファイル名を変更する、コピーす
     る、ハードリンクを張る、シンボリックリンクを張る。これらのコマンド
     は、いずれも、古いファイル名から正規表現の置換で新しいファイル名を
     決定する。

正規表現の置換を用いる4つのコマンドは、実質的には、diredバッファにおい
て一連の選択したファイルの名前を探索して置換を行います。これらは引数を
2つ読み取ります。正規表現FROMと置換パターンTOです。

これらのコマンドは、正規表現FROMに一致する各『古い』ファイル名の一致し
た部分をTOで置換します。`replace-regexp'（*Note Regexp Replace::）のよ
うに、TOの中では`\&'や`\DIGIT'を用いて古いファイル名に一致したパターン
全体やその一部を参照できます。ファイル名の2箇所以上の部分に正規表現が一
致する場合には、最初の一致部分が置換されます。

たとえば、`% R ^.*$ RET x-\& RET'は、選択されたファイルの名前の先頭に
x-を付け加える形で名前を変えます。逆に、各ファイルの名前の先頭の`x-'を
取り去ることもできて、1つの方法は、`% R ^x-\(.*\)$ RET \1 RET'です。あ
るいは、`% R ^x- RET RET'でもできます。（ファイル名全体に一致するように
するには`^'と`$'を使う。）

通常、置換処理ではファイル名のディレクトリ部分は考慮しません。ディレク
トリ内のファイルの名前だけを操作します。数引数0を指定すると、置換はディ
レクトリ名を含んだ絶対ファイル名に作用します。

一連のファイルを操作対象に選ぶときに、それらを操作するときに使うのと同
じREGEXP（正規表現）を使いたい場合があるでしょう。これを行うには、`% m
REGEXP RET'でまず一連のファイルに印を付けてから、それらを操作するコマン
ドにも同じ正規表現を使います。これを簡単に行えるように、`%'の付いたコマ
ンドは、`%'付きコマンドいずれかに最近指定した正規表現をデフォルトで使い
ます。



File: emacs-ja, Node: Comparison in Dired, Next: Subdirectories in Dired, Prev: Transforming File Names, Up: Dired

diredでのファイルの比較
=======================

diredには、指定したファイルを`diff'で比較するコマンドが2つあります。

`='
     `diff'プログラム（`dired-diff'）を用いて、（ポイントがある箇所の）
     カレントファイルを（マークがある箇所の）他のファイルと比較する。マー
     クがある箇所のファイルが`diff'の第1引数で、ポイントがある箇所のファ
     イルが第2引数になる。

`M-='
     カレントファイルとその最新のバックアップファイルとを比較する
     （`dired-backup-diff'）。カレントファイルがバックアップファイルそ
     のものであるときは、バックアップファイルのバックアップファイルとの
     比較を行う。このようにして、任意の版のバックアップファイルとの比較
     を行える。

     バックアップファイルは`diff'の第1引数になる。



File: emacs-ja, Node: Subdirectories in Dired, Next: Subdirectory Motion, Prev: Comparison in Dired, Up: Dired

diredのサブディレクトリ
=======================

通常、diredバッファは1つのディレクトリだけを表示します。しかし、そのサ
ブディレクトリ群を一緒に表示させることもできます。

1つのdiredバッファ内に複数のディレクトリを表示させるもっとも簡単な方法
は、`ls'を実行するときにオプション`-lR'を指定することです。（diredを実
行するときに数引数を指定すると、これらのオプションをミニバッファで指定
できる。）これにより、すべてのレベルのすべてのサブディレクトリを表示し
た再帰的なディレクトリ一覧を作れます。

しかし、一般には、すべてのサブディレクトリでは多すぎます。普通は、特定
のサブディレクトリだけを含めたいでしょう。それには、`i'コマンドを使いま
す。

`i'
     指定したサブディレクトリの内容をバッファの終りに追加する。

ディレクトリであるファイルを表す行で、`i'（`dired-maybe-insert-subdir'）
コマンドを使います。指定したサブディレクトリの内容を同じdiredバッファに
挿入し、その箇所へ移動します。挿入されたサブディレクトリの内容は、
`ls -lR'の出力と同様に、diredバッファのトップレベルのディレクトリのあと
に続きます。

すでにサブディレクトリの内容がバッファにある場合には、
`i'コマンドはその表示箇所に移動するだけです。

どちらの場合においても、`i'は移動するまえにEmacsのマークを設定するので、
`C-u C-SPC'でバッファ内のもとの箇所（そのサブディレクトリを表す行）へ戻
れます。

サブディレクトリの内容を更新するには、
`l'（`dired-do-redisplay'）コマンドを使います。
サブディレクトリを削除するには`k'を使います。
*Note Dired Updating::。



File: emacs-ja, Node: Subdirectory Motion, Next: Hiding Subdirectories, Prev: Subdirectories in Dired, Up: Dired

サブディレクトリへの移動
========================

diredバッファにサブディレクトリが表示されている場合、コマンド`C-x ['と
`C-x ]'でディレクトリ単位に移動できます。

以下のコマンドは、1つのdiredバッファ内でディレクトリ木構造を上下に移動
するコマンドです。これらはすべて"ディレクトリのヘッダ行" （directory
header lines）、つまり、ディレクトリの内容を表示する部分の先頭にあるディ
レクトリ名を示す行に移動します。

`C-M-n'
     レベルに関係なくつぎのサブディレクトリのヘッダ行へ進む
     （`dired-next-subdir'）。

`C-M-p'
     レベルに関係なくまえのサブディレクトリのヘッダ行へ戻る
     （`dired-prev-subdir'）。

`C-M-u'
     親ディレクトリのディレクトリヘッダ行へ移動する（`dired-tree-up'）。

`C-M-d'
     ディレクトリ木構造を1つ降りて最初のサブディレクトリのヘッダ行へ移
     動する（`dired-tree-down'）。

`<'
     まえのディレクトリファイルの表示行へ戻る（`dired-prev-dirline'）。
     これらの行は、親ディレクトリにおいてファイルとしてディレクトリを表
     す行。

`>'
     つぎのディレクトリファイルの表示行へ進む（`dired-next-dirline'）。



File: emacs-ja, Node: Hiding Subdirectories, Next: Dired Updating, Prev: Subdirectory Motion, Up: Dired

サブディレクトリの隠蔽
======================

サブディレクトリの"隠蔽"（hide）とは、選択的表示（*Note Selective
Display::）を用いてヘッダ行以外を見えなくすることです。

`$'
     ポイント位置にあるサブディレクトリを隠蔽、あるいは、再表示して、ポ
     イントをつぎのサブディレクトリへ移動する（`dired-hide-subdir'）。
     数引数は反復回数。

`M-$'
     diredバッファ中のすべてのサブディレクトリを隠蔽し、サブディレクト
     リのヘッダ行だけを残す（`dired-hide-all'）。あるいは、隠蔽されてい
     るサブディレクトリがある場合には、すべてのサブディレクトリを再表示
     する。このコマンドを使うと、深いディレクトリ木構造の概形を調べたり、
     遠く離れたサブディレクトリへ素早く移動できる。

通常のdiredコマンドは、隠蔽されたサブディレクトリ内のファイルについてまっ
たく考慮しません。たとえば、印を付けたファイルに作用するコマンドは、隠
蔽されたディレクトリ内に印を付けたファイルがあったとしてもそれらを無視
します。したがって、サブディレクトリを一時的に隠蔽すれば、印を消さなく
てもサブディレクトリを操作対象から外せます。

サブディレクトリを隠蔽するコマンドはトグルとして働きます。つまり、表示
されていれば隠蔽し、隠蔽されていれば表示します。



