Info file: emacs-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs-ja: (emacs-ja).	            Emacs21.3日本語マニュアル.
END-INFO-DIR-ENTRY








File: emacs-ja, Node: Checklist, Next: Sending Patches, Prev: Understanding Bug Reporting, Up: Bugs

バグレポートのチェックリスト *(2004/03/29)*
-------------------------------------------

バグレポートを送る最良の方法は、電子メイルでEmacs保守チーム
`bug-gnu-emacs@gnu.org'かベータ版をテスト中であれば
<emacs-pretest-bug@gnu.org> に送ることです。（重要な改良の提案などもこ
こに送ってください）。

他から出されたバグレポートが読みたければ、ニュースグループ
`gnu.emacs.bug'で読めます。ただし、傍観者として見る場合には、見たものに
ついて批判するべきではない、ということを承知しておいてください。バグレ
ポートの目的はEmacs保守チームに情報を提供することです。傍観者は、この目
的に干渉しない限りは、歓迎します。特に、大量のデータが添付されているバ
グレポートもありますので、傍観者はそのことを非難すべきではありません。

ネットニュース経由でバグレポートを投稿しないでください。ネットニュース
よりもメイルのほうが送り手のメイルアドレスが確実にわかり信頼できます。
もっと情報が必要なときには、メイルで問い合わせる必要があるかも知れませ
ん。もし，データが500,000バイト以上ある場合には，バグレポートにそのデー
タは含めないようにしてください．かわりに，必要があれば送付する旨を付記
したり，ftpなどで利用できるようにしてください．

電子メイルを送れない場合には、紙や他の機械可読な媒体で下記へ送ってくだ
さい。

GNU Emacs Bugs
Free Software Foundation
59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

バグを修正するとは約束できません。しかし、重大なバグや、醜いバグや、簡
単に直せるバグなら、直したいと思います。

Emacsのバグレポートを送るのに便利な方法の1つは、コマンド`M-x
report-emacs-bugs'を使うことです。このコマンドはメイルバッファ（*Note
Sending Mail::）を開いて、自動的に重要な情報*の一部*を書き込みます。し
かし、必要な情報をすべて入れられるわけではありませんから、以下の指針を
読んでそれに従い、メッセージを送るまえに重要な情報を自分で打ち込んでく
ださい。

保守チームがバグの調査を開始するためには、以下のすべてがバグレポートに
含まれている必要があります。

   * Emacsのバージョン番号。これがないと、GNU Emacsの最新版でバグを探す
     べきかどうか判断できない。

     バージョン番号を調べるには、`M-x emacs-version RET'と打つ。このコ
     マンドが動作しないようなら、GNU Emacsではないエディタを使っている
     ようなので、どこか別のところへバグを報告する。

   * 使っているマシンの種類、オペレーティングシステムの名前とバージョン。
     `M-x emacs-version RET'でこれらの情報も表示される。`*Messages*'バッ
     ファからその出力をコピーすれば、すべての情報をまちがいなく送れる。

   * Emacsをインストールしたときの`configure'コマンドの引数。

   * Emacsソースに変更を加えた場合は、そのすべてのリスト。（ソースを修
     正したEmacsで起きたバグまでも調査する時間はない。しかし、修正を加
     えたのにそれを教えてくれなければ、厄介ごとを他人に押し付けているだ
     け。）

     これらの変更については正確に記してほしい。英語での説明では不十分。
     ソースのコンテキストdiffを送ること。

     独自のファイルを追加したり、別のマシンに移植するのも、ソースの変更
     にあたる。

   * その他、GNU Emacsの標準のインストール手順と違っているところがあれ
     ば、すべて詳しく記述する。

   * そのバグを再現するために必要なすべてのファイルの内容。

     ファイルをまったく訪問せずに問題が再現可能なら、ぜひ教えてほしい。
     そのほうがデバッグがずっと楽になる。どうしてもファイルが必要なら、
     必ずその内容が正確にわかるようにすること。たとえば、行末に空白文字
     が付いているかどうかとか、バッファの最終行に改行文字があるかどうか
     が問題になることは頻繁にある（最終行に改行があるかどうかで何か違い
     があるべきではないのだが、もし違いが生じるようならそれもバグといえ
     る）。

   * バグを再現させるために打ち込む正確なコマンド列。

     Emacsへの入力を正確に記録する簡単な方法は、ドリブルファイルに書く
     ことである。ドリブルファイルを開始するには、Emacsを実行開始した直
     後に、`M-:'かバッファ`*scratch*'でつぎのLisp式を実行する。

          (open-dribble-file "~/dribble")

     それ以降はEmacsプロセスが終了するまで、Emacsはすべての入力をドリブ
     ルファイルにコピーする。

   * 表示に関するバグの可能性がある場合には、端末種別（環境変数`TERM'の
     値）、（すべてのマシンで同じとは限らないので）`/etc/termcap'ファイ
     ル中の当該端末のtermcapの定義すべて、および、Emacsが実際に端末に送っ
     た出力。

     端末への出力を収集するには、Emacsを実行開始した直後に、`M-:'かバッ
     ファ`*scratch*'でつぎのLisp式を実行する。

          (open-termscript "~/termscript")

     それ以降、Emacsはプロセスが終了するまでのすべての端末出力の写しを
     指定されたtermscriptファイルに書き出す。Emacsが起動するときに問題
     が起きるのなら、上の式を`.emacs'ファイルに入れて、Emacsが最初に画
     面を開くときに一緒にtermscriptファイルも書き始めるようにする。

     ただし、端末に依存したバグは、そのバグの出る端末なしで直すことは難
     しいことが多く、ときとして不可能であることも承知しておいてほしい。

   * 正しくないと結論したことがどう正しくないのか記述する。たとえば、
     「Emacsプロセスが致命的なシグナルを受け取る」とか「最終的なテキス
     トはつぎのようになるが、これは正しくない。」など。

     もちろん、Emacsが致命的なシグナルを受け取るのなら、それは誰にでも
     わかる。しかし、バグが正しくないテキストだとすると、保守チームには
     どこが正しくないのかわからない可能性がある。そういう可能性のある書
     き方はやめてほしい。

     遭遇する問題が致命的なシグナルだとしても、はっきりとそう書くべきで
     ある。たとえば、Emacsのソースが一部違っている版だったとか、システ
     ムのCライブラリのバグに遭遇したといった奇妙なことに出会ったとしよ
     う（実話！）。あなたが使っているEmacsはクラッシュするが、保守チー
     ムのほうでは何ともない。クラッシュすると*いって*もらえれば、保守チー
     ムのほうで実行してクラッシュしなければバグが再現しないとわかる。し
     かしそういってもらえないと、バグが再現したのかどうかさえわからずに、
     試してみた結果からは何の結論も得られない。

   * バグの結果がEmacsのエラーメッセージであれば、そのエラーメッセージ
     の文面を正確に報告することと、Emacs中のLispプログラムがどうやって
     そのエラーの箇所に到達したかを示すバックトレースを報告することが重
     要。

     エラーメッセージの文面を正確に報告するには、`*Message*'バッファか
     らメッセージをバグレポートにコピーする。一部ではなく、全体をコピー
     してほしい。

     エラーのバックトレースを取得するには、エラーが発生するよりまえにLisp式
     `(setq debug-on-error t)'を評価する
     （つまり、まずこのLisp式を実行して、それからエラーを再現させる）。
     すると、エラーが起きたときにLispデバッガが実行され、
     デバッガがバックトレースを表示する。
     このデバッガのバックトレース出力を、バグレポートにコピーする。

     このやり方は、バグを再現できるときだけ使える。再現できない場合は、
     最低限、エラーメッセージだけでもすべてコピーする。

   * 個人のファイル`.emacs'を含めてロードしたLispコードのどれかが、
     Emacsの動作に影響するような変数設定を行っていないか確認する。また、
     （オプション`-q'を指定して初期化ファイルのロードを抑制して）個人の
     ファイル`.emacs'をロードせずに起動したEmacsでもエラーが再現するか
     どうか調べる。これでエラーが再現*しない*なら、エラーの再現に必要な
     ので、ロードしたすべてのプログラムの内容を正確に報告する。

   * 問題が初期設定ファイルや標準のEmacsシステムに含まれないLispプログ
     ラムに依存するなら、まずそれらを保守している人に相談して、それらの
     プログラムの問題ではないことを確認する。その人たちが、そのコードは
     Emacsの正しい使い方をしていると確認したうえで、その人たちがバグを
     報告するべきである。

   * GNU Emacsのソースに関して何かコメントしたいなら、その部分のコード
     を前後数行を含めて示したうえでコメントする。行番号だけ書くというの
     はやめてほしい。

     開発中のソースの行番号とユーザーが入手するソースの行番号とは同じで
     はない。あなたが使っているバージョンのソースの何行目が、開発中のソー
     スの何行目に対応しているか調べるのは余分な手間であり、正確にはわか
     らないかもしれない。

   * GDBなどのC言語用のデバッガからの追加情報があると、保守チームの手元
     にないマシンでもバグの原因がわかることもある。もしGDBの使い方がわ
     からないようなら、GDBのマニュアルをぜひ読んでほしい。たいして長く
     ないし、GDBを使うのは簡単。GDBのオンライン形式のマニュアルを含む
     GDBの配布は、たいていはEmacsの配布と同じ場所に置いてある。GDBを用
     いてEmacsを実行するには、Emacsをコンパイルしたサブディレクトリ
     `src'に移動してから、`gdb emacs'を行う必要がある。GDBがディレクト
     リ`src'にあるファイル`.gdbinit'を読めるように、このディレクトリが
     カレントディレクトリであることが重要。

     ただし、バグの原因を示すために追加情報を集める場合には、追加情報を
     いつ集めるかをよく考える必要がある。

     たとえば、多くの人はバックトレースだけを送ってくるが、それ単体では
     あまり役に立たない。引数の記録つきの単純なバックトレースでは、GNU
     Emacsの内部で何が起きているかについての情報はほとんどない。という
     のは、バックトレースに表示される引数のほとんどはLispオブジェクトへ
     のポインタだから。それらのポインタの値そのものは、なんら重要ではな
     い。重要なのは、ポインタが指している先のオブジェクトの内容（そして
     その内容もまたポインタであることが多い）。

     役に立つ情報を提供するには、Lispオブジェクトの値をLispの記法で示す
     必要がある。スタックの底付近にある数個のフレームについて、Lispオブ
     ジェクトであるような各変数に対してこれを行ってほしい。デバッガは単
     なる整数だと思うので、どの変数がLispオブジェクトであるかはソースを
     見てほしい。

     変数の値をLispの記法で示すには、まず、その値をプリントしてから、
     GDBのユーザー定義コマンド`pr'を使ってLispオブジェクトをLispの記法
     で表示させる。（別のデバッガを使わなければならない場合は、オブジェ
     クトを引数として関数`debug_print'を呼び出す）。コマンド`pr'は、ファ
     イル`.gdbinit'で定義されており、（コアダンプではなく）実行中のプロ
     セスをデバッグするときだけ使える。

     Lispでエラーが発生したときにEmacsを中断してGDBに戻るようにするには、
     `Fsignal'にブレークポイントを設定する。

     実行中のLisp関数の簡素な一覧を表示するには、GDBのコマンド
     `xbacktrace'を打つ。

     Lisp関数の引数を調べたい場合には、スタック上を上に移動していき関数
     `Ffuncall'のフレームに到達するごとに、つぎのようなGDBコマンドを打
     つ。

          p *args
          pr

     関数が受け取った最初の引数を出力するには、つぎのようにする。

          p args[1]
          pr

     2番目以降の引数でも同様に出力できる。`Ffuncall'の引数`nargs'は、
     `Ffuncall'が受け取った引数の個数を表す。この個数は、Lisp関数自身と
     その関数に対する引数とを合わせた数。

     ファイル`.gdbinit'は、
     データタイプやLispオブジェクトの中身を調べるのに役立つコマンド類を定義する。
     それらのコマンドの名前は`x'で始まる。
     これらのコマンドは`pr'より下位のレベルで動作し使い難いが、
     コアダンプをデバックしたり、
     Emacsが致命的なシグナルを受理したときのように
     `pr'がうまく動かないときでも使える。

   * バグの症状がEmacsが応答しなくなるというものでも、Emacsが『ハング』
     した（固まった）と考えてはいけない。無限ループに入っているのかもし
     れない。どちらであるかを調べるには、GDBのもとでバグを再現させ、応
     答しなくなったところでEmacsを止める。（EmacsがXウィンドウシステム
     を直接使っている場合は、GDBのジョブに対して`C-z'を打てばEmacsを止
     められる）。そして、コマンド`step'で1ステップずつ実行を試みる。固
     まっているのならコマンド`step'から戻ってこない。ループしているなら
     `step'から戻ってくる。

     こうして調べた結果、Emacsがシステムコールの中で固まっているとわかっ
     たら、Emacsを再度止めて、システムコールの引数を調べる。そしてバグ
     レポートには、ソース中でのシステムコールの正確な位置と、引数が何だっ
     たかを正確に記入する。

     Emacsが無限ループしているのなら、ループの始まりと終りを調べる。もっ
     とも簡単にこれを調べるには、GDBのコマンド`finish'を使う。このコマ
     ンドを使うたびに、1つのスタックフレームから抜けるまでEmacsは実行を
     継続する。戻ってこなくなるまで、繰り返し`finish'を打つ。戻ってこな
     いのは、そのフレームで無限ループが起こっているからである。

     ここでEmacsを再度停止し、戻ってこなくなったフレームに*ちょうど戻る
     *まで、繰り返し`finish'を使う。つぎに、`next'を使ってそのフレーム
     内で1ステップずつ実行する。こうすれば、ループがどこで始まりどこで
     終るかわかる。さらに、ループ内で使われているデータを調べて、ループ
     が終るべきところでなぜ終らないかを追求してみてほしい。これらの情報
     すべてを、バグレポートに含める。

以下には、バグレポートに必要ないものをあげておきます。

   * バグの生起条件に関する記述。再現可能なバグに対しては不要。

     バグに出会った人はしばしば、入力をどう変えるとバグが出なくなるとか、
     あるいは、相変わらず出るといったことを探求するのに時間をかける。

     これは時間がかかるわりには、役に立たない。というのは、保守チームが
     デバッグを行うときには、デバッガのもとでブレークポイントを設定しな
     がらバグの出る1つの例を実行するのであって、何通りもの例から帰納的
     に推論するわけではない。だから、別の例を探すのに時間をかけたりしな
     いでほしい。

     もちろん、もとの例の*かわりに*使えるもっと簡単な例がみつかれば、そ
     れは役に立つ。簡単な例なら、出力中のエラーもみつけやすくなり、デバッ
     ガを使って実行するにも短い時間ですむ。

     ただし、単純化は必須ではない。もし単純化できなかったり、単純化する
     時間がなければ、もとの例のままでよいので、バグレポートを出してほし
     い。

   * Emacs実行のシステムコールトレース

     ある特別な種類のバグについては、システムコールトレースは非常に役立
     つが、多くの場合はほとんど有用な情報は得られない。したがって、多く
     の人がシステムコールのトレースこそクラッシュに関する情報を報告する
     のに欠かせないものだと思っているらしいのは、不思議である。これはた
     ぶん、ソースコードやデバッグ用シンボルのないプログラムをデバッグし
     た経験から生まれた習慣だろう。

     ほとんどのプログラムでは、システムコールのトレースより、バックトレー
     スのほうがずっとずっと役に立つ。Emacsでさえ、単純なバックトレース
     のほうが有用である。しかし、十分な情報を提供するには、バックトレー
     スの補記として、変数の値を表示し`pr'でLispオブジェクトとしても表示
     する（上記参照）。

   * バグに対する修正。

     バグに対する修正は、よい品質のものなら有用である。しかし、修正が正
     しいことを示すテスト例などのバグレポートに必要な情報を省かないでほ
     しい。修正に問題があるとわかって別のやり方でバグをつぶすかもしれな
     いし、報告された修正がまったく理解できないこともありえる。そして、
     どんなバグを修正しようとしているのかわからない、あるいは、その修正
     がなぜ改良になるのかわからなければ、その修正を採用するわけにいかな
     い。

     我々にとって、読者のパッチが理解しやすく、
     インストールしやすくするための指針については、
     *Note Sending Patches::。

   * バグが何であるか、また何に依存しているかについての予想。

     こういう予想は、たいていはまちがっている。専門家でさえ、まずデバッ
     ガで事実を調べない限り、正しい予想はできない。



File: emacs-ja, Node: Sending Patches, Prev: Checklist, Up: Bugs

GNU Emacsに対する修正を送る
---------------------------

GNU Emacsに対する改良や虫取りのための修正を送ろうということであれば、お
おいに助かります。修正を送るにあたっては、保守チームがそれを役立てやす
いように、以下の指針に従ってください。さもないと、送られた情報は有用で
あっても、役立てるには余分な作業が必要になります。GNU Emacsの保守は最善
の環境でやっても手間のかかる仕事ですから、手助けしていただくにしても十
分な配慮が必要なのです。

   * その修正がどのような問題を解決するものか、またはどのような改善をも
     たらすものなのかの説明を送ってほしい。バグに対する修正の場合は、バ
     グレポートのコピーと、なぜこの修正でバグが取れるのかの説明を含める。

     （バグレポートへのポインタを示すよりも、バグレポートのコピーを含め
     るほうが望ましい。というのは、ポインタだとバグレポートを探す必要が
     あるし、そのバグを直し終えていると、バグレポートを消してしまってい
     るかもしれない。）

   * 修正したと思う問題に対応した適切なバグレポート全体をつねに含めてほ
     しい。保守チームのほうでも修正を適用するまえにその変更が適切なもの
     であることを確信する必要がある。たとえ修正が正しいものであっても、
     もとの問題を再現する方法がないと、修正内容を正しく理解できないかも
     しれない。

   * 将来そのソースを読むすべての人に、その変更がなぜ必要だったか理解す
     るのを助けるに足るだけのコメントをソースに入れる。

   * 異なる理由に基づく変更を混ぜない。あくまでも*別々に*送る。

     異なる理由に基づいて2つの変更を行った場合、その両方を採用すること
     はないだろう。どちらか一方だけを採用するかもしれない。もしそれらを
     いっしょくたに1つのdiffにしてしまうと、それを分離するために余計な
     作業が必要になる。どの部分の変更がどちらの目的に対応しているのか調
     べる必要がある。その時間を割けないと、その変更をまったく採用しない
     ということにもなりかねない。

     それぞれの変更を行ってすぐに、別個に、説明を付けて送ってもらえれば、
     2つの変更が一緒になるなどということはないし、それぞれの変更を分離
     するなどの余計な作業をせずに適切に考慮できる。

   * それぞれの変更は完成したらすぐに送ってほしい。ときどき、多くの変更
     を溜めておいてまとめて送ったほうがいいと思っている人に出会う。上で
     説明したように、それは最悪のやり方。

     それぞれの変更は別個に送るべきなので、変更を行ったらすぐに送れるは
     ず。そうすれば、保守チームのほうでその変更が重要なものだと判断した
     らすぐ取り入れることができる。

   * diffファイルを作るときには、`diff -c'を使う。コンテキストdiffでな
     いdiffファイルは正しく適用するのが難しい。それ以上に、調べるのもた
     いへん。必ず保守チームの人間が修正を適用するかどうか検討する。
     `-u'形式は行番号だけのdiffよりはましだが、いちばん読みやすいのは
     `-c'形式。

     もしGNU diffを使っているのなら、Cのコードのdiffを作るときには
     `diff -c -F'^[_a-zA-Z0-9$]+ *(''を使う。こうすると、変更される各関
     数の名前が一緒に表示される。

   * どっちが古い版でどっちが新しい版か曖昧さがないようにする。diffコマ
     ンドの第1引数に古いファイル、第2引数に新しいファイルを指定して
     diffファイルを作成する。そして、それぞれのファイル名を見ればどっち
     が古い版でどっちが新しい版かわかるようにファイル名を付ける。

   * 変更に対する変更記録を書く。そうしてあれば、保守チームのほうで書く
     時間が節約でき、保守チームが変更内容を理解する手助けにもなる。

     変更記録の目的は、人が読んでどこが変わったかわかるようにすること。
     だから、どの関数を変更したか具体的に書く。大きい関数の場合は、関数
     の中のどの箇所を変更したかも書いてあると助かる。

     その反面、どこが変更されたかわかるようにさえなっていれば、変更の目
     的は変更記録で説明する必要はない。たとえば、新しい関数を追加したの
     であれば、その関数が新しいということだけを書けば十分。目的を説明し
     たほうがよいと感じるなら、たぶんそのとおりだろう。しかし、説明はコー
     ド中のコメントに書く。そのほうが役に立つ。

     ディレクトリ`src'とディレクトリ`lisp'のファイル`ChangeLog'を眺めて、
     どのような情報を入れるかとか、どのようなスタイルで書くかの参考にし
     てほしい。誰が変更したかわかるように自分の名前をヘッダの行に記録し
     たいなら、ヘッダ行も送ること。

   * 修正を行うにあたっては、他のシステムで動かなくなるような変更は採用
     できないということを承知しておいてほしい。自分が行う変更が、他の種
     類のシステムにおいてはどのような影響をもたらすかについて熟慮してほ
     しい。

     ときどき、おおむね改良になる*かも*しれないが、はっきり改良だとはい
     いがたいような変更を送ってくる人がいる。そのような変更は、きわめて
     慎重に検討しなければならないので、採用するのは難しい。もちろん、あ
     なたがどのような理由でその変更が正しいのかよい説明を書いてくれれば、
     保守チームがそれを理解する助けになる。

     もっとも安全な変更は、特定のマシンの構成ファイルに対する変更。それ
     が安全だという理由は、その変更が他のマシンにおいて問題を引き起こす
     ことはありえないから。

     修正を採用しても安全だとはっきりわかる形に設計することで、保守チー
     ムの労力を軽減できる。



File: emacs-ja, Node: Contributing, Next: Service, Prev: Bugs

Emacsの開発に貢献するには
=========================

Emacsのプレテスト版が正しく動作することの確認を手助けしたかったり、
Emacsの改良作業に加わりたければ、`bug-gun-emacs@gnu.org'の保守チームに
連絡してください。プレテスト参加者は、バグを報告するだけでなく、バグを
探すことも要求されます。Emacsの改良に加わりたければ、保守チームにプロジェ
クトの示唆を求めるか、あなたのアイデアを提案してください。

すでに改良したコードを書いてしまったのなら、それについて教えてください。
まだ作業を始めていないのなら、始めるまえに`bug-gnu-emacs@gnu.org'に連絡
したほうがよいです。そうすれば、Emacsの残りの部分とよく適合する形で拡張
を行うにはどうしたらよいかのヒントがもらえるでしょう。



File: emacs-ja, Node: Service, Prev: Contributing

GNU Emacsに関する助言を得るには
===============================

GNU Emacsをインストールしたり、使ったり、変更したりするうえで手助けが必
要なら、2つの方法があります。

   * メイリングリスト`help-gnu-emacs@gnu.org'にメッセージを送るか、ニュー
     スグループ`gnu.emacs.help'に投稿する。（これらのメイリングリストと
     ニュースグループは相互乗り入れしているので、どちらを使ってもかまわ
     ない。）

   * サービスディレクトリで、有償で手助けしてくれるような人を探す。サー
     ビスディレクトリは、Emacs配布物の中のファイル`etc/SERVICE'にある。


File: emacs-ja, Node: Command Arguments, Next: X Resources, Prev: Quitting, Up: Top

コマンド行引数
**************

GNU Emacsでは、コマンド行引数によりEmacs起動時にさまざまな動作を指定で
きます。これらは他のエディタとの互換性のためや洗練されたふるまいを担う
ものです。通常の編集作業にはそれらを使うことはお勧めしません。

`-'で始まる引数は"オプション"（option）です。それ以外の引数は訪れるべき
ファイルを指定します。Emacsは、起動すると指定したファイルを読み込みます。
コマンド行のいちばん最後のファイル名がカレントバッファとなりますが、そ
れ以外のファイルも別々のバッファに入っています。他のGNUのコマンドと同様
に、特殊な引数`--'は、これよりあとの引数が`-'で始まっている場合でも、す
べてファイル名であることを指定します。

Emacsのコマンドオプションでは、Emacsが使用するXのウィンドウのサイズや位
置、表示色などのさまざまなことを指定できます。バッチモードでLisp関数を
実行するなどの進んだ利用のためのオプションも若干あります。ここでは、目
的別に利用可能なオプションを説明します。

オプションの書き方は2通りあります。
1文字の`-'で始まる短い形式と、`--'で始まる長い形式です。
たとえば、`-d'は短い形式であり、
`--display'はこれに対応した長い形式です。

`--'で始まる長い形式のほうが覚えやすいですが、打ち込むのは面倒です。し
かし、オプション名を完全にすべて入力する必要はありません。曖昧でないよ
うに省略すれば十分です。長いオプションが引数をとる場合には、オプション
名と引数のあいだに空白か等号を置きます。つまり、`--display
sugar-bombs:0.0'と書くか、`--display=sugar-bombs:0.0'と書きます。関係が
明瞭になることもあり、以下の例でもつねに等号を使っていますので、等号を
使うようお勧めします。

ほとんどのオプションは、Emacsをどう初期化するか、あるいは、Emacsセッショ
ンのパラメータをどう設定するか指示します。これらを"初期化オプション
（initial options）と呼びます。動作を指定するオプションもいくつかありま
す。たとえば、ライブラリをロードする、関数を呼び出す、Emacsを終了するな
どです。これらを"動作オプション"（action options）と呼びます。これらと
ファイル名をあわせて"動作引数"（action arguments）と呼びます。Emacsはす
べての動作引数を書かれた順に処理します。

* Menu:

* Action Arguments::	Arguments to visit files, load libraries,
			  and call functions.
* Initial Options::     Arguments that take effect while starting Emacs.
* Command Example::     Examples of using command line arguments.
* Resume Arguments::	Specifying arguments when you resume a running Emacs.
* Environment::         Environment variables that Emacs uses.

* Display X::           Changing the default display and using remote login.
* Font X::	        Choosing a font for text, under X.
* Colors X::	        Choosing colors, under X.
* Window Size X::       Start-up window size, under X.
* Borders X::	        Internal and external borders, under X.
* Title X::             Specifying the initial frame's title.
* Icons X::             Choosing what sort of icon to use, under X.
* Resources X::         Advanced use of classes and resources, under X.
* Lucid Resources::     X resources for Lucid menus.
* Motif Resources::     X resources for Motif menus.



File: emacs-ja, Node: Action Arguments, Next: Initial Options, Prev: Command Arguments, Up: Command Arguments

動作引数
========

以下は、動作引数とオプションとその引数の一覧です。

`FILE'
     `find-file'を使ってファイルFILEを訪れる。
     *Note Visiting::。

`+LINENUM FILE'
     `find-file'を使ってファイルFILEを訪れ、その中の行番号LINENUMの行に
     移動する。

`-l FILE'
`--load=FILE'
     関数`load'を使ってFILEという名前のLispライブラリをロードする。
     *Note Lisp Libraries::。ライブラリは、カレントディレクトリか
     `EMACSLOADPATH'（*Note General Variables::）で指定されたEmacsのラ
     イブラリ探索パスから探す。

`-f FUNCTION'
`--funcall=FUNCTION'
     引数なしでLisp関数FUNCTIONを呼び出す。

`--eval EXPRESSION'
     Lisp式EXPRESSIONを評価する。

`--insert=FILE'
     ファイルFILEの内容をカレントバッファに挿入する。
     これは`M-x insert-file'と同じ動作。
     *Note Misc File Ops::。

`--kill'
     問い合わせずにEmacsを終了する。

初期化ファイルでは、変数`command-line-args'内のリストの要素として動作引
数の値を参照できます。初期化ファイルでは、この変数を読んだり設定するこ
とで、動作引数の通常の処理を無効にしたり新たなものを定義したりできます。



File: emacs-ja, Node: Initial Options, Next: Command Example, Prev: Action Arguments, Up: Command Arguments

初期化オプション
================

初期化オプションはEmacsセッションのパラメータを指定します。ここでは、よ
り一般的な初期化オプションを説明します。Xウィンドウシステムに関連する他
のオプションはこのあとの節にあります。

初期化ファイルのロードに影響する初期化オプションもあります。Emacsの通常
の動作は、まず`site-start.el'（が存在すればそれ）をロードし、続いて個人
用の`~/.emacs'（が存在すればそれ）をロードし、最後に`default.el'（が存
在すればそれ）をロードします。これらのファイルのロードを抑制したり、代
替ファイルを指定するオプションがあります。

`-t DEVICE'
`--terminal=DEVICE'
     入出力端末装置としてDEVICEを使う。

`-d DISPLAY'
`--display=DISPLAY'
     Xウィンドウシステムを用い、ディスプレイ名DISPLAYのディスプレイに
     Emacsの初期フレームを開く。

`-nw'
`--no-windows'
     環境変数`DISPLAY'が設定されている場合でもそれを無視し、Xとは直接通
     信しない。

`-batch'
`--batch'
     Emacsを"バッチモード"で実行する。つまり、編集中のテキストを表示せ
     ずに、`C-z'と`C-c'などの標準の端末割り込み文字は通常の効果をもつ。
     バッチモードのEmacsでは、プログラムの制御に従って通常エコー領域に
     表示されるもののみを`stderr'へ出力する。

     バッチモードは、シェルスクリプトやmakefileなどからEmacs Lispで書い
     たプログラムを実行するために使う。バッチ処理を行うLispプログラムを
     起動するために、通常、オプション`-l'や`-f'も使われる。

     `-batch'は、（初期化ファイルをロードしない）`-q'を含む。また、すべ
     てのコマンドオプションを処理し終えるとEamcsは終了する。さらに、明
     示的に指定しない限りバッファを自動的に保存しない。

`-q'
`--no-init-file'
     個人の初期化ファイル`~/.emacs'も`default.el'もロードしない。

`--no-site-file'
     `site-start.el'をロードしない。オプション、`-q'、`-u'、`-batch'は、
     このファイルのロードには影響しない。ファイル`site-start.el'のロー
     ドを抑止する唯一のオプションである。

`-u USER'
`--user=USER'
     自分の初期化ファイルのかわりにユーザーUSERのEmacs初期化ファイル
     `~USER/.emacs'をロードする。

`--debug-init'
     初期化ファイル内でのエラーに対しEmacs Lispデバッガを利用可能にする。

`--unibyte'
     ユニバイトバッファやユニバイト文字列を使うようにすべてを設定する。
     ユーザー（やLispプログラム）がマルチバイトバッファやマルチバイト文
     字列の使用を明示しない限り、すべてのバッファや文字列はユニバイトで
     ある。環境変数`EMACS_UNIBYTE'を設定しても同じ効果になる。

`--multibyte'
     `EMACS_UNIBYTE'の効果を禁止し、通常のように、Emacsはデフォルトでマ
     ルチバイト文字を使う。



File: emacs-ja, Node: Command Example, Next: Resume Arguments, Prev: Initial Options, Up: Command Arguments

コマンド引数の例
================

以下は、引数やオプションを指定したEmacsの使用例です。ファイル
`hack-c.el'にはLispプログラムが入っているものとします。これをロードする
と、Cのプログラムを内容とするカレントバッファに対してなんらかの有用な操
作を行うものとします。

     emacs -batch foo.c -l hack-c -f save-buffer >& log

この意味は、`foo.c'を訪れ、（訪れたファイルを変更する）`hack-c.el'をロー
ドし、`foo.c'に保存し（`save-buffer'は`C-x C-s'にバインドされた関数）、
（`-batch'があるので）終了してシェルへ戻ります。また、`-batch'により
Emacsは表示端末を利用できないと仮定するので、出力を`log'へリダイレクト
しても問題ないことが保証されます。



File: emacs-ja, Node: Resume Arguments, Next: Title X, Prev: Command Example, Up: Command Arguments

引数を指定したEmacsの再開
=========================

Emacsをいったん休止したあとで再開するときには動作引数を指定できます。そ
の準備として、個人の`.emacs'につぎのコードを入れておきます（*Note
Hooks::）。

     (add-hook 'suspend-hook 'resume-suspend-hook)
     (add-hook 'suspend-resume-hook 'resume-process-args)

さらに、（cshを使っているなら）シェルスクリプト`emacs.csh'か、（bashを
使っているなら）`emacs.bash'を実行する必要があります。これらのスクリプ
トは`edit'という別名（エイリアス）を定義します。この別名は、訪れるべき
ファイルなどのコマンド行引数を新たに与えてEmacsを（休止状態から）再開し
ます。

Emacsを再開する場合には動作引数しか使えません。初期化引数は認識されませ
ん。なぜなら、初期化を行うには遅すぎるのです。

（引数の有無に関わらず）Emacsの再開はEmacsジョブの親であるシェルから行
う必要があります。`edit'が、プログラムやシェルスクリプトではなく、別名
であるのはこのためです。シェルの別のサブジョブから実行できる再開コマン
ドを実現することは不可能です。たとえば、環境変数`EDITOR'の値に指定でき
るコマンドを定義する方法はありません。したがって、この機能でEmacsサーバー
の機能（*Note Emacs Server::）を置き換えることはできません。

別名`edit'は、Emacsサーバーが稼働中ならEmacsサーバーの機能を使います。
しかし、このことを完全に正確に調べる方法はありません。実際にはEmacsが終
了していても、ファイル`/tmp/.esrv...'が存在するとサーバーが稼働中である
と誤認してしまいます。そのような場合には、そのファイルを探して削除して
ください。



File: emacs-ja, Node: Environment, Next: Title X, Prev: Resume Arguments, Up: Command Arguments

環境変数
========

ここでは、Emacsがどうのように環境変数を使うか説明します。環境変数とは、
オペレーティングシステムからEmacsへ渡される文字列であり、環境変数の集ま
りが環境です。環境変数名では大文字小文字を区別し大文字だけを使う習慣が
あります。

環境変数はオペレーティングシステムが与えるものなので、
それらを設定する一般的な方法はありません。
設定方法は、オペレーティングシステム、特に、使用するシェルに依存します。
たとえば、bashを使って環境変数`ORGANIZATION'に
`not very much'を設定するにはつぎのようにします。

     export ORGANIZATION="not very much"

cshやtcshの場合にはつぎのようにします。

     setenv ORGANIZATION "not very much"

EmacsがXウィンドウシステムを使うようになっている場合には、EmacsはXライ
ブラリから非常に多数の環境変数を受け継ぎます。詳しくはXのドキュメントを
参照してください。

* Menu:

* General Variables::   Environment variables that all versions of Emacs use.
* Misc Variables::      Certain system-specific variables.



File: emacs-ja, Node: General Variables, Next: Misc Variables, Prev: Resume Arguments, Up: Resume Arguments

一般的な変数
------------

`AUTHORCOPY'
     GNUSパッケージで投稿したニュース記事の保管用ファイルの名前。
`CDPATH'
     相対ディレクトリ名を指定したときに、そのディレクトリを探索するため
     に`cd'コマンドが使う。
`DOMAINNAME'
     Emacsが動いているマシンが属するInternetのドメイン名。
     GNUSパッケージが使う。
`EMACS_UNIBYTE'
     この環境変数を定義すると、
     Emacsはユニバイトバッファやユニバイト文字列を使うようにすべてを設定する。
     起動時に、毎回、コマンド行オプション`--unibyte'を使うのと等価である。
     *Note Initial Options::。
`EMACSDATA'
     Emacsに付属の機種独立なファイルを探すために使う変数
     `data-direcotry'の初期化に用いる。Emacs作成時の`paths.h'での設定に
     優先する。
`EMACSLOADPATH'
     ロードすべきEmacs Lispファイルを探索するディレクトリをコロンで区切っ
     た並び。Emacs作成時の`paths.h'での設定に優先する。
`EMACSLOCKDIR'
     複数のユーザーが同じファイルを同時に編集するの防ぐために用いるロッ
     クファイルを置くディレクトリ。Emacs作成時の`paths.h'での設定に優先
     する。
`EMACSPATH'
     Emacsに特有のバイナリファイルを置く場所。Emacs作成時の`paths.h'で
     の設定に優先する。
`ESHELL'
     シェル（shell）モードで使い、環境変数`SHELL'の設定に優先する。
`HISTFILE'
     ログインとつぎのログインのあいだでシェルコマンドを保存しておくファ
     イルの名前。この変数のデフォルトは、シェルとしてcshやtcshを使う場
     合は`~/.history'、bashの場合は`~/.bash_history'、kshの場合は
     `~/.sh_history'、その他の場合には`~/.history'である。
`HOME'
     ディレクトリ木構造上でのユーザーのファイルの置き場所。
     ティルダ（`~'）で始まるファイル名の展開に使われる。
     MS-DOSでは、Emacsが起動されたディレクトリがデフォルトであるが、
     `/bin'で終る場合には`/bin'は取り除く。
`HOSTNAME'
     Emacsが動いているマシンの名前。
`INCPATH'
     コロンで区切ったディレクトリの並び。
     `complete'パッケージがファイルを探すために使う。
`INFOPATH'
     infoファイルを収めたディレクトリをコロンで区切った並び。Emacs作成
     時の`paths.h'での設定に優先する。
`LANG'
`LC_ALL'
`LC_CTYPE'
     ユーザーの好みのローケル。
     ローケル名に、Nを1から4として、
     `8859-N'、`8859_N'、`8859N'が
     含まれると、自動的に`Latin-N'をEmacs起動時の言語環境に指定する。
     Nが9であると`Latin-5'を指定する。
`LOGNAME'
     ユーザーのログイン名。
     `USER'も参照。
`MAIL'
     ユーザーのシステムメイルスプールの名前。
`MAILRC'
     メイルの別名を収めたファイルの名前。デフォルトは`~/.mailrc'。
`MH'
     mhシステムの設定ファイルの名前。デフォルトは`~/.mh_profile'。
`NAME'
     ユーザーの実世界での名前。
`NNTPSERVER'
     ニュースサーバーの名前。mhやGNUSパッケージで用いる。
`ORGANIZATION'
     読者が所属している組織の名前。
     GNUSパッケージで投稿する記事のヘッダ「Organization:」の設定に使う。
`PATH'
     実行ファイルを置いたディレクトリをコロンで区切った並び。（MS-DOSで
     はセミコロンで区切る。）この変数はEmacs Lispの変数`exec-path'の設
     定に使われる。Emacsの中ではこのLisp変数の値を使うことになる。
`PWD'
     設定すると、Emacs起動時のデフォルトディレクトリになる。
`REPLYTO'
     設定すると、変数`mail-default-reply-to'の初期値を指定する。
     *Note Mail Headers::。
`SAVEDIR'
     ニュース記事を保存するデフォルトのディレクトリ名。
     GNUSパッケージが使う。
`SHELL'
     Emacs内から起動するプログラムの解析や実行に用いるインタープリタの
     名前。
`TERM'
     Emacsが動いている端末の名前。バッチモードでの実行でなければこの変
     数を設定する必要がある。MS-DOSではデフォルトは`internal'であり、マ
     シン固有の画面を扱う内蔵の端末エミュレータを意味する。
`TERMCAP'
     変数`TERM'で指定した端末をどのように制御するか記述したtermcapライ
     ブラリファイルの名前。デフォルトは`/etc/termcap'。
`TMPDIR'
     Emergeパッケージが使い、作業用ファイルの接頭辞。
`TZ'
     現在のタイムゾーン（時刻帯）を指定し必要なら夏時間も指定する。
     MS-DOSではデフォルトは国別コードに基づく。詳しくはファイル
     `msdos.c'を参照。
`USER'
     ユーザーのログイン名。`LOGNAME'も参照。MS-DOSではデフォルトは
     `root'。
`VERSION_CONTROL'
     変数`version-control'（*Note Backup Names::）の初期化に使う。



File: emacs-ja, Node: Misc Variables, Prev: General Variables, Up: Resume Arguments

その他の変数
------------

これらの変数は特定の場合に限って使われます。

`COMSPEC'
     MS-DOSにおいて、使用するコマンドインタープリタの名前。環境変数
     `SHELL'のデフォルト値になる。

`NAME'
     MS-DOSにおいて、この変数は変数`USER'のデフォルト値になる。

`TEMP'
`TMP'
     MS-DOSにおいて、作業用ファイルを置くディレクトリの名前を指定する。

`EMACSTEST'
     MS-DOSにおいて、内蔵の端末エミュレータの動作を記録するために使うファ
     イルを指定する。この機能はバグレポートを提出するときに有益である。

`EMACSCOLORS'
     MS-DOSシステムにおいて、スクリーンの初期表示色を設定してEmacs起動
     時に瞬間的にデフォルトの表示色が閃かないようにする。この変数の値は、
     デフォルトのフェイスの（1文字目で）前景色と（2文字目で）背景色を符
     号化した2文字であること。それぞれの文字は、標準的なPCのテキストモー
     ド画面の表示色を表す16進符号であること。

     PCの画面では、通常、8色の背景色しか扱えない。しかし、EmacsはDOSの
     画面を16色の背景色のモードに切り替えるので、背景色の下位4bitすべて
     が実際に使われる。

`WINDOW_GFX'
     Sunのウィンドウシステムを初期化するときに使う。



File: emacs-ja, Node: Display X, Next: Title X, Prev: Resume Arguments, Up: Command Arguments

ディスプレイ名の指定
====================

環境変数`DISPLAY'は、Emacsを含むすべてのXクライアントにウィンドウをどこ
に表示するかを教えます。普通の状況では、Xサーバーを起動してローカルでジョ
ブを走らせると、この変数の値はデフォルトで設定されます。場合によっては、
自分でディスプレイを指定する必要があるでしょう。たとえば、リモートログ
インしてリモート側でクライアントプログラムを実行し、表示はローカルの画
面にする場合です。

Emacsを使う場合、デフォルトのディスプレイを変更する主な理由は、他のシス
テムにログインしてそのシステム上でEmacsを実行し、ウィンドウはローカルの
画面に表示するためです。他のシステムにログインするのは、そのシステム上
に編集したいファイルがあるか、あるいは、実行したいEmacsの実行ファイルが
そのシステムにあるからでしょう。

環境変数`DISPLAY'の書式は`HOST:DISPLAY.SCREEN'です。HOSTはXウィンドウシ
ステムのサーバーマシンの名前、DISPLAYは同じマシンの別のサーバーと読者の
サーバー（X端末）を区別するために任意に割り振られた番号、SCREENは稀にし
か使いませんが1つのXサーバーで複数の端末画面を制御する場合に使います。
ピリオドとSCREENは省いてかまいません。指定する場合、SCREENは普通はゼロ
です。

たとえば、読者のホストの名前は`glasperle'であり、読者のサーバーは使用で
きるサーバーのうちで最初（でたぶん唯一）のものであるとすれば、
`DISPLAY'は`glasperle:0.0'となります。

Emacsを実行するときに明示的にディスプレイ名を指定できます。変数
`DISPLAY'を変更する、あるいは、オプションの`-d DISPLAY'や
`--display=DISPLAY'を指定します。たとえばつぎのようにします

     emacs --display=glasperle:0 &

オプション`-nw'を指定するとXを直接使用することを禁止できます。これも初
期化オプションです。Emacsに対して制御端末に通常のASCII文字を表示するよ
うに指示します。

セキュリティの設定によっては、リモートシステムのプログラムから読者のロー
カルのシステムに表示するのが禁止されます。この場合、Emacsを走らせるとつ
ぎのようなメッセージが出力されます。

     Xlib:  connection to "glasperle:0.0" refused by server

この問題は、`xhost'コマンド (1) (*Note Display X-Footnotes::) を用いて、
ローカルマシンにリモートシステムからのアクセス許可を与えれば解決できま
す。


File: emacs-ja  Node: Display X-Footnotes, Up: Display X

(1) 【訳注】ホスト単位でアクセスを制御する`xhost'コマンドより、ユー
ザー単位でアクセスを制御する`xauth'のほうが望ましいだろう。



File: emacs-ja, Node: Font X, Next: Title X, Prev: Resume Arguments, Up: Command Arguments

フォント指定オプション
======================

デフォルトでは、Emacsは`9x15'という名前のフォントでテキストを表示します。
この場合、各文字の幅は9ピクセル、高さは15ピクセルです。コマンド行のオプ
ション`-fn NAME'で別のフォントを指定できます。

`-fn NAME'
     デフォルトのフォントとしてフォントNAMEを使う。

`--font=NAME'
     `--font'は、`-fn'の別名。

Xにおいては、各フォントはダッシュで区切った11個の単語や数字からなる長い
名前を持ちます。短い愛称を持つフォントもあり、`9x15'はそのような愛称で
す。どちらの名前を用いてもかまいません。フォント名にはワイルドカードパ
ターンを使えますが、その場合には、EmacsはXにパターンに一致するフォント
を1つ選ばせます。以下の例は、`6x13'という愛称を持つフォントを指定するこ
とになります。

     emacs -fn "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" &

個人のファイル`.Xdefaults'でもフォントを指定できます。

     emacs.font: -misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1

長いフォント名はつぎのような形式です。

     -MAKER-FAMILY-WEIGHT-SLANT-WIDTHTYPE-STYLE...
     ...-PIXELS-HEIGHT-HORIZ-VERT-SPACING-WIDTH-CHARSET

FAMILY
     フォントファミリ名。たとえば`courier'。
WEIGHT
     通常、`bold'、`medium'、`light'のいずれか。フォントによっては他の
     単語もありえる。
SLANT
     `r'（roman）、`i'（italic）、`o'（oblique）、
     `ri'（reverse italic）、`ot'（other）のいずれか。
WIDTHTYPE
     通常、`condensed'、`extended'、`semicondensed'、`normal'のいずれか。
     フォントによっては他の単語もありえる。
STYLE
     付加的な書体名。この部分は普通は空であり、ほとんどの長いファイル名
     では2つのハイフンである。
PIXELS
     ピクセル単位でのフォントの高さ。
HEIGHT
     印刷機の「ポイント」の1/10（約1/720インチ）を単位とした画面上での
     フォントの高さ。いいかえれば、フォントのポイントサイズの10倍。垂直
     解像度を指定すれば、HEIGHTとPIXELSは比例する。したがって、どちらか
     一方を指定して他方には`*'を用いるのが一般的である。
HORIZ
     フォントが仮定するインチあたりのピクセル数で表した画面の水平解像度。
VERT
     フォントが仮定するインチあたりのドット数で表した画面の垂直解像度。
     通常、読者のシステムのフォントの解像度は読者の画面に適しているはず
     なので、これとHORIZには普通は`*'を指定する。
SPACING
     `m'（monospace）、`p'（proportional）、`c'（character cell）のいず
     れか。Emacsでは`m'と`c'のフォントを利用できる。
WIDTH
     ピクセル単位で表した文字の平均幅の10倍。
CHARSET
     フォントの描く文字集合。通常は`iso8859-1'を使うであろう。 (1)
     (*Note Font X-Footnotes::)

固定幅フォント、つまり、すべての文字が同じ幅のフォントだけを使ってくだ
さい。Emacsはまだ可変幅のフォントを正しく表示できません。長いフォント名
のSPACING欄が`m'や`c'のフォントは固定幅フォントです。読者のシステムで利
用可能な固定幅フォントをすべて表示するには、プログラム`xlsfotns'を用い
てつぎのようにします。

     xlsfonts -fn '*x*' | egrep "^[0-9]+x[0-9]+"
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'

特定のフォントの字形を見るにはコマンド`xfd'を使います。たとえば、

     xfd -fn 6x13

とするとフォント`6x13'全体を表示します。

Emacsが動作中のときは、カレントフレーム（*Note Frame Parameters::）、あ
るいは、特定の種類のテキスト（*Note Faces::）のフォントを設定できます。


File: emacs-ja  Node: Font X-Footnotes, Up: Font X

(1) 【訳注】日本語の場合は、通常、`jisx0208.1983-0'などを使う
であろう。



File: emacs-ja, Node: Colors X, Next: Title X, Prev: Resume Arguments, Up: Command Arguments

ウィンドウ表示色オプション
==========================

カラーディスプレイでは、Emacsの表示画面のさまざまな部分に使う表示色を指
定できます。システムで利用可能な表示色を調べるにはファイル
`/usr/lib/X11/rgb.txt' (1) (*Note Colors X-Footnotes::)を見ます。表示色
を指定しないと、背景色のデフォルトは白、それ以外の表示色のデフォルトは
黒です。モノクロディスプレイでは、前景色は黒、背景色は白、ディスプレイ
で表示できるなら境界部分は灰色です。

以下は、表示色を指定するオプションの一覧です。

`-fg COLOR'
`--foreground-color=COLOR'
     前景色を指定する。
`-bg COLOR'
`--background-color=COLOR'
     背景色を指定する。
`-bd COLOR'
`--border-color=COLOR'
     Xのウィンドウの境界部分の表示色を指定する。
`-cr COLOR'
`--cursor-color=COLOR'
     ポイント位置を表すEmacsのカーソルの表示色を指定する。
`-ms COLOR'
`--mouse-color=COLOR'
     マウスがEmacsのウィンドウ内にあるときのマウスカーソルの表示色を指
     定する。
`-r'
`--reverse-video'
     反転表示する。背景色と前景色を入れ替える。

たとえば、珊瑚色のマウスカーソルと青石板色のテキストカーソルを用いるに
は、つぎのように入力します。

     emacs -ms coral -cr 'slate blue' &

オプション`-r'かXリソースの`reverseVideo'で前景色と背景色を入れ替えられ
ます。


File: emacs-ja  Node: Colors X-Footnotes, Up: Colors X

(1) 【訳注】表示色として指定できる『名前』がわかるだけ。どのような色に
表示されるかは`xcolors'などのコマンドで調べるとよい。



File: emacs-ja, Node: Window Size X, Next: Title X, Prev: Resume Arguments, Up: Command Arguments

ウィンドウジオメトリオプション
==============================

オプション`-geometry'は、Emacsの初期フレームのサイズと位置を制御します。
ウィンドウのジオメトリ（サイズと位置）を指定する書式はつぎのとおりです。

`-g WIDTHxHEIGHT{+-}XOFFSET{+-}YOFFSET'
     WIDTHとHEIGHTでウィンドウの（文字の桁数と行数で数えた）サイズを、
     XOFFSETとYOFFSETで（ピクセル単位で）位置を指定する。

`--geometry=WIDTHxHEIGHT{+-}XOFFSET{+-}YOFFSET'
     同じことを記述する別の方法。

`{+-}'はプラス記号かマイナス記号のいずれかを意味します。XOFFSETのまえの
プラス記号で画面左端からの距離を、マイナス記号で右端からの距離を意味し
ます。YOFFSETのまえのプラス記号で画面上端からの距離を、マイナス記号で下
端からの距離を意味します。XOFFSETとYOFFSETの値自体は正でも負でもよいの
ですが、その意味は変わらずに方向を変えるだけです。

Emacsがジオメトリを解釈する単位は、`xterm'と同じ単位です。
WIDTHとHEIGHTは文字数で数えますから、
大きなフォントでは小さいフォントよりも大きなフレームになります。
XOFFSETとYOFFSETはピクセル単位で数えます。

モード行とエコー領域はフレームの最後の2行を占めるので、初期のテキストウィ
ンドウの高さはジオメトリで指定した高さより2だけ小さくなります。Xツール
キット版でないEmacsでは、指定した数からさらに1行をメニューバーに利用し
ます。

ジオメトリ指定のすべての部分を指定する必要はありません。

XOFFSETとYOFFSETの両方を省くとウィンドウマネージャがEmacsのフレームの位
置を決めますが、マウスで置き場所を指定できる場合もあります。たとえば、
`164x55'は（普通の幅のウィンドウを横に並べて2つ置けるサイズの）164桁で
55行のウィンドウを指定します。

デフォルトではEmacsの幅は80文字で高さは40行です。
いずれか一方、あるいは、両方を省略できます。
ジオメトリを数で始めると幅であると解釈します。
`x'で始まり数が続けば高さであると解釈します。
したがって、`81'は幅だけを指定し、
`x45'は高さだけを指定します。

`+'か`-'で始まれば位置指定となり、幅と高さの両方を省いたことを意味しま
す。したがって、`-3'はXOFFSETのみを指定します。（位置指定の要素が1つだ
けの場合にはつねにXOFFSETです。）`+3-3'はXOFFSETとYOFFSETを指定し、画面
の左底近くにフレームを置きます。

ファイル`.Xdefaults'ですべての部分か一部分のデフォルトを指定し、オプショ
ン`--geometry'で特定の部分を上書きできます。



File: emacs-ja, Node: Borders X, Next: Title X, Prev: Resume Arguments, Up: Command Arguments

内部境界と外部境界
==================

Emacsのフレームには内部境界と外部境界があります。内部境界はフレームの4
辺の周りに付いた背景色の縁取りです。Emacs自身が内部境界を付加します。外
部境界は、内部境界の外側にウィンドウマネージャが付加します。これには、
ウィンドウを移動したりアイコン化するためにクリックできるさまざまな箱が
付く場合もあります。

`-ib WIDTH'
`--internal-border=WIDTH'
     内部境界の幅としてWIDTHを指定。

`-bw WIDTH'
`--border-width=WIDTH'
     外部境界の幅としてWIDTHを指定。

フレームのサイズ指定には境界は含みません。フレームの位置は外部境界の外
側から測ります。

内部境界の幅をNピクセルにするには、オプション`-ib N'を使います。デフォ
ルトは1です。外部境界の幅を指定するには、（ウィンドウマネージャが指定を
無視するかもしれませんが）`-bw N'を使います。外部境界のデフォルトの幅は
2です。



File: emacs-ja, Node: Title X, Prev: Resume Arguments, Up: Command Arguments

フレームタイトル
================

Emacsのフレームには、指定したタイトルがあるかもしれないし、ないかもしれ
ません。フレームタイトルを指定すると、ウィンドウの装飾部分やアイコンに
フレーム名として表示されます。Emacsのフレームにタイトルが指定されていな
ければ、デフォルトのタイトルは、（フレームが1つしかない場合には）実行プ
ログラムの名前、あるいは、（複数のフレームがあれば）選択したウィンドウ
のバッファの名前になります。

コマンド行オプションでEmacsの初期フレームのタイトルを指定できます。

`-title TITLE'
`--title=TITLE'
`-T TITLE'
     Emacsの初期フレームのタイトルとしてTITLEを指定する。

オプション`--name'（*Note Resources X::）もEmacsの初期フレームのタイト
ルを指定します。



File: emacs-ja, Node: Icons X, Prev: Title X, Up: Command Arguments

アイコン
========

ほとんどのウィンドウマネージャは、フレームを『アイコン化』することを許
しています。つまり、フレームを見えなくしてから、その場所に小さな識別し
やすい『アイコン』を置きます。アイコンウィンドウをクリックするとフレー
ム自体が再度表示されます。一度にたくさんのクライアントを動かしておく場
合、クライアントのほとんどをアイコンにしておけば画面が乱雑にならずにす
みます。

`-i'
`--icon-type'
     Emacsのアイコンとしてヌーの絵を使う。

`-iconic'
`--iconic'
     Emacsをアイコン化した状態で起動する。

オプション`-i'や`--icon-type'は、GNUのヌーの絵を表示したアイコンウィン
ドウを使う指定です。省略すると、Emacsは使用するアイコンの種類をウィンド
ウマネージャに選ばせます。これは、通常、フレームのタイトルを含んだ小さ
な長方形のウィンドウです。 (1) (*Note Icons X-Footnotes::)

オプション`-iconic'は、すぐにはフレームを開かずにアイコンで始めるように
Emacsを起動します。この場合、アイコンウィンドウはEmacsが起動したことだ
けを教えてくれます。アイコンを開くまで通常のテキストフレームは表示され
ません。


File: emacs-ja  Node: Icons X-Footnotes, Up: Icons X

(1) 【訳注】uwm、twmなど古典的なウィンドウマネージャのふるまい。



File: emacs-ja, Node: Resources X, Prev: Title X, Up: Command Arguments

Xリソース
=========

Xウィンドウシステムで動いているプログラムでは、
クラスとリソースの階層によってユーザーのオプションを取りまとめます。
これらのオプションのデフォルト値は、
`~/.Xdefaults'という名前の個人のXリソースファイルで指定できます。

ファイル内の各行は、1つのオプション、関連したオプション群、1つのプログ
ラム、あるいは、複数（または全部）のプログラムの値を指定します。

プログラムは特定の意味を持ったリソース名を定義します。リソースをどのよ
うにクラス名にグループ化するかも定義します。たとえば、Emacsでは、リソー
ス`internalBorder'は内部境界の幅を制御し、リソース`borderWidth'は外部境
界の幅を制御します。どちらのリソースもクラス`BorderWidth'の一部です。こ
れらの名前では大文字小文字を区別します。

`~/.Xdefaults'では、以下のように1行に1つのリソースを指定します。

     emacs.borderWidth: 2

あるいは、クラス内のすべてのリソースに同じ値を指定するにはクラス名を使
います。たとえば、つぎのようにします。

     emacs.BorderWidth: 2

クラスに値を指定すると、それはそのクラス内のすべてのリソースのデフォル
ト値になります。個別にリソースの値を指定することもできます。その場合、
特定のリソースの値はクラスの値に優先します。したがって、つぎの例では、
すべての境界のデフォルトの幅として2を指定しますが、外部境界の値は4にな
ります。

     emacs.Borderwidth: 2
     emacs.borderwidth: 4

ファイル内での行の順番は関係ありません。また、コマンド行オプションはつ
ねにXリソースファイルに優先します。

上の例の文字列`emacs'もリソース名です。
この名前は、Emacsを起動するために指定した実行ファイルの名前を表します。
Emacsを別の名前でインストールしたならば、
`emacs'のかわりにその名前のリソースを探します。

`-name NAME'
`--name=NAME'
     Emacsの初期フレームのリソース名（およびタイトル）としてNAMEを使う。
     このオプションは、初期フレーム以外には影響しないが、Lispプログラム
     からはフレーム作成時にフレーム名を指定できる。

     このオプションを指定しないと、デフォルトではEmacsの実行ファイル名
     をリソース名として使う。

`-xrm RESOURCE-VALUES'
`--xrm=RESOURCE-VALUES'
     EmacsのこのジョブだけのXリソースの値を指定する。（以下を参照）。

整合性のために、`-name'は、どの特定のフレームにも属さないリソースの値を
探すときの名前も指定します。

Emacsを起動するコマンド名と同じ名前のリソースはクラスにも属します。その
名前は`Emacs'です。`emacs'のかわりに`Emacs'と書けば、実行ファイルの名前
やフレームタイトルに関わらず、すべてのEmacsジョブのすべてのフレームにリ
ソースが適用されます。たとえば、つぎのようにします。

     Emacs.BorderWidth: 2
     Emacs.borderWidth: 4

コマンド行オプション`-xrm RESOURCES'を使えば、
追加のリソースの値をEmacsに指定できます。
テキストRESOURCESは、Xリソースファイルの中で使うものと同じ書式です。
DATAで複数のリソースを指定するには、
ファイルの場合と同様に、そのあいだに改行を置きます。
また、`#include "FILENAME"'を使えば、
ファイル内のリソース指定を取り込めます。
`-xrm'で指定したリソースの値は、これ以外のリソース指定に優先します。

以下は、Emacsのオプションを指定するリソース名とそれが属するクラスの一覧
です。

`background'（クラス`Background'）
     背景の表示色名。

`bitmapIcon'（クラス`BitmapIcon'）
     `on'ならば（ヌーの絵の）ビットマップアイコンを使う。
     `off'ならばウィンドウマネージャにアイコンを選ばせる。

`borderColor'（クラス`BorderColor'）
     外部境界の表示色名。

`borderWidth'（クラス`BorderWidth'）
     外部境界の（ピクセル単位の）幅。

`cursorColor'（クラス`Foreground'）
     テキストカーソル（ポイント）の表示色名。

`font'（クラス`Font'）
     テキストのフォント名（あるいはフォントセット名 *Note Fontsets::）。

`foreground'（クラス`Foreground'）
     テキストの表示色名。

`geometry'（クラス`Geometry'）
     ウィンドウのサイズと位置。Emacsフレームだけでなく個々のメニューに
     も影響するので、このリソースを`emacs*geometry'とは指定しないように
     注意すること。

     このリソースで指定した位置は、Emacsの初期フレーム（あるいは、特定
     のフレーム名を指定したリソースはそのフレーム）だけに適用される。し
     かし、サイズはすべてのフレームに適用される。

`iconName'（クラス`Title'）
     アイコンに表示する名前。

`internalBorder'（クラス`BorderWidth'）
     内部境界の（ピクセル単位の）幅。

`menuBar'（クラス`MenuBar'）
     `on'ならばフレームにメニューバーを付ける。
     `off'ならばメニューバーを付けない。

`minibuffer'（クラス`Minibuffer'）
     `none'ならばこのフレームにミニバッファを付けない。かわりに、独立し
     たミニバッファフレームを使う。

`paneFont'（クラス`Font'）
     ツールキット版でないEmacsのメニューのタイトルに使うフォント名。

`pointerColor'（クラス`Foreground'）
     マウスカーソルの表示色。

`reverseVideo'（クラス`ReverseVideo'）
     `on'ならば前景色と背景色を入れ替え、
     `off'ならば指定された表示色を用いる。

`verticalScrollBars'（クラス`ScrollBars'）
     `on'ならばフレームにスクロールバーを付ける。
     `off'ならばスクロールバーを付けない。

`selectionFont'（クラス`Font'）
     ツールキット版でないEmacsのポップアップメニューの項目に使うフォン
     ト名。（ツールキット版では、*Note Lucid Resources::、あるいは、
     *Note Motif Resources::を参照。）

`title'（クラス`Title'）
     Emacsの初期フレームのタイトルバーに表示する名前。

以下は、特定のフェイス（*Note Faces::）の見え方を制御するリソースです。

`FACE.attributeFont'
     フェイスFACEのフォント。
`FACE.attributeForeground'
     フェイスFACEの前景色。
`FACE.attributeBackground'
     フェイスFACEの背景色。
`FACE.attributeUnderline'
     フェイスFACEの下線フラグ。下線を使うには`on'か`true'を指定する。



File: emacs-ja, Node: Motif Resources, Prev: Title X, Up: Command Arguments

MotifメニューのXリソース
========================

Motifウィジェットを含めたXツールキットを使うEmacsがインストールされてい
る場合には、メニューバーは別のウィジェットであり独自のリソースを持ちま
す。リソース名には（Emacsの起動名かすべてのEmacsの起動を意味する
`Emacs'に続けて）`pane.menubar'が含まれます。これらはつぎのように指定し
ます。

     Emacs.pane.menubar.SUBWIDGET.RESOURCE:  VALUE

メニューバーの個々の文字列はサブウィジェットです。サブウィジェットの名
前はメニュー項目の文字列と同じです。たとえば、メニューバーの中の単語
`Files'は`emacs.pane.menubar.Files'という名前のサブウィジェットの一部で
す。ほとんどの場合、メニューバー全体に同じリソースを指定するでしょう。
それには、特定のサブウィジェット名のかわりに`*'を使います。たとえば、
`8x16'フォントをメニューバーの項目に使うには、つぎのようにします。

     Emacs.pane.menubar.*.fontList:  8x16

これは、サブメニューのリソース値も指定します。

メニューバー内のサブメニューの各項目には、それぞれ独自のXリソース名があ
ります。たとえば、`Files'サブメニューには項目`Save Buffer'があります。
サブメニューの項目のリソース指定はつぎのようになります。

     Emacs.pane.menubar.popup_*.MENU.ITEM.RESOURCE: VALUE

たとえば、`Save Buffer'のフォントを指定するには、つぎのようにします。

     Emacs.pane.menubar.popup_*.Files.Save Buffer.fontList: 8x16

`Edit'の下の`Spell'の下にある`Check Message'のような2段下のサブメニュー
の項目では、リソースの雛型はつぎのようになります。

     Emacs.pane.menubar.popup_*.popup_*.MENU.RESOURCE: VALUE

たとえば、つぎのようになります。

     Emacs.pane.menubar.popup_*.popup_*.Spell.Check Message: VALUE

サブメニューのリソースを指定せずに、すべてのメニューバーの項目のリソー
スを指定することは不可能です。サブメニューの項目をメニューバー自体とは
異なる見え方にするには、2段階の指定が必要です。まずメニューバーのリソー
スを指定し、そのあとでサブメニューの値だけを上書きします。たとえば、つ
ぎのようにします。

     Emacs.pane.menubar.*.fontList:  8x16
     Emacs.pane.menubar.popup_*.fontList: 8x16

ツールキットのポップアップメニューでは、`pane.menubar'のかわりに
`menu*'を使います。たとえば、ポップアップメニューの項目に`8x16'フォント
を指定するには、つぎのように書きます。

     Emacs.menu*.fontList:  8x16

以下は、メニューバーとポップアップメニューのリソース指定の一覧です。

`armColor'
     押せるボタンの表示色。
`fontList'
     使用するフォント。
`marginBottom'
`marginHeight'
`marginLeft'
`marginRight'
`marginTop'
`marginWidth'
     境界内で項目の周りに置く空白の量。
`borderWidth'
     メニュー項目を縁取る境界の幅。
`shadowThickness'
     境界の影付けの幅。
`bottomShadowColor'
     境界の下端と右端の影付けの表示色。
`topShadowColor'
     境界の上端と左端の影付けの表示色。


File: emacs-ja, Node: X Resources, Next: Antinews, Prev: Emacs Invocation, Up: Top

X Options and Resources
***********************

  You can customize some X-related aspects of Emacs behavior using X
resources, as is usual for programs that use X.  On MS-Windows, you
can customize some of the same aspects using the system registry.
*Note MS-Windows Registry::.  X resources are the only way to
customize tooltip windows and LessTif menus, since the libraries that
implement them don't provide for customization through Emacs.  This
appendix describes the X resources that Emacs recognizes and how to
use them.

* Menu:

* Resources::           Using X resources with Emacs (in general).
* Table of Resources::  Table of specific X resources that affect Emacs.
* Face Resources::      X resources for customizing faces.
* Lucid Resources::     X resources for Lucid menus.
* LessTif Resources::   X resources for LessTif and Motif menus.
* GTK resources::       Resources for GTK widgets.



File: emacs-ja, Node: Resources, Next: Table of Resources, Prev: X Resources, Up: X Resources

X Resources
===========

  Programs running under the X Window System organize their user
options under a hierarchy of classes and resources.  You can specify
default values for these options in your X resources file, usually
named `~/.Xdefaults' or `~/.Xresources'.  If changes in `~/.Xdefaults'
do not take effect, it is because your X server stores its own list of
resources; to update them, use the shell command `xrdb'---for
instance, `xrdb ~/.Xdefaults'.

  Each line in the file specifies a value for one option or for a
collection of related options, for one program or for several programs
(optionally even for all programs).

  MS-Windows systems don't support `~/.Xdefaults' files, but Emacs
compiled for Windows looks for X resources in the Windows Registry,
under the key `HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs' and then under
the key `HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs'.  The menu and
scrollbars are native widgets on MS-Windows, so they are only
customizable via the system-wide settings in the Display Control
Panel.

  Programs define named resources with particular meanings.  They also
define how to group resources into named classes.  For instance, in
Emacs, the `internalBorder' resource controls the width of the
internal border, and the `borderWidth' resource controls the width of
the external border.  Both of these resources are part of the
`BorderWidth' class.  Case distinctions are significant in these
names.

  In `~/.Xdefaults', you can specify a value for a single resource on
one line, like this:

     emacs.borderWidth: 2

Or you can use a class name to specify the same value for all
resources in that class.  Here's an example:

     emacs.BorderWidth: 2

  If you specify a value for a class, it becomes the default for all
resources in that class.  You can specify values for individual
resources as well; these override the class value, for those
particular resources.  Thus, this example specifies 2 as the default
width for all borders, but overrides this value with 4 for the
external border:

     emacs.BorderWidth: 2
     emacs.borderWidth: 4

  The order in which the lines appear in the file does not matter.
Also, command-line options always override the X resources file.

  The string `emacs' in the examples above is also a resource name.
It actually represents the name of the executable file that you invoke
to run Emacs.  If Emacs is installed under a different name, it looks
for resources under that name instead of `emacs'.

`-name NAME'
`--name=NAME'
     Use NAME as the resource name (and the title) for the initial
     Emacs frame.  This option does not affect subsequent frames, but
     Lisp programs can specify frame names when they create frames.

     If you don't specify this option, the default is to use the Emacs
     executable's name as the resource name.

`-xrm RESOURCE-VALUES'
`--xrm=RESOURCE-VALUES'
     Specify X resource values for this Emacs job (see below).

  For consistency, `-name' also specifies the name to use for other
resource values that do not belong to any particular frame.

  The resources that name Emacs invocations also belong to a class;
its name is `Emacs'.  If you write `Emacs' instead of `emacs', the
resource applies to all frames in all Emacs jobs, regardless of frame
titles and regardless of the name of the executable file.  Here is an
example:

     Emacs.BorderWidth: 2
     Emacs.borderWidth: 4

  You can specify a string of additional resource values for Emacs to
use with the command line option `-xrm RESOURCES'.  The text RESOURCES
should have the same format that you would use inside a file of X
resources.  To include multiple resource specifications in RESOURCES,
put a newline between them, just as you would in a file.  You can also
use `#include "FILENAME"' to include a file full of resource
specifications.  Resource values specified with `-xrm' take precedence
over all other resource specifications.

  One way to experiment with the effect of different resource settings
is to use the `editres' program.  Select `Get Tree' from the
`Commands' menu, then click on an Emacs frame.  This will display a
tree showing the structure of X toolkit widgets used in an Emacs
frame.  Select one of them, such as `menubar', then select `Show
Resource Box' from the `Commands' menu.  This displays a list of all
the meaningful X resources and allows you to edit them.  Changes take
effect immediately if you click on the `Apply' button.  (See the
`editres' man page for more details.)



File: emacs-ja, Node: Table of Resources, Next: Face Resources, Prev: Resources, Up: X Resources

Table of X Resources for Emacs
==============================

  This table lists the resource names that designate options for
Emacs, not counting those for the appearance of the menu bar, each
with the class that it belongs to:

`background' (class `Background')
     Background color name.

`bitmapIcon' (class `BitmapIcon')
     Use a bitmap icon (a picture of a gnu) if `on', let the window
     manager choose an icon if `off'.

`borderColor' (class `BorderColor')
     Color name for the external border.

`borderWidth' (class `BorderWidth')
     Width in pixels of the external border.

`cursorColor' (class `Foreground')
     Color name for text cursor (point).

`font' (class `Font')
     Font name for text (or fontset name, *Note Fontsets::).

`foreground' (class `Foreground')
     Color name for text.

`geometry' (class `Geometry')
     Window size and position.  Be careful not to specify this
     resource as `emacs*geometry', because that may affect individual
     menus as well as the Emacs frame itself.

     If this resource specifies a position, that position applies only
     to the initial Emacs frame (or, in the case of a resource for a
     specific frame name, only that frame).  However, the size, if
     specified here, applies to all frames.

`fullscreen' (class `Fullscreen')
     The desired fullscreen size.  The value can be one of `fullboth',
     `fullwidth' or `fullheight', which correspond to the command-line
     options `-fs', `-fw', and `-fh' (*Note Window Size X::).

     Note that this applies to all frames created, not just the
     initial one.

`iconName' (class `Title')
     Name to display in the icon.

`internalBorder' (class `BorderWidth')
     Width in pixels of the internal border.

`lineSpacing' (class `LineSpacing')
     Additional space ("leading") between lines, in pixels.

`menuBar' (class `MenuBar')
     Give frames menu bars if `on'; don't have menu bars if `off'.
     *Note Lucid Resources::, and *Note LessTif Resources::, for how
     to control the appearance of the menu bar if you have one.

`minibuffer' (class `Minibuffer')
     If `none', don't make a minibuffer in this frame.  It will use a
     separate minibuffer frame instead.

`paneFont' (class `Font')
     Font name for menu pane titles, in non-toolkit versions of Emacs.

`pointerColor' (class `Foreground')
     Color of the mouse cursor.

`privateColormap' (class `PrivateColormap')
     If `on', use a private color map, in the case where the "default
     visual" of class PseudoColor and Emacs is using it.

`reverseVideo' (class `ReverseVideo')
     Switch foreground and background default colors if `on', use
     colors as specified if `off'.

`screenGamma' (class `ScreenGamma')
     Gamma correction for colors, equivalent to the frame parameter
     `screen-gamma'.

`selectionFont' (class `SelectionFont')
     Font name for pop-up menu items, in non-toolkit versions of
     Emacs.  (For toolkit versions, see *Note Lucid Resources::, also
     see *Note LessTif Resources::.)

`selectionTimeout' (class `SelectionTimeout')
     Number of milliseconds to wait for a selection reply.  If the
     selection owner doesn't reply in this time, we give up.  A value
     of 0 means wait as long as necessary.

`synchronous' (class `Synchronous')
     Run Emacs in synchronous mode if `on'.  Synchronous mode is
     useful for debugging X problems.

`title' (class `Title')
     Name to display in the title bar of the initial Emacs frame.

`toolBar' (class `ToolBar')
     Number of lines to reserve for the tool bar.  A zero value
     suppresses the tool bar.  If the value is non-zero and
     `auto-resize-tool-bars' is non-`nil', the tool bar's size will be
     changed automatically so that all tool bar items are visible.

`useXIM' (class `UseXIM')
     Turn off use of X input methods (XIM) if `false' or `off'.  This
     is only relevant if your Emacs is actually built with XIM
     support.  It is potentially useful to turn off XIM for
     efficiency, especially slow X client/server links.

`verticalScrollBars' (class `ScrollBars')
     Give frames scroll bars if `on'; don't have scroll bars if
     `off'.



File: emacs-ja, Node: Face Resources, Next: LessTif Resources, Prev: Table of Resources, Up: X Resources

X Resources for Faces
=====================

  You can also use resources to customize the appearance of particular
faces (*Note Faces::):

`FACE.attributeFont'
     Font for face FACE.
`FACE.attributeForeground'
     Foreground color for face FACE.
`FACE.attributeBackground'
     Background color for face FACE.
`FACE.attributeUnderline'
     Underline flag for face FACE.  Use `on' or `true' for yes.
`FACE.attributeFamily'
     Font family for face FACE.
`FACE.attributeWidth'
     Relative proportional width of the font to use for face FACE.
     It should be one of `ultra-condensed', `extra-condensed',
     `condensed', `semi-condensed', `normal',
     `semi-expanded', `expanded', `extra-expanded', or
     `ultra-expanded'.
`FACE.attributeHeight'
     Height of the font to use for face FACE: either an integer
     specifying the height in units of 1/10pt, or a floating point
     number that specifies a scale factor to scale the underlying
     face's default font, or a function to be called with the default
     height which will return a new height.
`FACE.attributeWeight'
     A weight to use for the face FACE.  It must be one of
     `ultra-bold', `extra-bold', `bold',
     `semi-bold', `normal', `semi-light', `light',
     `extra-light', `ultra-light'.
`FACE.attributeSlant'
     The slant to use for the font of face FACE.  It must be one of
     `italic', `oblique', `normal',
     `reverse-italic', or `reverse-oblique'.
`FACE.attributeStrikeThrough'
     Whether the face FACE should be drawn with a line striking
     through the characters.
`FACE.attributeOverline'
     Whether the characters in the face FACE should be overlined.
`FACE.attributeBox'
     Whether to draw a box around the characters in face FACE.
`FACE.attributeInverse'
     Whether to display the characters in face FACE in inverse video.
`FACE.attributeStipple'
     The name of a pixmap data file to use for the stipple pattern, or
     `false' to not use stipple for the face FACE.
`FACE.attributeBackgroundPixmap'
     The background pixmap for the face FACE.  Should be a name of a
     pixmap file or `false'.
`FACE.attributeBold'
     Whether to draw the characters in the face FACE as bold.
`FACE.attributeItalic'
     Whether to draw the characters in the face FACE as italic.



File: emacs-ja, Node: Lucid Resources, Next: LessTif Resources, Prev: Face Resources, Up: X Resources

LucidメニューのXリソース
========================

Lucidメニューウィジェットを含めたXツールキットを使うEmacsがインストール
されている場合には、メニューバーは別のウィジェットであり独自のリソース
を持ちます。リソース名には（Emacsの起動名かすべてのEmacsの起動を意味す
る`Emacs'に続けて）`pane.menubar'が含まれます。これらはつぎのように指定
します。

     Emacs.pane.menubar.RESOURCE:  VALUE

たとえば、メニューバーの項目に`8x16'フォントを指定するには、つぎのよう
に書きます。

     Emacs.pane.menubar.font:  8x16

*メニューバーを使わない*ツールキットのポップアップメニューの項目のリソー
スには、同様に、`menu*'があります。たとえば、ポップアップメニューに
`8x16'のフォントを指定するには、つぎのように書きます。

     Emacs.menu*.font:	8x16

対話ボックスのフォントを指定するには、
`menu'のかわりに`dialog'を使ってつぎのように書きます。

     Emacs.dialog*.font:	8x16

経験によれば、`pane.menubar'や`menu*'のまえに`shell.'を付ける必要がある
システムもあります。他のシステムでは`shell.'を付加してはいけません。

以下は、メニューバーとポップアップメニューのリソースの一覧です。

`font'
     メニュー項目のテキストのフォント。
`foreground'
     前景色。
`background'
     背景色。
`buttonForeground'
     メニューバーにおいて、選択した項目の前景色。
`horizontalSpacing'
     項目間の横方向のピクセル単位の間隔。デフォルトは3。
`verticalSpacing'
     項目間の縦方向のピクセル単位の間隔。デフォルトは1。
`arrowSpacing'
     （サブメニューを表す）矢印とそれに関連したテキストとの横方向のピク
     セル単位の間隔。デフォルトは10。
`shadowThickness'
     ウィジェットの周りの影付けの厚み。



File: emacs-ja, Node: LessTif Resources, Next: GTK resources, Prev: Face Resources, Up: X Resources

LessTif Menu X Resources
========================

  If the Emacs installed at your site was built to use the X toolkit
with the LessTif or Motif widgets, then the menu bar, the dialog
boxes, the pop-up menus, and the file-selection box are separate
widgets and have their own resources.

  The resource names for the menu bar contain `pane.menubar'
(following, as always, the name of the Emacs invocation, or `Emacs',
which stands for all Emacs invocations).  Specify them like this:

     Emacs.pane.menubar.SUBWIDGET.RESOURCE:  VALUE

  Each individual string in the menu bar is a subwidget; the subwidget's
name is the same as the menu item string.  For example, the word
`File' in the menu bar is part of a subwidget named
`emacs.pane.menubar.File'.  Most likely, you want to specify the
same resources for the whole menu bar.  To do this, use `*' instead
of a specific subwidget name.  For example, to specify the font
`8x16' for the menu-bar items, write this:

     Emacs.pane.menubar.*.fontList:  8x16

This also specifies the resource value for submenus.

  Each item in a submenu in the menu bar also has its own name for X
resources; for example, the `File' submenu has an item named `Save
(current buffer)'.  A resource specification for a submenu item looks
like this:

     Emacs.pane.menubar.popup_*.MENU.ITEM.RESOURCE: VALUE

For example, here's how to specify the font for the `Save (current
buffer)' item:

     Emacs.pane.menubar.popup_*.File.Save (current buffer).fontList: 8x16

For an item in a second-level submenu, such as `Complete Word' under
`Spell Checking' under `Tools', the resource fits this template:

     Emacs.pane.menubar.popup_*.popup_*.MENU.RESOURCE: VALUE

For example,

     Emacs.pane.menubar.popup_*.popup_*.Spell Checking.Complete Word: VALUE

(This should be one long line.)

  It's impossible to specify a resource for all the menu-bar items
without also specifying it for the submenus as well.  So if you want
the submenu items to look different from the menu bar itself, you must
ask for that in two steps.  First, specify the resource for all of
them; then, override the value for submenus alone.  Here is an
example:

     Emacs.pane.menubar.*.fontList:  8x16
     Emacs.pane.menubar.popup_*.fontList: 8x16

For LessTif pop-up menus, use `menu*' instead of `pane.menubar'.  For
example, to specify the font `8x16' for the pop-up menu items, write
this:

     Emacs.menu*.fontList:  8x16

For LessTif dialog boxes, use `dialog' instead of `menu':

     Emacs.dialog*.fontList: 8x16
     Emacs.dialog*.foreground: hotpink

To specify resources for the LessTif file-selection box, use
`fsb*', like this:

     Emacs.fsb*.fontList: 8x16

  Here is a list of the specific resources for LessTif menu bars and
pop-up menus:

`armColor'
     The color to show in an armed button.
`fontList'
     The font to use.
`marginBottom'
`marginHeight'
`marginLeft'
`marginRight'
`marginTop'
`marginWidth'
     Amount of space to leave around the item, within the border.
`borderWidth'
     The width of the border around the menu item, on all sides.
`shadowThickness'
     The width of the border shadow.
`bottomShadowColor'
     The color for the border shadow, on the bottom and the right.
`topShadowColor'
     The color for the border shadow, on the top and the left.




