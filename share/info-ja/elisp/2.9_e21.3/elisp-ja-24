Info file: elisp-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `elisp-ja.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Elisp-ja: (elisp-ja).	　　　　　　Emacs-Lisp 2.9日本語マニュアル.
END-INFO-DIR-ENTRY




Emacs Lispリファレンスマニュアル2.9版であり、Emacs 21.3版に対応します。

Published by the Free Software Foundation 59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999,
              2000, 2002 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License", with the
Front-Cover texts being "A GNU Manual", and with the Back-Cover Texts
as in (a) below.  A copy of the license is included in the section
entitled "GNU Free Documentation License".

(a) The FSF's Back-Cover Text is: "You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development."




File: elisp-ja, Node: Compilation Tips, Next: Documentation Tips, Prev: Coding Conventions, Up: Tips

コンパイル済みコードを速くするヒント
====================================

バイトコンパイルしたLispプログラムの実行速度を改良する方法を示します。

   * ライブラリ`profile'やライブラリ`elp'で、読者のプログラムを計測する。
     操作方法についてはファイル`profile.el'と`elp.el'を参照。

   * 可能な場合には再帰ではなく繰り返しを使う。コンパイル済みの関数が別
     のコンパイル済み関数を呼び出す場合であってもEmacs Lispでは関数呼び
     出しは遅い。

   * `memq'、`member'、`assq'、`assoc'のリスト探索基本関数を使うほうが
     明示的な繰り返しよりも速い。これらの探索基本関数の1つを使えるよう
     にデータ構造を変更する価値はある。

   * ある種の組み込み関数は、バイトコンパイル済みのコードでは普通の関数
     呼び出しを避けるように特別に扱われる。これらの関数を使うのはよいこ
     とである。コンパイラが関数を特別に扱うかどうかを調べるには、その属
     性`byte-compile'を調べる。属性が`nil'以外であれば、その関数は特別
     に扱われる。

     たとえば、つぎの入力は、`aref'が特別にコンパイルされることを示す
     （*Note Array Functions::）。

          (get 'aref 'byte-compile)
               => byte-compile-two-args

   * 読者のプログラムの実行時間のかなりの部分を小さな関数の呼び出しが
     占めるときには、その関数をインラインにする。
     これにより関数呼び出しのオーバヘッドを削除できる。
     関数をインラインにするとプログラム変更の柔軟性を減じるので、
     ユーザーが速度を気にするほど遅い部分の十分な速度向上が得られない限り、
     このようにしないこと。
     *Note Inline Functions::。



File: elisp-ja, Node: Documentation Tips, Next: Comment Tips, Prev: Compilation Tips, Up: Tips

説明文字列に関するヒント
========================

説明文字列を書くうえでのヒントや慣習を述べます。コマンド`M-x
checkdoc-minor-mode'を実行して、これらの慣習の多くを確認できます。

   * ユーザーが知っておくことを意図した各コマンド、関数、変数には、説明
     文字列を付けること。

   * Lispプログラムの内部変数やサブルーティンにも説明文字列を付ける。
     Emacsの初期の版では、説明文字列のかわりにコメントを使うと容量を節
     約できたが、今はこれはあてはまらない。

   * 説明文字列の最初の行は、1つか2つの完全な文であり、それだけで概要を
     表していること。`M-x apropos'は説明文字列の最初の行だけを表示する
     ため、それだけで十分に表せないと表示結果が悪くなる。特に、最初の行
     は大文字で始め、ピリオドで終えること。

     説明文字列には、関数や変数の使い方の詳細を述べる追加の行があってよ
     い。それらの行も完全な文から成るべきであるが、見ためをよくするため
     に適当に詰めてよい。

   * 一貫性があるように、関数の説明文字列の最初の文の動詞は『to』を省い
     た不定詞にする。たとえば、『Returns the cons of A and B.』ではなく
     『Return the cons of A and B.』とする。最初の行の残りの文について
     も同様にするとよい。以降の文節では適切な主語があるほうが一般にはよ
     い。

   * 説明文字列は受動態ではなく能動態で書き、未来形ではなく現在形で書く。
     たとえば、『A list containing A and B will be returned.』ではなく
     『Return a list containing A and B.』と書く。

   * 不必要に単語『cause』（および同義語）を使わないこと。『Cause
     Emacs to display text in boldface,』ではなく単に『Display text in
     boldface.』と書く。

   * 説明文字列は、白文字で始めたり終えないこと。

   * 80コラムのスクリーン上のEmacsのウィンドウに収まるように説明文字列
     を整形する。ほとんどの行を60文字を越えないようにするとよい。必要な
     情報を入れるためならば最初の行が長くなってもよい。

     しかし、説明文字列全体を単純に整形するよりは、注意深く行分けすると
     読みやすくなる。説明文字列が長い場合には、話題ごとに空行で区切る。

   * ソースコード上で説明文字列の最初の行に揃えるために説明文字列の残り
     の行を字下げ*しないこと*。ソースコード上では見ためがよくても、ユー
     ザーが説明文字を見るときには奇妙に見える。文字列を始めるダブルクォー
     トのまえにある字下げは文字列の一部ではないことに注意！

   * ユーザーが禁止コマンドを実行しようとすると、Emacsは当該コマンドの
     説明文字列の最初の文節、つまり、最初の空行までを表示する。必要なら
     ば、最初の空行のまえに入れるべき情報を選んで、このような表示が有用
     であるようにする。

   * ユーザーが対話的に設定したがるような変数では、
     その変数の説明文字列は`*'で始める。
     変数の値が、長いリストや関数であるとき、あるいは、
     初期化ファイルでのみ設定するような変数であるときには、
     その説明文字列を`*'で始めないこと。
     *Note Defining Variables::。

   * yes/noのフラグを表す変数の説明文字列は『Non-nil means...』のような
     単語で始めて、`nil'以外の値はすべて同値であることを明らかにし、
     `nil'と`nil'以外の意味を明確に示すこと。

   * 関数の説明文字列でその引数について述べるときには、その引数の値を表
     す名前には大文字で書いた引数名を使う。したがって、関数`/'の説明文
     字列では、その第2引数の名前は`divisor'なので、`DIVISOR'と表す。

     また、リストやベクトルを（その一部が変化するかもしれない）構成部分
     に分解したものを示すときなどのメタ変数には、すべて大文字を使う。

   * 説明文字列でLispシンボルを参照するときには、それが表示されるとき
     （つまり普通はすべて小文字）のようにシングルクォートで囲って書く。
     たとえば、`lambda'である。これには2つ例外があり、tとnilはシングル
     クォートで囲まずに書く。（本書では、すべてのシンボルをシングルクォー
     トで囲む別の慣習を用いている。）

     ヘルプモードでは、説明文字列でシングルクォートで囲ったシンボルを使
     うと、そのシンボルに関数定義や変数定義があるときには自動的にハイパー
     リンクを作成する。この機能を利用するために特別なことをする必要はな
     い。しかし、シンボルに関数定義と変数定義の両方があり、どちらか一方
     のみを参照したい場合には、シンボルの名前のまえに`variable'、
     `option'、`function'、`command'のいずれかの単語を書くだけでどちら
     であるかを指定できる。（これらの単語を認識するときには大文字小文字
     は区別しない。）たとえばつぎのように書くと、

          This function sets the variable `buffer-file-name'.

     ハイパーリンクは、変数`buffer-file-name'の説明文字列を指し、その関
     数の説明文字列は指さない。

     シンボルに関数定義や変数定義があっても、説明文字列でのシンボルの使
     い方には無関係な場合には、シンボルの名前のまえに単語`symbol'を書け
     ば、ハイパーリンクを作らないようにできる。たとえば、つぎのようにす
     ると、

          If the argument KIND-OF-RESULT is the symbol `list',
          this function returns a list of all the objects
          that satisfy the criterion.

     ここでは`list'の関数／変数定義は無関係なので、関数`list'の説明文字
     列を指すハイパーリンクは作られない。

   * 説明文字列に直接キー列を書き込まないこと。
     そのかわりに、それの標準的なキー列を作成する
     `\\[...]'の書き方を使う。
     たとえば、`C-f'と書くかわりに、`\\[forward-char]'と書く。
     Emacsが説明文字列を表示するときに、
     `forward-char'に現在バインドされているキーにEmacsが置き換える。
     （普通は`C-f'であるが、ユーザーがキーバインディングを変更していれば、
     別の文字になる。）
     *Note Keys in Documentation::。

   * メジャーモードの説明文字列では、グローバルなキーマップではなくその
     モードのローカルなキーマップでのキーバインディングを参照したいだろ
     う。それには、使用するキーマップを指定する構文`\\<...>'を説明文字
     列の中に書く。最初に`\\[...]'を使うまえにこうしておくこと。
     `\\<...>'の内側のテキストは、メジャーモード向けのローカルキーマッ
     プを保持する変数の名前であること。

     説明文字列の表示を遅くしてしまうので、`\\[...]'を何回も使うのは実
     用的ではない。したがって、読者のメジャーモードのもっとも重要なコマ
     ンドの記述にこれを使い、モードのキーマップの残りを表示するには
     `\\{...}'を使う。



File: elisp-ja, Node: Comment Tips, Next: Library Headers, Prev: Documentation Tips, Up: Tips

コメントの書き方のヒント
========================

コメントを置く場所とそれらの字下げ方法については以下のような慣習を推奨
します。

`;'
     1つのセミコロン`;'で始まるコメントは、ソースコードの右側で同じコラ
     ム位置に揃えること。そのようなコメントは、その行のコードの動作を説
     明する。lispモードやその関連するモードでは、コマンド
     `M-;'（`indent-for-comment'）で自動的に右側の正しい位置に`;'を挿入
     したり、そのようなコメントが既存ならば整列できる。

     つぎとその下の例は、Emacsのソースから持ってきたものである。

          (setq base-version-list                 ; there was a base
                (assoc (substring fn 0 start-vn)  ; version to which
                       file-version-assoc-list))  ; this looks like
                                                  ; a subversion

`;;'
     2つのセミコロン`;;'で始まるコメントは、その部分のコードの字下げに
     揃えること。そのようなコメントは、その後続の行の目的やその箇所での
     プログラムの状態を記述する。

          (prog1 (setq auto-fill-function
                       ...
                       ...
            ;; update mode line
            (force-mode-line-update)))

     説明文字列を持たない各関数（所属するパッケージで内部向けにのみ使用
     される関数）では、関数が行うことと正しい呼び出し方を記述した2つの
     セミコロンで始まるコメントを関数のまえに書くこと。各引数の意味とそ
     の可能な値を関数がどのように解釈するかを正確に説明すること。

`;;;'
     3つのセミコロン`;;;'で始まるコメントは、左端に揃えること。そのよう
     なコメントは、関数定義の外側で使い、プログラムの設計原理を説明する
     一般的な表明である。たとえばつぎのとおり。

          ;;; This Lisp code is run in Emacs
          ;;; when it is to operate as a server
          ;;; for other processes.

     3つのセミコロンで始まるコメントの別の使い方は、関数内の行をコメン
     トにする場合である。そのような行が左端に留まるように3つのセミコロ
     ンを使うのである。

          (defun foo (a)
          ;;; This is no longer necessary.
          ;;;  (force-mode-line-update)
            (message "Finished with %s" a))

`;;;;'
     4つのセミコロン`;;;;'で始まるコメントは、左端に揃えて、プログラム
     の主要な部分のヘッダに使う。たとえばつぎのとおり。

          ;;;; The kill ring

`M-;'（`indent-for-comment'）や
TAB（`lisp-indent-line'）などの
Emacsのlispモードの字下げコマンドは、
これらの慣習にしたがって自動的にコメントを字下げします。
*Note コメントの操作: (emacs)Comments。



File: elisp-ja, Node: Library Headers, Prev: Comment Tips, Up: Tips

Emacsライブラリのヘッダの慣習
=============================

Emacsには、コメントをいくつかの部分に分けて作者などの情報を与えるために、
Lispライブラリの特別なコメントに対する慣習があります。本節ではそれらの
慣習について述べます。まず、例を示します。

     ;;; lisp-mnt.el -- minor mode for Emacs Lisp maintainers

     ;; Copyright (C) 1992 Free Software Foundation, Inc.

     ;; Author: Eric S. Raymond <esr@snark.thyrsus.com>
     ;; Maintainer: Eric S. Raymond <esr@snark.thyrsus.com>
     ;; Created: 14 Jul 1992
     ;; Version: 1.2
     ;; Keywords: docs

     ;; This file is part of GNU Emacs.
     ...
     ;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     ;; Boston, MA 02111-1307, USA.

最初の行はつぎの形式であるべきです。

     ;;; FILENAME -- DESCRIPTION

この記述は1行で完全になるようにします。

著作権表示のあとには、`;; HEADER-NAME:'で始まる
いくつかの"ヘッダコメント"（header comment）行が続きます。
HEADER-NAMEに使う可能性のある慣習の一覧を以下に示します。

`Author'
     この行では、少なくともライブラリの主作者の氏名とネットワークアドレ
     スを明記する。

     複数の作者がいる場合には、以下のように、`;;'とタブ文字で始めた継続
     行にその人達を列挙する。

          ;; Author: Ashwin Ram <Ram-Ashwin@cs.yale.edu>
          ;;      Dave Sill <de5@ornl.gov>
          ;;      Dave Brennan <brennan@hal.com>
          ;;      Eric Raymond <esr@snark.thyrsus.com>

`Maintainer'
     この行には、作者行（`Author'）のように1人の氏名とアドレス、アドレ
     スのみ、文字列`FSF'のいずれかを書く。保守者行（`Maintainer'）がな
     い場合には、作者行の人達が保守していると仮定する。上の例は、保守者
     行が冗長であり、少々いんちきである。

     作者行（`Author'）と保守者行（`Maintainer'）の考えは、手作業で名前
     を探さずに『保守者にメイルを送る』ようなLisp関数を作れるようにする
     ためである。

     ネットワークアドレスに加えて人の氏名も書く場合には、ネットワークア
     ドレスを`<...>'で必ず囲むこと。

`Created'
     この行は省略できるが、ファイルの作成日時を書く。歴史的な意味だけで
     ある。

`Version'
     各Lispプログラムの版番号を記録しておきたい場合に、この行に版番号を
     書く。

`Adapted-By'
     このヘッダ行では、（たとえば、スタイルの慣習に適合するように変更し
     たなどの）インストールのためにライブラリを受理した人の名前を書く。

`Keywords'
     この行には、ヘルプコマンド`finder-by-keyword'向けのキーワードを書
     く。意味のあるキーワードを理解するためにこのコマンドを試してほしい。

     この部分は重要である。人々が特定の話題で探して読者のパッケージをみ
     つけるであろう。キーワードは空白やカンマで区切る。

ほとんどのLispライブラリには、`Author'と`Keywords'のヘッダコメント行が
必要です。残りのものは必要に応じて使います。別の名前のヘッダ行があって
もかまいません。それらには標準的な意味はありませんが、害になることもあ
りません。

ライブラリファイルの内容を分割するために形式を定めたコメントも使います。
それらを以下に示します。

`;;; Commentary:'
     ライブラリの動作を説明する入門的なコメントを始める。著作権表示の直
     後にきて、`Change Log'、`History'、`Code'のいずれかのコメント行で
     終る。このテキストはパッケージfinderが使うので、その文脈で意味があ
     るようにすること。

`;;; Documentation'
     `;;; Commentary:'のかわりに使っているファイルもあるが、
     `;;; Commentary:'のほうが好ましい。

`;;; Change Log:'
     （変更履歴をライブラリに収める場合の）ライブラリファイルに収めた変
     更記録情報を始める。Emacsで配布されるほとんどのLispファイルでは、
     変更履歴はファイル`ChangeLog'に収めてあり、ソースファイルには収め
     ない。それらのファイルには`;;; Change Log:'行はない。

`;;; Code:'
     プログラムの実際のコードを始める。

`;;; FILENAME ends here'
     これは"最終行"（footer line）であり、ファイルの末尾に現れる。その
     目的は、最終行が欠如していることでファイルが切り詰められていること
     がわかるようにするのである。


File: elisp-ja, Node: GNU Emacs Internals, Next: Standard Errors, Prev: Tips, Up: Top

GNU Emacsの内部
***************

本章では、Lispライブラリをあらかじめロードした実用的なEmacsの実行形式の
ダンプ方法、メモリ領域の割り当て方、Cプログラマに興味があるようなGNU
Emacsの内部について述べます。

* Menu:

* Building Emacs::      How to the dumped Emacs is made.
* Pure Storage::        A kludge to make preloaded Lisp functions sharable.
* Garbage Collection::  Reclaiming space for Lisp objects no longer used.
* Memory Usage::        Info about total size of Lisp objects made so far.
* Writing Emacs Primitives::   Writing C code for Emacs.
* Object Internals::    Data formats of buffers, windows, processes.



File: elisp-ja, Node: Building Emacs, Next: Pure Storage

Emacsの構築方法
===============

本節では、Emacsの実行形式を構築する手順を説明します。メイクファイルが自
動的にこれらすべてを行うので、Emacsを構築してインストールするために本節
のことがらを読者が知っている必要はありません。本節の内容は、Emacsの保守
者向けです。

ディレクトリ`src'のCソースファイル群をコンパイルすると、`temacs'と呼ば
れる実行形式ファイルが作られます。これは"裸のインピュアEmacs"（bare
impure Emacs）とも呼びます。これには、Emacs Lispインタープリタと入出力
ルーティンが含まれますが、編集コマンドは入っていません。

コマンド`temacs -l loadup'で、
実用的なEmacsの実行形式を作るために`temacs'を使います。
これらの引数は、`temacs'に対して
ファイル`loadup.el'で指定したLispファイル群を評価するように指示します。
これらのファイルはEmacsの通常の編集環境を作り上げ、
その結果、Emacsは裸ではありませんがまだインピュアです。

標準のLispファイル群をロードするにはかなり時間が必要です。しかし、読者
がEmacsを実行するたびにこれを行う必要はありません。`temacs'は、必要なファ
イルをあらかじめロードした`emacs'という実行形式プログラムとしてダンプで
きます。`emacs'はファイル群をロードする必要がないので素早く起動します。
これが通常インストールされるEmacsの実行形式です。

`emacs'を作るにはコマンド`temacs -batch -l loadup dump'を使います。ここ
での`-batch'の目的は、`temacs'が端末に関するデータを初期化しないように
するためです。これにより、ダンプしたEmacsでは端末情報の表が空であること
を保証できます。引数`dump'は、`emacs'という名前の新たな実行形式をダンプ
するように`loadup.el'に指示します。

ダンプできないオペレーティングシステムもあります。そのようなシステムで
は、Emacsを使うたびにコマンド`temacs -l loadup'でEmacsを起動する必要が
あります。これにはかなり時間がかかりますが、多くても1日に1回、あるいは、
ログアウトしなのであれば週に1回Emacsを起動する必要があるだけでしょうか
ら、余分な時間は重大問題にはならないでしょう。

あらかじめロードしておく追加のファイルは、それらをロードする
`site-load.el'という名前のライブラリを書くことで指定できます。追加デー
タのための領域を確保するために`src/puresize.h'の`PURESIZE'の値を増やす
必要があるかもしれません。（十分な大きさになるまで20000ずつ増やして試す
こと。）しかし、マシンが速くなればなるほど、あらかじめロードしておくファ
イルを追加することの利点は減少します。最近のマシンでは、このようにする
必要はないでしょう。

`loadup.el'が`site-load.el'を読み終えると、
`Snarf-documentation'（*Note Accessing Documentation::）を呼び出して、
基本関数やあらかじめロードした関数（および変数）の説明文字列をそれらの
説明文字列を格納したファイル`etc/DOC'から探します。

ダンプする直前に実行すべきList式を指定するには、`site-init.el'という名
前のライブラリにそれらのLisp式を入れておきます。このファイルは、説明文
字列を探し終えてから実行されます。

関数定義や変数定義をあらかじめロードしたいときには、それを行ってあとで
Emacsを実行したときにそれらの説明文字列を参照できるようにする方法が3つ
あります。

   * ファイル`etc/DOC'を作成するときに
     それらのファイルが走査されるようにしておき、
     `site-load.el'でそれらのファイルをロードする。

   * `site-init.el'でファイルをロードし、Emacsをインストールするときに
     それらのファイルをLispファイル向けのインストールディレクトリへコピー
     する。

   * それらの各ファイルでローカル変数として
     `byte-compile-dynamic-docstrings'の値に`nil'以外を指定し、
     `site-load.el'か`site-init.el'でそれらのファイルをロードする。（こ
     れには、それらの説明文字列がつねにEmacsの領域を占めてしまう欠点が
     ある。）

無変更の普通のEmacsにユーザーが期待する機能を変更するようなものを
`site-load.el'や`site-init.el'に入れることは勧められません。
読者のサイトでは普通の機能に優先させるべきであると思うときには、
`default.el'でそれを行います。
そうすれば、ユーザーは好みに応じて読者が行った変更を無効にできます。
*Note Start-up Summary::。

 -- Function: dump-emacs TO-FILE FROM-FILE
     この関数は、Emacsの現在の状態を実行形式ファイルTO-FILEへダンプする。
     FROM-FILE（これは普通は実行形式ファイル`temacs'）からシンボルを取
     り出す。

     すでにダンプしたEmacsでこの関数を使うときには、
     `-batch'を指定してEmacsを実行すること。



File: elisp-ja, Node: Pure Storage, Next: Garbage Collection, Prev: Building Emacs

ピュアメモリ
============

Emacs Lispでは、ユーザーが作成したLispオブジェクト向けに2種類のメモリ、
普通メモリ"（normal storage）と"ピュアメモリ"（pure storage）を使います。
普通メモリは、Emacsセッション中に新たに作成されるすべてのデータを置く場
所です。普通メモリに関する情報は以下の節を参照してください。ピュアメモ
リは、あらかじめロードした標準Lispファイル群の特定のデータ、つまり、
Emacsの実行中にけっして変化しないデータを収めるために使います。

ピュアメモリは、`temacs'があらかじめロードする標準Lispライブラリをロー
ドしている最中にのみ割り当てられます。ファイル`emacs'では読み出し専用
（これができるオペレーティングシステムでは）と印が付けられ、当該マシン
で同時に実行されているすべてのEmacsのジョブでメモリ領域を共有できるよう
にします。ピュアメモリは拡張できません。Emacsをコンパイルしたときに固定
サイズが割り当てられ、あらかじめロードするライブラリに対して十分な大き
さがないと`temacs'はクラッシュします。その場合には、ファイル
`src/puresize.h'のコンパイルパラメータ`PURESIZE'を増やす必要があります。
あらかじめロードするライブラリを追加したり標準機能に機能を追加しなけれ
ば、そのようなことは普通は起こらないはずです。

 -- Function: purecopy OBJECT
     この関数は、ピュアメモリ内にOBJECTをコピーしそれを返す。文字列のコ
     ピーでは、ピュアメモリ内に同じ文字の新たな文字列を単純に作る。ベク
     トルやコンスセルの内容は再帰的にコピーする。シンボルなどの他のオブ
     ジェクトはコピーせずに無変更でそれらを返す。マーカをコピーしようと
     するとエラーを通知する。

     この関数は、Emacsを構築してダンプするとき以外ではなにもしない。普
     通はファイル`emacs/lisp/loaddefs.el'でのみ呼び出されるが、あらかじ
     めロードするとこれを呼び出すようなパッケージも少数だがある。

 -- Variable: pure-bytes-used
     この変数の値は、割り当て済みのピュアメモリのバイト数である。典型的
     には、ダンプしたEmacsではこの値は利用可能なピュアメモリの総量にと
     ても近い。そうでない場合には、あらかじめロードしたライブラリが少な
     いのであろう。

 -- Variable: purify-flag
     この変数は、`defun'が関数定義をピュアメモリに
     コピーすべきかどうかを決定する。
     `nil'以外であると、関数定義をピュアメモリにコピーする。

     Emacsを構築中の初期段階ですべての基本的な関数をロード中には（これ
     らの関数を共有してガベッジコレクションの対象にしないように）、この
     フラグは`t'である。実行形式としてEmacsをダンプするときには、ダンプ
     前後の実際の値には関係なくこの変数には`nil'を書く。

     実行中のEmacsでこのフラグを変更するべきではない。



File: elisp-ja, Node: Garbage Collection, Next: Memory Usage, Prev: Pure Storage

ガベッジコレクション
====================

プログラムがリストを作成したり、（ライブラリをロードするなどして）ユー
ザーが新たに関数を定義すると、それらのデータは普通メモリへ置かれます。
普通メモリが足りなくなると、Emacsはオペレーティングシステムに1kバイトの
倍数のブロックでメモリ割り当てを要求します。各ブロックは1つの種類の
Lispオブジェクトに使いますから、シンボル、コンスセル、マーカなどはメモ
リの異なるブロックに分離されます。（ベクトル、長い文字列、バッファ、特
定の編集向けデータ型などの比較的大きなものは各オブジェクトごとに独立の
ブロックを割り当てるが、短い文字列は8kバイトのブロックに詰め込む。）

あるメモリ部分をしばらく使ってから、（たとえば）バッファを削除したりオ
ブジェクトに対する最後の参照を削除するなどして当該メモリを解放すること
はよくあることです。Emacsには、このような放置されたメモリを回収する"ガ
ベッジコレクタ"（garbage collector）があります。（この名前は伝統的だが、
『ガベッジリサイクル』のほうがこの機能を直観的に表すかもしれない。）

ガベッジコレクタは、Lispプログラムから現時点で参照可能なすべてのLispオ
ブジェクトを探して印を付けることで動作します。まず、すべてのシンボル、
それらの値、それらに関連付けられた関数定義、および、スタック上の任意の
データは参照可能であると仮定します。参照可能なオブジェクトから間接的に
辿れる任意のオブジェクトも参照可能です。

印付けが終ったときには、無印であるすべてのオブジェクトはゴミ（ガベッジ）
です。Lispプログラムやユーザーがなにをしようと、無印のオブジェクトに辿
り着く方法はないのでそれらを参照することは不可能です。無印のオブジェク
トを使っているものはいないので、それらのメモリ領域は再利用できます。ガ
ベッジコレクタの2段目の動作（『掃く』（sweep））は、無印のオブジェクト
のメモリ領域を再利用できるようにすることです。

掃き作業では、未使用のコンスセルを"自由リスト"（free list）に入れて、
将来の割り当てに備えます。
シンボルやマーカについても同様です。
参照可能な文字列は8kバイトのブロックより小さな領域を占めるように詰め込み、
不要になった8kバイトのブロックは解放します。
ベクトル、バッファ、ウィンドウ、他の大きなオブジェクトは、
`malloc'や`free'を使って個別に割り当てたり解放します。

     Common Lispに関した注意：` '
     他のLispと異なり、GNU Emacs Lispでは、
     自由リストが空になってもガベッジコレクタを呼び出さない。
     そのかわりに、オペレーティングシステムにメモリ割り当てを単純に要求し、
     `gc-cons-threshold'バイトを使い尽くすまでは処理を継続する。

     つまり、ガベッジコレクタを明示的に呼び出した直後のLispプログラムの
     部分では、（プログラムのその部分で2度目にガベッジコレクタを呼び出
     すほど多くのメモリを使わないと仮定すれば）その部分を実行中にはガベッ
     ジコレクタが呼ばれないことを保証できるのである。

 -- コマンド: garbage-collect
     このコマンドはガベッジコレクタを実行し、使用中のメモリ量に関する情
     報を返す。（まえのガベッジコレクタの起動後に`gc-cons-threshold'バ
     イト以上のLispデータを使うと自発的なガベッジコレクタの起動を引き起
     こす。）

     `garbage-collect'が返すリストにはつぎの情報が含まれる。

          ((USED-CONSES . FREE-CONSES)
           (USED-SYMS . FREE-SYMS)
           (USED-MISCS . FREE-MISCS)
           USED-STRING-CHARS
           USED-VECTOR-SLOTS
           (USED-FLOATS . FREE-FLOATS)
           (USED-INTERVALS . FREE-INTERVALS))

     例を示す。

          (garbage-collect)
               => ((106886 . 13184) (9769 . 0)
                          (7731 . 4651) 347543 121628
                          (31 . 94) (1273 . 168))

     各要素の意味はつぎのとおりである。

     USED-CONSES
          使用中のコンスセルの個数。

     FREE-CONSES
          オペレーティングシステムから得たメモリであるが現在未使用なコ
          ンスセルの個数。

     USED-SYMS
          使用中のシンボルの個数。

     FREE-SYMS
          オペレーティングシステムから得たメモリであるが現在未使用なシ
          ンボルの個数。

     USED-MISCS
          その他の使用中のオブジェクトの個数。マーカ、オーバレイ、ユー
          ザーに見えないある種のオブジェクトを含む。

     FREE-MISCS
          オペレーティングシステムから得たメモリであるが現在未使用なそ
          の他のオブジェクトの個数。

     USED-STRING-CHARS
          使用中の文字列の総文字数。

     USED-VECTOR-SLOTS
          存在するベクトルの要素の総個数。

     USED-FLOATS
          使用中の浮動小数点数の個数。

     FREE-FLOATS
          オペレーティングシステムから得たメモリであるが現在未使用な浮
          動小数点数の個数。

     USED-INTERVALS
          使用中のインターバルの個数。インターバルとはテキスト属性を表
          現するために使う内部データ構造である。

     FREE-INTERVALS
          オペレーティングシステムから得たメモリであるが現在未使用なイ
          ンターバルの個数。

 -- User Option: garbage-collection-messages
     この変数が`nil'以外であると、Emacsはガベッジコレクションの始まりと
     終りにメッセージを表示する。デフォルト値は`nil'であり、そのような
     メッセージを表示しない。

 -- User Option: gc-cons-threshold
     この変数の値は、ガベッジコレクションのあとでつぎにガベッジコレクショ
     ンを起こすまでにLispオブジェクトに割り当てるべきメモリバイト数であ
     る。コンスセルは8バイト、文字列は1文字1バイトと数バイトのオーバヘッ
     ドといった具合である。バッファの内容に割り当てたメモリ量は数えない。
     この閾値を越えてもただちにつぎのガベッジコレクションは起こらず、つ
     ぎにLispのエバリュエータが呼ばれときに起きる。

     最初の閾値は400,000である。より大きな値を指定すると、ガベッジコレ
     クションの起動回数が少なくなる。ガベッジコレクションに費す時間を減
     少できるが、全体のメモリ使用量を増加させる。大量のLispデータを作成
     するようなプログラムを実行するときに設定する。

     10,000までの小さな値を指定すると、
     ガベッジコレクションの回数を増やせる。
     10,000未満の値が意味を持つのはつぎにガベッジコレクションが起きるまでである。
     `garbage-collect'は閾値を10,000に戻す。

`garbage-collect'が返す値は、データ型ごとのLispデータのメモリ使用量です。
対照的に、関数`memory-limit'は、Emacsが現在使用中のメモリ総量に関する情
報を与えます。

 -- Function: memory-limit
     この関数は、Emacsが最後に割り当てた最終バイトのアドレスを1024で割っ
     たものを返す。値を1024で割るのは、Lispの整数に収めるためである。

     読者の操作がメモリ使用量にどのように影響するかを調べるのに使える。



File: elisp-ja, Node: Memory Usage, Next: Writing Emacs Primitives, Prev: Garbage Collection

メモリ使用量
============

これらの変数は、Emacsが割り当てたデータ型ごとのメモリ総量に関する情報を
与えます。これらと`(garbage-collect)'が返す値との違いに注意してください。
`(garbage-collect)'の値は現存するオブジェクトを数えますが、これらの変数
は、すでに解放したオブジェクトを含めて割り当てたオブジェクトの個数やサ
イズを数えます。

 -- Variable: cons-cells-consed
     このEmacsセッションでこれまでに割り当てたコンスセルの総数。

 -- Variable: floats-consed
     このEmacsセッションでこれまでに割り当てた浮動小数点数の総数。

 -- Variable: vector-cells-consed
     このEmacsセッションでこれまでに割り当てたベクトルセルの総数。

 -- Variable: symbols-consed
     このEmacsセッションでこれまでに割り当てたシンボルの総数。

 -- Variable: string-chars-consed
     このEmacsセッションでこれまでに割り当てた文字列の総文字数。

 -- Variable: misc-objects-consed
     このEmacsセッションでこれまでに割り当てたその他のオブジェクトの総
     数。マーカやオーバレイ、ユーザーに見えないある種のオブジェクトを含
     む。

 -- Variable: intervals-consed
     このEmacsセッションでこれまでに割り当てたインターバルの総数。



File: elisp-ja, Node: Writing Emacs Primitives, Next: Object Internals, Prev: Memory Usage

Emacs基本関数の書き方
=====================

Lisp基本関数は、Cで実装したLisp関数です。Lispから呼び出すためのCの関数
とのインターフェイスの詳細は、数個のCのマクロで処理しています。新たにC
のコードを書く方法をほんとうに理解する唯一の方法は、ソースを読むことで
すが、ここではその一部を説明します。

スペシャルフォームの例は、`eval.c'から引用した`or'の定義です。（普通の
関数も同じように見える。）

     DEFUN ("or", For, Sor, 0, UNEVALLED, 0,
       "Eval args until one of them yields non-nil; return that value.\n\
     The remaining args are not evalled at all.\n\
     If all args return nil, return nil.")
       (args)
          Lisp_Object args;
     {
       register Lisp_Object val;
       Lisp_Object args_left;
       struct gcpro gcpro1;

       if (NULL (args))
         return Qnil;

       args_left = args;
       GCPRO1 (args_left);

       do
         {
           val = Feval (Fcar (args_left));
           if (!NULL (val))
             break;
           args_left = Fcdr (args_left);
         }
       while (!NULL (args_left));

       UNGCPRO;
       return val;
     }

マクロ`DEFUN'の引数の詳しい説明から始めます。その雛型はつぎのとおりです。

     DEFUN (LNAME, FNAME, SNAME, MIN, MAX, INTERACTIVE, DOC)

LNAME
     関数名として定義するLispシンボルの名前である。上の例では、`or'であ
     る。

FNAME
     この関数のCの関数としての名前である。
     この関数をCのコードから呼び出すときに使う名前である。
     慣習により、Lispでの名前のまえに`F'を付けるが、
     Lispでの名前のダッシュ（`-'）はすべて下線に置き換える。
     したがって、Cのコードからこの関数を呼び出すには、`For'を呼び出す。
     引数は`Lisp_Object'型である必要があることに注意してほしい。
     ファイル`lisp.h'では、
     `Lisp_Object'型の値を作成するためのさまざまなマクロや関数を宣言してある。

SNAME
     これは、Lispでの関数を表現するsubrオブジェクト向けのデータを保持する
     構造体に使うCの変数名である。
     この構造体は、シンボルを作成しその定義としてsubrオブジェクトを保存する
     初期化ルーティンへLispのシンボル名を運ぶ構造体である。
     慣習により、この名前はつねに
     FNAMEの`F'を`S'に置き換えたものである。

MIN
     関数が必要とする引数の最小の個数である。関数`or'は最小0個の引数を
     許す。

MAX
     関数が許す引数の最大の個数に制限があるときの引数の最大の個数である。
     あるいは、評価していない引数を受け取るスペシャルフォームであること
     を表す`UNEVALLED'、評価済みの引数を何個でも受け取ることを表す
     `MANY' （`&rest'に等価）でもよい。`UNEVALLED'も`MANY'もマクロであ
     る。MAXが数であるときには、それはMINより小さくなく、かつ、7より大
     きくないこと。

INTERACTIVE
     この関数の対話指定であり、Lisp関数において`interactive'の引数に使
     う文字列である。`or'の場合には0（空ポインタ）であり、`or'は対話的
     に呼び出せないことを表す。値`""'は、対話的に呼び出されるとこの関数
     は引数を受け取らないことを表す。

DOC
     説明文字列である。各行末に`\n\'と書く必要があることを除けば、Lisp
     で定義する関数の説明文字列のように書く。特に、最初の行は1つの文で
     あること。

マクロ`DEFUN'の呼び出しのあとには、
Cの関数に必須な引数名の並びを書き、引数に対する普通のCの宣言を続けます。
引数の最大個数が固定されている関数では、
各Lisp引数向けにCの引数宣言を書き、
それらをすべて`Lisp_Object'型にします。
Lisp関数に引数の個数に上限がないとき、
それを実装するCの関数は実際には2つの引数を受け取ります。
第1引数はLisp引数の個数であり、
第2引数はそれらの値を収めたブロックのアドレスです。
引数の型は`int'と`Lisp_Object *'です。

関数`For'自身の内側では、マクロ`GCPRO1'と`UNGCPRO'を使っていることに注
意してください。`GCPRO1'は、ガベッジコレクションから変数を『保護』する
ために使います。つまり、ガベッジコレクタに対してこの変数を調べてその内
容を参照可能なオブジェクトとみなすように指示します。`Feval'や`Feval'を
直接／間接的に呼び出すものを呼ぶときには、このようにする必要があります。
そのような場面では、再度参照する意図がある任意のLispオブジェクトは保護
する必要があります。`UNGCPRO'は、この関数での変数の保護を取り消します。
これは明示的に行う必要があります。

ほとんどのデータ型では、少なくともそのオブジェクトへの1つのポインタを保
護すれば十分であり、そのオブジェクトに循環がない限り、そのオブジェクト
へのすべてのポインタは正しく保たれます。文字列にはこれはあてはまりませ
ん。ガベッジコレクタがそれらを移動するからです。ガベッジコレクタが文字
列を移動すると、それに対する既知のポインタをすべて再配置し、それ以外の
ポインタは不正になります。したがって、ガベッジコレクタが動く可能性のあ
る任意の部分では、文字列へのすべてのポインタを保護する必要があります。

マクロ`GCPRO1'は1つのローカル変数のみを保護します。
2つ保護したい場合にはかわりに`GCPRO2'を使います。
`GCPRO1'を繰り返しても働きません。
`GCPRO3'や`GCPRO4'のマクロもあります。

これらのマクロは`gcpro1'などのローカル変数を暗黙のうちに使いますが、読
者はこれらを型`struct gcpro'で明示的に宣言する必要があります。したがっ
て、`GCPRO2'を使う場合には、`gcpro1'と`gcpro2'を宣言する必要があります。
残念ですが、ここではすべての詳細は説明しきれません。

Emacsをいったんダンプしたあとでも静的やグローバルな変数に書き込むのであれば、
それらの変数にはCの初期化構文を使ってはいけません。
初期化構文を伴うそれらの変数は、Emacsをダンプすると
（オペレーティングシステムによっては）その結果として
読み出し専用のメモリ領域に割り当てられます。
*Note Pure Storage::。

関数の内側では静的変数を使わずに、すべての静的変数はファイルのトップレ
ベルに置きます。オペレーティングシステムによってはEmacsはキーワード
`static'を空のマクロと定義することもあるので、これは必要なことなのです。
（このような定義を使うのは、そのようなシステムは、初期化構文があろうと
なかろうと静的と宣言した変数をダンプ後には読み出し専用にしてしまうから
である。）

Cの関数を定義しただけではLisp基本関数としては使えません。基本関数に対す
るLispシンボルを作成し、その関数セルに適切なsubrオブジェクトを保存する
必要があります。そのコードはつぎのようになります。

     defsubr (&SUBR-STRUCTURE-NAME);

ここで、SUBR-STRUCTURE-NAMEは`DEFUN'の第3引数に使った名前です。

すでにLisp基本関数が定義されているファイルに新たな基本関数を追加すると
きには、（ファイルの末尾近くで）`syms_of_SOMETHING'という名前の関数を探
し、それに`defsubr'の呼び出しを追加します。ファイルにこの関数がなかった
り、新たなファイルを作成した場合には、`syms_of_FILENAME'（たとえば
`syms_of_myfile'）を追加します。そして、ファイル`emacs.c'でこれらの関数
を呼び出している箇所を探して、そこに`syms_of_FILENAME'の呼び出しを追加
します。

関数`syms_of_FILENAME'は、
Lisp変数として見える任意のCの変数を定義する場所でもあります。
`DEFVAR_LISP'は、Lispから見える`Lisp_Object'型のCの変数を作ります。
`DEFVAR_INT'は、Lispからはつねに整数を値として見える
`int'型のCの変数を作ります。
`DEFVAR_BOOL'は、Lispからは`t'か`nil'を値として見える
`int'型のCの変数を作ります。

ファイルだけに有効な`Lisp_Object'型のCの変数を定義した場合には、つぎの
ようにして、`syms_of_FILENAME'の中で`staticpro'を呼び出してその変数をガ
ベッジコレクションから保護する必要があります。

     staticpro (&VARIABLE);

つぎは、少々複雑な引数を取る別の関数の例です。これは`window.c'から取っ
たもので、マクロとLispオブジェクトを操作する関数の使い方を例示します。

     DEFUN ("coordinates-in-window-p", Fcoordinates_in_window_p,
       Scoordinates_in_window_p, 2, 2,
       "xSpecify coordinate pair: \nXExpression which evals to window: ",
       "Return non-nil if COORDINATES is in WINDOW.\n\
     COORDINATES is a cons of the form (X . Y), X and Y being distances\n\
     ...
     If they are on the border between WINDOW and its right sibling,\n\
        `vertical-line' is returned.")
       (coordinates, window)
          register Lisp_Object coordinates, window;
     {
       int x, y;

       CHECK_LIVE_WINDOW (window, 0);
       CHECK_CONS (coordinates, 1);
       x = XINT (Fcar (coordinates));
       y = XINT (Fcdr (coordinates));

       switch (coordinates_in_window (XWINDOW (window), &x, &y))
         {
         case 0:			/* NOT in window at all. */
           return Qnil;

         case 1:			/* In text part of window. */
           return Fcons (make_number (x), make_number (y));

         case 2:			/* In mode line of window. */
           return Qmode_line;

         case 3:			/* On right border of window.  */
           return Qvertical_line;

         default:
           abort ();
         }
     }

Cのコードでは、関数がCで定義されていない限り、関数をその名前で呼び出せ
ないことに注意してください。Lispで書かれた関数を呼び出す方法は、Lispの
関数`funcall'を内蔵する`Ffuncall'を使うことです。Lisp関数`funcall'は任
意個数の引数を受け付けるので、Cでは2つの引数、Lispレベルの引数の個数と
それらの値を収めた一次元の配列を受け取ります。Lispレベルの最初の引数は
呼び出すべきLisp関数であり、残りはそれに渡す引数です。`Ffuncall'はエバ
リュエータを呼び出すので、`Ffuncall'を呼び出す周りでは、ガベッジコレク
ションからポインタを保護する必要があります。

Cの関数、`call0'、`call1'、`call2'などは、固定個数の引数を受け取るLisp
関数を簡便に呼び出す手軽な方法です。これらは`Ffuncall'を呼び出して動作
します。

`eval.c'は例を調べるにはとてもよいファイルです。
`lisp.h'には重要なマクロや関数の定義が入っています。



File: elisp-ja, Node: Object Internals, Prev: Writing Emacs Primitives

オブジェクトの内部
==================

GNU Emacs Lispは、さまざまな型のデータを扱います。実際のデータはヒープ
に保存されていて、プログラムはポインタを介してそれらを参照します。ほと
んどの実装では、ポインタは32ビット長です。Emacsをコンパイルしたオペレー
ティングシステムやマシンの種類に依存しますが、オブジェクトのアドレスに
は28ビットを使い、残りのビットはガベッジコレクションの印やオブジェクト
の型を表す識別子であるタグに使います。

Lispオブジェクトはタグ付ポインタとして表現しますから、任意のオブジェク
トのLispデータ型を判定することが可能です。Cのデータ`Lisp_Object'は、任
意のデータ型のLispオブジェクトを保持できます。普通の変数は
`Lisp_Object'型ですから、Lispの任意の値の任意の型を保持できます。実際の
データ型は、実行中にのみ判定できます。関数引数についても同じことがいえ
ます。特定の型の引数のみを受け付る関数が必要な場合には、適切な述語
（*Note Type Predicates::）を使って型を明示的に検査する必要があります。

* Menu:

* Buffer Internals::    Components of a buffer structure.
* Window Internals::    Components of a window structure.
* Process Internals::   Components of a process structure.



File: elisp-ja, Node: Buffer Internals, Next: Window Internals, Prev: Object Internals, Up: Object Internals

バッファの内部
--------------

バッファには、Lispプログラマが直接には参照できないフィールドがあります。
それらをCのコードで使っている名前で以下に述べます。多くはLisp基本関数を
介してLispプログラムから間接的に参照できます。

`name'
     バッファ名はバッファを指名する文字列である。
     これは一意であることが保証される。
     *Note Buffer Names::。

`save_modified'
     このフィールドは、バッファが最後に保存された時刻を整数で保持する。
     *Note Buffer Modification::。

`modtime'
     このフィールドは、訪問しているファイルの更新時刻を保持している。
     これはファイルを読み書きしたときに設定される。
     バッファをファイルに書き込むたびに、
     このフィールドとファイルの更新時刻を比較する。
     *Note Buffer Modification::。

`auto_save_modified'
     このフィールドは、バッファを最後に自動保存した時刻を保持する。

`last_window_start'
     このフィールドは、バッファをウィンドウに最後に表示したときのバッファ
     の`window-start'（表示開始）位置を保持する。

`undo_list'
     このフィールドは、バッファのアンドゥリストを保持する。
     *Note Undo::。

`syntax_table_v'
     このフィールドは、バッファの構文テーブルを保持する。
     *Note Syntax Tables::。

`downcase_table'
     このフィールドは、テキストを小文字に変換するための変換表を保持する。
     *Note Case Tables::。

`upcase_table'
     このフィールドは、テキストを大文字に変換するための変換表を保持する。
     *Note Case Tables::。

`case_canon_table'
     このフィールドは、大文字小文字を区別しない探索のために
     テキストを正則にするための変換表を保持する。
     *Note Case Tables::。

`case_eqv_table'
     このフィールドは、大文字小文字を区別しない探索のための
     同値テーブルを保持する。
     *Note Case Tables::。

`display_table'
     このフィールドは、バッファの表示テーブルを保持する。
     表示テーブルがなければ`nil'である。
     *Note Display Tables::。

`markers'
     このフィールドは、バッファを現在指しているすべてのマーカの連鎖を
     保持している。
     バッファからテキストを削除したり、バッファのギャップが移動すると、
     これらのマーカのおのおのを検査し更新する必要がある。
     *Note Markers::。

`backed_up'
     このフィールドは、このバッファで訪問しているファイルのバックアップ
     ファイルを作成したかどうかを表すフラグである。

`mark'
     このフィールドは、バッファのマークを保持する。
     マークはマーカであり、そのためリスト`markers'にも含まれている。
     *Note The Mark::。

`mark_active'
     バッファのマークが活性であれば、このフィールドは`nil'以外である。

`local_var_alist'
     このフィールドは、このバッファにバッファローカルな変数を記述した
     連想リストを保持している。
     バッファオブジェクトに特別な場所がある組み込みのバッファローカルな変数は
     含まない。
     （それらはこの一覧では省いた。）
     *Note Buffer-Local Variables::。

`base_buffer'
     このフィールドは、（間接バッファであれば）バッファの基底バッファ、あるいは、
     `nil'を保持する。

`keymap'
     このフィールドは、バッファのローカルキーマップを保持する。
     *Note Keymaps::。

`overlay_center'
     このフィールドは、現在のオーバレイの中央位置を保持する。
     *Note Overlays::。

`overlays_before'
     このフィールドは、バッファの現在のオーバレイの中央位置かそれよりま
     えで終るこのバッファのオーバレイのリストを保持している。それらは終
     了位置が減る順に並んでいる。

`overlays_after'
     このフィールドは、バッファの現在のオーバレイの中央位置よりうしろで
     終るこのバッファのオーバレイのリストを保持している。それらは開始位
     置が増える順に並んでいる。

`enable_multibyte_characters'
     このフィールドは、`enable-multibyte-characters'の
     バッファローカルな値を保持しており、
     `t'か`nil'である。



File: elisp-ja, Node: Window Internals, Next: Process Internals, Prev: Buffer Internals, Up: Object Internals

ウィンドウの内部
----------------

ウィンドウには以下のような参照可能なフィールドがあります。

`frame'
     このウィンドウがあるフレーム。

`mini_p'
     このウィンドウがミニバッファ用ウィンドウであれば`nil'以外。

`buffer'
     このウィンドウで表示しているバッファ。これはウィンドウの生存期間中
     にしばしば変化する。

`dedicated'
     このウィンドウがそのバッファ専用であると`nil'以外である。

`pointm'
     これは、このウィンドウが選択されていたときのカレントバッファのポイ
     ント値である。選択されていないときには、まえの値が保持される。

`start'
     ウィンドウに表示する最初の文字のバッファ内位置である。

`force_start'
     このフラグが`nil'以外であると、Lispプログラムが明示的にウィンドウ
     をスクロールしたことを表す。ポイントがスクリーンからはみ出している
     とつぎの再表示の動作に影響する。ポイントの周りのテキストをウィンド
     ウに表示するようにスクロールするかわりに、スクリーン上に位置するよ
     うにポイントを移動する。

`last_modified'
     このウィンドウの最後の再表示が完了した時点でのウィンドウのバッファ
     のフィールド`modified'である。

`last_point'
     このウィンドウの最後の再表示が完了した時点でのバッファのポイント値
     である。

`left'
     コラム数で数えたウィンドウの左端である。
     （スクリーンの最左端コラムは0コラム目。）

`top'
     行数で数えたウィンドウの上端である。
     （スクリーンの最上端行は0行目。）

`height'
     行数で数えたウィンドウの高さ。

`width'
     コラム数で数えたウィンドウの幅。

`next'
     これは、兄弟関係でつぎのウィンドウである。兄弟関係で最右端か最下端
     であるウィンドウでは`nil'である。

`prev'
     これは、兄弟関係でまえのウィンドウである。兄弟関係で最左端か最上端
     であるウィンドウでは`nil'である。

`parent'
     内部的にはEmacsはウィンドウを木に並べている。兄弟関係の各グループ
     には親ウィンドウがあり、親ウィンドウの領域はその兄弟すべての領域を
     含む。このフィールドはウィンドウの親を指す。

     親ウィンドウはバッファを表示せず、その子ウィンドウの形以外には、表
     示に関してはなんの役割も持たない。Emacs Lispプログラムでは親ウィン
     ドウを参照せず、バッファを実際に表示する木の葉にあるウィンドウを操
     作する。

`hscroll'
     これは、ウィンドウの表示を水平方向左向きにスクロールしているコラム
     数。これは普通は0である。

`use_time'
     これは、このウィンドウが選択されていた最後の時刻。関数
     `get-lru-window'がこのフィールドを使う。

`display_table'
     ウィンドウの表示テーブル。指定されていなければ`nil'である。

`update_mode_line'
     `nil'以外であると、ウィンドウのモード行を更新する必要があることを表す。

`base_line_number'
     バッファの特定の位置の行番号である。あるいは`nil'。これは、モード
     行にポイント位置の行番号を表示するために使われる。

`base_line_pos'
     行番号が既知のバッファ内位置。既知でなければ`nil'である。

`region_showing'
     このウィンドウでリージョン（やその一部）を強調表示しているときには、
     このフィールドは、当該リージョンの一方の端を表すマーク位置を保持し
     ている。さもなければこのフィールドは`nil'である。



File: elisp-ja, Node: Process Internals, Prev: Window Internals, Up: Object Internals

プロセスの内部
--------------

プロセスにはつぎのようなフィールドがあります。

`name'
     プロセスの名前である文字列。

`command'
     このプロセスを開始するために使用されたコマンド引数から成るリスト。

`filter'
     バッファのかわりにプロセスからの出力を受け取るために使用する関数。
     あるいは`nil'。

`sentinel'
     プロセスがシグナルを受け取るたびに呼ばれる関数。あるいは`nil'。

`buffer'
     プロセスに対応付けられたバッファ。

`pid'
     UNIXのプロセスIDである整数。

`childp'
     フラグであり、これが実際に子プロセスであると`nil'以外である。ネッ
     トワーク接続であると`nil'以外。

`mark'
     プロセスからの最後の出力をバッファに挿入した箇所の末尾位置を表すマー
     カ。これはしばしばバッファの末尾であるが、つねにではない。

`kill_without_query'
     これが`nil'以外であると、このプロセスが動作中にEmacsを終了しようと
     してもプロセスをキルすることに関して確認を求めない。

`raw_status_low'
`raw_status_high'
     これらの2つのフィールドは、システムコール`wait'で返されるプロセス
     状態の各16ビットを記録する。

`status'
     `process-status'が返すべきプロセス状態。

`tick'
`update_tick'
     この2つのフィールドが等しくないと、番兵を実行するかプロセスのバッ
     ファにメッセージを挿入するかして、プロセスの状態変化を報告する必要
     がある。

`pty_flag'
     サブプロセスとの通信にPTY（疑似端末）を使用している場合には`nil'以
     外であり、パイプを使用している場合には`nil'である。

`infd'
     このプロセスからの入力用ファイル記述子。

`outfd'
     このプロセスへの出力用ファイル記述子。

`subtty'
     サブプロセスが使用している端末のファイル記述子。（これを記録する必
     要のないシステムもあり、その場合には値は`nil'である。）

`tty_name'
     サブプロセスが使用している端末の名前。パイプを使用しているときには
     `nil'である。


File: elisp-ja, Node: Standard Errors, Next: Standard Buffer-Local Variables, Prev: GNU Emacs Internals, Up: Top

標準のエラー
************

以下は、概念ごとにまとめた標準Emacsのエラーシンボルの完全な一覧です。一
覧には、各シンボルの（シンボルの属性`error-message'にある）メッセージと
そのようなエラーが生起する場面の記述への相互参照を示しました。

各エラーシンボルには、属性`error-conditions'があり、これはシンボルのリ
ストです。通常、このリストは、エラーシンボルそのものとシンボル`error'を
含みます。しばしば、追加のシンボルも含みます。それらは中間的な分類種別
であり、`error'より細分化したものですが、エラーシンボルそのものよりは大
分類です。たとえば、ファイル参照に関するすべてのエラーには、条件
`file-error'が入っています。以下で、特定のエラーシンボルにおいて追加の
シンボルを言及していないときには、そのエラーには追加シンボルがないこと
を意味します。

特別な例外ですが、エラーシンボル`quit'には条件`error'がありません。これ
は、中断（quit）をエラーとみなさないからです。

エラーが生起する場面とその処理方法については、*Note Errors::。

`シンボル'
     文字列; 参照。

`error'
     `"error"'
     *Note Errors::。

`quit'
     `"Quit"'
     *Note Quitting::。

`args-out-of-range'
     `"Args out of range"'
     *Note Sequences Arrays Vectors::。

`arith-error'
     `"Arithmetic error"'
     *Note Numbers::の`/'と`%'を参照。

`beginning-of-buffer'
     `"Beginning of buffer"'
     *Note Motion::。

`buffer-read-only'
     `"Buffer is read-only"'
     *Note Read Only Buffers::。

`cyclic-function-indirection'
     `"Symbol's chain of function indirections\
      contains a loop"'
     *Note Function Indirection::。

`end-of-buffer'
     `"End of buffer"'
     *Note Motion::。

`end-of-file'
     `"End of file during parsing"'
     これはファイル入出力ではなくLispリーダに関連することなので、
     `file-error'ではないことに注意。
     *Note Input Functions::。

`file-already-exists'
     これは`file-error'。
     *Note Writing to Files::。

`file-date-error'
     これは`file-error'の小分類。
     `copy-file'で、
     出力ファイルの最終更新日付の設定に失敗すると生起する。
     *Note Changing Files::。

`file-error'
     このエラーとその小分類にはエラー文字列がない。
     エラー条件`file-error'があると、
     データ項目のみからエラーメッセージを作るからである。
     *Note Files::。

`file-locked'
     これは`file-error'。
     *Note File Locks::。

`file-supersession'
     これは`file-error'。
     *Note Modification Time::。

`invalid-function'
     `"Invalid function"'
     *Note Classifying Lists::。

`invalid-read-syntax'
     `"Invalid read syntax"'
     *Note Input Functions::。

`invalid-regexp'
     `"Invalid regexp"'
     *Note Regular Expressions::。

`mark-inactive'
     `"Mark inactive"'
     *Note The Mark::。

`no-catch'
     `"No catch for tag"'
     *Note Catch and Throw::。

`scan-error'
     `"Scan error"'
     これは、構文解析関数が不正な構文や対応していない括弧を
     みつけると生起する。
     *Note List Motion::、および、*Note Parsing Expressions::。

`search-failed'
     `"Search failed"'
     *Note Searching and Matching::。

`setting-constant'
     `"Attempt to set a constant symbol"'

     シンボル`nil'や`t'、および、
     `:'で始まる任意のシンボルは変更できない。
     *Note Variables that Never Change: Constant Variables.。

`undefined-color'
     `"Undefined color"'
     *Note Color Names::。

`void-function'
     `"Symbol's function definition is void"'
     *Note Function Cells::。

`void-variable'
     `"Symbol's value as variable is void"'
     *Note Accessing Variables::。

`wrong-number-of-arguments'
     `"Wrong number of arguments"'
     *Note Classifying Lists::。

`wrong-type-argument'
     `"Wrong type argument"'
     *Note Type Predicates::。

`arith-error'の特別な場合に分類された以下の種類のエラーは、数学関数を不
正に使ったときに特定のシステムで生起します。

`domain-error'
     `"Arithmetic domain error"'
     *Note Math Functions::。

`overflow-error'
     `"Arithmetic overflow error"'
     *Note Math Functions::。

`range-error'
     `"Arithmetic range error"'
     *Note Math Functions::。

`singularity-error'
     `"Arithmetic singularity error"'
     *Note Math Functions::。

`underflow-error'
     `"Arithmetic underflow error"'
     *Note Math Functions::。


File: elisp-ja, Node: Standard Buffer-Local Variables, Next: Standard Keymaps, Prev: Standard Errors, Up: Top

バッファローカルな変数
**********************

以下は、各バッファにおいて、自動的にバッファローカルになるEmacsの汎用目
的の変数一覧です。ほとんどのものは、設定したときにだけバッファローカル
になります。これらのごく少数は、各バッファでつねにローカルになります。
多くのLispパッケージで内部使用向けにこのような変数を定義しますが、それ
らすべてをここに示すことはしていません。

`abbrev-mode'
     *Note Abbrevs::。

`auto-fill-function'
     *Note Auto Filling::。

`buffer-auto-save-file-name'
     *Note Auto-Saving::。

`buffer-backed-up'
     *Note Backup Files::。

`buffer-display-count'
     *Note Displaying Buffers::。

`buffer-display-table'
     *Note Display Tables::。

`buffer-file-format'
     *Note Format Conversion::。

`buffer-file-name'
     *Note Buffer File Name::。

`buffer-file-number'
     *Note Buffer File Name::。

`buffer-file-truename'
     *Note Buffer File Name::。

`buffer-file-type'
     *Note MS-DOS File Types::。

`buffer-invisibility-spec'
     *Note Invisible Text::。

`buffer-offer-save'
     *Note Saving Buffers::。

`buffer-read-only'
     *Note Read Only Buffers::。

`buffer-saved-size'
     *Note Point::。

`buffer-undo-list'
     *Note Undo::。

`cache-long-line-scans'
     *Note Text Lines::。

`case-fold-search'
     *Note Searching and Case::。

`ctl-arrow'
     *Note Usual Display::。

`comment-column'
     *Note コメントの操作: (emacs)Comments.。

`default-directory'
     *Note System Environment::。

`defun-prompt-regexp'
     *Note List Motion::。

`enable-multibyte-characters'
     *Note Non-ASCII Characters::。

`fill-column'
     *Note Auto Filling::。

`goal-column'
     *Note ポイント位置を移動する: (emacs)Moving Point.。

`left-margin'
     *Note Indentation::。

`local-abbrev-table'
     *Note Abbrevs::。

`local-write-file-hooks'
     *Note Saving Buffers::。

`major-mode'
     *Note Mode Help::。

`mark-active'
     *Note The Mark::。

`mark-ring'
     *Note The Mark::。

`minor-modes'
     *Note Minor Modes::。

`mode-line-buffer-identification'
     *Note Mode Line Variables::。

`mode-line-format'
     *Note Mode Line Data::。

`mode-line-modified'
     *Note Mode Line Variables::。

`mode-line-process'
     *Note Mode Line Variables::。

`mode-name'
     *Note Mode Line Variables::。

`overwrite-mode'
     *Note Insertion::。

`paragraph-separate'
     *Note Standard Regexps::。

`paragraph-start'
     *Note Standard Regexps::。

`point-before-scroll'
     マウスコマンドとスクロールコマンドの通信に使う。

`require-final-newline'
     *Note Insertion::。

`selective-display'
     *Note Selective Display::。

`selective-display-ellipses'
     *Note Selective Display::。

`tab-width'
     *Note Usual Display::。

`truncate-lines'
     *Note Truncation::。

`vc-mode'
     *Note Mode Line Variables::。


File: elisp-ja, Node: Standard Keymaps, Next: Standard Hooks, Prev: Standard Buffer-Local Variables, Up: Top

標準のキーマップ
****************

以下のシンボルは、さまざまなキーマップの名前として使われています。これ
らの一部はEmacsの始動時に存在しますが、他のものは関連するモードを使った
ときにのみロードされます。以下は、完全な一覧ではありません。

これらのマップのほとんどすべては、ローカルマップとして使われます。もち
ろん、存在するモードの中で、グローバルキーマップを変更するのはVipモード
と端末（terminal）モードだけです。

`Buffer-menu-mode-map'
     バッファメニュー（buffer-menu）モードで使う完全なキーマップ。

`c-mode-map'
     Cモードで使う疎なキーマップ。

`command-history-map'
     コマンド履歴（command-history）モードで使う完全なキーマップ。

`ctl-x-4-map'
     プレフィックス`C-x 4'の下位コマンド用の疎なキーマップ。

`ctl-x-5-map'
     プレフィックス`C-x 5'の下位コマンド用の疎なキーマップ。

`ctl-x-map'
     `C-x'コマンド用の完全なキーマップ。

`debugger-mode-map'
     デバッガモードで使う完全なキーマップ。

`dired-mode-map'
     `dired-mode'バッファで使う完全なキーマップ。

`edit-abbrevs-map'
     `edit-abbrevs'で使う疎なキーマップ。

`edit-tab-stops-map'
     `edit-tab-stops'で使う疎なキーマップ。

`electric-buffer-menu-mode-map'
     エレクトリックバッファメニュー（electric-buffer-menu）モードで使う
     完全なキーマップ。

`electric-history-map'
     エレクトリックコマンド履歴（electric-command-history）モードで使う
     完全なキーマップ。

`emacs-lisp-mode-map'
     emacs-lispモードで使う疎なキーマップ。

`facemenu-menu'
     テキスト属性メニューを表示するキーマップ。

`facemenu-background-menu'
     テキスト属性メニューのBackground Colorサブメニューを表示するキーマッ
     プ。

`facemenu-face-menu'
     テキスト属性メニューのFaceサブメニューを表示するキーマップ。

`facemenu-foreground-menu'
     テキスト属性メニューのForeground Colorを表示するキーマップ。

`facemenu-indentation-menu'
     テキスト属性メニューのIndentaionサブメニューを表示するキーマップ。

`facemenu-justification-menu'
     テキスト属性メニューのJustificationサブメニューを表示するキーマッ
     プ。

`facemenu-special-menu'
     テキスト属性メニューのSpecial Propsサブメニューを表示するキーマッ
     プ。

`function-key-map'
     キーパッドやファンクションキーの変換用のキーマップ。
     それらがなければ、この変数は空の疎なキーマップである。
     *Note Translating Input::。

`fundamental-mode-map'
     基本（fundamental）モード用のローカルキーマップ。
     これは空であり、変更すべきでない。

`Helper-help-map'
     ヘルプユーティリティパッケージが使う完全なキーマップ。
     この変数の値セルと関数セルには同一のキーマップが入っている。

`Info-edit-map'
     infoの`e'コマンドで使う疎なキーマップ。

`Info-mode-map'
     infoコマンドを収めた疎なキーマップ。

`isearch-mode-map'
     インクリメンタルサーチ中に打鍵できる文字を定義するキーマップ。

`key-translation-map'
     キー変換用のキーマップ。
     これは、`function-key-map'と違って、
     もとのキーバインディングに優先する。
     *Note Translating Input::。

`lisp-interaction-mode-map'
     Lispモードで使う疎なキーマップ。

`lisp-mode-map'
     Lispモードで使う疎なキーマップ。

`menu-bar-edit-menu'
     メニューバーのEditメニューを表示するキーマップ。

`menu-bar-files-menu'
     メニューバーのFilesメニューを表示するキーマップ。

`menu-bar-help-menu'
     メニューバーのHelpメニューを表示するキーマップ。

`menu-bar-mule-menu'
     メニューバーのMuleメニューを表示するキーマップ。

`menu-bar-search-menu'
     メニューバーのSearchメニューを表示するキーマップ。

`menu-bar-tools-menu'
     メニューバーのToolsメニューを表示するキーマップ。

`mode-specific-map'
     `C-c'に続く文字用のキーマップ。これはグローバルマップの中にあるこ
     とに注意。このマップは実際にはモード固有ではない。プレフィックスキー
     `C-c'の主要な使い方を記述する`C-h b'（`display-bindings'）において、
     ユーザーに有益なようにこの名前を選んだ。

`occur-mode-map'
     出現（occur）モードで使うローカルキーマップ。

`query-replace-map'
     `query-replace'やその関連コマンドの応答用に使うキーマップ。
     `y-or-n-p'や`map-y-or-n-p'もこれを使う。このマップを使う関数は、プ
     レフィックスキーを使わない。一度に1つのイベントを探す。

`text-mode-map'
     テキスト（text）モードで使う疎なキーマップ。

`view-mode-map'
     閲覧（view）モードで使う完全なキーマップ。


File: elisp-ja, Node: Standard Hooks, Next: Index, Prev: Standard Keymaps, Up: Top

標準のフック
************

以下は、Emacsから適切な場面に呼び出される関数を読者が指定するためのフッ
ク変数の一覧です。

これらのほとんどの変数の名前は`-hook'で終ります。これらは、`run-hooks'
で実行される"ノーマルフック"（normal hooks）です。そのようなフックの値
は関数のリストです。関数は引数なしで呼び出され、その値は完全に無視しま
す。このようなフックに新たな関数を追加する推奨方法は、`add-hook'を呼び
出すことです。フックの使い方について詳しくは、*Note Hooks::。

`-hooks'や`-functions'で終る名前の変数は、普通、"アブノーマルフック
（abnormal hooks）です。それらの値も関数のリストですが、それらの関数は
特別な方法（引数を渡したり、戻り値を使用したり）で呼び出されます。これ
らの変数のごく少数は実際にはノーマルフックですが、ノーマルフックの名前
を`-hook'で終えるという慣行を確立するまえに命名したものです。

`-function'で終る名前の変数では、その値は1つの関数です。（Emacsの旧版で
は、ノーマルフックでないにも関わらず、`-hook'で終る名前の変数があった。
しかしながら、それらはすべて改名した。）


`activate-mark-hook'
`after-change-function'
`after-change-functions'
`after-init-hook'
`after-insert-file-functions'
`after-make-frame-hook'
`after-revert-hook'
`after-save-hook'
`auto-fill-function'
`auto-save-hook'
`before-change-function'
`before-change-functions'
`before-init-hook'
`before-make-frame-hook'
`before-revert-hook'
`blink-paren-function'
`buffer-access-fontify-functions'
`c-mode-hook'
`calendar-load-hook'
`change-major-mode-hook'
`command-history-hook'
`command-line-functions'
`comment-indent-function'
`deactivate-mark-hook'
`diary-display-hook'
`diary-hook'
`dired-mode-hook'
`disabled-command-hook'
`echo-area-clear-hook'
`edit-picture-hook'
`electric-buffer-menu-mode-hook'
`electric-command-history-hook'
`electric-help-mode-hook'
`emacs-lisp-mode-hook'
`find-file-hooks'
`find-file-not-found-hooks'
`first-change-hook'
`fortran-comment-hook'
`fortran-mode-hook'
`ftp-setup-write-file-hooks'
`ftp-write-file-hook'
`indent-mim-hook'
`initial-calendar-window-hook'
`kill-buffer-hook'
`kill-buffer-query-functions'
`kill-emacs-hook'
`kill-emacs-query-functions'
`LaTeX-mode-hook'
`ledit-mode-hook'
`lisp-indent-function'
`lisp-interaction-mode-hook'
`lisp-mode-hook'
`list-diary-entries-hook'
`local-write-file-hooks'
`m2-mode-hook'
`mail-mode-hook'
`mail-setup-hook'
`mark-diary-entries-hook'
`medit-mode-hook'
`menu-bar-update-hook'
`minibuffer-setup-hook'
`minibuffer-exit-hook'
`news-mode-hook'
`news-reply-mode-hook'
`news-setup-hook'
`nongregorian-diary-listing-hook'
`nongregorian-diary-marking-hook'
`nroff-mode-hook'
`outline-mode-hook'
`plain-TeX-mode-hook'
`post-command-hook'
`pre-abbrev-expand-hook'
`pre-command-hook'
`print-diary-entries-hook'
`prolog-mode-hook'
`protect-innocence-hook'
`redisplay-end-trigger-functions'
`rmail-edit-mode-hook'
`rmail-mode-hook'
`rmail-summary-mode-hook'
`scheme-indent-hook'
`scheme-mode-hook'
`scribe-mode-hook'
`shell-mode-hook'
`shell-set-directory-error-hook'
`suspend-hook'
`suspend-resume-hook'
`temp-buffer-show-function'
`term-setup-hook'
`terminal-mode-hook'
`terminal-mode-break-hook'
`TeX-mode-hook'
`text-mode-hook'
`today-visible-calendar-hook'
`today-invisible-calendar-hook'
`vi-mode-hook'
`view-hook'
`window-configuration-change-hook'
`window-scroll-functions'
`window-setup-hook'
`window-size-change-functions'
`write-contents-hooks'
`write-file-hooks'
`write-region-annotate-functions'









File: elisp-ja, Node: Index, Next: New Symbols, Prev: Standard Hooks, Up: Top

Index
*****


All variables, functions, keys, programs, files, and concepts are in
this one index.

All names and concepts are permuted, so they appear several times, one
for each permutation of the parts of the name.  For example,
`function-name' would appear as function-name and name, function-.




* Menu:

* +:                            Arithmetic Operations.  (line  42)
* -:                            Arithmetic Operations.  (line  52)
* *:                            Arithmetic Operations.  (line  66)
* /:                            Arithmetic Operations.  (line  77)
* %:                            Arithmetic Operations.  (line 111)
* `:                            Backquote.              (line   5)
* =:                            Comparison of Numbers.  (line  43)
* <:                            Comparison of Numbers.  (line  51)
* >:                            Comparison of Numbers.  (line  59)
* /=:                           Comparison of Numbers.  (line  47)
* <=:                           Comparison of Numbers.  (line  55)
* >=:                           Comparison of Numbers.  (line  63)
* 式:                           Intro Eval.             (line  14)
* 型:                           Lisp Data Types.        (line   5)
* 数:                           Numbers.                (line   5)
* 行:                           Text Lines.             (line   5)
* 略語:                         Abbrevs.                (line   5)
* 余り:                         Arithmetic Operations.  (line 111)
* 剰余:                         Arithmetic Operations.  (line 136)
* 配列:                         Arrays.                 (line   5)
* 括弧:                         Blinking.               (line   5)
* タブ:                         Character Type.         (line  41)
* 改行:                         Character Type.         (line  41)
* 復帰:                         Character Type.         (line  41)
* 補完:                         Completion.             (line   5)
* 括弧:                         Cons Cell Type.         (line  35)
* `#$':                         Docs and Compilation.   (line  47)
* 同値:                         Equality Predicates.    (line   5)
* 評価:                         Evaluation.             (line   5)
* 間接:                         Function Indirection.   (line   5)
* 字形:                         Glyphs.                 (line   6)
* 環境:                         Intro Eval.             (line  44)
* 再帰:                         Iteration.              (line   5)
* キー:                         Keymap Terminology.     (line   5)
* 打鍵:                         Keymap Terminology.     (line   5)
* 機能:                         Named Features.         (line   5)
* 範囲:                         Not Intervals.          (line   5)
* 整数:                         Numbers.                (line   5)
* 中断:                         Quitting.               (line   5)
* 乱数:                         Random Numbers.         (line   5)
* 置換:                         Search and Replace.     (line   5)
* 探索:                         Searching and Matching.  (line   5)
* 番兵:                         Sentinels.              (line   5)
* 集合:                         Sets And Lists.         (line   5)
* 表示:                         Streams Intro.          (line   5)
* 文字:                         Strings and Characters.  (line   5)
* 行頭:                         Text Lines.             (line  51)
* 述語:                         Type Predicates.        (line   5)
* 変数:                         Variables.              (line   5)
* 休止:                         Waiting.                (line   5)
* 待機:                         Waiting.                (line   5)
* 関数:                         What Is a Function.     (line  15)
* 略語表:                       Abbrevs.                (line   5)
* パイプ:                       Asynchronous Processes.  (line  66)
* 論理積:                       Bitwise Operations.     (line 126)
* 論理和:                       Bitwise Operations.     (line 160)
* 小文字:                       Case Conversion.        (line   5)
* 大文字:                       Case Conversion.        (line   5)
* 白文字:                       Character Type.         (line  41)
* 導入列:                       Chars and Bytes.        (line   6)
* コラム:                       Columns.                (line   5)
* アトム:                       Cons Cell Type.         (line  32)
* 夏時間:                       Daylight Savings.       (line   5)
* 条件名:                       Error Symbols.          (line   5)
* エラー:                       Errors.                 (line   5)
* 式の値:                       Evaluation.             (line   5)
* 無限大:                       Float Basics.           (line  16)
* 空関数:                       Function Indirection.   (line   5)
* 関数名:                       Function Names.         (line   5)
* フック:                       Hooks.                  (line   5)
* 字下げ:                       Indentation.            (line   5)
* 桁溢れ:                       Integer Basics.         (line  11)
* 副作用:                       Intro Eval.             (line  49)
* キー列:                       Key Sequence Input.     (line  12)
* 基本型:                       Lisp Data Types.        (line  16)
* アトム:                       List-related Predicates.  (line  18)
* リスト:                       Lists.                  (line   5)
* ロード:                       Loading.                (line   5)
* マクロ:                       Macros.                 (line   5)
* マーカ:                       Markers.                (line   5)
* モード:                       Modes.                  (line   5)
* 真理値:                       nil and t.              (line   5)
* 自然数:                       Predicates on Numbers.  (line  28)
* 丸める:                       Rounding Operations.    (line   5)
* 初期化:                       Start-up Summary.       (line   5)
* バイト:                       Strings and Characters.  (line   5)
* 文字列:                       Strings and Characters.  (line   5)
* 実行、:                       Subprocess Creation.    (line  15)
* 表示名:                       Symbol Components.      (line  11)
* 値セル:                       Symbol Components.      (line  17)
* マーク:                       The Mark.               (line   5)
* タイマ:                       Timers.                 (line   5)
* ヒント:                       Tips.                   (line   5)
* 変換表:                       Translation of Characters.  (line   5)
* 継続行:                       Truncation.             (line   5)
* 型検査:                       Type Predicates.        (line   5)
* 型述語:                       Type Predicates.        (line  18)
* リドゥ:                       Undo.                   (line   5)
* マクロ:                       What Is a Function.     (line  51)
* 無名関数:                     Anonymous Functions.    (line   5)
* 引数束縛:                     Argument List.          (line   5)
* 配列要素:                     Array Functions.        (line  22)
* 自動保存:                     Auto-Saving.            (line   5)
* 論理否定:                     Bitwise Operations.     (line 196)
* 閉じ括弧:                     Blinking.               (line   5)
* バッファ:                     Buffers.                (line   5)
* 文字集合:                     Character Sets.         (line   5)
* ベル文字:                     Character Type.         (line  41)
* 垂直タブ:                     Character Type.         (line  41)
* メタ文字:                     Character Type.         (line  90)
* 行末変換:                     Coding System Basics.   (line  17)
* 水平位置:                     Columns.                (line   5)
* 自己挿入:                     Commands for Insertion.  (line  16)
* コメント:                     Comments.               (line   5)
* 実行速度:                     Compilation Tips.       (line   5)
* 速度向上:                     Compilation Tips.       (line   5)
* ポインタ:                     Cons Cell Type.         (line   5)
* 空リスト:                     Cons Cell Type.         (line  76)
* 制御構造:                     Control Structures.     (line   5)
* 効率解析:                     Coverage Testing.       (line   6)
* デバッガ:                     Debugger.               (line   5)
* ブレーク:                     Debugger.               (line   5)
* 変数定義:                     Defining Variables.     (line   5)
* エラー名:                     Error Symbols.          (line   5)
* フェイス:                     Faces.                  (line   5)
* 書式定義:                     Format Conversion.      (line  14)
* 記述形式:                     Format of Descriptions.  (line   5)
* 数前置子:                     Formatting Strings.     (line  96)
* 画面配置:                     Frame Configuration Type.  (line   5)
* フレーム:                     Frames.                 (line   5)
* 関数定義:                     Function Names.         (line   5)
* イベント:                     Input Events.           (line   5)
* 入力方式:                     Input Methods.          (line   5)
* 端末入力:                     Input Modes.            (line   5)
* 入力方式:                     Input Modes.            (line   5)
* 位置引数:                     Interactive Codes.      (line  79)
* フォーム:                     Intro Eval.             (line  14)
* 反転表示:                     Inverse Video.          (line   5)
* 強調表示:                     Inverse Video.          (line   8)
* 繰り返し:                     Iteration.              (line   5)
* キー探索:                     Key Lookup.             (line   5)
* 関数本体:                     Lambda Components.      (line  35)
* ラムダ式:                     Lambda Expressions.     (line   5)
* データ型:                     Lisp Data Types.        (line   5)
* 無限再帰:                     Local Variables.        (line 101)
* 三角関数:                     Math Functions.         (line   5)
* 数学関数:                     Math Functions.         (line   5)
* ブール値:                     nil and t.              (line   5)
* 丸め変換:                     Numeric Conversions.    (line   5)
* 表示制限:                     Output Variables.       (line  55)
* 解析状態:                     Parsing Expressions.    (line  36)
* ポイント:                     Point.                  (line   5)
* 前置引数:                     Prefix Command Arguments.  (line   5)
* 入力構文:                     Printed Representation.  (line   5)
* 表示表現:                     Printed Representation.  (line   5)
* プロセス:                     Processes.              (line   5)
* クォート:                     Quoting.                (line   5)
* 強制終了:                     Recursive Editing.      (line  30)
* レジスタ:                     Registers.              (line   5)
* 正規表現:                     Regular Expressions.    (line   5)
* 選択表示:                     Selective Display.      (line   5)
* シグナル:                     Signals to Processes.   (line   5)
* フォント:                     Some Terms.             (line  13)
* 間接仕様:                     Specification List.     (line 109)
* 汎用文字:                     Splitting Characters.   (line  50)
* 読み取り:                     Streams Intro.          (line   5)
* 文字配列:                     Strings and Characters.  (line   5)
* 関数セル:                     Symbol Components.      (line  25)
* シンボル:                     Symbols.                (line   5)
* 構文解析:                     Syntax Tables.          (line   5)
* 端末入力:                     Terminal Input.         (line   5)
* 端末出力:                     Terminal Output.        (line   5)
* テキスト:                     Text.                   (line   5)
* 型の検査:                     Type Predicates.        (line  18)
* 停止位置:                     Using Edebug.           (line  36)
* スコープ:                     Variable Scoping.       (line  10)
* 存続期間:                     Variable Scoping.       (line  10)
* ベクトル:                     Vectors.                (line   5)
* 空の変数:                     Void Variables.         (line   5)
* 基本関数:                     What Is a Function.     (line  21)
* コマンド:                     What Is a Function.     (line  59)
* 画面配置:                     Window Configuration Type.  (line   5)
* `"'、表示:                    Output Functions.       (line   9)
* `\'、表示:                    Output Functions.       (line   9)
* `&'、置換:                    Replacing Match.        (line  42)
* 置換の`&':                    Replacing Match.        (line  42)
* `\'、置換:                    Replacing Match.        (line  52)
* 置換の`\':                    Replacing Match.        (line  52)
* 関数の記述:                   A Sample Function Description.  (line   5)
* 記述、関数:                   A Sample Function Description.  (line   5)
* 自動ロード:                   Autoload.               (line   5)
* ウィンドウ:                   Basic Windows.          (line   5)
* 論理シフト:                   Bitwise Operations.     (line  15)
* 算術シフト:                   Bitwise Operations.     (line  79)
* バッファ名:                   Buffer Names.           (line   5)
* コンスセル:                   Building Lists.         (line   5)
* コンスする:                   Building Lists.         (line  24)
* コンパイル:                   Byte Compilation.       (line   5)
* 関数の起動:                   Calling Functions.      (line   5)
* 変更フック:                   Change Hooks.           (line   5)
* 文字コード:                   Character Codes.        (line   5)
* 文字の構文:                   Character Type.         (line  22)
* エスケープ:                   Character Type.         (line  41)
* ページ送り:                   Character Type.         (line  41)
* アルト文字:                   Character Type.         (line 115)
* イベント型:                   Classifying Events.     (line   5)
* 文字の挿入:                   Commands for Insertion.  (line  16)
* 数の同値性:                   Comparison of Numbers.  (line   5)
* 同値性、数:                   Comparison of Numbers.  (line   5)
* リスト構造:                   Cons Cells.             (line  21)
* 頻度数計測:                   Coverage Testing.       (line   6)
* ハッシュ化:                   Creating Symbols.       (line  11)
* インターン:                   Creating Symbols.       (line  20)
* 対話的関数:                   Defining Commands.      (line   5)
* 削除とキル:                   Deletion.               (line   6)
* タブの削除:                   Deletion.               (line  56)
* 文字の表示:                   Describing Characters.  (line  19)
* 説明文字列:                   Documentation.          (line   5)
* 遅延ロード:                   Dynamic Loading.        (line   6)
* つぎの入力:                   Event Input Misc.       (line  12)
* 入力の破棄:                   Event Input Misc.       (line  71)
* マクロ展開:                   Expansion.              (line  32)
* 生のバイト:                   Explicit Encoding.      (line  10)
* ファイル名:                   File Names.             (line   5)
* 正の無限大:                   Float Basics.           (line  16)
* 負の無限大:                   Float Basics.           (line  16)
* パディング:                   Formatting Strings.     (line  96)
* 不正な関数:                   Function Indirection.   (line  19)
* 自由リスト:                   Garbage Collection.     (line  34)
* エラー記述:                   Handling Errors.        (line 101)
* 祝祭日形式:                   Holiday Customizing.    (line  35)
* 無限ループ:                   Infinite Loops.         (line   5)
* マーク引数:                   Interactive Codes.      (line 133)
* 再帰的評価:                   Intro Eval.             (line  32)
* 完全なキー:                   Keymap Terminology.     (line   5)
* 未定義キー:                   Keymap Terminology.     (line   5)
* キーマップ:                   Keymaps.                (line   5)
* ライブラリ:                   Loading.                (line   5)
* 変数を隠す:                   Local Variables.        (line  17)
* 現在の束縛:                   Local Variables.        (line  37)
* 評価エラー:                   Local Variables.        (line 101)
* マップ関数:                   Mapping Functions.      (line   5)
* 履歴リスト:                   Minibuffer History.     (line   5)
* 複雑な引数:                   Minibuffers.            (line   5)
* モード変数:                   Minor Mode Conventions.  (line  14)
* ナロイング:                   Narrowing.              (line   5)
* 改行、表示:                   Output Functions.       (line  84)
* オーバレイ:                   Overlays.               (line   5)
* マーカ、数:                   Overview of Markers.    (line  31)
* 括弧の深さ:                   Parsing Expressions.    (line  26)
* 子プロセス:                   Processes.              (line   5)
* 親プロセス:                   Processes.              (line   5)
* シーケンス:                   Sequences Arrays Vectors.  (line   5)
* 削除、要素:                   Sets And Lists.         (line  29)
* 要素の削除:                   Sets And Lists.         (line  29)
* 追悼記念祭:                   Sexp Diary Entries.     (line 126)
* エラー通知:                   Signaling Errors.       (line   5)
* 文字列探索:                   String Search.          (line   5)
* 単語の探索:                   String Search.          (line  61)
* 置換、文字:                   Substitution.           (line  11)
* 文字の置換:                   Substitution.           (line  11)
* 括弧の構文:                   Syntax Class Table.     (line  38)
* 構文クラス:                   Syntax Descriptors.     (line   5)
* 構文記述子:                   Syntax Descriptors.     (line  20)
* 構文フラグ:                   Syntax Flags.           (line   5)
* エコー表示:                   The Echo Area.          (line   5)
* エコー領域:                   The Echo Area.          (line   5)
* キルリング:                   The Kill Ring.          (line   5)
* リージョン:                   The Region.             (line   5)
* 文字変換表:                   Translation of Characters.  (line   5)
* アンロード:                   Unloading.              (line   5)
* 引数記述子:                   Using Interactive.      (line  11)
* `.'、リスト:                  Dotted Pair Notation.   (line   5)
* `"'、文字列:                  Syntax for Strings.     (line   6)
* `\'、文字列:                  Syntax for Strings.     (line   6)
* 文字列の`"':                  Syntax for Strings.     (line   6)
* 文字列の`\':                  Syntax for Strings.     (line   6)
* マクロの記述:                 A Sample Function Description.  (line   5)
* 記述、マクロ:                 A Sample Function Description.  (line   5)
* 記述例、変数:                 A Sample Variable Description.  (line   5)
* 変数の記述例:                 A Sample Variable Description.  (line   5)
* バッチモード:                 Batch Mode.             (line   5)
* 非対話的使用:                 Batch Mode.             (line   5)
* ベルを鳴らす:                 Beeping.                (line   5)
* 排他的論理和:                 Bitwise Operations.     (line 178)
* 対応する括弧:                 Blinking.               (line   5)
* リストの構築:                 Building Lists.         (line   5)
* バイトコード:                 Byte Compilation.       (line   5)
* 関数呼び出し:                 Calling Functions.      (line   5)
* 大文字小文字:                 Case Conversion.        (line   5)
* キー列エラー:                 Changing Key Bindings.  (line  52)
* ヤンクの抑制:                 Changing Key Bindings.  (line 151)
* スーパー文字:                 Character Type.         (line 115)
* ハイパー文字:                 Character Type.         (line 115)
* バイトと文字:                 Chars and Bytes.        (line   5)
* 文字テーブル:                 Char-Tables.            (line   5)
* 予約済みキー:                 Coding Conventions.     (line  85)
* コマンド履歴:                 Command History.        (line   5)
* プロファイル:                 Compilation Tips.       (line   9)
* 条件付き評価:                 Conditionals.           (line   5)
* 文字列の連結:                 Creating Strings.       (line  87)
* 連結、文字列:                 Creating Strings.       (line  87)
* デフォルト値:                 Default Value.          (line   5)
* 対話ボックス:                 Dialog Boxes.           (line   5)
* 禁止コマンド:                 Disabling Commands.     (line   5)
* 表示テーブル:                 Display Tables.         (line   6)
* 説明文の慣習:                 Documentation Basics.   (line   5)
* ドット対記法:                 Dotted Pair Notation.   (line   5)
* 型、編集向け:                 Editing Types.          (line   5)
* 編集向けの型:                 Editing Types.          (line   5)
* 記述の表記法:                 Evaluation Notation.    (line   5)
* 表記法、記述:                 Evaluation Notation.    (line   5)
* 表記法、評価:                 Evaluation Notation.    (line   5)
* 評価の表記法:                 Evaluation Notation.    (line   5)
* マクロの展開:                 Expansion.              (line   5)
* 展開、マクロ:                 Expansion.              (line   5)
* フィルタ関数:                 Filter Functions.       (line   5)
* 書式付け指定:                 Formatting Strings.     (line  21)
* フィールド幅:                 Formatting Strings.     (line  96)
* フレーム構成:                 Frame Configurations.   (line   5)
* 端末フレーム:                 Frames.                 (line  11)
* 空の関数セル:                 Function Cells.         (line  27)
* 関数呼び出し:                 Function Forms.         (line   5)
* 名前付き関数:                 Function Names.         (line   5)
* 字形テーブル:                 Glyphs.                 (line   9)
* ロードフック:                 Hooks for Loading.      (line   5)
* ロードエラー:                 How Programs Do Loading.  (line  68)
* 間接バッファ:                 Indirect Buffers.       (line   5)
* 基底バッファ:                 Indirect Buffers.       (line   5)
* ループ、無限:                 Infinite Loops.         (line   5)
* 入力イベント:                 Input Events.           (line   5)
* オーバフロー:                 Integer Basics.         (line  11)
* キー列の入力:                 Key Sequence Input.     (line   5)
* 説明文、キー:                 Keys in Documentation.  (line   5)
* ラムダリスト:                 Lambda Components.      (line  14)
* オブジェクト:                 Lisp Data Types.        (line   5)
* リストの要素:                 List Elements.          (line   5)
* ローカル束縛:                 Local Variables.        (line   5)
* ローカル変数:                 Local Variables.        (line   5)
* モードフック:                 Major Mode Conventions.  (line 125)
* マッチデータ:                 Match Data.             (line   5)
* メニューバー:                 Menu Bar.               (line   5)
* ミニバッファ:                 Minibuffers.            (line   5)
* マイナモード:                 Minor Modes.            (line   5)
* モードヘルプ:                 Mode Help.              (line   5)
* モード行構成:                 Mode Line Data.         (line   5)
* マウスの位置:                 Mouse Position.         (line   5)
* 位置、マウス:                 Mouse Position.         (line   5)
* マウスの追跡:                 Mouse Tracking.         (line   5)
* 追跡、マウス:                 Mouse Tracking.         (line   5)
* ワイドニング:                 Narrowing.              (line  43)
* 型検査の内部:                 Object Internals.       (line  20)
* 文字列の内側:                 Parsing Expressions.    (line  54)
* クォート文字:                 Parsing Expressions.    (line  62)
* 数値前置引数:                 Prefix Command Arguments.  (line   5)
* 生の前置引数:                 Prefix Command Arguments.  (line   5)
* ハッシュ記法:                 Printed Representation.  (line  23)
* サブプロセス:                 Processes.              (line   5)
* ピュアメモリ:                 Pure Storage.           (line   5)
* リストの変更:                 Rearrangement.          (line   5)
* 接続、リスト:                 Rearrangement.          (line  16)
* 連結、リスト:                 Rearrangement.          (line  16)
* 逆順、リスト:                 Rearrangement.          (line  63)
* リストの長さ:                 Sequence Functions.     (line  16)
* 長さ、リスト:                 Sequence Functions.     (line  16)
* 長さ、文字列:                 Sequence Functions.     (line  16)
* 文字列の長さ:                 Sequence Functions.     (line  16)
* 特殊イベント:                 Special Events.         (line   6)
* 改行、文字列:                 Syntax for Strings.     (line  13)
* 文字列の改行:                 Syntax for Strings.     (line  13)
* 構文テーブル:                 Syntax Tables.          (line   5)
* テキスト属性:                 Text Properties.        (line   5)
* テキスト表現:                 Text Representations.   (line   5)
* マークリング:                 The Mark.               (line   5)
* アイドル状態:                 Timers.                 (line  93)
* キー変換関数:                 Translating Input.      (line 125)
* 行の折り返し:                 Truncation.             (line   5)
* 白文字の削除:                 User-Level Deletion.    (line  11)
* 動的スコープ:                 Variable Scoping.       (line  10)
* 再表示の強制:                 Waiting.                (line  27)
* 組み込み関数:                 What Is a Function.     (line  21)
* 打鍵コマンド:                 What Is a Function.     (line  73)
* `?'、文字定数:                Character Type.         (line 122)
* `\'、文字定数:                Character Type.         (line 122)
* 文字定数、`?':                Character Type.         (line 122)
* 文字定数、`\':                Character Type.         (line 122)
* リスト内の`.':                Dotted Pair Notation.   (line   5)
* `%'、書式付け:                Formatting Strings.     (line  21)
* クォート、`'':                Quoting.                (line  14)
* `.'、正規表現:                Syntax of Regexps.      (line  27)
* 正規表現の`.':                Syntax of Regexps.      (line  27)
* `*'、正規表現:                Syntax of Regexps.      (line  33)
* 正規表現の`*':                Syntax of Regexps.      (line  33)
* `+'、正規表現:                Syntax of Regexps.      (line  61)
* 正規表現の`+':                Syntax of Regexps.      (line  61)
* `?'、正規表現:                Syntax of Regexps.      (line  67)
* 正規表現の`?':                Syntax of Regexps.      (line  67)
* `['、正規表現:                Syntax of Regexps.      (line  73)
* `]'、正規表現:                Syntax of Regexps.      (line  73)
* 正規表現の`[':                Syntax of Regexps.      (line  73)
* 正規表現の`]':                Syntax of Regexps.      (line  73)
* `^'、正規表現:                Syntax of Regexps.      (line 113)
* 正規表現の`^':                Syntax of Regexps.      (line 113)
* `$'、正規表現:                Syntax of Regexps.      (line 136)
* 正規表現の`$':                Syntax of Regexps.      (line 136)
* `\'、正規表現:                Syntax of Regexps.      (line 144)
* 正規表現の`\':                Syntax of Regexps.      (line 144)
* `|'、正規表現:                Syntax of Regexps.      (line 160)
* 正規表現の`|':                Syntax of Regexps.      (line 160)
* `('、正規表現:                Syntax of Regexps.      (line 175)
* `)'、正規表現:                Syntax of Regexps.      (line 175)
* 正規表現の`(':                Syntax of Regexps.      (line 175)
* 正規表現の`)':                Syntax of Regexps.      (line 175)
* `$'、画面表示:                Truncation.             (line   5)
* `\'、画面表示:                Truncation.             (line   5)
* 画面表示の`$':                Truncation.             (line   5)
* 画面表示の`\':                Truncation.             (line   5)
* `*'、対話指定:                Using Interactive.      (line  78)
* `@'、対話指定:                Using Interactive.      (line  81)
* コマンドの記述:               A Sample Function Description.  (line   5)
* 記述、コマンド:               A Sample Function Description.  (line   5)
* アドバイス断片:               Advising Functions.     (line  10)
* 引数を束縛する:               Argument List.          (line   5)
* 非同期プロセス:               Asynchronous Processes.  (line   5)
* 詰め込み、自動:               Auto Filling.           (line   5)
* バックトラック:               Backtracking.           (line   6)
* 端末スクリーン:               Basic Windows.          (line  66)
* 釣り合った括弧:               Blinking.               (line   5)
* ブールベクトル:               Bool-Vectors.           (line   5)
* バッファの内部:               Buffer Internals.       (line   5)
* 内部、バッファ:               Buffer Internals.       (line   5)
* バッファの変更:               Buffer Modification.    (line   5)
* リストのコピー:               Building Lists.         (line  55)
* カテゴリ、文字:               Categories.             (line   5)
* 文字のカテゴリ:               Categories.             (line   5)
* ファイルの改名:               Changing Files.         (line   5)
* ファイルの削除:               Changing Files.         (line   5)
* 入力構文、文字:               Character Type.         (line  22)
* 表示表現、文字:               Character Type.         (line  22)
* 文字の入力構文:               Character Type.         (line  22)
* 文字の表示表現:               Character Type.         (line  22)
* バックスペース:               Character Type.         (line  41)
* 専用ウィンドウ:               Choosing Window.        (line 155)
* エラーの後始末:               Cleanups.               (line  12)
* 後始末フォーム:               Cleanups.               (line  12)
* キー、予約済み:               Coding Conventions.     (line  85)
* 文字コード変換:               Coding System Basics.   (line   6)
* コラムを数える:               Columns.                (line   5)
* 複雑なコマンド:               Command History.        (line   5)
* 履歴、コマンド:               Command History.        (line   5)
* コマンド行引数:               Command Line Arguments.  (line   5)
* コマンドループ:               Command Loop.           (line   5)
* 現在のコマンド:               Command Loop Info.      (line  27)
* コンパイル関数:               Compilation Functions.  (line   5)
* 評価、条件付き:               Conditionals.           (line   5)
* リストの図表示:               Cons Cell Type.         (line  44)
* リストの箱表示:               Cons Cell Type.         (line  44)
* 図表示、リスト:               Cons Cell Type.         (line  44)
* 箱表示、リスト:               Cons Cell Type.         (line  44)
* バッファの作成:               Creating Buffers.       (line   5)
* 作成、バッファ:               Creating Buffers.       (line   5)
* コピー、文字列:               Creating Strings.       (line  87)
* 文字列のコピー:               Creating Strings.       (line  87)
* シンボルを読む:               Creating Symbols.       (line   5)
* バッファを選ぶ:               Current Buffer.         (line   5)
* コマンドの定義:               Defining Commands.      (line   5)
* 定義、コマンド:               Defining Commands.      (line   5)
* 関数を定義する:               Defining Functions.     (line   5)
* メニューの定義:               Defining Menus.         (line   5)
* フレームの削除:               Deleting Frames.        (line   5)
* 削除、フレーム:               Deleting Frames.        (line   5)
* プロセスの削除:               Deleting Processes.     (line   5)
* イベントの表示:               Describing Characters.  (line  19)
* メタ文字の表示:               Describing Characters.  (line  19)
* ディレクトリ名:               Directory Names.        (line   5)
* バッファの表示:               Displaying Buffers.     (line   5)
* エラーシンボル:               Error Symbols.          (line   5)
* インタープリタ:               Evaluation.             (line   5)
* 入力を覗き見る:               Event Input Misc.       (line  12)
* マクロ呼び出し:               Expansion.              (line   5)
* フェイス識別子:               Faces.                  (line  10)
* 日誌用バッファ:               Fancy Diary Display.    (line  11)
* パーミッション:               File Attributes.        (line  13)
* ファイルの属性:               File Attributes.        (line  13)
* ファイルロック:               File Locks.             (line   5)
* 詰め込み、段落:               Filling.                (line  33)
* 段落の詰め込み:               Filling.                (line  33)
* フロー制御文字:               Flow Control.           (line   5)
* 疎なキーマップ:               Format of Keymaps.      (line   5)
* メタ文字の探索:               Format of Keymaps.      (line  51)
* メモリ割り当て:               Garbage Collection.     (line   6)
* グローバル変数:               Global Variables.       (line   5)
* エラーハンドラ:               Handling Errors.        (line   5)
* ノーマルフック:               Hooks.                  (line  12)
* フック、ロード:               Hooks for Loading.      (line   5)
* 水平スクロール:               Horizontal Scrolling.   (line   5)
* エラー、ロード:               How Programs Do Loading.  (line  68)
* 初期化ファイル:               Init File.              (line   5)
* インライン関数:               Inline Functions.       (line   5)
* 入力フォーカス:               Input Focus.            (line   5)
* 入力ストリーム:               Input Streams.          (line   5)
* プロセスの入力:               Input to Processes.     (line   5)
* 入力、プロセス:               Input to Processes.     (line   5)
* テキストの挿入:               Insertion.              (line   5)
* 挿入、テキスト:               Insertion.              (line   5)
* 対話的呼び出し:               Interactive Call.       (line   5)
* 補完、対話指定:               Interactive Codes.      (line  11)
* リージョン引数:               Interactive Codes.      (line 161)
* 実行時スタック:               Internals of Debugger.  (line  19)
* 大文字のキー列:               Key Sequence Input.     (line  46)
* キーのバインド:               Keymap Terminology.     (line   5)
* バッファの削除:               Killing Buffers.        (line   5)
* 削除、バッファ:               Killing Buffers.        (line   5)
* ヘッダコメント:               Library Headers.        (line   5)
* 要素（リスト）:               Lists.                  (line   5)
* 箱表示、リスト:               Lists as Boxes.         (line   5)
* グローバル束縛:               Local Variables.        (line   5)
* 変数、ローカル:               Local Variables.        (line   5)
* 変数制限エラー:               Local Variables.        (line 101)
* アンドゥのオフ:               Maintaining Undo.       (line  29)
* モードの関数群:               Major Mode Conventions.  (line  42)
* 関数群、モード:               Major Mode Conventions.  (line  42)
* モードの略語表:               Major Mode Conventions.  (line  89)
* 略語表、モード:               Major Mode Conventions.  (line  89)
* モードのロード:               Major Mode Conventions.  (line 172)
* ロード、モード:               Major Mode Conventions.  (line 172)
* メジャーモード:               Major Modes.            (line   5)
* マーカの挿入型:               Marker Insertion Types.  (line   6)
* 引数の読み取り:               Minibuffers.            (line   5)
* モード行の書式:               Mode Line Format.       (line   5)
* 更新時刻の比較:               Modification Time.      (line   5)
* 比較、更新時刻:               Modification Time.      (line   5)
* 廃れたバッファ:               Modification Time.      (line  50)
* 機能を提供する:               Named Features.         (line   5)
* 機能を要求する:               Named Features.         (line   5)
* 非ローカル脱出:               Nonlocal Exits.         (line   5)
* プロセスの出力:               Output from Processes.  (line   5)
* 出力、プロセス:               Output from Processes.  (line   5)
* 出力ストリーム:               Output Streams.         (line   5)
* エスケープ文字:               Output Variables.       (line  12)
* オーバレイ矢印:               Overlay Arrow.          (line   5)
* マーカの再配置:               Overview of Markers.    (line  18)
* コメントの内側:               Parsing Expressions.    (line  59)
* ポインタの形状:               Pointer Shapes.         (line   5)
* 循環構造の出力:               Printing in Edebug.     (line   6)
* プロセスの内部:               Process Internals.      (line   5)
* 内部、プロセス:               Process Internals.      (line   5)
* プログラム補完:               Programmed Completion.  (line   5)
* ソート、リスト:               Rearrangement.          (line  97)
* リストのソート:               Rearrangement.          (line  97)
* 再帰編集レベル:               Recursive Editing.      (line   5)
* 再帰編集の終了:               Recursive Editing.      (line  30)
* 評価の一時休止:               Recursive Editing.      (line  65)
* 正規表現の探索:               Regexp Search.          (line   5)
* 探索、正規表現:               Regexp Search.          (line   5)
* 絶対ファイル名:               Relative File Names.    (line   5)
* 相対ファイル名:               Relative File Names.    (line   5)
* ベクトルの評価:               Self-Evaluating Forms.  (line   5)
* リテラルの評価:               Self-Evaluating Forms.  (line   5)
* 評価、ベクトル:               Self-Evaluating Forms.  (line   5)
* 評価、リテラル:               Self-Evaluating Forms.  (line   5)
* プロセスの番兵:               Sentinels.              (line   5)
* ベクトルの長さ:               Sequence Functions.     (line  16)
* 長さ、ベクトル:               Sequence Functions.     (line  16)
* リストのメンバ:               Sets And Lists.         (line  18)
* たそがれの時刻:               Sexp Diary Entries.     (line 126)
* パラシャ、毎週:               Sexp Diary Entries.     (line 126)
* シグナルを送る:               Signals to Processes.   (line   5)
* フレームサイズ:               Size and Position.      (line   5)
* ジオメトリ指定:               Size and Position.      (line  74)
* 文字列から数へ:               String Conversion.      (line  57)
* アンドゥの抑制:               Substitution.           (line  14)
* 属性リストセル:               Symbol Components.      (line  35)
* シンボルの評価:               Symbol Forms.           (line   5)
* 評価、シンボル:               Symbol Forms.           (line   5)
* コメントの構文:               Syntax Class Table.     (line 103)
* 行頭、正規表現:               Syntax of Regexps.      (line 127)
* `\`'、正規表現:               Syntax of Regexps.      (line 233)
* 正規表現の`\`':               Syntax of Regexps.      (line 233)
* `\''、正規表現:               Syntax of Regexps.      (line 237)
* 正規表現の`\'':               Syntax of Regexps.      (line 237)
* `\='、正規表現:               Syntax of Regexps.      (line 241)
* 正規表現の`\=':               Syntax of Regexps.      (line 241)
* `\<'、正規表現:               Syntax of Regexps.      (line 260)
* 正規表現の`\<':               Syntax of Regexps.      (line 260)
* `\>'、正規表現:               Syntax of Regexps.      (line 265)
* 正規表現の`\>':               Syntax of Regexps.      (line 265)
* テキストの解析:               Syntax Tables.          (line   5)
* 環境変数の参照:               System Environment.     (line  98)
* 参照、環境変数:               System Environment.     (line  98)
* ファイルの古さ:               Testing Accessibility.  (line  75)
* バッファの内容:               Text.                   (line  20)
* 同値性、文字列:               Text Comparison.        (line   5)
* 文字列の同値性:               Text Comparison.        (line   5)
* 辞書式順の比較:               Text Comparison.        (line  40)
* 比較、辞書式順:               Text Comparison.        (line  40)
* 属性、テキスト:               Text Properties.        (line   5)
* バッファリスト:               The Buffer List.        (line   5)
* フロー制御の例:               Translating Input.      (line  50)
* ファイルの実名:               Truenames.              (line   5)
* 引数プロンプト:               Using Interactive.      (line  56)
* 垂直スクロール:               Vertical Scrolling.     (line   5)
* 可視なフレーム:               Visibility of Frames.   (line   5)
* ファイルを探す:               Visiting Files.         (line   5)
* ウィンドウ構成:               Window Configurations.  (line   5)
* カットバッファ:               Window System Selections.  (line  43)
* 基本関数の内部:               Writing Emacs Primitives.  (line   5)
* `;'、コメント内:              Comments.               (line   5)
* `(...)'、リスト:              Cons Cell Type.         (line  76)
* `\'、シンボル内:              Symbol Type.            (line  18)
* 活性なキーマップ:             Active Keymaps.         (line   5)
* アドバイス、関数:             Advising Functions.     (line   5)
* マクロ引数の評価:             Argument Evaluation.    (line  55)
* 評価、マクロ引数:             Argument Evaluation.    (line  55)
* プロセス、非同期:             Asynchronous Processes.  (line   5)
* 自動ロードエラー:             Autoload.               (line  74)
* 複数のウィンドウ:             Basic Windows.          (line  53)
* スクリーン、端末:             Basic Windows.          (line  66)
* ビットごとの否定:             Bitwise Operations.     (line 196)
* ブレークポイント:             Breakpoints.            (line   6)
* バイトコード関数:             Byte-Code Objects.      (line   5)
* ファンクショナル:             Calling Functions.      (line  79)
* ファイルのコピー:             Changing Files.         (line   5)
* ファイルのリンク:             Changing Files.         (line   5)
* 再バインディング:             Changing Key Bindings.  (line   5)
* メタ文字キー定数:             Changing Key Bindings.  (line  16)
* コントロール文字:             Character Type.         (line  59)
* 疑問符、文字定数:             Character Type.         (line 122)
* 文字定数、疑問符:             Character Type.         (line 122)
* 次元（文字集合）:             Chars and Bytes.        (line   6)
* 文字テーブルの親:             Char-Tables.            (line  21)
* クリックイベント:             Click Events.           (line   5)
* カバレッジテスト:             Coverage Testing.       (line   6)
* キーマップの作成:             Creating Keymaps.       (line   5)
* シンボルの同値性:             Creating Symbols.       (line  32)
* 同値性、シンボル:             Creating Symbols.       (line  32)
* カレントバッファ:             Current Buffer.         (line   5)
* 順序、ウィンドウ:             Cyclic Window Ordering.  (line   5)
* アドバイス、定義:             Defining Advice.        (line   5)
* 定義、アドバイス:             Defining Advice.        (line   5)
* アドバイス、事後:             Defining Advice.        (line  21)
* アドバイス、事前:             Defining Advice.        (line  21)
* アドバイス、包囲:             Defining Advice.        (line  21)
* アドバイスクラス:             Defining Advice.        (line  21)
* ウィンドウの削除:             Deleting Windows.       (line   5)
* 直前の文字を削除:             Deletion.               (line  44)
* 説明文字列を書く:             Documentation Basics.   (line   5)
* ドラッグイベント:             Drag Events.            (line   5)
* 関数の動的ロード:             Dynamic Loading.        (line   6)
* エラーのデバッグ:             Error Debugging.        (line   5)
* デバッグ、エラー:             Error Debugging.        (line   5)
* 構文テーブルの例:             Example Major Modes.    (line  60)
* 例、構文テーブル:             Example Major Modes.    (line  60)
* エクスカージョン:             Excursions.             (line   5)
* テキストの符号化:             Explicit Encoding.      (line   5)
* テキストの復号化:             Explicit Encoding.      (line   5)
* 日誌項目のソート:             Fancy Diary Display.    (line  27)
* ロック、ファイル:             File Locks.             (line   5)
* 補完、ファイル名:             File Name Completion.   (line   5)
* 詰め込み、明示的:             Filling.                (line   5)
* プロセスフィルタ:             Filter Functions.       (line   5)
* ファイル書式変換:             Format Conversion.      (line   6)
* キーマップの形式:             Format of Keymaps.      (line   5)
* 完全なキーマップ:             Format of Keymaps.      (line   5)
* 書式付け、文字列:             Formatting Strings.     (line   5)
* 文字列の書式付け:             Formatting Strings.     (line   5)
* 関数の説明文字列:             Function Documentation.  (line   5)
* 説明文字列、関数:             Function Documentation.  (line   5)
* 変数、グローバル:             Global Variables.       (line   5)
* エラーを処理する:             Handling Errors.        (line   5)
* 中断、無限ループ:             Infinite Loops.         (line   5)
* 停止、無限ループ:             Infinite Loops.         (line   5)
* 無限ループの中断:             Infinite Loops.         (line   5)
* 無限ループの停止:             Infinite Loops.         (line   5)
* キーマップの継承:             Inheritance and Keymaps.  (line   5)
* 継承、キーマップ:             Inheritance and Keymaps.  (line   5)
* 対話コード記述子:             Interactive Codes.      (line   5)
* 評価済みの式引数:             Interactive Codes.      (line 191)
* 呼び出しスタック:             Internals of Debugger.  (line  19)
* 不可視なテキスト:             Invisible Text.         (line   6)
* キーマップの項目:             Key Lookup.             (line   5)
* キーボードマクロ:             Keyboard Macros.        (line   5)
* キー、説明文字列:             Keys in Documentation.  (line   5)
* リスト単位の移動:             List Motion.            (line   5)
* 移動、リスト単位:             List Motion.            (line   5)
* ローカル変数束縛:             Local Variables.        (line   5)
* メニューの定義例:             Menu Example.           (line   5)
* 制限（バッファ）:             Narrowing.              (line   5)
* ネットワーク接続:             Network.                (line   5)
* マルチバイト文字:             Non-ASCII Characters.   (line   5)
* 数としてのマーカ:             Overview of Markers.    (line  31)
* 括弧による字下げ:             Parsing Expressions.    (line  71)
* 結果表示の表記法:             Printing Notation.      (line   5)
* 表記法、結果表示:             Printing Notation.      (line   5)
* リストを接続する:             Rearrangement.          (line  16)
* リストを連結する:             Rearrangement.          (line  16)
* ドリブルファイル:             Recording Input.        (line  17)
* ミニバッファ入力:             Recursive Editing.      (line  24)
* 繰り返しイベント:             Repeat Events.          (line   5)
* ロードの繰り返し:             Repeated Loading.       (line   5)
* 変換せずに丸める:             Rounding Operations.    (line   5)
* ウィンドウの選択:             Selecting Windows.      (line   5)
* ウィンドウを探す:             Selecting Windows.      (line  37)
* シーケンスの長さ:             Sequence Functions.     (line  16)
* 長さ、シーケンス:             Sequence Functions.     (line  16)
* シーケンスの要素:             Sequence Functions.     (line  34)
* 要素、シーケンス:             Sequence Functions.     (line  34)
* 月始めの特別礼拝:             Sexp Diary Entries.     (line 126)
* プロセスシグナル:             Signals to Processes.   (line   5)
* サイズ、フレーム:             Size and Position.      (line   5)
* スクリーンサイズ:             Size and Position.      (line   5)
* ウィンドウサイズ:             Size of Window.         (line   5)
* 文字群の飛び越し:             Skipping Characters.    (line   5)
* ソート、テキスト:             Sorting.                (line   5)
* テキストのソート:             Sorting.                (line   5)
* キーマップ、文字:             Special Properties.     (line  39)
* 文字のキーマップ:             Special Properties.     (line  39)
* 読み出し専用文字:             Special Properties.     (line  53)
* ウィンドウの分割:             Splitting Windows.      (line   5)
* 分割、ウィンドウ:             Splitting Windows.      (line   5)
* 標準的な正規表現:             Standard Regexps.       (line   5)
* 文字から文字列へ:             String Conversion.      (line  19)
* 文字列から文字へ:             String Conversion.      (line  25)
* 整数から文字列へ:             String Conversion.      (line  42)
* プログラムの実行:             Subprocess Creation.    (line  15)
* プログラムの引数:             Subprocess Creation.    (line  32)
* 引数、プログラム:             Subprocess Creation.    (line  32)
* 同期サブプロセス:             Synchronous Processes.  (line   5)
* 正規表現の選択肢:             Syntax of Regexps.      (line 160)
* 端末固有の初期化:             Terminal-Specific.      (line   5)
* ファイル更新時刻:             Testing Accessibility.  (line  75)
* トレースバッファ:             Trace Buffer.           (line   5)
* 実名（ファイル）:             Truenames.              (line   5)
* 引数評価フォーム:             Using Interactive.      (line  34)
* コピー、ベクトル:             Vector Functions.       (line  33)
* ベクトルのコピー:             Vector Functions.       (line  33)
* スクロール、垂直:             Vertical Scrolling.     (line   5)
* フレームの可視性:             Visibility of Frames.   (line   5)
* 不可視なフレーム:             Visibility of Frames.   (line   5)
* ウィンドウの内部:             Window Internals.       (line   5)
* 内部、ウィンドウ:             Window Internals.       (line   5)
* ウィンドウ内位置:             Window Point.           (line   5)
* ` （リストの置換）:           Backquote.              (line   5)
* リスト内の`(...)':            Cons Cell Type.         (line  76)
* `''によるクォート:            Quoting.                (line  14)
* `?'、ミニバッファ:            Text from Minibuffer.   (line 167)
* ミニバッファ、`?':            Text from Minibuffer.   (line 167)
* オプションの記述例:           A Sample Variable Description.  (line   5)
* 記述例、オプション:           A Sample Variable Description.  (line   5)
* アドバイスの活性化:           Activation of Advice.   (line   5)
* 活性化、アドバイス:           Activation of Advice.   (line   5)
* 活性な表示テーブル:           Active Display Table.   (line   5)
* ローカルキーマップ:           Active Keymaps.         (line   5)
* 関数をクォートする:           Anonymous Functions.    (line  82)
* 連想リストのコピー:           Association Lists.      (line 165)
* エラー、自動ロード:           Autoload.               (line  74)
* タイル型ウィンドウ:           Basic Windows.          (line  66)
* ビットごとの論理積:           Bitwise Operations.     (line 126)
* ビットごとの論理和:           Bitwise Operations.     (line 160)
* バッファファイル名:           Buffer File Name.       (line   5)
* ウィンドウを調べる:           Buffers and Windows.    (line   5)
* コンパイル済み関数:           Byte-Code Objects.      (line   5)
* 保護されたフォーム:           Cleanups.               (line  12)
* コンパイル、マクロ:           Compilation Functions.  (line  16)
* マクロのコンパイル:           Compilation Functions.  (line  16)
* リストとコンスセル:           Cons Cells.             (line   5)
* 切り替え、バッファ:           Current Buffer.         (line   5)
* クラス、アドバイス:           Defining Advice.        (line  21)
* 関数、対話的にする:           Defining Commands.      (line   5)
* ユーザーオプション:           Defining Variables.     (line 125)
* シンボルを定義する:           Definitions.            (line   5)
* バッファの切り替え:           Displaying Buffers.     (line   5)
* アドバイスの無効化:           Enabling Advice.        (line   5)
* アドバイスの有効化:           Enabling Advice.        (line   5)
* ユーザー定義エラー:           Error Symbols.          (line   5)
* バッファ内容の評価:           Eval.                   (line  62)
* 評価、バッファ内容:           Eval.                   (line  62)
* 評価リストグループ:           Eval List.              (line  45)
* 前置引数の読み戻し:           Event Input Misc.       (line  20)
* フォーカスイベント:           Focus Events.           (line   5)
* ウィンドウフレーム:           Frames.                 (line  15)
* 関数フォームの評価:           Function Forms.         (line   5)
* 評価、関数フォーム:           Function Forms.         (line   5)
* シンボルの関数間接:           Function Indirection.   (line   5)
* 関数間接、シンボル:           Function Indirection.   (line   5)
* ファンクションキー:           Function Keys.          (line   6)
* イベントによる停止:           Global Break Condition.  (line   6)
* アブノーマルフック:           Hooks.                  (line  31)
* 関数入力ストリーム:           Input Streams.          (line  28)
* コマンド履歴の記録:           Interactive Call.       (line  39)
* 前置引数付きの実行:           Interactive Call.       (line  71)
* 読み取り、対話引数:           Interactive Codes.      (line  39)
* 文字列、キーマップ:           Key Lookup.             (line  49)
* リスト、キーマップ:           Key Lookup.             (line  60)
* キーバインディング:           Keymap Terminology.     (line   5)
* 説明文字列内のキー:           Keys in Documentation.  (line   5)
* コンスセルの箱表示:           Lists as Boxes.         (line   5)
* 箱表示によるリスト:           Lists as Boxes.         (line   5)
* マジックファイル名:           Magic File Names.       (line   5)
* キーマップ、モード:           Major Mode Conventions.  (line  48)
* モードのキーマップ:           Major Mode Conventions.  (line  48)
* メニューキーマップ:           Menu Keymaps.           (line   5)
* ミニバッファの履歴:           Minibuffer History.     (line   5)
* マイナモードの慣習:           Minor Mode Conventions.  (line   5)
* 破壊的なリスト操作:           Modifying Lists.        (line   5)
* モーションイベント:           Motion Events.          (line   5)
* ディスプレイ、複数:           Multiple Displays.      (line   5)
* オブジェクトの内部:           Object Internals.       (line   5)
* クォート文字、表示:           Output Functions.       (line   9)
* ストリーム（表示）:           Output Streams.         (line   5)
* 関数出力ストリーム:           Output Streams.         (line  24)
* まえの完全な部分式:           Parsing Expressions.    (line  51)
* 位置（バッファ内）:           Positions.              (line   5)
* プレフィックスキー:           Prefix Keys.            (line   5)
* スペシャルフォーム:           Primitive Function Type.  (line   5)
* フレームを奥に置く:           Raising and Lowering.   (line  13)
* リストの順序の変更:           Rearrangement.          (line   5)
* リストを逆順にする:           Rearrangement.          (line  63)
* 順序を保ったソート:           Rearrangement.          (line  97)
* 再帰コマンドループ:           Recursive Editing.      (line   5)
* テキスト属性の保存:           Saving Properties.      (line   5)
* 保存、テキスト属性:           Saving Properties.      (line   5)
* 探索と大文字小文字:           Searching and Case.     (line   5)
* 自己評価型フォーム:           Self-Evaluating Forms.  (line   5)
* コピー、シーケンス:           Sequence Functions.     (line  55)
* シーケンスのコピー:           Sequence Functions.     (line  55)
* 集合としてのリスト:           Sets And Lists.         (line   5)
* サイズ、スクリーン:           Size and Position.      (line   5)
* フレームのリサイズ:           Size and Position.      (line   5)
* リサイズ、フレーム:           Size and Position.      (line   5)
* サイズ、ウィンドウ:           Size of Window.         (line   5)
* 大きさ、ウィンドウ:           Size of Window.         (line   5)
* テキスト属性の継承:           Sticky Properties.      (line   5)
* 文字と文字列の変換:           String Conversion.      (line   5)
* 変換、文字と文字列:           String Conversion.      (line   5)
* シンボルの構成要素:           Symbol Components.      (line   5)
* サブプロセス、同期:           Synchronous Processes.  (line   5)
* 二重引用符、文字列:           Syntax for Strings.     (line   6)
* 文字列の二重引用符:           Syntax for Strings.     (line   6)
* 正規表現による行頭:           Syntax of Regexps.      (line 127)
* 構文テーブルの内部:           Syntax Table Internals.  (line   5)
* リージョン内の行数:           Text Lines.             (line  67)
* ユニバイトテキスト:           Text Representations.   (line  13)
* トレイリングコード:           Text Representations.   (line  18)
* リーディングコード:           Text Representations.   (line  18)
* 入力イベントの変換:           Translating Input.      (line   5)
* ファイルを訪問する:           Visiting Files.         (line   5)
* 位置、ウィンドウ内:           Window Point.           (line   5)
* ウィンドウの先頭行:           Window Start.           (line  14)
* , （バッククォート）:         Backquote.              (line  20)
* アドバイスの不活性化:         Activation of Advice.   (line  32)
* 不活性化、アドバイス:         Activation of Advice.   (line  32)
* アドバイスの再活性化:         Activation of Advice.   (line  54)
* グローバルキーマップ:         Active Keymaps.         (line   5)
* バックアップファイル:         Backup Files.           (line   5)
* バッファのファイル名:         Buffer File Name.       (line   5)
* ファイル名、バッファ:         Buffer File Name.       (line   5)
* 訪問しているファイル:         Buffer File Name.       (line   5)
* 変更フラグ、バッファ:         Buffer Modification.    (line   5)
* 複数の名前のファイル:         Changing Files.         (line  22)
* エスケープシーケンス:         Character Type.         (line  55)
* リストフォームの評価:         Classifying Lists.      (line   5)
* 評価、リストフォーム:         Classifying Lists.      (line   5)
* コーディングシステム:         Coding Systems.         (line   6)
* プログラムを計時する:         Compilation Tips.       (line   9)
* ディレクトリ向け関数:         Contents of Directories.  (line   5)
* 恒久的なローカル変数:         Creating Buffer-Local.  (line 148)
* ウィンドウの巡回順序:         Cyclic Window Ordering.  (line   5)
* 巡回順序、ウィンドウ:         Cyclic Window Ordering.  (line   5)
* デバッガコマンド一覧:         Debugger Commands.      (line   5)
* クロージャは使えない:         Extent.                 (line  31)
* 版番号（ファイル名）:         File Name Components.   (line   5)
* ファイル書式の符号化:         Format Conversion.      (line   6)
* ファイル書式の復号化:         Format Conversion.      (line   6)
* 全面プロンプト文字列:         Format of Keymaps.      (line  49)
* デバッグ、特定の関数:         Function Debugging.     (line   5)
* 特定の関数のデバッグ:         Function Debugging.     (line   5)
* ガベッジコレクション:         Garbage Collection.     (line   5)
* マーカ入力ストリーム:         Input Streams.          (line  18)
* 文字列入力ストリーム:         Input Streams.          (line  24)
* ポイントのまえへ挿入:         Insertion.              (line   6)
* 挿入、ポイントのまえ:         Insertion.              (line   6)
* コマンド名の読み取り:         Interactive Call.       (line  66)
* デフォルト引数文字列:         Interactive Codes.      (line  24)
* 生の前置引数の使い方:         Interactive Codes.      (line 148)
* 数値前置引数の使い方:         Interactive Codes.      (line 153)
* コマンド、キーマップ:         Key Lookup.             (line  43)
* キーマップ内の文字列:         Key Lookup.             (line  49)
* キーマップ内のリスト:         Key Lookup.             (line  60)
* シンボル、キーマップ:         Key Lookup.             (line  83)
* 説明文内のキーの置換:         Keys in Documentation.  (line   5)
* マクロ呼び出しの評価:         Macro Forms.            (line   5)
* 評価、マクロ呼び出し:         Macro Forms.            (line   5)
* モードの構文テーブル:         Major Mode Conventions.  (line  77)
* 構文テーブル、モード:         Major Mode Conventions.  (line  77)
* メジャーモードフック:         Major Mode Conventions.  (line 125)
* エスケープ文字、表示:         Output Functions.       (line   9)
* マーカ出力ストリーム:         Output Streams.         (line  17)
* もっとも内側の括弧式:         Parsing Expressions.    (line  47)
* コメントを飛び越える:         Parsing Expressions.    (line 105)
* マウスポインタの形状:         Pointer Shapes.         (line   5)
* アドバイスの予約活性:         Preactivation.          (line   5)
* 予約活性、アドバイス:         Preactivation.          (line   5)
* 非印字文字、読み取り:         Quoted Character Input.  (line  13)
* フレームを手前に置く:         Raising and Lowering.   (line  13)
* 読み出し専用バッファ:         Read Only Buffers.      (line   5)
* 読み取り、パスワード:         Reading a Password.     (line   5)
* コマンドループ、再帰:         Recursive Editing.      (line   5)
* 置換時の大文字小文字:         Replacing Match.        (line   8)
* ウィンドウのリサイズ:         Resizing Windows.       (line   5)
* バックトラックの阻止:         Specification List.     (line 102)
* 文字選択（正規表現）:         Syntax of Regexps.      (line  73)
* 正規表現のグループ化:         Syntax of Regexps.      (line 175)
* ファイルの参照可能性:         Testing Accessibility.  (line   5)
* 参照可能性、ファイル:         Testing Accessibility.  (line   5)
* マルチバイトテキスト:         Text Representations.   (line  18)
* コーディングスタイル:         Tips.                   (line   5)
* ウィンドウ情報の保存:         Window Configurations.  (line   5)
* 保存、ウィンドウ情報:         Window Configurations.  (line   5)
* ウィンドウのポイント:         Window Point.           (line   5)
* ポイント、ウィンドウ:         Window Point.           (line   5)
* 自動ロードする関数セル:       Autoload.               (line  57)
* キーボードマクロの終了:       Beeping.                (line  14)
* バッファローカルな変数:       Buffer-Local Variables.  (line   5)
* 変数、バッファローカル:       Buffer-Local Variables.  (line   5)
* ボタン押し下げイベント:       Button-Down Events.     (line   5)
* 実行時スタック上のタグ:       Catch and Throw.        (line  61)
* ファイルのモードの設定:       Changing Files.         (line   5)
* ファイルのハードリンク:       Changing Files.         (line  22)
* マウスクリックイベント:       Click Events.           (line   5)
* クリック可能なテキスト:       Clickable Text.         (line   5)
* オプション、コマンド行:       Command Line Arguments.  (line  33)
* コマンド行のオプション:       Command Line Arguments.  (line  33)
* エディタコマンドループ:       Command Loop.           (line   5)
* キルコマンドの繰り返し:       Command Loop Info.      (line  35)
* バッファテキストの比較:       Comparing Text.         (line   5)
* コンパイル、ライブラリ:       Compilation Functions.  (line  93)
* ライブラリのコンパイル:       Compilation Functions.  (line  93)
* バッファの末尾のマーカ:       Creating Markers.       (line  28)
* シンボル名のハッシュ化:       Creating Symbols.       (line  11)
* コントロール文字の表示:       Describing Characters.  (line  19)
* ディレクトリ名の省略形:       Directory Names.        (line  40)
* 省略形、ディレクトリ名:       Directory Names.        (line  40)
* 説明文字列の動的ロード:       Docs and Compilation.   (line   5)
* マウスドラッグイベント:       Drag Events.            (line   5)
* コマンドキー入力を待つ:       Event Input Misc.       (line  47)
* キーボードマクロの終了:       Event Input Misc.       (line  71)
* デバッグ、関数呼び出し:       Function Debugging.     (line   5)
* 関数呼び出しのデバッグ:       Function Debugging.     (line   5)
* グローバルブレーク条件:       Global Break Condition.  (line   6)
* 選択されているフレーム:       Input Focus.            (line   5)
* ストリーム（読み取り）:       Input Streams.          (line   5)
* バッファ入力ストリーム:       Input Streams.          (line  13)
* キーボードマクロの実行:       Interactive Call.       (line  49)
* 文字、対話指定のコード:       Interactive Codes.      (line   5)
* キーマップ内のコマンド:       Key Lookup.             (line  43)
* キーマップ、キーマップ:       Key Lookup.             (line  55)
* キーマップ内のシンボル:       Key Lookup.             (line  83)
* 基本コード（入力文字）:       Keyboard Events.        (line  13)
* 修飾ビット（入力文字）:       Keyboard Events.        (line  13)
* トップレベルのフォーム:       Loading.                (line  15)
* フォーム、トップレベル:       Loading.                (line  15)
* ヘルプ、メジャーモード:       Mode Help.              (line   5)
* メジャーモードの説明文:       Mode Help.              (line   5)
* 説明文、メジャーモード:       Mode Help.              (line   5)
* バッファ出力ストリーム:       Output Streams.         (line  12)
* 属性リストと連想リスト:       Plists and Alists.      (line   6)
* 連想リストと属性リスト:       Plists and Alists.      (line   6)
* ナロイング中のポイント:       Point.                  (line  15)
* プレフィックスコマンド:       Prefix Keys.            (line  93)
* プログラミング向けの型:       Programming Types.      (line   5)
* 型、プログラミング向け:       Programming Types.      (line   5)
* クォートした文字の入力:       Quoted Character Input.  (line   5)
* バッファ、読み出し専用:       Read Only Buffers.      (line   5)
* ダブルクリックイベント:       Repeat Events.          (line   5)
* ウィンドウサイズの変更:       Resizing Windows.       (line   5)
* 変更、ウィンドウサイズ:       Resizing Windows.       (line   5)
* ウィンドウの最小サイズ:       Resizing Windows.       (line  62)
* テキスト文字のカテゴリ:       Special Properties.     (line  11)
* 文字に対する変更フック:       Special Properties.     (line  86)
* 文字変更に対するフック:       Special Properties.     (line  86)
* スティッキテキスト属性:       Sticky Properties.      (line   5)
* サブプロセスの環境変数:       Subprocess Creation.    (line  44)
* 環境変数、サブプロセス:       Subprocess Creation.    (line  44)
* ファイルオープンエラー:       Subroutines of Visiting.  (line  38)
* 新規ファイルメッセージ:       Subroutines of Visiting.  (line  38)
* ダブルクォート、文字列:       Syntax for Strings.     (line   6)
* 文字列のダブルクォート:       Syntax for Strings.     (line   6)
* トランザクションキュー:       Transaction Queues.     (line   5)
* コントロール文字の表示:       Usual Display.          (line  44)
* ポイントを中央に揃える:       Vertical Scrolling.     (line 110)
* アイコンにしたフレーム:       Visibility of Frames.   (line   5)
* ユーザーへの問い合わせ:       Yes-or-No Queries.      (line   5)
* スペシャルフォームの記述:     A Sample Function Description.  (line   5)
* 記述、スペシャルフォーム:     A Sample Function Description.  (line   5)
* モード、訪問したファイル:     Auto Major Mode.        (line  66)
* 訪問したファイルのモード:     Auto Major Mode.        (line  66)
* 選択されているウィンドウ:     Basic Windows.          (line   5)
* ビットごとの排他的論理和:     Bitwise Operations.     (line 178)
* テキスト変更向けのフック:     Change Hooks.           (line   5)
* キーバインディングの変更:     Changing Key Bindings.  (line   5)
* コントロール文字キー定数:     Changing Key Bindings.  (line  16)
* バインディングの置き換え:     Changing Key Bindings.  (line 104)
* 文字テーブルのサブタイプ:     Char-Tables.            (line  13)
* 基底コーディングシステム:     Coding System Basics.   (line  22)
* 変種コーディングシステム:     Coding System Basics.   (line  22)
* マクロのバイトコンパイル:     Compiling Macros.       (line   5)
* レジスタの減数フィールド:     Cons Cell Type.         (line   5)
* レジスタの番地フィールド:     Cons Cell Type.         (line   5)
* 別のバッファへ切り替える:     Current Buffer.         (line   5)
* ミニバッファ用ウィンドウ:     Cyclic Window Ordering.  (line  22)
* メニュープロンプト文字列:     Defining Menus.         (line   5)
* ディレクトリのファイル名:     Directory Names.        (line   5)
* 文字列、説明文字列を書く:     Documentation Basics.   (line   5)
* エラーメッセージの表記法:     Error Messages.         (line   5)
* 表記法、エラーメッセージ:     Error Messages.         (line   5)
* マーカのエクスカージョン:     Excursions.             (line  17)
* ファイル名を展開する関数:     File Name Expansion.    (line   5)
* 文字列からオブジェクトへ:     Input Functions.        (line  21)
* コード、対話指定、記述子:     Interactive Codes.      (line   5)
* 記述子、対話指定のコード:     Interactive Codes.      (line   5)
* キーバインディングの解除:     Key Binding Commands.   (line  39)
* キーマップ内のキーマップ:     Key Lookup.             (line  55)
* プレフィックスキーの禁止:     Key Lookup.             (line 101)
* ライブラリヘッダコメント:     Library Headers.        (line   5)
* パーセント記号、モード行:     Mode Line Data.         (line  29)
* モード行のパーセント記号:     Mode Line Data.         (line  29)
* マウスモーションイベント:     Motion Events.          (line   5)
* 参照可能部分（バッファ）:     Narrowing.              (line   5)
* オブジェクトから文字列へ:     Output Functions.       (line  92)
* カレントバッファ内の位置:     Point.                  (line  29)
* コマンド、プレフィックス:     Prefix Keys.            (line  93)
* トリプルクリックイベント:     Repeat Events.          (line   5)
* テキスト属性、ファイル内:     Saving Properties.      (line   5)
* ファイル内のテキスト属性:     Saving Properties.      (line   5)
* スペシャルフォームの評価:     Special Forms.          (line   5)
* 評価、スペシャルフォーム:     Special Forms.          (line   5)
* テキストのフェイスコード:     Special Properties.     (line  19)
* バックスラッシュ、文字列:     Syntax for Strings.     (line   6)
* 文字列のバックスラッシュ:     Syntax for Strings.     (line   6)
* タームスクリプトファイル:     Terminal Output.        (line  44)
* カレントバッファのマーク:     The Mark.               (line  49)
* カレントスタックフレーム:     Using Debugger.         (line  22)
* ウィンドウの内部ポイント:     Window Internals.       (line  27)
* キルされたテキストの挿入:     Yank Commands.          (line  11)
* メジャーモードのキーマップ:   Active Keymaps.         (line  47)
* ファイルモード指定のエラー:   Auto Major Mode.        (line  39)
* ウィンドウ、正確に制御する:   Buffers and Windows.    (line   5)
* バックスラッシュ、文字定数:   Character Type.         (line 122)
* 文字定数、バックスラッシュ:   Character Type.         (line 122)
* 文字テーブルの追加スロット:   Char-Tables.            (line   5)
* 文字テーブルのデフォルト値:   Char-Tables.            (line  28)
* バイトコードインタープリタ:   Compilation Functions.  (line 116)
* ディレクトリ内のファイル名:   Contents of Directories.  (line   5)
* インターンしてないシンボル:   Creating Symbols.       (line  32)
* プロンプト文字列、メニュー:   Defining Menus.         (line   5)
* バイトコードの逆アセンブル:   Disassembly.            (line   5)
* 逆アセンブル、バイトコード:   Disassembly.            (line   5)
* 有効化と無効化、アドバイス:   Enabling Advice.        (line   5)
* ポイントのエクスカージョン:   Excursions.             (line  17)
* 字下げのためのタブストップ:   Indent Tabs.            (line   5)
* デフォルトの初期化ファイル:   Init File.              (line  16)
* コントロール文字、読み取り:   Quoted Character Input.  (line  13)
* ソース上のブレークポイント:   Source Breakpoints.     (line   6)
* ポイント移動に対するフック:   Special Properties.     (line 109)
* コーディングスタイルの標準:   Tips.                   (line   5)
* ,@ （バッククォートとの組み合わせ）: Backquote.       (line  39)
* バッククォート（リストの置換）: Backquote.            (line   5)
* 繋ぎ合わせ（バッククォートとの組み合わせ）: Backquote.  (line  39)
* 補完におけるオブジェクト配列: Basic Completion.       (line  26)
* バッファ内のテキストの表記法: Buffer Text Notation.   (line   5)
* 表記法、バッファ内のテキスト: Buffer Text Notation.   (line   5)
* バッファ、ウィンドウで制御される: Buffers and Windows.  (line   5)
* バッファ内での大文字小文字変換: Case Changes.         (line   5)
* キャピタライズ（先頭文字だけを大文字にする）: Case Conversion.  (line  52)
* 不正なプレフィックスキーエラー: Changing Key Bindings.  (line  52)
* インタープリタ、バイトコード: Compilation Functions.  (line 116)
* 制御構造向けのスペシャルフォーム: Control Structures.  (line   5)
* バケット（オブジェクト配列）: Creating Symbols.       (line  11)
* ウィンドウのエクスカージョン: Excursions.             (line  30)
* カレントバッファのエクスカージョン: Excursions.       (line  17)
* ファイル名の補完サブルーティン: File Name Completion.  (line   5)
* ディレクトリ部分（ファイル名）: File Name Components.  (line   5)
* 非ディレクトリ部分（ファイル名）: File Name Components.  (line   5)
* キーマップのプロンプト文字列: Format of Keymaps.      (line  49)
* デフォルトのキーバインディング: Format of Keymaps.    (line  22)
* キーマップのバインディングの継承: Inheritance and Keymaps.  (line   5)
* 継承、キーマップのバインディング: Inheritance and Keymaps.  (line   5)
* 自動的にバッファローカルにする: Intro to Buffer-Local.  (line  40)
* シンボリックリンク、ファイル: Kinds of Files.         (line  11)
* ファイルのシンボリックリンク: Kinds of Files.         (line  11)
* バッファローカルな変数、モード: Major Mode Conventions.  (line 111)
* モードのバッファローカルな変数: Major Mode Conventions.  (line 111)
* マイナモードを書くための慣習: Minor Mode Conventions.  (line   5)
* メジャーモードについてのヘルプ: Mode Help.            (line   5)
* テキストファイルとバイナリファイル: MS-DOS File Types.  (line   5)
* バイナリファイルとテキストファイル: MS-DOS File Types.  (line   5)
* 文字のキーマップ（オーバレイ属性）: Overlay Properties.  (line 128)
* マーカのガベッジコレクション: Overview of Markers.    (line  24)
* バックアップファイルの作成方法: Rename or Copy.       (line   5)
* 作成方法、バックアップファイル: Rename or Copy.       (line   5)
* オーメル（過ぎ越しの祝い）の回数: Sexp Diary Entries.  (line 126)
* 編集に用いられる標準的な正規表現: Standard Regexps.   (line   5)
* プログラムを探すディレクトリ: Subprocess Creation.    (line  60)
* バックスラッシュ、シンボル内: Symbol Type.            (line  18)
* オペレーティングシステム環境: System Environment.     (line   5)
* 読み出し専用バッファ、対話指定: Using Interactive.    (line  78)
* ガベッジコレクションを抑制する: Writing Emacs Primitives.  (line  14)
* 1+:                           Arithmetic Operations.  (line  20)
* 1-:                           Arithmetic Operations.  (line  39)
* 整数の10進表記:               String Conversion.      (line  42)
* 整数の16進表記:               Formatting Strings.     (line  67)
* 2の補数:                      Integer Basics.         (line  38)
* 2C-mode-map:                  Prefix Keys.            (line  49)
* 整数の8進表記:                Formatting Strings.     (line  59)
* 8進数字文字定数:              Character Type.         (line 122)
* 8進数字文字入力:              Quoted Character Input.  (line  13)
* 文字定数、8進数字:            Character Type.         (line 122)
* `\a':                         Character Type.         (line  41)
* abbrev-expansion:             Abbrev Expansion.       (line  19)
* abbreviate-file-name:         Directory Names.        (line  67)
* abbrev-prefix-mark:           Abbrev Expansion.       (line  30)
* abbrev-symbol:                Abbrev Expansion.       (line  12)
* abort-recursive-edit:         Recursive Editing.      (line  89)
* abs:                          Comparison of Numbers.  (line  83)
* accept-process-output:        Accepting Output.       (line  13)
* access-file:                  Testing Accessibility.  (line  66)
* accessible-keymaps:           Scanning Keymaps.       (line  11)
* acos:                         Math Functions.         (line  20)
* active-minibuffer-window:     Minibuffer Misc.        (line  55)
* ad-activate:                  Activation of Advice.   (line  28)
* ad-activate-regexp:           Activation of Advice.   (line  42)
* ad-add-advice:                Computed Advice.        (line  12)
* 適応型詰め込み（adaptive-fill）モード: Adaptive Fill.  (line   5)
* add-abbrev:                   Defining Abbrevs.       (line  12)
* ad-deactivate:                Activation of Advice.   (line  31)
* ad-deactivate-all:            Activation of Advice.   (line  34)
* ad-deactivate-regexp:         Activation of Advice.   (line  47)
* ad-define-subr-args:          Subr Arguments.         (line  15)
* add-hook:                     Hooks.                  (line  87)
* ad-disable-advice:            Enabling Advice.        (line  22)
* ad-disable-regexp:            Enabling Advice.        (line  34)
* add-name-to-file:             Changing Files.         (line  22)
* add-text-properties:          Changing Properties.    (line  24)
* add-to-invisibility-spec:     Invisible Text.         (line  56)
* add-to-list:                  Setting Variables.      (line  91)
* ad-enable-advice:             Enabling Advice.        (line  26)
* ad-enable-regexp:             Enabling Advice.        (line  38)
* ad-get-arg:                   Argument Access in Advice.  (line  28)
* ad-get-args:                  Argument Access in Advice.  (line  31)
* ad-set-arg:                   Argument Access in Advice.  (line  34)
* ad-set-args:                  Argument Access in Advice.  (line  37)
* ad-start-advice:              Activation of Advice.   (line  61)
* ad-stop-advice:               Activation of Advice.   (line  66)
* ad-unadvise:                  Defining Advice.        (line 121)
* ad-unadvise-all:              Defining Advice.        (line 124)
* ad-update-all:                Activation of Advice.   (line  37)
* ad-update-regexp:             Activation of Advice.   (line  52)
* 事後アドバイス（after-advice）: Defining Advice.      (line  21)
* after-find-file:              Subroutines of Visiting.  (line  34)
* after-string （オーバレイ属性）: Overlay Properties.  (line 116)
* alist（連想リスト）:          Association Lists.      (line   5)
* 連想リスト（alist）:          Association Lists.      (line   5)
* all-christian-calendar-holidays: Holiday Customizing.  (line  20)
* all-completions:              Basic Completion.       (line  83)
* all-hebrew-calendar-holidays: Holiday Customizing.    (line  20)
* all-islamic-calendar-holidays: Holiday Customizing.   (line  20)
* and:                          Combining Conditions.   (line  17)
* append:                       Building Lists.         (line  55)
* append-to-file:               Writing to Files.       (line  13)
* apply:                        Calling Functions.      (line  55)
* `apply'とデバッグ:            Internals of Debugger.  (line  60)
* appt-audible:                 Appt Customizing.       (line   9)
* appt-delete-window-function:  Appt Customizing.       (line   9)
* appt-display-duration:        Appt Customizing.       (line   9)
* appt-display-mode-line:       Appt Customizing.       (line   9)
* appt-disp-window-function:    Appt Customizing.       (line   9)
* appt-message-warning-time:    Appt Customizing.       (line   9)
* appt-msg-window:              Appt Customizing.       (line   9)
* appt-visible:                 Appt Customizing.       (line   9)
* apropos:                      Help Functions.         (line  13)
* aref:                         Array Functions.        (line  22)
* `arith-error'の例:            Handling Errors.        (line 119)
* `arith-error'、除算:          Arithmetic Operations.  (line  88)
* 除算の`arith-error':          Arithmetic Operations.  (line  88)
* 包囲アドバイス（around-advice）: Defining Advice.     (line  21)
* arrayp:                       Array Functions.        (line  10)
* 非ASCII文字:                  Non-ASCII Characters.   (line   5)
* ASCII文字コード:              Character Type.         (line   5)
* aset:                         Array Functions.        (line  34)
* ash:                          Bitwise Operations.     (line  79)
* asin:                         Math Functions.         (line  15)
* ask-user-about-lock:          File Locks.             (line  43)
* ask-user-about-supersession-threat: Modification Time.  (line  50)
* assoc:                        Association Lists.      (line  55)
* assoc-default:                Association Lists.      (line 148)
* assoc-ignore-case:            Text Comparison.        (line  97)
* assoc-ignore-representation:  Text Comparison.        (line 102)
* assq:                         Association Lists.      (line  95)
* atan:                         Math Functions.         (line  24)
* atom:                         List-related Predicates.  (line  18)
* 改行と自動詰め込み（auto-fill）モード: Commands for Insertion.  (line  39)
* 自動詰め込み（auto-filling）モード: Auto Filling.     (line   5)
* autoload:                     Autoload.               (line  24)
* auto-save-file-name-p:        Auto-Saving.            (line  31)
* auto-save-mode:               Auto-Saving.            (line  23)
* `\b':                         Character Type.         (line  41)
* `\b'、正規表現:               Syntax of Regexps.      (line 246)
* 正規表現の`\b':               Syntax of Regexps.      (line 246)
* `\B'、正規表現:               Syntax of Regexps.      (line 256)
* 正規表現の`\B':               Syntax of Regexps.      (line 256)
* back-to-indentation:          Motion by Indent.       (line  11)
* backtrace:                    Internals of Debugger.  (line  19)
* backtrace-debug:              Internals of Debugger.  (line  67)
* backtrace-frame:              Internals of Debugger.  (line  84)
* backup-buffer:                Making Backups.         (line   8)
* backup-file-name-p:           Backup Names.           (line  12)
* backward-char:                Character Motion.       (line  38)
* backward-delete-char-untabify: Deletion.              (line  56)
* backward-list:                List Motion.            (line  20)
* backward-prefix-chars:        Motion and Syntax.      (line  24)
* backward-sexp:                List Motion.            (line  48)
* backward-to-indentation:      Motion by Indent.       (line  16)
* backward-word:                Word Motion.            (line  24)
* barf-if-buffer-read-only:     Read Only Buffers.      (line  53)
* batch-byte-compile:           Compilation Functions.  (line 106)
* baud-rate:                    Terminal Output.        (line  29)
* beep:                         Beeping.                (line  19)
* 事前アドバイス（before-advice）: Defining Advice.     (line  21)
* before-string （オーバレイ属性）: Overlay Properties.  (line 109)
* beginning-of-buffer:          Buffer End Motion.      (line  20)
* beginning-of-defun:           List Motion.            (line  51)
* beginning-of-line:            Text Lines.             (line  35)
* blink-matching-open:          Blinking.               (line  27)
* bobp:                         Near Point.             (line  57)
* bold （フェイス名）:          Standard Faces.         (line  35)
* bold-italic （フェイス名）:   Standard Faces.         (line  47)
* bolp:                         Near Point.             (line  67)
* bool-vector-p:                Bool-Vectors.           (line  20)
* boundp:                       Void Variables.         (line  66)
* buffer-base-buffer:           Indirect Buffers.       (line  38)
* buffer-disable-undo:          Maintaining Undo.       (line  28)
* buffer-enable-undo:           Maintaining Undo.       (line  17)
* buffer-end:                   Point.                  (line  46)
* buffer-file-name:             Buffer File Name.       (line  17)
* buffer-flush-undo:            Maintaining Undo.       (line  29)
* buffer-list:                  The Buffer List.        (line  24)
* buffer-local-variables:       Creating Buffer-Local.  (line  76)
* Buffer-menu-mode-map:         Standard Keymaps.       (line  16)
* buffer-modified-p:            Buffer Modification.    (line  23)
* buffer-modified-tick:         Buffer Modification.    (line  48)
* buffer-name:                  Buffer Names.           (line  20)
* bufferp:                      Buffer Basics.          (line  42)
* buffer-size:                  Point.                  (line  50)
* buffer-string:                Buffer Contents.        (line  41)
* buffer-substring:             Buffer Contents.        (line  11)
* buffer-substring-no-properties: Buffer Contents.      (line  36)
* bury-buffer:                  The Buffer List.        (line  85)
* byte-code:                    Compilation Functions.  (line 116)
* byte-code-function-p:         What Is a Function.     (line  91)
* byte-compile:                 Compilation Functions.  (line  31)
* byte-compile-file:            Compilation Functions.  (line  67)
* byte-recompile-directory:     Compilation Functions.  (line  93)
* caar:                         List Elements.          (line 109)
* cadr:                         List Elements.          (line 112)
* calendar-date-display-form:   Date Display Format.    (line   5)
* calendar-daylight-savings-ends: Daylight Savings.     (line  17)
* calendar-daylight-savings-ends-time: Daylight Savings.  (line  56)
* calendar-daylight-savings-starts: Daylight Savings.   (line  17)
* calendar-daylight-savings-starts-time: Daylight Savings.  (line  56)
* calendar-daylight-time-offset: Daylight Savings.      (line  53)
* calendar-holiday-marker:      Calendar Customizing.   (line  29)
* calendar-holidays:            Holiday Customizing.    (line   6)
* calendar-load-hook:           Calendar Customizing.   (line  37)
* calendar-mark-today:          Calendar Customizing.   (line  55)
* calendar-star-date:           Calendar Customizing.   (line  50)
* calendar-time-display-form:   Time Display Format.    (line   5)
* calendar-today-marker:        Calendar Customizing.   (line  58)
* call-interactively:           Interactive Call.       (line  33)
* call-process:                 Synchronous Processes.  (line  32)
* call-process-region:          Synchronous Processes.  (line 117)
* cancel-debug-on-entry:        Function Debugging.     (line  59)
* cancel-timer:                 Timers.                 (line 114)
* capitalize:                   Case Conversion.        (line  52)
* capitalize-region:            Case Changes.           (line  14)
* capitalize-word:              Case Changes.           (line  50)
* car:                          List Elements.          (line   8)
* car-safe:                     List Elements.          (line  34)
* case-table-p:                 Case Tables.            (line  60)
* catch:                        Catch and Throw.        (line  61)
* category （テキスト属性）:    Special Properties.     (line  11)
* category （オーバレイ属性）:  Overlay Properties.     (line  34)
* category-docstring:           Categories.             (line  36)
* category-set-mnemonics:       Categories.             (line  88)
* category-table:               Categories.             (line  50)
* category-table-p:             Categories.             (line  53)
* CBREAK:                       Flow Control.           (line  63)
* `C-c':                        Prefix Keys.            (line  25)
* cdar:                         List Elements.          (line 116)
* cddr:                         List Elements.          (line 119)
* cdr:                          List Elements.          (line  21)
* cdr-safe:                     List Elements.          (line  49)
* ceiling:                      Numeric Conversions.    (line  29)
* `C-g':                        Quitting.               (line   5)
* `C-h':                        Prefix Keys.            (line  21)
* 文字クォート（character:      Syntax Class Table.     (line  79)
* char-after:                   Near Point.             (line  12)
* char-before:                  Near Point.             (line  24)
* char-bytes:                   Splitting Characters.   (line  12)
* char-category-set:            Categories.             (line  79)
* char-charset:                 Character Sets.         (line  27)
* char-equal:                   Text Comparison.        (line   8)
* char-or-string-p:             Predicates for Strings.  (line  14)
* charset-dimension:            Chars and Bytes.        (line  16)
* charset-list:                 Character Sets.         (line  24)
* charsetp:                     Character Sets.         (line  20)
* char-syntax:                  Syntax Table Functions.  (line  63)
* char-table-extra-slot:        Char-Tables.            (line  62)
* char-table-p:                 Char-Tables.            (line  42)
* char-table-parent:            Char-Tables.            (line  55)
* char-table-range:             Char-Tables.            (line  72)
* char-table-subtype:           Char-Tables.            (line  46)
* char-to-string:               String Conversion.      (line  19)
* char-valid-p:                 Character Codes.        (line  16)
* char-width:                   Width.                  (line  12)
* check-coding-system:          Lisp and Coding Systems.  (line  18)
* checkdoc-minor-mode:          Documentation Tips.     (line   6)
* christian-holidays:           Holiday Customizing.    (line   6)
* cl:                           Lisp History.           (line  26)
* CLに関した注意−−省略可能引数のデフォルト: Argument List.  (line  44)
* CLに関した注意−−オブジェクト配列内のシンボル: Creating Symbols.  (line  56)
* CLに関した注意−−既存シンボルのインターン: Creating Symbols.  (line 101)
* CLに関した注意−−メモリ領域の追加: Garbage Collection.  (line  42)
* CLに関した注意−−継続可能なエラーはない: Signaling Errors.  (line  63)
* CLに関した注意−−スペシャルフォームの比較: Special Forms.  (line  96)
* CLに関した注意−−大文字小文字の区別: Symbol Type.    (line  31)
* CLに関した注意−−スペシャル変数: Variable Scoping.   (line  23)
* clear-abbrev-table:           Abbrev Tables.          (line  14)
* clear-visited-file-modtime:   Modification Time.      (line  24)
* cl.el （edebug）:             Instrumenting.          (line  36)
* CLに関した注意−−Emacsでは`throw'のみ: Catch and Throw.  (line  55)
* CLに関した注意−−整数と`eq': Comparison of Numbers.  (line  35)
* 閉じ括弧文字（close:          Syntax Class Table.     (line  38)
* CLに関した注意−−`rplaca'と`setcar': Modifying Lists.  (line  10)
* CLに関した注意−−`set'はローカル: Setting Variables.  (line  81)
* cl-specs.el:                  Instrumenting.          (line  36)
* CLに関した注意−−`union'と`intersection'の欠落: Sets And Lists.  (line  12)
* c-mode-map:                   Standard Keymaps.       (line  20)
* C-M-x:                        Instrumenting.          (line  10)
* coding-system-change-eol-conversion: Lisp and Coding Systems.  (line  23)
* coding-system-change-text-conversion: Lisp and Coding Systems.  (line  29)
* coding-system-get:            Coding System Basics.   (line  41)
* coding-system-list:           Lisp and Coding Systems.  (line  10)
* coding-system-p:              Lisp and Coding Systems.  (line  15)
* combine-after-change-calls:   Change Hooks.           (line  33)
* command-execute:              Interactive Call.       (line  49)
* command-history-map:          Standard Keymaps.       (line  24)
* command-line:                 Command Line Arguments.  (line  21)
* commandp:                     Interactive Call.       (line  14)
* `commandp'の例:               High-Level Completion.  (line  79)
* 例、`commandp':               High-Level Completion.  (line  79)
* コメント開始（comment:        Syntax Class Table.     (line 102)
* コメント終了（comment:        Syntax Class Table.     (line 103)
* Common Lisp:                  Lisp History.           (line  10)
* Common Lisp（edebug）:        Instrumenting.          (line  36)
* compare-buffer-substrings:    Comparing Text.         (line  11)
* compare-strings:              Text Comparison.        (line  81)
* compare-window-configurations: Window Configurations.  (line  79)
* compile-defun:                Compilation Functions.  (line  62)
* completing-read:              Minibuffer Completion.  (line  11)
* compute-motion:               Screen Lines.           (line  66)
* concat:                       Creating Strings.       (line  87)
* cond:                         Conditionals.           (line  55)
* condition-case:               Handling Errors.        (line  69)
* cons:                         Building Lists.         (line  12)
* consp:                        List-related Predicates.  (line  13)
* continue-process:             Signals to Processes.   (line  77)
* Control-X-prefix:             Prefix Keys.            (line  32)
* convert-standard-filename:    Standard File Names.    (line  22)
* coordinates-in-window-p:      Coordinates and Windows.  (line  17)
* copy-alist:                   Association Lists.      (line 165)
* copy-category-table:          Categories.             (line  60)
* copy-face:                    Face Functions.         (line  21)
* copy-file:                    Changing Files.         (line  73)
* copy-keymap:                  Creating Keymaps.       (line  32)
* copy-marker:                  Creating Markers.       (line  48)
* copy-region-as-kill:          Kill Functions.         (line  33)
* copy-sequence:                Sequence Functions.     (line  55)
* copy-syntax-table:            Syntax Table Functions.  (line  17)
* cos:                          Math Functions.         (line  11)
* `#@COUNT':                    Docs and Compilation.   (line  47)
* count-lines:                  Text Lines.             (line  67)
* count-loop:                   A Sample Function Description.  (line  61)
* `C-q':                        Flow Control.           (line  15)
* create-file-buffer:           Subroutines of Visiting.  (line  12)
* create-fontset-from-fontset-spec: Fontsets.           (line  16)
* `C-s':                        Flow Control.           (line  15)
* ctl-x-4-map:                  Prefix Keys.            (line  41)
* ctl-x-5-map:                  Prefix Keys.            (line  45)
* ctl-x-map:                    Prefix Keys.            (line  32)
* current-buffer:               Current Buffer.         (line  87)
* current-case-table:           Case Tables.            (line  71)
* current-column:               Columns.                (line  22)
* current-fill-column:          Margins.                (line  50)
* current-frame-configuration:  Frame Configurations.   (line  12)
* current-global-map:           Active Keymaps.         (line  80)
* current-indentation:          Primitive Indent.       (line  12)
* current-input-mode:           Input Modes.            (line  37)
* current-justification:        Filling.                (line 114)
* current-kill:                 Low-Level Kill Ring.    (line  13)
* current-left-margin:          Margins.                (line  45)
* current-local-map:            Active Keymaps.         (line  88)
* current-message:              The Echo Area.          (line  69)
* current-minor-mode-maps:      Active Keymaps.         (line 104)
* current-time:                 Time of Day.            (line  26)
* current-time-string:          Time of Day.            (line  10)
* current-time-zone:            Time of Day.            (line  39)
* current-window-configuration: Window Configurations.  (line  17)
* cust-print:                   Printing in Edebug.     (line   6)
* `C-x':                        Prefix Keys.            (line  32)
* `C-x 4':                      Prefix Keys.            (line  41)
* `C-x 5':                      Prefix Keys.            (line  45)
* `C-x 6':                      Prefix Keys.            (line  49)
* `C-x RET':                    Prefix Keys.            (line  37)
* `C-x v':                      Prefix Keys.            (line  53)
* deactivate-mark:              The Mark.               (line 135)
* debug:                        Invoking the Debugger.  (line  10)
* debugger-mode-map:            Standard Keymaps.       (line  40)
* debug-on-entry:               Function Debugging.     (line  14)
* `debug-on-error'の利用:       Processing of Errors.   (line  20)
* decode-coding-region:         Explicit Encoding.      (line  51)
* decode-coding-string:         Explicit Encoding.      (line  57)
* decode-time:                  Time Conversion.        (line 108)
* 深い束縛（ディープバインディング、deep binding）: Impl of Scope.  (line   5)
* defadvice:                    Defining Advice.        (line  10)
* defalias:                     Defining Functions.     (line  59)
* default （フェイス名）:       Standard Faces.         (line  10)
* default-boundp:               Default Value.          (line  27)
* `default.el':                 Start-up Summary.       (line  47)
* default-file-modes:           Changing Files.         (line 123)
* default-value:                Default Value.          (line  21)
* defconst:                     Defining Variables.     (line 101)
* defcustom:                    Variable Definitions.   (line  10)
* def-edebug-spec:              Instrumenting Macro Calls.  (line  18)
* defface:                      Defining Faces.         (line  13)
* defgroup:                     Group Definitions.      (line  23)
* &define （edebug）:           Specification List.     (line  90)
* define-abbrev:                Defining Abbrevs.       (line  21)
* define-abbrev-table:          Abbrev Tables.          (line  18)
* define-category:              Categories.             (line  29)
* define-derived-mode:          Derived Modes.          (line  11)
* define-key:                   Changing Key Bindings.  (line  43)
* define-key-after:             Modifying Menus.        (line  14)
* define-logical-name:          Changing Files.         (line 103)
* define-prefix-command:        Prefix Keys.            (line  93)
* defmacro:                     Defining Macros.        (line  17)
* defsubst:                     Inline Functions.       (line   6)
* defun:                        Defining Functions.     (line  11)
* defvar:                       Defining Variables.     (line  28)
* delete:                       Sets And Lists.         (line  89)
* delete-auto-save-file-if-necessary: Auto-Saving.      (line 138)
* delete-backward-char:         Deletion.               (line  44)
* delete-blank-lines:           User-Level Deletion.    (line  98)
* delete-char:                  Deletion.               (line  32)
* delete-directory:             Create/Delete Dirs.     (line  16)
* delete-file:                  Changing Files.         (line  85)
* delete-frame:                 Deleting Frames.        (line  14)
* `delete-frame'イベント:       Misc Events.            (line   8)
* イベント`delete-frame':       Misc Events.            (line   8)
* delete-horizontal-space:      User-Level Deletion.    (line  11)
* delete-indentation:           User-Level Deletion.    (line  35)
* delete-other-windows:         Deleting Windows.       (line  31)
* delete-overlay:               Managing Overlays.      (line  31)
* delete-process:               Deleting Processes.     (line  24)
* delete-region:                Deletion.               (line  26)
* delete-to-left-margin:        Margins.                (line  64)
* delete-window:                Deleting Windows.       (line  26)
* delete-windows-on:            Deleting Windows.       (line  38)
* delq:                         Sets And Lists.         (line  29)
* describe-bindings:            Scanning Keymaps.       (line  97)
* describe-buffer-case-table:   Case Tables.            (line  91)
* describe-mode:                Mode Help.              (line  13)
* describe-prefix-bindings:     Help Functions.         (line  95)
* detect-coding-region:         Lisp and Coding Systems.  (line  53)
* detect-coding-string:         Lisp and Coding Systems.  (line  66)
* diary-anniversary:            Sexp Diary Entries.     (line  12)
* diary-astro-day-number:       Sexp Diary Entries.     (line  93)
* diary-cyclic:                 Sexp Diary Entries.     (line  29)
* diary-date:                   Sexp Diary Entries.     (line  46)
* diary-date-forms:             Diary Customizing.      (line  29)
* diary-day-of-year:            Sexp Diary Entries.     (line  93)
* diary-display-hook:           Fancy Diary Display.    (line   5)
* diary-entry-marker:           Calendar Customizing.   (line  29)
* diary-float:                  Sexp Diary Entries.     (line  57)
* diary-french-date:            Sexp Diary Entries.     (line  93)
* diary-hebrew-date:            Sexp Diary Entries.     (line  93)
* diary-islamic-date:           Sexp Diary Entries.     (line  93)
* diary-iso-date:               Sexp Diary Entries.     (line  93)
* diary-julian-date:            Sexp Diary Entries.     (line  93)
* diary-list-include-blanks:    Fancy Diary Display.    (line  23)
* diary-mayan-date:             Sexp Diary Entries.     (line  93)
* diary-omer:                   Sexp Diary Entries.     (line 126)
* diary-parasha:                Sexp Diary Entries.     (line 126)
* diary-phases-of-moon:         Sexp Diary Entries.     (line  93)
* diary-remind:                 Sexp Diary Entries.     (line  41)
* diary-rosh-hodesh:            Sexp Diary Entries.     (line 126)
* diary-sabbath-candles:        Sexp Diary Entries.     (line 126)
* diary-sunrise-sunset:         Sexp Diary Entries.     (line  93)
* diary-yahrzeit:               Sexp Diary Entries.     (line 126)
* digit-argument:               Prefix Command Arguments.  (line 100)
* ding:                         Beeping.                (line  14)
* directory-file-name:          Directory Names.        (line  33)
* directory-files:              Contents of Directories.  (line  15)
* dired-mode-map:               Standard Keymaps.       (line  44)
* disable-command:              Disabling Commands.     (line  37)
* disabled:                     Disabling Commands.     (line  11)
* disassemble:                  Disassembly.            (line  20)
* discard-input:                Event Input Misc.       (line  71)
* display-buffer:               Choosing Window.        (line  13)
* display-completion-list:      Completion Commands.    (line  89)
* display-table-slot:           Display Table Format.   (line  57)
* do-auto-save:                 Auto-Saving.            (line 126)
* `DOC'（説明文）ファイル:      Documentation Basics.   (line  38)
* documentation:                Accessing Documentation.  (line  20)
* documentation-property:       Accessing Documentation.  (line   8)
* DOSのファイル型:              MS-DOS File Types.      (line   5)
* downcase:                     Case Conversion.        (line  21)
* downcase-region:              Case Changes.           (line  36)
* downcase-word:                Case Changes.           (line  64)
* down-list:                    List Motion.            (line  28)
* `drag-n-drop'イベント:        Misc Events.            (line  45)
* イベント`drag-n-drop':        Misc Events.            (line  45)
* dump-emacs:                   Building Emacs.         (line  85)
* `\e':                         Character Type.         (line  41)
* easy-mmode-define-minor-mode: Easy-Mmode.             (line  11)
* edebug:                       Edebug.                 (line   6)
* edebug:                       Source Breakpoints.     (line   6)
* edebugモード:                 Edebug.                 (line   5)
* 出力（edebug）:               Printing in Edebug.     (line   6)
* [...]（edebug）:              Specification List.     (line 125)
* edebugの実行モード:           Edebug Execution Modes.  (line   6)
* edebug用仕様リスト:           Specification List.     (line   6)
* 構文エラー（edebug）:         Backtracking.           (line   6)
* 無名ラムダ式（edebug）:       Instrumenting.          (line  36)
* ラムダリスト（edebug）:       Specification List.     (line 161)
* ウィンドウ構成（edebug）:     Edebug Display Update.  (line  25)
* 対話的コマンド（edebug）:     Instrumenting.          (line  36)
* ドット対リスト（edebug）:     Specification List.     (line 144)
* キーボードマクロ（edebug）:   Edebug Execution Modes.  (line  69)
* カレントバッファのポイントとマーク（edebug）: Edebug Display Update.  (line  21)
* レキシカル（テキスト上の）束縛（edebug）: Edebug Eval.  (line  22)
* スペシャルフォーム（edebug）: Instrumenting.          (line  36)
* edebug-display-freq-count:    Coverage Testing.       (line  25)
* edebug-eval-top-level-form:   Instrumenting.          (line  25)
* edebug-print-trace-after:     Trace Buffer.           (line  24)
* edebug-print-trace-before:    Trace Buffer.           (line  24)
* edebug-set-global-break-condition: Global Break Condition.  (line  12)
* edebug-trace:                 Trace Buffer.           (line  35)
* edebug-tracing:               Trace Buffer.           (line  29)
* edebug-unwrap:                Specification List.     (line  37)
* edit-abbrevs-map:             Standard Keymaps.       (line  48)
* edit-and-eval-command:        Object from Minibuffer.  (line  50)
* edit-tab-stops-map:           Standard Keymaps.       (line  52)
* electric-buffer-menu-mode-map: Standard Keymaps.      (line  56)
* electric-history-map:         Standard Keymaps.       (line  61)
* `elp.el':                     Compilation Tips.       (line   9)
* elt:                          Sequence Functions.     (line  34)
* `.emacs':                     Init File.              (line   5)
* Emacsの終了:                  Getting Out.            (line   5)
* 終了、Emacs:                  Getting Out.            (line   5)
* Emacsの終了:                  Killing Emacs.          (line   5)
* 終了、Emacs:                  Killing Emacs.          (line   5)
* Emacsの始動:                  Start-up Summary.       (line   5)
* 始動、Emacs:                  Start-up Summary.       (line   5)
* Emacsの休止:                  Suspending Emacs.       (line   5)
* 休止、Emacs:                  Suspending Emacs.       (line   5)
* Emacsの構築方法:              Building Emacs.         (line   5)
* `.emacs'のカスタマイズ:       Major Mode Conventions.  (line 167)
* カスタマイズ、`.emacs':       Major Mode Conventions.  (line 167)
* Emacsのイベント標準表記:      Describing Characters.  (line  13)
* `emacs/etc/DOC-VERSION':      Documentation Basics.   (line  38)
* emacs-lisp-mode-map:          Standard Keymaps.       (line  66)
* `EMACSLOADPATH'環境変数:      Library Search.         (line  11)
* 環境変数`EMACSLOADPATH':      Library Search.         (line  11)
* emacs-pid:                    System Environment.     (line 165)
* emacs-version:                Version Info.           (line  10)
* enable-command:               Disabling Commands.     (line  32)
* enable-flow-control:          Flow Control.           (line  47)
* enable-flow-control-on:       Flow Control.           (line  56)
* encode-coding-region:         Explicit Encoding.      (line  40)
* encode-coding-string:         Explicit Encoding.      (line  46)
* encode-time:                  Time Conversion.        (line 138)
* end-of-buffer:                Buffer End Motion.      (line  31)
* end-of-defun:                 List Motion.            (line  56)
* end-of-file（ファイルの終り）: Input Functions.       (line  12)
* end-of-line:                  Text Lines.             (line  43)
* enlarge-window:               Resizing Windows.       (line  13)
* enlarge-window-horizontally:  Resizing Windows.       (line  33)
* eobp:                         Near Point.             (line  62)
* eolp:                         Near Point.             (line  71)
* eq:                           Equality Predicates.    (line  12)
* equal:                        Equality Predicates.    (line  56)
* erase-buffer:                 Deletion.               (line  15)
* error:                        Signaling Errors.       (line  16)
* `error'、デバッグ:            Invoking the Debugger.  (line  60)
* デバッグの`error':            Invoking the Debugger.  (line  60)
* error-conditions:             Error Symbols.          (line   5)
* error-message-string:         Handling Errors.        (line 116)
* ESC:                          Functions for Key Lookup.  (line  94)
* エスケープ（escape）:         Syntax Class Table.     (line  69)
* esc-map:                      Prefix Keys.            (line  16)
* ESC-prefix:                   Prefix Keys.            (line  16)
* `etc/DOC-VERSION':            Documentation Basics.   (line  38)
* eval:                         Eval.                   (line  23)
* `eval'とデバッグ:             Internals of Debugger.  (line  60)
* eval-after-load:              Hooks for Loading.      (line  11)
* eval-and-compile:             Eval During Compile.    (line  10)
* eval-current-buffer:          Eval.                   (line  64)
* eval-current-buffer （edebug）: Instrumenting.        (line  18)
* eval-defun （edebug）:        Instrumenting.          (line  10)
* eval-expression （edebug）:   Instrumenting.          (line  48)
* eval-minibuffer:              Object from Minibuffer.  (line  37)
* eval-region:                  Eval.                   (line  46)
* eval-region （edebug）:       Instrumenting.          (line  18)
* eval-when-compile:            Eval During Compile.    (line  19)
* evaporate （オーバレイ属性）: Overlay Properties.     (line 123)
* event-basic-type:             Classifying Events.     (line  61)
* event-click-count:            Repeat Events.          (line  64)
* event-convert-list:           Classifying Events.     (line  85)
* event-end:                    Accessing Events.       (line  23)
* event-modifiers:              Classifying Events.     (line  28)
* eventp:                       Input Events.           (line  13)
* event-start:                  Accessing Events.       (line  16)
* execute-extended-command:     Interactive Call.       (line  66)
* execute-kbd-macro:            Keyboard Macros.        (line  13)
* exit:                         Recursive Editing.      (line  30)
* exit-minibuffer:              Minibuffer Misc.        (line  10)
* exit-recursive-edit:          Recursive Editing.      (line  85)
* exp:                          Math Functions.         (line  28)
* expand-abbrev:                Abbrev Expansion.       (line  24)
* expand-file-name:             File Name Expansion.    (line  14)
* 式前置子（expression:         Syntax Class Table.     (line  96)
* expt:                         Math Functions.         (line  46)
* `\f':                         Character Type.         (line  41)
* face （テキスト属性）:        Special Properties.     (line  19)
* face （オーバレイ属性）:      Overlay Properties.     (line  40)
* face-background:              Face Functions.         (line  80)
* face-bold-p:                  Face Functions.         (line  90)
* face-differs-from-default-p:  Face Functions.         (line 109)
* face-documentation:           Face Functions.         (line 102)
* face-equal:                   Face Functions.         (line 105)
* face-font:                    Face Functions.         (line  87)
* face-foreground:              Face Functions.         (line  79)
* face-id:                      Face Functions.         (line  99)
* face-italic-p:                Face Functions.         (line  93)
* face-list:                    Face Functions.         (line  18)
* facemenu-background-menu:     Standard Keymaps.       (line  74)
* facemenu-face-menu:           Standard Keymaps.       (line  79)
* facemenu-foreground-menu:     Standard Keymaps.       (line  83)
* facemenu-indentation-menu:    Standard Keymaps.       (line  87)
* facemenu-justification-menu:  Standard Keymaps.       (line  91)
* facemenu-keymap:              Prefix Keys.            (line  57)
* facemenu-menu:                Standard Keymaps.       (line  70)
* facemenu-special-menu:        Standard Keymaps.       (line  96)
* facep:                        Faces.                  (line  16)
* face-stipple:                 Face Functions.         (line  83)
* face-underline-p:             Face Functions.         (line  96)
* false（偽）:                  nil and t.              (line   5)
* 偽（false）:                  nil and t.              (line   5)
* fancy-diary-display:          Fancy Diary Display.    (line  11)
* fboundp:                      Function Cells.         (line  43)
* fceiling:                     Rounding Operations.    (line  19)
* featurep:                     Named Features.         (line 108)
* FEATURE-unload-hook:          Unloading.              (line  26)
* fetch-bytecode:               Dynamic Loading.        (line  48)
* ffloor:                       Rounding Operations.    (line  15)
* file-accessible-directory-p:  Testing Accessibility.  (line  53)
* file-already-exists:          Changing Files.         (line  96)
* file-attributes:              File Attributes.        (line  53)
* file-directory-p:             Kinds of Files.         (line  31)
* file-error:                   How Programs Do Loading.  (line  72)
* file-executable-p:            Testing Accessibility.  (line  31)
* file-exists-p:                Testing Accessibility.  (line  10)
* file-local-copy:              Magic File Names.       (line 117)
* file-locked:                  File Locks.             (line  58)
* file-locked-p:                File Locks.             (line  23)
* file-modes:                   File Attributes.        (line  13)
* file-name-absolute-p:         Relative File Names.    (line  16)
* file-name-all-completions:    File Name Completion.   (line  11)
* file-name-all-versions:       Contents of Directories.  (line  38)
* file-name-as-directory:       Directory Names.        (line  24)
* file-name-completion:         File Name Completion.   (line  33)
* file-name-directory:          File Name Components.   (line  25)
* file-name-nondirectory:       File Name Components.   (line  37)
* file-name-sans-extension:     File Name Components.   (line  62)
* file-name-sans-versions:      File Name Components.   (line  48)
* file-newer-than-file-p:       Testing Accessibility.  (line  75)
* file-newest-backup:           Backup Names.           (line  86)
* file-nlinks:                  File Attributes.        (line  38)
* file-ownership-preserved-p:   Testing Accessibility.  (line  71)
* file-readable-p:              Testing Accessibility.  (line  20)
* file-regular-p:               Kinds of Files.         (line  47)
* file-relative-name:           File Name Expansion.    (line  38)
* file-supersession:            Modification Time.      (line  57)
* file-symlink-p:               Kinds of Files.         (line  11)
* file-truename:                Truenames.              (line  15)
* file-writable-p:              Testing Accessibility.  (line  37)
* fillarray:                    Array Functions.        (line  59)
* fill-context-prefix:          Adaptive Fill.          (line  15)
* fill-individual-paragraphs:   Filling.                (line  51)
* fill-paragraph:               Filling.                (line  33)
* fill-region:                  Filling.                (line  39)
* fill-region-as-paragraph:     Filling.                (line  71)
* find-backup-file-name:        Backup Names.           (line  65)
* find-charset-region:          Scanning Charsets.      (line  12)
* find-charset-string:          Scanning Charsets.      (line  21)
* find-coding-systems-for-charsets: Lisp and Coding Systems.  (line  49)
* find-coding-systems-region:   Lisp and Coding Systems.  (line  35)
* find-coding-systems-string:   Lisp and Coding Systems.  (line  43)
* find-file:                    Visiting Functions.     (line  21)
* find-file-name-handler:       Magic File Names.       (line 111)
* find-file-noselect:           Visiting Functions.     (line  35)
* find-file-other-window:       Visiting Functions.     (line  74)
* find-file-read-only:          Visiting Functions.     (line  83)
* find-operation-coding-system: Default Coding Systems.  (line  75)
* fixup-whitespace:             User-Level Deletion.    (line  64)
* float:                        Numeric Conversions.    (line  10)
* floatp:                       Predicates on Numbers.  (line  14)
* floor:                        Numeric Conversions.    (line  21)
* fmakunbound:                  Function Cells.         (line  48)
* following-char:               Near Point.             (line  30)
* フォントロック（font-lock）モード: Font Lock Mode.    (line   5)
* font-lock-builtin-face:       Faces for Font Lock.    (line  31)
* font-lock-comment-face:       Faces for Font Lock.    (line  18)
* font-lock-constant-face:      Faces for Font Lock.    (line  50)
* font-lock-function-name-face: Faces for Font Lock.    (line  35)
* font-lock-keyword-face:       Faces for Font Lock.    (line  26)
* font-lock-string-face:        Faces for Font Lock.    (line  22)
* font-lock-type-face:          Faces for Font Lock.    (line  45)
* font-lock-variable-name-face: Faces for Font Lock.    (line  40)
* font-lock-warning-face:       Faces for Font Lock.    (line  54)
* foo:                          A Sample Function Description.  (line  23)
* for:                          Argument Evaluation.    (line  11)
* force-mode-line-update:       Mode Line Format.       (line  29)
* format:                       Formatting Strings.     (line  18)
* format-find-file:             Format Conversion.      (line 103)
* format-insert-file:           Format Conversion.      (line 113)
* format-time-string:           Time Conversion.        (line  23)
* format-write-file:            Format Conversion.      (line  98)
* 未定義のアドバイス（forward advice）: Defining Advice.  (line  70)
* forward-char:                 Character Motion.       (line  28)
* forward-comment:              Parsing Expressions.    (line 117)
* forward-line:                 Text Lines.             (line  51)
* forward-list:                 List Motion.            (line  16)
* forward-sexp:                 List Motion.            (line  32)
* forward-to-indentation:       Motion by Indent.       (line  21)
* forward-word:                 Word Motion.            (line  12)
* frame-char-height:            Size and Position.      (line  41)
* frame-char-width:             Size and Position.      (line  42)
* frame-height:                 Size and Position.      (line  25)
* frame-list:                   Finding All Frames.     (line   8)
* frame-live-p:                 Deleting Frames.        (line  18)
* framep:                       Frames.                 (line  23)
* frame-parameters:             Parameter Access.       (line  11)
* frame-pixel-height:           Size and Position.      (line  36)
* frame-pixel-width:            Size and Position.      (line  37)
* frame-selected-window:        Frames and Windows.     (line  30)
* frame-top-window:             Frames and Windows.     (line  19)
* frame-update-face-colors:     Face Functions.         (line 124)
* frame-visible-p:              Visibility of Frames.   (line  29)
* frame-width:                  Size and Position.      (line  26)
* fround:                       Rounding Operations.    (line  27)
* fset:                         Function Cells.         (line  62)
* ftp-login:                    Cleanups.               (line  53)
* ftruncate:                    Rounding Operations.    (line  23)
* funcall:                      Calling Functions.      (line  26)
* `funcall'とデバッグ:          Internals of Debugger.  (line  60)
* function:                     Anonymous Functions.    (line  82)
* functionp:                    What Is a Function.     (line  78)
* 基本（fundamental）モード:    Major Modes.            (line   5)
* fundamental-mode:             Auto Major Mode.        (line  12)
* fundamental-mode-map:         Standard Keymaps.       (line 107)
* gap-position:                 Buffer Gap.             (line  20)
* gap-size:                     Buffer Gap.             (line  23)
* garbage-collect:              Garbage Collection.     (line  55)
* general-holidays:             Holiday Customizing.    (line  14)
* generate-new-buffer:          Creating Buffers.       (line  33)
* generate-new-buffer-name:     Buffer Names.           (line  68)
* 汎用文字列区切り（generic:    Syntax Class Table.     (line 127)
* 汎用コメント区切り（generic:  Syntax Class Table.     (line 115)
* get:                          Symbol Plists.          (line  24)
* get-buffer:                   Buffer Names.           (line  53)
* get-buffer-create:            Creating Buffers.       (line  18)
* get-buffer-process:           Process Buffers.        (line  50)
* get-buffer-window:            Buffers and Windows.    (line  31)
* get-buffer-window-list:       Buffers and Windows.    (line  49)
* get-char-property:            Examining Properties.   (line  26)
* getenv:                       System Environment.     (line  98)
* get-file-buffer:              Buffer File Name.       (line  61)
* get-file-char:                Input Streams.          (line 131)
* get-largest-window:           Selecting Windows.      (line  61)
* get-lru-window:               Selecting Windows.      (line  41)
* get-process:                  Process Information.    (line  23)
* get-register:                 Registers.              (line  54)
* get-text-property:            Examining Properties.   (line  18)
* get-unused-category:          Categories.             (line  45)
* global-key-binding:           Functions for Key Lookup.  (line  71)
* global-set-key:               Key Binding Commands.   (line  31)
* global-unset-key:             Key Binding Commands.   (line  39)
* goto-char:                    Character Motion.       (line  11)
* goto-line:                    Text Lines.             (line  14)
* hack-local-variables:         Auto Major Mode.        (line 158)
* handle-switch-frame:          Input Focus.            (line  46)
* hebrew-holidays:              Holiday Customizing.    (line   6)
* help-command:                 Help Functions.         (line  35)
* Helper-describe-bindings:     Help Functions.         (line 105)
* Helper-help:                  Help Functions.         (line 111)
* Helper-help-map:              Standard Keymaps.       (line 112)
* highlight （フェイス名）:     Standard Faces.         (line  27)
* holidays-in-diary-buffer:     Diary Customizing.      (line   6)
* 環境変数`HOME':               Subprocess Creation.    (line  15)
* `HOME'、環境変数:             Subprocess Creation.    (line  15)
* iメニュー:                    Imenu.                  (line   6)
* iconify-frame:                Visibility of Frames.   (line  25)
* `iconify-frame'イベント:      Misc Events.            (line  15)
* イベント`iconify-frame':      Misc Events.            (line  15)
* identity:                     Calling Functions.      (line  90)
* IEEE浮動小数点数:             Float Basics.           (line  16)
* if:                           Conditionals.           (line  12)
* ignore:                       Calling Functions.      (line  93)
* inc:                          Simple Macro.           (line  10)
* include-other-diary-files:    Fancy Diary Display.    (line  46)
* indent-according-to-mode:     Mode-Specific Indent.   (line  23)
* indent-code-rigidly:          Region Indent.          (line  57)
* indent-for-tab-command:       Mode-Specific Indent.   (line  27)
* indent-region:                Region Indent.          (line  11)
* indent-relative:              Relative Indent.        (line  11)
* indent-relative-maybe:        Relative Indent.        (line  48)
* indent-rigidly:               Region Indent.          (line  43)
* indent-to:                    Primitive Indent.       (line  17)
* indent-to-left-margin:        Margins.                (line  69)
* indirect-function:            Function Indirection.   (line  60)
* Info-edit-map:                Standard Keymaps.       (line 117)
* Info-mode-map:                Standard Keymaps.       (line 121)
* 継承（inherit）:              Syntax Class Table.     (line 111)
* initial-calendar-window-hook: Calendar Customizing.   (line  40)
* input-pending-p:              Event Input Misc.       (line  47)
* insert:                       Insertion.              (line  36)
* insert-abbrev-table-description: Abbrev Tables.       (line  29)
* insert-and-inherit:           Sticky Properties.      (line  49)
* insert-before-markers:        Insertion.              (line  42)
* insert-before-markers-and-inherit: Sticky Properties.  (line  53)
* insert-behind-hooks （オーバレイ属性）: Overlay Properties.  (line  80)
* insert-behind-hooks （テキスト属性）: Special Properties.  (line  96)
* insert-buffer:                Commands for Insertion.  (line  11)
* insert-buffer-substring:      Insertion.              (line  65)
* insert-char:                  Insertion.              (line  53)
* insert-directory:             Contents of Directories.  (line  42)
* insert-file-contents:         Reading from Files.     (line  12)
* insert-file-contents-literally: Reading from Files.   (line  47)
* insert-hebrew-diary-entry:    Hebrew/Islamic Entries.  (line  60)
* insert-in-front-hooks （オーバレイ属性）: Overlay Properties.  (line  74)
* insert-in-front-hooks （テキスト属性）: Special Properties.  (line  96)
* insert-islamic-diary-entry:   Hebrew/Islamic Entries.  (line  60)
* insert-monthly-hebrew-diary-entry: Hebrew/Islamic Entries.  (line  60)
* insert-monthly-islamic-diary-entry: Hebrew/Islamic Entries.  (line  60)
* insert-register:              Registers.              (line  66)
* insert-yearly-hebrew-diary-entry: Hebrew/Islamic Entries.  (line  60)
* insert-yearly-islamic-diary-entry: Hebrew/Islamic Entries.  (line  60)
* intangible （テキスト属性）:  Special Properties.     (line  75)
* intangible （オーバレイ属性）: Overlay Properties.    (line  91)
* integer-or-marker-p:          Predicates on Markers.  (line  17)
* integerp:                     Predicates on Numbers.  (line  20)
* interactive:                  Using Interactive.      (line  11)
* 例、`interactive':            Interactive Examples.   (line   5)
* `interactive'の使用例:        Interactive Examples.   (line   5)
* interactive-p:                Interactive Call.       (line  89)
* intern:                       Creating Symbols.       (line  86)
* intern-soft:                  Creating Symbols.       (line 107)
* interrupt-process:            Signals to Processes.   (line  51)
* int-to-string:                String Conversion.      (line  52)
* invalid-function:             Function Indirection.   (line  19)
* invalid-read-syntax:          Printed Representation.  (line  29)
* invalid-regexp:               Syntax of Regexps.      (line 261)
* invert-face:                  Face Functions.         (line  71)
* invisible （テキスト属性）:   Special Properties.     (line  70)
* invisible （オーバレイ属性）: Overlay Properties.     (line  86)
* isearch-mode-map:             Standard Keymaps.       (line 125)
* islamic-holidays:             Holiday Customizing.    (line   6)
* italic （フェイス名）:        Standard Faces.         (line  42)
* justify-current-line:         Filling.                (line  87)
* just-one-space:               User-Level Deletion.    (line  94)
* key-binding:                  Functions for Key Lookup.  (line  52)
* keyboard-coding-system:       Terminal I/O Encoding.  (line  15)
* keyboard-quit:                Quitting.               (line  84)
* keyboard-translate:           Translating Input.      (line  67)
* key-description:              Describing Characters.  (line  13)
* keymapp:                      Format of Keymaps.      (line  80)
* keymap-parent:                Inheritance and Keymaps.  (line  28)
* kill-all-local-variables:     Creating Buffer-Local.  (line 120)
* kill-append:                  Low-Level Kill Ring.    (line  32)
* kill-buffer:                  Killing Buffers.        (line  37)
* kill-emacs:                   Killing Emacs.          (line  12)
* kill-local-variable:          Creating Buffer-Local.  (line 102)
* kill-new:                     Low-Level Kill Ring.    (line  26)
* kill-process:                 Signals to Processes.   (line  58)
* kill-region:                  Kill Functions.         (line  16)
* `lambda'、デバッグ:           Invoking the Debugger.  (line  30)
* デバッグの`lambda':           Invoking the Debugger.  (line  30)
* `lambda'、キーマップ:         Key Lookup.             (line  67)
* キーマップ内の`lambda':       Key Lookup.             (line  67)
* length:                       Sequence Functions.     (line  16)
* let:                          Local Variables.        (line  50)
* let*:                         Local Variables.        (line  73)
* line-move-ignore-invisible:   Invisible Text.         (line  78)
* Lispの歴史:                   Lisp History.           (line   5)
* Lispリーダ:                   Streams Intro.          (line   5)
* Lispデバッガ:                 Debugger.               (line   5)
* 移動、Lisp式:                 List Motion.            (line   5)
* Lispプリンタ:                 Output Functions.       (line  39)
* Lispライブラリ:               Loading.                (line   5)
* Lispオブジェクト:             Lisp Data Types.        (line   5)
* Lisp式単位の移動:             List Motion.            (line   5)
* Lispの入れ子のエラー:         Eval.                   (line  72)
* エラー、Lispの入れ子:         Eval.                   (line  72)
* Lispの大文字小文字変換:       Case Conversion.        (line   5)
* lisp-interaction-mode-map:    Standard Keymaps.       (line 136)
* `lisp-mode.el':               Example Major Modes.    (line  54)
* lisp-mode-map:                Standard Keymaps.       (line 140)
* list:                         Building Lists.         (line  33)
* list-diary-entries-hook:      Fancy Diary Display.    (line  46)
* list-hebrew-diary-entries:    Hebrew/Islamic Entries.  (line  12)
* listify-key-sequence:         Event Input Misc.       (line  35)
* list-islamic-diary-entries:   Hebrew/Islamic Entries.  (line  17)
* listp:                        List-related Predicates.  (line  26)
* list-processes:               Process Information.    (line  11)
* ln:                           Changing Files.         (line  96)
* load:                         How Programs Do Loading.  (line  15)
* load-average:                 System Environment.     (line 148)
* load-file:                    How Programs Do Loading.  (line  84)
* load-library:                 How Programs Do Loading.  (line  90)
* `loadup.el':                  Building Emacs.         (line  16)
* local-holidays:               Holiday Customizing.    (line  17)
* local-key-binding:            Functions for Key Lookup.  (line  64)
* local-map （テキスト属性）:   Special Properties.     (line  39)
* local-map （オーバレイ属性）: Overlay Properties.     (line 128)
* local-set-key:                Key Binding Commands.   (line  58)
* local-unset-key:              Key Binding Commands.   (line  66)
* local-variable-p:             Creating Buffer-Local.  (line  72)
* locate-library:               Library Search.         (line  93)
* lock-buffer:                  File Locks.             (line  31)
* log:                          Math Functions.         (line  32)
* log10:                        Math Functions.         (line  40)
* logand:                       Bitwise Operations.     (line 126)
* logb:                         Float Basics.           (line  40)
* logior:                       Bitwise Operations.     (line 160)
* lognot:                       Bitwise Operations.     (line 196)
* logxor:                       Bitwise Operations.     (line 178)
* looking-at:                   Regexp Search.          (line 102)
* lookup-key:                   Functions for Key Lookup.  (line  10)
* `lookup-key'における小文字への変換: Key Sequence Input.  (line  46)
* lower-frame:                  Raising and Lowering.   (line  29)
* lsh:                          Bitwise Operations.     (line  15)
* Maclisp:                      Lisp History.           (line  10)
* macroexpand:                  Expansion.              (line  32)
* make-abbrev-table:            Abbrev Tables.          (line  10)
* make-auto-save-file-name:     Auto-Saving.            (line  56)
* make-backup-file-name:        Backup Names.           (line  36)
* make-bool-vector:             Bool-Vectors.           (line  17)
* make-byte-code:               Byte-Code Objects.      (line  54)
* make-category-set:            Categories.             (line  70)
* make-char:                    Splitting Characters.   (line  43)
* make-char-table:              Char-Tables.            (line  34)
* make-directory:               Create/Delete Dirs.     (line  13)
* make-display-table:           Display Table Format.   (line  11)
* make-face:                    Face Functions.         (line  13)
* make-frame:                   Creating Frames.        (line  10)
* make-frame-invisible:         Visibility of Frames.   (line  21)
* make-frame-on-display:        Multiple Displays.      (line  31)
* make-frame-visible:           Visibility of Frames.   (line  17)
* `make-frame-visible'イベント: Misc Events.            (line  23)
* イベント`make-frame-visible': Misc Events.            (line  23)
* make-help-screen:             Help Functions.         (line 126)
* make-indirect-buffer:         Indirect Buffers.       (line  31)
* make-keymap:                  Creating Keymaps.       (line  10)
* make-list:                    Building Lists.         (line  45)
* make-local-hook:              Hooks.                  (line 120)
* make-local-variable:          Creating Buffer-Local.  (line   8)
* make-marker:                  Creating Markers.       (line  12)
* make-overlay:                 Managing Overlays.      (line  11)
* make-sparse-keymap:           Creating Keymaps.       (line  24)
* make-string:                  Creating Strings.       (line  11)
* make-symbol:                  Creating Symbols.       (line  74)
* make-symbolic-link:           Changing Files.         (line  96)
* make-syntax-table:            Syntax Table Functions.  (line  10)
* make-temp-name:               Unique File Names.      (line  22)
* make-translation-table:       Translation of Characters.  (line  13)
* make-variable-buffer-local:   Creating Buffer-Local.  (line  49)
* make-variable-frame-local:    Frame-Local Variables.  (line  18)
* make-vector:                  Vector Functions.       (line  26)
* makunbound:                   Void Variables.         (line  20)
* mapatoms:                     Creating Symbols.       (line 130)
* mapcar:                       Mapping Functions.      (line  21)
* map-char-table:               Char-Tables.            (line 115)
* mapconcat:                    Mapping Functions.      (line  55)
* map-y-or-n-p:                 Multiple Queries.       (line  13)
* mark:                         The Mark.               (line  49)
* mark-diary-entries-hook:      Fancy Diary Display.    (line  46)
* mark-diary-entries-in-calendar: Calendar Customizing.  (line  20)
* marker-buffer:                Information from Markers.  (line  14)
* marker-insertion-type:        Marker Insertion Types.  (line  20)
* markerp:                      Predicates on Markers.  (line  12)
* marker-position:              Information from Markers.  (line  10)
* mark-hebrew-diary-entries:    Hebrew/Islamic Entries.  (line  12)
* mark-holidays-in-calendar:    Calendar Customizing.   (line  26)
* mark-included-diary-files:    Fancy Diary Display.    (line  46)
* mark-islamic-diary-entries:   Hebrew/Islamic Entries.  (line  17)
* mark-marker:                  The Mark.               (line  56)
* match-beginning:              Simple Match Data.      (line  43)
* match-data:                   Entire Match Data.      (line  11)
* match-end:                    Simple Match Data.      (line  54)
* match-string:                 Simple Match Data.      (line  26)
* match-string-no-properties:   Simple Match Data.      (line  39)
* max:                          Comparison of Numbers.  (line  67)
* member:                       Sets And Lists.         (line  73)
* memory-limit:                 Garbage Collection.     (line 150)
* memq:                         Sets And Lists.         (line  18)
* menu-bar-edit-menu:           Standard Keymaps.       (line 144)
* menu-bar-files-menu:          Standard Keymaps.       (line 148)
* menu-bar-help-menu:           Standard Keymaps.       (line 152)
* menu-bar-mule-menu:           Standard Keymaps.       (line 156)
* menu-bar-search-menu:         Standard Keymaps.       (line 160)
* menu-bar-tools-menu:          Standard Keymaps.       (line 164)
* menu-item:                    Extended Menu Items.    (line   5)
* message:                      The Echo Area.          (line  25)
* message-box:                  The Echo Area.          (line  62)
* message-or-box:               The Echo Area.          (line  48)
* `M-g':                        Prefix Keys.            (line  57)
* min:                          Comparison of Numbers.  (line  77)
* minibuffer-complete:          Completion Commands.    (line  67)
* minibuffer-complete-and-exit: Completion Commands.    (line  70)
* minibuffer-complete-word:     Completion Commands.    (line  61)
* minibuffer-completion-help:   Completion Commands.    (line  82)
* minibuffer-depth:             Minibuffer Misc.        (line  87)
* minibuffer-prompt:            Minibuffer Misc.        (line  35)
* minibuffer-prompt-width:      Minibuffer Misc.        (line  39)
* minibuffer-window:            Minibuffer Misc.        (line  59)
* minibuffer-window-active-p:   Minibuffer Misc.        (line  74)
* minor-mode-key-binding:       Functions for Key Lookup.  (line  78)
* mod:                          Arithmetic Operations.  (line 136)
* `mode-class'属性:             Major Mode Conventions.  (line 149)
* 属性`mode-class':             Major Mode Conventions.  (line 149)
* modeline （フェイス名）:      Standard Faces.         (line  14)
* `mode-line-format'、シェルモード: Mode Line Data.     (line  75)
* シェルモードの`mode-line-format': Mode Line Data.     (line  75)
* mode-specific-map:            Prefix Keys.            (line  25)
* modification-hooks （オーバレイ属性）: Overlay Properties.  (line  56)
* modification-hooks （テキスト属性）: Special Properties.  (line  86)
* modify-category-entry:        Categories.             (line  95)
* modify-frame-parameters:      Parameter Access.       (line  15)
* modify-syntax-entry:          Syntax Table Functions.  (line  23)
* momentary-string-display:     Temporary Displays.     (line  65)
* mouse-face （テキスト属性）:  Special Properties.     (line  32)
* mouse-face （オーバレイ属性）: Overlay Properties.    (line  51)
* mouse-movement-p:             Classifying Events.     (line  82)
* mouse-pixel-position:         Mouse Position.         (line  22)
* mouse-position:               Mouse Position.         (line  11)
* `mouse-wheel'イベント:        Misc Events.            (line  30)
* イベント`mouse-wheel':        Misc Events.            (line  30)
* movemail:                     Subprocess Creation.    (line  50)
* move-marker:                  Moving Markers.         (line  35)
* move-overlay:                 Managing Overlays.      (line  39)
* move-to-column:               Columns.                (line  30)
* move-to-left-margin:          Margins.                (line  55)
* move-to-window-line:          Screen Lines.           (line  47)
* MS-DOSのファイル型:           MS-DOS File Types.      (line   5)
* MS-DOSとファイルモード:       Changing Files.         (line 124)
* ファイルモードとMS-DOS:       Changing Files.         (line 124)
* ファイル型、MS-DOSとWindows:  MS-DOS File Types.      (line   5)
* mule-keymap:                  Prefix Keys.            (line  37)
* multibyte-string-p:           Text Representations.   (line  49)
* `M-x':                        Interactive Call.       (line  75)
* `\n':                         Character Type.         (line  41)
* `\n'、表示:                   Output Variables.       (line  12)
* `\N'、置換:                   Replacing Match.        (line  46)
* 置換の`\N':                   Replacing Match.        (line  46)
* 非数値、NaN:                  Float Basics.           (line  16)
* NaN（非数値）:                Float Basics.           (line  16)
* narrow-to-page:               Narrowing.              (line  34)
* narrow-to-region:             Narrowing.              (line  27)
* natnump:                      Predicates on Numbers.  (line  32)
* nconc:                        Rearrangement.          (line  16)
* negative-argument:            Prefix Command Arguments.  (line 106)
* newline:                      Commands for Insertion.  (line  36)
* newline-and-indent:           Mode-Specific Indent.   (line  33)
* next-char-property-change:    Property Search.        (line  75)
* next-frame:                   Finding All Frames.     (line  19)
* next-history-element:         Minibuffer Misc.        (line  23)
* next-matching-history-element: Minibuffer Misc.       (line  31)
* next-overlay-change:          Managing Overlays.      (line  65)
* next-property-change:         Property Search.        (line  25)
* next-single-property-change:  Property Search.        (line  50)
* next-window:                  Cyclic Window Ordering.  (line  22)
* nil:                          Constant Variables.     (line   5)
* `nil'、リスト:                Cons Cell Type.         (line  76)
* `nil'とリスト:                Cons Cells.             (line   5)
* `nil'の使い方:                nil and t.              (line   5)
* リスト内の`nil':              Cons Cell Type.         (line  76)
* `nil'、キーマップ:            Key Lookup.             (line  36)
* `nil'入力ストリーム:          Input Streams.          (line  47)
* キーマップ内の`nil':          Key Lookup.             (line  36)
* `nil'出力ストリーム:          Output Streams.         (line  34)
* nlistp:                       List-related Predicates.  (line  35)
* no-catch:                     Catch and Throw.        (line  84)
* nongregorian-diary-listing-hook: Hebrew/Islamic Entries.  (line  12)
* nongregorian-diary-marking-hook: Hebrew/Islamic Entries.  (line  12)
* 再開（`no-redraw-on-reenter'を参照 ）: Refresh Screen.  (line  28)
* 停止（`no-redraw-on-reenter'を参照 ）: Refresh Screen.  (line  28)
* normal-backup-enable-predicate: Making Backups.       (line  45)
* normal-mode:                  Auto Major Mode.        (line  21)
* not:                          Combining Conditions.   (line  12)
* &not （edebug）:              Specification List.     (line  85)
* not-modified:                 Buffer Modification.    (line  40)
* nreverse:                     Rearrangement.          (line  63)
* nth:                          List Elements.          (line  64)
* nthcdr:                       List Elements.          (line  84)
* null:                         List-related Predicates.  (line  41)
* number-of-diary-entries:      Diary Customizing.      (line  12)
* number-or-marker-p:           Predicates on Markers.  (line  21)
* numberp:                      Predicates on Numbers.  (line  24)
* number-to-string:             String Conversion.      (line  42)
* obarray（オブジェクト配列）:  Creating Symbols.       (line  11)
* オブジェクト配列（obarray）:  Creating Symbols.       (line  11)
* occur-mode-map:               Standard Keymaps.       (line 175)
* one-window-p:                 Splitting Windows.      (line 123)
* 開き括弧文字（open:           Syntax Class Table.     (line  37)
* open-dribble-file:            Recording Input.        (line  17)
* open-network-stream:          Network.                (line  24)
* open-termscript:              Terminal Output.        (line  44)
* &optional:                    Argument List.          (line  16)
* optional引数:                 Argument List.          (line  16)
* &optional （edebug）:         Specification List.     (line  57)
* or:                           Combining Conditions.   (line  55)
* &or （edebug）:               Specification List.     (line  77)
* other-buffer:                 The Buffer List.        (line  60)
* other-holidays:               Holiday Customizing.    (line  32)
* other-window:                 Cyclic Window Ordering.  (line  83)
* アウトライン（outline）モード: Substitution.          (line  14)
* overlay-buffer:               Managing Overlays.      (line  28)
* overlay-end:                  Managing Overlays.      (line  25)
* overlay-get:                  Overlay Properties.     (line 122)
* overlay-put:                  Overlay Properties.     (line 128)
* overlays-at:                  Managing Overlays.      (line  52)
* overlays-in:                  Managing Overlays.      (line  58)
* overlay-start:                Managing Overlays.      (line  22)
* 対になった区切り（paired:     Syntax Class Table.     (line  90)
* parse-partial-sexp:           Parsing Expressions.    (line  16)
* 環境変数`PATH':               Subprocess Creation.    (line  15)
* `PATH'、環境変数:             Subprocess Creation.    (line  15)
* peculiarエラー:               Error Symbols.          (line  29)
* エラーpeculiar:               Error Symbols.          (line  29)
* perform-replace:              Search and Replace.     (line   8)
* plist（属性リスト）:          Property Lists.         (line   5)
* 属性リスト（plist）:          Property Lists.         (line   5)
* plist-get:                    Other Plists.           (line  10)
* plist-put:                    Other Plists.           (line  17)
* point:                        Point.                  (line  29)
* point-entered （テキスト属性）: Special Properties.   (line 109)
* point-left （テキスト属性）:  Special Properties.     (line 109)
* point-marker:                 Creating Markers.       (line  18)
* point-max:                    Point.                  (line  40)
* point-max-marker:             Creating Markers.       (line  28)
* point-min:                    Point.                  (line  35)
* point-min-marker:             Creating Markers.       (line  23)
* pop-mark:                     The Mark.               (line 108)
* pop-to-buffer:                Displaying Buffers.     (line  62)
* posix-looking-at:             POSIX Regexps.          (line  27)
* posix-search-backward:        POSIX Regexps.          (line  23)
* posix-search-forward:         POSIX Regexps.          (line  19)
* posix-string-match:           POSIX Regexps.          (line  31)
* posn-col-row:                 Accessing Events.       (line  43)
* posn-point:                   Accessing Events.       (line  37)
* posn-timestamp:               Accessing Events.       (line  48)
* posn-window:                  Accessing Events.       (line  34)
* posn-x-y:                     Accessing Events.       (line  40)
* pos-visible-in-window-p:      Window Start.           (line 101)
* preceding-char:               Near Point.             (line  52)
* prefix-numeric-value:         Prefix Command Arguments.  (line  73)
* previous-char-property-change: Property Search.       (line  80)
* previous-frame:               Finding All Frames.     (line  39)
* previous-history-element:     Minibuffer Misc.        (line  19)
* previous-matching-history-element: Minibuffer Misc.   (line  27)
* previous-overlay-change:      Managing Overlays.      (line  69)
* previous-property-change:     Property Search.        (line  64)
* previous-single-property-change: Property Search.     (line  69)
* previous-window:              Cyclic Window Ordering.  (line  78)
* primitive-undo:               Undo.                   (line  84)
* prin1:                        Output Functions.       (line  56)
* prin1-to-string:              Output Functions.       (line  92)
* princ:                        Output Functions.       (line  69)
* print:                        Output Functions.       (line  39)
* printの例:                    Output Streams.         (line  46)
* 例、print:                    Output Streams.         (line  46)
* print-diary-entries:          Diary Customizing.      (line  21)
* print-diary-entries-hook:     Diary Customizing.      (line  21)
* print-help-return-message:    Help Functions.         (line  43)
* priority （オーバレイ属性）:  Overlay Properties.     (line  18)
* process-buffer:               Process Buffers.        (line  22)
* process-coding-system:        Process Information.    (line 100)
* process-command:              Process Information.    (line  31)
* process-contact:              Process Information.    (line  48)
* process-exit-status:          Process Information.    (line  89)
* process-filter:               Filter Functions.       (line  89)
* process-id:                   Process Information.    (line  39)
* process-kill-without-query:   Deleting Processes.     (line  32)
* process-list:                 Process Information.    (line  17)
* process-mark:                 Process Buffers.        (line  28)
* process-name:                 Process Information.    (line  45)
* processp:                     Processes.              (line  25)
* process-send-eof:             Input to Processes.     (line  53)
* process-send-region:          Input to Processes.     (line  44)
* process-send-string:          Input to Processes.     (line  25)
* process-sentinel:             Sentinels.              (line  74)
* process-status:               Process Information.    (line  52)
* process-tty-name:             Process Information.    (line  95)
* `profile.el':                 Compilation Tips.       (line   9)
* prog1:                        Sequencing.             (line  49)
* prog2:                        Sequencing.             (line  66)
* progn:                        Sequencing.             (line  35)
* 暗黙の`progn':                Sequencing.             (line  20)
* provide:                      Named Features.         (line  68)
* 疑似端末PTY:                  Asynchronous Processes.  (line  66)
* 句読点文字（punctuation:      Syntax Class Table.     (line  30)
* purecopy:                     Pure Storage.           (line  26)
* push-mark:                    The Mark.               (line  97)
* put:                          Symbol Plists.          (line  34)
* put-text-property:            Changing Properties.    (line  18)
* quietly-read-abbrev-file:     Abbrev Files.           (line  20)
* quit-process:                 Signals to Processes.   (line  63)
* quote:                        Quoting.                (line  13)
* `quoted-insert'の抑制:        Changing Key Bindings.  (line 151)
* `\r':                         Character Type.         (line  41)
* raise-frame:                  Raising and Lowering.   (line  25)
* random:                       Random Numbers.         (line  24)
* rassoc:                       Association Lists.      (line  87)
* rassq:                        Association Lists.      (line 119)
* read:                         Input Functions.        (line  17)
* read-buffer:                  High-Level Completion.  (line  17)
* read-char:                    Reading One Event.      (line  44)
* read-coding-system:           User-Chosen Coding Systems.  (line  29)
* read-command:                 High-Level Completion.  (line  51)
* read-event:                   Reading One Event.      (line  10)
* read-file-name:               Reading File Names.     (line  12)
* read-from-minibuffer:         Text from Minibuffer.   (line  19)
* read-from-string:             Input Functions.        (line  21)
* read-input-method-name:       Input Methods.          (line  33)
* read-kbd-macro:               Describing Characters.  (line  47)
* read-key-sequence:            Key Sequence Input.     (line  12)
* read-key-sequence-vector:     Key Sequence Input.     (line  43)
* read-minibuffer:              Object from Minibuffer.  (line  10)
* read-no-blanks-input:         Text from Minibuffer.   (line 137)
* read-non-nil-coding-system:   User-Chosen Coding Systems.  (line  35)
* read-only （テキスト属性）:   Special Properties.     (line  53)
* read-passwd:                  Reading a Password.     (line  11)
* read-quoted-char:             Quoted Character Input.  (line  13)
* `read-quoted-char'の中断:     Quitting.               (line  53)
* read-string:                  Text from Minibuffer.   (line  80)
* read-variable:                High-Level Completion.  (line  85)
* recent-auto-save-p:           Auto-Saving.            (line  96)
* recenter:                     Vertical Scrolling.     (line 110)
* recent-keys:                  Recording Input.        (line   8)
* recursion-depth:              Recursive Editing.      (line 100)
* recursive-edit:               Recursive Editing.      (line  65)
* redirect-frame-focus:         Input Focus.            (line  53)
* redraw-display:               Refresh Screen.         (line  16)
* redraw-frame:                 Refresh Screen.         (line  11)
* regexp（正規表現）:           Regular Expressions.    (line   5)
* regexp-opt:                   Syntax of Regexps.      (line 283)
* regexp-opt-depth:             Syntax of Regexps.      (line 301)
* regexp-quote:                 Syntax of Regexps.      (line 268)
* region （フェイス名）:        Standard Faces.         (line  18)
* region-beginning:             The Region.             (line  12)
* region-end:                   The Region.             (line  18)
* reindent-then-newline-and-indent: Mode-Specific Indent.  (line  42)
* remove-from-invisibility-spec: Invisible Text.        (line  60)
* remove-hook:                  Hooks.                  (line 113)
* remove-text-properties:       Changing Properties.    (line  44)
* rename-auto-save-file:        Auto-Saving.            (line 149)
* rename-buffer:                Buffer Names.           (line  40)
* rename-file:                  Changing Files.         (line  63)
* replace-buffer-in-windows:    Displaying Buffers.     (line 103)
* replace-match:                Replacing Match.        (line  10)
* require:                      Named Features.         (line  92)
* `require'によるロードエラー:  Named Features.         (line  23)
* バイトコンパイル時の`require': Named Features.        (line  48)
* re-search-backward:           Regexp Search.          (line  55)
* re-search-forward:            Regexp Search.          (line  19)
* &rest:                        Argument List.          (line  16)
* rest引数:                     Argument List.          (line  16)
* &rest （edebug）:             Specification List.     (line  67)
* reverse:                      Building Lists.         (line 150)
* revert-buffer:                Reverting.              (line  12)
* rm:                           Changing Files.         (line  85)
* round:                        Numeric Conversions.    (line  32)
* rplaca:                       Modifying Lists.        (line  10)
* rplacd:                       Modifying Lists.        (line  10)
* run-at-time:                  Timers.                 (line  19)
* run-hooks:                    Hooks.                  (line  55)
* run-hook-with-args:           Hooks.                  (line  71)
* run-hook-with-args-until-failure: Hooks.              (line  75)
* run-hook-with-args-until-success: Hooks.              (line  81)
* run-with-idle-timer:          Timers.                 (line  83)
* S式日誌項目:                  Sexp Diary Entries.     (line   5)
* S式単位の移動:                List Motion.            (line   5)
* 移動、S式単位:                List Motion.            (line   5)
* `\s'、正規表現:               Syntax of Regexps.      (line 223)
* 正規表現の`\s':               Syntax of Regexps.      (line 223)
* `\S'、正規表現:               Syntax of Regexps.      (line 233)
* 正規表現の`\S':               Syntax of Regexps.      (line 233)
* safe-length:                  List Elements.          (line  99)
* save-buffer:                  Saving Buffers.         (line  14)
* save-current-buffer:          Current Buffer.         (line 102)
* save-excursion:               Excursions.             (line  17)
* save-match-data:              Saving Match Data.      (line  22)
* save-restriction:             Narrowing.              (line  50)
* save-selected-window:         Selecting Windows.      (line  26)
* save-some-buffers:            Saving Buffers.         (line  32)
* save-window-excursion:        Window Configurations.  (line  49)
* scan-lists:                   Parsing Expressions.    (line  75)
* scan-sexps:                   Parsing Expressions.    (line  93)
* `*scratch*':                  Auto Major Mode.        (line  97)
* screen-height:                Size and Position.      (line  30)
* screen-width:                 Size and Position.      (line  31)
* scroll-bar-event-ratio:       Accessing Events.       (line  53)
* scroll-bar-scale:             Accessing Events.       (line  58)
* scroll-down:                  Vertical Scrolling.     (line  43)
* scroll-left:                  Horizontal Scrolling.   (line  25)
* scroll-other-window:          Vertical Scrolling.     (line  54)
* scroll-right:                 Horizontal Scrolling.   (line  31)
* scroll-up:                    Vertical Scrolling.     (line  32)
* search-backward:              String Search.          (line  56)
* search-failed:                String Search.          (line  43)
* search-forward:               String Search.          (line  19)
* secondary-selection （フェイス名）: Standard Faces.   (line  23)
* selected-frame:               Input Focus.            (line  12)
* selected-window:              Selecting Windows.      (line  11)
* select-frame:                 Input Focus.            (line  32)
* select-safe-coding-system:    User-Chosen Coding Systems.  (line   8)
* select-window:                Selecting Windows.      (line  15)
* self-insert-and-exit:         Minibuffer Misc.        (line  14)
* self-insert-command:          Commands for Insertion.  (line  16)
* `self-insert-command'の無効化: Changing Key Bindings.  (line 141)
* `self-insert-command'、マイナモード: Keymaps and Minor Modes.  (line  11)
* send-string-to-terminal:      Terminal Output.        (line  32)
* sequencep:                    Sequence Functions.     (line  12)
* set:                          Setting Variables.      (line  41)
* set-auto-mode:                Auto Major Mode.        (line  66)
* set-buffer:                   Current Buffer.         (line  93)
* set-buffer-auto-saved:        Auto-Saving.            (line 100)
* set-buffer-major-mode:        Auto Major Mode.        (line  88)
* set-buffer-modified-p:        Buffer Modification.    (line  29)
* set-buffer-multibyte:         Selecting a Representation.  (line  11)
* setcar:                       Setcar.                 (line  12)
* set-case-syntax:              Case Tables.            (line  88)
* set-case-syntax-delims:       Case Tables.            (line  85)
* set-case-syntax-pair:         Case Tables.            (line  82)
* set-case-table:               Case Tables.            (line  74)
* set-category-table:           Categories.             (line  66)
* setcdr:                       Setcdr.                 (line  10)
* set-char-table-default:       Char-Tables.            (line  49)
* set-char-table-extra-slot:    Char-Tables.            (line  66)
* set-char-table-parent:        Char-Tables.            (line  59)
* set-char-table-range:         Char-Tables.            (line  92)
* set-default:                  Default Value.          (line  75)
* set-default-file-modes:       Changing Files.         (line 111)
* set-display-table-slot:       Display Table Format.   (line  66)
* setenv:                       System Environment.     (line 112)
* set-face-background:          Face Functions.         (line  38)
* set-face-bold-p:              Face Functions.         (line  59)
* set-face-font:                Face Functions.         (line  52)
* set-face-foreground:          Face Functions.         (line  37)
* set-face-italic-p:            Face Functions.         (line  63)
* set-face-stipple:             Face Functions.         (line  44)
* set-face-underline-p:         Face Functions.         (line  67)
* set-file-modes:               Changing Files.         (line 106)
* set-frame-configuration:      Frame Configurations.   (line  16)
* set-frame-height:             Size and Position.      (line  53)
* set-frame-position:           Size and Position.      (line  14)
* set-frame-size:               Size and Position.      (line  46)
* set-frame-width:              Size and Position.      (line  65)
* set-input-method:             Input Methods.          (line  27)
* set-input-mode:               Input Modes.            (line   8)
* set-keyboard-coding-system:   Terminal I/O Encoding.  (line  19)
* set-keymap-parent:            Inheritance and Keymaps.  (line  32)
* set-left-margin:              Margins.                (line  35)
* set-mark:                     The Mark.               (line  74)
* set-marker:                   Moving Markers.         (line  13)
* set-marker-insertion-type:    Marker Insertion Types.  (line  15)
* set-match-data:               Entire Match Data.      (line  32)
* set-mouse-pixel-position:     Mouse Position.         (line  26)
* set-mouse-position:           Mouse Position.         (line  16)
* setplist:                     Symbol Plists.          (line  11)
* set-process-buffer:           Process Buffers.        (line  46)
* set-process-coding-system:    Process Information.    (line 107)
* set-process-filter:           Filter Functions.       (line  85)
* set-process-sentinel:         Sentinels.              (line  59)
* setprv:                       System Environment.     (line 172)
* setq:                         Setting Variables.      (line  11)
* setq-default:                 Default Value.          (line  36)
* set-register:                 Registers.              (line  57)
* set-right-margin:             Margins.                (line  40)
* set-screen-height:            Size and Position.      (line  67)
* set-screen-width:             Size and Position.      (line  67)
* set-standard-case-table:      Case Tables.            (line  64)
* set-syntax-table:             Syntax Table Functions.  (line  88)
* set-terminal-coding-system:   Terminal I/O Encoding.  (line  28)
* set-text-properties:          Changing Properties.    (line  66)
* setting-constant:             Constant Variables.     (line   5)
* set-visited-file-modtime:     Modification Time.      (line  39)
* set-visited-file-name:        Buffer File Name.       (line  74)
* set-window-buffer:            Buffers and Windows.    (line  15)
* set-window-configuration:     Window Configurations.  (line  26)
* set-window-dedicated-p:       Choosing Window.        (line 165)
* set-window-display-table:     Active Display Table.   (line  19)
* set-window-hscroll:           Horizontal Scrolling.   (line  57)
* set-window-point:             Window Point.           (line  45)
* set-window-redisplay-end-trigger: Window Hooks.       (line  56)
* set-window-start:             Window Start.           (line  49)
* 浅い束縛（シャローバインディング、shallow binding）: Impl of Scope.  (line  24)
* shell-command-to-string:      Synchronous Processes.  (line 163)
* shell-quote-argument:         Shell Arguments.        (line  15)
* shrink-window:                Resizing Windows.       (line  39)
* shrink-window-horizontally:   Resizing Windows.       (line  48)
* shrink-window-if-larger-than-buffer: Resizing Windows.  (line  55)
* signal:                       Signaling Errors.       (line  37)
* signal-process:               Signals to Processes.   (line  81)
* simple-diary-display:         Fancy Diary Display.    (line   5)
* sin:                          Math Functions.         (line  10)
* single-key-description:       Describing Characters.  (line  19)
* `site-init.el':               Building Emacs.         (line  54)
* `site-load.el':               Building Emacs.         (line  41)
* `site-start.el':              Start-up Summary.       (line  37)
* sit-for:                      Waiting.                (line  13)
* skip-chars-backward:          Skipping Characters.    (line  48)
* skip-chars-forward:           Skipping Characters.    (line  12)
* skip-syntax-backward:         Motion and Syntax.      (line  17)
* skip-syntax-forward:          Motion and Syntax.      (line  11)
* sleep-for:                    Waiting.                (line  43)
* Snarf-documentation:          Accessing Documentation.  (line 103)
* sort:                         Rearrangement.          (line  97)
* sort-columns:                 Sorting.                (line 185)
* sort-diary-entries:           Fancy Diary Display.    (line  30)
* sort-fields:                  Sorting.                (line 171)
* sort-lines:                   Sorting.                (line 156)
* sort-numeric-fields:          Sorting.                (line 178)
* sort-pages:                   Sorting.                (line 166)
* sort-paragraphs:              Sorting.                (line 161)
* sort-regexp-fields:           Sorting.                (line 102)
* sort-subr:                    Sorting.                (line  12)
* SPC、ミニバッファ:            Text from Minibuffer.   (line 159)
* ミニバッファ、SPC:            Text from Minibuffer.   (line 159)
* `special':                    Major Mode Conventions.  (line 149)
* special-display-popup-frame:  Choosing Window.        (line 122)
* split-char:                   Splitting Characters.   (line  28)
* split-line:                   Commands for Insertion.  (line  52)
* split-string:                 Creating Strings.       (line 128)
* split-window:                 Splitting Windows.      (line  16)
* split-window-horizontally:    Splitting Windows.      (line 110)
* split-window-vertically:      Splitting Windows.      (line  96)
* sqrt:                         Math Functions.         (line  50)
* standard-case-table:          Case Tables.            (line  68)
* standard-category-table:      Categories.             (line  57)
* standard-syntax-table:        Standard Syntax Tables.  (line  11)
* start-process:                Asynchronous Processes.  (line  16)
* start-process-shell-command:  Asynchronous Processes.  (line  51)
* `startup.el':                 Start-up Summary.       (line   5)
* stop-process:                 Signals to Processes.   (line  68)
* store-match-data:             Entire Match Data.      (line  38)
* store-substring:              Modifying Strings.      (line  16)
* string:                       Creating Strings.       (line  25)
* string=:                      Text Comparison.        (line  19)
* string<:                      Text Comparison.        (line  42)
* 文字列クォート（string:       Syntax Class Table.     (line  52)
* string-as-multibyte:          Selecting a Representation.  (line  31)
* string-as-unibyte:            Selecting a Representation.  (line  25)
* string-equal:                 Text Comparison.        (line  39)
* string-lessp:                 Text Comparison.        (line  78)
* string-make-multibyte:        Converting Representations.  (line  64)
* string-make-unibyte:          Converting Representations.  (line  59)
* string-match:                 Regexp Search.          (line  72)
* stringp:                      Predicates for Strings.  (line  11)
* string-to-char:               String Conversion.      (line  25)
* string-to-int:                String Conversion.      (line  77)
* string-to-number:             String Conversion.      (line  57)
* string-width:                 Width.                  (line  16)
* subr:                         What Is a Function.     (line  21)
* subrp:                        What Is a Function.     (line  82)
* subst-char-in-region:         Substitution.           (line  11)
* substitute-command-keys:      Keys in Documentation.  (line  37)
* substitute-in-file-name:      File Name Expansion.    (line  66)
* substitute-key-definition:    Changing Key Bindings.  (line 104)
* substring:                    Creating Strings.       (line  31)
* suppress-keymap:              Changing Key Bindings.  (line 141)
* suspend-emacs:                Suspending Emacs.       (line  23)
* switch-to-buffer:             Displaying Buffers.     (line  23)
* switch-to-buffer-other-window: Displaying Buffers.    (line  48)
* シンボル構成文字（symbol:     Syntax Class Table.     (line  22)
* symbol-function:              Function Cells.         (line  14)
* symbol-name:                  Creating Symbols.       (line  65)
* symbolp:                      Symbols.                (line  16)
* symbol-plist:                 Symbol Plists.          (line   8)
* symbol-value:                 Accessing Variables.    (line  14)
* syntax-table:                 Syntax Table Functions.  (line  92)
* syntax-table （テキスト属性）: Syntax Properties.     (line   5)
* syntax-table-p:               Syntax Basics.          (line  40)
* system-name:                  System Environment.     (line  78)
* t:                            Constant Variables.     (line   5)
* `\t':                         Character Type.         (line  41)
* `t'と真:                      nil and t.              (line  22)
* `t'入力ストリーム:            Input Streams.          (line  41)
* `t'出力ストリーム:            Output Streams.         (line  30)
* TAB、ミニバッファ:            Text from Minibuffer.   (line 163)
* ミニバッファ、TAB:            Text from Minibuffer.   (line 163)
* tab-to-tab-stop:              Indent Tabs.            (line  16)
* tan:                          Math Functions.         (line  12)
* TCP:                          Network.                (line   5)
* temacs:                       Building Emacs.         (line   5)
* 環境変数`TERM':               Terminal-Specific.      (line  40)
* `TERM'、環境変数:             Terminal-Specific.      (line  40)
* Termcap:                      Terminal-Specific.      (line  20)
* terminal-coding-system:       Terminal I/O Encoding.  (line  24)
* terpri:                       Output Functions.       (line  84)
* text-char-description:        Describing Characters.  (line  34)
* text-mode-map:                Standard Keymaps.       (line 185)
* text-properties-at:           Examining Properties.   (line  39)
* text-property-any:            Property Search.        (line  84)
* text-property-not-all:        Property Search.        (line  93)
* thing-at-point:               Buffer Contents.        (line  56)
* this-command-keys:            Command Loop Info.      (line  56)
* this-command-keys-vector:     Command Loop Info.      (line  66)
* throw:                        Catch and Throw.        (line  76)
* `throw'の例:                  Recursive Editing.      (line  30)
* 例、`throw':                  Recursive Editing.      (line  30)
* 環境変数`TMP':                Unique File Names.      (line  35)
* `TMP'、環境変数:              Unique File Names.      (line  35)
* 環境変数`TMPDIR':             Unique File Names.      (line  35)
* `TMPDIR'、環境変数:           Unique File Names.      (line  35)
* today-invisible-calendar-hook: Calendar Customizing.  (line  63)
* today-visible-calendar-hook:  Calendar Customizing.   (line  45)
* toggle-read-only:             Read Only Buffers.      (line  45)
* top-level:                    Recursive Editing.      (line  96)
* tq-close:                     Transaction Queues.     (line  32)
* tq-create:                    Transaction Queues.     (line  13)
* tq-enqueue:                   Transaction Queues.     (line  19)
* track-mouse:                  Mouse Tracking.         (line  19)
* 暫定マーク（transient-mark）モード: The Mark.         (line 115)
* translate-region:             Substitution.           (line  33)
* transpose-regions:            Transposition.          (line  10)
* true（真）:                   nil and t.              (line  22)
* 真（true）:                   nil and t.              (line  22)
* truncate:                     Numeric Conversions.    (line  18)
* truncate-string-to-width:     Width.                  (line  20)
* try-completion:               Basic Completion.       (line  12)
* type-of:                      Type Predicates.        (line 162)
* undefined:                    Functions for Key Lookup.  (line  48)
* `undefined'、キーマップ:      Key Lookup.             (line  95)
* キーマップ内の`undefined':    Key Lookup.             (line  95)
* underline （フェイス名）:     Standard Faces.         (line  31)
* undo-boundary:                Undo.                   (line  63)
* unexec:                       Building Emacs.         (line  85)
* unhandled-file-name-directory: Magic File Names.      (line 128)
* unintern:                     Creating Symbols.       (line 150)
* universal-argument:           Prefix Command Arguments.  (line  95)
* unless:                       Conditionals.           (line  45)
* unload-feature:               Unloading.              (line  12)
* unlock-buffer:                File Locks.             (line  37)
* unwind-protect:               Cleanups.               (line  12)
* upcase:                       Case Conversion.        (line  36)
* upcase-initials:              Case Conversion.        (line  74)
* upcase-region:                Case Changes.           (line  43)
* upcase-word:                  Case Changes.           (line  72)
* update-directory-autoloads:   Autoload.               (line  87)
* update-file-autoloads:        Autoload.               (line  87)
* up-list:                      List Motion.            (line  24)
* use-global-map:               Active Keymaps.         (line 108)
* use-local-map:                Active Keymaps.         (line 114)
* user-full-name:               User Identification.    (line  42)
* user-full-name:               User Identification.    (line  51)
* user-login-name:              User Identification.    (line  27)
* user-login-name:              User Identification.    (line  51)
* user-real-login-name:         User Identification.    (line  38)
* user-real-login-name:         User Identification.    (line  51)
* user-real-uid:                User Identification.    (line  59)
* user-uid:                     User Identification.    (line  65)
* user-variable-p:              Defining Variables.     (line 125)
* 例、`user-variable-p':        High-Level Completion.  (line 108)
* `\v':                         Character Type.         (line  41)
* variable-documentation:       Documentation Basics.   (line  36)
* variable-interactive:         Defining Variables.     (line 134)
* vconcat:                      Vector Functions.       (line  33)
* vc-prefix-map:                Prefix Keys.            (line  53)
* vector:                       Vector Functions.       (line  18)
* vectorp:                      Vector Functions.       (line  10)
* verify-visited-file-modtime:  Modification Time.      (line  15)
* vertical-motion:              Screen Lines.           (line  34)
* view-calendar-holidays-initially: Calendar Customizing.  (line  16)
* view-diary-entries-initially: Calendar Customizing.   (line   5)
* view-file:                    Visiting Functions.     (line  91)
* view-mode-map:                Standard Keymaps.       (line 189)
* view-register:                Registers.              (line  62)
* visible-frame-list:           Finding All Frames.     (line  14)
* visited-file-modtime:         Modification Time.      (line  32)
* void-function:                Function Cells.         (line  14)
* void-variable:                Void Variables.         (line   5)
* `\w'、正規表現:               Syntax of Regexps.      (line 213)
* 正規表現の`\w':               Syntax of Regexps.      (line 213)
* `\W'、正規表現:               Syntax of Regexps.      (line 219)
* 正規表現の`\W':               Syntax of Regexps.      (line 219)
* waiting-for-user-input-p:     Sentinels.              (line  78)
* walk-windows:                 Cyclic Window Ordering.  (line  92)
* when:                         Conditionals.           (line  35)
* where-is-internal:            Scanning Keymaps.       (line  65)
* while:                        Iteration.              (line  12)
* 白文字（whitespace:           Syntax Class Table.     (line  11)
* wholenump:                    Predicates on Numbers.  (line  28)
* widen:                        Narrowing.              (line  43)
* window （オーバレイ属性）:    Overlay Properties.     (line  29)
* window-at:                    Coordinates and Windows.  (line  10)
* window-buffer:                Buffers and Windows.    (line  24)
* window-configuration-p:       Window Configurations.  (line  76)
* window-dedicated-p:           Choosing Window.        (line 161)
* window-display-table:         Active Display Table.   (line  15)
* window-edges:                 Size of Window.         (line  40)
* window-end:                   Window Start.           (line  34)
* window-frame:                 Frames and Windows.     (line  11)
* window-height:                Size of Window.         (line  14)
* window-hscroll:               Horizontal Scrolling.   (line  41)
* window-live-p:                Deleting Windows.       (line  19)
* window-minibuffer-p:          Minibuffer Misc.        (line  66)
* windowp:                      Basic Windows.          (line  81)
* window-point:                 Window Point.           (line  33)
* window-redisplay-end-trigger: Window Hooks.           (line  59)
* Windowsのファイル型:          MS-DOS File Types.      (line   5)
* window-start:                 Window Start.           (line  14)
* window-width:                 Size of Window.         (line  29)
* with-current-buffer:          Current Buffer.         (line 113)
* with-output-to-string:        Output Functions.       (line 112)
* with-output-to-temp-buffer:   Temporary Displays.     (line  11)
* with-temp-buffer:             Current Buffer.         (line 120)
* with-temp-file:               Writing to Files.       (line  61)
* with-timeout:                 Timers.                 (line  60)
* 単語構成文字（word:           Syntax Class Table.     (line  17)
* word-search-backward:         String Search.          (line  99)
* word-search-forward:          String Search.          (line  61)
* write-abbrev-file:            Abbrev Files.           (line  40)
* write-char:                   Output Functions.       (line  88)
* write-file:                   Saving Buffers.         (line  45)
* write-region:                 Writing to Files.       (line  22)
* wrong-number-of-arguments:    Argument List.          (line   5)
* wrong-type-argument:          Type Predicates.        (line   5)
* 複数のXディスプレイ:          Multiple Displays.      (line   5)
* Xウィンドウシステム:          Window Systems.         (line  18)
* セレクション（Xウィンドウシステム）: Window System Selections.  (line   5)
* x-close-connection:           Multiple Displays.      (line  55)
* x-color-defined-p:            Color Names.            (line   8)
* x-color-values:               Color Names.            (line  28)
* x-display-backing-store:      Server Data.            (line  36)
* x-display-color-cells:        Server Data.            (line  59)
* x-display-color-p:            Server Data.            (line  56)
* x-display-grayscale-p:        Server Data.            (line  53)
* x-display-list:               Multiple Displays.      (line  36)
* x-display-mm-height:          Server Data.            (line  27)
* x-display-mm-width:           Server Data.            (line  33)
* x-display-pixel-height:       Server Data.            (line  24)
* x-display-pixel-width:        Server Data.            (line  30)
* x-display-planes:             Server Data.            (line  44)
* x-display-save-under:         Server Data.            (line  40)
* x-display-screens:            Server Data.            (line  15)
* x-display-visual-class:       Server Data.            (line  47)
* x-get-cut-buffer:             Window System Selections.  (line  50)
* x-get-resource:               Resources.              (line   8)
* x-get-selection:              Window System Selections.  (line  30)
* x-list-font:                  Font Names.             (line   8)
* x-open-connection:            Multiple Displays.      (line  40)
* x-parse-geometry:             Size and Position.      (line  74)
* x-pointer-shape:              Pointer Shapes.         (line  11)
* x-popup-dialog:               Dialog Boxes.           (line  15)
* x-popup-menu:                 Pop-Up Menus.           (line  11)
* x-sensitive-text-pointer-shape: Pointer Shapes.       (line  15)
* x-server-vendor:              Server Data.            (line  21)
* x-server-version:             Server Data.            (line  18)
* x-set-cut-buffer:             Window System Selections.  (line  53)
* x-set-selection:              Window System Selections.  (line  14)
* yank:                         Yank Commands.          (line  11)
* yank-pop:                     Yank Commands.          (line  25)
* yes/noの問い合わせ:           Yes-or-No Queries.      (line   5)
* yes-or-no-p:                  Yes-or-No Queries.      (line  82)
* y-or-n-p:                     Yes-or-No Queries.      (line  23)
* y-or-n-p-with-timeout:        Yes-or-No Queries.      (line  77)
* zerop:                        Predicates on Numbers.  (line  35)





