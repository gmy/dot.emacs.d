Info file: elisp-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `elisp.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.


INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* Elisp-ja: (elisp-ja).	The Emacs Lisp Reference Manual(Japanese).
END-INFO-DIR-ENTRY



Emacs Lispリファレンスマニュアル2.5版であり, Emacs 20.3版に対応します.

Published by the Free Software Foundation 59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998 Free
Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the section entitled "GNU General Public License" is included exactly
as in the original, and provided that the entire resulting derived
work is distributed under the terms of a permission notice identical
to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the section entitled "GNU General Public
License" may be included in a translation approved by the Free
Software Foundation instead of in the original English.






File: elisp-ja, Node: Top, Next: Copying, Prev: (dir), Up: (dir)

このinfoファイルは, GNU Emacs Lispマニュアル 2.5版であり, GNU Emacs
20.3版に対応します.

* Menu:

* Copying::                 Conditions for copying and changing GNU Emacs.
* Introduction::            Introduction and conventions used.
* Standards: Coding Conventions.    Coding conventions for Emacs Lisp.

* Lisp Data Types::         Data types of objects in Emacs Lisp.
* Numbers::                 Numbers and arithmetic functions.
* Strings and Characters::  Strings, and functions that work on them.
* Lists::                   Lists, cons cells, and related functions.
* Sequences Arrays Vectors::  Lists, strings and vectors are called sequences.
                                Certain functions act on any kind of sequence.
                                The description of vectors is here as well.
* Symbols::                 Symbols represent names, uniquely.

* Evaluation::              How Lisp expressions are evaluated.
* Control Structures::      Conditionals, loops, nonlocal exits.
* Variables::               Using symbols in programs to stand for values.
* Functions::               A function is a Lisp program
                              that can be invoked from other functions.
* Macros::                  Macros are a way to extend the Lisp language.
* Customization::           Writing customization declarations.

* Loading::                 Reading files of Lisp code into Lisp.
* Byte Compilation::        Compilation makes programs run faster.
* Advising Functions::      Adding to the definition of a function.
* Debugging::               Tools and tips for debugging Lisp programs.

* Read and Print::          Converting Lisp objects to text and back.
* Minibuffers::             Using the minibuffer to read input.
* Command Loop::            How the editor command loop works,
                              and how you can call its subroutines.
* Keymaps::                 Defining the bindings from keys to commands.
* Modes::                   Defining major and minor modes.
* Documentation::           Writing and using documentation strings.

* Files::                   Accessing files.
* Backups and Auto-Saving:: Controlling how backups and auto-save
                              files are made.
* Buffers::                 Creating and using buffer objects.
* Windows::                 Manipulating windows and displaying buffers.
* Frames::		    Making multiple X windows.
* Positions::               Buffer positions and motion functions.
* Markers::                 Markers represent positions and update
                              automatically when the text is changed.

* Text::                    Examining and changing text in buffers.
* Non-ASCII Characters::    Non-ASCII text in buffers and strings.
* Searching and Matching::  Searching buffers for strings or regexps.
* Syntax Tables::           The syntax table controls word and list parsing.
* Abbrevs::                 How Abbrev mode works, and its data structures.

* Processes::               Running and communicating with subprocesses.
* System Interface::        Getting the user id, system type, environment
                              variables, and other such things.
* Display::	            Parameters controlling screen usage.
                              The bell.  Waiting for input.
* Calendar::		    Customizing the calendar and diary.

付録

* Tips::                    Advice and coding conventions for Emacs Lisp.
* GNU Emacs Internals::     Building and dumping Emacs;
                              internal data structures.
* Standard Errors::         List of all error symbols.
* Standard Buffer-Local Variables::
                            List of variables buffer-local in all buffers.
* Standard Keymaps::        List of standard keymaps.
* Standard Hooks::          List of standard hook variables.

* Index::                   Index including concepts, functions, variables,
                              and other terms.

* New Symbols::             New functions and variables in Emacs 20.

      −−− 詳細ノード一覧 −−−

以下は, 上にあげたノードの下位ノードです. 
直接移動できるように掲載しておきます. 

導入

* Caveats::                 Flaws and a request for help.
* Lisp History::            Emacs Lisp is descended from Maclisp.
* Conventions::             How the manual is formatted.
* Acknowledgements::        The authors, editors, and sponsors of this manual.

慣習

* Some Terms::              Explanation of terms we use in this manual.
* nil and t::               How the symbols `nil' and `t' are used.
* Evaluation Notation::     The format we use for examples of evaluation.
* Printing Notation::       The format we use for examples that print output.
* Error Messages::          The format we use for examples of errors.
* Buffer Text Notation::    The format we use for buffer contents in examples.
* Format of Descriptions::  Notation for describing functions, variables, etc.

ヒントと慣習

* Coding Conventions::      Conventions for clean and robust programs.
* Compilation Tips::        Making compiled code run fast.
* Documentation Tips::      Writing readable documentation strings.
* Comment Tips::	    Conventions for writing comments.
* Library Headers::         Standard headers for library packages.

記述形式

* A Sample Function Description::       
* A Sample Variable Description::   

Lispデータ型

* Printed Representation::  How Lisp objects are represented as text.
* Comments::                Comments and their formatting conventions.
* Programming Types::       Types found in all Lisp systems.
* Editing Types::           Types specific to Emacs.
* Type Predicates::         Tests related to types.
* Equality Predicates::     Tests of equality between any two objects.

プログラミング向けの型

* Integer Type::        Numbers without fractional parts.
* Floating Point Type:: Numbers with fractional parts and with a large range.
* Character Type::      The representation of letters, numbers and
                        control characters.
* Sequence Type::       Both lists and arrays are classified as sequences.
* Cons Cell Type::      Cons cells, and lists (which are made from cons cells).
* Array Type::          Arrays include strings and vectors.
* String Type::         An (efficient) array of characters.
* Vector Type::         One-dimensional arrays.
* Symbol Type::         A multi-use object that refers to a function,
                        variable, property list, or itself.
* Function Type::       A piece of executable code you can call from elsewhere.
* Macro Type::          A method of expanding an expression into another
                          expression, more fundamental but less pretty.
* Primitive Function Type::     A function written in C, callable from Lisp.
* Byte-Code Type::      A function written in Lisp, then compiled.
* Autoload Type::       A type used for automatically loading seldom-used
                        functions.

リスト型

* Dotted Pair Notation::    An alternative syntax for lists.
* Association List Type::   A specially constructed list.

編集向けの型

* Buffer Type::             The basic object of editing.
* Window Type::             What makes buffers visible.
* Window Configuration Type::Save what the screen looks like.
* Marker Type::             A position in a buffer.
* Process Type::            A process running on the underlying OS.
* Stream Type::             Receive or send characters.
* Keymap Type::             What function a keystroke invokes.
* Overlay Type::            How an overlay is represented.

数

* Integer Basics::            Representation and range of integers.
* Float Basics::	      Representation and range of floating point.
* Predicates on Numbers::     Testing for numbers.
* Comparison of Numbers::     Equality and inequality predicates.
* Arithmetic Operations::     How to add, subtract, multiply and divide.
* Bitwise Operations::        Logical and, or, not, shifting.
* Numeric Conversions::	      Converting float to integer and vice versa.
* Math Functions::            Trig, exponential and logarithmic functions.
* Random Numbers::            Obtaining random integers, predictable or not.

文字列と文字

* String Basics::           Basic properties of strings and characters.
* Predicates for Strings::  Testing whether an object is a string or char.
* Creating Strings::        Functions to allocate new strings.
* Text Comparison::         Comparing characters or strings.
* String Conversion::       Converting characters or strings and vice versa.
* Formatting Strings::      `format': Emacs's analogue of `printf'.
* Case Conversion::         Case conversion functions.

リスト

* Cons Cells::              How lists are made out of cons cells.
* Lists as Boxes::          Graphical notation to explain lists.
* List-related Predicates:: Is this object a list?  Comparing two lists.
* List Elements::           Extracting the pieces of a list.
* Building Lists::          Creating list structure.
* Modifying Lists::         Storing new pieces into an existing list.
* Sets And Lists::          A list can represent a finite mathematical set.
* Association Lists::       A list can represent a finite relation or mapping.

既存リスト構造の変更

* Setcar::                  Replacing an element in a list.
* Setcdr::                  Replacing part of the list backbone.
                              This can be used to remove or add elements.
* Rearrangement::           Reordering the elements in a list; combining lists.

シーケンス, 配列, ベクトル

* Sequence Functions::      Functions that accept any kind of sequence.
* Arrays::                  Characteristics of arrays in Emacs Lisp.
* Array Functions::         Functions specifically for arrays.
* Vectors::                 Functions specifically for vectors.

シンボル

* Symbol Components::       Symbols have names, values, function definitions
                              and property lists.
* Definitions::             A definition says how a symbol will be used.
* Creating Symbols::        How symbols are kept unique.
* Property Lists::          Each symbol has a property list
                              for recording miscellaneous information.

評価

* Intro Eval::              Evaluation in the scheme of things.
* Eval::                    How to invoke the Lisp interpreter explicitly.
* Forms::                   How various sorts of objects are evaluated.
* Quoting::                 Avoiding evaluation (to put constants in 
                              the program).

フォームの種類

* Self-Evaluating Forms::   Forms that evaluate to themselves.
* Symbol Forms::            Symbols evaluate as variables.
* Classifying Lists::       How to distinguish various sorts of list forms.
* Function Forms::          Forms that call functions.
* Macro Forms::             Forms that call macros.
* Special Forms::           "Special forms" are idiosyncratic primitives,
                              most of them extremely important.
* Autoloading::             Functions set up to load files
                              containing their real definitions.

制御構造

* Sequencing::              Evaluation in textual order.
* Conditionals::            `if', `cond'.
* Combining Conditions::    `and', `or', `not'.
* Iteration::               `while' loops.
* Nonlocal Exits::          Jumping out of a sequence.

非ローカル脱出

* Catch and Throw::         Nonlocal exits for the program's own purposes.
* Examples of Catch::       Showing how such nonlocal exits can be written.
* Errors::                  How errors are signaled and handled.
* Cleanups::                Arranging to run a cleanup form if an
                              error happens.

エラー

* Signaling Errors::        How to report an error.
* Processing of Errors::    What Emacs does when you report an error.
* Handling Errors::         How you can trap errors and continue execution.
* Error Symbols::           How errors are classified for trapping them.

変数

* Global Variables::        Variable values that exist permanently, everywhere.
* Constant Variables::      Certain "variables" have values that never change.
* Local Variables::         Variable values that exist only temporarily.
* Void Variables::          Symbols that lack values.
* Defining Variables::      A definition says a symbol is used as a variable.
* Accessing Variables::     Examining values of variables whose names
                              are known only at run time.
* Setting Variables::       Storing new values in variables.
* Variable Scoping::        How Lisp chooses among local and global values.
* Buffer-Local Variables::  Variable values in effect only in one buffer.

スコープルールと変数束縛

* Scope::                   Scope means where in the program a value 
                              is visible.  Comparison with other languages.
* Extent::                  Extent means how long in time a value exists.
* Impl of Scope::           Two ways to implement dynamic scoping.
* Using Scoping::           How to use dynamic scoping carefully and 
                              avoid problems.

バッファローカルな変数

* Intro to Buffer-Local::   Introduction and concepts.
* Creating Buffer-Local::   Creating and destroying buffer-local bindings.
* Default Value::           The default value is seen in buffers
                              that don't have their own buffer-local values.

関数

* What Is a Function::      Lisp functions vs primitives; terminology.
* Lambda Expressions::      How functions are expressed as Lisp objects.
* Function Names::          A symbol can serve as the name of a function.
* Defining Functions::      Lisp expressions for defining functions.
* Calling Functions::       How to use an existing function.
* Mapping Functions::       Applying a function to each element of a list, etc.
* Anonymous Functions::     Lambda-expressions are functions with no names.    
* Function Cells::          Accessing or setting the function definition
                              of a symbol.
* Related Topics::          Cross-references to specific Lisp primitives
                              that have a special bearing on how 
                              functions work.

ラムダ式

* Lambda Components::       The parts of a lambda expression.
* Simple Lambda::           A simple example.
* Argument List::           Details and special features of argument lists.
* Function Documentation::  How to put documentation in a function.

マクロ

* Simple Macro::            A basic example.
* Expansion::               How, when and why macros are expanded.
* Compiling Macros::        How macros are expanded by the compiler.
* Defining Macros::         How to write a macro definition.
* Backquote::               Easier construction of list structure.
* Problems with Macros::    Don't evaluate the macro arguments too many times.
                              Don't hide the user's variables.

ロード

* How Programs Do Loading:: The `load' function and others.
* Autoload::                Setting up a function to autoload.
* Named Features::          Loading a library if it isn't already loaded.
* Repeated Loading::        Precautions about loading a file twice.

バイトコンパイル

* Compilation Functions::   Byte compilation functions.
* Disassembly::             Disassembling byte-code; how to read byte-code.

関数のアドバイス

* Simple Advice::           A simple example to explain the basics of advice.
* Defining Advice::         Detailed description of `defadvice'.
* Computed Advice::         ...is to `defadvice' as `fset' is to `defun'.
* Activation of Advice::    Advice doesn't do anything until you activate it.
* Enabling Advice::         You can enable or disable each piece of advice.
* Preactivation::           Preactivation is a way of speeding up the
                              loading of compiled advice.
* Argument Access in Advice:: How advice can access the function's arguments.
* Subr Arguments::          Accessing arguments when advising a primitive.
* Combined Definition::     How advice is implemented.

Lispプログラムのデバッグ

* Debugger::                How the Emacs Lisp debugger is implemented.
* Syntax Errors::           How to find syntax errors.
* Compilation Errors::      How to find errors that show up in 
                              byte compilation.
* Edebug::                  A source-level Emacs Lisp debugger.
                                
Lispデバッガ

* Error Debugging::         Entering the debugger when an error happens.
* Function Debugging::      Entering it when a certain function is called.
* Explicit Debug::          Entering it at a certain point in the program.
* Using Debugger::          What the debugger does; what you see while in it.
* Debugger Commands::       Commands used while in the debugger.
* Invoking the Debugger::   How to call the function `debug'.
* Internals of Debugger::   Subroutines of the debugger, and global variables.

不正なLisp構文のデバッグ

* Excess Open::             How to find a spurious open paren or missing close.
* Excess Close::            How to find a spurious close paren or missing open.

Lispオブジェクトの読み取りと表示

* Streams Intro::           Overview of streams, reading and printing.
* Input Streams::           Various data types that can be used as 
                              input streams.
* Input Functions::         Functions to read Lisp objects from text.
* Output Streams::          Various data types that can be used as 
                              output streams.
* Output Functions::        Functions to print Lisp objects as text.

ミニバッファ

* Intro to Minibuffers::    Basic information about minibuffers.
* Text from Minibuffer::    How to read a straight text string.
* Object from Minibuffer::  How to read a Lisp object or expression.
* Completion::              How to invoke and customize completion.
* Yes-or-No Queries::       Asking a question with a simple answer.
* Minibuffer Misc::         Various customization hooks and variables.

補完

* Basic Completion::        Low-level functions for completing strings.
                              (These are too low level to use the minibuffer.)
* Minibuffer Completion::   Invoking the minibuffer with completion.
* Completion Commands::     Minibuffer commands that do completion.
* High-Level Completion::   Convenient special cases of completion
                              (reading buffer name, file name, etc.)
* Reading File Names::      Using completion to read file names.
* Programmed Completion::   Finding the completions for a given file name.

コマンドループ

* Command Overview::    How the command loop reads commands.
* Defining Commands::   Specifying how a function should read arguments.
* Interactive Call::    Calling a command, so that it will read arguments.
* Command Loop Info::   Variables set by the command loop for you to examine.
* Input Events::	What input looks like when you read it.
* Reading Input::       How to read input events from the keyboard or mouse.
* Waiting::             Waiting for user input or elapsed time.
* Quitting::            How `C-g' works.  How to catch or defer quitting.
* Prefix Command Arguments::    How the commands to set prefix args work.
* Recursive Editing::   Entering a recursive edit,
                          and why you usually shouldn't.
* Disabling Commands::  How the command loop handles disabled commands.
* Command History::     How the command history is set up, and how accessed.
* Keyboard Macros::     How keyboard macros are implemented.

コマンドの定義

* Using Interactive::       General rules for `interactive'.
* Interactive Codes::       The standard letter-codes for reading arguments
                              in various ways.
* Interactive Examples::    Examples of how to read interactive arguments.

キーマップ

* Keymap Terminology::        	Definitions of terms pertaining to keymaps.
* Format of Keymaps::		What a keymap looks like as a Lisp object.
* Creating Keymaps:: 		Functions to create and copy keymaps.
* Inheritance and Keymaps::	How one keymap can inherit the bindings
				  of another keymap.
* Prefix Keys::                 Defining a key with a keymap as its definition.
* Menu Keymaps::		A keymap can define a menu for X windows
				  or for use from the terminal.
* Active Keymaps::	        Each buffer has a local keymap
                                  to override the standard (global) bindings.
				Each minor mode can also override them.
* Key Lookup::                  How extracting elements from keymaps works.
* Functions for Key Lookup::    How to request key lookup.
* Changing Key Bindings::       Redefining a key in a keymap.
* Key Binding Commands::        Interactive interfaces for redefining keys.
* Scanning Keymaps::            Looking through all keymaps, for printing help.

メジャーモードとマイナモード

* Major Modes::             Defining major modes.
* Minor Modes::             Defining minor modes.
* Mode Line Format::        Customizing the text that appears in the mode line.
* Hooks::                   How to use hooks; how to write code that 
                              provides hooks.

メジャーモード

* Major Mode Conventions::  Coding conventions for keymaps, etc.
* Example Major Modes::     Text mode and Lisp modes.
* Auto Major Mode::         How Emacs chooses the major mode automatically.
* Mode Help::               Finding out how to use a mode.

マイナモード

* Minor Mode Conventions::  Tips for writing a minor mode.
* Keymaps and Minor Modes:: How a minor mode can have its own keymap.

モード行の書式

* Mode Line Data::          The data structure that controls the mode line.
* Mode Line Variables::     Variables used in that data structure.
* %-Constructs::            Putting information into a mode line.

説明文

* Documentation Basics::    Good style for doc strings.
                              Where to put them.  How Emacs stores them.
* Accessing Documentation:: How Lisp programs can access doc strings.
* Keys in Documentation::   Substituting current key bindings.
* Describing Characters::   Making printable descriptions of
                              non-printing characters and key sequences.
* Help Functions::          Subroutines used by Emacs help facilities.

ファイル

* Visiting Files::          Reading files into Emacs buffers for editing.
* Saving Buffers::          Writing changed buffers back into files.
* Reading from Files::      Reading files into other buffers.
* Writing to Files::        Writing new files from parts of buffers.
* File Locks::              Locking and unlocking files, to prevent
                                simultaneous editing by two people.
* Information about Files::   Testing existence, accessibility, size of files.
* Contents of Directories::   Getting a list of the files in a directory.
* Changing Files::          Renaming files, changing protection, etc.
* File Names::              Decomposing and expanding file names.

ファイルを訪問する

* Visiting Functions::      The usual interface functions for visiting.
* Subroutines of Visiting:: Lower-level subroutines that they use.

ファイルに関する情報

* Testing Accessibility::   Is a given file readable?  Writable?
* Kinds of Files::          Is it a directory?  A link?
* File Attributes::         How large is it?  Any other names?  Etc.

ファイル名

* File Name Components::    The directory part of a file name, and the rest.
* Directory Names::         A directory's name as a directory
                              is different from its name as a file.
* Relative File Names::     Some file names are relative to a 
                              current directory.
* File Name Expansion::     Converting relative file names to absolute ones.
* Unique File Names::       Generating names for temporary files.
* File Name Completion::    Finding the completions for a given file name.

バックアップと自動保存

* Backup Files::            How backup files are made; how their names 
                              are chosen.
* Auto-Saving::             How auto-save files are made; how their
                              names are chosen.
* Reverting::               `revert-buffer', and how to customize 
                              what it does.

バックアップファイル

* Making Backups::          How Emacs makes backup files, and when.
* Rename or Copy::          Two alternatives: renaming the old file 
                              or copying it.
* Numbered Backups::        Keeping multiple backups for each source file.
* Backup Names::            How backup file names are computed; customization.

バッファ

* Buffer Basics::           What is a buffer?
* Buffer Names::            Accessing and changing buffer names.
* Buffer File Name::        The buffer file name indicates which file
                              is visited.
* Buffer Modification::     A buffer is "modified" if it needs to be saved.
* Modification Time::       Determining whether the visited file was changed
                              "behind Emacs's back".
* Read Only Buffers::       Modifying text is not allowed in a
                              read-only buffer.
* The Buffer List::         How to look at all the existing buffers.
* Creating Buffers::        Functions that create buffers.
* Killing Buffers::         Buffers exist until explicitly killed.
* Current Buffer::          Designating a buffer as current
                              so primitives will access its contents.

ウィンドウ

* Basic Windows::           Basic information on using windows.
* Splitting Windows::       Splitting one window into two windows.
* Deleting Windows::        Deleting a window gives its space to other windows.
* Selecting Windows::       The selected window is the one that you edit in.
* Cyclic Window Ordering::  Moving around the existing windows.
* Buffers and Windows::     Each window displays the contents of a buffer.
* Displaying Buffers::      Higher-lever functions for displaying a buffer
                              and choosing a window for it.
* Window Point::            Each window has its own location of point.
* Window Start::            The display-start position controls which text
                              is on-screen in the window. 
* Vertical Scrolling::      Moving text up and down in the window.
* Horizontal Scrolling::    Moving text sideways on the window.
* Size of Window::          Accessing the size of a window.
* Resizing Windows::        Changing the size of a window.
* Window Configurations::   Saving and restoring the state of the screen.

フレーム

* Creating Frames::	    Creating additional frames.
* Multiple Displays::       Creating frames on other X displays.
* Frame Parameters::	    Controlling frame size, position, font, etc.
* Frame Titles::            Automatic updating of frame titles.
* Deleting Frames::	    Frames last until explicitly deleted.
* Finding All Frames::	    How to examine all existing frames.
* Frames and Windows::	    A frame contains windows;
			      display of text always works through windows.
* Minibuffers and Frames::  How a frame finds the minibuffer to use.
* Input Focus::		    Specifying the selected frame.
* Visibility of Frames::    Frames may be visible or invisible, or icons.
* Raising and Lowering::    Raising a frame makes it hide other X windows;
			      lowering it puts it underneath the others.
* Frame Configurations::    Saving the state of all frames.
* Mouse Tracking::	    Getting events that say when the mouse moves.
* Mouse Position::	    Asking where the mouse is, or moving it.
* Pop-Up Menus::	    Displaying a menu for the user to select from.
* Dialog Boxes::            Displaying a box to ask yes or no.
* Pointer Shapes::          Specifying the shape of the mouse pointer.
* Window System Selections::Transferring text to and from other windows.
* Color Names::	            Getting the definitions of color names.
* Resources::		    Getting resource values from the server.
* Server Data::		    Getting info about the X server.

バッファ内の位置

* Point::                   The special position where editing takes place.
* Motion::                  Changing point.
* Excursions::              Temporary motion and buffer changes.
* Narrowing::               Restricting editing to a portion of the buffer.

移動

* Character Motion::        Moving in terms of characters.
* Word Motion::             Moving in terms of words.
* Buffer End Motion::       Moving to the beginning or end of the buffer.
* Text Lines::              Moving in terms of lines of text.
* Screen Lines::            Moving in terms of lines as displayed.
* List Motion::             Moving by parsing lists and sexps.
* Skipping Characters::     Skipping characters belonging to a certain set.

マーカ

* Overview of Markers::     The components of a marker, and how it relocates.
* Predicates on Markers::   Testing whether an object is a marker.
* Creating Markers::        Making empty markers or markers at certain places.
* Information from Markers::  Finding the marker's buffer or character
                                position. 
* Moving Markers::          Moving the marker to a new buffer or position.
* The Mark::                How "the mark" is implemented with a marker.
* The Region::              How to access "the region".

テキスト

* Near Point::              Examining text in the vicinity of point.
* Buffer Contents::         Examining text in a general fashion.
* Insertion::               Adding new text to a buffer.
* Commands for Insertion::  User-level commands to insert text.
* Deletion::                Removing text from a buffer.
* User-Level Deletion::     User-level commands to delete text.
* The Kill Ring::           Where removed text sometimes is saved for
                              later use.
* Undo::                    Undoing changes to the text of a buffer.
* Auto Filling::            How auto-fill mode is implemented to break lines.
* Filling::                 Functions for explicit filling.
* Margins::                 How to specify margins for filling commands.
* Sorting::                 Functions for sorting parts of the buffer.
* Indentation::             Functions to insert or adjust indentation.
* Columns::                 Computing horizontal positions, and using them.
* Case Changes::            Case conversion of parts of the buffer.
* Text Properties::         Assigning Lisp property lists to text characters.
* Substitution::            Replacing a given character wherever it appears.
* Transposition::           Swapping two portions of a buffer.
* Registers::               How registers are implemented.  Accessing
                              the text or position stored in a register.
* Change Hooks::            Supplying functions to be run when text is changed.
                              
キルリング

* Kill Ring Concepts::      What text looks like in the kill ring.
* Kill Functions::          Functions that kill text.
* Yank Commands::           Commands that access the kill ring.
* Low-Level Kill Ring::	    Functions and variables for kill ring access.
* Internals of Kill Ring::  Variables that hold kill-ring data.

字下げ

* Primitive Indent::        Functions used to count and insert indentation.
* Mode-Specific Indent::    Customize indentation for different modes.
* Region Indent::           Indent all the lines in a region.
* Relative Indent::         Indent the current line based on previous lines.
* Indent Tabs::             Adjustable, typewriter-like tab stops.
* Motion by Indent::        Move to first non-blank character.

テキスト属性

* Examining Properties::    Looking at the properties of one character.
* Changing Properties::	    Setting the properties of a range of text.
* Property Search::	    Searching for where a property changes value.
* Special Properties::	    Particular properties with special meanings.
* Format Properties::       Properties for representing formatting of text.
* Sticky Properties::       How inserted text gets properties from
                              neighboring text.
* Saving Properties::       Saving text properties in files, and reading
                              them back.
* Lazy Properties::         Computing text properties in a lazy fashion
                              only when text is examined.
* Not Intervals::	    Why text properties do not use
			      Lisp-visible text intervals.

探索と一致

* String Search::           Search for an exact match.
* Regular Expressions::     Describing classes of strings.
* Regexp Search::           Searching for a match for a regexp.
* Match Data::              Finding out which part of the text matched
                              various parts of a regexp, after regexp search.
* Saving Match Data::       Saving and restoring this information.
* Standard Regexps::        Useful regexps for finding sentences, pages,...
* Searching and Case::      Case-independent or case-significant searching.

正規表現

* Syntax of Regexps::       Rules for writing regular expressions.
* Regexp Example::          Illustrates regular expression syntax.

構文テーブル

* Syntax Descriptors::      How characters are classified.
* Syntax Table Functions::  How to create, examine and alter syntax tables.
* Parsing Expressions::     Parsing balanced expressions
                              using the syntax table.
* Standard Syntax Tables::  Syntax tables used by various major modes.
* Syntax Table Internals::  How syntax table information is stored.

構文記述子

* Syntax Class Table::      Table of syntax classes.
* Syntax Flags::            Additional flags each character can have.

略語と略語の展開

* Abbrev Mode::             Setting up Emacs for abbreviation.
* Tables: Abbrev Tables.    Creating and working with abbrev tables.
* Defining Abbrevs::        Specifying abbreviations and their expansions.
* Files: Abbrev Files.      Saving abbrevs in files.
* Expansion: Abbrev Expansion.  Controlling expansion; expansion subroutines.
* Standard Abbrev Tables::  Abbrev tables used by various major modes.

プロセス

* Subprocess Creation::     Functions that start subprocesses.
* Synchronous Processes::   Details of using synchronous subprocesses.
* Asynchronous Processes::  Starting up an asynchronous subprocess.
* Deleting Processes::      Eliminating an asynchronous subprocess.
* Process Information::     Accessing run-status and other attributes.
* Input to Processes::      Sending input to an asynchronous subprocess.
* Signals to Processes::    Stopping, continuing or interrupting
                              an asynchronous subprocess.
* Output from Processes::   Collecting output from an asynchronous subprocess.
* Sentinels::               Sentinels run when process run-status changes.
* Network::                 Opening network connections.

プロセスからの出力を受け取る

* Process Buffers::         If no filter, output is put in a buffer.
* Filter Functions::        Filter functions accept output from the process.
* Accepting Output::        How to wait until process output arrives.

オペレーティングシステムとのインターフェイス

* Starting Up::             Customizing Emacs start-up processing.
* Getting Out::             How exiting works (permanent or temporary).
* System Environment::      Distinguish the name and kind of system.
* Terminal Input::          Recording terminal input for debugging.
* Terminal Output::         Recording terminal output for debugging.
* Flow Control::            How to turn output flow control on or off.
* Batch Mode::              Running Emacs without terminal interaction.

Emacsの始動

* Start-up Summary::        Sequence of actions Emacs performs at start-up.
* Init File::               Details on reading the init file (`.emacs').
* Terminal-Specific::       How the terminal-specific Lisp file is read.
* Command Line Arguments::  How command line arguments are processed,
                              and how you can customize them.

Emacsから抜ける

* Killing Emacs::           Exiting Emacs irreversibly.
* Suspending Emacs::        Exiting Emacs reversibly.

Emacsの画面表示

* Refresh Screen::          Clearing the screen and redrawing everything on it.
* Truncation::              Folding or wrapping long text lines.
* The Echo Area::           Where messages are displayed.
* Selective Display::       Hiding part of the buffer text.
* Overlay Arrow::           Display of an arrow to indicate position.
* Temporary Displays::      Displays that go away automatically.
* Waiting::                 Forcing display update and waiting for user.
* Blinking::                How Emacs shows the matching open parenthesis.
* Usual Display::	    How control characters are displayed.
* Beeping::                 Audible signal to the user.
* Window Systems::          Which window system is being used.

GNU Emacsの内部

* Building Emacs::          How to preload Lisp libraries into Emacs.
* Pure Storage::            A kludge to make preloaded Lisp functions sharable.
* Garbage Collection::      Reclaiming space for Lisp objects no longer used.
* Object Internals::        Data formats of buffers, windows, processes.
* Writing Emacs Primitives::  Writing C code for Emacs.

オブジェクトの内部

* Buffer Internals::        Components of a buffer structure.
* Window Internals::        Components of a window structure.
* Process Internals::       Components of a process structure.





File: elisp-ja, Node: Copying, Next: Introduction, Prev: Top, Up: Top

GNU一般公有使用許諾書
*********************
                       1991年6月 バージョン2.0

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.  675 Mass
     Ave, Cambridge, MA 02139, USA (1) (*Note Copying-Footnotes::)
     【注意】 現在, このバージョン2の発行者(FSF)住所は, 正式に新しい住所の
     59 Temple Place - Suite 330, Boston, MA 02111-1307, USA に変わっている. 

     何人も, 以下の内容を変更しないでそのまま複写する場合に限り, 
     本使用許諾書を複製したり頒布することができます. 


はじめに
========

 ほとんどのソフトウェアの使用許諾は, ソフトウェアを共有し, 変更するユー
ザの自由を奪うことを意図しています.  それに対して, 我々のGNU一般公有使
用許諾は, フリー・ソフトウェアを共有したり変更する自由をユーザに保証す
るためのもの, 即ちフリー・ソフトウェアがそのユーザ全てにとってフリーで
あることを保証するためのものです.  本使用許諾は, Free Software
Foundationのほとんど全てのソフトウェアに適用されるだけでなく, プログラ
ムの作成者が本使用許諾に依るとした場合のそのプログラムにも適用すること
ができます.  （その他の Free Software Foundation のソフトウェアのいく
つかは, 本許諾書ではなく, GNUライブラリ一般公有使用許諾で保護されま
す. ）あなたは自分のプログラムにもこれを適用できます.

 我々がフリー・ソフトウェアについて言う場合は自由のことに言及している
のであって, 価格のことではありません.  我々の一般公有使用許諾の各条項
は, 次の事柄を確実に実現することを目的として立案されています.
   * フリー・ソフトウェアの複製物を自由に頒布できること（そして, 望む
     ならあなたのこのサービスに対して対価を請求できること）.
   * ソース・コードを実際に受け取るか, あるいは, 希望しさえすればそれ
     を入手することが可能であること.
   * 入手したソフトウェアを変更したり, 新しいフリー・プログラムの一部
     として使用できること.
   * 以上の各内容を行なうことができるということをユーザ自身が知ってい
     ること.

 このようなユーザの権利を守るために, 我々は, 何人もこれらの権利を否定
したり, あるいは放棄するようにユーザに求めることはできないという制限条
項を設ける必要があります.  これらの制限条項は, ユーザが, フリー・ソフ
トウェアの複製物を頒布したり変更しようとする場合には, そのユーザ自身が
守るべき義務ともなります.

 例えば, あなたがフリー・ソフトウェアの複製物を頒布する場合, 有償か無
償かにかかわらず, あなたは自分の持っている権利を全て相手に与えなければ
なりません.  あなたは, 相手もまたソース・コードを受け取ったり入手でき
るということを認めなければなりません.  さらにあなたは, 彼らが自分たち
の権利を知るように, これらの条項を知らしめなければなりません.

　我々は次の２つの方法でユーザの権利を守ります.  （１）ソフトウェアに
著作権を主張し, （２）本使用許諾の条項の下でソフトウェアを複製・頒布・
変更する権利をユーザに与えます.

 また, 各作成者や我々自身を守るために, 本フリー・ソフトウェアが無保証
であることを全ての人々が了解している必要があります.  さらに, 他の誰か
によって変更されたソフトウェアが頒布された場合, 受領者はそのソフトウェ
アがオリジナル・バージョンではないということを知らされる必要があります. 
それは, 他人の関与によって原開発者に対する評価が影響されないようにする
ためです.

 最後に, どのフリー・プログラムもソフトウェア特許に絶えず脅かされてい
ます.  我々は, フリー・プログラムの再頒布者が個人的に特許権を取得し, 
事実上そのプログラムを自分の財産にしてしまうという危険を避けたいと願っ
ています.  これを防ぐために我々は, いずれの特許も, 誰でも自由に使用で
きるように使用許諾されるべきか, あるいは何人に対しても全く使用させない
かの, いずれかにすべきであることを明らかにしてきました.

 複写・頒布・変更に対する正確な条項と条件を次に示します.

    GNU一般公有使用許諾の下での複製, 頒布, 変更に関する条項と条件

  1. 本使用許諾は, 本一般公有使用許諾の各条項に従って頒布されるという
     著作権者からの告知文が表示されているプログラムやその他の作成物に
     適用されます.  以下において「プログラム」とは, そのようなプログラ
     ムや作成物を指すものとし, また, 「プログラム生成物」とは, 上述し
     た「プログラム」自身, または, 著作権法下における全ての派生物；す
     なわち, その「プログラム」の全部又は一部を, そのまま又は変更して, 
     且つ／又は他の言語に変換して, 内部に組み込んだ作成物を意味します. 
     （以下, 言語変換は「変更」という用語の中に無条件に含まれるものと
     します. ）本使用許諾によって許諾を受ける者を「あなた」と呼びま
     す. 　

     複製, 頒布, 変更以外の行為は本使用許諾の対象としません.  それらは
     本使用許諾の範囲外です.  「プログラム」を実行させる行為に関して制
     約はありません.  「プログラム」の出力は, （「プログラム」を実行さ
     せて作成させたかどうかとは無関係に）その内容が「プログラム生成物」
     である場合に限り本使用許諾の対象となります.  これが当てはまるかど
     うかは, 「プログラム」が何をするものかに依ります.

  2. あなたは, どのような媒体上へ複製しようとする場合であっても, 入手
     した「プログラム」のソース・コードをそのままの内容で複写した上で
     適正な著作権表示と保証の放棄を明確, 且つ適正に付記する場合に限り, 
     複製又は頒布することができます.  その場合, 本使用許諾及び無保証に
     関する記載部分は, 全て元のままの形で表示してください.  また, 「プ
     ログラム」の頒布先に対しては, 「プログラム」と共に本使用許諾書の
     写しを渡してください.

     複製物の引き渡しに要する実費は請求することができます.  また, あな
     た独自の保証を行なう場合はそれを有償とすることができます.

  3. 次の各条件を全て満たしている限り, あなたは, 「プログラム」又はそ
     の一部分を変更して「プログラム生成物」とすることができ, さらに, 
     変更版や右作成物を上記第２項に従って複製又は頒布することもできま
     す.

       a. ファイルを変更した旨とその変更日とを, 変更したファイル上に明
          確に表示すること.

       b. 変更したか否かを問わず, 凡そ「プログラム」又はその一部分を内
          部に組み込んでいるか又はそれから派生した生成物を頒布する場合
          には, その全体を本使用許諾の条項に従って第三者へ無償で使用許
          諾すること.

       c. 変更したプログラムが実行時に通常の対話的な方法でコマンドを読
          むようになっているとすれば, 最も普通の方法で対話的にそのプロ
          グラムを実行する時に, 次の内容を示す文言がプリンタへ印字され
          るか, 或いは画面に表示されること.
             * 適切な著作権表示.
             * 無保証であること（あなたが独自に保証する場合は, その旨）.
             * 頒布を受ける者も, 本使用許諾と同一の条項に従って「プロ
               グラム」を再頒布できること.
             * 頒布を受ける者が本使用許諾書の写しを参照する方法.  （例
               外として, 「プログラム」自体は対話的であっても起動時の
               文言を通常は印字しないのならば, あなたの「プログラム生
               成物」はこのような文言を印字する必要はありません. ）

     これらの要件は変更された作成物にも全て適用されます.  その変更版の
     或る部分が「プログラム」の派生物ではなく, しかもそれ自体独立で異
     なる作成物だと合理的に考えられる場合, あなたがそれらを別の作成物
     として頒布した時は, 本使用許諾とその条項はそれらの部分には適用さ
     れません.  しかし, それらを「プログラム生成物」の一部として頒布す
     る場合は, 全体が本使用許諾の条項に従って頒布されなければならず, 
     使用許諾を受ける他の全ての者に対する許諾もプログラム全体にわたっ
     て与えられなければならず, 結果として, 誰が書いたかにかかわらず, 
     全ての部分に本使用許諾が適用されなければなりません.

     このように, 本条項の意図するところは, 完全にあなたによって書かれ
     た作成物について, 権利を要求したり, あなたと権利関係を争うことで
     はありません.  むしろその目的は, 作成物が「プログラム生成物」であ
     る場合にその派生物や集合物の頒布を規制することにあります.

     さらに, 「プログラム」（又は「プログラム生成物」）と「プログラム
     生成物」とはならない他のプログラムとを, 単に保管や頒布のために同
     一の媒体上にまとめて記録したとしても, 本使用許諾は他のプログラム
     には適用されません.

  4. あなたは, 以下のうちいずれか１つを満たす限り, 上記第２項及び第３
     項に従って「プログラム」（又は, 上記第３項で言及している「プログ
     ラム生成物」）をオブジェクト・コード又は実行可能な形式で複製及び
     頒布することができます.

       a. 対応する機械読み取り可能なソース・コード一式を一緒に引き渡す
          こと.  その場合, そのソース・コードの引き渡しは上記第２項及
          び第３項に従って, 通常ソフトウェアの交換に用いられる媒体で行
          なわれること.

       b. 少なくとも３年間の有効期間を定め, 且つその期間内であれば対応
          する機械読み取り可能なソース・コード一式の複製を, ソース頒布
          に関わる実費以上の対価を要求せずに提供する旨, 及びその場合に
          は上記第２項及び第３項に従って, 通常ソフトウェアの交換に用い
          られる媒体で提供される旨を記載した書面を, 第三者に一緒に引き
          渡すこと.

       c. 対応するソース・コード頒布の申し出に際して, あなたが得た情報
          を一緒に引き渡すこと.  （この選択肢は, 営利を目的としない頒
          布であって, 且つあなたが上記の（ｂ）項に基づいて, オブジェク
          ト・コード或いは実行可能形式のプログラムしか入手していない場
          合に限り適用される選択項目です. ）

     なお, ソース・コードとは, 変更作業に適した記述形式を指します.  ま
     た, 実行可能形式のファイルに対応するソース・コード一式とは, それ
     に含まれる全モジュールに対応する全てのソース・コード, 及びあらゆ
     る関連のインタフェース定義ファイル, 及び実行を可能にするコンパイ
     ルとインストールの制御に関する記述を指します.  特別な例外として, 
     実行可能なファイルが動作するオペレーティング・システムの主要な構
     成要素（コンパイラ, カーネルなど）と共に（ソース・コード又はバイ
     ナリのどちらかで）頒布されているものについては, その構成要素自体
     が実行形式に付随していない場合に限り, 頒布されるソース・コードに
     含める必要はありません.

     実行可能形式またはオブジェクト・コードの頒布が, 指示された場所か
     らの複製のためのアクセス権の賦与である場合, 同じ場所からのソース・
     コードの複製のための同等なアクセス権を賦与すれば, たとえ第三者に
     オブジェクト・コードと共にソースの複製を強いなくとも, ソース・コー
     ドを頒布したものとみなします.

  5. 本使用許諾が明示的に許諾している場合を除き, あなたは, 「プログラ
     ム」を複製, 変更, サブライセンス, 頒布することができません.  本使
     用許諾に従わずに「プログラム」を複製, 変更, サブライセンス, 頒布
     しようとする行為は, それ自体が無効であり, 且つ, 本使用許諾があな
     たに許諾している「プログラム」の権利を自動的に消滅させます.  その
     場合, 本使用許諾に従ってあなたから複製物やその権利を得ている第三
     者は, 本使用許諾に完全に従っている場合に限り, 引続き有効な使用権
     限を持つものとします.

  6. あなたはまだ同意の印として署名していないので, 本使用許諾を受け入
     れる必要はありません.  しかし, あなたに「プログラム」又はその派生
     物を変更又は再頒布する許可を与えるものは本使用許諾以外にはありま
     せん.  これらの行為は, あなたがもし本使用許諾を受け入れないのであ
     れば, 法律によって禁じられます.  従って, あなたが「プログラム」
     （又は「プログラム生成物」）の変更又は頒布を行えば, それ自体であ
     なたは本使用許諾を受け入れ, 且つ, 「プログラム」又はその「プログ
     ラム生成物」の複製, 頒布, 変更に関するこれらの条項と条件の全てを
     受け入れたことを示します.

  7. あなたが「プログラム」（又はその「プログラム生成物」）を再頒布す
     ると自動的に, その受領者は, 元の使用許諾者から, 本使用許諾の条項
     に従って「プログラム」を複製, 頒布, 変更することを内容とする使用
     許諾を受けたものとします.  あなたは, 受領者に許諾された権利の行使
     について, さらに制約を加えることはできません.  あなたには, 第三者
     に本使用許諾の受け入れを強いる責任はありません.

  8. 裁判所の判決, 又は特許侵害の申し立て, 又は（特許問題に限らない）
     何らかの理由の結果として, あなたに課せられた条件が本使用許諾と相
     入れないものであったとしても（裁判所の命令, 契約, その他によるも
     のであれ）, 本使用許諾の条件が免除されるものではありません.  本使
     用許諾による責務と, その他の何らかの関連責務を同時に満たす態様で
     頒布することができないならば, あなたは「プログラム」を全く頒布し
     てはいけません.  例えば, 特許権の内容が, あなたから直接又は間接に
     複製を受け取った全ての人に使用料のないプログラムの再頒布を許さな
     いものであれば, あなたがかかる特許上の要請と本使用許諾の両方を満
     足させる方法は, 「プログラム」の頒布を完全に断念することだけです.

     本条項の或る部分が何らかの特別な状況下で無効または適用不可能になっ
     た場合, 本条項のその他の残りの部分が適用されるように意図されてお
     り, また, 本条項は全体としてその他の状況に当てはまるように意図さ
     れています.

     本条項の目的は, 特許やその他の財産権を侵害したり, そのような権利
     に基づく主張の妥当性を争うようにあなたに勧めることではありません. 
     本条項の唯一の目的は, フリー・ソフトウェアの頒布システムの完全性
     を守ることで, それは公有使用許諾の実践によって履行されます.  多く
     の人々が, このシステムの一貫した適用を信頼して, このシステムを通
     じて頒布されている幅広い範囲のソフトウェアに惜しみない貢献をして
     くれました.  作成者や寄贈者が他の何らかのシステムを通じてソフトウェ
     アを頒布したいと決めることは彼らの自由意志であり, 使用許諾を受け
     る者はその選択を強いることはできません.

     本条項は, 本使用許諾の他の条項の意味内容が何であるかを完全に明ら
     かにすることを意図しています.

  9. 「プログラム」の頒布・使用が, ある国において特許又は著作権で保護
     されたインタフェースのどちらかで制限される場合, 「プログラム」を
     本使用許諾下においた原著作権保持者は, その国を除外する旨の明示的
     な頒布地域制限を加え, それ以外の（除外されない）国に限定して頒布
     が許されるようにすることができます.  そのような場合, その制限を本
     使用許諾の本文にあたかも書かれているかのように本使用許諾の中に組
     み入れられるものとします.

 10. Free Software Foundation は随時, 本一般公有使用許諾の改訂版, 又は
     新版を公表することがあります.  そのような新しいバージョンは, 現行
     のバージョンと基本的に変わるところはありませんが, 新しい問題や懸
     案事項に対応するために細部では異なるかもしれません.

     各バージョンは, バージョン番号によって区別します.  「プログラム」
     中に本使用許諾のバージョン番号の指定がある場合は, その指定された
     バージョンか, 又はその後にFree Software Foundationから公表されて
     いるいずれかのバージョンから１つを選択して, その条項と条件に従っ
     てください.  「プログラム」中に本使用許諾のバージョン番号の指定が
     ない場合は, Free Software Foundation が公表したどのバージョンでも
     選択することができます.

 11. 「プログラム」の一部を頒布条件の異なる他のフリー・プログラムに組
     み込みたい場合は, その開発者に書面で許可を求めてください.  Free
     Software Foundation が著作権を持っているソフトウェアについては,
     Free Software Foundation へ書面を提出してください.  このような場
     合に対応するために我々は例外的処理をすることもありますが, その判
     断基準となるのは, 次の２つの目標の実現に合致するか否かという点で
     す.  即ち, １つは我々のフリー・ソフトウェアの全ての派生物をフリー
     な状態に保つことであり, もう１つはソフトウェアの共有と再利用とを
     広く促進させることです.

                                  無保証

 12. 「プログラム」は無償で使用許諾されますので, 適用法令の範囲内で, 
     「プログラム」の保証は一切ありません.  著作権者やその他の第三者は
     全く無保証で「そのまま」の状態で, 且つ, 明示か暗黙であるかを問わ
     ず一切の保証をつけないで提供するものとします.  ここでいう保証とは, 
     市場性や特定目的適合性についての暗黙の保証も含まれますが, それに
     限定されるものではありません.  「プログラム」の品質や性能に関する
     全てのリスクはあなたが負うものとします.  「プログラム」に欠陥があ
     るとわかった場合, それに伴う一切の派生費用や修理・訂正に要する費
     用は全てあなたの負担とします.

 13. 適用法令の定め, 又は書面による合意がある場合を除き, 著作権者や上
     記許諾を受けて「プログラム」の変更・再頒布を為し得る第三者は, 
     「プログラム」を使用したこと, または使用できないことに起因する一
     切の損害について何らの責任も負いません.  著作権者や前記の第三者が, 
     そのような損害の発生する可能性について知らされていた場合でも同様
     です.  なお, ここでいう損害には通常損害, 特別損害, 偶発損害, 間接
     損害が含まれます（データの消失, 又はその正確さの喪失, あなたや第
     三者が被った損失, 他のプログラムとのインタフェースの不適合化, 等
     も含まれますが, これに限定されるものではありません）.

                                 以上


注意
====
 英文文書（GNU General Public License）を正式文書とする.  この和文文書
は弁護士の意見を採り入れて, できるだけ正確に英文文書を翻訳したものであ
るが, 法律的に有効な契約書ではない.


和文文書自体の再配布に関して
============================
 いかなる媒体でも次の条件がすべて満たされている場合に限り, 本和文文書
をそのまま複写し配布することを許可する.  また, あなたは第三者に対して
本許可告知と同一の許可を与える場合に限り, 再配布することが許可されてい
ます.
   * 受領, 配布されたコピーに著作権表示および本許諾告知が前もって載せ
     られていること. 　
   * コピーの受領者がさらに再配布する場合, その配布者が本告知と同じ許
     可を与えていること.
   * 和文文書の本文を改変しないこと.


あなたの新しいプログラムにこれらの条項を適用する方法
====================================================

 あなたが新しくプログラムを作成し, それを公用に供したい場合は, プログ
ラムをフリー・ソフトウェアにして, 全ての人々が以上の各条項に従ってこれ
を再頒布や変更をすることができるようにするのが最良の方法です.

 そうするためには, プログラムに以下の表示をしてください.  その場合, 無
保証であるということを最も効果的に伝えるために, ソース・ファイルの冒頭
にその全文を表示すれば最も安全ですが, その他の方法で表示する場合でも, 
「著作権表示」と全文を読み出す為のアドレスへのポインタだけはファイル上
に表示しておいてください.

     プログラム名とどんな動作をするものかについての簡単な説明の行
     Ｃｏｐｙｒｉｇｈｔ（Ｃ）　１９○○年, 著作権者名

     本プログラムはフリー・ソフトウェアです. 
     あなたは, Free Software Foundationが公表したGNU 一般公有使用許諾の
     「バージョン２」或いはそれ以降の各バージョンの中からいずれかを選択し, 
     そのバージョンが定める条項に従って本プログラムを
     再頒布または変更することができます. 

     本プログラムは有用とは思いますが, 頒布にあたっては, 
     市場性及び特定目的適合性についての暗黙の保証を含めて, 
     いかなる保証も行ないません. 
     詳細についてはGNU 一般公有使用許諾書をお読みください. 

     あなたは, 本プログラムと一緒にGNU一般公有使用許諾の写しを受け取っ
     ているはずです.  そうでない場合は, 　Free Software Foundation,
     Inc., 675 Mass Ave, Cambridge, MA 02139, USA (2) (*Note
     Copying-Footnotes::)
     【注意】 現在, このバージョン2の発行者(FSF)住所は, 正式に新しい住所の
      59 Temple Place - Suite 330, Boston, MA 02111-1307, USA に変わっている. 
     へ手紙を書いてください. 

また, ユーザが電子メイルや書信であなたと連絡をとる方法についての情報も
書き添えてください.

プログラムが対話的に動作する場合は, 対話モードで起動した時に次のような
短い告知文が表示されるようにしてください.

     Ｇｎｏｍｏｖｉｓｉｏｎ　バージョン６９, Ｃｏｐｙｒｉｇｈｔ（Ｃ）１９○○年 著作権者名
     Gnomovision は完全に無保証です. 詳細は show w とタイプしてください. 
     これはフリー・ソフトウェアなので, 特定の条件の下でこれを再頒布する
     ことができます. 詳細は show c とタイプしてください. 

上記の`show w'や`show c'は各々, 本一般公有使用許諾の関連する部分を表示
するコマンドを指します.  もちろん, あなたが使うこれらのコマンドは`show
w'や`show c'といった呼び名でなくても構いません.  さらに, それらのコマ
ンドはあなたのプログラムに合わせる為に, マウスでクリックしたりメニュー
形式にすることもできます.

また, 必要と認めた場合には, あなたの雇い主（あなたがプログラマとして働
いている場合）や在籍する学校から, そのプログラムに対する「著作権放棄」
を認めた署名入りの書面を入手してください.  ここにその文例を載せま
す. 名前は変えてください.

     Yoyodyne, Inc. は, James Hacker が開発したプログラム`Gnomovision' 
     （コンパイラにつなげるプログラム）についての著作権法上の全ての権利を放棄する. 

     Ｔｙ　Ｃｏｏｎ　の署名，　１　Ａｐｒｉｌ　１９８９
     Ｔｙ　Ｃｏｏｎ，　副社長

本一般公有使用許諾は, あなたのプログラムを財産権の対象となっている他の
プログラムに組み込むことは認めていません.  あなたのプログラムがサブルー
チン・ライブラリであって, あなたがそのライブラリを財産権の対象となって
いる他のアプリケーションとリンクさせることによって, さらに有用なものに
しようとする場合には, 本使用許諾書の代わりに, GNUライブラリ一般公有使
用許諾書に従ってください.


