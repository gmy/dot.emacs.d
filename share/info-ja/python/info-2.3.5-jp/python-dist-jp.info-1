This is python-dist-jp.info, produced by makeinfo version 4.5 from
python-dist-jp.texi.


File: python-dist-jp.info,  Node: Top,  Next: はじめに,  Prev: (dir),  Up: (dir)

Python モジュールの配布
***********************

     このドキュメントでは、 Python モジュール配布ユーティリティ (Python
     Distribution Utilities, "Distutils") について、
     モジュール開発者の視点に立ち、多くの人々がビルド/リリース/インストール
     の負荷をほとんどかけずに Python モジュールや拡張モジュールを
     入手できるようにする方法について述べます。

* Menu:

* はじめに::
* 概念と用語::
* setup スクリプトを書く::
* setup 設定ファイル setup configuration file を書く::
* ソースコード配布物を作成する::
* ビルド済み配布物を作成する::
* パッケージインデクスに登録する::
* 例::
* リファレンスマニュアル::
* distutilssysconfig::
* 日本語訳について::
* Function-Method-Variable Index::
* Miscellaneous Index::


File: python-dist-jp.info,  Node: はじめに,  Next: 概念と用語,  Prev: Top,  Up: Top

はじめに
********

このドキュメントで扱っている内容は、 Distutils を使った Python
モジュールの配布で、とりわけ開発者/配布者の役割に重点を置いています:
Python モジュールのインストールに関する情報を探しているのなら、
マニュアル を参照してください。


File: python-dist-jp.info,  Node: 概念と用語,  Next: setup スクリプトを書く,  Prev: はじめに,  Up: Top

概念と用語
**********

Distutils の使い方は、モジュール開発者とサードパーティ製のモジュールを
インストールするユーザ/管理者のどちらにとってもきわめて単純です。
開発者側のやるべきことは (もちろん、しっかりした実装で、詳しく
文書化され、よくテストされたコードを書くことは別として！) 以下の
項目になります:
   * setup スクリプト (`setup.py' という名前にするのがならわし) を書く

   * (必要があれば) setup 設定ファイルを書く

   * ソースコード配布物を作成する

   * (必要があれば) 一つまたはそれ以上のビルド済み (バイナリ) 形式の
     配布物を作成する

これらの作業については、いずれもこのドキュメントで扱っています。

全てのモジュール開発者が複数の実行プラットフォームを利用できるわけでは
ないので、全てのプラットフォーム向けにビルド済みの配布物を提供して
もらえると期待するわけにはいきません。ですから、仲介を行う人々、
いわゆる _パッケージ作成者 (packager)_ がこの問題を解決すべく
立ち上がってくれることが望ましいでしょう。パッケージ作成者は
モジュール開発者がリリースしたソースコード配布物を、一つまたはそれ以上
のプラットフォーム上でビルドして、得られたビルド済み配布物をリリース
することになります。したがって、ほとんどの一般的なプラットフォームに
おけるユーザは、setup スクリプト一つ実行せず、コードを一行たりとも
コンパイルしなくても、使っているプラットフォーム向けのきわめて普通の
方法でほとんどの一般的な Python モジュール配布物をインストールできる
でしょう。

* Menu:

* 簡単な例::
* Python 一般の用語::
* Distutils 固有の用語::


File: python-dist-jp.info,  Node: 簡単な例,  Next: Python 一般の用語,  Prev: 概念と用語,  Up: 概念と用語

簡単な例
========

setup スクリプトは通常単純なものですが、Python で書かれているため、ス
クリプト中で何かを処理しようと考えたとき特に制限はありません。とはい
え、 setup スクリプト中に何かコストの大きな処理を行うときは十分
注意してください。 autoconf 形式の設定スクリプトとは違い、 setup
スクリプトはモジュール
配布物をビルドしてインストールする中で複数回実行されることがあります。

`foo.py' という名前のファイルに収められている `foo' という
名前のモジュールを配布したいだけなら、setup スクリプトは以下のような
単純なものになります:

     from distutils.core import setup
     setup(name="foo",
           version="1.0",
           py_modules=["foo"])

以下のことに注意してください:
   * Distutils に与えなければならない情報のほとんどは、 `setup()'
     関数のキーワード引数として与えます。

   * キーワード引数は二つのカテゴリ: パッケージのメタデータ
     (パッケージ名、バージョン番号) 、パッケージに何が収められているか
     の情報 (上の場合は pure Python
     モジュールのリスト)、に行き着きます。

   * モジュールはファイル名ではなく、モジュール名で指定します
     (パッケージと拡張モジュールについても同じです)

   * 作者名、電子メールアドレス、プロジェクトの URL といった
     追加のメタデータを入れておくよう奨めます (~*Note setup
     スクリプトを書く:: の 例を参照してください)

このモジュールのソースコード配布物を作成するには、 上記のコードが入った
setup スクリプト `setup.py' を作成して、以下のコマンド:

     python setup.py sdist

を実行します。

この操作を行うと、アーカイブファイル (例えば UNIXでは tarball、Windows
では ZIP ファイル) を作成します。アーカイブファイル には、setup
スクリプト `setup.py' と、配布したいモジュール `foo.py'
が入っています。アーカイブファイルの名前は `foo-1.0.targ.gz' (または
`.zip') になり、展開すると ディレクトリ `foo-1.0' を作成します。

エンドユーザが `foo' モジュールをインストールしたければ、
`foo-1.0.tar.gz' (または `.zip') をダウンロードし、
パッケージを展開して、以下のスクリプトを -- `foo-1.0' ディレクトリ中で
-- 実行します:

     python setup.py install

この操作を行うと、インストールされている Python での適切な
サードパーティ製モジュール置き場に`foo.py' を完璧に コピーします．

ここで述べた簡単な例では、 Distutils の基本的な概念のいくつかを
示しています。まず、開発者とインストール作業者は同じ基本
インタフェース、すなわち setup スクリプトを使っています。
二人の作業の違いは、使っている Distutils _コマンド (command)_
にあります: `sdist' コマンドは、ほぼ完全に開発者だけが
対象となる一方、`install' はどちらかというとインストール 作業者向けです
(とはいえ、ほとんどの開発者は自分のコードをインストール
したくなることがあるでしょう)。

ユーザにとって本当に簡単なものにしたいのなら、一つまたはそれ以上の
ビルド済み配布物を作ってあげられます。例えば、Windows マシン
上で作業をしていて、他の Windows
ユーザにとって簡単な配布物を提供したいのな ら、実行可能な形式の
(このプラットフォーム向けのビルド済み配布物としては もっとも適切な)
インストーラを作成できます。これには `bdist_wininst' を使います。例えば:

     python setup.py bdist_wininst

とすると、実行可能なインストーラ形式、`foo-1.0.win32.exe' が
現在のディレクトリに作成されます。

その他の有用な配布形態としては、`bdist_rpm' に実装 されている RPM
形式、 Solaris `pkgtool' (`bdist_pkgtool') 、 HP-UX `swinstall'
(`bdist_sdux') があります。例えば、以下のコマンドを実行すると、
`foo-1.0.noarch.rpm' という名前の RPM ファイルを作成します:

     python setup.py bdist_rpm

(`bdist_rpm' コマンドは `rpm' コマンドを使うため、 Red Hat Linux や
SuSE Linux、 Mandrake Linux といった RPM ベースの
システムで実行しなければなりません)

どの配布形式が利用できるかは、

     python setup.py bdist --help-formats

を実行すれば分かります。


File: python-dist-jp.info,  Node: Python 一般の用語,  Next: Distutils 固有の用語,  Prev: 簡単な例,  Up: 概念と用語

Python 一般の用語
=================

このドキュメントを読んでいるのなら、モジュール (module)、
拡張モジュール (extension) などが何を表すのかをよく知っているかも
しれません。とはいえ、読者がみな共通のスタートポイントに 立って
Distutils の操作を始められるように、ここで一般的な Python 用語
について以下のような用語集を示しておきます:
`モジュール (module)'
     Python においてコードを再利用する際の 基本単位:
     すなわち、他のコードから import されるひとかたまりのコード
     です。ここでは、三種類のモジュール: pure Python モジュール、
     拡張モジュール、パッケージが関わってきます。

`pure Python モジュール'
     Python で書かれ、単一の `.py' ファイル内に収められたモジュールです
     (`.pyc' かつ/または `.pyo' ファイルと関連があります) 。 "pure
     モジュール (pure module)" と呼ばれることもあります。

`拡張モジュール (extension module)'
     Python を実装している 低水準言語: Python の場合は C/C++ 、 Jython
     の場合は Java 、 で書かれたモジュールです。
     通常は、動的にロードできるコンパイル済みの単一のファイルに入っています。
     例えば、UNIX向け Python 拡張のための共有オブジェクト (`.so') 、
     Windows 向け Python 拡張のための DLL (`.pyd' という拡張子が与えら
     れています)、 Jython 拡張のための Java クラスといった具合です。
     (現状では、 Distutils は Python 向けの C/C++ 拡張モジュールしか
     扱わないので注意してください。)

`パッケージ (package)'
     他のモジュールが入っているモジュールです;
     通常、ファイルシステム内のあるディレクトリに収められ、
     `__init__.py' が入っていることで通常のディレクトリと区別 できます。

`ルートパッケージ (root package)'
     階層的なパッケージの根 (root)
     の部分にあたるパッケージです。(この部分には `__init__.py'
     ファイルがないので、本当のパッケージではありませんが、便宜上
     そう呼びます。) 標準ライブラリの大部分はルートパッケージに入って
     います、また、多くの小規模な単体のサードパーティモジュールで、他の
     大規模なモジュールコレクションに属していないものもここに入ります。
     正規のパッケージと違い、ルートパッケージ上のモジュールの実体は様々な
     ディレクトリにあります: 実際は、`sys.path' に列挙されている
     ディレクトリ全てが、ルートパッケージに配置されるモジュールの内容に
     影響します。


File: python-dist-jp.info,  Node: Distutils 固有の用語,  Prev: Python 一般の用語,  Up: 概念と用語

Distutils 固有の用語
====================

以下は Distutils を使って Python モジュールを配布する際に使われる
特有の用語です:
`モジュール配布物 (module distribution)'
     一個のファイルとして
     ダウンロード可能なリソースの形をとり、_一括して_
     インストールされることになっている形態で配られる Python
     モジュールの
     コレクションです。よく知られたモジュール配布物には、Numeric
     Python、 PyXML、 PIL (the Python Imaging Library)、 mxBase
     などがあります。 (_パッケージ (package)_
     と呼ばれることもありますが、 Python
     用語としてのパッケージとは意味が違います: 一つのモジュール配布物
     の中には、場合によりゼロ個、一つ、それ以上の Python パッケージが
     入っています。)

`pure モジュール配布物 (pure module distribution)'
     pure Python モジュールやパッケージだけが入ったモジュール配布物
     です。"pure 配布物 (pure distribution)" とも呼ばれます。

`非 pure モジュール配布物 (non-pure module distribution)'
     少なくとも一つの拡張モジュールが入ったモジュール配布物です。 "非
     pure 配布物"とも呼びます。

`配布物ルートディレクトリ (distribution root)'
     ソースコードツリー (またはソース配布物) ディレクトリの最上階層で、
     `setup.py' の ある場所です。一般的には、 `setup.py'
     はこのディレクトリ上で 実行します。


File: python-dist-jp.info,  Node: setup スクリプトを書く,  Next: setup 設定ファイル setup configuration file を書く,  Prev: 概念と用語,  Up: Top

setup スクリプトを書く
**********************

setup スクリプトは、Distutils を使ってモジュールをビルドし、配布し、
インストールする際の全ての動作の中心になります。 setup
スクリプトの主な目的は、モジュール配布物について Distutils に
伝え、モジュール配布を操作するための様々なコマンドを正しく動作させる
ことにあります。 上の ~*Note 簡単な例:: の節で見てきたように、 setup
スクリプトは主に `setup()' の呼び出しからなり、 開発者が distuils
に対して与えるほとんどの情報は `setup()'
のキーワード引数として指定されます。

ここではもう少しだけ複雑な例: Distutils 自体の setup スクリプト、を
示します。これについては、以降の二つの節でフォローします。 (Distutils
が入っているのは Python 1.6 以降であり、 Python 1.5.2
ユーザが他のモジュール配布物をインストールできるようにするための
独立したパッケージがあることを思い出してください。
ここで示した、Distutils 自身の setup スクリプトは、Python 1.5.2 に
Distutils パッケージをインストールする際に使います。)

     #!/usr/bin/env python
     
     from distutils.core import setup
     
     setup(name="Distutils",
           version="1.0",
           description="Python Distribution Utilities",
           author="Greg Ward",
           author_email="gward@python.net",
           url="http://www.python.org/sigs/distutils-sig/",
           packages=['distutils', 'distutils.command'],
          )

上の例と、 ~*Note 簡単な例:: で示したファイル一つからなる小さな
配布物とは、違うところは二つしかありません: メタデータの追加と、
モジュールではなくパッケージとして pure Python モジュール群を
指定しているという点です。この点は重要です。というのも、 Distutils は 2
ダースものモジュールが (今のところ) 二つのパッケージに分かれて入って
いるからです; 各モジュールについていちいち明示的に記述したリストは、
作成するのが面倒だし、維持するのも難しくなるでしょう。
その他のメタデータについては、 ~*Note setup スクリプトをデバッグする::
を参照してください。

setup スクリプトに与えるパス名 (ファイルまたはディレクトリ) は、 UNIX
におけるファイル名規約、つまりスラッシュ ('/') 区切りで
書かねばなりません。Distutils はこのプラットフォーム中立の表記を、
実際にパス名として使う前に、現在のプラットフォームに適した表記に
注意深く変換します。この機能のおかげで、setup スクリプトを異なる
オペレーティングシステム間にわたって可搬性があるものにできます。
言うまでもなく、これは Distutils の大きな目標の一つです。
この精神に従って、このドキュメントでは全てのパス名をスラッシュ区切り
にしています。 (MacOS プログラマは、先頭にスラッシュが _ない_ 場合は、
_相対パス_ を表すということを心に留めておかねば
なりません。この規約は、コロンを使った MacOS での規約と逆だからです。)

もちろん、この取り決めは Distutils に渡すパス名だけに適用されます。
もし、例えば `glob.glob()' や `os.listdir()' の ような、標準の Python
関数を使ってファイル群を指定するのなら、 パス区切り文字 (path
separator) をハードコーディングせず、
以下のように可搬性のあるコードを書くよう注意すべきです:

         glob.glob(os.path.join('mydir', 'subdir', '*.html'))
         os.listdir(os.path.join('mydir', 'subdir'))

* Menu:

* パッケージを全て列挙する::
* 個々のモジュールを列挙する::
* 拡張モジュールについて記述する::
* スクリプトをインストールする::
* 追加のファイルをインストールする::
* 追加のメタデータ::
* setup スクリプトをデバッグする::


File: python-dist-jp.info,  Node: パッケージを全て列挙する,  Next: 個々のモジュールを列挙する,  Prev: setup スクリプトを書く,  Up: setup スクリプトを書く

パッケージを全て列挙する
========================

`packages' オプションは、 `packages' リスト中で
指定されている各々のパッケージについて、パッケージ内に見つかった 全ての
pure Python モジュールを処理 (ビルド、配布、インストール、等) するよう
Distutils に指示します。このオプションを指定するためには、
当然のことながら各パッケージ名はファイルシステム上のディレクトリ名と
何らかの対応付けができなければなりません。デフォルトで使われる
対応関係はきわめてはっきりしたものです。すなわち、パッケージ
`distutils' が配布物ルートディレクトリからの相対パス `distutils'
で表されるディレクトリ中にあるというものです。 つまり、setup
スクリプト中で `packages = ['foo']' と指定したら、
スクリプトの置かれたディレクトリからの相対パスで `foo/__init__.py'
を探し出せると Distutils に確約した ことになります。この約束を裏切ると
Distutils は警告を出しますが、
そのまま壊れたパッケージの処理を継続します。

ソースコードディレクトリの配置について違った規約を使っていても、
まったく問題はありません: 単に `package_dir' オプションを 指定して、
Distutils に自分の規約を教えればよいのです。 例えば、全ての Python
ソースコードを `lib' 下に置いて、 "ルートパッケージ" 内のモジュール
(つまり、どのパッケージ にも入っていないモジュール) を `lib' 内に入れ、
`foo' パッケージを `lib/foo' に入れる、といった 具合にしたいのなら、

     package_dir = {'': 'lib'}

を setup スクリプト内に入れます。辞書内のキーはパッケージ名で、
空のパッケージ名はルートパッケージを表します。キーに対応する値は
ルートパッケージからの相対ディレクトリ名です、この場合、 `packages =
['foo']' を指定すれば、 `lib/foo/__init__.py' が存在すると Distutils に
確約したことになります。

もう一つの規約のあり方は `foo' パッケージを `lib' に
置き換え、`foo.bar' パッケージが `lib/bar' にある、
などとするものです。このような規約は、 setup スクリプトでは

     package_dir = {'foo': 'lib'}

のように書きます。 `package_dir' 辞書に `PACKAGE: DIR'
のようなエントリがあると、 PACKAGE
の下にある全てのパッケージに対してこの規則が
暗黙のうちに適用され、その結果 `foo.bar' の場合が自動的に 処理されます。
この例では、 `packages = ['foo', 'foo.bar']' は、 Distutils に
`lib/__init__.py' と `lib/bar/__init__.py' を探すように指示します。
(`package_dir' は再帰的に適用されますが、この場合 `packages'
の下にある全てのパッケージを明示的に指定
しなければならないことを心に留めておいてください: Distutils は
`__init__.py' を持つディレクトリを ソースツリーから再帰的にさがしたりは
_しません_ 。)


File: python-dist-jp.info,  Node: 個々のモジュールを列挙する,  Next: 拡張モジュールについて記述する,  Prev: パッケージを全て列挙する,  Up: setup スクリプトを書く

個々のモジュールを列挙する
==========================

小さなモジュール配布物の場合、パッケージを列挙するよりも、
全てのモジュールを列挙するほうがよいと思うかもしれません --
特に、単一のモジュールが "ルートパッケージ" にインストール される
(すなわち、パッケージは全くない) ような場合がそうです。
この最も単純なケースは ~*Note 簡単な例:: で示しました;
ここではもうちょっと入り組んだ例を示します:

     py_modules = ['mod1', 'pkg.mod2']

ここでは二つのモジュールについて述べていて、一方は "ルート"
パッケージに入り、他方は `pkg' パッケージに入ります。
ここでも、デフォルトのパッケージ/ディレクトリのレイアウトは、
二つのモジュールが `mod1.py' と `pkg/mod2.py' にあり、`pkg/__init__.py'
が存在することを暗示して
います。また、パッケージ/ディレクトリの対応関係は `package_dir'
オプションでも上書きできます。


File: python-dist-jp.info,  Node: 拡張モジュールについて記述する,  Next: スクリプトをインストールする,  Prev: 個々のモジュールを列挙する,  Up: setup スクリプトを書く

拡張モジュールについて記述する
==============================

pure Python モジュールを書くより Python 拡張モジュールを書く方が
ちょっとだけ複雑なように、 Distutils での拡張モジュールに関する
記述もちょっと複雑です。pure モジュールと違い、単にモジュールや
パッケージを列挙して、Distutils が正しいファイルを見つけてくれる
と期待するだけでは十分ではありません; 拡張モジュールの名前、
ソースコードファイル (群) 、そして何らかのコンパイル/リンクに
関する必要事項 (include ディレクトリ、リンクすべきライブラリ、等)
を指定しなければなりません。

こうした指定は全て、 `setup()' の別のキーワード 引数、 `extensions'
オプションを介して行えます。 `extensions' は、 `Extensions'
インスタンスから
なるただのリストで、各インスタンスに一個の拡張モジュールを
記述するようになっています。仮に、`foo.c' で実装された 拡張モジュール
`foo' が、配布物に一つだけ入ってるとします。
コンパイラ/リンカに他の情報を与える必要がない場合、この拡張
モジュールのための記述はきわめて単純です:

     Extension("foo", ["foo.c"])

`Extension' クラスは、 `setup()' によって、 `distutils.core' から
import されます。
従って、拡張モジュールが一つだけ入っていて、他には何も入っていない
モジュール配布物を作成するための setup スクリプトは、以下のように
なるでしょう:

     from distutils.core import setup, Extension
     setup(name="foo", version="1.0",
           ext_modules=[Extension("foo", ["foo.c"])])

`Explained' クラス (実質的には、`Explained' クラスの 根底にある
`build_ext' コマンドで実装されている、拡張 モジュールをビルドする機構)
は、Python 拡張モジュールをきわめて
柔軟に記述できるようなサポートを提供しています。
これについては後の節で説明します。

* Menu:

* 拡張モジュールの名前とパッケージ::
* 拡張モジュールのソースファイル::
* プリプロセッサオプション::
* ライブラリオプション::
* その他の操作::


File: python-dist-jp.info,  Node: 拡張モジュールの名前とパッケージ,  Next: 拡張モジュールのソースファイル,  Prev: 拡張モジュールについて記述する,  Up: 拡張モジュールについて記述する

拡張モジュールの名前とパッケージ
--------------------------------

`Extension' クラスのコンストラクタに与える最初の引数は、
常に拡張モジュールの名前にします。これにはパッケージ名も含めます。
例えば、

     Extension("foo", ["src/foo1.c", "src/foo2.c"]p)

とすると、拡張モジュールをルートパッケージに置くことになります。一方、

     Extension("pkg.foo", ["src/foo1.c", "src/foo2.c"])

は、同じ拡張モジュールを `pkg' パッケージの下に置くよう
記述しています。ソースコードファイルと、作成されるオブジェクトコードは
どちらの場合でも同じです; 作成された拡張モジュールがファイルシステム
上のどこに置かれるか (すなわち Python の名前空間上のどこに置かれるか)
が違うにすぎません。

同じパッケージ内に (または、同じ基底パッケージ下に) いくつもの拡張
モジュールがある場合、`ext_package' キーワード引数を `setup()'
に指定します。例えば、

     setup(...
           ext_package="pkg",
           ext_modules=[Extension("foo", ["foo.c"]),
                        Extension("subpkg.bar", ["bar.c"])]
          )

とすると、 `foo.c' をコンパイルして `pkg.foo' にし、 `bar.c'
をコンパイルして `pkg.subpkg.bar' にします。


File: python-dist-jp.info,  Node: 拡張モジュールのソースファイル,  Next: プリプロセッサオプション,  Prev: 拡張モジュールの名前とパッケージ,  Up: 拡張モジュールについて記述する

拡張モジュールのソースファイル
------------------------------

`Extension' コンストラクタの二番目の引数は、ソースファイルの
リストです。 Distutils は現在のところ、C、C++、そして Objective-C
の拡張しかサポートしていないので、引数は通常 C/C++/Objective-C
ソースコードファイルになります。 (C++ソースコードファイルを区別
できるよう、正しいファイル拡張子を使ってください:  `.cc' や `.cpp'
にすれば、 UNIX と Windows 用の双方のコンパイラで 認識されるようです。)

ただし、 SWIG インタフェース (`.i') ファイルはリストに含め られます;
`build_ext' コマンドは、 SWIG で書かれた
拡張パッケージをどう扱えばよいか心得ています: `build_ext'
は、インタフェースファイルを SWIG にかけ、得られた C/C++
ファイルをコンパイルして拡張モジュールを生成します。

*SWIG サポートはまだ荒削りで、ほとんどテストされていません; C++
拡張に対する SWIG サポートは特にそうです! インタフェース仕様が
固まったときに、もっと詳細な説明をここに。*

プラットフォームによっては、コンパイラで処理され、拡張モジュールに
取り込まれるような非ソースコードファイルを含められます。
非ソースコードファイルとは、現状では Visual C++向けの Windows
メッセージテキスト (`.mc') ファイルや、リソース定義 (`.rc')
ファイルを指します。これらのファイルはバイナリリソース (`.res')
ファイルにコンパイルされ、実行ファイルにリンクされます。


File: python-dist-jp.info,  Node: プリプロセッサオプション,  Next: ライブラリオプション,  Prev: 拡張モジュールのソースファイル,  Up: 拡張モジュールについて記述する

プリプロセッサオプション
------------------------

`Extension' には三種類のオプション引数: `include_dirs',
`define_macros', そして `undef_macros' があり、検索対象に
するインクルードディレクトリを指定したり、プリプロセッサマクロを 定義
(define)/定義解除 (undefine) したりする必要があるとき役立ちます。

例えば、拡張モジュールが配布物ルート下の `include'
ディレクトリにあるヘッダファイルを必要とするときには、 `include_dirs'
オプションを使います:

     Extension("foo", ["foo.c"], include_dirs=["include"])

ここには絶対パスも指定できます; 例えば、自分の拡張モジュールが、 `/usr'
の下にX11R6 をインストールした UNIX システムだけで
ビルドされると知っていれば、

     Extension("foo", ["foo.c"], include_dirs=["/usr/include/X11"])

のように書けます。

自分のコードを配布する際には、このような可搬性のない使い方は
避けるべきです: おそらく、 C のコードを
     #include <X11/Xlib.h>

のように書いた方がましでしょう。

他の Python 拡張モジュール由来のヘッダを include する必要があるなら、
Distutils の `install_header' コマンドが一貫した方法で
ヘッダファイルをインストールするという事実を活用できます。 例えば、
Numerical Python のヘッダファイルは、 (標準的な Unix が
インストールされた環境では) `/usr/local/include/python1.5/Numerical'
にインストールされます。 (実際の場所は、プラットフォームやどの Python
をインストールしたかで 異なります。) Python の include ディレクトリ --
今の例では `/usr/local/include/python1.5' -- は、 Python
拡張モジュールを
ビルドする際に常にヘッダファイル検索パスに取り込まれるので、 C
コードを書く上でもっともよいアプローチは、
     #include <Numerical/arrayobject.h>

となります。

`Numerical' インクルードディレクトリ自体をヘッダ検索パス
に置きたいのなら、このディレクトリを Distutils の `sysconfig'
モジュールを使って見つけさせられます:

     from distutils.sysconfig import get_python_inc
     incdir = os.path.join(get_python_inc(plat_specific=1), "Numerical")
     setup(...,
           Extension(..., include_dirs=[incdir]))

この書き方も可搬性はあります -- プラットフォームに関わらず、 どんな
Python がインストールされていても動作します -- が、
単に実践的な書き方で C コードを書く方が簡単でしょう。

`define_macros' および `undef_macros' オプションを使って、
プリプロセッサマクロを定義 (define) したり、定義解除 (undefine)
したりもできます。 `define_macros' はタプル `(name, value)'
からなるリストを 引数にとります。`name' は定義したいマクロの名前
(文字列) で、 `value' はその値です: `value' は文字列か `None' に
なります。(マクロ `FOO' を `None' にすると、C ソースコード内 で
`#define FOO' と書いたのと同じになります: こう書くと、
ほとんどのコンパイラは `FOO' を文字列 `1' に設定します。)
`undef_macros' には、定義解除したいマクロ名からなるリストを 指定します。

例えば、以下の指定:

     Extension(...,
               define_macros=[('NDEBUG', '1'),
                              ('HAVE_STRFTIME', None)],
               undef_macros=['HAVE_FOO', 'HAVE_BAR'])

は、全ての C ソースコードファイルの先頭に、以下のマクロ:

     #define NDEBUG 1
     #define HAVE_STRFTIME
     #undef HAVE_FOO
     #undef HAVE_BAR

があるのと同じになります。


File: python-dist-jp.info,  Node: ライブラリオプション,  Next: その他の操作,  Prev: プリプロセッサオプション,  Up: 拡張モジュールについて記述する

ライブラリオプション
--------------------

拡張モジュールをビルドする際にリンクするライブラリや、ライブラリを
検索するディレクトリも指定できます。 `libraries'
はリンクするライブラリのリストで、 `library_dirs'
はリンク時にライブラリを検索するディレクトリの
リストです。また、`runtime_library_dirs' は、実行時に 共有ライブラリ
(動的にロードされるライブラリ) を検索するディレクトリの リストです。

例えば、ビルド対象システムの標準ライブラリ検索パスにあることが分かって
いるライブラリをリンクする時には、以下のようにします。

     Extension(...,
               libraries=["gdbm", "readline"])

非標準のパス上にあるライブラリをリンクしたいなら、その場所を
`library_dirs' に入れておかなければなりません:

     Extension(...,
               library_dirs=["/usr/X11R6/lib"],
               libraries=["X11", "Xt"])

(繰り返しになりますが、この手の可搬性のない書き方は、コードを配布する
のが目的なら避けるべきです。)

*ここか、どこか別のところで clib ライブラリについて触れておかねば!*


File: python-dist-jp.info,  Node: その他の操作,  Prev: ライブラリオプション,  Up: 拡張モジュールについて記述する

その他の操作
------------

他にもいくつかオプションがあり、特殊な状況を扱うために使います。

`extra_objects' オプションには、リンカに渡すオブジェクトファイル
のリストを指定します。ファイル名には拡張子をつけてはならず、コンパイラ
で使われているデフォルトの拡張子が使われます。

`extra_compile_args' および `extra_link_args' には、
それぞれコンパイラとリンカに渡す追加のコマンドライン引数を指定します。

`export_symbols' は Windows でのみ意味があります。
このオプションには、公開 (export) する (関数や変数の) シンボルのリスト
を入れられます。コンパイルして拡張モジュールをビルドする際には、
このオプションは不要です: Distutils は公開するシンボルを自動的に
`initmodule' に渡すからです。


File: python-dist-jp.info,  Node: スクリプトをインストールする,  Next: 追加のファイルをインストールする,  Prev: 拡張モジュールについて記述する,  Up: setup スクリプトを書く

スクリプトをインストールする
============================

ここまでは、スクリプトから import され、それ自体では実行されない ような
pure Python モジュールおよび非 pure Python モジュール
について扱ってきました。

スクリプトとは、Python ソースコードを含むファイルで、コマンドライン
から実行できるよう作られているものです。スクリプトは Distutils に
複雑なことを一切させません。唯一の気の利いた機能は、スクリプトの
最初の行が `#!' で始まっていて、 "python" という単語が
入っていた場合、Distutils は最初の行を現在使っているインタプリタを
参照するよう置き換えます。

`scripts' オプションには、単に上で述べた方法で取り扱うべき
ファイルのリストを指定するだけです。PyXML の setup スクリプトを
例に示します:

     setup (...
            scripts = ['scripts/xmlproc_parse', 'scripts/xmlproc_val']
           )


File: python-dist-jp.info,  Node: 追加のファイルをインストールする,  Next: 追加のメタデータ,  Prev: スクリプトをインストールする,  Up: setup スクリプトを書く

追加のファイルをインストールする
================================

`data_files' オプションを使うと、モジュール配布物で必要な
追加のファイル: 設定ファイル、メッセージカタログ、データファイル、
その他これまで述べてきたカテゴリに収まらない全てのファイルを指定
できます。

`data_files' には、(DIRECTORY, FILES) の ペアを以下のように指定します:

     setup(...
           data_files=[('bitmaps', ['bm/b1.gif', 'bm/b2.gif']),
                       ('config', ['cfg/data.cfg']),
                       ('/etc/init.d', ['init-script'])]
          )

データファイルのインストール先ディレクトリ名は指定できますが、
データファイル自体の名前の変更はできないので注意してください。

各々の (DIRECTORY, FILES) ペアには、インストール先の
ディレクトリ名と、そのディレクトリにインストールしたいファイルを
指定します。DIRECTORY が相対パスの場合、インストール プレフィクス
(installation prefix、 pure Python パッケージなら `sys.prefix'
、拡張モジュールの入ったパッケージなら `sys.exec_prefix')
からの相対パスと解釈されます。 FILES
内の各ファイル名は、パッケージソースコード配布物 の最上階層の、
`setup.py' のあるディレクトリからの相対パスと 解釈されます。FILES
に書かれたディレクトリ情報は、
ファイルを最終的にどこにインストールするかを決めるときには使われ
ません; ファイルの名前だけが使われます。

`data_files' オプションは、ターゲットディレクトリを指定せずに、
単にファイルの列を指定できます。しかし、このやり方は推奨されておらず、
指定すると `install' コマンドが警告を出力します。
ターゲットディレクトリにデータファイルを直接インストールしたいなら、
ディレクトリ名として空文字列を指定してください。


File: python-dist-jp.info,  Node: 追加のメタデータ,  Next: setup スクリプトをデバッグする,  Prev: 追加のファイルをインストールする,  Up: setup スクリプトを書く

追加のメタデータ
================

setup スクリプトには、名前やバージョンにとどまらず、その他の
メタデータを含められます。以下のような情報を含められます:

メタデータ         説明               値                 注記
------             ------             ------             ------
name               パッケージの名前   短い文字列         (1)
version            リリースのバージョン短い文字列         (1)(2)
author             パッケージ作者の名前短い文字列         (3)
author_email       パッケージ作者の電子メールアドレス電子メールアドレス (3)
maintainer         パッケージメンテナンス担当者の名前短い文字列         (3)
maintainer_email   パッケージメンテナンス担当者の電子メールアドレス (3)
                   電子メールアドレス                    
url                パッケージのホームページURL                (1)
description        パッケージについての簡潔な概要説明短い文字列         
long_description   パッケージについての詳細な説明長い文字列         
download_url       パッケージをダウンロードできる場所URL                (4)
classifiers        Trove 分類語       文字列からなるリスト(4)

注記:
`(1)'
     必須のフィールドです。

`(2)'
     バージョン番号は _major.minor[.patch[.sub]]_
     の形式をとるよう奨めます。

`(3)'
     作者かメンテナのどちらかは必ず区別してください。

`(4)'
     これらのフィールドは、2.2.3 および 2.3 より以前の バージョンの
     Python でも互換性を持たせたい場合には指定しては なりません。
     リストは PyPI ウェブサイト にあります。

`「短い文字列」'
     200 文字以内の一行のテキスト。

`「長い文字列」'
     複数行からなり、ReStructuredText 形式で書かれた プレーンテキスト
     (<http://docutils.sf.net/> を参照してください)。

`「文字列のリスト」'
     下記を参照してください。

これらの文字列はいずれも Unicode であってはなりません。

バージョン情報のコード化は、それ自体が一つのアートです。 Python
のパッケージは一般的に、 _major.minor[.patch][sub]_ という
バージョン表記に従います。 メジャー (major) 番号は最初は 0
で、これはソフトウェアが実験的リリース
にあることを示します。メジャー番号は、パッケージが主要な開発目標を
達成したとき、それを示すために加算されてゆきます。マイナー (minor)
番号は、パッケージに重要な新機能が追加されたときに加算されてゆきます。
パッチ (patch) 番号は、バグフィクス版のリリースが作成されたときに
加算されます。末尾にバージョン情報が追加され、サブリリースを示す
こともあります。これは "a1,a2,...,aN" (アルファリリースの場合で、
機能や API が変更されているとき)、  "b1,b2,...,bN" (ベータリリース
の場合で、バグフィクスのみのとき) 、そして "pr1,pr2,...,prN"
(プレリリースの最終段階で、リリーステストのとき) になります。
以下に例を示します:

`0.1.0'
     パッケージの最初の実験的なリリース

`1.0.1a2'
     1.0 の最初のパッチバージョンに対する、2 回目のアルファ リリース

`classifiers' は、 Python のリスト型で指定します:

     setup(...
           classifiers = [
               'Development Status :: 4 - Beta',
               'Environment :: Console',
               'Environment :: Web Environment',
               'Intended Audience :: End Users/Desktop',
               'Intended Audience :: Developers',
               'Intended Audience :: System Administrators',
               'License :: OSI Approved :: Python Software Foundation License',
               'Operating System :: MacOS :: MacOS X',
               'Operating System :: Microsoft :: Windows',
               'Operating System :: POSIX',
               'Programming Language :: Python',
               'Topic :: Communications :: Email',
               'Topic :: Office/Business',
               'Topic :: Software Development :: Bug Tracking',
               ],
           )

`setup.py' に `classifiers' を入れておき、なおかつ 2.2.3
よりも以前のバージョンの Python と後方互換性を保ちたいなら、 `setup.py'
中で `setup()' を呼び出す前に、以下のコードを 入れます。

     # patch distutils if it can't cope with the "classifiers" or
     # "download_url" keywords
     if sys.version < '2.2.3':
         from distutils.dist import DistributionMetadata
         DistributionMetadata.classifiers = None
         DistributionMetadata.download_url = None


File: python-dist-jp.info,  Node: setup スクリプトをデバッグする,  Prev: 追加のメタデータ,  Up: setup スクリプトを書く

setup スクリプトをデバッグする
==============================

setup スクリプトのどこかがまずいと、開発者の思い通りに動作
してくれません。

Distutils は setup 実行時の全ての例外を捉えて、簡単なエラーメッセージ
を出力してからスクリプトを終了します。このような仕様にしているのは、
Python にあまり詳しくない管理者がパッケージをインストールする際に
混乱しなくてすむようにするためです。 もし Distutils
のはらわた深くからトレースバックした長大な
メッセージを見たら、管理者はきっと Python のインストール自体が
おかしくなっているのだと勘違いして、トレースバックを最後まで読み進んで
実はファイルパーミッションの問題だったと気づいたりはしないでしょう。

しかし逆に、この仕様は開発者にとってはうまくいかない理由を見つける
役には立ちません。そこで、 DISTUTILS_DEBUG 環境変数を空文字以外の
何らかの値に設定しておけば、 Distutils が何を実行しているか詳しい
情報を出力し、例外が発生した場合には完全なトレースバックを出力
するようにできます。


File: python-dist-jp.info,  Node: setup 設定ファイル setup configuration file を書く,  Next: ソースコード配布物を作成する,  Prev: setup スクリプトを書く,  Up: Top

setup 設定ファイル (setup configuration file) を書く
****************************************************

時に、配布物をビルドする際に必要な全ての設定を_あらかじめ_ 書き
きれない状況が起きます: 例えば、ビルドを進めるために、ユーザに関する
情報や、ユーザのシステムに関する情報を必要とするかもしれません。
こうした情報が単純 -- C ヘッダファイルやライブラリを検索する
ディレクトリのリストのように -- であるかぎり、ユーザに 設定ファイル
(configuration file) `setup.cfg' を提供して
編集してもらうのが、安上がりで簡単な特定方法になります。
設定ファイルはまた、あらゆるコマンドにおけるオプションにデフォルト値
を与えておき、インストール作業者がコマンドライン上や設定ファイルの
編集でデフォルト設定を上書きできるようにします。

setup 設定ファイルは setup スクリプト --理想的にはインストール作業者
から見えないもの (1) --と、作者の手を離れて、全てインストール
作業者次第となる setup スクリプトのコマンドライン引数との間を
橋渡しする中間層として有効です。 実際、`setup.cfg'
(と、ターゲットシステム上にある、その他の Distutils 設定ファイル) は、
setup スクリプトの内容より後で、
かつコマンドラインで上書きする前に処理されます。
この仕様の結果、いくつかの利点が生まれます:
   * インストール作業者は、作者が `setup.py' に設定した項目の
     いくつかを `setup.cfg' を変更して上書きできます。

   * `setu.py' では簡単に設定できないような、標準でない
     オプションのデフォルト値を設定できます。

   * インストール作業者は、`setup.cfg' に書かれたどんな設定も
     `setup.py' のコマンドラインオプションで上書きできます。

設定ファイルの基本的な構文は簡単なものです:

     [command]
     option=value
     ...

ここで、 COMMAND は Distutils コマンドのうちの一つ (例えば `build_py',
`install') で、OPTION
はそのコマンドでサポートされているオプションのうちの一つです。
各コマンドには任意の数のオプションを設定でき、一つの設定ファイル
中には任意の数のコマンドセクションを収められます。
空白行は無視されます、 `#' 文字で開始して行末まで続く
コメントも同様に無視されます。
長いオプション設定値は、継続行をインデントするだけで複数行に
わたって記述できます。

あるコマンドがサポートしているオプションのリストは、 `--help'
オプションで調べられます。例えば以下のように。

     > python setup.py --help build_ext
     [...]
     Options for 'build_ext' command:
       --build-lib (-b)     directory for compiled extension modules
       --build-temp (-t)    directory for temporary files (build by-products)
       --inplace (-i)       ignore build-lib and put compiled extensions into the
                            source directory alongside your pure Python modules
       --include-dirs (-I)  list of directories to search for header files
       --define (-D)        C preprocessor macros to define
       --undef (-U)         C preprocessor macros to undefine
     [...]

コマンドライン上で `--foo-bar' と綴るオプションは、 設定ファイル上では
`foo_bar' と綴るので注意してください。

例えば、拡張モジュールを "インプレース (in-place)" でビルドしたい
とします -- すなわち、`pkg.ext' という拡張モジュールを
持っていて、コンパイル済みの拡張モジュールファイル (例えば UNIX では
`ext.so') を pure Python モジュール `pkg.mod1' および `pkg.mod2'
と同じソースディレクトリに置きたいとします。
こんなときには、`--inplace' を使えば、確実にビルドを 行えます。

     python setup.py build_ext --inplace

しかし、この操作では、常に `build_ext' を明示的に指定
しなければならず、 `--inplace' オプションを忘れずに
与えなければなりません。 こうした設定を "設定しっ放しにする"
簡単な方法は、 `setup.cfg'
に書いておくやり方で、設定ファイルは以下のように なります:

     [build_ext]
     inplace=1

この設定は、明示的に `build_ext' を指定するかどうかに
関わらず、モジュール配布物の全てのビルドに影響します。 ソース配布物に
`setup.cfg' を含めると、エンドユーザの手で 行われるビルドにも影響します
-- このオプションの例に関しては `setup.cfg'
を含めるのはおそらくよくないアイデアでしょう。
というのは、拡張モジュールをインプレースでビルドすると常に
インストールしたモジュール配布物を壊してしまうからです。
とはいえ、ある特定の状況では、モジュールをインストールディレクトリ
の下に正しく構築できるので、機能としては有用だと考えられます。
(ただ、インストールディレクトリ上でのビルドを想定するような
拡張モジュールの配布は、ほとんどの場合よくない考え方です。)

もう一つ、例があります: コマンドによっては、実行時にほとんど
変更されないたくさんのオプションがあります; 例えば、 `bdist_rpm'
には、RPM 配布物を作成する際に、"spec"
ファイルを作成するために必要な情報を全て与えなければなりません。
この情報には setup スクリプトから与えるものもあり、
(インストールされるファイルのリストのように) Distutils が自動的に
生成するものもあります。しかし、こうした情報の中には `bdist_rpm'
のオプションとして与えるものがあり、
毎回実行するごとにコマンドライン上で指定するのが面倒です。
そこで、以下のような内容が Distutils 自体の `setup.cfg'
には入っています:

     [bdist_rpm]
     release = 1
     packager = Greg Ward <gward@python.net>
     doc_files = CHANGES.txt
                 README.txt
                 USAGE.txt
                 doc/
                 examples/

`doc_files' オプションは、単に空白で区切られた文字列で、
ここでは可読性のために複数行をまたぐようにしています。

See also:
     `Installing Python
     Modules'{設定ファイルに関する詳細情報は、システム管理者
     向けのこのマニュアルにあります。}

---------- Footnotes ----------

(1) Distutils が自動設定機能 (auto-configuration)
をサポートするまで、おそらくこの理想状態を 達成することはないでしょう


File: python-dist-jp.info,  Node: ソースコード配布物を作成する,  Next: ビルド済み配布物を作成する,  Prev: setup 設定ファイル setup configuration file を書く,  Up: Top

ソースコード配布物を作成する
****************************

~*Note 簡単な例:: 節で示したように、ソースコード配布物を作成 するには
`sdist' コマンドを使います。最も単純な例では、

     python setup.py sdist

のようにします (ここでは、`sdist' に関するオプションを setup
スクリプトや設定ファイル中で行っていないものと仮定します)。 `sdist'
は、現在のプラットフォームでのデフォルトのアーカイブ形式
でアーカイブを生成します。デフォルトの形式は UNIXでは gzip で圧縮された
tar ファイル形式 (`.tar.gz') で、Windows では ZIP 形式です。 *MacOS
のサポートがないよ*

`--formats' オプションを使えば、好きなだけ圧縮形式を
指定できます。例えば:

     python setup.py sdist --formats=gztar,zip

は、gzip された tarball と zip ファイルを作成します。
利用可能な形式は以下の通りです:
形式                     説明                     注記
------                   -----                    -----
zip                      zip ファイル (`.zip')    (1),(3)
gztar                    gzip 圧縮された tar      (2),(4)
                         ファイル (`.tar.gz')     
bztar                    bzip2 圧縮された tar     (4)
                         ファイル (`.tar.bz2')    
ztar                     compress 圧縮された tar  (4)
                         ファイル (`.tar.Z')      
tar                      tar ファイル (`.tar')    (4)

注記:
`(1)'
     Windows でのデフォルトです

`(2)'
     UNIXでのデフォルトです

`(3)'
     外部ユーティリティの `zip' か、`zipfile' モジュールが必要です
     (Python~1.6 からは 標準ライブラリになっています)

`(4)'
     外部ユーティリティ: `tar' 、場合によっては `gzip'、
     `bzip2'、または `compress' も 必要です

* Menu:

* 配布するファイルを指定する::
* マニフェスト manifest 関連のオプション::


File: python-dist-jp.info,  Node: 配布するファイルを指定する,  Next: マニフェスト manifest 関連のオプション,  Prev: ソースコード配布物を作成する,  Up: ソースコード配布物を作成する

配布するファイルを指定する
==========================

明確なファイルのリスト (またはファイルリストを生成する方法) を明示的に
与えなかった場合、`sdist' コマンドはソース配布物に以下のような
最小のデフォルトのセットを含めます:
   * `py_modules' と `packages' オプションに指定された Python
     ソースファイル全て

   * `ext_modules' や `libraries' オプションに記載 された C
     ソースファイル *(C ライブラリソースの取得機構は現状では
     うまく動きません - build_clib.py には、 get_source_files()
     メソッド がありません!)*

   * `scripts' で指定したスクリプト

   * テストスクリプトと思しきファイル全て: `test/test*.py'
     (現状では、Distutils はテストスクリプトをただソース配布物に含める
     だけですが、将来は Python
     モジュール配布物に対するテスト標準ができる かもしれません)

   * `README.txt' (または `README')、 `setup.py' (または setup
     スクリプトにしているもの) 、および `setup.cfg'

上記のセットで十分なこともありますが、大抵他のファイルを配布物に
含めたいと思うでしょう。普通は、 `MANIFEST.in' と呼ばれる
_マニフェストテンプレート (manifest template)_ を使って
これを行います。マニフェストテンプレートは、ソース配布物に
含めるファイルの正確なリストであるマニフェストファイル `MANIFEST'
をどうやって作成するか指示しているリストです。 `sdist'
コマンドはこのテンプレートを処理し、書かれた
指示とファイルシステム上に見つかったファイルに基づいて
マニフェストファイルを作成します。

自分用のマニフェストファイルを書きたいなら、その形式は簡単です:
一行あたり一つの通常ファイル (または通常ファイルに対する
シンボリックリンク) だけを書きます。自分で `MANIFEST'
を提供する場合、全てを自分で指定しなければなりません:
ただし、上で説明したデフォルトのファイルセットは、この中には
含まれません。

マニフェストテンプレートには一行あたり一つのコマンドがあります。
各コマンドはソース配布物に入れたり配布物から除外したりする
ファイルのセットを指定します。 例えば、Distutils
自体のマニフェストテンプレートの話に戻ると:

     include *.txt
     recursive-include examples *.txt *.py
     prune examples/sample?/build

各行はかなり明確に意味を取れるはずです: 上の指定では、 `*.txt'
にマッチする配布物ルート下の全てのファイル、 `examples'
ディレクトリ下にある `*.txt' か `*.py'
にマッチする全てのファイルを含め、`examples/sample?/build'
にマッチする全てのファイルを除外します。
これらの処理はすべて、標準的に含められるファイルセットの評価よりも
_後に_ 行われるので、マニフェストテンプレートに明示的に
指示をしておけば、標準セット中のファイルも除外できます。
(`--no-defaults' オプションを設定して、標準セット
自体を無効にもできます。)
他にも、このマニフェストテンプレート記述のためのミニ言語には
いくつかのコマンドがあります: ~*Note ソースコード配布物を作成する sdist
command:: 節を参照して ください。

マニフェストテンプレート中のコマンドの順番には意味があります;
初期状態では、上で述べたようなデフォルトのファイルがあり、
テンプレート中の各コマンドによって、逐次ファイルを追加したり
除去したりしていいます。マニフェストテンプレートを完全に
処理し終えたら、ソース配布物中に含めるべきでない以下のファイル
をリストから除去します:
   * Distutls の "build" (デフォルトの名前は `build')
     ツリー下にある全てのファイル

   * `RCS'  `CVS' といった名前のディレクトリ下にある 全てのファイル

こうして完全なファイルのリストができ、後で参照するために
マニフェストに書き込まれます。この内容は、ソース配布物の
アーカイブを作成する際に使われます。

含めるファイルのデフォルトセットは `--no-defaults'
で無効化でき、標準で除外するセットは `--no-prune' で無効化できます。

Distutils 自体のマニフェストテンプレートから、`sdist'
コマンドがどのようにして Distutils ソース配布物に含めるファイルの
リストを作成するか見てみましょう:
  1. `distutils' ディレクトリ、および `distutils/command'
     サブディレクトリの下にある全ての Python ソースファイルを含めます
     (これらの二つのディレクトリが、setup スクリプト下の `packages'
     オプションに記載されているからです -- ~*Note setup
     スクリプトを書く:: を 参照してください)

  2. `README.txt', `setup.py', および `setup.cfg'
     (標準のファイルセット) を含めます

  3. `test/test*.py' (標準のファイルセット) を含めます

  4. 配布物ルート下の `*.txt' を含めます (この処理で、 `README.txt'
     がもう一度見つかりますが、こうした冗長性は後で 刈り取られます)

  5. `examples' 下にあるサブツリー内で `*.txt' または `*.py'
     にマッチする全てのファイルを含めます

  6. ディレクトリ名が `examples/sample?/build' にマッチする
     ディレクトリ以下のサブツリー内にあるファイル全てを除外します--
     この操作によって、上の二つのステップでリストに含められたファイルが
     除外されることがあるので、マニフェストテンプレート内では
     `recursive-include' コマンドの後に `prune' コマンドを
     持ってくることが重要です

  7. `build' ツリー全体、および `RCS' と `CVS'
     ディレクトリ全てを除外します
     setup
スクリプトと同様、マニフェストテンプレート中のディレクトリ名は
常にスラッシュ区切りで表記します; Distutils は、こうしたディレクトリ
名を注意深くプラットフォームでの標準的な表現に変換します。
このため、マニフェストテンプレートは複数のオペレーティングシステム
にわたって可搬性を持ちます。


File: python-dist-jp.info,  Node: マニフェスト manifest 関連のオプション,  Prev: 配布するファイルを指定する,  Up: ソースコード配布物を作成する

マニフェスト (manifest) 関連のオプション
========================================

`sdist' コマンドが通常行う処理の流れは、以下のようになって います:
   * マニフェストファイル `MANIFEST' が存在しなければ、 `MANIFEST.in'
     を読み込んでマニフェストファイルを作成します

   * `MANIFEST' も `MANIFEST.in' もなければ、
     デフォルトのファイルセットだけでできたマニフェストファイルを
     作成します

   * `MANIFEST.in' または (`setup.py') が `MANIFEST'
     より新しければ、`MANIFEST.in' を読み込んで `MANIFEST' を生成します

   * (生成されたか、読み出された) `MANIFEST' 内にあるファイル
     のリストを使ってソース配布物アーカイブを作成します

上の動作は二種類のオプションを使って修正できます。まず、 標準の
"include" および "exclude" セットを無効化するには `--no-defaults'
および `--no-prune' を使います

第二に、マニフェストファイルの再生成を強制できます -- 例えば、
現在マニフェストテンプレート内に指定しているパターンにマッチする
ファイルやディレクトリを追加したり削除したりすると、マニフェストを
再生成しなくてはなりません:

     python setup.py sdist --force-manifest

また、単にマニフェストを (再) 生成したいだけで、ソース配布物は
作成したくない場合があるかもしれません:

     python setup.py sdist --manifest-only

`--manifest-only' を行うと、 `--force-manifest' を呼び出します。 `-o'
は `--manifest-only' のショートカット、 `-f' は `--force-manifest'
のショートカットです。

