This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: writer インタフェース,  Next: writer 実装,  Prev: formatter 実装,  Up: formatter

writer インタフェース
---------------------

writer を作成するためのインタフェースは、インスタンス化しようと
する個々の writer クラスに依存します。以下で解説するのは、
インスタンス化された全ての writer がサポートしなければならない
インタフェースです。 ほとんどのアプリケーションでは `AbstractFormatter'
クラスを formatter として使うことができますが、通常 writer
はアプリケーション 側で与えなければならないので注意してください。

`flush()'
     バッファに蓄積されている出力データやデバイス制御イベントを
     フラッシュします。

`new_alignment(align)'
     字揃えのスタイルを設定します。ALIGN の値は任意のオブジェクト
     を取りえますが、慣習的な値は文字列または `None' で、 `None' は
     writer の "好む" 字揃えを使うことを表します。 慣習的な ALIGN
     の値は `'left''、 `'center''、 `'right''、および `'justify'' です。

`new_font(font)'
     フォントスタイルを設定します。FONT は、デバイスの標準のフォント
     が使われることを示す `None' か、 `('SIZE, ITALIC, BOLD,TELETYPE`)'
     の形式をとるタプルになります。size はフォントサイズを示す文字列
     になります;
     特定の文字列やその解釈はアプリケーション側で定義します。
     ITALIC、BOLD、および TELETYPE といった値は
     ブール値で、それらの属性を使うかどうかを指定します。

`new_margin(margin, level)'
     マージンレベルを整数値 LEVEL に設定し、論理タグ (logical tag) を
     MARGIN に設定します。論理タグの解釈は writer の判断に 任されます;
     論理タグの値に対する唯一の制限は LEVEL が
     非ゼロの値の際に偽であってはならないということです。

`new_spacing(spacing)'
     割り付けスタイル (spacing style) を SPACING に設定します。 Set the
     spacing style to SPACING.

`new_styles(styles)'
     追加のスタイルを設定します。STYLES の値は任意の値からなる
     タプルです; `AS_IS' 値は無視されます。 STYLES
     タプルはアプリケーションや writer の実装上の都合に
     より、集合としても、スタックとしても解釈され得ます。

`send_line_break()'
     現在の行を改行します。

`send_paragraph(blankline)'
     少なくとも BLANKLINE 空行分の間隔か、空行そのもので段落を
     分割します。BLANKLINE の値は整数になります。 writer
     の実装では、改行を行う必要がある場合、このメソッドの呼び出しに
     先立って `send_line_break()' の呼び出しを受ける必要あります;
     このメソッドには段落の最後の行を閉じる機能は含まれておらず、
     段落間に垂直スペースを空ける役割しかありません。

`send_hor_rule(*args, **kw)'
     水平罫線を出力デバイスに表示します。このメソッドへの引数は
     全てアプリケーションおよび writer 特有のものなので、注意して
     解釈する必要があります。このメソッドの実装では、すでに改行が
     `send_line_break()' によってなされているものと仮定しています。

`send_flowing_data(data)'
     行端が折り返され、必要に応じて再割り付け解析を行った (re-flowed)
     文字データを出力します。このメソッドを連続して呼び出す上では、
     writer は複数の空白文字は単一のスペース文字に縮約されていると
     仮定することがあります。

`send_literal_data(data)'
     すでに表示用に書式化された文字データを出力します。
     これは通常、改行文字で表された改行を保存し、新たに改行を持ち込
     まないことを意味します。 `send_formatted_data()'
     インタフェースと違って、
     データには改行やタブ文字が埋め込まれていてもかまいません。

`send_label_data(data)'
     可能ならば、DATA を現在の左マージンの左側に設定します。 DATA
     の値には制限がありません; 文字列でない値の扱い方は
     アプリケーションや writer に完全に依存します。このメソッドは
     行の先頭でのみ呼び出されます。


File: python-lib-jp.info,  Node: writer 実装,  Prev: writer インタフェース,  Up: formatter

writer 実装
-----------

このモジュールでは、3 種類の writer オブジェクトインタフェース実装を
提供しています。ほとんどのアプリケーションでは、 `NullWriter'
から新しい writer クラスを導出する必要があるでしょう。

`NullWriter()'
     インタフェース定義だけを提供する writer クラスです; どのメソッドも
     何ら処理を行いません。このクラスは、メソッド実装をまったく継承する
     必要のない writer 全ての基底クラスになります。

`AbstractWriter()'
     この writer は formatter をデバッグするのに利用できますが、それ以外
     に利用できるほどのものではありません。各メソッドを呼び出すと、
     メソッド名と引数を標準出力に印字して呼び出されたことを示します。

`DumbWriter([file[, maxcol` = 72']])'
     単純な writer クラスで FILE に渡されたファイルオブジェクトか FILE
     が省略された場合には標準出力に出力を書き込みます。 出力は MAXCOL
     で指定されたカラム数で単純な行端折り返しが行われます。
     このクラスは連続した段落を再割り付けするのに適しています。


File: python-lib-jp.info,  Node: email,  Next: mailcap,  Prev: formatter,  Up: インターネット上のデータの操作

電子メールと MIME 処理のためのパッケージ
========================================

電子メールのメッセージを解析、操作および生成を
支援するパッケージ。これには MIME 文書もふくまれる。

_Added in Python version 2.2_

`email' パッケージは電子メールのメッセージを管理するライブラリです。
これには MIME やそれ以外の RFC 2822
ベースのメッセージ文書もふくまれます。
このパッケージはいくつかの古い標準パッケージ、`rfc822'、
`mimetools'、`multifile' などにふくまれていた
機能のほとんどを持ち、くわえて標準ではなかった `mimecntl' などの
機能もふくんでいます。このパッケージは、とくに電子メールのメッセージを
SMTP (RFC 2821 ) サーバに送信するために作られているというわけでは
_ありません_。それは `smtplib' モジュールの機能です。 `email'
パッケージは RFC 2822 に加えて、RFC 2045 -RFC 2047

および RFC 2231 など MIME 関連の RFC をサポートしており、できるかぎり
RFC に準拠することをめざしています。

`email' パッケージの一番の特徴は、電子メールの内部表現である
_オブジェクトモデル_ と、電子メールメッセージの解析および生成とを
分離していることです。`email' パッケージを使うアプリケーションは
基本的にはオブジェクトを処理することができます。メッセージに子オブジェクトを
追加したり、メッセージから子オブジェクトを削除したり、内容を完全に
並べかえたり、といったことができます。フラットなテキスト文書から
オブジェクトモデルへの変換、またそこからフラットな文書へと戻す変換は
それぞれ別々の解析器 (パーサ) と生成器 (ジェネレータ) が担当しています。
また、一般的な MIME オブジェクトタイプのいくつかについては手軽な
サブクラスが存在しており、メッセージフィールド値を抽出したり解析したり、
RFC 準拠の日付を生成したりなどのよくおこわれるタスクについては
いくつかの雑用ユーティリティもついています。

以下の節では `email' パッケージの機能を説明します。
説明の順序は多くのアプリケーションで一般的な使用順序にもとづいています。
まず、電子メールメッセージをファイルあるいはその他のソースから
フラットなテキスト文書として読み込み、つぎにそのテキストを解析して
電子メールのオブジェクト構造を作成し、その構造を操作して、
最後にフラットなテキストに戻す、という順序になっています。

このオブジェクト構造は、まったくのゼロから作りだしたものであっても
いっこうにかまいません。この場合も上と似たような作業順序になるでしょう。

またここには `email' パッケージが提供するすべての
クラスおよびモジュールに関する説明と、`email' パッケージを
使っていくうえで遭遇するかもしれない例外クラス、いくつかの補助ユーティリティ、
そして少々のサンプルも含まれています。古い `mimelib' や前バージョンの
`email' パッケージののユーザのために、現行バージョンとの違いと
移植についての節も設けてあります。

See also:
     *Note smtplib:: SMTP プロトコル クライアント

* Menu:

* 電子メールメッセージの表現::
* 電子メールメッセージを解析パースする::
* MIME 文書を生成する::
* 電子メールおよび MIME オブジェクトをゼロから作成する::
* 国際化されたヘッダ::
* 文字セットの表現::
* エンコーダ::
* 例外クラス::
* 雑用ユーティリティ::
* イテレータ::
* Python 221 までの email v1 とのちがい::
* mimelib との違い::
* 使用例 6::


File: python-lib-jp.info,  Node: 電子メールメッセージの表現,  Next: 電子メールメッセージを解析パースする,  Prev: email,  Up: email

電子メールメッセージの表現
--------------------------

電子メールのメッセージを表現する基底クラス

`Message' クラスは、 `email' パッケージの中心となるクラスです。 これは
`email' オブジェクトモデルの基底クラスになっています。 `Message'
はヘッダフィールドを検索したりメッセージ本体にアクセスするための
核となる機能を提供します。

概念的には、`Message' オブジェクトには _ヘッダ_ と _ペイロード_ が
格納されています。ヘッダは、RFC 2822
形式のフィールド名およびフィールド値が
コロンで区切られたものです。コロンはフィールド名またはフィールド値の
どちらにも含まれません。

ヘッダは大文字小文字を区別した形式で保存されますが、ヘッダ名が一致するかどうかの検査は
大文字小文字を区別せずにおこなうことができます。_Unix-From_ ヘッダまたは
`From_'
ヘッダとして知られるエンベロープヘッダがひとつ存在することもあります。
ペイロードは、単純なメッセージオブジェクトの場合は単なる文字列ですが、
MIME コンテナ文書 (`multipart/*' または `message/rfc822' など) の場合は
`Message' オブジェクトの リストになっています。

`Message' オブジェクトは、メッセージヘッダにアクセスするための マップ
(辞書) 形式のインタフェイスと、ヘッダおよびペイロードの両方に
アクセスするための明示的なインタフェイスを提供します。
これにはメッセージオブジェクトツリーからフラットなテキスト文書を
生成したり、一般的に使われるヘッダのパラメータにアクセスしたり、また
オブジェクトツリーを再帰的にたどったりするための便利なメソッドを含みます。

`Message' クラスのメソッドは以下のとおりです:

`Message()'
     コンストラクタは引数をとりません。

`as_string([unixfrom])'
     メッセージ全体をフラットな文字列として返します。 オプション
     UNIXFROM が `True' の場合、返される文字列には
     エンベロープヘッダも含まれます。UNIXFROM のデフォルトは `False'
     です。

     このメソッドは手軽に利用する事ができますが、必ずしも期待通りにメッセージを
     フォーマットするとは限りません。以下の例のように  `Generator'
     のインスタンスを生成して `flatten()' メソッドを直接呼び出せば
     より柔軟な処理を行う事ができます。

          from cStringIO import StringIO
          from email.Generator import Generator
          fp = StringIO()
          g = Generator(fp, mangle_from_=False, maxheaderlen=60)
          g.flatten(msg)
          text = fp.getvalue()


`__str__()'
     `as_string(unixfrom=True)' と同じです。

`is_multipart()'
     メッセージのペイロードが子 `Message' オブジェクトからなる
     リストであれば `True' を返し、そうでなければ `False' を返します。
     `is_multipart()' が False を返した場合は、ペイロードは
     文字列オブジェクトである必要があります。

`set_unixfrom(unixfrom)'
     メッセージのエンベロープヘッダを UNIXFROM
     に設定します。これは文字列である必要があります。

`get_unixfrom()'
     メッセージのエンベロープヘッダを返します。
     エンベロープヘッダが設定されていない場合は None が返されます。

`attach(payload)'
     与えられた PAYLOAD を現在のペイロードに追加します。
     この時点でのペイロードは `None' か、あるいは `Message'
     オブジェクトの
     リストである必要があります。このメソッドの実行後、ペイロードは必ず
     `Message' オブジェクトのリストになります。ペイロードに
     スカラーオブジェクト (文字列など) を格納したい場合は、かわりに
     `set_payload()' を使ってください。

`get_payload([i[, decode]])'
     現在のペイロードへの参照を返します。これは `is_multipart()' が
     `True' の場合 `Message'
     オブジェクトのリストになり、`is_multipart()' が `False'
     の場合は文字列になります。ペイロードがリストの場合、
     リストを変更することはそのメッセージのペイロードを変更することになります。

     オプション引数の I がある場合、 `is_multipart()' が `True' ならば
     `get_payload()' は ペイロード中で 0 から数えて I
     番目の要素を返します。I が 0
     より小さい場合、あるいはペイロードの個数以上の場合は `IndexError'
     が発生します。ペイロードが文字列 (つまり `is_multipart()' が
     `False') にもかかわらず I が与えられたときは `TypeError'
     が発生します。

     オプションの DECODE はそのペイロードが `Content-Transfer-Encoding'
     ヘッダに従って デコードされるべきかどうかを指示するフラグです。
     この値が `True' でメッセージが multipart ではない場合、
     ペイロードはこのヘッダの値が `quoted-printable' または `base64'
     のときにかぎりデコードされます。これ以外のエンコーディングが
     使われている場合、`Content-Transfer-Encoding' ヘッダが
     ない場合、あるいは曖昧なbase64データが含まれる場合は、ペイロードはそのまま
     (デコードされずに) 返されます。 もしメッセージが multipart で
     DECODE フラグが `True' の場合は `None' が返されます。DECODE
     のデフォルト値は `False' です。

`set_payload(payload[, charset])'
     メッセージ全体のオブジェクトのペイロードを PAYLOAD に設定します。
     ペイロードの形式をととのえるのは呼び出し側の責任です。
     オプションの CHARSET
     はメッセージのデフォルト文字セットを設定します。 詳しくは
     `set_charset()' を参照してください。

     _Changed in Python version 2.2.2_

`set_charset(charset)'
     ペイロードの文字セットを CHARSET に変更します。 ここには
     `Charset'インスタンス (`email.Charset' 参照)、
     文字セット名をあらわす文字列、あるいは `None'
     のいずれかが指定できます。 文字列を指定した場合、これは `Charset'
     インスタンスに変換されます。 CHARSET が `None' の場合、`charset'
     パラメータは `Content-Type' ヘッダから除去されます。
     これ以外のものを文字セットとして指定した場合、 `TypeError'
     が発生します。

     ここでいうメッセージとは、`charset.input_charset'
     でエンコードされた `text/*'
     形式のものを仮定しています。これは、もし必要とあらば
     プレーンテキスト形式を変換するさいに `charset.output_charset' の
     エンコードに変換されます。MIME ヘッダ (`MIME-Version',
     `Content-Type', `Content-Transfer-Encoding')
     は必要に応じて追加されます。

     _Added in Python version 2.2.2_

`get_charset()'
     そのメッセージ中のペイロードの `Charset' インスタンスを 返します。
     _Added in Python version 2.2.2_

以下のメソッドは、メッセージの RFC 2822 ヘッダにアクセスするための
マップ (辞書) 形式のインタフェイスを実装したものです。
これらのメソッドと、通常のマップ (辞書)
型はまったく同じ意味をもつわけでは
ないことに注意してください。たとえば辞書型では、同じキーが複数あることは
許されていませんが、ここでは同じメッセージヘッダが複数ある場合があります。
また、辞書型では `keys()' で返されるキーの順序は保証されていませんが、
`Message' オブジェクト内のヘッダはつねに元のメッセージ中に
現れた順序、あるいはそのあとに追加された順序で返されます。削除され、その後
ふたたび追加されたヘッダはリストの一番最後に現れます。

こういった意味のちがいは意図的なもので、最大の利便性をもつようにつくられています。

注意: どんな場合も、メッセージ中のエンベロープヘッダは
このマップ形式のインタフェイスには含まれません。

`__len__()'
     複製されたものもふくめてヘッダ数の合計を返します。

`__contains__(name)'
     メッセージオブジェクトが NAME という名前のフィールドを持っていれば
     true を返します。
     この検査では名前の大文字小文字は区別されません。NAME
     は最後にコロンをふくんでいてはいけません。
     このメソッドは以下のように `in' 演算子で使われます:

          if 'message-id' in myMessage:
              print 'Message-ID:', myMessage['message-id']


`__getitem__(name)'
     指定された名前のヘッダフィールドの値を返します。 NAME
     は最後にコロンをふくんでいてはいけません。 そのヘッダがない場合は
     `None' が返され、`KeyError' 例外は発生しません。

     注意: 指定された名前のフィールドがメッセージのヘッダに
     2回以上現れている場合、
     どちらの値が返されるかは未定義です。ヘッダに存在するフィールドの値をすべて
     取り出したい場合は `get_all()' メソッドを使ってください。

`__setitem__(name, val)'
     メッセージヘッダに NAME という名前の VAL という値をもつ
     フィールドをあらたに追加します。このフィールドは現在メッセージに
     存在するフィールドのいちばん後に追加されます。

     注意: このメソッドでは、すでに同一の名前で存在するフィールドは
     上書き_されません_。もしメッセージが名前 NAME をもつ
     フィールドをひとつしか持たないようにしたければ、最初にそれを除去してください。
     たとえば:

          del msg['subject']
          msg['subject'] = 'PythonPythonPython!'


`__delitem__(name)'
     メッセージのヘッダから、 NAME という名前をもつ
     フィールドをすべて除去します。たとえこの名前をもつヘッダが
     存在していなくても例外は発生しません。

`has_key(name)'
     メッセージが NAME という名前をもつ
     ヘッダフィールドを持っていれば真を、そうでなければ偽を返します。

`keys()'
     メッセージ中にあるすべてのヘッダのフィールド名のリストを返します。

`values()'
     メッセージ中にあるすべてのフィールドの値のリストを返します。

`items()'
     メッセージ中にあるすべてのヘッダのフィールド名とその値を
     2-タプルのリストとして返します。

`get(name[, failobj])'
     指定された名前をもつフィールドの値を返します。
     これは指定された名前がないときにオプション引数の FAILOBJ
     (デフォルトでは `None') を返すことをのぞけば、`__getitem__()'
     と同じです。

役に立つメソッドをいくつか紹介します:

`get_all(name[, failobj])'
     NAME の名前をもつフィールドのすべての値からなるリストを返します。
     該当する名前のヘッダがメッセージ中に含まれていない場合は FAILOBJ
     (デフォルトでは `None') が返されます。

`add_header(_name, _value, **_params)'
     拡張ヘッダ設定。このメソッドは `__setitem__()' と似ていますが、
     追加のヘッダ・パラメータをキーワード引数で指定できるところが違っています。
     _NAME に追加するヘッダフィールドを、_VALUE にそのヘッダの
     _最初の_値を渡します。

     キーワード引数辞書 _PARAMS の各項目ごとに、
     そのキーがパラメータ名として扱われ、キー名にふくまれる
     アンダースコアはハイフンに置換されます (なぜならハイフンは 通常の
     Python 識別子としては使えないからです)。ふつう、 パラメータの値が
     `None' 以外のときは、`key="value"' の
     形で追加されます。パラメータの値が `None'
     のときはキーのみが追加されます。

     例を示しましょう:

          msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')

     こうするとヘッダには以下のように追加されます。

          Content-Disposition: attachment; filename="bud.gif"


`replace_header(_name, _value)'
     ヘッダの置換。_NAME
     と一致するヘッダで最初に見つかったものを置き換えます。
     このときヘッダの順序とフィールド名の大文字小文字は保存されます。
     一致するヘッダがない場合、 `KeyError' が発生します。

     _Added in Python version 2.2.2_

`get_content_type()'
     そのメッセージの content-type を返します。
     返された文字列は強制的に小文字で `maintype/subtype'
     の形式に変換されます。 メッセージ中に `Content-Type'
     ヘッダがない場合、デフォルトの content-type は
     `get_default_type()' が返す値によって与えられます。 RFC 2045
     によればメッセージはつねにデフォルトの content-type を
     もっているので、`get_content_type()'
     はつねになんらかの値を返すはずです。

     RFC 2045 はメッセージのデフォルト content-type を、 それが
     `multipart/digest' コンテナに現れているとき以外は `text/plain'
     に規定しています。あるメッセージが `multipart/digest'
     コンテナ中にある場合、その content-type は `message/rfc822'
     になります。 もし `Content-Type' ヘッダが適切でない content-type
     書式だった場合、 RFC 2045 はそれのデフォルトを `text/plain'
     として扱うよう 定めています。

     _Added in Python version 2.2.2_

`get_content_maintype()'
     そのメッセージの主 content-type を返します。 これは
     `get_content_type()' によって 返される文字列の `maintype'
     部分です。

     _Added in Python version 2.2.2_

`get_content_subtype()'
     そのメッセージの副 content-type (sub content-type、subtype)
     を返します。 これは `get_content_type()' によって 返される文字列の
     `subtype' 部分です。

     _Added in Python version 2.2.2_

`get_default_type()'
     デフォルトの content-type を返します。
     ほどんどのメッセージではデフォルトの content-type は `text/plain'
     ですが、メッセージが `multipart/digest' コンテナに
     含まれているときだけ例外的に `message/rfc822' になります。

     _Added in Python version 2.2.2_

`set_default_type(ctype)'
     デフォルトの content-type を設定します。 CTYPE は `text/plain'
     あるいは `message/rfc822'
     である必要がありますが、強制ではありません。 デフォルトの
     content-type はヘッダの `Content-Type' には 格納されません。

     _Added in Python version 2.2.2_

`get_params([failobj[, header[, unquote]]])'
     メッセージの `Content-Type' パラメータをリストとして返します。
     返されるリストは キー/値の組からなる
     2要素タプルが連なったものであり、 これらは `='
     記号で分離されています。`=' の左側は
     キーになり、右側は値になります。パラメータ中に `=' がなかった場合、
     値の部分は空文字列になり、そうでなければその値は `get_param()' で
     説明されている形式になります。また、オプション引数 UNQUOTE が
     `True' (デフォルト) である場合、この値は unquote されます。

     オプション引数 FAILOBJ は、`Content-Type' ヘッダが
     存在しなかった場合に返すオブジェクトです。オプション引数 HEADER
     には `Content-Type' のかわりに検索すべきヘッダを指定します。

     _Changed in Python version 2.2.2_

`get_param(param[, failobj[, header[, unquote]]])'
     メッセージの `Content-Type' ヘッダ中のパラメータ PARAM を
     文字列として返します。そのメッセージ中に `Content-Type' ヘッダが
     存在しなかった場合、 FAILOBJ  (デフォルトは `None') が返されます。

     オプション引数 HEADER が与えられた場合、 `Content-Type'
     のかわりにそのヘッダが使用されます。

     パラメータのキー比較は常に大文字小文字を区別しません。
     返り値は文字列か 3 要素のタプルで、タプルになるのはパラメータが
     RFC 2231

     エンコードされている場合です。3 要素タプルの場合、各要素の値は
     `(CHARSET, LANGUAGE, VALUE)' の形式になっています。 `CHARSET' と
     `LAGUAGE' は `None' になることがあり、その場合 `VALUE' は
     `us-ascii' 文字セットでエンコードされているとみなさねば
     ならないので注意してください。普段は `LANGUAGE' を無視できます。
     この関数を使うアプリケーションは
     3要素タプルが返された場合を想定している必要があります。
     この場合、Unicode
     文字列にして返すなどの処理をおこなうことが考えられます:

          param = msg.get_param('foo')
          if isinstance(param, tuple):
              param = unicode(param[2], param[0] or 'us-ascii')

     いずれの場合もパラメータの値は (文字列であれ 3要素タプルの `VALUE'
     項目であれ) つねに unquote されます。 ただし、UNQUOTE が `False'
     に指定されている場合は unquote されません。

     _Changed in Python version 2.2.2_

`set_param(param, value[, header[, requote[, charset[, language]]]])'
     `Content-Type' ヘッダ中のパラメータを設定します。
     指定されたパラメータがヘッダ中にすでに存在する場合、その値は VALUE
     に置き換えられます。`Content-Type' ヘッダがまだ
     このメッセージ中に存在していない場合、RFC 2045 にしたがいこの値には
     `text/plain' が設定され、新しいパラメータ値が末尾に追加されます。

     オプション引数 HEADER が与えられた場合、 `Content-Type'
     のかわりにそのヘッダが使用されます。 オプション引数 UNQUOTE が
     `False' でない限り、 この値は unquote されます (デフォルトは
     `True')。

     オプション引数 CHARSET が与えられると、 そのパラメータは RFC 2231
     に従ってエンコードされます。 オプション引数 LANGUAGE は RFC 2231
     の言語を指定しますが、 デフォルトではこれは空文字列となります。
     CHARSET と LANGUAGE はどちらも文字列である必要があります。

     _Added in Python version 2.2.2_

`del_param(param[, header[, requote]])'
     指定されたパラメータを `Content-Type' ヘッダ中から完全に
     とりのぞきます。ヘッダはそのパラメータと値がない状態に書き換えられます。
     REQUOTE が `False' でない限り (デフォルトでは `True' です)、
     すべての値は必要に応じて quote されます。オプション変数 HEADER
     が与えられた場合、 `Content-Type'
     のかわりにそのヘッダが使用されます。

     _Added in Python version 2.2.2_

`set_type(type[, header][, requote])'
     `Content-Type' ヘッダの maintype と subtype を設定します。 TYPE は
     `maintype/subtype' という形の文字列でなければなりません。
     それ以外の場合は `ValueError' が発生します。

     このメソッドは `Content-Type' ヘッダを置き換えますが、
     すべてのパラメータはそのままにします。REQUOTE が `False' の場合、
     これはすでに存在するヘッダを quote
     せず放置しますが、そうでない場合は 自動的に quote します
     (デフォルト動作)。

     オプション変数 HEADER が与えられた場合、 `Content-Type'
     のかわりにそのヘッダが使用されます。 `Content-Type'
     ヘッダが設定される場合には、 `MIME-Version'
     ヘッダも同時に付加されます。

     _Added in Python version 2.2.2_

`get_filename([failobj])'
     そのメッセージ中の `Content-Disposition' ヘッダにある、 `filename'
     パラメータの値を返します。目的のヘッダが欠けていたり、 `filename'
     パラメータがない場合には FAILOBJ が返されます。
     返される文字列はつねに `Utils.unquote()' によって unquote
     されます。


`get_boundary([failobj])'
     そのメッセージ中の `Content-Type' ヘッダにある、 `boundary'
     パラメータの値を返します。目的のヘッダが欠けていたり、 `boundary'
     パラメータがない場合には FAILOBJ が返されます。
     返される文字列はつねに `Utils.unquote()' によって unquote
     されます。

`set_boundary(boundary)'
     メッセージ中の `Content-Type' ヘッダにある、 `boundary'
     パラメータに値を設定します。`set_boundary()' は 必要に応じて
     BOUNDARY を quote します。そのメッセージが `Content-Type'
     ヘッダを含んでいない場合、 `HeaderParseError' が発生します。

     注意: このメソッドを使うのは、古い `Content-Type' ヘッダを
     削除して新しい boundary をもったヘッダを `add_header()' で
     足すのとは少し違います。`set_boundary()' は 一連のヘッダ中での
     `Content-Type' ヘッダの位置を保つからです。 しかし、これは元の
     `Content-Type' ヘッダ中に存在していた 連続する行の順番までは
     _保ちません_。

`get_content_charset([failobj])'
     そのメッセージ中の `Content-Type' ヘッダにある、 `charset'
     パラメータの値を返します。値はすべて小文字に変換されます。
     メッセージ中に `Content-Type' がなかったり、このヘッダ中に
     `boundary' パラメータがない場合には FAILOBJ が返されます。

     注意: これは `get_charset()' メソッドとは異なります。
     こちらのほうは文字列のかわりに、そのメッセージボディのデフォルト
     エンコーディングの `Charset' インスタンスを返します。

     _Added in Python version 2.2.2_

`get_charsets([failobj])'
     メッセージ中に含まれる文字セットの名前をすべてリストにして返します。
     そのメッセージが `multipart' である場合、返されるリストの
     各要素がそれぞれの subpart
     のペイロードに対応します。それ以外の場合、 これは長さ 1
     のリストを返します。

     リスト中の各要素は文字列であり、これは対応する subpart 中の
     それぞれの `Content-Type' ヘッダにある `charset' の値です。
     しかし、その subpart が `Content-Type' をもってないか、 `charset'
     がないか、あるいは MIME maintype が `text' でない
     いずれかの場合には、リストの要素として FAILOBJ が返されます。

`walk()'
     `walk()' メソッドは多目的のジェネレータで、
     これはあるメッセージオブジェクトツリー中のすべての part および
     subpart を
     わたり歩くのに使えます。順序は深さ優先です。おそらく典型的な用法は、
     `walk()' を `for' ループ中でのイテレータとして
     使うことでしょう。ループを一回まわるごとに、次の subpart
     が返されるのです。

     以下の例は、 multipart メッセージのすべての part において、 その
     MIME タイプを表示していくものです。

          >>> for part in msg.walk():
          >>>     print part.get_content_type()
          multipart/report
          text/plain
          message/delivery-status
          text/plain
          text/plain
          message/rfc822


`Message' オブジェクトはオプションとして 2つのインスタンス属性を
とることができます。これはある MIME メッセージからプレーンテキストを
生成するのに使うことができます。

`preamble'
     MIME ドキュメントの形式では、 ヘッダ直後にくる空行と最初の
     multipart 境界をあらわす文字列のあいだに いくらかのテキスト (訳注:
     preamble, 序文) を埋めこむことを許しています。
     このテキストは標準的な MIME の範疇からはみ出しているので、 MIME
     形式を認識するメールソフトからこれらは通常まったく見えません。
     しかしメッセージのテキストを生で見る場合、あるいはメッセージを
     MIME 対応していないメールソフトで見る場合、このテキストは
     目に見えることになります。

     PREAMBLE 属性は MIME ドキュメントに加える この最初の MIME
     範囲外テキストを含んでいます。 `Parser'
     があるテキストをヘッダ以降に発見したが、 それはまだ最初の MIME
     境界文字列が現れる前だった場合、
     パーザはそのテキストをメッセージの PREAMBLE 属性に格納します。
     `Generator' がある MIME メッセージからプレーンテキスト形式を
     生成するとき、これはそのテキストをヘッダと最初の MIME
     境界の間に挿入します。 詳細は `email.Parser' および
     `email.Generator' を 参照してください。

     注意: そのメッセージに preamble がない場合、 PREAMBLE 属性には
     `None' が格納されます。

`epilogue'
     EPILOGUE 属性はメッセージの最後の MIME 境界文字列から
     メッセージ末尾までのテキストを含むもので、それ以外は PREAMBLE
     属性と同じです。

     注意: `multipart' メッセージからフラットなテキストを生成するとき、
     (標準的な `Generator' を使ったとして) もしそのメッセージに
     EPILOGUE が ない場合、最後の MIME
     境界文字列のあとには改行文字が追加されません。
     もしそのメッセージオブジェクトが EPILOGUE をもっており、
     それが改行文字から始まっていない場合、改行文字が MIME
     境界文字列のあとに
     追加されます。これはややぶかっこうに見えますが、ほとんどの場合はこれで
     うまくいきます。要するに、もし `multipart' 境界のあとに
     かならず改行を入れるようにしたければ、EPILOGUE に
     空文字列を入れておけばよいのです。

* Menu:

* 推奨されないメソッド::


File: python-lib-jp.info,  Node: 推奨されないメソッド,  Prev: 電子メールメッセージの表現,  Up: 電子メールメッセージの表現

推奨されないメソッド
....................

以下のメソッドは `email' バージョン 2 ではもはや時代遅れとなっており、
推奨されません。万全を記すためここに記載しておきます。

`add_payload(payload)'
     そのメッセージオブジェクトに存在するペイロードに PAYLOAD
     を追加します。
     もしこのメソッドを呼ぶ前にそのメッセージのペイロードが `None'
     だった (つまり一度もセットされていない)
     場合、呼び出し後のペイロードは引数 PAYLOAD になります。

     もしそのメッセージのペイロードがリストだった (つまり
     `is_multipart()' が 1 を返した) 場合、
     すでに存在するペイロードのリストの末尾に PAYLOAD が付加されます。

     ペイロードがこれ以外の形式だった場合、`add_payload()' は
     新しいペイロードを古いペイロードと PAYLOAD からなる
     リストに自動的に変換します。が、これはそのドキュメントが すでに
     MIME multipart ドキュメントであるときだけです。
     この条件が満たされるのはそのメッセージの `Content-Type' ヘッダの
     主形式 (maintype) が `multipart' であるときか、
     あるいはそのメッセージに `Content-Type' がないときだけです。
     これ以外の場合、メソッドは `MultipartConversionError'
     を発生します。

     _This is deprecated in Python 2.2.2.  これのかわりに `attach()'
     メソッドを使ってください。_

`get_type([failobj])'
     そのメッセージの content-type を `Content-Type' ヘッダから
     取得した `maintype/subtype' という 形式の文字列で返します。
     取得した文字列は強制的に小文字に変換されます。

     そのメッセージ中に `Content-Type' ヘッダが 存在しなかった場合、
     FAILOBJ  (デフォルトは `None') が返されます。

     _This is deprecated in Python 2.2.2.  これのかわりに
     `get_content_type()' メソッドを使ってください。_

`get_main_type([failobj])'
     そのメッセージの _主_ content-type を返します。 これは
     `get_type()' によって 返される文字列の `maintype' 部分です。
     FAILOBJ の働きは `get_type()' と同じです。

     _This is deprecated in Python 2.2.2.  これのかわりに
     `get_content_maintype()' メソッドを使ってください。_

`get_subtype([failobj])'
     そのメッセージの副 content-type (sub content-type、subtype)
     を返します。 これは `get_type()' によって 返される文字列の
     `subtype' 部分です。 FAILOBJ の働きは `get_type()' と同じです。

     _This is deprecated in Python 2.2.2.  これのかわりに
     `get_content_subtype()' メソッドを使ってください。_


File: python-lib-jp.info,  Node: 電子メールメッセージを解析パースする,  Next: MIME 文書を生成する,  Prev: 電子メールメッセージの表現,  Up: email

電子メールメッセージを解析(パース)する
--------------------------------------

電子メールメッセージのフラットなテキストを解析し、
メッセージオブジェクト構造体を生成する。

メッセージオブジェクト構造体をつくるには 2つの方法があります。
ひとつはまったくのスクラッチから `Message' を生成して、これを
`attach()' と `set_payload()' 呼び出しを介してつなげていく方法で、
もうひとつは電子メールメッセージのフラットなテキスト表現を 解析
(parse、パーズ) する方法です。

`email' パッケージでは、MIME 文書をふくむ、
ほとんどの電子メールの文書構造に対応できる標準的なパーザ (解析器)
を提供しています。
このパーザに文字列あるいはファイルオブジェクトを渡せば、パーザは
そのオブジェクト構造の基底となる (root の) `Message'
インスタンスを返します。
簡単な非MIMEメッセージであれば、この基底オブジェクトのペイロードは
たんにメッセージのテキストを格納する文字列になるでしょう。MIMEメッセージであれば、
基底オブジェクトはその `is_multipart()' メソッドに対して `True' を
返します。そして、その各 subpart に `get_payload()' メソッドおよび
`walk()' メソッドを介してアクセスすることができます。

このパーザは、ある制限された方法で拡張できます。また、もちろん
自分でご自分のパーザを完全に無から実装することもできます。 `email'
パッケージについているパーザと `Message' クラスの間に
隠された秘密の関係はなにもありませんので、ご自分で実装されたパーザも、
それが必要とするやりかたでメッセージオブジェクトツリーを作成することができます。

おもなパーザクラスは `Parser' です。これは電子メールの
ヘッダおよびペイロードを両方解析します。`multipart' メッセージの
場合、これはそのコンテナのボディを再帰的に解析します。 解析には
2つのモードがサポートされており、ひとつは _strict_ 解析で、
これはふつういかなる RFC非準拠なメッセージも受けつけません。
もうひとつは _lax_ 解析で、こちらはよく知られた MIME の書式上の
問題に対処しようとします。

`email.Parser' モジュールはまた、`HeaderParser' と呼ばれる
2番目のクラスも提供しています。これはメッセージのヘッダのみを処理したい場合に
使うことができ、ずっと高速な処理がおこなえます。なぜならこれはメッセージ本体を
解析しようとはしないからです。かわりに、そのペイロードにはメッセージ本体の
生の文字列が格納されます。`HeaderParser' クラスは `Parser' クラスと同じ
API をもっています。

* Menu:

* Parser クラスの API::
* 追加事項::


File: python-lib-jp.info,  Node: Parser クラスの API,  Next: 追加事項,  Prev: 電子メールメッセージを解析パースする,  Up: 電子メールメッセージを解析パースする

Parser クラスの API
...................

`Parser([_class[, strict]])'
     `Parser' クラスのコンストラクタです。 オプション引数 _CLASS
     をとることができ、これは呼び出し可能な オブジェクト (関数やクラス)
     でなければならず、 メッセージ内コンポーネント (sub-message object)
     が作成されるときは
     いつでもその“工場”として使用できなければなりません。
     デフォルトではこれは `Message' になっています (`email.Message'
     参照)。この“工場”は引数なしで呼び出されます。

     オプション引数である STRICT フラグは、strict 解析と lax 解析の
     どちらをおこなうかを指定します。MIME 終端文字列が欠けているとか、
     メッセージにその他の書式上の問題がある場合、STRICT フラグが `True'
     であれば`Parser' は`MessageParseError' を
     発生させます。ただし、lax 解析が有効になっている場合 (STRICT が
     `False' の場合)、`Parser' は崩れた書式からなんとかして
     有効なメッセージ構造を生成しようと試みます (これは
     `MessageParseError' が
     絶対に発生しないということではありません、ある種の異常な書式の
     メッセージはやはり解析できません)。デフォルトでは、STRICT フラグは
     `False' になっています。これは通常 lax 解析がもっとも理にかなった
     ふるまいを提供するためです。

     _Changed in Python version 2.2.2_

それ以外の `Parser' メソッドは以下のとおりです:

`parse(fp[, headersonly])'
     ファイルなどストリーム形式 (1) のオブジェクト FP から
     すべてのデータを読み込み、得られたテキストを解析して基底 (root)
     メッセージ オブジェクト構造を返します。FP
     はストリーム形式のオブジェクトで `readline()' および `read()'
     両方のメソッドを サポートしている必要があります。

     FP に格納されているテキスト文字列は、一連の RFC 2822 形式の
     ヘッダおよびヘッダ継続行 (header continuation lines)
     によって構成されている
     必要があります。オプションとして、最初にエンペローブヘッダが来ることもできます。
     ヘッダ部分はデータの終端か、ひとつの空行によって終了したとみなされます。
     ヘッダ部分に続くデータはメッセージ本体となります (MIME
     エンコードされた subpart を含んでいるかもしれません)。

     オプション引数 HEADERSONLY はヘッダ部分を解析しただけで終了するか
     否かを指定します。デフォルトの値は `False' で、これはそのファイルの
     内容すべてを解析することを意味しています。

     _Changed in Python version 2.2.2_

`parsestr(text[, headersonly])'
     メソッドに似ていますが、ファイルなどのストリーム形式のかわりに
     文字列を引数としてとるところが違います。文字列に対してこのメソッドを
     呼ぶことは、TEXT を `StringIO' インスタンスとして作成して
     `parse()' を適用するのと同じです。

     オプション引数 HEADERSONLY は `parse()' メソッドと同じです。

     _Changed in Python version 2.2.2_

ファイルや文字列からメッセージオブジェクト構造を作成するのは
かなりよくおこなわれる作業なので、便宜上次のような 2つの関数が
提供されています。これらは `email' パッケージのトップレベルの
名前空間で使用できます。

`message_from_string(s[, _class[, strict]])'
     文字列からメッセージオブジェクト構造を作成し返します。 これは
     `Parser().parsestr(s)' とまったく同じです。 オプション引数 _CLASS
     および STRICT は `Parser' クラスの
     コンストラクタと同様に解釈されます。

     _Changed in Python version 2.2.2_

`message_from_file(fp[, _class[, strict]])'
     Open
     されたファイルオブジェクトからメッセージオブジェクト構造を作成し返します。
     これは `Parser().parse(fp)' とまったく同じです。 オプション引数
     _CLASS および STRICT は `Parser' クラスの
     コンストラクタと同様に解釈されます。

     _Changed in Python version 2.2.2_

対話的な Python
プロンプトでこの関数を使用するとすれば、このようになります:

     >>> import email
     >>> msg = email.message_from_string(myString)

---------- Footnotes ----------

(1) file-like object


File: python-lib-jp.info,  Node: 追加事項,  Prev: Parser クラスの API,  Up: 電子メールメッセージを解析パースする

追加事項
........

以下はテキスト解析の際に適用されるいくつかの規約です:

   * ほとんどの
     非`multipart'形式のメッセージは単一の文字列ペイロードをもつ
     単一のメッセージオブジェクトとして解析されます。このオブジェクトは
     `is_multipart()' に対して `False' を返します。このオブジェクトに
     対する `get_payload()' メソッドは文字列オブジェクトを返します。

   * `multipart'形式のメッセージはすべてメッセージ内 コンポーネント
     (sub-message object) のリストとして解析されます。
     外側のコンテナメッセージオブジェクトは `is_multipart()' に対して
     `True' を返し、このオブジェクトに対する `get_payload()' メソッドは
     `Message' subpart のリストを返します。

   * `message/*' の Content-Type をもつほどんどのメッセージ (例:
     `message/delivery-status' や `message/rfc822' など) も
     コンテナメッセージオブジェクトとして解析されますが、
     ペイロードのリストの長さは 1 になります。このオブジェクトは
     `is_multipart()' メソッドに対して `True' を返し、
     リスト内にあるひとつだけの要素がメッセージ内のコンポーネントオブジェクトになります。



File: python-lib-jp.info,  Node: MIME 文書を生成する,  Next: 電子メールおよび MIME オブジェクトをゼロから作成する,  Prev: 電子メールメッセージを解析パースする,  Up: email

MIME 文書を生成する
-------------------

メッセージ構造からフラットな電子メールテキストを生成する。

よくある作業のひとつは、メッセージオブジェクト構造から
フラットな電子メールテキストを生成することです。この作業は `smtplib' や
`nntplib' モジュールを使って
メッセージを送信したり、メッセージをコンソールに出力したりするときに
必要になります。あるメッセージオブジェクト構造をとってきて、
そこからフラットなテキスト文書を生成するのは `Generator'
クラスの仕事です。

繰り返しになりますが、`email.Parser' モジュールと同じく、
この機能は既存の Generator だけに限られるわけではありません。
これらはご自身でゼロから作りあげることもできます。しかし、
既存のジェネレータはほとんどの電子メールを標準に沿ったやり方で
生成する方法を知っていますし、MIME メッセージも非 MIME メッセージも
扱えます。さらにこれはフラットなテキストから `Parser' クラスを使って
メッセージ構造に変換し、それをまたフラットなテキストに戻しても、
結果が冪等 (1) になるよう設計されています。

`Generator'
クラスで公開されているメソッドには、以下のようなものがあります:

`Generator(outfp[, mangle_from_[, maxheaderlen]])'
     `Generator' クラスのコンストラクタは OUTFP と呼ばれる
     ストリーム形式 (2) のオブジェクトひとつを 引数にとります。OUTFP は
     `write()' メソッドをサポートし、 Python 拡張 print
     文の出力ファイルとして使えるようになっている必要があります。

     オプション引数 MANGLE_FROM_ はフラグで、`True' のときは
     メッセージ本体に現れる行頭のすべての `From ' という文字列の最初に
     `>' という文字を追加します。これは、このような行が Unix の mailbox
     形式のエンペローブヘッダ区切り文字列として誤認識されるのを防ぐための、
     移植性ある唯一の方法です (詳しくは WHY THE CONTENT-LENGTH FORMAT
     IS BAD (なぜ Content-Length 形式が有害か)
     を参照してください)。デフォルトでは MANGLE_FROM_ は `True'
     になっていますが、 Unix の mailbox 形式ファイルに出力しないのならば
     これは `False' に設定してもかまいません。

     オプション引数 MAXHEADERLEN は連続していないヘッダの最大長を
     指定します。ひとつのヘッダ行が MAXHEADERLEN (これは文字数です、
     tab は空白 8文字に展開されます) よりも長い場合、ヘッダは
     `email.Header' クラスで定義されているように途中で
     折り返され、間にはセミコロンが挿入されます。
     もしセミコロンが見つからない場合、そのヘッダは放置されます。
     ヘッダの折り返しを禁止するにはこの値にゼロを指定してください。
     デフォルトは 78 文字で、RFC 2822 で推奨されている
     (ですが強制ではありません) 値です。

これ以外のパブリックな `Generator' メソッドは以下のとおりです:

`flatten(msg[, unixfrom])'
     MSG を基点とするメッセージオブジェクト構造体の
     文字表現を出力します。出力先のファイルにはこの `Generator'
     インスタンスが 作成されたときに指定されたものが使われます。各
     subpart は深さ優先順序 (depth-first)
     で出力され、得られるテキストは適切に MIME エンコードされた
     ものになっています。

     オプション引数 UNIXFROM は、基点となるメッセージオブジェクトの
     最初の RFC 2822
     ヘッダが現れる前に、エンペローブヘッダ区切り文字列を
     出力することを強制するフラグです。そのメッセージオブジェクトが
     エンペローブヘッダをもたない場合、標準的なエンペローブヘッダが自動的に
     作成されます。デフォルトではこの値は `False' に設定されており、
     エンペローブヘッダ区切り文字列は出力されません。

     注意: 各 subpart に関しては、エンペローブヘッダは出力されません。

     _Added in Python version 2.2.2_

`clone(fp)'
     この `Generator' インスタンスの独立したクローンを生成し返します。
     オプションはすべて同一になっています。

     _Added in Python version 2.2.2_

`write(s)'
     文字列 S を既定のファイルに出力します。 ここでいう出力先は
     `Generator' コンストラクタに 渡した OUTFP
     のことをさします。この関数はただ単に 拡張 print 文で使われる
     `Generator' インスタンスに対して ファイル操作風の API
     を提供するためだけのものです。

ユーザの便宜をはかるため、メソッド `Message.as_string()' と
`str(aMessage)' (つまり `Message.__str__()' のことです) をつかえば
メッセージオブジェクトを特定の書式でフォーマットされた文字列に簡単に変換することができます。
詳細は `email.Message' を参照してください。

`email.Generator' モジュールはひとつの派生クラスも提供しています。
これは `DecodedGenerator' と呼ばれるもので、`Generator' 基底クラスと
似ていますが、非`text'型の subpart を特定の書式でフォーマットされた
表現形式で置きかえるところが違っています。

`DecodedGenerator(outfp[, mangle_from_[, maxheaderlen[, fmt]]])'
     このクラスは `Generator' から派生したもので、 メッセージの subpart
     をすべて渡り歩きます。subpart の主形式が `text'
     だった場合、これはその subpart のペイロードを
     デコードして出力します。オプション引数 _MANGLE_FROM_ および
     MAXHEADERLEN の意味は基底クラス `Generator' のそれと同じです。

     Subpart の主形式が `text' ではない場合、オプション引数 FMT
     がそのメッセージペイロードのかわりのフォーマット文字列として使われます。
     FMT は `%(keyword)s' のような形式を展開し、
     以下のキーワードを認識します:

        * `type' - 非`text'型 subpart の MIME 形式

        * `maintype' - 非`text'型 subpart の MIME 主形式 (maintype)

        * `subtype' - 非`text'型 subpart の MIME 副形式 (subtype)

        * `filename' - 非`text'型 subpart のファイル名

        * `description' - 非`text'型 subpart につけられた説明文字列

        * `encoding' - 非`text'型 subpart の Content-transfer-encoding


     FMT のデフォルト値は `None' です。
     こうすると以下の形式で出力します:

          [Non-text (%(type)s) part of message omitted, filename %(filename)s]

     _Added in Python version 2.2.2_

* Menu:

* Deprecated methods::

---------- Footnotes ----------

(1) 訳注: idempotent、その操作を何回くり返しても 1回だけ行ったのと
結果が同じになること。

(2) 訳注: file-like object


File: python-lib-jp.info,  Node: Deprecated methods,  Prev: MIME 文書を生成する,  Up: MIME 文書を生成する

Deprecated methods
..................

以下のメソッドは `email' バージョン 2 ではもはや時代遅れとなっており、
推奨されません。万全を記すためここに記載しておきます。

`__call__(msg[, unixfrom])'
     このメソッドは `flatten()' メソッドと同じです。

     _This is deprecated in Python 2.2.2.  これのかわりに `flatten()'
     メソッドを使ってください。_

