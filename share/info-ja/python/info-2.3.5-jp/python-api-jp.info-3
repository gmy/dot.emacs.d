This is python-api-jp.info, produced by makeinfo version 4.5 from
python-api-jp.texi.

12 October 2005


File: python-api-jp.info,  Node: オブジェクトプロトコル object protocol,  Next: 数値型プロトコル number protocol,  Prev: 抽象オブジェクトレイヤ abstract objects layer,  Up: 抽象オブジェクトレイヤ abstract objects layer

オブジェクトプロトコル (object protocol)
========================================

`int PyObject_Print(PyObject *o, FILE *fp, int flags)'
     オブジェクト O をファイル FP に出力します。 失敗すると`-1'
     を返します。 FLAGS
     引数は何らかの出力オプションを有効にする際に使います。
     現在サポートされている唯一のオプションは`Py_PRINT_RAW' です;
     このオプションを指定すると、`repr()' の代わりに `str()'
     を使ってオブジェクトを書き込みます。

`int PyObject_HasAttrString(PyObject *o, char *attr_name)'
     O が属性 ATTR_NAME を持つときに `1' を、それ以外の ときに `0'
     を返します。この関数は Python の式 `hasattr(O, ATTR_NAME)'
     と同じです。 この関数は常に成功します。

`PyObject* PyObject_GetAttrString(PyObject *o, char *attr_name)'
     オブジェクト O から、名前 ATTR_NAME の属性を取得します。
     成功すると属性値を返し失敗すると `NULL' を返します。 この関数は
     Python の式 `O.ATTR_NAME' と同じです。

`int PyObject_HasAttr(PyObject *o, PyObject *attr_name)'
     O が属性 ATTR_NAME を持つときに `1' を、それ以外の ときに `0'
     を返します。この関数は Python の式 `hasattr(O, ATTR_NAME)'
     と同じです。 この関数は常に成功します。

`PyObject* PyObject_GetAttr(PyObject *o, PyObject *attr_name)'
     オブジェクト O から、名前 ATTR_NAME の属性を取得します。
     成功すると属性値を返し失敗すると `NULL' を返します。 この関数は
     Python の式 `O.ATTR_NAME' と同じです。

`int PyObject_SetAttrString(PyObject *o, char *attr_name, PyObject *v)'
     オブジェクト O のATTR_NAME という名の属性に、値 V
     を設定します。失敗すると `-1' を返します。 この関数は Python の式
     `O.ATTR_NAME = V' と同じです。

`int PyObject_SetAttr(PyObject *o, PyObject *attr_name, PyObject *v)'
     オブジェクト O のATTR_NAME という名の属性に、値 V
     を設定します。失敗すると `-1' を返します。 この関数は Python の式
     `O.ATTR_NAME = V' と同じです。

`int PyObject_DelAttrString(PyObject *o, char *attr_name)'
     オブジェクト O のATTR_NAME という名の属性を削除します。 失敗すると
     `-1' を返します。 この関数は Python の文 `del O.ATTR_NAME'
     と同じです。

`int PyObject_DelAttr(PyObject *o, PyObject *attr_name)'
     オブジェクト O のATTR_NAME という名の属性を削除します。 失敗すると
     `-1' を返します。 この関数は Python の文 `del O.ATTR_NAME'
     と同じです。

`PyObject* PyObject_RichCompare(PyObject *o1, PyObject *o2, int opid)'
     O1 と O2 を OPID に指定した演算によって比較します。 OPID は
     `Py_LT', `Py_LE', `Py_EQ', `Py_NE', `Py_GT', または `Py_GE',
     のいずれかでなければならず、それぞれ `<', `<=', `==', `!=', `>',
     および `>=' に対応します。 この関数は Python の式 `O1 op O2'
     と同じで、 `op' が OPID に対応する演算子です。
     成功すると比較結果の値を返し失敗すると `NULL' を返します。

`int PyObject_RichCompareBool(PyObject *o1, PyObject *o2, int opid)'
     O1 と O2 を OPID に指定した演算によって比較します。 OPID は
     `Py_LT', `Py_LE', `Py_EQ', `Py_NE', `Py_GT', または `Py_GE',
     のいずれかでなければならず、それぞれ `<', `<=', `==', `!=', `>',
     および `>=' に対応します。 比較結果が真ならば `1' を、偽ならば `0'
     を、 エラーが発生すると `-1' を返します。 この関数は Python の式
     `O1 op O2' と同じで、 `op' が OPID に対応する演算子です。

`int PyObject_Cmp(PyObject *o1, PyObject *o2, int *result)'
     O1 と O2 の値を比較します。このときO1 が比較ルーチンを
     持っていればそれを使い、なければ O2 のルーチンを使います。
     比較結果は RESULT に返されます。失敗すると `-1' を返します。
     Python 文  `RESULT = cmp(O1, O2)' と同じです。

`int PyObject_Compare(PyObject *o1, PyObject *o2)'
     O1 と O2 の値を比較します。このときO1 が比較ルーチンを
     持っていればそれを使い、なければ O2 のルーチンを使います。
     比較結果は RESULT に返されます。失敗すると `-1' を返します。
     Python 文  `RESULT = cmp(O1, O2)'
     と同じです。成功すると比較結果を返します。エラーが生じた場合の
     戻り値は未定義です; `PyErr_Occurred()' を使ってエラー検出を
     行って下さい。Python 式  `cmp(O1,  O2)' と同じです。

`PyObject* PyObject_Repr(PyObject *o)'
     O の文字列表現を計算します。成功すると文字列表現を返し、
     失敗すると `NULL' を返します。Python 式`repr(O)'
     と同じです。この関数は組み込み関数 `repr()'
     や逆クオート表記の処理で 呼び出されます。

`PyObject* PyObject_Str(PyObject *o)'
     O の文字列表現を計算します。成功すると文字列表現を返し、
     失敗すると `NULL' を返します。Python 式`str(O)'
     と同じです。この関数は組み込み関数 `str()'  や`print' 文の処理で
     呼び出されます。

`PyObject* PyObject_Unicode(PyObject *o)'
     O の Unicode 文字列表現を計算します。成功すると Unicode
     文字列表現を返し失敗すると `NULL' を返します。 Python
     式`unicode(O)' と同じです。この関数は組み込み関数 `unicode()'
     の処理で呼び出されます。

`int PyObject_IsInstance(PyObject *inst, PyObject *cls)'
     INST が CLS のインスタンスか、 CLS のサブクラスの
     インスタンスの場合に `-1' を返し、そうでなければ `0' を
     返します。エラーの時には `-1' を返し、例外をセットします。 CLS
     がクラスオブジェクトではなく型オブジェクトの場合、
     `PyObject_IsInstance()' は INST がCLS で あるときに `1'
     を返します。CLS をタプルで指定した場合、 CLS
     に指定した全てのエントリについてチェックを行います。
     少なくとも一つのエントリに対するチェックが `1' を返せば結果は `1'
     になり、そうでなければ `0' になります。 INST
     がクラスインスタンスでなく、かつ CLS が
     型オブジェクトでもクラスオブジェクトでもタプルでもない場合、 INST
     には `__class__' 属性がなくてはなりません -- この場合、`__class__'
     属性の値と、CLS の値の間の
     クラス関係を、関数の戻り値を決定するのに使います。 _Added in
     Python version 2.1_ _Changed in Python version 2.2_

サブクラスの決定はかなり正攻法で行いますが、クラスシステムの拡張を
実装する人たちに知っておいて欲しいちょっとした問題点があります。 `A' と
`B' がクラスオブジェクトの場合、 `B' が `A' のサブクラスとなるのは、`B'
が `A' を 直接的あるいは間接的に継承 (inherit) している場合です。
両方がクラスオブジェクトでない場合、二つのオブジェクト間の
クラス関係を決めるには、より汎用の機構を使います。 B が A
のサブクラスであるか調べたとき、A が B
と等しければ、`PyObject_IsSubclass()' は真を返します。 A および B
が異なるオブジェクトなら、B の `__bases__' 属性から深さ優先探索
(depth-first search)で A を探索します -- オブジェクトに`__bases__'
があるだけで、 この決定法を適用する条件を満たしているとみなされます。

`int PyObject_IsSubclass(PyObject *derived, PyObject *cls)'
     クラス DERIVED が CLS と同じクラスか、CLS の導出 クラスの場合に
     `1' を返し、それ以外の場合には `0' を 返します。エラーが生じると
     `-1' を返します。 CLS をタプルで指定した場合、CLS
     に指定した全てのエントリに ついてチェックを行います。
     少なくとも一つのエントリに対するチェックが `1' を返せば結果は `1'
     になり、そうでなければ `0' になります。 DERIVED または CLS
     のいずれかが実際のクラスオブジェクト (あるいはタプル)
     でない場合、上で述べた汎用アルゴリズムを使います。 _Added in
     Python version 2.1_ _Changed in Python version 2.3_

`int PyCallable_Check(PyObject *o)'
     オブジェクト O が呼び出し可能オブジェクトかどうか調べます。
     オブジェクトが呼び出し可能であるときに `1' を返し、
     そうでないときには `0' を返します。
     この関数呼び出しは常に成功します。

`PyObject* PyObject_Call(PyObject *callable_object, PyObject *args, PyObject *kw)'
     呼び出し可能な Python オブジェクト CALLABLE_OBJECT を
     タプルで指定された引数 ARGS および辞書で指定された名前つき 引数
     (named argument) KW とともに呼び出します。名前つき引数を
     必要としない場合、 KW を `NULL' にしてもかまいません。 ARGS は
     `NULL' であってはなりません。引数が全く必要ない場合には
     空のタプルを使ってください。
     成功すると呼び出し結果として得られたオブジェクトを返し、
     失敗すると `NULL' を返します。 Python の式 `apply(CALLABLE_OBJECT,
     ARGS, KW)' あるいは `CALLABLE_OBJECT(*ARGS, **KW)' と同じです。
     _Added in Python version 2.2_

`PyObject* PyObject_CallObject(PyObject *callable_object, PyObject *args)'
     呼び出し可能な Python オブジェクト CALLABLE_OBJECT を
     タプルで指定された引数 ARGS とともに呼び出します。  引数を
     必要としない場合、 ARGS を `NULL' にしてもかまいません。
     成功すると呼び出し結果として得られたオブジェクトを返し、
     失敗すると `NULL' を返します。 Python の式 `apply(CALLABLE_OBJECT,
     ARGS)' あるいは `CALLABLE_OBJECT(*ARGS)' と同じです。

`PyObject* PyObject_CallFunction(PyObject *callable, char *format, ...)'
     呼び出し可能な Python オブジェクト CALLABLE_OBJECT を 可変数個の C
     引数とともに呼び出します。C 引数は `Py_BuildValue()'
     形式のフォーマット文字列を使って記述します。 FORMAT
     は`NULL'にしてもよく、与える引数がないことを表します。
     成功すると呼び出し結果として得られたオブジェクトを返し、
     失敗すると `NULL' を返します。  Python の式 `apply(CALLABLE,
     ARGS)' あるいは `CALLABLE(*ARGS)' と同じです。

`PyObject* PyObject_CallMethod(PyObject *o, char *method, char *format, ...)'
     オブジェクト O の METHOD という名前のメソッドを、 可変数個の C
     引数とともに呼び出します。C 引数は `Py_BuildValue()'
     形式のフォーマット文字列を使って記述します。 FORMAT
     は`NULL'にしてもよく、与える引数がないことを表します。
     成功すると呼び出し結果として得られたオブジェクトを返し、
     失敗すると `NULL' を返します。 Python の式 `O.METHOD(ARGS)'
     と同じです。

`PyObject* PyObject_CallFunctionObjArgs(PyObject *callable, ..., `NULL')'
     呼び出し可能な Python オブジェクト CALLABLE_OBJECT を 可変数個の
     `PyObject*' 引数とともに呼び出します。 引数列は末尾に
     `NULL'がついた可変数個のパラメタとして与えます。
     成功すると呼び出し結果として得られたオブジェクトを返し 失敗すると
     `NULL' を返します。 _Added in Python version 2.2_

`PyObject* PyObject_CallMethodObjArgs(PyObject *o, PyObject *name, ..., `NULL')'
     オブジェクト O のメソッドを呼び出します、メソッド名は Python
     文字列オブジェクトNAME で与えます。可変数個の `PyObject*'
     引数と共に呼び出されます.  引数列は末尾に
     `NULL'がついた可変数個のパラメタとして与えます。
     成功すると呼び出し結果として得られたオブジェクトを返し 失敗すると
     `NULL' を返します。 _Added in Python version 2.2_

`int PyObject_Hash(PyObject *o)'
     オブジェクト O のハッシュ値を計算して返します。 失敗すると `-1'
     を返します。 Python の式 `hash(O)'  と同じです。

`int PyObject_IsTrue(PyObject *o)'
     O が真を表すとみなせる場合には `1' を、 そうでないときには `0'
     を返します。 Python の式 `not not O' と同じです。 失敗すると `-1'
     を返します。

`int PyObject_Not(PyObject *o)'
     O が真を表すとみなせる場合には `0' を、 そうでないときには `1'
     を返します。 Python の式 `not O' と同じです。 失敗すると `-1'
     を返します。

`PyObject* PyObject_Type(PyObject *o)'
     O が `NULL'でない場合、オブジェクトO のオブジェクト型に
     相当する型オブジェクトを返します。失敗すると `SystemError'
     を送出して `NULL'を返します。 Python の式 `type(O)'と同じです。

     この関数は戻り値の参照カウントをインクリメントします。
     参照カウントのインクリメントが必要でない限り、広く使われていて
     `PyTypeObject*' 型のポインタを返す表記法 `O->ob_type'
     の代わりに使う理由は全くありません。

`int PyObject_TypeCheck(PyObject *o, PyTypeObject *type)'
     オブジェクト O が、 TYPE か TYPE のサブタイプで
     あるときに真を返します。どちらのパラメタも
     `NULL'であってはなりません。 _Added in Python version 2.2_

`int PyObject_Length(PyObject *o)'
`int PyObject_Size(PyObject *o)'
     O の長さを返します。オブジェクトO が配列プロトコルと
     マップ型プロトコルのいずれかを提供している場合、配列としての長さを
     返します。エラーが生じると `-1' を返します。 Python の式
     `len(O)'と同じです。

`PyObject* PyObject_GetItem(PyObject *o, PyObject *key)'
     成功するとオブジェクト KEY に対応する O の要素を返し、 失敗すると
     `NULL' を返します。 Python の式 `O[KEY]' と同じです。

`int PyObject_SetItem(PyObject *o, PyObject *key, PyObject *v)'
     オブジェクト KEY を値 V に対応付けます。 失敗すると `-1'
     を返します。 Python の文 `O[KEY] = V' と同じです。

`int PyObject_DelItem(PyObject *o, PyObject *key)'
     オブジェクト O から KEY に対する対応付けを削除します。 失敗すると
     `-1' を返します。 Python の文 `del O[KEY]' と同じです。

`int PyObject_AsFileDescriptor(PyObject *o)'
     Python オブジェクトからファイル記述子を取り出します。
     オブジェクトが整数か長整数なら、その値を返します。
     (長)整数でない場合、オブジェクトに `fileno()' メソッドがあれば
     呼び出します; この場合、 `fileno()' メソッドは
     整数または長整数をファイル記述子の値として返さなければなりません。
     失敗すると `-1' を返します。

`PyObject* PyObject_Dir(PyObject *o)'
     この関数は Python の式 `dir(O)' と同じで、
     オブジェクトの変数名に割り当てている文字列からなるリスト
     (空の場合もあります) を返します。エラーの場合には `NULL'
     を返します。引数を `NULL'にすると、Python における`dir()'
     と同様に、現在のローカルな名前を返します; この場合、
     アクティブな実行フレームがなければ `NULL' を返しますが、
     `PyErr_Occurred()' は偽を返します。

`PyObject* PyObject_GetIter(PyObject *o)'
     Python の式 `iter(O)' と同じです。
     引数にとったオブジェクトに対する新たなイテレータか、
     オブジェクトがすでにイテレータの場合にはオブジェクト自身を
     返します。オブジェクトが反復処理不可能であった場合には `TypeError'
     を送出して `NULL' を返します。


File: python-api-jp.info,  Node: 数値型プロトコル number protocol,  Next: 配列プロトコル sequence protocol,  Prev: オブジェクトプロトコル object protocol,  Up: 抽象オブジェクトレイヤ abstract objects layer

数値型プロトコル (number protocol)
==================================

`int PyNumber_Check(PyObject *o)'
     オブジェクト O が数値型プロトコルを提供している場合に `1'
     を返し、そうでないときには偽を返します。
     この関数呼び出しは常に成功します。

`PyObject* PyNumber_Add(PyObject *o1, PyObject *o2)'
     成功するとO1 と O2 を加算した結果を返し、 失敗すると `NULL'
     を返します。 Python の式 `O1 + O2' と同じです。

`PyObject* PyNumber_Subtract(PyObject *o1, PyObject *o2)'
     成功するとO1 から O2 を減算した結果を返し、 失敗すると `NULL'
     を返します。 Python の式 `O1 - O2' と同じです。

`PyObject* PyNumber_Multiply(PyObject *o1, PyObject *o2)'
     成功するとO1 と O2 を乗算した結果を返し、失敗すると `NULL'
     を返します。 Python の式 `O1 * O2' と同じです。

`PyObject* PyNumber_Divide(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 で除算した結果を返し, 失敗すると `NULL'
     を返します。 Python の式 `O1 / O2' と同じです。

`PyObject* PyNumber_FloorDivide(PyObject *o1, PyObject *o2)'
     成功するとO1 を O2 で除算した切捨て値を返し、 失敗すると `NULL'
     を返します。 "旧仕様の" 整数間での除算と同じです。 _Added in
     Python version 2.2_

`PyObject* PyNumber_TrueDivide(PyObject *o1, PyObject *o2)'
     成功すると、数学的な O1 の O2 による除算値に対する 妥当な近似
     (reasonable approximation) を返し、 失敗すると `NULL' を返します。
     全ての実数を 2
     を基数として表現するのは不可能なため、二進の浮動小数点数は
     "近似値" しか表現できません。このため、戻り値も近似になります。
     この関数に二つの整数を渡した際、浮動小数点の値を返すことがあります。
     _Added in Python version 2.2_

`PyObject* PyNumber_Remainder(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 で除算した剰余を返し、 失敗すると `NULL'
     を返します。 Python の式 `O1 % O2' と同じです。

`PyObject* PyNumber_Divmod(PyObject *o1, PyObject *o2)'
     組み込み関数 `divmod()'  を参照してください。 失敗すると `NULL'
     を返します。 Python の式 `divmod(O1, O2)' と同じです。

`PyObject* PyNumber_Power(PyObject *o1, PyObject *o2, PyObject *o3)'
     組み込み関数`pow()'  を参照してください。 失敗すると `NULL'
     を返します。 Python の式 `pow(O1, O2, O3)'と同じです。 O3
     はオプションです。 O3 を無視させたいなら、 `Py_None'
     を入れてください (O3 に`NULL'
     を渡すと、不正なメモリアクセスを引き起こすことが あります)。

`PyObject* PyNumber_Negative(PyObject *o)'
     成功するとO の符号反転を返し、失敗すると `NULL' を返します。
     Python の式 `-O' と同じです。

`PyObject* PyNumber_Positive(PyObject *o)'
     成功すると O を返し、失敗すると `NULL' を返します。 Python の式
     `+O' と同じです。

`PyObject* PyNumber_Absolute(PyObject *o)'
     成功すると O の絶対値を返し、失敗すると `NULL' を返します。 Python
     の式 `abs(O)' と同じです。

`PyObject* PyNumber_Invert(PyObject *o)'
     成功すると O のビット単位反転 (bitwise negation) を返し、
     失敗すると `NULL' を返します。Python の式 `~O' と同じです。

`PyObject* PyNumber_Lshift(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 だけ左シフトした結果を返し、 失敗すると `NULL'
     を返します。 Python の式 `O1 <`<' O2' と同じです。

`PyObject* PyNumber_Rshift(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 だけ右シフトした結果を返し、 失敗すると `NULL'
     を返します。 Python の式 `O1 >`>' O2' と同じです。

`PyObject* PyNumber_And(PyObject *o1, PyObject *o2)'
     成功すると O1 と O2 の "ビット単位論理積 (bitwise and)" を返し、
     失敗すると `NULL' を返します。 Python の式 `O1 & O2' と同じです。

`PyObject* PyNumber_Xor(PyObject *o1, PyObject *o2)'
     成功すると O1 と O2 の "ビット単位排他的論理和 (bitwise exclusive
     or)" を返し、 失敗すると `NULL' を返します。 Python の式 `O1 ^ O2'
     と同じです。

`PyObject* PyNumber_Or(PyObject *o1, PyObject *o2)'
     成功すると O1 と O2 の "ビット単位論理和 (bitwise or)" を返し
     失敗すると `NULL' を返します。 Python の式 `O1 | O2' と同じです。

`PyObject* PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)'
     成功するとO1 と O2 を加算した結果を返し、 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 += O2' と同じです。

`PyObject* PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)'
     成功するとO1 から O2 を減算した結果を返し、 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 -= O2' と同じです。

`PyObject* PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)'
     成功するとO1 と O2 を乗算した結果を返し、 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 *= O2' と同じです。

`PyObject* PyNumber_InPlaceDivide(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 で除算した結果を返し, 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 /= O2' と同じです。

`PyObject* PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2)'
     成功するとO1 の O2 による除算結果から端数を切捨てた
     値を返し、失敗すると `NULL' を返します。 O1 が _in-place_
     演算をサポートする場合、in-place 演算を 行います。 Python の文 `O1
     //= O2' と同じです。 _Added in Python version 2.2_

`PyObject* PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2)'
     成功すると、数学的な O1 の O2 による除算値に対する 妥当な近似
     (reasonable approximation) を返し、 失敗すると `NULL' を返します。
     全ての実数を 2
     を基数として表現するのは不可能なため、二進の浮動小数点数は
     "近似値" しか表現できません。このため、戻り値も近似になります。
     この関数に二つの整数を渡した際、浮動小数点の値を返すことがあります。
     O1 が _in-place_ 演算をサポートする場合、in-place 演算を 行います。
     _Added in Python version 2.2_

`PyObject* PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 で除算した剰余を返し、 , 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 %= O2' と同じです。

`PyObject* PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3)'
     組み込み関数`pow()'  を参照してください。 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 この関数は O3 が `Py_None' の場合は Python 文
     `O1 **= O2' と同じで、それ以外の場合は `pow(O1, O2, O3)' の
     in-place 版です。 O3 を無視させたいなら、 `Py_None'
     を入れてください (O3 に`NULL'
     を渡すと、不正なメモリアクセスを引き起こすことが あります)。

`PyObject* PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 だけ左シフトした結果を返し、 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 <`<=' O2' と同じです。

`PyObject* PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2)'
     成功すると O1 を O2 だけ右シフトした結果を返し、 失敗すると `NULL'
     を返します。 O1 が _in-place_ 演算をサポートする場合、in-place
     演算を 行います。 Python の文 `O1 >`>=' O2' と同じです。

`PyObject* PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2)'
     成功すると O1 と O2 の "ビット単位論理積 (bitwise and)" を返し、
     失敗すると `NULL' を返します。 O1 が _in-place_
     演算をサポートする場合、in-place 演算を行います。 Python の文 `O1
     &= O2' と同じです。

`PyObject* PyNumber_InPlaceXor(PyObject *o1, PyObject *o2)'
     成功すると O1 と O2 の "ビット単位排他的論理和 (bitwise exclusive
     or)" を返し、失敗すると `NULL' を返します。 O1 が _in-place_
     演算をサポートする場合、in-place 演算を 行います。 Python の文 `O1
     ^= O2' と同じです。

`PyObject* PyNumber_InPlaceOr(PyObject *o1, PyObject *o2)'
     成功すると O1 と O2 の "ビット単位論理和 (bitwise or)" を返し
     失敗すると `NULL' を返します。 O1 が _in-place_
     演算をサポートする場合、in-place 演算を 行います。 Python の文 `O1
     |= O2' と同じです。

`int PyNumber_Coerce(PyObject **p1, PyObject **p2)'
     この関数は`PyObject*' 型の二つの変数のアドレスを引数にとります。
     `*P1' と`*P2' が指すオブジェクトが同じ型の場合、
     それぞれの参照カウントをインクリメントして `0' (成功) を返します。
     オブジェクトを変換して共通の数値型にできる場合、 `*p1' と `*p2'
     を変換後の値に置き換えて (参照カウントを '新しく' して) 、`0'
     を返します。
     変換が不可能な場合や、その他何らかのエラーが生じた場合、`-1'
     (失敗) を返し、参照カウントをインクリメントしません。
     `PyNumber_Coerce(&o1, &o2)' の呼び出しは Python 文 `O1, O2 =
     coerce(O1, O2)' と同じです。

`PyObject* PyNumber_Int(PyObject *o)'
     成功するとO を整数に変換したものを返し、 失敗すると `NULL'
     を返します。
     引数の値が整数の範囲外の場合、長整数を代わりに返します。 Python
     の式 `int(O)'  と同じです。

`PyObject* PyNumber_Long(PyObject *o)'
     成功するとO を長整数に変換したものを返し、 失敗すると `NULL'
     を返します。 Python の式 `long(O)'  と同じです。

`PyObject* PyNumber_Float(PyObject *o)'
     成功するとO を浮動小数点数に変換したものを返し、 失敗すると `NULL'
     を返します。 Python の式 `float(O)'  と同じです。


File: python-api-jp.info,  Node: 配列プロトコル sequence protocol,  Next: マップ型プロトコル mapping protocol,  Prev: 数値型プロトコル number protocol,  Up: 抽象オブジェクトレイヤ abstract objects layer

配列プロトコル (sequence protocol)
==================================

`int PySequence_Check(PyObject *o)'
     オブジェクトが配列プロトコルを提供している場合に `1' を返し、
     そうでないときには `0' を返します。
     この関数呼び出しは常に成功します。

`int PySequence_Size(PyObject *o)'
     成功すると配列 O 中のオブジェクトの数を返し、 失敗すると `-1'
     を返します。 配列プロトコルをサポートしないオブジェクトに対しては、
     Python の式 `len(O)'  と同じ になります。

`int PySequence_Length(PyObject *o)'
     `PySequence_Size()' の別名です。

`PyObject* PySequence_Concat(PyObject *o1, PyObject *o2)'
     成功するとO1 と O2 の連結 (concatenation) を返し、 失敗すると
     `NULL' を返します。 Python の式 `O1 + O2' と同じです。

`PyObject* PySequence_Repeat(PyObject *o, int count)'
     成功するとオブジェクトO の COUNT 回繰り返しを返し、 失敗すると
     `NULL' を返します。 Python の式 `O * COUNT' と同じです。

`PyObject* PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)'
     成功するとO1 と O2 の連結 (concatenation) を返し、 失敗すると
     `NULL' を返します。 O1 が _in-place_
     演算をサポートする場合、in-place 演算を 行います。 Python の式 `O1
     += O2' と同じです。

`PyObject* PySequence_InPlaceRepeat(PyObject *o, int count)'
     成功するとオブジェクトO の COUNT 回繰り返しを返し、 失敗すると
     `NULL' を返します。 O1 が _in-place_
     演算をサポートする場合、in-place 演算を 行います。 Python の式 `O
     *= COUNT' と同じです。

`PyObject* PySequence_GetItem(PyObject *o, int i)'
     成功すると O の I 番目の要素を返し、 失敗すると `NULL' を返します。
     Python の式 `O[I]' と同じです。

`PyObject* PySequence_GetSlice(PyObject *o, int i1, int i2)'
     成功するとO の I1 から I2 までの間のスライスを返し、 失敗すると
     `NULL' を返します。 Python の式 `O[I1:I2]' と同じです。

`int PySequence_SetItem(PyObject *o, int i, PyObject *v)'
     O の I 番目の要素に V を代入します。 失敗すると `-1' を返します。
     Python の文 `O[I] = V' と同じです。 この関数は V
     への参照を盗み取り_ません_。

`int PySequence_DelItem(PyObject *o, int i)'
     O の I 番目の要素を削除します。 失敗すると `-1' を返します。
     Python の文 `del O[I]' と同じです。

`int PySequence_SetSlice(PyObject *o, int i1, int i2, PyObject *v)'
     O の I1 から I2 までの間のスライスに V を代入します。 Python の文
     `O[I1:I2] = V' と同じです。

`int PySequence_DelSlice(PyObject *o, int i1, int i2)'
     配列オブジェクト O の I1 から I2 までの間の
     スライスを削除します。失敗すると `-1' を返します。 Python の文
     `del O[I1:I2]' と同じです。

`PyObject* PySequence_Tuple(PyObject *o)'
     成功するとO をタプルで返します。 失敗すると `NULL' を返します。
     Python の式 `tuple(O)' と同じです。

`int PySequence_Count(PyObject *o, PyObject *value)'
     O における VALUE の出現回数、すなわち `O[KEY] == VALUE' となる KEY
     の個数を 返します。失敗すると `-1' を返します。 Python の式
     `O.count(VALUE)' と同じです。

`int PySequence_Contains(PyObject *o, PyObject *value)'
     O にVALUE が入っているか判定します。 O のある要素が VALUE と等価
     (equal) ならば`1' を 返し、それ以外の場合には `0' を返します。
     エラーが発生すると `-1' を返します。 Python の式 `VALUE in O'
     と同じです。

`int PySequence_Index(PyObject *o, PyObject *value)'
     `O[I] == VALUE' となる最初に見つかったインデクス I を返します。
     エラーが発生すると `-1' を返します。 Python の式 `O.index(VALUE)'
     と同じです。

`PyObject* PySequence_List(PyObject *o)'
     任意の配列 O と同じ内容を持つリストオブジェクトを返します。
     返されるリストは必ず新しいリストオブジェクトになります。

`PyObject* PySequence_Tuple(PyObject *o)'
     任意の配列 O と同じ内容を持つタプルオブジェクトを返します。 O
     がタプルの場合、新たな参照を返します。それ以外の場合、
     適切な内容が入ったタプルを構築して返します。

`PyObject* PySequence_Fast(PyObject *o, const char *m)'
     配列 O がすでにタプルやリストであれば O を返し、 そうでなければ O
     をタプルで返します。 返されるタプルのメンバにアクセスするには
     `PySequence_Fast_GET_ITEM()' を使ってください。 失敗すると `NULL'
     を返します。 オブジェクトが配列でなければ、M がメッセージテキストに
     なっている`TypeError' を送出します。


`PyObject* PySequence_Fast_GET_ITEM(PyObject *o, int i)'
     O が`NULL'でなく、`PySequence_Fast()' が返した
     オブジェクトであり、かつI がインデクスの範囲内にあると 仮定して、O
     の I 番目の要素を返します。

`PyObject* PySequence_ITEM(PyObject *o, int i)'
     成功すると the Ith element of O を返し、 失敗すると `NULL'
     を返します。 `PySequence_GetItem()' ですが、 `PySequence_Check(O)'
     が真になるかチェックせず、 負のインデクスに対する調整を行いません。
     _Added in Python version 2.3_

`int PySequence_Fast_GET_SIZE(PyObject *o)'
     O が`NULL'でなく、`PySequence_Fast()' が返した
     オブジェクトであると仮定して、O の長さを返します。 O
     のサイズは`PySequence_Size()' を呼び出しても
     得られますが、`PySequence_Fast_GET_SIZE()' の方が O
     をリストかタプルであると仮定して処理するため、より高速です。


File: python-api-jp.info,  Node: マップ型プロトコル mapping protocol,  Next: イテレータプロトコル iterator protocol,  Prev: 配列プロトコル sequence protocol,  Up: 抽象オブジェクトレイヤ abstract objects layer

マップ型プロトコル (mapping protocol)
=====================================

`int PyMapping_Check(PyObject *o)'
     オブジェクトがマップ型プロトコルを提供している場合に `1' を返し、
     そうでないときには `0' を返します。
     この関数呼び出しは常に成功します。

`int PyMapping_Length(PyObject *o)'
     成功するとオブジェクト O 中のキーの数を返し、 失敗すると `-1'
     を返します。
     マップ型プロトコルを提供していないオブジェクトに対しては、 Python
     の式 `len(O)'  と同じ になります。

`int PyMapping_DelItemString(PyObject *o, char *key)'
     オブジェクト O から KEY に関する対応付けを削除します。 失敗すると
     `-1' を返します。 Python の文 `del O[KEY]' と同じです。

`int PyMapping_DelItem(PyObject *o, PyObject *key)'
     オブジェクト O から KEY に対する対応付けを削除します。 失敗すると
     `-1' を返します。 Python の文 `del O[KEY]' と同じです。

`int PyMapping_HasKeyString(PyObject *o, char *key)'
     成功すると、マップ型オブジェクトがキー KEY を持つ場合に `1'
     を返し、そうでないときには `0' を返します。 Python の式
     `O.has_key(KEY)' と同じです。 この関数呼び出しは常に成功します。

`int PyMapping_HasKey(PyObject *o, PyObject *key)'
     マップ型オブジェクトがキー KEY を持つ場合に `1' を返し、
     そうでないときには `0' を返します。 Python の式 `O.has_key(KEY)'
     と同じです。 この関数呼び出しは常に成功します。

`PyObject* PyMapping_Keys(PyObject *o)'
     成功するとオブジェクト O のキーからなるリストを返します。
     失敗すると `NULL'を返します。 Python の式 `O.keys()' と同じです。

`PyObject* PyMapping_Values(PyObject *o)'
     成功するとオブジェクト O
     のキーに対応する値からなるリストを返します。 失敗すると
     `NULL'を返します。 Python の式 `O.values()' と同じです。

`PyObject* PyMapping_Items(PyObject *o)'
     成功するとオブジェクト O の要素対、すなわちキーと値のペアが
     入ったタプルからなるリストを返します。 失敗すると
     `NULL'を返します。 Python の式 `O.items()' と同じです。

`PyObject* PyMapping_GetItemString(PyObject *o, char *key)'
     オブジェクト KEY に対応するO の要素を返します。 失敗すると
     `NULL'を返します。 Python の式 `O[KEY]' と同じです。

`int PyMapping_SetItemString(PyObject *o, char *key, PyObject *v)'
     オブジェクトO で KEY を値 V に対応付けます。 失敗すると `-1'
     を返します。 Python の文 `O[KEY] = V' と同じです。


File: python-api-jp.info,  Node: イテレータプロトコル iterator protocol,  Next: バッファプロトコル buffer protocol,  Prev: マップ型プロトコル mapping protocol,  Up: 抽象オブジェクトレイヤ abstract objects layer

イテレータプロトコル (iterator protocol)
========================================

_Added in Python version 2.2_

イテレータを扱うための固有の関数は二つしかありません。

`int PyIter_Check(PyObject *o)'
     O がイテレータプロトコルをサポートする場合に真を返します。

`PyObject* PyIter_Next(PyObject *o)'
     反復処理 O における次の値を返します。オブジェクトが
     イテレータの場合、この関数は反復処理における次の値を取り出します。
     要素が何も残っていない場合には例外がセットされていない状態で
     `NULL' を 返します。オブジェクトがイテレータでない場合には
     `TypeError' を送出します。要素を取り出す際にエラーが生じると
     `NULL' を返し、 発生した例外を送出します。

イテレータの返す要素にわたって反復処理を行うループを書くと、 C
のコードは以下のようになるはずです:

     PyObject *iterator = PyObject_GetIter(obj);
     PyObject *item;
     
     if (iterator == NULL) {
         /* エラーの伝播処理をここに書く */
     }
     
     while (item = PyIter_Next(iterator)) {
         /* 取り出した要素で何らかの処理を行う */
         ...
         /* 終わったら参照を放棄する */
         Py_DECREF(item);
     }
     
     Py_DECREF(iterator);
     
     if (PyErr_Occurred()) {
         /* エラーの伝播処理をここに書く */
     }
     else {
         /* 別の処理を続ける */
     }


File: python-api-jp.info,  Node: バッファプロトコル buffer protocol,  Prev: イテレータプロトコル iterator protocol,  Up: 抽象オブジェクトレイヤ abstract objects layer

バッファプロトコル (buffer protocol)
====================================

`int PyObject_AsCharBuffer(PyObject *obj, const char **buffer, int *buffer_len)'
     文字ベースの入力として使える読み出し専用メモリ上の位置へのポインタを
     返します。OBJ 引数は単一セグメントからなる
     文字バッファインタフェースをサポートしていなければなりません。
     成功すると `0'を返し、BUFFER をメモリの位置に、 BUFFER_LEN
     をバッファの長さに設定します。エラーの際には `-1'
     を返し、`TypeError' をセットします。 _Added in Python version 1.6_

`int PyObject_AsReadBuffer(PyObject *obj, const void **buffer, int *buffer_len)'
     任意のデータを収めた読み出し専用のメモリ上の位置へのポインタを
     返します。OBJ 引数は単一セグメントからなる読み出し可能
     バッファインタフェースをサポートしていなければなりません。
     成功すると `0'を返し、BUFFER をメモリの位置に、 BUFFER_LEN
     をバッファの長さに設定します。エラーの際には `-1'
     を返し、`TypeError' をセットします。 _Added in Python version 1.6_

`int PyObject_CheckReadBuffer(PyObject *o)'
     O が単一セグメントからなる読み出し可能バッファインタフェース
     をサポートしている場合に `1' を返します。それ以外の場合には `0'
     を返します。 _Added in Python version 2.2_

`int PyObject_AsWriteBuffer(PyObject *obj, void **buffer, int *buffer_len)'
     書き込み可能なメモリ上の位置へのポインタを返します。OBJ
     引数は単一セグメントからなる文字バッファインタフェース
     をサポートしていなければなりません。成功すると `0'を返し、 BUFFER
     をメモリの位置に、 BUFFER_LEN をバッファの
     長さに設定します。エラーの際には `-1' を返し、 `TypeError'
     をセットします。 _Added in Python version 1.6_


File: python-api-jp.info,  Node: 具象オブジェクト concrete object レイヤ,  Next: 初期化 initialization、終了処理 finalization、スレッド,  Prev: 抽象オブジェクトレイヤ abstract objects layer,  Up: Top

具象オブジェクト (concrete object) レイヤ
*****************************************

この章ではは、特定の Python オブジェクト型固有の関数について述べて
います。これらの関数に間違った方のオブジェクトを渡すのは良い考え
であありません; Python プログラムから何らかのオブジェクトを受け取った
とき、そのオブジェクトが正しい型になっているか確信をもてないの
なら、まず型チェックを行わなければなりません; 例えば、あるオブジェクト
が辞書型か調べるには、`PyDict_Check()' を使います。 この章は Python
のオブジェクト型における "家計図" に従って構成 されています。

_この章で述べている関数は、渡されたオブジェクトの型を注意深く
チェックしはするものの、多くの関数は渡されたオブジェクトが有効な `NULL'
なのか有効なオブジェクトなのかをチェックしません。 これらの関数に
`NULL' を渡させてしまうと、関数はメモリアクセス
違反を起こして、インタプリタを即座に終了させてしまうはずです。_

* Menu:

* 基本オブジェクト fundamental object::
* 数値型オブジェクト numeric object::
* 配列オブジェクト sequence object::
* マップ型オブジェクト mapping object::
* その他のオブジェクト::


File: python-api-jp.info,  Node: 基本オブジェクト fundamental object,  Next: 数値型オブジェクト numeric object,  Prev: 具象オブジェクト concrete object レイヤ,  Up: 具象オブジェクト concrete object レイヤ

基本オブジェクト (fundamental object)
=====================================

この節では、Python の型オブジェクトと単量子 (singleton) オブジェクト
`None' について述べます。

* Menu:

* 型オブジェクト type object::
* None オブジェクト::


File: python-api-jp.info,  Node: 型オブジェクト type object,  Next: None オブジェクト,  Prev: 基本オブジェクト fundamental object,  Up: 基本オブジェクト fundamental object

型オブジェクト (type object)
----------------------------

`PyTypeObject'
     組み込み型を記述する際に用いられる、オブジェクトを表す C
     構造体です。

`PyObject* PyType_Type'
     型オブジェクト自身の型オブジェクトです; Python レイヤにおける
     `types.TypeType' と同じオブジェクトです。

`int PyType_Check(PyObject *o)'
     オブジェクト O が型オブジェクトの場合に真を返します。
     標準型オブジェクトから導出されたサブタイプ (subtype)
     のインスタンスも 含みます。その他の場合には偽を返します。

`int PyType_CheckExact(PyObject *o)'
     オブジェクト O が型オブジェクトの場合に真を返します。
     標準型のサブタイプの場合は含みません。その他の場合には偽を返します。
     _Added in Python version 2.2_

`int PyType_HasFeature(PyObject *o, int feature)'
     型オブジェクト O に、型機能 FEATURE が設定されている
     場合に真を返します。型機能は各々単一ビットのフラグで表されます。

`int PyType_IS_GC(PyObject *o)'
     型オブジェクトが O が循環参照検出をサポートしている場合に
     真を返します; この関数は型機能フラグ `Py_TPFLAGS_HAVE_GC'
     の設定状態をチェックします。 _Added in Python version 2.0_

`int PyType_IsSubtype(PyTypeObject *a, PyTypeObject *b)'
     A が B のサブタイプの場合に真を返します。 _Added in Python version
     2.2_

`PyObject* PyType_GenericAlloc(PyTypeObject *type, int nitems)'
     _Added in Python version 2.2_

`PyObject* PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)'
     _Added in Python version 2.2_

`int PyType_Ready(PyTypeObject *type)'
     型オブジェクトの後始末処理 (finalize) を行います。この関数は
     全てのオブジェクトで初期化を完了するために呼び出されなくては
     なりません。
     この関数は、基底クラス型から継承したスロットを型オブジェクトに追加する
     役割があります。 成功した場合には `0' を返し、エラーの場合には
     `-1' を 返して例外情報を設定します。 _Added in Python version 2.2_


File: python-api-jp.info,  Node: None オブジェクト,  Prev: 型オブジェクト type object,  Up: 基本オブジェクト fundamental object

None オブジェクト
-----------------

`None' に対する `PyTypeObject' は、 Python/C API では
直接公開されていないので注意してください。 `None' は単量子 (singleton)
なので、オブジェクトのアイデンティティテスト (C では `==')
を使うだけで十分だからです。 同じ理由から、`PyNone_Check()'
関数はありません。

`PyObject* Py_None'
     Python における `None' オブジェクトで、値がないことを表します。
     このオブジェクトにはメソッドがありません。リファレンスカウントに
     ついては、このオブジェクトも他のオブジェクトと同様に扱う必要が
     あります。


File: python-api-jp.info,  Node: 数値型オブジェクト numeric object,  Next: 配列オブジェクト sequence object,  Prev: 基本オブジェクト fundamental object,  Up: 具象オブジェクト concrete object レイヤ

数値型オブジェクト (numeric object)
===================================

* Menu:

* 通常整数型オブジェクト plain integer object::
* 長整数型オブジェクト long integer object::
* 浮動小数点型オブジェクト floating point object::
* 浮動小数点オブジェクト complex number object::


File: python-api-jp.info,  Node: 通常整数型オブジェクト plain integer object,  Next: 長整数型オブジェクト long integer object,  Prev: 数値型オブジェクト numeric object,  Up: 数値型オブジェクト numeric object

(通常)整数型オブジェクト (plain integer object)
-----------------------------------------------

`PyIntObject'
     この `PyObject' のサブタイプは Python
     の整数型オブジェクトを表現します。

`PyTypeObject PyInt_Type'
     この `PyTypeObject' のインスタンスは Python の (長整数でない)
     整数型を表現します。これは `types.IntType' と同じオブジェクトです。

`int PyInt_Check(PyObject* o)'
     O が `PyInt_Type' 型か `PyInt_Type'
     型のサブタイプであるときに真を返します。 _Changed in Python
     version 2.2_

`int PyInt_CheckExact(PyObject* o)'
     O が `PyInt_Type' 型で、かつ `PyInt_Type'
     型のサブタイプでないときに真を返します。 _Added in Python version
     2.2_

`PyObject* PyInt_FromString(char *str, char **pend, int base)'
     STR の文字列値に基づいて、新たな `PyIntObject' または
     `PyLongObject' を返します。このとき BASE
     を基数として文字列を解釈します。 PEND が `NULL'でなければ、
     `*PEND' は STR 中で
     数が表現されている部分以後の先頭の文字のアドレスを指しています。
     BASE が `0' ならば、STR の先頭の文字列に基づいて 基数を決定します:
     もし STR が `'0x'' または `'0X'' で始まっていれば、基数に 16
     を使います; STR が `'0'' で始まっていれば、基数に 8 を使います;
     その他の場合には基数に 10 を 使います。BASE が `0'
     でなければ、BASE は `2' 以上 `36'
     以下の数でなければなりません。先頭に空白がある場合は
     無視されます。数字が全くない場合、`ValueError' が送出
     されます。使用しているマシンの `long int' 型で表現し切れないくらい
     大きな数が文字列に入っており、オーバフロー警告が抑制されていれば、
     `PyLongObject' を返します。オーバフロー警告が抑制されていなければ、
     `NULL' を返します。

`PyObject* PyInt_FromLong(long ival)'
     IVAL の値を使って新たな整数オブジェクトを生成します。

     現在の実装では、`-1' から `100' までの全ての整数
     に対する整数オブジェクトの配列を保持するようにしており、
     この範囲の数を生成すると、実際には既存のオブジェクトに
     対する参照が返るようになっています。従って、 `1' の
     値を変えることすら可能です。変えてしまった場合の Python の
     挙動は未定義です :-)

`long PyInt_AsLong(PyObject *io)'
     オブジェクトがまだ `PyIntObject' でなければまず型キャストを
     試み、次にその値を返します。

`long PyInt_AS_LONG(PyObject *io)'
     オブジェクト IO の値を返します。エラーチェックを行いません。

`unsigned long PyInt_AsUnsignedLongMask(PyObject *io)'
     オブジェクトがまだ `PyIntObject' または `PyLongObject' で
     なければまず型キャストを試み、次にその値を`unsigned long' 型で
     返します。この関数はオーバフローをチェックしません。 _Added in
     Python version 2.3_

`unsigned long long PyInt_AsUnsignedLongLongMask(PyObject *io)'
     オブジェクトがまだ `PyIntObject' または `PyLongObject' で
     なければまず型キャストを試み、次にその値を`unsigned long long' 型で
     返します。オーバフローをチェックしません。 _Added in Python
     version 2.3_

`long PyInt_GetMax()'
     システムの知識に基づく、扱える最大の整数値
     (システムのヘッダファイル に定義されている `LONG_MAX' )
     を返します。

* Menu:

* ブール型オブジェクト boolean object::


File: python-api-jp.info,  Node: ブール型オブジェクト boolean object,  Prev: 通常整数型オブジェクト plain integer object,  Up: 通常整数型オブジェクト plain integer object

ブール型オブジェクト (boolean object)
.....................................

Python ではブール値を整数型のサブクラスとして実装しています．
ブール値には `Py_False' と `Py_True' の二つの
値しかありません．従って，通常のような生成や削除の関数は
ブール型には当てはまりません．その代わり，以下のようなマクロを
利用できます．

`int PyBool_Check(PyObject* o)'
     O が`PyBool_Type' 型である場合に真を返します． _Added in Python
     version 2.3_

`PyObject* Py_False'
     Python の `False' オブジェクトです．このオブジェクトには
     メソッドがありません．参照カウントの面では他のオブジェクトと
     全く同じように扱わねばなりません．

`PyObject* Py_True'
     Python の `True' オブジェクトです．このオブジェクトには
     メソッドがありません．参照カウントの面では他のオブジェクトと
     全く同じように扱わねばなりません．

`int PyBool_FromLong(long v)'
     V の値に応じて `Py_True' または `Py_False' を返します． _Added in
     Python version 2.3_


File: python-api-jp.info,  Node: 長整数型オブジェクト long integer object,  Next: 浮動小数点型オブジェクト floating point object,  Prev: 通常整数型オブジェクト plain integer object,  Up: 数値型オブジェクト numeric object

長整数型オブジェクト (long integer object)
------------------------------------------

`PyLongObject'
     この `PyObject' のサブタイプは長整数型を表現します。

`PyTypeObject PyLong_Type'
     この `PyTypeObject' のインスタンスは Python
     長整数型を表現します。これは `types.LongType'
     と同じオブジェクトです。

`int PyLong_Check(PyObject *p)'
     引数が `PyLongObject' か `PyLongObject'
     のサブタイプのときに真を返します。  _Changed in Python version 2.2_

`int PyLong_CheckExact(PyObject *p)'
     引数が `PyLongObject' 型で、かつ `PyLongObject'
     型のサブタイプでないときに真を返します。 _Added in Python version
     2.2_

`PyObject* PyLong_FromLong(long v)'
     V から新たな `PyLongObject' オブジェクトを生成して返します。
     失敗のときには `NULL' を返します。

`PyObject* PyLong_FromUnsignedLong(unsigned long v)'
     C の `unsigned long' 型から新たな `PyLongObject' オブジェクト
     を生成して返します。 失敗のときには `NULL' を返します。

`PyObject* PyLong_FromLongLong(long long v)'
     C の `long long' 型から新たな `PyLongObject' オブジェクトを
     生成して返します。失敗のときには `NULL' を返します。

`PyObject* PyLong_FromUnsignedLongLong(unsigned long long v)'
     C の `unsigned long long' 型から新たな `PyLongObject'
     オブジェクトを生成して返します。失敗のときには `NULL' を返します。

`PyObject* PyLong_FromDouble(double v)'
     V の整数部から新たな `PyLongObject' オブジェクトを生成して
     返します。失敗のときには `NULL' を返します。

`PyObject* PyLong_FromString(char *str, char **pend, int base)'
     STR の文字列値に基づいて、新たな `PyLongObject' を返します。
     このとき BASE を基数として文字列を解釈します。 PEND が
     `NULL'でなければ、 `*PEND' は STR 中で
     数が表現されている部分以後の先頭の文字のアドレスを指しています。
     BASE が `0' ならば、STR の先頭の文字列に基づいて 基数を決定します:
     もし STR が `'0x'' または `'0X'' で始まっていれば、基数に 16
     を使います; STR が `'0'' で始まっていれば、基数に 8 を使います;
     その他の場合には基数に 10 を 使います。BASE が `0'
     でなければ、BASE は `2' 以上 `36'
     以下の数でなければなりません。先頭に空白がある場合は
     無視されます。数字が全くない場合、`ValueError' が送出 されます。

`PyObject* PyLong_FromUnicode(Py_UNICODE *u, int length, int base)'
     Unicode の数字配列を Python の長整数型に変換します。最初のパラメタ
     U は、 Unicode 文字列の最初の文字を指し、LENGTH には
     文字数を指定し、BASE には変換時の基数を指定します。 基数は範囲 [2,
     36] になければなりません; 範囲外の基数を指定すると、 `ValueError'
     を送出します。 _Added in Python version 1.6_

`PyObject* PyLong_FromVoidPtr(void *p)'
     Python 整数型または長整数型をポインタ P から生成します。
     ポインタに入れる値は `PyLong_AsVoidPtr()' を使って
     得られるような値です。 _Added in Python version 1.5.2_

`long PyLong_AsLong(PyObject *pylong)'
     PYLONG の指す長整数値を、 C の `long' 型表現で返します。 PYLONG が
     `LONG_MAX'  よりも 大きい場合、 `OverflowError' を送出します。

`unsigned long PyLong_AsUnsignedLong(PyObject *pylong)'
     PYLONG の指す長整数値を、 C の `unsigned long' 型表現で返します。
     PYLONG が `ULONG_MAX'  よりも 大きい場合、 `OverflowError'
     を送出します。

`long long PyLong_AsLongLong(PyObject *pylong)'
     PYLONG の指す長整数値を、 C の `long long' 型表現で返します。
     PYLONG が `long long' で表せない場合、 `OverflowError'
     を送出します。 _Added in Python version 2.2_

`unsigned long long PyLong_AsUnsignedLongLong(PyObject *pylong)'
     PYLONG の指す値を、 C の `unsigned long long' 型表現で 返します。
     PYLONG が `unsigned long long' で表せない場合、 正の値なら
     `OverflowError' を、負の値なら `TypeError' を送出します。 _Added
     in Python version 2.2_

`unsigned long PyLong_AsUnsignedLongMask(PyObject *io)'
     Python 長整数値を、 オーバフローチェックを行わずに C の `unsigned
     long' 型表現で返します。 _Added in Python version 2.3_

`unsigned long PyLong_AsUnsignedLongLongMask(PyObject *io)'
     Python 長整数値を、 オーバフローチェックを行わずに C の `unsigned
     long long' 型表現で返します。 _Added in Python version 2.3_

`double PyLong_AsDouble(PyObject *pylong)'
     PYLONG の指す値を、 C の `double' 型表現で返します。 PYLONG が
     `double' を使って近似表現できない場合、 `OverflowError'
     例外を送出して `-1.0' を返します。

`void* PyLong_AsVoidPtr(PyObject *pylong)'
     Python の整数型か長整数型を指す PYLONG を、 C の `void'
     ポインタに変換します。PYLONG を変換できなければ、 `OverflowError'
     を送出します。この関数は `PyLong_FromVoidPtr()'
     で値を生成するときに使うような `void'
     ポインタ型を生成できるだけです。 _Added in Python version 1.5.2_


File: python-api-jp.info,  Node: 浮動小数点型オブジェクト floating point object,  Next: 浮動小数点オブジェクト complex number object,  Prev: 長整数型オブジェクト long integer object,  Up: 数値型オブジェクト numeric object

浮動小数点型オブジェクト (floating point object)
------------------------------------------------

`PyFloatObject'
     この `PyObject' のサブタイプは Python 浮動小数点型オブジェクト
     を表現します。

`PyTypeObject PyFloat_Type'
     この `PyTypeObject' のインスタンスは Python 浮動小数点型を
     表現します。これは `types.FloatType' と同じオブジェクトです。

`int PyFloat_Check(PyObject *p)'
     引数が `PyFloatObject' か `PyFloatObject'
     のサブタイプのときに真を返します。  _Changed in Python version 2.2_

`int PyFloat_CheckExact(PyObject *p)'
     引数が `PyFloatObject' 型で、かつ `PyFloatObject'
     型のサブタイプでないときに真を返します。 _Added in Python version
     2.2_

`PyObject* PyFloat_FromString(PyObject *str, char **pend)'
     STR の文字列値をもとに `PyFloatObject' オブジェクトを生成
     します。失敗すると `NULL' を返します。引数 PEND は無視されます。
     この引数は後方互換性のためだけに残されています。

`PyObject* PyFloat_FromDouble(double v)'
     V から `PyFloatObject' オブジェクトを生成して返します。 失敗すると
     `NULL' を返します。

`double PyFloat_AsDouble(PyObject *pyfloat)'
     PYFLOAT の指す値を、 C の `double' 型表現で返します。

`double PyFloat_AS_DOUBLE(PyObject *pyfloat)'
     PYFLOAT の指す値を、 C の `double' 型表現で返しますが、
     エラーチェックを行いません。

