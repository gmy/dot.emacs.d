This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: 利用可能な関数,  Prev: 警告フィルタ,  Up: warnings

利用可能な関数
--------------

`warn(message[, category[, stacklevel]])'
     警告を発するか、無視するか、あるいは例外を送出します。 CATEGORY
     引数が与えられた場合、警告カテゴリクラスでなければ なりません
     (上を参照してください); 標準の値は `UserWarning' です。MESSAGE を
     `Warning' インスタンスで代用する こともできますが、この場合
     CATEGORY は無視され、 `message.__class__' が使われ、メッセージ文は
     `str(message)'
     になります。発された例外が前述した警告フィルタによってエラーに
     変更された場合、この関数は例外を送出します。引数 STACKLEVEL は
     Python でラッパ関数を書く際に利用することができます。例えば:

          def deprecation(message):
              warnings.warn(message, DeprecationWarning, stacklevel=2)

     こうすることで、警告が参照するソースコード部分を、 `deprecation()'
     自身ではなく `deprecation()' を 呼び出した側にできます
     (というのも、前者の場合は警告メッセージ
     の目的を台無しにしてしまうからです)。

`warn_explicit(message, category, filename, lineno[, module[, registry]])'
     `warn()' の機能に対する低レベルのインタフェースで、
     メッセージ、警告カテゴリ、ファイル名および行番号、そしてオプションの
     モジュール名およびレジストリ情報 (モジュールの
     `__warningregistry__' 辞書) を明示的に渡します。
     モジュール名は標準で `.py' が取り去られたファイル名になります;
     レジストリが渡されなかった場合、警告が抑制されることはありません。
     MESSAGE は文字列のとき、CATEGORY は `Warning'
     のサブクラスでなければなりません。また MESSAGE は `Warning'
     のインスタンスであってもよく、この場合 CATEGORY は無視されます。

`showwarning(message, category, filename, lineno[, file])'
     警告をファイルに書き込みます。標準の実装では、
     `formatwarning(MESSAGE, CATEGORY, FILENAME, LINENO)'
     を呼び出し、返された文字列を FILE に書き込み ます。FILE は標準では
     `sys.stderr' です。 この関数は `warnings.showwarning'
     に別の実装を代入して 置き換えることができます。

`formatwarning(message, category, filename, lineno)'
     警告を通常の方法で書式化します。返される文字列内には改行が埋め込まれて
     いる可能性があり、かつ文字列は改行で終端されています。

`filterwarnings(action[, message[, category[, module[, lineno[, append]]]]])'
     警告フィルタのリストにエントリを一つ挿入します。標準ではエントリは
     先頭に挿入されます; APPEND が真ならば、末尾に挿入されます。
     この関数は引数の型をチェックし、MESSAGE および MODULE
     の正規表現をコンパイルしてから、これらをタプルにして警告フィルタ
     の先頭に挿入します。従って、以前に挿入されたエントリと後で挿入
     されたエントリの両方が特定の警告に合致した場合、後者が前者の
     エントリを上書きします。引数が省略されると、標準では全てにマッチ
     する値に設定されます。

`resetwarnings()'
     警告フィルタをリセットします。これにより、`-W' コマンドライン
     オプションによるものを含め、`filterwarnings' の呼び出しによる
     影響はすべて無効化されます。


File: python-lib-jp.info,  Node: imp,  Next: pkgutil,  Prev: warnings,  Up: Python ランタイム サービス

`import'内部へアクセスする
==========================

`import'文の実装へアクセスする。

この
モジュールは`import'文を実装するために使われているメカニズムへのインターフェイスを提供します。次の定数と関数が定義されています:

`get_magic()'
     バイトコンパイルされたコードファイル(`.pyc'ファイル)を認識するために使われるマジック文字列値を返します。(この値はPythonの各バージョンで異なります。)

`get_suffixes()'
     三つ組みのリストを返します。それぞれはモジュールの特定の型を説明しています。各三つ組みは形式`(SUFFIX,
     MODE,
     TYPE)'を持ちます。ここで、SUFFIXは探すファイル名を作るためにモジュール名に追加する文字列です。そのファイルをオープンするために、MODEは組み込み`open()'関数へ渡されるモード文字列です(これはテキストファイル対しては`'r''、バイナリファイルに対しては`'rb''となります)。TYPEはファイル型で、以下で説明する値`PY_SOURCE'、`PY_COMPILED'、あるいは、`C_EXTENSION'の一つを取ります。

`find_module(name[, path])'
     検索パスPATH上でモジュールNAMEを見つけようとします。PATHがディレクトリ名のリストならば、上の`get_suffixes()'が返す拡張子のいずれかを伴ったファイルを各ディレクトリの中で検索します。リスト内の有効でない名前は黙って無視されます(しかし、すべてのリスト項目は文字列でなければならない)。PATHが省略されるか`None'ならば、`sys.path'のディレクトリ名のリストが検索されます。しかし、最初にいくつか特別な場所を検索します。所定の名前(`C_BUILTIN')をもつ組み込みモジュールを見つけようとします。それから、フリーズされたモジュール(`PY_FROZEN')、同様にいくつかのシステムと他の場所がみられます(Macでは、リソース(`PY_RESOURCE')を探します。Windowsでは、特定のファイルを指すレジストリの中を見ます)。

     検索が成功すれば、戻り値は三つ組み`(FILE, PATHNAME,
     DESCRIPTION)'です。ここで、FILEは先頭に位置を合わされたオープンファイルオブジェクトで、PATHNAMEは見つかったファイルのパス名です。そして、DESCRIPTIONは`get_suffixes()'が返すリストに含まれているような三つ組みで、見つかったモジュールの種類を説明しています。モジュールがファイルの中にあるならば、返されたFILEは`None'で、FILENAMEは空文字列、DESCRIPTIONタプルはその拡張子とモードに対して空文字列を含みます。モジュール型は上の括弧の中に示されます。検索が失敗すれば、`ImportError'が発生します。他の例外は引数または環境に問題があることを示唆します。

     この関数は階層的なモジュール名(ドットを含んだ名前)を扱いません。P.M、すなわち、パッケージPのサブモジュールMを見つけるためには、パッケージPを見つけてロードするために`find_module()'と`load_module()'を使い、それから`P.__path__'に設定されたPATH引数とともに`find_module()'を使ってください。P自身がドット名のときは、このレシピを再帰的に適用してください。

`load_module(name, file, filename, description)'
     `find_module()'を使って(あるいは、互換性のある結果を作り出す検索を行って)以前見つけたモジュールをロードします。この関数はモジュールをインポートするという以上のことを行います:
     モジュールが既にインポートされているならば、`reload()'
     と同じです!。NAME引数は(これがパッケージのサブモジュールならばパッケージ名を含む)完全なモジュール名を示します。FILE引数はオープンしたファイルで、FILENAMEは対応するファイル名です。モジュールがファイルからロードされようとしていないとき、これらはそれぞれ`None'と`'''であっても構いません。`get_suffixes()'が返すようにDESCRIPTION引数はタプルで、どの種類のモジュールがロードされなければならないかを説明するものです。

     ロードが成功したならば、戻り値はモジュールオブジェクトです。そうでなければ、例外(たいていは`ImportError')が発生します。

     *重要:*
     FILE引数が`None'でなければ、例外が発生した時でさえ呼び出し側にはそれを閉じる責任があります。これを行うには、`try'
     ... `finally'文をつかうことが最も良いです。

`new_module(name)'
     NAMEという名前の新しい空モジュールオブジェクトを返します。このオブジェクトは`sys.modules'に挿入され_ません_。

`lock_held()'
     現在インポートロックが維持されているならば、`True'を返します。そうでなければ、`False'を返します。スレッドのないプラットホームでは、常に`False'を返します。

     スレッドのあるプラットホームでは、インポートが完了するまでインポートを実行するスレッドは内部ロックを維持します。このロックは元のインポートが完了するまで他のスレッドがインポートすることを阻止します。言い換えると、元のスレッドがそのインポート(および、もしあるならば、それによって引き起こされるインポート)の途中で構築した不完全なモジュールオブジェクトを、他のスレッドが見られないようにします。

`acquire_lock()'
     実行中のスレッドでインタープリタのインポートロックを取得します。スレッドセーフ
     なインポートフックでは、インポート時にこのロックを取得します。
     スレッドのないプラットホームではこの関数は何もしません。 _Added in
     Python version 2.3_

`release_lock()'
     インタープリタのインポートロックを解放します。
     スレッドのないプラットホームではこの関数は何もしません。 _Added in
     Python version 2.3_

整数値をもつ次の定数はこのモジュールの中で定義されており、`find_module()'の検索結果を表すために使われます。

`PY_SOURCE'
     ソースファイルとしてモジュールが発見された。

`PY_COMPILED'
     コンパイルされたコードオブジェクトファイルとしてモジュールが発見された。

`C_EXTENSION'
     動的にロード可能な共有ライブラリとしてモジュールが発見された。

`PY_RESOURCE'
     モジュールがMacintoshリソースとして発見された。この値はMacintoshでのみ返される。

`PKG_DIRECTORY'
     パッケージディレクトリとしてモジュールが発見された。

`C_BUILTIN'
     モジュールが組み込みモジュールとして発見された。

`PY_FROZEN'
     モジュールがフリーズされたモジュールとして発見された(`init_frozen()'を参照)。

次の定数と関数は旧式のものです。それらの機能は`find_module()'や`load_module()'を使って利用できます。後方互換性のために残されています:

`SEARCH_ERROR'
     使われていません。

`init_builtin(name)'
     NAMEという名前の組み込みモジュールを初期化し、そのモジュールオブジェクトを返します。モジュールが既に初期化されている場合は、_再度_初期化されます。いくつかのモジュールは二度初期化することができません。
     --
     これを再び初期化しようとすると、`ImportError'例外が発生します。NAMEという名前の組み込みモジュールがない場合は、`None'を返します。

`init_frozen(name)'
     NAMEという名前のフリーズされたモジュールを初期化し、モジュールオブジェクトを返します。モジュールが既に初期化されている場合は、_再度_初期化されます。NAMEという名前のフリーズされたモジュールがない場合は、`None'を返します。(フリーズされたモジュールはPythonで書かれたモジュールで、そのコンパイルされたバイトコードオブジェクトがPythonの`freeze'ユーティリティを使ってカスタムビルトPythonインタープリタへ組み込まれています。差し当たり、`Tools/freeze/'を参照してください。)

`is_builtin(name)'
     NAMEという名前の再度初期化できる組み込みモジュールがある場合は、`1'を返します。NAMEという名前の再度初期化できない組み込みモジュールがある場合は、`-1'を返します(`init_builtin()'を参照してください)。NAMEという名前の組み込みモジュールがない場合は、`0'を返します。

`is_frozen(name)'
     NAMEという名前のフリーズされたモジュール(`init_frozen()'を参照)がある場合は、`True'を返します。または、そのようなモジュールがない場合は、`False'を返します。

`load_compiled(name, pathname, file)'
     バイトコンパイルされたコードファイルとして実装されているモジュールをロードして初期化し、そのモジュールオブジェクトを返します。モジュールが既に初期化されている場合は、_再度_初期化されます。NAME引数はモジュールオブジェクトを作ったり、アクセスするために使います。PATHNAME引数はバイトコンパイルされたコードファイルを指します。FILE引数はバイトコンパイルされたコードファイルで、バイナリモードでオープンされ、先頭からアクセスされます。現在は、ユーザ定義のファイルをエミュレートするクラスではなく、実際のファイルオブジェクトでなければなりません。

`load_dynamic(name, pathname[, file])'
     動的ロード可能な共有ライブラリとして実装されているモジュールをロードして初期化します。モジュールが既に初期化されている場合は、_再度_初期化します。いくつかのモジュールではそれができずに、例外を発生するかもしれません。PATHNAME引数は共有ライブラリを指していなければなりません。NAME引数は初期化関数の名前を作るために使われます。共有ライブラリの`initNAME()'という名前の外部C関数が呼び出されます。オプションのFILE引数は無視されます。(注意:
     共有ライブラリはシステムに大きく依存します。また、すべてのシステムがそれをサポートしているわけではありません。)

`load_source(name, pathname, file)'
     Pythonソースファイルとして実装されているモジュールをロードして初期化し、モジュールオブジェクトを返します。モジュールが既に初期化されている場合は、_再度_初期化します。NAME引数はモジュールオブジェクトを作成したり、アクセスしたりするために使われます。PATHNAME引数はソースファイルを指します。FILE引数はソースファイルで、テキストとして読み込むためにオープンされ、先頭からアクセスされます。現在は、ユーザ定義のファイルをエミュレートするクラスではなく、実際のファイルオブジェクトでなければなりません。(拡張子`.pyc'または`.pyo'をもつ)正しく対応するバイトコンパイルされたファイルが存在する場合は、与えられたソースファイルを構文解析する代わりにそれが使われることに注意してください。

* Menu:

* 例 4::


File: python-lib-jp.info,  Node: 例 4,  Prev: imp,  Up: imp

例
--

次の関数はPython
1.4までの標準import文(階層的なモジュール名がない)をエミュレートします。(この_実装_はそのバージョンでは動作しないでしょう。なぜなら、`find_module()'は拡張されており、また`load_module()'が1.4で追加されているからです。)

     import imp
     import sys
     
     def __import__(name, globals=None, locals=None, fromlist=None):
         # Fast path: see if the module has already been imported.
         try:
             return sys.modules[name]
         except KeyError:
             pass
     
         # If any of the following calls raises an exception,
         # there's a problem we can't handle -- let the caller handle it.
     
         fp, pathname, description = imp.find_module(name)
     
         try:
             return imp.load_module(name, fp, pathname, description)
         finally:
             # Since we may exit via an exception, close fp explicitly.
             if fp:
                 fp.close()

階層的なモジュール名を実装し、`reload()'
関数を含むより完全な例はモジュール`knee'
にあります。`knee'モジュールはPythonのソースディストリビューションの中の`Demo/imputil/'にあります。


File: python-lib-jp.info,  Node: pkgutil,  Next: code,  Prev: imp,  Up: Python ランタイム サービス

パッケージ拡張ユーティリティ
============================

パッケージの拡張をサポートするユーティリティです。

_Added in Python version 2.3_

_Notice:_ [warning]
これは実験的なモジュールです。将来廃止されたり、Python 2.3 beta 1 の
バージョンとはまったく別のものに書き変えられる可能性があります。

_Notice:_ [warning]
これは実験的なモジュールです。将来廃止されたり、Python 2.3 beta 1 の
バージョンとはまったく別のものに書き変えられる可能性があります。

このモジュールは次の単一の関数を提供します。

`extend_path(path, name)'
     パッケージを構成するモジュールのサーチパスを拡張します。
     パッケージの `__init__.py' で次のように書くことを意図したもので
     す。

          from pkgutil import extend_path
          __path__ = extend_path(__path__, __name__)

     上記はパッケージの `__path__' に `sys.path' の全ディレクトリ
     のサブディレクトリとしてパッケージ名と同じ名前を追加します。これは1つ
     の論理的なパッケージの異なる部品を複数のディレクトリに分けて配布したい
     ときに役立ちます。

     同時に `*.pkg' の `*' の部分が NAME 引数に指定された文
     字列に一致するファイルの検索もおこないます。この機能は `import'
     で始まる特別な行がないことを除き `*.pth' ファイルに似ています
     (`site' の項を参照)。`*.pkg' は重複のチェックを除き、信
     頼できるものとして扱われます。`*.pkg' ファイルの中に見つかったエ
     ントリはファイルシステム上に実在するか否かを問わず、そのまますべてパス
     に追加されます。(このような仕様です。)

     入力パスがリストでない場合(フリーズされたパッケージのとき)は何もせずに
     リターンします。入力パスが変更されていなければ、アイテムを末尾に追加し
     ただけのコピーを返します。

     `sys.path' はシーケンスであることが前提になっています。 `sys.path'
     の要素の内、実在するディレクトリを指す(ユニコードまた
     は8ビットの)文字列となっていないものは無視されます。ファイル名として使っ
     たときにエラーが発生する `sys.path' のユニコード要素がある場合、
     この関数(`os.path.isdir()' を実行している行)で例外が発生する
     可能性があります。



File: python-lib-jp.info,  Node: code,  Next: codeop,  Prev: pkgutil,  Up: Python ランタイム サービス

インタプリタ基底クラス
======================

対話的Pythonインタプリタのための基底クラス。

`code'モジュールはread-eval-print(読み込み-評価-表示)ループをPythonで実装するための機能を提供します。対話的なインタプリタプロンプトを提供するアプリケーションを作るために使える二つのクラスと便利な関数が含まれています。

`InteractiveInterpreter([locals])'
     このクラスは構文解析とインタプリタ状態(ユーザの名前空間)を取り扱います。入力バッファリングやプロンプト出力、または入力ファイル指定を扱いません(ファイル名は常に明示的に渡されます)。オプションのLOCALS引数はその中でコードが実行される辞書を指定します。その初期値は、キー`'__name__''が`'__console__''に設定され、キー`'__doc__''が`None'に設定された新しく作られた辞書です。

`InteractiveConsole([locals[, filename]])'
     対話的なPythonインタプリタの振る舞いを厳密にエミュレートします。このクラスは`InteractiveInterpreter'を元に作られていて、通常の`sys.ps1'と`sys.ps2'をつかったプロンプト出力と入力バッファリングが追加されています。

`interact([banner[, readfunc[, local]]])'
     read-eval-printループを実行するための便利な関数。これは`InteractiveConsole'の新しいインスタンスを作り、READFUNCが与えられた場合は`raw_input()'メソッドとして使われるように設定します。LOCALが与えられた場合は、インタプリタループのデフォルト名前空間として使うために`InteractiveConsole'コンストラクタへ渡されます。そして、インスタンスの`interact()'メソッドは見出しとして使うために渡されるBANNERを受け取り実行されます。コンソールオブジェクトは使われた後捨てられます。

`compile_command(source[, filename[, symbol]])'
     この関数はPythonのインタプリタメインループ(別名、read-eval-printループ)をエミュレートしようとするプログラムにとって役に立ちます。扱いにくい部分は、ユーザが(完全なコマンドや構文エラーではなく)さらにテキストを入力すれば完全になりうる不完全なコマンドを入力したときを決定することです。この関数は_ほとんど_の場合に実際のインタプリタメインループと同じ決定を行います。

     SOURCEはソース文字列です。FILENAMEはオプションのソースが読み出されたファイル名で、デフォルトで`'<input>''です。SYMBOLはオプションの文法の開始記号で、`'single''
     (デフォルト)または`'eval''のどちらかにすべきです。

     コマンドが完全で有効ならば、コードオブジェクトを返します(`compile(SOURCE,
     FILENAME,
     SYMBOL)'と同じ)。コマンドが完全でないならば、`None'を返します。コマンドが完全で構文エラーを含む場合は、`SyntaxError'を発生させます。または、コマンドが無効なリテラルを含む場合は、`OverflowError'もしくは`ValueError'を発生させます。

* Menu:

* 対話的なインタプリタオブジェクト::
* 対話的なコンソールオブジェクト::


File: python-lib-jp.info,  Node: 対話的なインタプリタオブジェクト,  Next: 対話的なコンソールオブジェクト,  Prev: code,  Up: code

対話的なインタプリタオブジェクト
--------------------------------

`runsource(source[, filename[, symbol]])'
     インタプリタ内のあるソースをコンパイルし実行します。引数は`compile_command()'のものと同じです。FILENAMEのデフォルトは`'<input>''で、SYMBOLは`'single''です。あるいくつかのことが起きる可能性があります:

        *
          入力はが正しくない。`compile_command()'が例外(`SyntaxError'か`OverflowError')を起こした場合。`showsyntaxerror()'メソッドの呼び出によって、構文トレースバックが表示されるでしょう。`runsource()'は`False'を返します。

        *
          入力が完全でなく、さらに入力が必要。`compile_command()'が`None'を返した場合。`runsource()'は`True'を返します。

        *
          入力が完全。`compile_command()'がコードオブジェクトを返した場合。(`SystemExit'を除く実行時例外も処理する)`runcode()'を呼び出すことによって、コードは実行されます。`runsource()'は`False'を返します。

     次の行を要求するために`sys.ps1'か`sys.ps2'のどちらを使うかを決定するために、戻り値を利用できます。

`runcode(code)'
     コードオブジェクトを実行します。例外が生じたときは、トレースバックを表示するために`showtraceback()'が呼び出されます。伝わることが許されている`SystemExit'を除くすべての例外が捉えられます。

     `KeyboardInterrupt'についての注意。このコードの他の場所でこの例外が生じる可能性がありますし、常に捕らえることができるとは限りません。呼び出し側はそれを処理するために準備しておくべきです。

`showsyntaxerror([filename])'
     起きたばかりの構文エラーを表示します。複数の構文エラーに対して一つあるのではないため、これはスタックトレースを表示しません。FILENAMEが与えられた場合は、Pythonのパーサが与えるデフォルトのファイル名の代わりに例外の中へ入れられます。なぜなら、文字列から読み込んでいるときはパーサは常に`'<string>''を使うからです。出力は`write()'メソッドによって書き込まれます。

`showtraceback()'
     起きたばかりの例外を表示します。スタックの最初の項目を取り除きます。なぜなら、それはインタプリタオブジェクトの実装の内部にあるからです。出力は`write()'メソッドによて書き込まれます。

`write(data)'
     文字列を標準エラーストリーム(`sys.stderr')へ書き込みます。必要に応じて適切な出力処理を提供するために、導出クラスはこれをオーバーライドすべきです。


File: python-lib-jp.info,  Node: 対話的なコンソールオブジェクト,  Prev: 対話的なインタプリタオブジェクト,  Up: code

対話的なコンソールオブジェクト
------------------------------

`InteractiveConsole'クラスは`InteractiveInterpreter'のサブクラスです。以下の追加メソッドだけでなく、インタプリタオブジェクトのすべてのメソッドも提供します。

`interact([banner])'
     対話的なPythonコンソールをそっくりにエミュレートします。オプションのbanner引数は最初のやりとりの前に表示するバナーを指定します。デフォルトでは、標準Pythonインタプリタが表示するものと同じようなバナーを表示します。それに続けて、実際のインタプリタと混乱しないように(とても似ているから!)括弧の中にコンソールオブジェクトのクラス名を表示します。

`push(line)'
     ソーステキストの一行をインタプリタへ送ります。その行の末尾に改行がついていてはいけません。内部に改行を持っているかもしれません。その行はバッファへ追加され、ソースとして連結された内容が渡されインタプリタの`runsource()'メソッドが呼び出されます。コマンドが実行されたか、有効であることをこれが示している場合は、バッファはリセットされます。そうでなければ、コマンドが不完全で、その行が付加された後のままバッファは残されます。さらに入力が必要ならば、戻り値は`True'です。その行がある方法で処理されたならば、`False'です(これは`runsource()'と同じです)。

`resetbuffer()'
     入力バッファから処理されていないソーステキストを取り除きます。

`raw_input([prompt])'
     プロンプトを書き込み、一行を読み込みます。返る行は末尾に改行を含みません。ユーザが`EOF'キーシーケンスを入力したときは、`EOFError'を発生させます。基本実装では、組み込み関数`raw_input()'を使います。サブクラスはこれを異なる実装と置き換えるかもしれません。


File: python-lib-jp.info,  Node: codeop,  Next: pprint,  Prev: code,  Up: Python ランタイム サービス

Pythonコードをコンパイルする
============================

(完全ではないかもしれない)Pythonコードをコンパイルする。

`code'モジュールで行われているようなPythonのread-eval-printループをエミュレートするユーティリティを`codeop'モジュールは提供します。結果的に、直接モジュールを使いたいとは思わないかもしれません。あなたのプログラムにこのようなループを含めたい場合は、代わりに`code'モジュールを使うことをおそらく望むでしょう。

この仕事には二つの部分があります:

  1. 入力の一行がPythonの文として完全であるかどうかを見分けられること:
     簡単に言えば、次が``>`>'>~''か、あるいは``...~''かどうかを見分けます。

  2.
     どのfuture文をユーザが入力したのかを覚えていること。したがって、実質的にそれに続く入力をこれらとともにコンパイルすることができます。

`codeop'モジュールはこうしたことのそれぞれを行う方法とそれら両方を行う方法を提供します。

前者は実行するには:

`compile_command(source[, filename[, symbol]])'
     Pythonコードの文字列であるべきSOURCEをコンパイルしてみて、SOURCEが有効なPythonコードの場合はコードオブジェクトを返します。このような場合、コードオブジェクトのファイル名属性は、デフォルトで`'<input>''であるFILENAMEでしょう。SOURCEが有効なPythonコードでは_ない_が、有効なPythonコードの接頭語である場合には、`None'を返します。

     SOURCEに問題がある場合は、例外を発生させます。無効なPython構文がある場合は、`SyntaxError'を発生させます。また、無効なリテラルがある場合は、`OverflowError'または`ValueError'を発生させます。

     SYMBOL引数はSOURCEが文としてコンパイルされるか(`'single''、デフォルト)、または式としてコンパイルされたかどうかを決定します(`'eval'')。他のどんな値も`ValueError'を発生させる原因となります。

     *警告:*
     ソースの終わりに達する前に、成功した結果をもってパーサは構文解析を止めることが(できそうではなく)できます。このような場合、後ろに続く記号はエラーとならずに無視されます。例えば、改行が後ろに付くバックスラッシュには不定のゴミが付いているかもしれません。パーサのAPIがより良くなればすぐに、これは修正されるでしょう。

`Compile()'
     このクラスのインスタンスは組み込み関数`compile()'とシグネチャが一致する`__call__()'メソッドを持っていますが、インスタンスが`__future__'文を含むプログラムテキストをコンパイルする場合は、インスタンスは有効なその文とともに続くすべてのプログラムテキストを'覚えていて'コンパイルするという違いがあります。

`CommandCompiler()'
     このクラスのインスタンスは`compile_command()'とシグネチャが一致する`__call__()'メソッドを持っています。インスタンスが`__future__'文を含むプログラムテキストをコンパイルする場合に、インスタンスは有効なその文とともにそれに続くすべてのプログラムテキストを'覚えていて'コンパイルするという違いがあります。

バージョン間の互換性についての注意:
`Compile'と`CommandCompiler'はPython
2.2で導入されました。2.2のfuture-tracking機能を有効にするだけでなく、2.1とPythonのより以前のバージョンとの互換性も保ちたい場合は、次のようにかくことができます

     try:
         from codeop import CommandCompiler
         compile_command = CommandCompiler()
         del CommandCompiler
     except ImportError:
         from codeop import compile_command

これは影響の小さい変更ですが、あなたのプログラムにおそらく望まれないグローバル状態を導入します。または、次のように書くこともできます:

     try:
         from codeop import CommandCompiler
     except ImportError:
         def CommandCompiler():
             from codeop import compile_command
             return compile_command

そして、新たなコンパイラオブジェクトが必要となるたびに`CommandCompiler'を呼び出します。


File: python-lib-jp.info,  Node: pprint,  Next: repr,  Prev: codeop,  Up: Python ランタイム サービス

データ出力の整然化
==================

Data pretty printer.

`pprint'モジュールを使うと、Pythonの任意のデータ構造をインタープ
リタへの入力で使われる形式にして"pretty-print"できます。
フォーマット化された構造の中にPythonの基本的なタイプではないオブジェクト
があるなら、表示できないかもしれません。
Pythonの定数として表現できない多くの組み込みオブジェクトと同様、ファイ
ル、ソケット、クラスあるいはインスタンスのようなオブジェクトが含まれてい
た場合は出力できません。

可能であればオブジェクトをフォーマット化して1行に出力しますが、与えられ
た幅に合わないなら複数行に分けて出力します。
無理に幅を設定したいなら、`PrettyPrinter'オブジェクトを作成して明
示してください。

`pprint'モジュールには1つのクラスが定義されています：

`PrettyPrinter(...)'
     `PrettyPrinter'インスタンスを作ります。
     このコンストラクタにはいくつかのキーワードパラメータを設定できます。

     STREAMキーワードで出力ストリームを設定できます；このストリームに対
     して呼び出されるメソッドはファイルプロトコルの`write()'メソッドだ
     けです。
     もし設定されなければ、`PrettyPrinter'は`sys.stdout'を使用しま す。
     さらに3つのパラメータで出力フォーマットをコントロールできます。
     そのキーワードはINDENT、DEPTHとWIDTHです。

     再帰的なレベルごとに加えるインデントの量はINDENTで設定できます；デ
     フォルト値は1です。
     他の値にすると出力が少しおかしく見えますが、ネスト化されたところが見分け
     易くなります。

     出力されるレベルはDEPTHで設定できます；
     出力されるデータ構造が深いなら、指定以上の深いレベルのものは`...'で
     置き換えられて表示されます。
     デフォルトでは、オブジェクトの深さを制限しません。

     WIDTHパラメータを使うと、出力する幅を望みの文字数に設定できます；
     デフォルトでは80文字です。
     もし指定した幅にフォーマットできない場合は、できるだけ近づけます。

          >>> import pprint, sys
          >>> stuff = sys.path[:]
          >>> stuff.insert(0, stuff[:])
          >>> pp = pprint.PrettyPrinter(indent=4)
          >>> pp.pprint(stuff)
          [   [   '',
                  '/usr/local/lib/python1.5',
                  '/usr/local/lib/python1.5/test',
                  '/usr/local/lib/python1.5/sunos5',
                  '/usr/local/lib/python1.5/sharedmodules',
                  '/usr/local/lib/python1.5/tkinter'],
              '',
              '/usr/local/lib/python1.5',
              '/usr/local/lib/python1.5/test',
              '/usr/local/lib/python1.5/sunos5',
              '/usr/local/lib/python1.5/sharedmodules',
              '/usr/local/lib/python1.5/tkinter']
          >>>
          >>> import parser
          >>> tup = parser.ast2tuple(
          ...     parser.suite(open('pprint.py').read()))[1][1][1]
          >>> pp = pprint.PrettyPrinter(depth=6)
          >>> pp.pprint(tup)
          (266, (267, (307, (287, (288, (...))))))


`PrettyPrinter'クラスにはいくつかの派生する関数が提供されていま す：

`pformat(object)'
     OBJECTをフォーマット化して文字列として返します。
     フォーマット化にはデフォルトのパラメータが使用されます。

`pprint(object[, stream])'
     OBJECTをフォーマット化してSTREAMに出力し、最後に改行します。
     STREAMが省略されたら、`sys.stdout'に出力します。
     これは対話型のインタープリタ上で、求める値を`print'する代わりに
     使用できます。
     フォーマット化にはデフォルトのパラメータが使用されます。

          >>> stuff = sys.path[:]
          >>> stuff.insert(0, stuff)
          >>> pprint.pprint(stuff)
          [<Recursion on list with id=869440>,
           '',
           '/usr/local/lib/python1.5',
           '/usr/local/lib/python1.5/test',
           '/usr/local/lib/python1.5/sunos5',
           '/usr/local/lib/python1.5/sharedmodules',
           '/usr/local/lib/python1.5/tkinter']


`isreadable(object)'
     OBJECTをフォーマット化して出力できる（"readable"）か、あるいは
     `eval()' を使って値を再構成できるかを返しま す。
     再帰的なオブジェクトに対しては常にfalseを返します。

          >>> pprint.isreadable(stuff)
          False


`isrecursive(object)'
     OBJECTが再帰的な表現かどうかを返します。

さらにもう1つ、関数が定義されています：

`saferepr(object)'
     OBJECTの文字列表現を、再帰的なデータ構造から保護した形式で返しま
     す。
     もしOBJECTの文字列表現が再帰的な要素を持っているなら、再帰的な参照
     は`<Recursion on TYPENAME with id=NUMBER>'で表示されま す。
     出力は他と違ってフォーマット化されません。


     >>> pprint.saferepr(stuff)
     "[<Recursion on list with id=682968>, '', '/usr/local/lib/python1.5', '/usr/loca
     l/lib/python1.5/test', '/usr/local/lib/python1.5/sunos5', '/usr/local/lib/python
     1.5/sharedmodules', '/usr/local/lib/python1.5/tkinter']"

* Menu:

* PrettyPrinter オブジェクト::


File: python-lib-jp.info,  Node: PrettyPrinter オブジェクト,  Prev: pprint,  Up: pprint

PrettyPrinter オブジェクト
--------------------------

`PrettyPrinter'インスタンスには以下のメソッドがあります：

`pformat(object)'
     OBJECTのフォーマット化した表現を返します。
     これは`PrettyPrinter'のコンストラクタに渡されたオプションを考慮し
     てフォーマット化されます。

`pprint(object)'
     OBJECTのフォーマット化した表現を指定したストリームに出力し、最後に
     改行します。

以下のメソッドは、対応する同じ名前の関数と同じ機能を持っています。
以下のメソッドをインスタンスに対して使うと、新たに`PrettyPrinter'
オブジェクトを作る必要がないのでちょっぴり効果的です。

`isreadable(object)'
     OBJECTをフォーマット化して出力できる（"readable"）か、あるいは
     `eval()' を使って値を再構成できるかを返しま す。
     これは再帰的なオブジェクトに対してfalseを返すことに注意して下さい。
     もし`PrettyPrinter'のDEPTHパラメータが設定されていて、オブ
     ジェクトのレベルが設定よりも深かったら、falseを返します。

`isrecursive(object)'
     オブジェクトが再帰的な表現かどうかを返します。

このメソッドをフックとして、サブクラスがオブジェクトを文字列に変換する方
法を修正するのが可能になっています。
デフォルトの実装では、内部で`saferepr()'を呼び出しています。

`format(object, context, maxlevels, level)'
     3つの値を返します：OBJECTをフォーマット化して文字列にしたもの、そ
     の結果が読み込み可能かどうかを示すフラグ、再帰が含まれているかどうかを示
     すフラグ。

     最初の引数は表示するオブジェクトです。
     2つめの引数はオブジェクトの`id()'をキーとして含むディクショナリ
     で、オブジェクトを含んでいる現在の（直接、間接にOBJECTのコンテナと
     して表示に影響を与える）環境です。
     ディクショナリCONTEXTの中でどのオブジェクトが表示されたか表示する
     必要があるなら、3つめの返り値はtrueになります。
     `format()'メソッドの再帰呼び出しではこのディクショナリのコンテナ
     に対してさらにエントリを加えます。
     3つめの引数MAXLEVELSで再帰呼び出しのレベルを設定します；
     もし制限しないなら、`0'にします。
     この引数は再帰呼び出しでそのまま渡されます。
     4つめの引数LEVELで現在のレベルを設定します；
     再帰呼び出しでは、現在の呼び出しより小さい値が渡されます。 _Added
     in Python version 2.3_


File: python-lib-jp.info,  Node: repr,  Next: new,  Prev: pprint,  Up: Python ランタイム サービス

もう一つの`repr()'の実装
========================

大きさに制限のある別の`repr()'の実装。

`repr'モジュールは結果の文字列の大きさを制限したオブジェクト表現を作り出すための方法を提供します。これはPythonデバッガで使われていますが、他の状況でも同じように役に立つかもしれません。

このモジュールはクラスとインスタンス、それに関数を提供します:

`Repr()'
     組み込みクラス`repr()'によく似た関数を実装するために役に立つ書式化サービスを提供します。過度に長い表現を作り出さないように、異なるオブジェクト型に対する大きさの制限が追加されます。

`aRepr'
     これは下で説明される`repr()'関数を提供するために使われる`Repr'のインスタンスです。このオブジェクトの属性を変更すると、`repr()'とPythonデバッガが使うサイズ制限に影響します。

`repr(obj)'
     これは`aRepr'の`repr()'メソッドです。同じ名前の組み込み関数が返す文字列と似ていますが、最大サイズに制限のある文字列を返します。

* Menu:

* Reprオブジェクト::
* Reprオブジェクトをサブクラス化する::


File: python-lib-jp.info,  Node: Reprオブジェクト,  Next: Reprオブジェクトをサブクラス化する,  Prev: repr,  Up: repr

Reprオブジェクト
----------------

`Repr'インスタンスは様々なオブジェクト型の表現にサイズ制限を与えるために使えるいくつかのメンバーと、特定のオブジェクト型を書式化するメソッドを提供します。

`maxlevel'
     再帰的な表現を作る場合の深さ制限。デフォルトは`6'です。

`maxdict'

`maxlist'

`maxtuple'
     指定されたオブジェクト型に対するエントリ表現の数についての制限。`maxdict'に対するデフォルトは`4'で、その他に対しては`6'です。

`maxlong'
     長整数の表現のおける文字数の最大値。中央の数字が抜け落ちます。デフォルトは`40'です。

`maxstring'
     文字列の表現における文字数の制限。文字列の"通常の"表現は文字の材料だということに注意してください:
     表現にエスケープシーケンスが必要とされる場合は、表現が短縮されたときにこれらはマングルされます。デフォルトは`30'です。

`maxother'
     この制限は`Repr'オブジェクトに利用できる特定の書式化メソッドがないオブジェクト型のサイズをコントロールするために使われます。`maxstring'と同じようなやり方で適用されます。デフォルトは`20'です。

`repr(obj)'
     インスタンスが強制する書式化を使う組み込み`repr()'と等価なもの。

`repr1(obj, level)'
     `repr()'が使う再帰的な実装。これはどの書式化メソッドを呼び出すかを決定するためにOBJの型を使い、それをOBJとLEVELに渡します。再帰呼び出しにおいてLEVELの値に対して`LEVEL
     -
     1'を与える再帰的な書式化を実行するために、型に固有のメソッドは`repr1()'を呼び出します。

`repr_TYPE(obj, level)'
     型名に基づく名前をもつメソッドとして、特定の型に対する書式化メソッドは実装されます。メソッド名では、TYPEは`string.join(string.split(type(OBJ).__name__,
     '_'))'に置き換えられます。これらのメソッドへのディスパッチは`repr1()'によって処理されます。再帰的に値の書式を整える必要がある型固有のメソッドは、`self.repr1(SUBOBJ,
     LEVEL - 1)'を呼び出します。


File: python-lib-jp.info,  Node: Reprオブジェクトをサブクラス化する,  Prev: Reprオブジェクト,  Up: repr

Reprオブジェクトをサブクラス化する
----------------------------------

更なる組み込みオブジェクト型へのサポートを追加するためや、すでにサポートされている型の扱いを変更するために、`Repr.repr1()'による動的なディスパッチを使って`Repr'をサブクラス化することができます。この例はファイルオブジェクトのための特別なサポートを追加する方法を示しています:

     import repr
     import sys
     
     class MyRepr(repr.Repr):
         def repr_file(self, obj, level):
             if obj.name in ['<stdin>', '<stdout>', '<stderr>']:
                 return obj.name
             else:
                 return `obj`
     
     aRepr = MyRepr()
     print aRepr.repr(sys.stdin)          # prints '<stdin>'


File: python-lib-jp.info,  Node: new,  Next: site,  Prev: repr,  Up: Python ランタイム サービス

ランタイム内部オブジェクトの作成
================================

ランタイム実装オブジェクトの作成のインターフェイス。

`new'モジュールはインタプリタオブジェクト作成関数へのインターフェイスを与えます。新しいオブジェクトを"魔法を使ったように"作り出す必要がある、通常の作成関数が使えないときに、これは主にマーシャル型関数で使われます。このモジュールはインタプリタへの低レベルインターフェイスを提供します。したがって、このモジュールを使うときには注意しなければなりません。

`new'モジュールは次の関数を定義しています:

`instance(class[, dict])'
     この関数は`__init__()'コンストラクタを呼び出さずに辞書DICTをもつCLASSのインスタンスを作り出します。DICTが省略されるか、`None'である場合は、新しいインスタンスのために新しい空の辞書が作られます。オブジェクトがいつもと同じ状態であるという保証はないことに注意してください。

`instancemethod(function, instance, class)'
     この関数はINSTANCEに束縛されたメソッドオブジェクトか、あるいはINSTANCEが`None'の場合に束縛されていないメソッドオブジェクトを返します。FUNCTIONは呼び出し可能でなければなりません。

`function(code, globals[, name[, argdefs]])'
     与えられたコードとグローバル変数をもつ(Python)関数を返します。NAMEを与えるならば、文字列か`None'でなければならない。文字列の場合は、関数は与えられた名前をもつ。そうでなければ、関数名は`CODE.co_name'から取られる。ARGDEFSを与える場合はタプルでなければならず、パラメータのデフォルト値を決めるために使われます。

`code(argcount, nlocals, stacksize, flags, codestring, constants, names, varnames, filename, name, firstlineno, lnotab)'
     この関数は`PyCode_New()'というC関数へのインターフェイスです。

`module(name)'
     この関数はNAMEという名前の新しいモジュールオブジェクトを返します。NAMEは文字列でなければならない。

`classobj(name, baseclasses, dict)'
     この関数は新しいクラスオブジェクトを返します。そのクラスオブジェクトは(クラスのタプルであるべき)BASECLASSESから派生し、名前空間DICTを持ち、NAMEという名前です。


File: python-lib-jp.info,  Node: site,  Next: user,  Prev: new,  Up: Python ランタイム サービス

サイト固有の設定フック
======================

サイト固有のモジュールを参照する標準の方法。

*このモジュールは初期化中に自動的にインポートされます。*

Pythonの初期のバージョンでは(1.5a3を含むそれまでは)、サイト固有のモジュールを使う必要のあるスクリプトやモジュールは`import
site'をコードの先頭付近に置いていました。もはやこれは必要ありません。

これはサイト固有のパスをモジュール検索パスへ付け加えます。

前部と後部からなる最大で四つまでのディレクトリを作成することから始めます。前部には、`sys.prefix'と`sys.exec_prefix'を使用します。空の前部は省略されます。後部には、(MacintoshやWindowsでは)空文字列を使用し、(UNIXでは)最初に`lib/python2.3/site-packages'を使ってから`lib/site-python'を使います。別個の前部-後部の組み合わせのそれぞれに対して、それが存在するディレクトリを参照しているかどうかを調べ、もしそうならば`sys.path'へ追加します。そして、設定ファイルを新しく追加されたパスからも検索します。

パス設定ファイルは`PACKAGE.pth'という形式の名前をもつファイルです。その内容は`sys.path'に追加される追加項目(一行に一つ)です。存在しない項目は`sys.path'へは決して追加されませんが、項目が(ファイルではなく)ディレクトリを参照しているかどうかはチェックされません。項目が`sys.path'へ二回以上追加されることはありません。空行と`#'で始まる行は読み飛ばされます。`import'で始まる行は実行されます。

例えば、`sys.prefix'と`sys.exec_prefix'が`/usr/local'に設定されていると仮定します。そのときPython
2.3.5
ライブラリは`/usr/local/lib/python2.3'にインストールされています(ここで、`sys.version'の最初の三文字だけがインストールパス名を作るために使われます)。ここにはサブディレクトリ`/usr/local/lib/python2.3/site-packages'があり、その中に三つのサブディレクトリ`foo'、`bar'および`spam'と二つのパス設定ファイル`foo.pth'と`bar.pth'をもつと仮定します。`foo.pth'には以下のものが記載されていると想定してください:

     # foo package configuration
     
     foo
     bar
     bletch

また、`bar.pth'には:

     # bar package configuration
     
     bar

が記載されているとします。そのとき、次のディレクトリが`sys.path'へこの順番んで追加されます:

     /usr/local/lib/python2.3/site-packages/bar
     /usr/local/lib/python2.3/site-packages/foo

`bletch'は存在しないため省略されるということに注意してください。`bar'ディレクトリは`foo'ディレクトリの前に来ます。なぜなら、`bar.pth'がアルファベット順で`foo.pth'の前に来るからです。また、`spam'はどちらのパス設定ファイルにも記載されていないため、省略されます。

これらのパス操作の後に、`sitecustomize'
という名前のモジュールをインポートしようします。そのモジュールは任意のサイト固有のカスタマイゼーションを行うことができます。`ImportError'例外が発生してこのインポートに失敗した場合は、何も表示せずに無視されます。

いくつかの非UNIXシステムでは、`sys.prefix'と`sys.exec_prefix'は空で、パス操作は省略されます。しかし、`sitecustomize'
のインポートはそのときでも試みられます。


File: python-lib-jp.info,  Node: user,  Next: __builtin__,  Prev: site,  Up: Python ランタイム サービス

ユーザー設定のフック
====================

ユーザー設定を参照するための標準的な方法を提供するモジュー ル

ポリシーとして、Pythonは起動時にユーザー毎の設定を行うコードを実行することは
しません(ただし対話型セッションで環境変数`PYTHONSTARTUP'が設定されて
いた場合にはそのスクリプトを実行します。)。

しかしながら、プログラムやサイトによっては、プログラムが要求した時に
ユーザーごとの設定ファイルを実行できると便利なこともあります。このモジュー
ルはそのような機構を実装しています。この機構を利用したいプログラムでは、
以下の文を実行してください。

     import user

`user'モジュールはユーザーのホームディレクトリの
`.pythonrc.py'ファイルを探し、オープンできるならグローバル名前空間
で実行します(`execfile()' を利用します)。
この段階で発生したエラーはcatchされません。`user'モジュー
ルをimportしたプログラムに影響します。ホームディレクトリは環境変数
`HOME'が仮定されていますが、もし設定されていなければカレントディ
レクトリが使われます。

ユーザーの`.pythonrc.py'ではPythonのバージョンに従って異なる動作を
行うために`sys.version'のテストを行うことが 考えられます。

ユーザーへの警告: `.pythonrc.py'ファイルに書く内容には慎重になって
ください。どのプログラムが利用しているかわからない状況で、標準のモジュール
や関数のふるまいを替えることはおすすめできません。

この機構を使おうとするプログラマへの提案:
あなたのパッケージ向けのオプションをユーザーが設定できるようにするシンプ
ルな方法は、`.pythonrc.py'ファイルで変数を定義して、あなたのプログ
ラムでテストする方法です。たとえば、`spam'モジュールで
メッセージ出力のレベルを替える `user.spam_verbose'変数を参照するに
は以下のようにします:

     import user
     try:
         verbose = user.spam_verbose  # ユーザーの設定値
     except AttributeError:
         verbose = 0                  # デフォルト値

大規模な設定の必要があるプログラムではプログラムごとの設定ファイルを作る
といいです。

セキュリティやプライバシーに配慮するプログラムではこのモジュールをimport
し_ない_でください。このモジュールを使うと、ユーザーは
`.pythonrc.py'に任意のコードを書くことで簡単に侵入することができて
しまいます。

汎用のモジュールではこのモジュールをimportし_ない_でください。
importしたプログラムの動作にも影響してしまいます。

See also:
     *Note site:: サイト毎のカスタマイズを行う機構


File: python-lib-jp.info,  Node: __builtin__,  Next: __main__,  Prev: user,  Up: Python ランタイム サービス

組み込み関数
============

組み込み関数一式

このモジュールはPythonの全ての「組み込み」識別子を直接アクセスするための
ものです。例えば `__builtin__.open' は`open()'関数のための
全ての組み込み関数を表示します。 第*Note 組み込み関数::節,
"組み込み関数"も参照してください。


File: python-lib-jp.info,  Node: __main__,  Next: __future__,  Prev: __builtin__,  Up: Python ランタイム サービス

トップレベルのスクリプト環境
============================

トップレベルスクリプトが実行される環境。

このモジュールはPythonインタプリタのメインプログラムがコマンドを実行す
る際の環境をあらわしています。このモジュールを利用することで、通常は無
名のこの環境にアクセスすることができます。実行されるコマンドは標準入力、
スクリプトファイルあるいは対話環境での入力プロンプトから入力されます。
この環境はPythonスクリプトをメインプログラムとして実行される際によく使
われる"条件付きスクリプト"の一節が実行される環境です。

     if __name__ == "__main__":
         main()


File: python-lib-jp.info,  Node: __future__,  Prev: __main__,  Up: Python ランタイム サービス

Future ステートメントの定義
===========================

Future ステートメントの定義

`__future__' は実際にモジュールであり、3つの役割があります。

   * import ステートメントを解析する既存のツールを混乱させるのを避け、
     そのステートメントがインポートしようとしているモジュールを見つけ
     られるようにするため。

   * 2.1 以前のリリースで future ステートメントが実行されれば、最低でも
     ランタイム例外を投げるようにするため。 (`__future__'
     はインポートできません。というのも、2.1 以前
     にはそういう名前のモジュールはなかったからです。)

   * いつ互換でない変化が導入され、いつ強制的になる - あるいは、 なった
     - のか文書化するため。
     これは実行できる形式で書かれたドキュメントでなので、`__future__'
     をインポートし、その中身を調べるようプログラムすれば確かめられます。


`__future__.py' の各ステートメントは次のような形をしています:

     FeatureName = "_Feature(" OptionalRelease "," MandatoryRelease ","
                             CompilerFlag ")"

ここで、普通は、OptionalRelease は MandatoryRelease より小さく、2つとも
`sys.version_info' と同じフォーマットの5つのタプルからなります。

         (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
          PY_MINOR_VERSION, # the 1; an int
          PY_MICRO_VERSION, # the 0; an int
          PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
          PY_RELEASE_SERIAL # the 3; an int
         )

OptionalRelease はその機能が導入された最初のリリースを記録します。

まだ時期が来ていない MandatoryRelease の場合、MandatoryRelease は
その機能が言語の一部となるリリースを記します。

その他の場合、MandatoryRelease はその機能がいつ言語の一部になったのかを
記録します。
そのリリースから、あるいはそれ以降のリリースでは、この機能を使う際に
future ステートメントは必要ではありませんが、future ステートメントを
使い続けても構いません。

MandatoryRelease は `None'
になるかもしれません。つまり、予定された機能が
破棄されたということです。

`_Feature' クラスのインスタンスには対応する2つのメソッド、
`getOptionalRelease()' と `getMandatoryRelease()' があります。

CompilerFlag
は動的にコンパイルされるコードでその機能を有効にするために、
組み込み関数 `compile()' の第4引数に渡されなければならない
(ビットフィールド)フラグです。 このフラグは `_Future' インスタンスの
`compilier_flag' 属性に 保存されています。

`__future__' で解説されている機能のうち、削除されたものはまだ
ありません。


File: python-lib-jp.info,  Node: 文字列処理,  Next: 各種サービス,  Prev: Python ランタイム サービス,  Up: Top

文字列処理
**********

この章で解説されているモジュールは文字列を操作するさまざまな処理を提供し
ます。以下に概要を示します。

stringオブジェクトのメソッドについては、*Note 文字列メソッド::節の
"文字列型のメソッド"もごらんください。

* Menu:

* string::
* re::
* struct::
* difflib::
* fpformat::
* StringIO::
* cStringIO::
* textwrap::
* codecs::
* unicodedata::
* stringprep::
* zipimport::

