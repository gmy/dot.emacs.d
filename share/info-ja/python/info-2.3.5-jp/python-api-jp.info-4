This is python-api-jp.info, produced by makeinfo version 4.5 from
python-api-jp.texi.

12 October 2005


File: python-api-jp.info,  Node: 浮動小数点オブジェクト complex number object,  Prev: 浮動小数点型オブジェクト floating point object,  Up: 数値型オブジェクト numeric object

浮動小数点オブジェクト (complex number object)
----------------------------------------------

Python の複素数オブジェクトは、 C API 側から見ると二つの別個の
型として実装されています: 一方は Python プログラムに対して公開
されている Python のオブジェクトで、他方は実際の複素数値を 表現する C
の構造体です。 API では、これら双方を扱う関数を提供して います。

* Menu:

* C 構造体としての複素数::
* Python オブジェクトとしての複素数型::


File: python-api-jp.info,  Node: C 構造体としての複素数,  Next: Python オブジェクトとしての複素数型,  Prev: 浮動小数点オブジェクト complex number object,  Up: 浮動小数点オブジェクト complex number object

C 構造体としての複素数
......................

複素数の C 構造体を引数として受理したり、戻り値として返したりする
関数は、ポインタ渡しを行うのではなく _値渡し_ を行うので
注意してください。これは API 全体を通して一貫しています。

`Py_complex'
     Python 複素数オブジェクトの値の部分に対応する C の構造体です。
     複素数オブジェクトを扱うほとんどの関数は、この型の構造体を
     場合に応じて入力や出力として使います。構造体は以下のように
     定義されています:

          typedef struct {
             double real;
             double imag;
          } Py_complex;


`Py_complex _Py_c_sum(Py_complex left, Py_complex right)'
     二つの複素数の和を C の `Py_complex' 型で返します。

`Py_complex _Py_c_diff(Py_complex left, Py_complex right)'
     二つの複素数の差を C の `Py_complex' 型で返します。

`Py_complex _Py_c_neg(Py_complex complex)'
     複素数 COMPLEX の符号反転 C の `Py_complex' 型で返します。

`Py_complex _Py_c_prod(Py_complex left, Py_complex right)'
     二つの複素数の積を C の `Py_complex' 型で返します。

`Py_complex _Py_c_quot(Py_complex dividend, Py_complex divisor)'
     二つの複素数の商を C の `Py_complex' 型で返します。

`Py_complex _Py_c_pow(Py_complex num, Py_complex exp)'
     指数 EXP の NUM 乗を C の `Py_complex' 型で返します。


File: python-api-jp.info,  Node: Python オブジェクトとしての複素数型,  Prev: C 構造体としての複素数,  Up: 浮動小数点オブジェクト complex number object

Python オブジェクトとしての複素数型
...................................

`PyComplexObject'
     この `PyObject' のサブタイプは Python の複素数オブジェクトを
     表現します。

`PyTypeObject PyComplex_Type'
     この `PyTypeObject' のインスタンスは Python
     の複素数型を表現します。

`int PyComplex_Check(PyObject *p)'
     引数が `PyComplexObject' 型か `PyComplexObject'
     型のサブタイプのときに真を返します。 _Changed in Python version
     2.2_

`int PyComplex_CheckExact(PyObject *p)'
     引数が `PyComplexObject' 型で、かつ `PyComplexObject'
     型のサブタイプでないときに真を返します。 _Added in Python version
     2.2_

`PyObject* PyComplex_FromCComplex(Py_complex v)'
     C の `Py_complex' 型から Python の複素数値を生成します。

`PyObject* PyComplex_FromDoubles(double real, double imag)'
     新たな `PyComplexObject' オブジェクトを REAL と IMAG
     から生成します。

`double PyComplex_RealAsDouble(PyObject *op)'
     OP の実数部分を C の `double' 型で返します。

`double PyComplex_ImagAsDouble(PyObject *op)'
     OP の虚数部分を C の `double' 型で返します。

`Py_complex PyComplex_AsCComplex(PyObject *op)'
     複素数値 OP から `Py_complex' 型を生成します。


File: python-api-jp.info,  Node: 配列オブジェクト sequence object,  Next: マップ型オブジェクト mapping object,  Prev: 数値型オブジェクト numeric object,  Up: 具象オブジェクト concrete object レイヤ

配列オブジェクト (sequence object)
==================================

配列オブジェクトに対する一般的な操作については前の章ですでに
述べました; この節では、Python 言語にもともと備わっている
特定の配列オブジェクトについて扱います。

* Menu:

* 文字列オブジェクト string object::
* Unicode オブジェクト Unicode object::
* Buffer Objects::
* タプルオブジェクト tuple object::
* List Objects::


File: python-api-jp.info,  Node: 文字列オブジェクト string object,  Next: Unicode オブジェクト Unicode object,  Prev: 配列オブジェクト sequence object,  Up: 配列オブジェクト sequence object

文字列オブジェクト (string object)
----------------------------------

以下の関数では、文字列が渡されるはずのパラメタに非文字列が渡された
場合に `TypeError' を送出します。

`PyStringObject'
     この `PyObject' のサブタイプは Python の文字列オブジェクトを
     表現します。

`PyTypeObject PyString_Type'
     この `PyTypeObject' のインスタンスは Python の文字列型を
     表現します; このオブジェクトは Python レイヤにおける
     `types.TypeType' と同じです。 .

`int PyString_Check(PyObject *o)'
     O が文字列型か文字列型のサブタイプであるときに真を返します。
     _Changed in Python version 2.2_

`int PyString_CheckExact(PyObject *o)'
     O が文字列型で、かつ文字列型のサブタイプでないときに真を返します。
     _Added in Python version 2.2_

`PyObject* PyString_FromString(const char *v)'
     V を値に持つ文字列オブジェクトを返します。失敗すると `NULL'
     を返します。パラメタ V は `NULL'であってはなりません;
     `NULL'かどうかはチェックしません。

`PyObject* PyString_FromStringAndSize(const char *v, int len)'
     値が V で長さが LEN の新たな文字列オブジェクト
     を返します。失敗すると `NULL' を返します。V が
     `NULL'の場合、文字列の中身は未初期化の状態になります。

`PyObject* PyString_FromFormat(const char *format, ...)'
     C 関数 `printf()' 形式の FORMAT 文字列と可変個の
     引数をとり、書式化済みの文字列長を計算した上で、書式化を行った結果を
     値とする Python 文字列にして返します。可変個の引数部は C の
     データ型でなくてはならず、かつ FORMAT 文字列内の書式指定文字
     (format character) に一致する型でなくてはなりません。利用できる
     書式化文字は以下の通りです:

     書式指定文字           型                     コメント
     ------                 -----                  -----
     %%                     _n/a_                  文字 % のリテラル。
     %c                     int                    C
                                                   の整数型で表現される単一の文字。
     %d                     int                    C の`printf("%d")'
                                                   と全く同じ。
     %ld                    long                   C の`printf("%ld")'
                                                   と全く同じ。
     %i                     int                    C の`printf("%i")'
                                                   と全く同じ。
     %x                     int                    C の`printf("%x")'
                                                   と全く同じ。
     %s                     char*                  null で終端された C
                                                   の文字配列。
     %p                     void*                  C ポインタの 16
                                                   進表記。`printf("%p")'
                                                   とほとんど同じだが、プラットフォームにおける
                                                   `printf' の定義に
                                                   関わりなく先頭にリテラル
                                                   `0x' が付きます。


`PyObject* PyString_FromFormatV(const char *format, va_list vargs)'
     `PyString_FromFormat()' と同じです。ただし、こちらの関数は
     二つしか引数をとりません。

`int PyString_Size(PyObject *string)'
     文字列オブジェクト STRING 内の文字列値の長さを返します。

`int PyString_GET_SIZE(PyObject *string)'
     `PyString_Size()' をマクロで実装したもので、
     エラーチェックを行いません。

`char* PyString_AsString(PyObject *string)'
     STRING の中身を NUL 文字終端された表現で返します。
     ポインタはSTRING オブジェクトの内部バッファを指し、
     バッファのコピーを指すわけではありません。
     `PyString_FromStringAndSize(NULL, SIZE)' を使って
     生成した文字列でない限り、バッファ内のデータはいかなる変更も
     してはなりません。この文字列をデアロケートしてはなりません。
     STRING が Unicode オブジェクトの場合、この関数は STRING
     のデフォルトエンコーディング版を計算し、
     デフォルトエンコーディング版に対して操作を行います。 STRING
     が文字列オブジェクトですらない場合、 `PyString_AsString()' は
     `NULL' を返して `TypeError' を送出します。

`char* PyString_AS_STRING(PyObject *string)'
     `PyString_AsString()' をマクロで実装したもので、
     エラーチェックを行いません。文字列オブジェクトだけをサポート
     します; Unicode オブジェクトを渡してはなりません。

`int PyString_AsStringAndSize(PyObject *obj, char **buffer, int *length)'
     OBJ の中身を NUL 文字終端された表現にして、出力用の変数 BUFFER と
     LENGTH を使って返します。

     この関数は文字列オブジェクトと Unicode オブジェクトのどちらも
     入力として受理します。 Unicode オブジェクトの場合、オブジェクトを
     デフォルトエンコーディングでエンコードしたバージョン (default
     encoded version) を返します。LENGTH が `NULL'の
     場合、値を返させるバッファには NUL 文字を入れてはなりません; NUL
     文字が入っている場合、関数は `-1' を返し、 `TypeError'
     を送出します。

     BUFFER は OBJ の内部文字列バッファを参照し、
     バッファのコピーを参照するわけではありません。
     `PyString_FromStringAndSize(NULL, SIZE)' を使って
     生成した文字列でない限り、バッファ内のデータはいかなる変更も
     してはなりません。この文字列をデアロケートしてはなりません。

     STRING が Unicode オブジェクトの場合、この関数は STRING
     のデフォルトエンコーディング版を計算し、
     デフォルトエンコーディング版に対して操作を行います。 STRING
     が文字列オブジェクトですらない場合、 `PyString_AsStringAnsSize()'
     は `NULL' を返して `TypeError' を送出します。

`void PyString_Concat(PyObject **string, PyObject *newpart)'
     新しい文字列オブジェクトを *STRING に作成し、 NEWPART の内容を
     STRING に追加します; 呼び出し側は新たな参照を所有
     することになります。STRING の以前の値に対する参照は盗み取られ
     ます。新たな文字列を生成できなければ、STRING に対する古い参照は
     無視され、 *STRING の値は `NULL'に設定されます; その際、
     適切な例外情報が設定されます。

`void PyString_ConcatAndDel(PyObject **string, PyObject *newpart)'
     新しい文字列オブジェクトを *STRING に作成し、 NEWPART の内容を
     STRING に追加します。こちらのバージョンの関数は NEWPART
     への参照をデクリメントします。

`int _PyString_Resize(PyObject **string, int newsize)'
     "変更不能" である文字列オブジェクトをサイズ変更する手段です。
     新たな文字列オブジェクトを作成するときにのみ使用してください;
     文字列がすでにコードの他の部分で使われているかもしれない場合には、
     この関数を使ってはなりません。入力する文字列オブジェクトの参照カウント
     が 1 でない場合、この関数を呼び出すとエラーになります。
     左側値には、既存の文字列オブジェクトのアドレスを渡し
     (このアドレスには
     書き込み操作が起きるかもしれません)、新たなサイズを指定します。
     成功した場合、 *STRING はサイズ変更された文字列オブジェクトを
     保持し、`0' が返されます; *STRING の値は、入力したときの
     値と異なっているかもしれません。文字列の再アロケーションに失敗した場合、
     *STRING に入っていた元の文字列オブジェクトを解放し、 *STRING を
     `NULL' にセットし、メモリ例外をセットし、 `-1' を返します。

`PyObject* PyString_Format(PyObject *format, PyObject *args)'
     新たな文字列オブジェクトを  FORMAT と ARGS から生成します。
     `FORMAT % ARGS' と似た働きです。引数 ARGS
     はタプルでなければなりません。

`void PyString_InternInPlace(PyObject **string)'
     引数 *STRING をインプレースで隔離 (intern) します。 引数は Python
     文字列オブジェクトを指すポインタへのアドレスで
     なくてはなりません。*STRING と等しい、すでに隔離済みの
     文字列が存在する場合、そのオブジェクトを *STRING に 設定します
     (かつ、元の文字列オブジェクトの参照カウントをデクリメントし、
     すでに隔離済みの文字列オブジェクトの参照カウントをインクリメントします)。
     (補足: 参照カウントについては沢山説明して来ましtが、この関数は
     参照カウント中立 (reference-count-neutral) と考えてください;
     この関数では、関数の呼び出し後にオブジェクトに対して参照の所有権を
     持てるのは、関数を呼び出す前にすでに所有権を持っていた場合に限ります。)

`PyObject* PyString_InternFromString(const char *v)'
     `PyString_FromString()' と `PyString_InternInPlace()'
     を組み合わせたもので、
     隔離済みの新たな文字列オブジェクトを返すか、同じ値を持つすでに
     隔離済みの文字列オブジェクトに対する新たな ("所有権を得た") 参照
     を返します。

`PyObject* PyString_Decode(const char *s, int size, const char *encoding, const char *errors)'
     SIZE からなるエンコード済みのバッファ S を ENCODING
     の名前で登録されている codec に
     渡してデコードし、オブジェクトを生成します。 ENCODING および
     ERRORS は 組み込み関数 `unicode()' に与える同名のパラメタと
     同じ意味を持ちます。使用する codec の検索は、 Python の codec
     レジストリを使って行います。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyString_AsDecodedObject(PyObject *str, const char *encoding, const char *errors)'
     文字列オブジェクトをENCODING の名前で登録されている codec に
     渡してデコードし、Python オブジェクトを返します。 ENCODING および
     ERRORS は 文字列型の `encode()' メソッドに与える同名のパラメタと
     同じ意味を持ちます。使用する codec の検索は、 Python の codec
     レジストリを使って行います。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyString_Encode(const char *s, int size, const char *encoding, const char *errors)'
     SIZE で指定されたサイズの `char' バッファを ENCODING
     の名前で登録されている codec に渡してエンコードし、 Python
     オブジェクトを返します。ENCODING および ERRORS は 文字列型の
     `encode()' メソッドに与える同名のパラメタと
     同じ意味を持ちます。使用する codec の検索は、 Python の codec
     レジストリを使って行います。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyString_AsEncodedObject(PyObject *str, const char *encoding, const char *errors)'
     エンコード名 ENCODING で登録された codec を使って
     文字列オブジェクトをエンコードし、その結果を Python オブジェクト
     として返します。ENCODING および ERRORS は 文字列型の `encode()'
     メソッドに与える同名のパラメタと 同じ意味を持ちます。使用する
     codec の検索は、 Python の codec レジストリを使って行います。codec
     が例外を送出した場合には `NULL' を返します。


File: python-api-jp.info,  Node: Unicode オブジェクト Unicode object,  Next: Buffer Objects,  Prev: 文字列オブジェクト string object,  Up: 配列オブジェクト sequence object

Unicode オブジェクト (Unicode object)
-------------------------------------

以下は Python の Unicode 実装に用いられている基本 Unicode
オブジェクト型です:

`Py_UNICODE'
     この型は 16 ビットの符号なしストレージ型を表し、Unicode 序数
     (Unicode ordinal) を保持するための基礎単位として Python が内部的
     に使います。`wchar_t' が利用でき、かつ 16 ビットである場合、
     `Py_UNICODE' は `wchar_t' を typedef でエイリアスされ、
     ネイティブプラットフォームに対する互換性を高めます。その他の
     プラットフォームでは全て、`Py_UNICODE' は `unsigned short' の
     typedef によるエイリアスになります。

`PyUnicodeObject'
     この `PyObject' のサブタイプは Unicode オブジェクトを表現します。

`PyTypeObject PyUnicode_Type'
     この `PyTypeObject' のインスタンスは Python の Unicode 型を
     表現します。

以下の API は実際には C マクロで、Unicode オブジェクト内部の
読み出し専用データに対するチェックやアクセスを高速に行います:

`int PyUnicode_Check(PyObject *o)'
     O が Unicode 文字列型か Unicode 文字列型のサブタイプで
     あるときに真を返します。 _Changed in Python version 2.2_

`int PyUnicode_CheckExact(PyObject *o)'
     O が Unicode 文字列型で、かつ Unicode 文字列型のサブタイプで
     ないときに真を返します。 _Added in Python version 2.2_

`int PyUnicode_GET_SIZE(PyObject *o)'
     オブジェクトのサイズを返します。 O は `PyUnicodeObject'
     でなければなりません (チェックはしません)。

`int PyUnicode_GET_DATA_SIZE(PyObject *o)'
     オブジェクトの内部バッファのサイズをバイト数で返します。 O は
     `PyUnicodeObject' でなければなりません (チェックはしません)。

`Py_UNICODE* PyUnicode_AS_UNICODE(PyObject *o)'
     オブジェクト内部の`Py_UNICODE' バッファへのポインタを返します。 O
     は `PyUnicodeObject' でなければなりません (チェックは しません)。

`const char* PyUnicode_AS_DATA(PyObject *o)'
     オブジェクト内部バッファへのポインタを返します。 O は
     `PyUnicodeObject' でなければなりません (チェックはしません)。

Unicode は数多くの異なる文字プロパティ (character property)
を提供しています。よく使われる文字プロパティは、以下のマクロ
で利用できます。これらのマクロは Python の設定に応じて、 各々 C
の関数に対応付けられています。

`int Py_UNICODE_ISSPACE(Py_UNICODE ch)'
     CH が空白文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISLOWER(Py_UNICODE ch)'
     CH が小文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISUPPER(Py_UNICODE ch)'
     CH が大文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISTITLE(Py_UNICODE ch)'
     CH がタイトルケース文字 (titlecase character) かどうかに 応じて 1
     または 0 を返します。

`int Py_UNICODE_ISLINEBREAK(Py_UNICODE ch)'
     CH が改行文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISDECIMAL(Py_UNICODE ch)'
     CH が 10 進の数字文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISDIGIT(Py_UNICODE ch)'
     CH が 2 進の数字文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISNUMERIC(Py_UNICODE ch)'
     CH が数字文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISALPHA(Py_UNICODE ch)'
     CH がアルファベット文字かどうかに応じて 1 または 0 を返します。

`int Py_UNICODE_ISALNUM(Py_UNICODE ch)'
     CH が英数文字かどうかに応じて 1 または 0 を返します。

以下の API は、高速に直接文字変換を行うために使われます:

`Py_UNICODE Py_UNICODE_TOLOWER(Py_UNICODE ch)'
     CH を小文字に変換したものを返します。

`Py_UNICODE Py_UNICODE_TOUPPER(Py_UNICODE ch)'
     CH を大文字に変換したものを返します。

`Py_UNICODE Py_UNICODE_TOTITLE(Py_UNICODE ch)'
     CH をタイトルケース文字に変換したものを返します。

`int Py_UNICODE_TODECIMAL(Py_UNICODE ch)'
     CH を 10 進の正の整数に変換したものを返します。 不可能ならば `-1'
     を返します。例外を送出しません。

`int Py_UNICODE_TODIGIT(Py_UNICODE ch)'
     CH を一桁の 2 進整数に変換したものを返します。 不可能ならば `-1'
     を返します。例外を送出しません。

`double Py_UNICODE_TONUMERIC(Py_UNICODE ch)'
     CH を (正の) `double' に変換したものを返します。 不可能ならば
     `-1.0' を返します。例外を送出しません。

Unicode オブジェクトを生成したり、Unicode の配列としての基本的な
プロパティにアクセスしたりするには、以下の API を使ってください:

`PyObject* PyUnicode_FromUnicode(const Py_UNICODE *u, int size)'
     SIZE で指定された長さを持つ Py_UNICODE 型バッファ U から Unicode
     オブジェクトを生成します。U を `NULL' にしても
     よく、その場合オブジェクトの内容は未定義です。バッファに必要な情報を
     埋めるのはユーザの責任です。バッファの内容は新たなオブジェクトに
     コピーされます。バッファが `NULL'でない場合、戻り値は共有された
     オブジェクトになることがあります。従って、この関数が返す Unicode
     オブジェクトを変更してよいのは U が `NULL'のときだけです。

`Py_UNICODE* PyUnicode_AsUnicode(PyObject *unicode)'
     Unicode オブジェクトの内部バッファ `Py_UNICODE' に対する読み出し
     専用のポインタを返します。UNICODE が Unicode オブジェクトで
     なければ `NULL' を返します。

`int PyUnicode_GetSize(PyObject *unicode)'
     Unicode オブジェクトの長さを返します。

`PyObject* PyUnicode_FromEncodedObject(PyObject *obj, const char *encoding, const char *errors)'
     あるエンコード方式でエンコードされたオブジェクト OBJ を Unicode
     オブジェクトに型強制して、参照カウントをインクリメントして
     返します。

     型強制は以下のようにして行われます:

       1. OBJ が Unicode オブジェクトの場合、オブジェクトそのままを、
          参照カウントをインクリメントして返します。_Note:_ Unicode
          オブジェクトは デコードできません; ENCODING に `NULL'
          でない値を渡すと、 `TypeError' になります。

       2. 文字列やその他の char
          バッファ互換オブジェクトの場合、オブジェクト は ENCODING
          に従ってデコードされます。このとき ERROR で
          定義されたエラー処理を用います。これら二つの引数は `NULL'
          にでき、 その場合デフォルト値が使われます
          (詳細は次の節を参照してください)

       3. その他のオブジェクトは例外を引き起こします。

     この API は、エラーが生じたときには `NULL' を返します。
     呼び出し側は返されたオブジェクトを decref する責任があります。

`PyObject* PyUnicode_FromObject(PyObject *obj)'
     `PyUnicode_FromEncodedObject(obj, NULL, "strict")'
     を行うショートカットで、インタプリタは Unicode への型強制が必要な
     際に常にこの関数を使います。

プラットフォームで `wchar_t' がサポートされていて、かつ wchar.h
が提供されている場合、Python は以下の関数を使って `wchar_t'
に対するインタフェースを確立することがあります。 このサポートは、Python
自体の `Py_UNICODE' 型がシステムの `wchar_t'
と同一の場合に最適化をもたらします。

`PyObject* PyUnicode_FromWideChar(const wchar_t *w, int size)'
     SIZE の `wchar_t' バッファ W から Unicode オブジェクト
     を生成します。失敗すると `NULL' を返します。

`int PyUnicode_AsWideChar(PyUnicodeObject *unicode, wchar_t *w, int size)'
     Unicode オブジェクトの内容を `wchar_t' バッファ W
     にコピーします。最大で SIZE 個の `wchar_t' 文字を
     コピーします。コピーされた`wchar_t' 文字の個数を返します。
     エラーの時には -1 を返します。

* Menu:

* 組み込み codec built-in codec::
* メソッドおよびスロット関数 slot function::


File: python-api-jp.info,  Node: 組み込み codec built-in codec,  Next: メソッドおよびスロット関数 slot function,  Prev: Unicode オブジェクト Unicode object,  Up: Unicode オブジェクト Unicode object

組み込み codec (built-in codec)
...............................

Python では、処理速度を高めるために C で書かれた一そろいの codec
を提供しています。これらの codec は全て以下の関数を介して
直接利用できます。

以下の API の多くが、 ENCODING と ERRORS という二つの
引数をとります。これらのパラメタは、組み込みの Unicode オブジェクト
コンストラクタである `unicode()' における同名のパラメタと同じ
セマンティクスになっています。

ENCODING を `NULL' にすると、デフォルトエンコーディング である
ASCIIを使います。ファイルシステムに関する関数の呼び出し
では、ファイル名に対するエンコーディングとして
`Py_FileSystemDefaultEncoding' を使わねばなりません。
この変数は読み出し専用の変数として扱わねばなりません:
この変数は、あるシステムによっては静的な文字列に対するポインタで
あったり、また別のシステムでは、例えばアプリケーションが setlocale
を読んだときなどに変わったりもします。

ERRORS で指定するエラー処理もまた、 `NULL' を指定できます。 `NULL'
を指定すると、codec で定義されているデフォルト処理の使用を
意味します。全ての組み込み codec で、デフォルトのエラー処理は "strict"
(`ValueError' を送出する) になっています。

個々の codec は全て同様のインタフェースを使っています。個別の codec
の説明では、説明を簡単にするために以下の汎用のインタフェースとの
違いだけを説明しています。

以下は汎用 codec の API です:

`PyObject* PyUnicode_Decode(const char *s, int size, const char *encoding, const char *errors)'
     何らかのエンコード方式でエンコードされた、 SIZE バイトの 文字列 S
     をデコードして Unicode オブジェクトを生成します。 ENCODING と
     ERRORS は、組み込み関数 unicode() の同名の
     パラメタと同じ意味を持ちます。使用する codec の検索は、 Python の
     codec レジストリを使って行います。codec が例外を送出した場合には
     `NULL' を返します。

`PyObject* PyUnicode_Encode(const Py_UNICODE *s, int size, const char *encoding, const char *errors)'
     SIZE で指定されたサイズの `Py_UNICODE' バッファを エンコードした
     Python 文字列オブジェクトを返します。 ENCODING および ERRORS は
     Unicode 型の `encode()' メソッドに与える同名のパラメタと
     同じ意味を持ちます。使用する codec の検索は、 Python の codec
     レジストリを使って行います。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyUnicode_AsEncodedString(PyObject *unicode, const char *encoding, const char *errors)'
     Unicode オブジェクトをエンコードし、その結果を Python 文字列
     オブジェクトとして返します。ENCODING および ERRORS は Unicode 型の
     `encode()' メソッドに与える同名のパラメタと
     同じ意味を持ちます。使用する codec の検索は、 Python の codec
     レジストリを使って行います。codec が例外を送出した場合には `NULL'
     を返します。

以下は UTF-8 codec の APIです:

`PyObject* PyUnicode_DecodeUTF8(const char *s, int size, const char *errors)'
     UTF-8 でエンコードされた SIZE バイトの文字列 S から Unicode
     オブジェクトを生成します。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyUnicode_EncodeUTF8(const Py_UNICODE *s, int size, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを UTF-8
     でエンコードし、 Python 文字列オブジェクトにして返します。 codec
     が例外を送出した場合には `NULL' を返します。

`PyObject* PyUnicode_AsUTF8String(PyObject *unicode)'
     UTF-8 で Unicode オブジェクトをエンコードし、結果を Python 文字列
     オブジェクトとして返します。エラー処理は "strict" です。 codec
     が例外を送出した場合には`NULL' を返します。

以下は UTF-16 codec の APIです:

`PyObject* PyUnicode_DecodeUTF16(const char *s, int size, const char *errors, int *byteorder)'
     UTF-16 でエンコードされたバッファ S から SIZE バイト
     デコードして、結果を Unicode オブジェクトで返します。 ERRORS は
     (`NULL'でない場合) エラー処理方法を定義します。 デフォルト値は
     "strict" です。

     BYTEORDER が `NULL'でない場合、デコード機構は以下の
     ように指定されたバイト整列 (byte order) に従ってデコードを開始
     します:

             *byteorder == -1: リトルエンディアン
             *byteorder == 0:  ネイティブ
             *byteorder == 1:  ビッグエンディアン

     その後、入力データ中に見つかった全てのバイト整列マーカ (byte order
     mark, BOM) に従って、バイト整列を切り替えます。 BOM
     はデコード結果の Unicode 文字列中にはコピーされません。
     デコードを完結した後、*BYTEORDER は入力データの終点現在に
     おけるバイト整列に設定されます。

     BYTEORDER が `NULL'の場合、 codec はネイティブバイト整列の
     モードで開始します。

     codec が例外を送出した場合には`NULL' を返します。

`PyObject* PyUnicode_EncodeUTF16(const Py_UNICODE *s, int size, const char *errors, int byteorder)'
     S 中の Unicode データを UTF-16 でエンコードした結果が入っている
     Python 文字列オブジェクトを返します。 BYTEORDER が `0'
     でない場合、出力は以下のバイト整列 指定に従って書き出されます:

             byteorder == -1: リトルエンディアン
             byteorder == 0:  ネイティブ (BOM マーカを書き出します)
             byteorder == 1:  ビッグエンディアン

     バイトオーダが `0' の場合、出力結果となる文字列は常に Unicode BOM
     マーカ (U+FEFF) で始まります。それ以外のモードでは、 BOM
     マーカを頭につけません。

     `Py_UNICODE' データは UCS-2 に縮小された UTF-16 として解釈
     されることに注意してください。このトリックによって、API を傷つける
     ことなく、完全な UTF-16 機能を後で追加できます。

     codec が例外を送出した場合には`NULL' を返します。

`PyObject* PyUnicode_AsUTF16String(PyObject *unicode)'
     ネイティブバイトオーダの UTF-16 でエンコードされた Python
     文字列を返します。 文字列は常に BOM
     マーカから始まります。エラー処理は "strict" です。 codec
     が例外を送出した場合には`NULL' を返します。

以下は "Unicode Escape" codec の APIです:

`PyObject* PyUnicode_DecodeUnicodeEscape(const char *s, int size, const char *errors)'
     Unicode-Escape でエンコードされた SIZE バイトの文字列 S から
     Unicode オブジェクトを生成します。codec が例外を送出した場合には
     `NULL' を返します。

`PyObject* PyUnicode_EncodeUnicodeEscape(const Py_UNICODE *s, int size, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを
     Unicode-Escape でエンコードし、 Python
     文字列オブジェクトにして返します。 codec が例外を送出した場合には
     `NULL' を返します。

`PyObject* PyUnicode_AsUnicodeEscapeString(PyObject *unicode)'
     Unicode-Escape で Unicode オブジェクトをエンコードし、結果を
     Python 文字列オブジェクトとして返します。エラー処理は "strict"
     です。 codec が例外を送出した場合には`NULL' を返します。

以下は "Raw Unicode Escape" codec の APIです:

`PyObject* PyUnicode_DecodeRawUnicodeEscape(const char *s, int size, const char *errors)'
     Raw-Unicode-Escape でエンコードされた SIZE バイトの文字列 S から
     Unicode オブジェクトを生成します。codec が例外を送出した場合には
     `NULL' を返します。

`PyObject* PyUnicode_EncodeRawUnicodeEscape(const Py_UNICODE *s, int size, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを
     Raw-Unicode-Escape でエンコードし、 Python
     文字列オブジェクトにして返します。 codec が例外を送出した場合には
     `NULL' を返します。

`PyObject* PyUnicode_AsRawUnicodeEscapeString(PyObject *unicode)'
     Raw-Unicode-Escape で Unicode オブジェクトをエンコードし、結果を
     Python 文字列オブジェクトとして返します。エラー処理は "strict"
     です。 codec が例外を送出した場合には`NULL' を返します。

以下は Latin-1 codec の APIです: Latin-1 は、 Unicode 序数の最初の 256
個に対応し、 エンコード時にはこの 256 個だけを受理します。

`PyObject* PyUnicode_DecodeLatin1(const char *s, int size, const char *errors)'
     Latin-1 でエンコードされた SIZE バイトの文字列 S から Unicode
     オブジェクトを生成します。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyUnicode_EncodeLatin1(const Py_UNICODE *s, int size, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを Latin-1
     でエンコードし、 Python 文字列オブジェクトにして返します。 codec
     が例外を送出した場合には `NULL' を返します。

`PyObject* PyUnicode_AsLatin1String(PyObject *unicode)'
     Latin-1 で Unicode オブジェクトをエンコードし、結果を Python 文字列
     オブジェクトとして返します。エラー処理は "strict" です。 codec
     が例外を送出した場合には`NULL' を返します。

以下は ASCII codec の APIです: 7 ビットの ASCII
データだけを受理します。その他のコードは エラーになります。

`PyObject* PyUnicode_DecodeASCII(const char *s, int size, const char *errors)'
     ASCII でエンコードされた SIZE バイトの文字列 S から Unicode
     オブジェクトを生成します。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyUnicode_EncodeASCII(const Py_UNICODE *s, int size, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを ASCII
     でエンコードし、 Python 文字列オブジェクトにして返します。 codec
     が例外を送出した場合には `NULL' を返します。

`PyObject* PyUnicode_AsASCIIString(PyObject *unicode)'
     ASCII で Unicode オブジェクトをエンコードし、結果を Python 文字列
     オブジェクトとして返します。エラー処理は "strict" です。 codec
     が例外を送出した場合には`NULL' を返します。

以下は mapping codec の APIです:

この codec は、多くの様々な codec を実装する際に使われるという点で
特殊な codec です (実際、`encodings' パッケージに入っている 標準 codecs
のほとんどは、この codec を使っています)。 この codec
は、文字のエンコードやデコードにマップ型 (mapping) を使います。

デコード用のマップ型は、文字列型の字列一組みを、 Unicode 型の字列一組、
整数 (Unicode 序数として解釈されます) または `None' ("定義されていない
対応付け(undefined mapping)" を意味し、エラーを引き起こします) の
いずれかに対応付けなければなりません。

デコード用のマップ型は、Unicode 型の字列一組みを、 string 型の字列一組、
整数 (Latin-1 序数として解釈されます) または `None' ("定義されていない
対応付け(undefined mapping)" を意味し、エラーを引き起こします) の
いずれかに対応付けなければなりません。

マップ型オブジェクトは、 `__getitem__' マップ型インタフェース
をサポートしなければなりません。

ある文字の検索が LookupError によって失敗すると、その文字は
そのままコピーされます。すなわち、その文字の序数値がそれぞれ Unicode
または Latin-1 として解釈されます。このため、codec を
実現するマップ型に入れる必要がある対応付け関係は、ある文字を別の
コード点に対応付けるものだけです。

`PyObject* PyUnicode_DecodeCharmap(const char *s, int size, PyObject *mapping, const char *errors)'
     エンコードされた SIZE バイトの文字列 S から MAPPING
     に指定されたオブジェクトを使って Unicode オブジェクトを
     生成します。codec が例外を送出した場合には`NULL' を返します。

`PyObject* PyUnicode_EncodeCharmap(const Py_UNICODE *s, int size, PyObject *mapping, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを MAPPING
     に指定されたオブジェクトを使ってエンコードし、 Python
     文字列オブジェクトにして返します。 codec が例外を送出した場合には
     `NULL' を返します。

`PyObject* PyUnicode_AsCharmapString(PyObject *unicode, PyObject *mapping)'
     Unicode オブジェクトを MAPPING に指定されたオブジェクトを使って
     エンコードし、結果を Python 文字列オブジェクトとして返します。
     エラー処理は "strict" です。 codec が例外を送出した場合には`NULL'
     を返します。

以下の codec API は Unicode から Unicode への対応付けを行う
特殊なものです。

`PyObject* PyUnicode_TranslateCharmap(const Py_UNICODE *s, int size, PyObject *table, const char *errors)'
     で 指定された長さを持つ `Py_UNICODE' バッファを、 文字変換マップ
     TABLE を適用して変換し、変換結果を Unicode
     オブジェクトで返します。codec が例外を発行した場合には `NULL'
     を返します。

     対応付けを行う TABLE は、 Unicode 序数を表す整数を Unicode
     序数を表す整数または `None' に対応付けます。 (`None'
     の場合にはその文字を削除します)

     対応付けテーブルが提供する必要があるメソッドは `__getitem__()'
     インタフェースだけです; 従って、辞書や
     配列型を使ってもうまく動作します。対応付けを行っていない
     (`LookupError' を起こすような) 文字序数に対しては、
     変換は行わず、そのままコピーします。

以下は MBCS codec の API です。この codec は現在のところ、 Windows
上だけで利用でき、変換の実装には Win32 MBCS 変換機構 (Win32 MBCS
converter) を使っています。 MBCS (または DBCS) はエンコード方式の種類
(class) を表す言葉で、単一の
エンコード方式を表すわけでなないので注意してください。
利用されるエンコード方式 (target encoding) は、 codec を動作
させているマシン上のユーザ設定で定義されています。

`PyObject* PyUnicode_DecodeMBCS(const char *s, int size, const char *errors)'
     MBCS でエンコードされた SIZE バイトの文字列 S から Unicode
     オブジェクトを生成します。codec が例外を送出した場合には `NULL'
     を返します。

`PyObject* PyUnicode_EncodeMBCS(const Py_UNICODE *s, int size, const char *errors)'
     SIZE で指定された長さを持つ `Py_UNICODE' 型バッファを MBCS
     でエンコードし、 Python 文字列オブジェクトにして返します。 codec
     が例外を送出した場合には `NULL' を返します。

`PyObject* PyUnicode_AsMBCSString(PyObject *unicode)'
     MBCS で Unicode オブジェクトをエンコードし、結果を Python 文字列
     オブジェクトとして返します。エラー処理は "strict" です。 codec
     が例外を送出した場合には`NULL' を返します。


File: python-api-jp.info,  Node: メソッドおよびスロット関数 slot function,  Prev: 組み込み codec built-in codec,  Up: Unicode オブジェクト Unicode object

メソッドおよびスロット関数 (slot function)
..........................................

以下の API は Unicode オブジェクトおよび文字列を入力に取り
(説明では、どちらも文字列と表記しています)、場合に応じて Unicode
オブジェクトか整数を返す機能を持っています。

これらの関数は全て、例外が発生した場合には `NULL' または `-1'
を返します。

`PyObject* PyUnicode_Concat(PyObject *left, PyObject *right)'
     二つの文字列を結合して、新たな Unicode 文字列を生成します。

`PyObject* PyUnicode_Split(PyObject *s, PyObject *sep, int maxsplit)'
     Unicode 文字列のリストを分割して、 Unicode 文字列からなるリスト
     を返します。 SEP が `NULL'の場合、全ての空白文字を使って
     分割を行います。それ以外の場合、指定された文字を使って分割を
     行います。最大で MAXSPLIT 個までの分割を行います。 MAXSPLIT
     が負ならば分割数に制限を設けません。
     分割結果のリスト内には分割文字は含みません。

`PyObject* PyUnicode_Splitlines(PyObject *s, int keepend)'
     Unicode 文字列を改行文字で区切り、Unicode 文字列からなるリスト
     を返します。CRLF は一個の改行文字とみなします。KEEPEND が 0
     の場合、分割結果のリスト内に改行文字を含めません。

`PyObject* PyUnicode_Translate(PyObject *str, PyObject *table, const char *errors)'
     文字列に文字変換マップ TABLE を適用して変換し、変換結果を Unicode
     オブジェクトで返します。

     対応付けを行う TABLE は、 Unicode 序数を表す整数を Unicode
     序数を表す整数または `None' に対応付けます。 (`None'
     の場合にはその文字を削除します)

     対応付けテーブルが提供する必要があるメソッドは `__getitem__()'
     インタフェースだけです; 従って、辞書や
     配列型を使ってもうまく動作します。対応付けを行っていない
     (`LookupError' を起こすような) 文字序数に対しては、
     変換は行わず、そのままコピーします。

     ERRORS は codecs で通常使われるのと同じ意味を持ちます。 ERRORS は
     `NULL' にしてもよく、デフォルトエラー処理の 使用を意味します。

`PyObject* PyUnicode_Join(PyObject *separator, PyObject *seq)'
     指定した SEPARATOR で文字列からなる配列を連結 (join) し、
     連結結果を Unicode 文字列で返します。

`PyObject* PyUnicode_Tailmatch(PyObject *str, PyObject *substr, int start, int end, int direction)'
     SUBSTR が指定された末尾条件 (DIRECTION == -1 は 前方一致、
     DIRECTION ==1 は後方一致) で STR[START:END] とマッチする場合に 1
     を返し、 それ以外の場合には 0 を返します。

`int PyUnicode_Find(PyObject *str, PyObject *substr, int start, int end, int direction)'
     STR[START:END] 中にSUBSTR が最初に
     出現する場所を返します。このとき指定された検索方向 DIRECTION
     (DIRECTION == 1 は順方向検索、 DIRECTION == -1 は 逆方向検索)
     で検索します。戻り値は最初にマッチが見つかった場所の
     インデクスです; 戻り値 `-1' はマッチが見つからなかったことを
     表し、`-2' はエラーが発生して例外情報が設定されていることを
     表します。

`int PyUnicode_Count(PyObject *str, PyObject *substr, int start, int end)'
     `STR[START:END]' に SUBSTR
     が重複することなく出現する回数を返します。
     エラーが発生した場合には `-1' を返します。

`PyObject* PyUnicode_Replace(PyObject *str, PyObject *substr, PyObject *replstr, int maxcount)'
     STR 中に出現する SUBSTR を最大で MAXCOUNT 個 REPLSTR
     に置換し、置換結果を Unicode オブジェクトにして 返します。
     MAXCOUNT == -1 にすると、全ての SUBSTR を置換します。

`int PyUnicode_Compare(PyObject *left, PyObject *right)'
     二つの文字列を比較して、左引数が右引数より小さい場合、
     左右引数が等価の場合、左引数が右引数より大きい場合、について、
     それぞれ -1, 0, 1 を返します。

`PyObject* PyUnicode_Format(PyObject *format, PyObject *args)'
     新たな文字列オブジェクトを FORMAT および ARGS から
     生成して返します; このメソッドは `FORMAT % ARGS'
     のようなものです。引数 ARGS はタプルでなくてはなりません。

`int PyUnicode_Contains(PyObject *container, PyObject *element)'
     ELEMENT が CONTAINER 内にあるか調べ、その結果に応じて
     真または偽を返します。

     ELEMENT は単要素の Unicode 文字に型強制できなければ
     なりません。エラーが生じた場合には `-1' を返します。


File: python-api-jp.info,  Node: Buffer Objects,  Next: タプルオブジェクト tuple object,  Prev: Unicode オブジェクト Unicode object,  Up: 配列オブジェクト sequence object

Buffer Objects
--------------

C で実装された Python オブジェクトは、"バッファインタフェース (buffer
interface)" と呼ばれる一連の
関数を公開していることがあります。これらの関数は、あるオブジェクトの
データを生 (raw) のバイト列形式で公開するために使います。
このオブジェクトの使い手は、バッファインタフェースを使うことで、
オブジェクトをあらかじめコピーしておく必要なしに、オブジェクトの
データに直接アクセスできます。

バッファインタフェースをサポートするオブジェクトの例として、
文字列型とアレイ (array) 型の二つがあります。文字列オブジェクトは、
その内容をバッファインタフェースのバイト単位形式で公開して
います。アレイもその内容を公開していますが、注意する必要が
あるのはアレイの要素は複数バイトの値になりうる、ということです。

バッファインタフェースの使い手の一例として、ファイルオブジェクトの
`write()' メソッドがあります。バッファインタフェースを
介してバイト列を公開しているオブジェクトは全て、ファイルへの書き出し
ができます。オブジェクトのバッファインタフェースを操作し、
対象となるオブジェクトからデータを返させる `PyArg_ParseTuple()'
には数多くのデータ書式化コードが あります。

バッファインタフェースに関するより詳しい情報は、
"バッファオブジェクト構造体" 節 (~*Note バッファオブジェクト構造体
buffer object structure:: 節) の、 `PyBufferProcs'  の説明のところに
あります。

"バッファオブジェクト" はヘッダファイル `bufferobject.h'
の中で定義されています (このファイルは `Python.h' がインクルード
しています)。 バッファオブジェクトは、 Python プログラミングの
レベルからは文字列オブジェクトと非常によく似ているように見えます:
スライス、インデクス指定、結合、その他標準の文字列操作をサポート
しています。しかし、バッファオブジェクトのデータは二つのデータソース:
何らかのメモリブロックか、バッファインタフェースを公開している
別のオブジェクト、のいずれかに由来しています。

バッファオブジェクトは、他のオブジェクトのバッファインタフェースから
Python プログラマにデータを公開する方法として便利です。
バッファオブジェクトはゼロコピーなスライス機構 (zero-copy slicing
mechanism) としても使われます。ブロックメモリを参照するという
バッファオブジェクトの機能を使うことで、任意のデータをきわめて簡単に
Python プログラマに公開できます。メモリブロックは巨大でも
かまいませんし、C 拡張モジュール内の定数配列でもかまいません。
また、オペレーティングシステムライブラリ側に渡す前の、
操作用の生のブロックメモリでもかまいませんし、
構造化されたデータをネイティブのメモリ配置形式でやりとりするため
にも使えます。

`PyBufferObject'
     この `PyObject' のサブタイプはバッファオブジェクトを表現します。

`PyTypeObject PyBuffer_Type'
     Python バッファ型 (buffer type) を表現する`PyTypeObject' です;
     Python レイヤにおける `types.BufferType' と同じオブジェクト です 。

`int Py_END_OF_BUFFER'
     この定数は、`PyBuffer_FromObject()' または の
     `PyBuffer_FromReadWriteObject()' SIZE パラメタに 渡します。
     このパラメタを渡すと、`PyBufferObject' は指定された OFFSET
     からバッファの終わりまでを BASE オブジェクトとして参照します。
     このパラメタを使うことで、関数の呼び出し側が BASE オブジェクト
     のサイズを調べる必要がなくなります。

`int PyBuffer_Check(PyObject *p)'
     引数が`PyBuffer_Type' 型のときに真を返します。

`PyObject* PyBuffer_FromObject(PyObject *base, int offset, int size)'
     新たな読み出し専用バッファオブジェクトを返します。BASE が
     読み出し専用バッファに必要なバッファプロトコルをサポートしていない
     場合や、厳密に一つのバッファセグメントを提供していない場合には
     `TypeError' を送出し、OFFSET がゼロ以下の場合には `ValueError'
     を送出します。 バッファオブジェクトはは BASE
     オブジェクトに対する参照を保持し、 バッファオブジェクトのの内容は
     BASE オブジェクトの OFFSET から SIZE
     バイトのバッファインタフェースへの参照になります。 SIZE が
     `Py_END_OF_BUFFER' の場合、新たに作成する
     バッファオブジェクトの内容は BASE から公開されているバッファの
     末尾までにわたります。

`PyObject* PyBuffer_FromReadWriteObject(PyObject *base, int offset, int size)'
     新たな書き込み可能バッファオブジェクトを返します。パラメタおよび例外
     は `PyBuffer_FromObject' と同じです。BASE オブジェクト
     が書き込み可能バッファに必要なバッファプロトコルを公開していない
     場合、`TypeError' を送出します。

`PyObject* PyBuffer_FromMemory(void *ptr, int size)'
     メモリ上の指定された場所から指定されたサイズのデータを読み出せる、
     新たな読み出し専用バッファオブジェクトを返します。
     この関数が返すバッファオブジェクトが存続する間、PTR で与え
     られたメモリバッファがデアロケートされないようにするのは呼び出し側の
     責任です。SIZE がゼロ以下の場合には`ValueError' を
     送出します。SIZE には `Py_END_OF_BUFFER' を指定しては
     _なりません_; 指定すると、`ValueError' を送出します。

`PyObject* PyBuffer_FromReadWriteMemory(void *ptr, int size)'
     `PyBuffer_FromMemory()' に似ていますが、書き込み可能な
     バッファを返します。

`PyObject* PyBuffer_New(int size)'
     SIZE バイトのメモリバッファを独自に維持する新たな書き込み可能
     バッファオブジェクトを返します。 SIZE
     がゼロまたは正の値でない場合、`ValueError' を 送出します。


File: python-api-jp.info,  Node: タプルオブジェクト tuple object,  Next: List Objects,  Prev: Buffer Objects,  Up: 配列オブジェクト sequence object

タプルオブジェクト (tuple object)
---------------------------------

`PyTupleObject'
     この `PyObject' のサブタイプは Python のタプルオブジェクトを
     表現します。

`PyTypeObject PyTuple_Type'
     この `PyTypeObject' のインスタンスは Python のタプル型を
     表現します; Python レイヤにおける `types.TupleType'
     と同じオブジェクトです。

`int PyTuple_Check(PyObject *p)'
     P がタプルオブジェクトか、タプル型のサブタイプのインスタンス
     である場合に真を返します。 _Changed in Python version 2.2_

`int PyTuple_CheckExact(PyObject *p)'
     P がタプルオブジェクトで、かつタプル型のサブタイプのインスタンス
     でない場合に真を返します。 _Added in Python version 2.2_

`PyObject* PyTuple_New(int len)'
     サイズが LEN 新たなタプルオブジェクトを返します。 失敗すると
     `NULL' を返します。

`int PyTuple_Size(PyObject *p)'
     タプルオブジェクトへのポインタを引数にとり、そのタプルのサイズを
     返します。

`int PyTuple_GET_SIZE(PyObject *p)'
     タプル P のサイズを返しますが、P は非 `NULL' でなくては
     ならず、タプルオブジェクトを指していなければなりません;
     エラーチェックを行いません。

`PyObject* PyTuple_GetItem(PyObject *p, int pos)'
     P の指すタプルオブジェクト内の、位置 POS にあるオブジェクト
     を返します。 POS が範囲を超えている場合、 `NULL' を返して
     `IndexError' 例外をセットします。

`PyObject* PyTuple_GET_ITEM(PyObject *p, int pos)'
     `PyTuple_GetItem()' に似ていますが、引数に対する
     エラーチェックを行いません。

`PyObject* PyTuple_GetSlice(PyObject *p, int low, int high)'
     P の指すタプルオブジェクト内の、位置 LOW から HIGH
     までのスライスを取り出して、タプルオブジェクトとして 返します。

`int PyTuple_SetItem(PyObject *p, int pos, PyObject *o)'
     P の指すタプルオブジェクト内の位置 POS に、 オブジェクト O
     への参照を挿入します。成功した場合には `0' を返します。 _Note:_
     この関数は O への参照を "盗み取り" ます。

`void PyTuple_SET_ITEM(PyObject *p, int pos, PyObject *o)'
     `PyTuple_SetItem()' に似ていますが、エラーチェックを
     行わず、新たなタプルに値を入れるとき _以外には使ってはなりません_。
     _Note:_ この関数は O への参照を "盗み取り" ます。

`int _PyTuple_Resize(PyObject **p, int newsize)'
     タプルをリサイズする際に使えます。NEWSIZE はタプルの新たな
     長さです。タプルは変更不能なオブジェクト _ということになっている_
     ので、この関数は対象のオブジェクトに対してただ一つしか参照がない時
     以外には使ってはなりません。タプルがコード中の他の部分ですでに参照
     されている場合には、この関数を _使ってはなりません_。
     タプルは常に指定サイズの末尾まで伸縮します。 成功した場合には `0'
     を返します。 クライアントコードは、`*P' の値が呼び出し前と同じに
     なると気体してはなりません。 `*P'
     が置き換えられた場合、オリジナルの `*P' は破壊されます。失敗すると
     `-1' を返し、 `*P' を `NULL'に設定して、  `MemoryError' または
     `SystemError' を送出します。 _Changed in Python version 2.2_

