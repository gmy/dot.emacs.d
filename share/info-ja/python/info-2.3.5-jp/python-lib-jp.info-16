This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: datetime,  Next: time,  Prev: popen2,  Up: 汎用オペレーティングシステムサービス

基本的な日付型および時間型
==========================

基本的な日付型および時間型。

_Added in Python version 2.3_

`datetime' モジュールでは、日付や時間データを簡単な方法と
複雑な方法の両方で操作するためのクラスを提供しています。
日付や時刻を対象にした四則演算がサポートされている一方で、
このモジュールの実装では出力の書式化や操作を目的とした
データメンバの効率的な取り出しに焦点を絞っています。

日付および時刻オブジェクトには、"naive" および "aware" の
2種類があります。この区別はオブジェクトがタイムゾーン
や夏時間、あるいはその他のアルゴリズム的、政治的な理由に
よる時刻の修正に関する何らかの表記をもつかどうかによるものです。
特定の数字がメートルか、マイルか、質量を表すかといったことが
プログラムの問題であるように、 naive な `datetime'
オブジェクトが標準世界時 (UTC: Coordinated Universal time)
を表現するか、ローカルの時刻を表現するか、
ありは他のいずれかのタイムゾーンにおける時刻を表現するかは
純粋にプログラムの問題となります。 naive な `datetime' オブジェクトは、
現実世界のいくつかの側面を無視するという犠牲のもとに、
理解しやすく、かつ利用しやすくなっています。

より多くの情報を必要とするアプリケーションのために、 `datetime' および
`time' オブジェクトはオプションの タイムゾーン情報メンバ、`tzinfo'
を持っています。このメンバ には抽象クラス `tzinfo'
のサブクラスのインスタンスが入って います。`tzinfo' オブジェクトは UTC
時刻からのオフセット、
タイムゾーン名、夏時間が有効になっているかどうか、といった情報
を記憶しています。 `datetime' モジュールでは具体的な `tsinfo' クラスを
提供していないので注意してください。必要な詳細仕様を備えた
タイムゾーン機能を提供するのはアプリケーションの責任です。
世界各国における時刻の修正に関する法則は合理的というよりも政治的な
ものであり、全てのアプリケーションに適した標準というものが
存在しないのです。

`datetime' モジュールでは以下の定数を公開しています:

`MINYEAR'
     `date' や `datetime' オブジェクトで許されている、
     年を表現する最小の数字です。`MINYEAR' は `1' です。

`MAXYEAR'
     `date' や `datetime' オブジェクトで許されている、
     年を表現する最大の数字です。`MAXYEAR' は `9999' です。

See also:
     *Note calendar:: 汎用のカレンダー関連関数。 *Note time::
     時刻へのアクセスと変換。

* Menu:

* 利用可能なデータ型::
* timedelta オブジェクト::
* date オブジェクト::
* datetime オブジェクト::
* time オブジェクト::
* tzinfo オブジェクト::
* strftime の振る舞い::


File: python-lib-jp.info,  Node: 利用可能なデータ型,  Next: timedelta オブジェクト,  Prev: datetime,  Up: datetime

利用可能なデータ型
------------------

`date'
     理想化された naive な日付表現で、実質的には、これまでもこれからも
     現在のグレゴリ暦 (Gregorian calender) であると仮定しています。
     属性: `year'、 `month'、および `day'。

`time'
     理想化された時刻表現で、あらゆる特定の日における影響から独立
     しており、毎日厳密に 24*60*60 秒であると仮定します ("うるう秒:
     leap seconds" の概念はありません)。 属性: `hour'、
     `minute'、`second'、 `microsecond'、 および `tzinfo'。

`datetime'
     日付と時刻を組み合わせたもの。 属性: `year'、 `month'、 `day'、
     `hour'、 `minute'、 `second'、 `microsecond'、および `tzinfo'。

`timedelta'
     `date'、`time'、あるいは `datetime' クラスの
     二つのインスタンス間の時間差をマイクロ秒精度で表す経過時間値です。

`tzinfo'
     タイムゾーン情報オブジェクトの抽象基底クラスです。 `datetime'
     および `time' クラスで用いられ、 カスタマイズ可能な時刻修正の概念
     (たとえばタイムゾーンや 夏時間の計算）を提供します。

これらの型のオブジェクトは変更不可能 (immutable) です。

`date' 型のオブジェクトは常に naive です。

`time' や `datetime' 型のオブジェクト D は naive にも aware
にもできます。D は `D.tzinfo' が `None' でなく、かつ
`D.tzinfo.utcoffset(D)' が `None' を返さない場合に aware
となります。`D.tzinfo' が `None' の場合や、`D.tzinfo' は `None' では
ないが `D.tzinfo.utcoffset(D)' が `None' を 返す場合には、D は naive
となります。

naive なオブジェクトと aware なオブジェクトの区別は `timedelta'
オブジェクトにはあてはまりません。

サブクラスの関係は以下のようになります:

     object
         timedelta
         tzinfo
         time
         date
             datetime


File: python-lib-jp.info,  Node: timedelta オブジェクト,  Next: date オブジェクト,  Prev: 利用可能なデータ型,  Up: datetime

`timedelta' オブジェクト
------------------------

`timedelta' オブジェクトは経過時間、すなわち二つの日付
や時刻間の差を表します。

`timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)'
     全ての引数がオプションです。引数は整数、長整数、浮動小数点数に
     することができ、正でも負でもかまいません。

     DAYS、SECONDS および MICROSECONDS のみが
     内部に記憶されます。引数は以下のようにして変換されます:

        * 1 ミリ秒は 1000 マイクロ秒に変換されます。

        * 1 分は 60 秒に変換されます。

        * 1 時間は 3600 秒に変換されます。

        * 1 週間は 7 日に変換されます。

     その後、日、秒、マイクロ秒は値が一意に表されるように、

        * `0 <= MICROSECONDS < 1000000'

        * `0 <= SECONDS < 3600*24' (一日中の秒数)

        * `-999999999 <= DAYS <= 999999999'

     で正規化されます。

     引数のいずれかが浮動小数点であり、小数のマイクロ秒が存在する場合、
     小数のマイクロ秒は全ての引数から一度取り置かれ、それらの和は
     最も近いマイクロ秒に丸められます。浮動小数点の引数がない場合、
     値の変換と正規化の過程は厳密な (失われる情報がない)
     ものとなります。

     日の値を正規化した結果、指定された範囲の外側になった場合には、
     `OverflowError' が送出されます。

     負の値を正規化すると、一見混乱するような値になります。 例えば、

          >>> d = timedelta(microseconds=-1)
          >>> (d.days, d.seconds, d.microseconds)
          (-1, 86399, 999999)


クラス属性を以下に示します:

`min'
     最小の値を表す `timedelta' オブジェクトで、
     `timedelta(-999999999)' です。

`max'
     最大の値を表す `timedelta' オブジェクトで、
     `timedelta(days=999999999, hours=23, minutes=59, seconds=59,
     microseconds=999999)' です。

`resolution'
     `timedelta' オブジェクトが等しくならない最小の
     時間差で、`timedelta(microseconds=1)' です。

正規化のために、`timedelta.max' >`-timedelta.min'
となるので注意してください。`-timedelta.max' は `timedelta'
オブジェクトとして表現することができません。

以下に (読み出し専用の) インスタンス属性を示します:

属性                                 値
------                               -----
days                                 両端値を含む -999999999 から
                                     999999999 の間
seconds                              両端値を含む 0 から 86399 の間
microseconds                         両端値を含む 0 から 999999 の間

サポートされている操作を以下に示します:

演算                                 結果
------                               -----
T1 = T2 + T3                         T2 と T3 を加算します。演算後、
                                     T1-T2 == T3 および T1-T3 == T2 は
                                     真になります。 (1)
T1 = T2 - T3                         T2 と T3 の差分です。演算後、  T1
                                     == T2 - T3 および T2 == T1 + T3 は
                                     真になります。 (1)
T1 = T2 * I or T1 = I * T2           整数や長整数による乗算です。演算後、
                                     T1 // i == T2 は `i != 0'
                                     であれば真となります。
                                     一般的に、 T1 * i == T1 * (i-1) +
                                     T1 は真となります。(1)
T1 = T2 // I                         端数を切り捨てて除算され、剰余
                                     (がある場合) は捨てられます。(3)
+T1                                  同じ値を持つ`timedelta'
                                     オブジェクトを返します。(2)
-T1                                  `timedelta'(-T1.DAYS, -T1.SECONDS,
                                     -T1.MICROSECONDS)、および T1* -1
                                     と同じです。 (1)(4)
abs(T)                               `t.days >= 0' のときには +T
                                     、`t.days < 0' の ときには -T
                                     となります。(2)

注釈:

`(1)'
     この操作は厳密ですが、オーバフローするかもしれません。

`(2)'
     この操作は厳密であり、オーバフローしないはずです。

`(3)'
     0 による除算は  `ZeroDivisionError' を送出します。

`(4)'
     -TIMEDELTA.MAX は `timedelta'
     オブジェクトで表現することができません。

上に列挙した操作に加えて、`timedelta' オブジェクトは `date' および
`datetime' オブジェクトとの間で 加減算をサポートしています
(下を参照してください)。

`timedelta' オブジェクト間の比較はサポートされており、
より小さい経過時間を表す `timedelta' オブジェクトが より小さい
timedelta と見なされます。
型混合の比較がデフォルトのオブジェクトアドレス比較となってしまう
のを抑止するために、`timedelta' オブジェクトと異なる型の
オブジェクトが比較されると、比較演算子が `==' または `!=' でないかぎり
`TypeError' が送出されます。 後者の場合、それぞれ `False' または `True'
を返します。

`timedelta' オブジェクトはハッシュ可能 (辞書のキーとして利用可能)
であり、効率的な pickle 化をサポートします、また、ブール演算コンテキスト
では、 `timedelta' オブジェクトは `timedelta(0)' に等しくない
場合かつそのときに限り真となります。


File: python-lib-jp.info,  Node: date オブジェクト,  Next: datetime オブジェクト,  Prev: timedelta オブジェクト,  Up: datetime

`date' オブジェクト
-------------------

`date' オブジェクトは日付 (年、月、および日) を表します。
日付は理想的なカレンダー、すなわち現在のグレゴリ暦を過去と未来の
両方向に無限に延長したもので表されます。1 年の 1 月 1 日は日番号 1、 1
年 1 月 2 日は日番号 2、となっていきます。この暦法は、
全ての計算における基本カレンダーである、 Dershowitz と Reingold の書籍
における "予期的グレゴリ (proleptic Gregorian)" 暦の定義に一致します。

`date(year, month, day)'
     全ての引数が必要です。引数は整数でも長整数でもよく、以下の範囲に
     入らなければなりません:

        * `MINYEAR <= YEAR <= MAXYEAR'

        * `1 <= MONTH <= 12'

        * `1 <= DAY <= 指定された月と年における日数'

     範囲を超えた引数を与えた場合、`ValueError' が送出 されます。

他のコンストラクタ、および全てのクラスメソッドを以下に示します:

`today()'
     現在のローカルな日付を返します。 `date.fromtimestamp(time.time())'
     と等価です。

`fromtimestamp(timestamp)'
     `time.time()' が返すような POSIX タイムスタンプ
     に対応する、ローカルな日付を返します。
     タイムスタンプがプラットフォームにおける C 関数 `localtime()'
     でサポートされている範囲を超えている場合には `ValueError'
     を送出することがあります。 この値はよく 1970 年から 2038
     年に制限されていることがあります。
     うるう秒がタイムスタンプの概念に含まれている非 POSIX システム
     では、`fromtimestamp()' はうるう秒を無視します。

`fromordinal(ordinal)'
     予期的グレゴリ暦順序に対応する日付を表し、1 年 1 月 1 日が序数 1
     となります。`1 <= ORDINAL <= date.max.toordinal()'
     でない場合、`ValueError' が送出されます。 任意の日付 D に対し、
     `date.fromordinal(D.toordinal()) ==  D' となります。

以下にクラス属性を示します:

`min'
     表現できる最も古い日付で、`date(MINYEAR, 1, 1)' です。

`max'
     表現できる最も新しい日付で、 `date(MAXYEAR, 12, 31)' です。

`resolution'
     等しくない日付オブジェクト間の最小の差で、 `timedelta(days=1)'
     です。

以下に (読み出し専用の) インスタンス属性を示します:

`year'
     両端値を含む `MINYEAR' から `MAXYEAR' までの値です。

`month'
     両端値を含む 1 から 12 までの値です。

`day'
     1 から与えられた月と年における日数までの値です。

サポートされている操作を以下に示します:

演算                                 結果
------                               -----
DATE2 = DATE1 + TIMEDELTA            DATE2 はから DATE1 から
                                     `TIMEDELTA.days' 日
                                     移動した日付です。 (1)
DATE2 = DATE1 - TIMEDELTA            `DATE2 + TIMEDELTA == DATE1'
                                     であるような日付 DATE2
                                     を計算します。 (2)
TIMEDELTA = DATE1 - DATE2            (3)
DATE1<DATE2                          DATE1 が時刻として DATE2
                                     よりも前を表す場合に、 DATE1
                                     はDATE2
                                     よりも小さいと見なされます。 (4)

注釈:
`(1)'
     DATE2 は `TIMEDELTA.days > 0' の場合進む方向に、 `TIMEDELTA.days <
     0' の場合戻る方向に移動します。 演算後は、`DATE2 - DATE1 ==
     TIMEDELTA.days' となります。 `TIMEDELTA.seconds' および
     `TIMEDELTA.microseconds' は無視されます。 `DATE2.year' が
     `MINYEAR' になってしまったり、 `MAXYEAR'
     より大きくなってしまう場合には `OverflowError' が送出されます。

`(2)'
     この操作は date1 + (-timedelta) と等価ではありません。なぜならば、
     date1 - timedeltaがオーバフローしない場合でも、-timedelta 単体が
     オーバフローする可能性があるからです。 `TIMEDELTA.seconds' および
     `TIMEDELTA.microseconds' は無視されます。

`(3)'
     この演算は厳密で、オーバフローしません。timedelta.seconds および
     timedelta.microseconds は 0 で、演算後には date2 + timedelta ==
     date1 となります。

`(4)'
     別の言い方をすると、`DATE1.toordinal() < DATE2.toordinal()'
     であり、かつそのときに限り `date1 < date2' となります。
     型混合の比較がデフォルトのオブジェクトアドレス比較となってしまう
     のを抑止するために、`timedelta' オブジェクトと異なる型の
     オブジェクトが比較されると `TypeError' が送出されます。
     しかしながら、被比較演算子のもう一方が `timetuple' 属性を
     持つ場合には `NotImplemented' が返されます。
     このフックにより、他種の日付オブジェクトに型混合比較を実装する
     チャンスを与えています。 そうでない場合、`timedelta'
     オブジェクトと異なる型の オブジェクトが比較されると、比較演算子が
     `==' または `!=' でないかぎり `TypeError' が送出されます。
     後者の場合、それぞれ `False' または `True' を返します。


`date' オブジェクトは辞書のキーとして用いることができます。
ブール演算コンテキストでは、全ての `date' オブジェクトは
真であるとみなされます。

以下にインスタンスメソッドを示します:

`replace(year, month, day)'
     キーワード引数で指定されたデータメンバが置き換えられることを
     除き、同じ値を持つ `date' オブジェクトを返します。 例えば、`d ==
     date(2002, 12, 31)' とすると、 `d.replace(day=26) == date(2000,
     12, 26)' となります。

`timetuple()'
     `time.localtime()' が返す形式の`time.struct_time' を返します。
     時間、分、および秒は 0 で、DST フラグは -1 になります。
     `D.timetuple()' は `time.struct_time((D.year, D.month, D.day, 0,
     0, 0,  D.weekday(),  D.toordinal() - date(D.year, 1,
     1).toordinal() + 1, -1))' と等価です。

`toordinal()'
     予測的グレゴリ暦における日付序数を返します。 1 年の 1 月 1 日が
     序数 1 となります。任意の `date' オブジェクト D に ついて、
     `date.fromordinal(D.toordinal()) == D' となります。

`weekday()'
     月曜日を 0、日曜日を 6 として、曜日を整数で返します。 例えば、
     `date(2002, 12, 4).weekday() == 2' であり、水曜日を示します。
     `isoweekday()' も参照してください。

`isoweekday()'
     月曜日を 1、日曜日を 7 として、曜日を整数で返します。 例えば、
     `date(2002, 12, 4).weekday() == 3' であり、水曜日を示します。
     `weekday()'、`isocalendar()' も参照してください。

`isocalendar()'
     3 要素のタプル (ISO 年、ISO 週番号、ISO 曜日) を返します。

     ISO カレンダーはグレゴリ暦の変種として広く用いられています。
     細かい説明については
     <http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm>
     を参照してください。

     ISO 年は完全な週が 52 または 53 週あり、週は月曜から始まって日曜に
     終わります。ISO
     年でのある年における最初の週は、その年の木曜日を含む 最初の
     (グレゴリ暦での) 週となります。この週は週番号 1 と呼ばれ、
     この木曜日での ISO 年はグレゴリ暦における年と等しくなります。

     例えば、2004 年は木曜日から始まるため、ISO 年の最初の週は 2003 年
     12 月 29 日、月曜日から始まり、2004 年 1 月 4 日、日曜日に
     終わります。従って、 `date(2003, 12, 29).isocalendar() == (2004,
     1, 1)' であり、かつ `date(2004, 1, 4).isocalendar() == (2004, 1,
     7)' となります。

`isoformat()'
     ISO 8601 形式、'YYYY-MM-DD' の日付を表す文字列を返します。 例えば、
     `date(2002, 12, 4).isoformat() == '2002-12-04'' となります。

`__str__()'
     `date' オブジェクト D において、 `str(D)' は `D.isoformat()'
     と等価です。

`ctime()'
     日付を表す文字列を、例えば date(2002, 12, 4).ctime() == 'Wed Dec
     4 00:00:00 2002' のようにして返します。 ネイティブの C 関数
     `ctime()' (`time.ctime()' はこの関数を呼び出しますが、
     `date.ctime()' は呼び出しません) が C 標準に準拠
     しているプラットフォームでは、 `D.ctime()' は
     `time.ctime(time.mktime(D.timetuple()))' と等価です。

`strftime(format)'
     明示的な書式化文字列で制御された、日付を表現する文字列を返します。
     時間、分、秒を表す書式化コードは値 0 になります。 `strftime()'
     のふるまいについてのセクションを参照して ください。


File: python-lib-jp.info,  Node: datetime オブジェクト,  Next: time オブジェクト,  Prev: date オブジェクト,  Up: datetime

`datetime' オブジェクト
-----------------------

`datetime' オブジェクトは `date' オブジェクトおよび `time'
オブジェクトの全ての情報が入っている単一のオブジェクト です。`date'
オブジェクトと同様に、`datetime' は
現在のグレゴリ暦が両方向に延長されているものと仮定します; また、`time'
オブジェクトと同様に、`datetime' は 毎日が厳密に 3600*24
秒であると仮定します。

以下にコンストラクタを示します:

`datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None)'
     年、月、および日の引数は必須です。TZINFO は `None' または `tzinfo'
     クラスのサブクラスのインスタンス
     にすることができます。残りの引数は整数または長整数で、
     以下のような範囲に入ります:

        * `MINYEAR <= YEAR <= MAXYEAR'

        * `1 <= MONTH <= 12'

        * `1 <= DAY <= 与えられた年と月における日数'

        * `0 <= HOUR < 24'

        * `0 <= MINUTE < 60'

        * `0 <= SECOND < 60'

        * `0 <= MICROSECOND < 1000000'

     引数がこれらの範囲外にある場合、 `ValueError' が送出されます。

その他のコンストラクタ、およびクラスメソッドを以下に示します:

`today()'
     現在のローカルな `datetime' を `tzinfo' が `None'
     であるものとして返します。 これは
     `datetime.fromtimestamp(time.time())' と等価です。 `now()'、
     `fromtimestamp()' も参照してください。

`now(tz=None)()'
     現在のローカルな日付および時刻を返します。オプションの引数 TZ が
     `None' であるか指定されていない場合、この メソッドは `today()'
     と同様ですが、可能ならば `time.time()'
     タイムスタンプを通じて得ることができる
     より高い精度で時刻を提供します  (例えば、プラットフォームが C 関数
     `gettimeofday()' をサポートする場合には可能なことがあります)。

     そうでない場合、TZ はクラス `tzinfo' のサブクラスの
     インスタンスでなければならず、現在の日付および時刻は TZ
     のタイムゾーンに変換されます。この場合、結果は
     `TZ.fromutc(datetime.utcnow().replace(tzinfo=TZ))'
     と等価になります。 `today()', `utcnow()' も参照してください。

`utcnow()'
     現在の UTC における日付と時刻を、 `tzinfo' が `None' で
     あるものとして返します。このメソッドは `now()' に似ていますが、
     現在の UTC における日付と時刻を naive な `datetime' オブジェクト
     として返します。`now()' も参照してください。

`fromtimestamp(timestamp, tz=None)'
     `time.time()' が返すような、POSIX タイムスタンプに
     対応するローカルな日付と時刻を返します。 オプションの引数 TZ が
     `None' であるか、指定されて
     いない場合、タイムスタンプはプラットフォームのローカルな日付および
     時刻に変換され、返される `datetime' オブジェクトは naive
     なものになります。

     そうでない場合、 TZ はクラス `tzinfo' のサブクラスの
     インスタンスでなければならず、現在の日付および時刻は TZ
     のタイムゾーンに変換されます。この場合、結果は
     `TZ.fromutc(datetime.utcfromtimestamp(TIMESTAMP).replace(tzinfo=TZ))'
     と等価になります。

     タイムスタンプがプラットフォームの C 関数 `localtime()' や
     `gmtime()' でサポートされている範囲を超えた場合、
     `fromtimestamp()' は `ValueError' を送出する
     ことがあります。この範囲はよく 1970 年から 2038 年に制限されて
     います。 うるう秒がタイムスタンプの概念に含まれている非 POSIX
     システム では、`fromtimestamp()' はうるう秒を無視します。
     このため、秒の異なる二つのタイムスタンプが同一の `datetime'
     オブジェクトとなることが起こり得ます。 `utcfromtimestamp()'
     も参照してください。

`utcfromtimestamp(timestamp)'
     `time.time()' が返すような POSIX タイムスタンプ に対応する、UTC
     での `datetime' オブジェクトを返します。
     タイムスタンプがプラットフォームにおける C 関数 `localtime()'
     でサポートされている範囲を超えている場合には `ValueError'
     を送出することがあります。 この値はよく 1970 年から 2038
     年に制限されていることがあります。 `fromtimestamp()'
     も参照してください。

`fromordinal(ordinal)'
     1 年 1 月 1 日を序数 1 とする予測的グレゴリ暦序数に対応する
     `datetime' オブジェクトを返します。 `1 <= ordinal <=
     datetime.max.toordinal()' でないかぎり `ValueError'
     が送出されます。結果として返される
     オブジェクトの時間、分、秒、およびマイクロ秒はすべて 0 となり、
     `tzinfo' は `None' となります。

`combine(date, time)'
     与えられた `date' オブジェクトと同じデータメンバを持ち、 時刻と
     `tzinfo' メンバが与えられた `time' オブジェクト と等しい、新たな
     `datetime' オブジェクトを返します。 任意の `datetime' オブジェクト
     D について、 `D == datetime.combine(D.date(), D.timetz())'
     となります。DATE が `datetime' オブジェクトの場合、 その時刻と
     `tzinfo' は無視されます。

以下にクラス属性を示します:

`min'
     表現できる最も古い `datetime' で、 `datetime(MINYEAR, 1, 1,
     tzinfo=None)' です。

`max'
     表現できる最も新しい `datetime' で、 `datetime(MAXYEAR, 12, 31,
     23, 59, 59, 999999, tzinfo=None)' です。

`resolution'
     等しくない `datetime' オブジェクト間の最小の差で、
     `timedelta(microseconds=1)' です。

以下に (読み出し専用の) インスタンス属性を示します:

`year'
     両端値を含む `MINYEAR' から `MAXYEAR' までの値です。

`month'
     両端値を含む 1 から 12 までの値です。

`day'
     1 から与えられた月と年における日数までの値です。

`hour'
     `range(24)' 内の値です。

`minute'
     `range(60)' 内の値です。

`second'
     `range(60)' 内の値です。

`microsecond'
     `range(1000000)' 内の値です。

`tzinfo'
     `datetime' コンストラクタに TZINFO 引数として
     与えられたオブジェクトになり、何も渡されなかった場合には `None'
     になります。

以下にサポートされている演算を示します:

演算                                 結果
------                               -----
DATETIME2 = DATETIME1 + TIMEDELTA    (1)
DATETIME2 = DATETIME1 - TIMEDELTA    (2)
TIMEDELTA = DATETIME1 - DATETIME2    (3)
DATETIME1 < DATETIME2                `datetime' を `datetime'
                                     と比較します。  (4)

`(1)'
     datetime2 は datetime1 から時間 timedelta 移動したもので、
     `TIMEDELTA.days > 0' の場合進む方向に、 `TIMEDELTA.days < 0'
     の場合戻る方向に移動します。 結果は入力の datetime と同じ `tzinfo'
     を持ち、 演算後には datetime2 - datetime1 == timedelta となります。
     datetime2.year が `MINYEAR' よりも小さいか、 `MAXYEAR'
     より大きい場合には `OverflowError' が送出されます。 入力が aware
     なオブジェクトの場合でもタイムゾーン修正は全く行われ ません。

`(2)'
     datetime2 + timedelta == datetime1 となるような datetime2 を
     計算します。ちなみに、結果は入力の datetime と同じ `tzinfo'
     メンバを持ち、入力が aware でもタイムゾーン修正は全く行われ
     ません。 この操作は date1 + (-timedelta)
     と等価ではありません。なぜならば、 date1 -
     timedeltaがオーバフローしない場合でも、-timedelta 単体が
     オーバフローする可能性があるからです。

`(3)'
     `datetime' から `datetime' の減算は両方の被演算子が naive
     であるか、両方とも aware である場合にのみ定義されています 片方が
     aware でもう一方が naive の場合、 `TypeError' が送出されます。

     両方とも naive か、両方とも aware で同じ `tzinfo' メンバ
     を持つ場合、`tzinfo' メンバは無視され、結果は `DATETIME2 + T ==
     DATETIME1' であるような `timedelta' オブジェクト T となります。
     この場合タイムゾーン修正は全く行われません。

     両方が aware で異なる `tzinfo' メンバを持つ場合、 `a-b' は A
     および B をまず naive な UTC datetime
     オブジェクトに変換したかのようにして行います。演算結果は
     決してオーバフローを起こさないことを除き、
     `(A.replace(tzinfo=None) - A.utcoffset()) -
     (B.replace(tzinfo=None) - B.utcoffset())' と同じになります。

`(4)'
     DATETIME1 が時刻として DATETIME2 よりも前を表す場合に、 DATETIME1
     はDATETIME2 よりも小さいと見なされます。

     被演算子の片方が naive でもう一方が aware の場合、 `TypeError'
     が送出されます。両方の被演算子が aware で、 同じ `tzinfo'
     メンバを持つ場合、共通の `tzinfo' メンバは無視され、基本の
     datetime 間の比較が行われます。 両方の被演算子が aware で異なる
     `tzinfo' メンバを持つ 場合、被演算子はまず (`self.utcoffset()'
     で得られる) UTC オフセット で修正されます。 _Note:_
     型混合の比較がデフォルトのオブジェクトアドレス比較となってしまう
     のを抑止するために、被演算子のもう一方が `datatime' オブジェクトと
     異なる型のオブジェクトの場合には `TypeError' が送出されます。
     しかしながら、被比較演算子のもう一方が `timetuple' 属性を
     持つ場合には `NotImplemented' が返されます。
     このフックにより、他種の日付オブジェクトに型混合比較を実装する
     チャンスを与えています。 そうでない場合、`datetime'
     オブジェクトと異なる型の オブジェクトが比較されると、比較演算子が
     `==' または `!=' でないかぎり `TypeError' が送出されます。
     後者の場合、それぞれ `False' または `True' を返します。


`datetime' オブジェクトは辞書のキーとして用いることができます。
ブール演算コンテキストでは、全ての `datetime' オブジェクトは
真であるとみなされます。

インスタンスメソッドを以下に示します:

`date()'
     同じ年、月、日の `date' オブジェクトを返します。

`time()'
     同じ時、分、秒、マイクロ秒を持つ `time' オブジェクトを返します。
     `tzinfo' は `None' です。`timetz()' も参照 してください。

`timetz()'
     同じ時、分、秒、マイクロ秒、および tzinfo メンバを持つ `time'
     オブジェクトを返します。 `time()' メソッドも参照してください。

`replace(year=, month=, day=, hour=, minute=, second=, microsecond=, tzinfo=)'
     キーワード引数で指定したメンバの値を除き、同じ値をもつ datetime
     オブジェクトを返します。 メンバに対する変換を行わずに aware な
     datetime オブジェクトから naive な datetime
     オブジェクトを生成するために、 `tzinfo=None'
     を指定することもできます。

`astimezone(tz)'
     `datetime' オブジェクトを返します。返されるオブジェクトは 新たな
     `tzinfo' メンバ TZ を持ちます。TZ
     は日付および時刻を調整して、オブジェクトが SELF と同じ UTC
     時刻を持つが、TZ におけるローカルな時刻を表すようにします。

     TZ は `tzinfo' のサブクラスのインスタンスでなければ
     ならず、インスタンスの `utcoffset()' および `dst()' メソッドは
     `None' を返してはなりません。SELF は aware でなくてはなりません
     (`SELF.tzinfo' が `None' であってはならず、かつ `SELF.utcoffset()'
     は `None' を返してはなりません)。

     `SELF.tzinfo' が TZ の場合、 `SELF.astimezone(TZ)' は SELF
     に等しくなります:
     日付および時刻データメンバに対する調整は行われません。
     そうでない場合、結果はタイムゾーン TZ におけるローカル時刻で、
     SELF と同じ UTC 時刻を表すようになります: `ASTZ =
     DT.astimezone(TZ)' とした後、 `ASTZ - ASTZ.utcoffset()' は通常 `DT
     - DT.utcoffset()' と同じ日付および時刻 データメンバを持ちます。
     `tzinfo' クラスに関する議論では、夏時間 (Daylight Saving time)
     の遷移境界では上の等価性が成り立たないことを説明しています (TZ
     が標準時と夏時間の両方をモデル化している場合のみの問題です)。

     単にタイムゾーンオブジェクト TZ を `datetime' オブジェクト DT
     に追加したいだけで、日付や時刻データメンバへの調整
     を行わないのなら、`DT.replace(tzinfo=TZ)' を使って ください。 単に
     aware な `datetime' オブジェクト DT からタイムゾーン
     オブジェクトを除去したいだけで、日付や時刻データメンバの変換を
     行わないのなら、`DT.replace(tzinfo=None)' を使ってください。

     デフォルトの `tzinfo.fromutc()' メソッドを `tzinfo'
     のサブクラスで上書きして、`astimezone()' が返す結果に
     影響を及ぼすことができます。エラーの場合を無視すると、
     `astimezone()' は以下のように動作します:

            def astimezone(self, tz):
                if self.tzinfo is tz:
                    return self
                # Convert self to UTC, and attach the new time zone object.
                utc = (self - self.utcoffset()).replace(tzinfo=tz)
                # Convert from UTC to tz's local time.
                return tz.fromutc(utc)


`utcoffset()'
     `tzinfo' が `None' の場合、`None' を返し、 そうでない場合には
     `SELF.tzinfo.utcoffset(SELF)' を返します。後者の式が `None' か、1
     日以下の大きさを持つ 経過時間を表す `timedelta'
     オブジェクトのいずれかを返さない 場合には例外を送出します。

`dst()'
     `tzinfo' が `None' の場合、`None' を返し、 そうでない場合には
     `SELF.tzinfo.dst(SELF)' を返します。後者の式が `None' か、1
     日以下の大きさを持つ 経過時間を表す `timedelta'
     オブジェクトのいずれかを返さない 場合には例外を送出します。

`tzname()'
     `tzinfo' が `None' の場合、`None' を返し、 そうでない場合には
     `SELF.tzinfo.tzname(SELF)' を返します。後者の式が `None'
     か文字列オブジェクトのいずれか を返さない場合には例外を送出します。

`timetuple()'
     `time.localtime()' が返す形式の `time.struct_time' を返します。
     `D.timetuple()' は `time.struct_time((D.year, D.month, D.day,
     D.hour, D.minute, D.second, D.weekday(), D.toordinal() -
     date(D.year, 1, 1).toordinal() + 1, dst))' と等価です。
     返されるタプルの `tm_isdst' フラグは `dst()' メソッドに
     従って設定されます:  `tzinfo' が `None' か `dst()' が `None'
     を返す場合、 `tm_isdst' は `-1' に設定されます; そうでない場合、
     `dst()' がゼロでない値を返すと、`tm_isdst' は `1' となります;
     それ以外の場合には `tm_isdst' は`0' に設定 されます。

`utctimetuple()'
     `datetime' インスタンス D が naive の場合、このメソッドは
     `D.timetuple()' と同じであり、`d.dst()' の返す内容に かかわらず
     `tm_isdst' が 0 に強制される点だけが異なります。 DST が UTC
     時刻に影響を及ぼすことは決してありません。

     D が aware の場合、D から `D.utcoffset()' が差し 引かれて UTC
     時刻に正規化され、正規化された時刻の `time.struct_time'
     を返します。`tm_isdst' は 0 に強制されます。 D.year が `MINYEAR'
     や `MAXUEAR' で、UTC への修正の結果
     表現可能な年の境界を越えた場合には、戻り値の `tm_year' メンバは
     `MINYEAR'-1 または `MAXYEAR'+1 になることがあります。

`toordinal()'
     予測的グレゴリ暦における日付序数を返します。
     `self.date().toordinal()' と同じです。

`weekday()'
     月曜日を 0、日曜日を 6 として、曜日を整数で返します。
     `self.date().weekday()' と同じです。 `isoweekday()'
     も参照してください。

`isoweekday()'
     月曜日を 1、日曜日を 7 として、曜日を整数で返します。
     `self.date().isoweekday()' と等価です。 `weekday()'、
     `isocalendar()' も参照してください。

`isocalendar()'
     3 要素のタプル (ISO 年、ISO 週番号、ISO 曜日) を返します。
     `self.date().isocalendar()' と等価です。

`isoformat(sep='T')'
     日付と時刻を ISO 8601 形式、すなわち YYYY-MM-DDTHH:MM:SS.mmmmmm
     か、 `microsecond' が 0 の場合には YYYY-MM-DDTHH:MM:SS
     で表した文字列を返します。 `utcoffset()' が `None' を返さない場合、
     UTC からのオフセットを時間と分を表した (符号付きの) 6 文字からなる
     文字列が追加されます: すなわち、 YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM
     となるか、 `microsecond' が ゼロの場合には
     YYYY-MM-DDTHH:MM:SS+HH:MM となります。 オプションの引数 SEP
     (デフォルトでは `'T'' です) は 1
     文字のセパレータで、結果の文字列の日付と時刻の間に置かれます。
     例えば、

          >>> from datetime import tzinfo, timedelta, datetime
          >>> class TZ(tzinfo):
          ...     def utcoffset(self, dt): return timedelta(minutes=-399)
          ...
          >>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
          '2002-12-25 00:00:00-06:39'

     となります。

`__str__()'
     `datetime' オブジェクト D において、 `str(D)' は `D.isoformat('
     ')' と等価です。

`ctime()'
     日付を表す文字列を、例えば `datetime(2002, 12, 4, 20, 30,
     40).ctime() == 'Wed Dec  4 20:30:40 2002'' のようにして返します。
     ネイティブの C 関数 `ctime()' (`time.ctime()'
     はこの関数を呼び出しますが、 `datetime.ctime()' は呼び出しません)
     が C 標準に準拠 しているプラットフォームでは、 `D.ctime()' は
     `time.ctime(time.mktime(d.timetuple()))' と等価です。

`strftime(format)'
     明示的な書式化文字列で制御された、日付を表現する文字列を返します。
     `strftime()' のふるまいについてのセクションを参照して ください。


File: python-lib-jp.info,  Node: time オブジェクト,  Next: tzinfo オブジェクト,  Prev: datetime オブジェクト,  Up: datetime

`time' オブジェクト
-------------------

`time' オブジェクトは (ローカルの) 日中時刻を表現します。
この時刻表現は特定の日の影響を受けず、`tzinfo' オブジェクト
を介した修正の対象となります。

`time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None)'
     全ての引数はオプションです。TZINFO は `None' または `tzinfo'
     クラスのサブクラスのインスタンス
     にすることができます。残りの引数は整数または長整数で、
     以下のような範囲に入ります:

        * `0 <= HOUR < 24'

        * `0 <= MINUTE < 60'

        * `0 <= SECOND < 60'

        * `0 <= MICROSECOND < 1000000'.

     引数がこれらの範囲外にある場合、 `ValueError' が送出されます。

以下にクラス属性を示します:

`min'
     表現できる最も古い `datetime' で、 `time(0, 0, 0, 0)' です。 The
     earliest representable `time', `time(0, 0, 0, 0)'.

`max'
     表現できる最も新しい `datetime' で、 `time(23, 59, 59, 999999,
     tzinfo=None)' です。

`resolution'
     等しくない `datetime' オブジェクト間の最小の差で、
     `timedelta(microseconds=1)' ですが、`time'
     オブジェクト間の四則演算はサポートされて
     いないので注意してください。

以下に (読み出し専用の) インスタンス属性を示します:

`hour'
     `range(24)' 内の値です。

`minute'
     `range(60)' 内の値です。

`second'
     `range(60)' 内の値です。

`microsecond'
     `range(1000000)' 内の値です。

`tzinfo'
     `time' コンストラクタに TZINFO 引数として
     与えられたオブジェクトになり、何も渡されなかった場合には `None'
     になります。

以下にサポートされている操作を示します:

   * `time' と `time' の比較では、A が時刻として B よりも前を表す場合に
     A は B よりも小さいと見なされます。 被演算子の片方が naive
     でもう一方が aware の場合、 `TypeError'
     が送出されます。両方の被演算子が aware で、 同じ `tzinfo'
     メンバを持つ場合、共通の `tzinfo' メンバは無視され、基本の
     datetime 間の比較が行われます。 両方の被演算子が aware で異なる
     `tzinfo' メンバを持つ 場合、被演算子はまず (`self.utcoffset()'
     で得られる) UTC オフセット で修正されます。
     型混合の比較がデフォルトのオブジェクトアドレス比較となってしまう
     のを抑止するために、`time' オブジェクトが他の型のオブジェクトと
     比較された場合、比較演算子が `==' または `!=' でないかぎり
     `TypeError' が送出されます。 後者の場合、それぞれ `False' または
     `True' を返します。

   * ハッシュ化、辞書のキーとしての利用

   * 効率的な pickle 化

   * ブール演算コンテキストでは、`time' オブジェクトは、
     分に変換し、`utfoffset()' (`None' を返した場合には `0')
     を差し引いて変換した後の結果がゼロでない場合、かつその
     ときに限って真とみなされます。

以下にインスタンスメソッドを示します:

{replace}(hour=, minute=, second=, microsecond=, tzinfo=)
`1(2)'
     キーワード引数で指定したメンバの値を除き、同じ値をもつ `time'
     オブジェクトを返します。 メンバに対する変換を行わずに aware な
     datetime オブジェクトから naive な `time'
     オブジェクトを生成するために、 `tzinfo=None'
     を指定することもできます。

`isoformat()'
     日付と時刻を ISO 8601 形式、すなわち HH:MM:SS.mmmmmm か、
     `microsecond' が 0 の場合には HH:MM:SS で表した文字列を返します。
     `utcoffset()' が `None' を返さない場合、 UTC
     からのオフセットを時間と分を表した (符号付きの) 6 文字からなる
     文字列が追加されます: すなわち、 HH:MM:SS.mmmmmm+HH:MM となるか、
     `microsecond' が 0 の場合には HH:MM:SS+HH:MM となります。

`__str__()'
     `time' オブジェクト T において、 `str(T)' は `T.isoformat()'
     と等価です。

`strftime(format)'
     明示的な書式化文字列で制御された、日付を表現する文字列を返します。
     `strftime()' のふるまいについてのセクションを参照して ください。

`utcoffset()'
     `tzinfo' が `None' の場合、`None' を返し、 そうでない場合には
     `SELF.tzinfo.utcoffset(None)' を返します。後者の式が `None' か、1
     日以下の大きさを持つ 経過時間を表す `timedelta'
     オブジェクトのいずれかを返さない 場合には例外を送出します。

`dst()'
     `tzinfo' が `None' の場合、`None' を返し、 そうでない場合には
     `SELF.tzinfo.dst(None)' を返します。後者の式が `None' か、1
     日以下の大きさを持つ 経過時間を表す `timedelta'
     オブジェクトのいずれかを返さない 場合には例外を送出します。

`tzname()'
     `tzinfo' が `None' の場合、`None' を返し、 そうでない場合には
     `SELF.tzinfo.tzname(None)' を返します。後者の式が `None'
     か文字列オブジェクトのいずれか を返さない場合には例外を送出します。


File: python-lib-jp.info,  Node: tzinfo オブジェクト,  Next: strftime の振る舞い,  Prev: time オブジェクト,  Up: datetime

`tzinfo' オブジェクト
---------------------

`tzinfo' は抽象基底クラスです。つまり、このクラスは直接
インスタンス化して利用しません。具体的なサブクラスを導出し、
(少なくとも) 利用したい `datetime' のメソッドが必要と する `tzinfo'
の標準メソッドを実装してやる必要があります。 `datetime'
モジュールでは、`tzinfo' の具体的な サブクラスは何ら提供していません。

`tzinfo' (の具体的なサブクラス) のインスタンスは `datetime' および
`time' オブジェクトのコンストラクタに 渡すことができます。
後者のオブジェクトでは、データメンバをローカル時刻におけるものとして
見ており、`tzinfo' オブジェクトはローカル時刻の UTC からの
オフセット、タイムゾーンの名前、DST オフセットを、渡された
日付および時刻オブジェクトからの相対で示すためのメソッドを 提供します。

pickle 化についての特殊な要求事項: `tzinfo' のサブクラスは
引数なしで呼び出すことのできる `__init__' メソッドを持たねば
なりません。そうでなければ、pickle 化することはできますがおそらく
unpickle 化することはできないでしょう。これは技術的な側面からの
要求であり、将来緩和されるかもしれません。

`tzinfo' の具体的なサブクラスでは、以下のメソッドを
実装する必要があります。厳密にどのメソッドが必要なのかは、 aware な
`datetime' オブジェクトがこのサブクラスの
インスタンスをどのように使うかに依存します。不確かならば、
単に全てを実装してください。

`utcoffset(self, dt)'
     ローカル時間の UTC からのオフセットを、UTC から東向きを正とした分で
     返します。ローカル時間が UTC
     の西側にある場合、この値は負になります。 このメソッドは UTC
     からのオフセットの総計を返すように意図されている
     ので注意してください; 例えば、 `tzinfo' オブジェクトが
     タイムゾーンと DST 修正の両方を表現する場合、`utcoffset()'
     はそれらの合計を返さなければなりません。UTC オフセットが未知である
     場合、`None' を返してください。そうでない場合には、 返される値は
     -1439 から 1439 の両端を含む値 (1440 = 24*60 ;
     つまり、オフセットの大きさは 1 日より短くなくてはなりません)
     が分で指定された `timedelta' オブジェクトでなければなりません。
     ほとんどの `utcoffset()' 実装は、おそらく以下の二つのうちの一つに
     似たものになるでしょう:

              return CONSTANT                 # fixed-offset class
              return CONSTANT + self.dst(dt)  # daylight-aware class

     `utcoffset()' が `None' を返さない場合、 `dst()' も `None'
     を返してはなりません。

     `utcoffset()' のデフォルトの実装は `NotImplementedError'
     を送出します。

`dst(self, dt)'
     夏時間 (DST) 修正を、UTC から東向きを正とした分で 返します。DST
     情報が未知の場合、`None' が返されます。 DST が有効でない場合には
     `timedelta(0)' を返します。 DST が有効の場合、オフセットは
     `timedelta' オブジェクト で返します (詳細は`utcoffset()'
     を参照してください)。 DST オフセットが利用可能な場合、この値は
     `utcoffset()' が返すUTC
     からのオフセットには既に加算されているため、 DST
     を個別に取得する必要がない限り `dst()' を使って
     問い合わせる必要はないので注意してください。
     例えば、`datetime.timetuple()' は `tzinfo' メンバ の `dst()'
     メソッドを呼んで `tm_isdst' フラグが
     セットされているかどうか判断し、`tzinfo.fromutc()' は `dst()'
     タイムゾーンを移動する際に DST による変更
     があるかどうかを調べます。

     標準および夏時間の両方をモデル化している `tzinfo' サブクラスの
     インスタンス TZ は以下の式:

     `TZ.utcoffset(DT) - TZ.dst(DT)'

     が、`DT.tzinfo==TZ' 全ての `datetime' オブジェクト DT
     について常に同じ結果を返さなければならないという点で、
     一貫性を持っていなければなりません。 正常に実装された `tzinfo'
     のサブクラスでは、この式は タイムゾーンにおける "標準オフセット
     (standard offset)" を表し、
     特定の日や時刻の事情ではなく地理的な位置にのみ依存していなくては
     なりません。`datetime.astimezone()' の実装はこの事実に
     依存していますが、違反を検出することができません;
     正しく実装するのはプログラマの責任です。`tzinfo' の
     サブクラスでこれを保証することができない場合、`tzinfo.fromutc()'
     の実装をオーバライドして、`astimezone()' に関わらず
     正しく動作するようにしてもかまいません。

     ほとんどの `dst()' 実装は、おそらく以下の二つのうちの一つに
     似たものになるでしょう:

              return timedelta(0)   # a fixed-offset class:  doesn't account for DST
          
            or
          
              # Code to set dston and dstoff to the time zone's DST transition
              # times based on the input dt.year, and expressed in standard local
              # time.  Then
          
              if dston <= dt.replace(tzinfo=None) < dstoff:
                  return timedelta(hours=1)
              else:
                  return timedelta(0)

     デフォルトの `dst()' 実装は `NotImplementedError' を送出します。

`tzname(self, dt)'
     `datetime' オブジェクト DT に対応するタイムゾーン名
     を文字列で返します。 `datetime'
     モジュールでは文字列名について何も定義しておらず、
     特に何かを意味するといった要求仕様もまったくありません。
     例えば、"GMT"、"UTC"、 "-500"、 "-5:00"、  "EDT"、 "US/Eastern"、
     "America/New York" は全て有効な応答となります。
     文字列名が未知の場合には `None' を返してください。 `tzinfo'
     のサブクラスでは、 特に、`tzinfo'
     クラスが夏時間について記述している場合のように、 渡された DT
     の特定の値によって異なった名前を返したい
     場合があるため、文字列値ではなくメソッドとなっていることに注意してください。

     デフォルトの `tzname()' 実装は `NotImplementedError' を送出します。

以下のメソッドは `datetime' や `time' オブジェクトにおいて、
同名のメソッドが呼び出された際に応じて呼び出されます。`datetime'
オブジェクトは自身を引数としてメソッドに渡し、`time' オブジェクトは
引数として `None' をメソッドに渡します。従って、`tzinfo' の
サブクラスにおけるメソッドは引数 DT が `None' の場合と、 `datetime'
の場合を受理するように用意しなければなりません。

`None' が渡された場合、最良の応答方法を決めるのはクラス設計者次第
です。例えば、このクラスが `tzinfo' プロトコルと関係をもたない
ということを表明させたければ、`None' が適切です。
標準時のオフセットを見つける他の手段がない場合には、 標準 UTC
オフセットを返すために `utcoffset(None)'
を使うともっと便利かもしれません。

`datetime' オブジェクトが `datetime' メソッド
の応答として返された場合、`dt.tzinfo' は SELF
と同じオブジェクトになります。ユーザが直接 `tzinfo' メソッド
を呼び出さないかぎり、`tzinfo' メソッドは `dt.tzinfo' と SELF
が同じであることに依存します。 その結果 `tzinfo' メソッドは DT
がローカル時間であると
解釈するので、他のタイムゾーンでのオブジェクトの振る舞いについて
心配する必要がありません。

`fromutc(self, dt)'
     デフォルトの `datetime.astimezone()' 実装で呼び出されます。
     `datetime.astimezone()' から呼ばれた場合、`DT.tzinfo' は SELF
     であり、 DT の日付および時刻データメンバは UTC
     時刻を表しているものとして見えます。`fromutc()' の目的は、SELF
     のローカル時刻に等しい `datetime' オブジェクト
     を返すことにより日付と時刻データメンバを修正することにあります。

     ほとんどの `tzinfo' サブクラスではデフォルトの `fromutc()'
     実装を問題なく継承できます。デフォルトの実装は、固定オフセットのタイムゾーン
     や、標準時と夏時間の両方について記述しているタイムゾーン、そして
     DST
     移行時刻が年によって異なる場合でさえ、扱えるくらい強力なものです。
     デフォルトの `fromutc()' 実装が全ての場合に対して正しく
     扱うことができないような例は、標準時の (UTCからの) オフセットが
     引数として渡された特定の日や時刻に依存するもので、これは政治的な理由に
     よって起きることがあります。 デフォルトの `astimezone()' や
     `fromutc()' の実装は、
     結果が標準時オフセットの変化にまたがる何時間かの中にある場合、
     期待通りの結果を生成しないかもしれません。

     エラーの場合のためのコードを除き、デフォルトの `fromutc()' の
     実装は以下のように動作します:

            def fromutc(self, dt):
                # raise ValueError error if dt.tzinfo is not self
                dtoff = dt.utcoffset()
                dtdst = dt.dst()
                # raise ValueError if dtoff is None or dtdst is None
                delta = dtoff - dtdst  # this is self's standard offset
                if delta:
                    dt += delta   # convert to standard local time
                    dtdst = dt.dst()
                    # raise ValueError if dtdst is None
                if dtdst:
                    return dt + dtdst
                else:
                    return dt


以下に `tzinfo' クラスの使用例を示します:

`tzinfo-examples.py'

標準時間 (standard time) および夏時間 (daylight time) の両方を
記述している `tzinfo' のサブクラスでは、回避不能の難解な問題が年に 2
度あるので注意してください。具体的な例として、東部アメリカ時刻 (US
Eastern, UTC -5000)  を考えます。EDT は 4 月の最初の日曜日 の 1:59
(EST) 以後に開始し、10 月の最後の日曜日の 1:59 (EDT) に 終了します:

         UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM
         EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM
         EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM
     
       start  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM
     
         end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM

DST の開始の際 ("start" の並び) ローカルの壁時計は 1:59 から 3:00
に飛びます。この日は 2:MM の形式をとる時刻は実際には無意味と
なります。従って、`astimezone(Eastern)' は DST が開始する 日には
`hour==2' となる結果を返すことはありません。 `astimezone()'
がこのことを保証するようにするには、 `tzinfo.dst()' メソッドは
"失われた時間" (東部時刻における 2:MM)
が夏時間に存在することを考えなければなりません。

DST が終了する際 ("end" の並び) では、問題はさらに悪化します: 1
時間の間、ローカルの壁時計ではっきりと時刻をいえなくなります:
それは夏時間の最後の 1 時間です。東部時刻では、その日の UTC での 5:MM
に夏時間は終了します。ローカルの壁時計は 1:59 (夏時間) から 1:00
(標準時) に再び巻き戻されます。ローカルの時刻に おける 1:MM
はあいまいになります。`astimezone()' は二つの UTC
時刻を同じローカルの時刻に対応付けることで
ローカルの時計の振る舞いをまねます。 東部時刻の例では、5:MM および 6:MM
の形式をとる UTC 時刻は 両方とも、東部時刻に変換された際に 1:MM
に対応づけられます。 `astimezone()' がこのことを保証するようにするには、
`tzinfo.dst()' は "繰り返された時間" が標準時に存在する
ことを考慮しなければなりません。このことは、例えばタイムゾーンの標準の
ローカルな時刻に DST への切り替え時刻を表現することで簡単に設定する
ことができます。

このようなあいまいさを許容できないアプリケーションは、 ハイブリッドな
`tzinfo' サブクラスを使って問題を回避しなければ なりません; UTC
や、他のオフセットが固定された `tzinfo' の サブクラス (EST (-5
時間の固定オフセット) のみを表すクラスや、 EDT (-4
時間の固定オフセット) のみを表すクラス) を使う限り、あいまいさは
発生しません。

