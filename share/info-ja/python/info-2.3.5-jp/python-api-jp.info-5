This is python-api-jp.info, produced by makeinfo version 4.5 from
python-api-jp.texi.

12 October 2005


File: python-api-jp.info,  Node: List Objects,  Prev: タプルオブジェクト tuple object,  Up: 配列オブジェクト sequence object

List Objects
------------

`PyListObject'
     この `PyObject' のサブタイプは Python のリストオブジェクトを
     表現します。

`PyTypeObject PyList_Type'
     この `PyTypeObject' のインスタンスは Python のタプル型を
     表現します。これは Python レイヤにおける`types.ListType' と
     同じオブジェクトです。

`int PyList_Check(PyObject *p)'
     P がリストオブジェクトか、リスト型のサブタイプのインスタンス
     である場合に真を返します。 _Changed in Python version 2.2_

`int PyList_CheckExact(PyObject *p)'
     P がリストオブジェクトで、かつリスト型のサブタイプのインスタンス
     でない場合に真を返します。 _Added in Python version 2.2_

`PyObject* PyList_New(int len)'
     サイズが LEN 新たなリストオブジェクトを返します。 失敗すると
     `NULL' を返します。

`int PyList_Size(PyObject *list)'
     リストオブジェクトLIST の長さを返します;
     リストオブジェクトにおける `len(LIST)' と同じです。

`int PyList_GET_SIZE(PyObject *list)'
     マクロ形式でできた `PyList_Size()' で、エラーチェックを しません。

`PyObject* PyList_GetItem(PyObject *list, int index)'
     P の指すリストオブジェクト内の、位置 POS にあるオブジェクト
     を返します。 POS が範囲を超えている場合、 `NULL' を返して
     `IndexError' 例外をセットします。

`PyObject* PyList_GET_ITEM(PyObject *list, int i)'
     マクロ形式でできた `PyList_GetItem()' で、エラーチェックを
     しません。

`int PyList_SetItem(PyObject *list, int index, PyObject *item)'
     リストオブジェクト内の位置 INDEX に、オブジェクト ITEM
     を挿入します。成功した場合には`0' を返し、失敗すると `-1'
     を返します。 _Note:_ この関数は ITEM への参照を "盗み取り"
     ます。また、
     変更先のインデクスにすでに別の要素が入っている場合、その
     要素に対する参照を放棄します。

`void PyList_SET_ITEM(PyObject *list, int i, PyObject *o)'
     `PyList_SetItem()' をマクロによる実装で、エラーチェック
     を行いません。この関数は、新たなリストのまだ要素を入れたことのない
     位置に要素を入れるときにのみ使います。 _Note:_ この関数は ITEM
     への参照を "盗み取り" ます。また、 `PyList_SetItem()'
     と違って、要素の置き換えが生じても
     置き換えられるオブジェクトへの参照を放棄 _しません_; その結果、
     LIST 中の位置 I で参照されていたオブジェクト
     がメモリリークを引き起こします。

`int PyList_Insert(PyObject *list, int index, PyObject *item)'
     要素 ITEM をインデクス INDEX の前に挿入します。 成功すると `0'
     を返します。失敗すると `-1' を返し、 例外を送出します。
     `LIST.insert(INDEX, ITEM)' に類似した 機能です。

`int PyList_Append(PyObject *list, PyObject *item)'
     オブジェクト ITEM を LIST の末尾に追加します。 成功すると `0'
     を返します; 失敗すると `-1' を返し、
     例外をセットします。`LIST.append(ITEM)' に類似した機能です。

`PyObject* PyList_GetSlice(PyObject *list, int low, int high)'
     LIST 内の、LOW から HIGH の _間の_ オブジェクト
     からなるリストを返します。失敗すると `NULL' を返し、
     例外をセットします。 `LIST[LOW:HIGH]' に類似した機能です。

`int PyList_SetSlice(PyObject *list, int low, int high, PyObject *itemlist)'
     LIST 内の、LOW から HIGH の間のオブジェクトを、 ITEMLIST
     の内容にします。 `LIST[LOW:HIGH] = ITEMLIST'
     と類似の機能です。ITEMLIST は `NULL' でもよく、空リストの 代入
     (指定スライスの削除) になります。 成功した場合には `0'
     を、失敗した場合には `-1' を返します。

`int PyList_Sort(PyObject *list)'
     LIST の内容をインプレースでソートします。成功した場合には `0'
     を、失敗した場合には `-1' を返します。 success, `-1' on failure.
     `LIST.sort()' と同じです。

`int PyList_Reverse(PyObject *list)'
     LIST の要素をインプレースで反転します。成功した場合には `0'
     を、失敗した場合には `-1' を返します。 `LIST.reverse()'
     と同じです。

`PyObject* PyList_AsTuple(PyObject *list)'
     LIST の内容が入った新たなタプルオブジェクトを返します;
     `tuple(LIST)'.   と同じです。


File: python-api-jp.info,  Node: マップ型オブジェクト mapping object,  Next: その他のオブジェクト,  Prev: 配列オブジェクト sequence object,  Up: 具象オブジェクト concrete object レイヤ

マップ型オブジェクト (mapping object)
=====================================

* Menu:

* 辞書オブジェクト dictionary object::


File: python-api-jp.info,  Node: 辞書オブジェクト dictionary object,  Prev: マップ型オブジェクト mapping object,  Up: マップ型オブジェクト mapping object

辞書オブジェクト (dictionary object)
------------------------------------

`PyDictObject'
     この `PyObject' のサブタイプは Python の辞書オブジェクト
     を表現します。

`PyTypeObject PyDict_Type'
     この `PyTypeObject' のインスタンスは Python の辞書を表現します。
     このオブジェクトは、Python プログラムには `types.DictType' および
     `types.DictionaryType' として公開されています。

`int PyDict_Check(PyObject *p)'
     P が辞書型オブジェクトか、辞書型のサブタイプのインスタンス
     である場合に真を返します。 _Changed in Python version 2.2_

`PyObject* PyDict_New()'
     新たな空の辞書を返します。失敗すると `NULL' を返します。

`PyObject* PyDictProxy_New(PyObject *dict)'
     ある辞書型オブジェクトに対して、読み出し専用に制限されたプロキシ
     オブジェクト (proxy object) を返します。通常、この関数は
     動的でないクラス型 (non-dynamic class type) のクラス辞書を
     変更させないためにプロキシを作成するために使われます。 _Added in
     Python version 2.2_

`void PyDict_Clear(PyObject *p)'
     現在辞書に入っている全てのキーと値のペアを除去して空にします。

`PyObject* PyDict_Copy(PyObject *p)'
     P と同じキーと値のペアが入った新たな辞書を返します。 _Added in
     Python version 1.6_

`int PyDict_SetItem(PyObject *p, PyObject *key, PyObject *val)'
     辞書 P に、 KEY をキーとして値 VALUE を 挿入します。 KEY
     はハッシュ可能でなければなりません; ハッシュ可能でない場合、
     `TypeError' を送出します。 成功した場合には `0'
     を、失敗した場合には `-1' を返します。

`int PyDict_SetItemString(PyObject *p, char *key, PyObject *val)'
     辞書 P に、 KEY をキーとして値 VALUE を 挿入します。 KEY は
     `char*' 型でなければなりません。
     キーオブジェクトは`PyString_FromString(KEY)' で生成 されます。
     成功した場合には `0' を、失敗した場合には `-1' を返します。

`int PyDict_DelItem(PyObject *p, PyObject *key)'
     辞書 P から KEY をキーとするエントリを除去します。 KEY
     はハッシュ可能でなければなりません; ハッシュ可能でない場合、
     `TypeError' を送出します。 成功した場合には `0'
     を、失敗した場合には `-1' を返します。


`int PyDict_DelItemString(PyObject *p, char *key)'
     辞書 P から文字列 KEY をキーとするエントリを除去します。
     成功した場合には `0' を、失敗した場合には `-1' を返します。

`PyObject* PyDict_GetItem(PyObject *p, PyObject *key)'
     辞書P 内で KEY をキーとするオブジェクトを返します。 キー KEY
     が存在しない場合には `NULL' を返しますが、例外を セット
     _しません_。

`PyObject* PyDict_GetItemString(PyObject *p, char *key)'
     `PyDict_GetItem()' と同じですが、KEY は `PyObject*' ではなく
     `char*' で指定します。

`PyObject* PyDict_Items(PyObject *p)'
     辞書オブジェクトのメソッド `item()' のように、
     辞書内の全ての要素対が入った `PyListObject' を返します。
     (`items()' については  を 参照してください。)

`PyObject* PyDict_Keys(PyObject *p)'
     辞書オブジェクトのメソッド `keys()' のように、
     辞書内の全てのキーが入った `PyListObject' を返します。 (`keys()'
     については  を 参照してください。)

`PyObject* PyDict_Values(PyObject *p)'
     辞書オブジェクトのメソッド `values()' のように、
     辞書内の全ての値が入った `PyListObject' を返します。 (`values()'
     については  を 参照してください。)

`int PyDict_Size(PyObject *p)'
     辞書内の要素の数を返します。辞書に対して `len(P)' を
     実行するのと同じです。

`int PyDict_Next(PyObject *p, int *ppos, PyObject **pkey, PyObject **pvalue)'
     辞書 P 内の全てのキー/値のペアにわたる反復処理を行います。 PPOS
     が参照している `int' 型は、この関数で反復処理
     を開始する際に、最初に関数を呼び出すよりも前に `0' に
     初期化しておかなければなりません; この関数は辞書内の各ペアを
     取り上げるごとに真を返し、全てのペアを取り上げたことが分かると
     偽を返します。パラメタ PKEY および PVALUE には、
     それぞれ辞書の各々のキーと値を指すポインタか、または `NULL'
     が入ります。この関数から返される参照はすべて借りた参照になります。

     以下に例を示します:

          PyObject *key, *value;
          int pos = 0;
          
          while (PyDict_Next(self->dict, &pos, &key, &value)) {
              /* 取り出した値で何らかの処理を行う... */
              ...
          }

     反復処理中に辞書 P を変更してはなりません。 (Python 2.1 からは)
     辞書を反復処理する際に、キーに対応する値を
     変更しても大丈夫になりましたが、キーの集合を変更しないことが
     前提です。以下に例を示します:

          PyObject *key, *value;
          int pos = 0;
          
          while (PyDict_Next(self->dict, &pos, &key, &value)) {
              int i = PyInt_AS_LONG(value) + 1;
              PyObject *o = PyInt_FromLong(i);
              if (o == NULL)
                  return -1;
              if (PyDict_SetItem(self->dict, key, o) < 0) {
                  Py_DECREF(o);
                  return -1;
              }
              Py_DECREF(o);
          }


`int PyDict_Merge(PyObject *a, PyObject *b, int override)'
     マップ型オブジェクト B の全ての要素にわたって、反復的に
     キー/値のペアを辞書 A に追加します。 B
     は辞書か、`PyMapping_Keys()' または `PyObject_GetItem()'
     をサポートする何らかのオブジェクト にできます。 OVERRIDE
     が真ならば、A のキーと一致するキーが B
     にある際に、既存のペアを置き換えます。それ以外の場合は、B
     のキーに一致するキーが A にないときのみ追加を行います。
     成功した場合には `0' を返し、例外が送出された場合には `-1'
     を返します。 _Added in Python version 2.2_

`int PyDict_Update(PyObject *a, PyObject *b)'
     C で表せば `PyDict_Merge(A, B, 1)' と同じ、 Python
     で表せば`A.update(B)' と同じです。 成功した場合には `0'
     を返し、例外が送出された場合には `-1' を返します。 _Added in
     Python version 2.2_

`int PyDict_MergeFromSeq2(PyObject *a, PyObject *seq2, int override)'
     SEQ2 内のキー/値ペアを使って、辞書A の内容を更新したり
     統合したりします。SEQ2 は、キー/値のペアとみなせる長さ 2 の
     反復可能オブジェクト(iterable object)
     を生成する反復可能オブジェクトで
     なければなりません。重複するキーが存在する場合、OVERRIDE が
     真ならば先に出現したキーを使い、そうでない場合は後に出現したキーを
     使います。 成功した場合には `0' を返し、例外が送出された場合には
     `-1' を返します。

     (戻り値以外は) 等価な Python コードを書くと、以下のようになります:

          def PyDict_MergeFromSeq2(a, seq2, override):
              for key, value in seq2:
                  if override or key not in a:
                      a[key] = value

     _Added in Python version 2.2_


File: python-api-jp.info,  Node: その他のオブジェクト,  Prev: マップ型オブジェクト mapping object,  Up: 具象オブジェクト concrete object レイヤ

その他のオブジェクト
====================

* Menu:

* ファイルオブジェクト file object::
* インスタンスオブジェクト instance object::
* メソッドオブジェクト method object::
* モジュールオブジェクト module object::
* イテレータオブジェクト iterator object::
* デスクリプタオブジェクト descriptor object::
* スライスオブジェクト slice object::
* 弱参照オブジェクト weak reference object::
* Cオブジェクト CObject::
* セルオブジェクト cell object::


File: python-api-jp.info,  Node: ファイルオブジェクト file object,  Next: インスタンスオブジェクト instance object,  Prev: その他のオブジェクト,  Up: その他のオブジェクト

ファイルオブジェクト (file object)
----------------------------------

Python の組み込みファイルオブジェクトは、全て標準 C ライブラリの
`FILE*' サポートの上に実装されています。以下の詳細説明は
一実装に関するもので、将来の Python のリリースで変更されるかも
しれません。

`PyFileObject'
     この `PyObject' のサブタイプは Python のファイル型オブジェクトを
     表現します。

`PyTypeObject PyFile_Type'
     この `PyTypeObject' のインスタンスは Python のファイル型を
     表現します。このオブジェクトは `types.FileType' として Python
     プログラムで公開されています。

`int PyFile_Check(PyObject *p)'
     引数が `PyFileObject' か `PyFileObject'
     のサブタイプのときに真を返します。 _Changed in Python version 2.2_

`int PyFile_CheckExact(PyObject *p)'
     引数が `PyFileObject' 型で、かつ `PyFileObject'
     型のサブタイプでないときに真を返します。 _Added in Python version
     2.2_

`PyObject* PyFile_FromString(char *filename, char *mode)'
     成功すると、FILENAME に指定した名前のファイルを MODE に
     指定したファイルモードで開いて得た新たなファイルオブジェクトを返します。
     MODE のセマンティクスは標準 C ルーチン `fopen()'
     と同じです。失敗すると`NULL'を返します。

`PyObject* PyFile_FromFile(FILE *fp, char *name, char *mode, int (*close)(FILE*))'
     すでに開かれている標準 C ファイルポインタ FP から 新たな
     `PyFileObject' を生成します。この関数で生成した
     ファイルオブジェクトは、閉じる際にCLOSE に指定した関数を
     呼び出します。失敗すると`NULL'を返します。

`FILE* PyFile_AsFile(PyFileObject *p)'
     P に関連付けられたファイルオブジェクトを `FILE*' で返します。

`PyObject* PyFile_GetLine(PyObject *p, int n)'
     `P.readline([N])' と同じで、この関数は オブジェクト P
     の各行を読み出します。 P は ファイルオブジェクトか、`readline()'
     メソッドを持つ 何らかのオブジェクトでかまいません。N が `0'
     の場合、 行の長さに関係なく正確に 1 行だけ読み出します。N が `0'
     より大きければ、N バイト以上のデータは 読み出しません;
     従って、行の一部だけが返される場合があります。
     どちらの場合でも、読み出し後すぐにファイルの終端に到達した場合には
     空文字列を返します。N が `0' より小さければ、長さに 関わらず 1
     行だけを読み出しますが、すぐにファイルの終端に到達した 場合には
     `EOFError' を送出します。

`PyObject* PyFile_Name(PyObject *p)'
     P に指定したファイルの名前を文字列オブジェクトで 返します。

`void PyFile_SetBufSize(PyFileObject *p, int n)'
     `setvbuf()'  があるシステムでのみ
     利用できます。この関数を呼び出してよいのはファイルオブジェクトの
     生成直後のみです。

`int PyFile_Encoding(PyFileObject *p, char *enc)'
     Unicode オブジェクトをファイルに出力するときにのエンコード方式を
     ENC にします。成功すると `1' を、失敗すると `0' を返します。
     _Added in Python version 2.3_

`int PyFile_SoftSpace(PyObject *p, int newflag)'
     この関数はインタプリタの内部的な利用のために存在します。
     この関数はP の `softspace'  属性を NEWFLAG に
     設定し、以前の設定値を返します。この関数を正しく動作させるために、
     P がファイルオブジェクトである必然性はありません; 任意の
     オブジェクトをサポートします (`softspace' 属性が設定
     されているかどうかのみが問題だと思ってください)。
     この関数は全てのエラーを解消し、属性値が存在しない場合や属性値を
     取得する際にエラーが生じると、`0' を以前の値として返します。
     この関数からはエラーを検出できませんが、そもそもそういう必要は
     ありません。

`int PyFile_WriteObject(PyObject *obj, PyFileObject *p, int flags)'
     オブジェクト OBJ をファイルオブジェクト P に書き込みます。 FLAG
     がサポートするフラグは `Py_PRINT_RAW'  だけです; このフラグ
     を指定すると、 オブジェクトに`repr()' ではなく `str()'
     を適用した結果をファイルに書き出します。 成功した場合には `0'
     を返し、失敗すると `-1' を返して 適切な例外をセットします。

`int PyFile_WriteString(const char *s, PyFileObject *p)'
     文字列 S をファイルオブジェクト P に書き出します。
     成功した場合には `0' を返し、失敗すると `-1' を返して
     適切な例外をセットします。


File: python-api-jp.info,  Node: インスタンスオブジェクト instance object,  Next: メソッドオブジェクト method object,  Prev: ファイルオブジェクト file object,  Up: その他のオブジェクト

インスタンスオブジェクト (instance object)
------------------------------------------

インスタンスオブジェクト固有の関数はきわめてわずかです。

`PyTypeObject PyInstance_Type'
     クラスインスタンスの型オブジェクトです。

`int PyInstance_Check(PyObject *obj)'
     OBJ がインスタンスの場合に真を返します。

`PyObject* PyInstance_New(PyObject *class, PyObject *arg, PyObject *kw)'
     特定クラスの新たなインスタンスを生成します。パラメタ ARG および KW
     はそれぞれオブジェクトのコンストラクタに渡す
     実引数およびキーワードパラメタとして使われます。

`PyObject* PyInstance_NewRaw(PyObject *class, PyObject *dict)'
     特定クラスの新たなインスタンスを生成します。CLASS は新たに
     作成するオブジェクトのクラスです。DICT パラメタは オブジェクトの
     `__dict__' に使われます; DICT が
     `NULL'なら、インスタンス用に新たな辞書が作成されます。


File: python-api-jp.info,  Node: メソッドオブジェクト method object,  Next: モジュールオブジェクト module object,  Prev: インスタンスオブジェクト instance object,  Up: その他のオブジェクト

メソッドオブジェクト (method object)
------------------------------------

メソッドオブジェクトを操作する上で便利な関数がいくつかあります。

`PyTypeObject PyMethod_Type'
     この `PyTypeObject' のインスタンスは Python のメソッドオブジェクト
     型を表現します。このオブジェクトは、`types.MethodType' として
     Python プログラムに公開されています。

`int PyMethod_Check(PyObject *o)'
     O がメソッドオブジェクト (`PyMethod_Type' 型である)
     場合に真を返します。パラメタは `NULL'にできません。

`PyObject* PyMethod_New(PyObject *func. PyObject *self, PyObject *class)'
     任意の呼び出し可能オブジェクトFUNC を使った新たなメソッド
     オブジェクトを返します; 関数 FUNC は、メソッドが呼び出された
     時に呼び出されるオブジェクトです。このメソッドをインスタンスに
     束縛 (bind) したい場合、 SELF をインスタンス自体にして、 CLASS
     をSELF のクラスにしなければなりません。 それ以外の場合は SELF を
     `NULL' に、 CLASS を
     非束縛メソッドを提供しているクラスにしなければなりません。

`PyObject* PyMethod_Class(PyObject *meth)'
     メソッドオブジェクト METH を生成したクラスオブジェクトを返します;
     インスタンスがメソッドオブジェクトを生成した場合、戻り値は
     インスタンスのクラスになります。

`PyObject* PyMethod_GET_CLASS(PyObject *meth)'
     `PyMethod_Class()' をマクロで実装したバージョンで、
     エラーチェックを行いません。

`PyObject* PyMethod_Function(PyObject *meth)'
     METH に関連付けられている関数オブジェクトを返します。

`PyObject* PyMethod_GET_FUNCTION(PyObject *meth)'
     `PyMethod_Function()' のマクロ版で、エラーチェックを 行いません。

`PyObject* PyMethod_Self(PyObject *meth)'
     METH が束縛メソッドの場合には、メソッドに関連付けられている
     インスタンスを返します。それ以外の場合には `NULL'を返します。

`PyObject* PyMethod_GET_SELF(PyObject *meth)'
     `PyMethod_Self()' のマクロ版で、エラーチェックを 行いません。


File: python-api-jp.info,  Node: モジュールオブジェクト module object,  Next: イテレータオブジェクト iterator object,  Prev: メソッドオブジェクト method object,  Up: その他のオブジェクト

モジュールオブジェクト (module object)
--------------------------------------

モジュールオブジェクト固有の関数は数個しかありません。

`PyTypeObject PyModule_Type'
     この `PyTypeObject' のインスタンスは Python
     のモジュールオブジェクト 型を表現します。
     このオブジェクトは、Python プログラムには `types.ModuleType'
     として公開されています。

`int PyModule_Check(PyObject *p)'
     O がモジュールオブジェクトかモジュールオブジェクトのサブタイプで
     あるときに真を返します。 _Changed in Python version 2.2_

`int PyModule_CheckExact(PyObject *p)'
     O がモジュールオブジェクトで、かつモジュールオブジェクトの
     サブタイプでないときに真を返します。 `PyModule_Type'.  _Added in
     Python version 2.2_

`PyObject* PyModule_New(char *name)'
     `__name__' 属性が NAME に設定された新たなモジュール
     オブジェクトを返します。モジュールの `__doc__' および `__name__'
     属性だけに値が入っています; `__file__'
     属性に値を入れるのは呼び出し側の責任です。

`PyObject* PyModule_GetDict(PyObject *module)'
     MODULE の名前空間を実現する辞書オブジェクトを返します;
     このオブジェクトはモジュールオブジェクトの `__dict__'
     と同じです。この関数が失敗することはありません。
     拡張モジュールでは、この関数で得たモジュールの`__dict__'
     を直接いじるより、他の`PyModule_*()' および `PyObject_*()'
     関数を使うよう勧めます。

`char* PyModule_GetName(PyObject *module)'
     MODULE の `__name__' の値を返します。
     モジュールがこの属性を提供していない場合や文字列型でない場合、
     `SystemError' を送出して `NULL' を返します。

`char* PyModule_GetFilename(PyObject *module)'
     MODULE をロードするために使ったファイルの名前を、MODULE の
     `__file__' 属性から調べて返します。`__file__'
     が定義されていない場合や文字列型でない場合、 `SystemError'
     を送出して `NULL' を返します。

`int PyModule_AddObject(PyObject *module, char *name, PyObject *value)'
     MODULE にオブジェクトをNAME として追加します。
     この関数はモジュールの初期化関数から利用される便宜関数です。
     エラーのときには `-1' を、成功したときには `0' を 返します。
     _Added in Python version 2.0_

`int PyModule_AddIntConstant(PyObject *module, char *name, long value)'
     MODULE に整数定数をNAME として追加します。
     この便宜関数はモジュールの初期化関数から利用されています。
     エラーのときには `-1' を、成功したときには `0' を 返します。
     _Added in Python version 2.0_

`int PyModule_AddStringConstant(PyObject *module, char *name, char *value)'
     MODULE に文字列定数をNAME として追加します。
     この便宜関数はモジュールの初期化関数から利用されています。 文字列
     VALUE は null 終端されていなければなりません。 エラーのときには
     `-1' を、成功したときには `0' を 返します。 _Added in Python
     version 2.0_


File: python-api-jp.info,  Node: イテレータオブジェクト iterator object,  Next: デスクリプタオブジェクト descriptor object,  Prev: モジュールオブジェクト module object,  Up: その他のオブジェクト

イテレータオブジェクト (iterator object)
----------------------------------------

Python では二種類のイテレータオブジェクトを提供しています。
一つ目は配列イテレータで、`__getitem__()' メソッドを
サポートする任意の配列を取り扱います。二つ目は呼び出し可能
オブジェクトとセンチネル値 (sentinel value) を扱い、
配列内の要素ごとに呼び出し可能オブジェクトを呼び出して、
センチネル値が返されたときに反復処理を終了します。

`PyTypeObject PySeqIter_Type'
     `PySeqIter_New()' や、組み込み配列型に対して 1
     引数形式の組み込み関数`iter()' を呼び出したときに
     返される、イテレータオブジェクトの型オブジェクトです。 _Added in
     Python version 2.2_

`int PySeqIter_Check(op)'
     `PySeqIter_Type' の型が OP のときに真を返します。 _Added in Python
     version 2.2_

`PyObject* PySeqIter_New(PyObject *seq)'
     一般的な配列オブジェクト SEQ を扱うイテレータを返します。
     反復処理は、配列が添字指定操作の際に `IndexError' を
     返したときに終了します。 _Added in Python version 2.2_

`PyTypeObject PyCallIter_Type'
     `PyCallIter_New()' や、組み込み関数 `iter()' の 2
     引数形式が返すイテレータオブジェクトの型オブジェクトです。
     `iter()' built-in function.  _Added in Python version 2.2_

`int PyCallIter_Check(op)'
     `PyCallIter_Type' の型が OP のときに真を返します。 _Added in
     Python version 2.2_

`PyObject* PyCallIter_New(PyObject *callable, PyObject *sentinel)'
     新たなイテレータを返します。最初のパラメタ CALLABLE は
     引数なしで呼び出せる Python の呼び出し可能オブジェクトなら
     なんでもかまいません; CALLABLEは、呼び出されるたびに
     次の反復処理対象オブジェクトを返さなければなりません。
     生成されたイテレータは、 CALLABLEが SENTINEL に等しい
     値を返すと反復処理を終了します。 _Added in Python version 2.2_


File: python-api-jp.info,  Node: デスクリプタオブジェクト descriptor object,  Next: スライスオブジェクト slice object,  Prev: イテレータオブジェクト iterator object,  Up: その他のオブジェクト

デスクリプタオブジェクト (descriptor object)
--------------------------------------------

"デスクリプタ (descriptor)" は、あるオブジェクトのいくつかの属性
について記述したオブジェクトです。デスクリプタオブジェクトは
型オブジェクトの辞書内にあります。

`PyTypeObject PyProperty_Type'
     組み込みデスクリプタ型の型オブジェクトです。 _Added in Python
     version 2.2_

`PyObject* PyDescr_NewGetSet(PyTypeObject *type, PyGetSetDef *getset)'
     _Added in Python version 2.2_

`PyObject* PyDescr_NewMember(PyTypeObject *type, PyMemberDef *meth)'
     _Added in Python version 2.2_

`PyObject* PyDescr_NewMethod(PyTypeObject *type, PyMethodDef *meth)'
     _Added in Python version 2.2_

`PyObject* PyDescr_NewWrapper(PyTypeObject *type, struct wrapperbase *wrapper, void *wrapped)'
     _Added in Python version 2.2_

`PyObject* PyDescr_NewClassMethod(PyTypeObject *type, PyMethodDef *method)'
     _Added in Python version 2.3_

`int PyDescr_IsData(PyObject *descr)'
     デスクリプタオブジェクト DESCR がデータ属性のデスクリプタの
     場合には真を、メソッドデスクリプタの場合には偽を返します。 DESCR
     はデスクリプタオブジェクトでなければなりません;
     エラーチェックは行いません。 _Added in Python version 2.2_

`PyObject* PyWrapper_New(PyObject *, PyObject *)'
     _Added in Python version 2.2_


File: python-api-jp.info,  Node: スライスオブジェクト slice object,  Next: 弱参照オブジェクト weak reference object,  Prev: デスクリプタオブジェクト descriptor object,  Up: その他のオブジェクト

スライスオブジェクト (slice object)
-----------------------------------

`PyTypeObject PySlice_Type'
     スライスオブジェクトの型オブジェクトです。 `types.SliceType'
     と同じです。

`int PySlice_Check(PyObject *ob)'
     OB がスライスオブジェクトの場合に真を返します; OB は
     `NULL'であってはなりません。

`PyObject* PySlice_New(PyObject *start, PyObject *stop, PyObject *step)'
     指定した値から新たなスライスオブジェクトを返します。パラメタ
     START, STOP, および STEP はスライスオブジェクトに
     おける同名の属性として用いられます。これらの値はいずれも
     `NULL'にでき、対応する値には `None' が使われます。新たな
     オブジェクトをアロケーションできない場合には `NULL' を返します。

`int PySlice_GetIndices(PySliceObject *slice, int length, int *start, int *stop, int *step)'
     スライスオブジェクト SLICE における START, STOP, および STEP
     のインデクス値を取得します。このとき配列の 長さを LENGTH
     と仮定します。LENGTH よりも大きな
     インデクスになるとエラーとして扱います。

     成功のときには `0' を、エラーのときには例外をセットせずに `-1'
     を返します (ただし、指定インデクスのいずれか一つが `None'
     ではなく、かつ整数に変換できなかった場合を 除きます。この場合、
     `-1' を返して例外をセットします)。

     おそらくこの関数を使う気にはならないでしょう。バージョン 2.3 以前の
     Python でスライスオブジェクトを使いたいのなら、
     `PySlice_GetIndicesEx' のソースを適切に名前変更して
     自分の拡張モジュールのソースコード内に組み込むとよいでしょう。

`int PySlice_GetIndicesEx(PySliceObject *slice, int length, int *start, int *stop, int *step,  int *slicelength)'
     `PySlice_GetIndices' の置き換えとして使える関数です。

     スライスオブジェクト SLICE における START, STOP, および STEP
     のインデクス値を取得します。このとき配列の 長さを LENGTH
     と仮定します。スライスの長さを SLICELENGTH
     に記憶します。境界をはみだしたインデクスは、通常のスライスを扱うのと
     同じ一貫したやり方でクリップされます。

     成功のときには `0' を、エラーのときには例外をセットして `-1'
     を返します。

     _Added in Python version 2.3_


File: python-api-jp.info,  Node: 弱参照オブジェクト weak reference object,  Next: Cオブジェクト CObject,  Prev: スライスオブジェクト slice object,  Up: その他のオブジェクト

弱参照オブジェクト (weak reference object)
------------------------------------------

Python は _弱参照_ を第一級オブジェクト (first-class object)
としてサポートします。弱参照を直接実装する二種類の固有のオブジェクト
型があります。第一は単純な参照オブジェクトで、第二はオリジナルの
オブジェクトに対して可能な限りプロキシとして振舞うオブジェクトです。

`int PyWeakref_Check(ob)'
     OB が参照オブジェクトかプロキシオブジェクトの場合に真を返します。
     _Added in Python version 2.2_

`int PyWeakref_CheckRef(ob)'
     OB が参照オブジェクトの場合に真を返します。 _Added in Python
     version 2.2_

`int PyWeakref_CheckProxy(ob)'
     OB がプロキシオブジェクトの場合に真を返します。 _Added in Python
     version 2.2_

`PyObject* PyWeakref_NewRef(PyObject *ob, PyObject *callback)'
     OB に対する弱参照オブジェクトを返します。この関数は常に
     新たな参照を返しますが、必ずしも新たなオブジェクトを作る保証は
     ありません; 既存の参照オブジェクトが返されることもあります。
     第二のパラメタ CALLBACK は呼び出し可能オブジェクトで、 OB
     がガーベジコレクションされた際に通知を受け取ります; CALLBACK
     は弱参照オブジェクト自体を単一のパラメタとして
     受け取ります。CALLBACK は `None' や `NULL'にしても かまいません。
     OB が弱参照できないオブジェクトの場合や、 CALLBACK
     が呼び出し可能オブジェクト、`None'、`NULL'
     のいずれでもない場合は、`NULL' を返して`TypeError' を送出します。
     _Added in Python version 2.2_

`PyObject* PyWeakref_NewProxy(PyObject *ob, PyObject *callback)'
     OB に対する弱参照プロキシオブジェクトを返します。この関数は常に
     新たな参照を返しますが、必ずしも新たなオブジェクトを作る保証は
     ありません; 既存の参照オブジェクトが返されることもあります。
     第二のパラメタ CALLBACK は呼び出し可能オブジェクトで、 OB
     がガーベジコレクションされた際に通知を受け取ります; CALLBACK
     は弱参照オブジェクト自体を単一のパラメタとして
     受け取ります。CALLBACK は `None' や `NULL'にしても かまいません。
     OB が弱参照できないオブジェクトの場合や、 CALLBACK
     が呼び出し可能オブジェクト、`None'、`NULL'
     のいずれでもない場合は、`NULL' を返して`TypeError' を送出します。
     _Added in Python version 2.2_

`PyObject* PyWeakref_GetObject(PyObject *ref)'
     弱参照 REF が参照しているオブジェクトを返します。
     被参照オブジェクトがすでに存続していない場合、 `None' を 返します。
     _Added in Python version 2.2_

`PyObject* PyWeakref_GET_OBJECT(PyObject *ref)'
     `PyWeakref_GetObject()' に似ていますが、マクロで実装
     されていて、エラーチェックを行いません。 _Added in Python version
     2.2_


File: python-api-jp.info,  Node: Cオブジェクト CObject,  Next: セルオブジェクト cell object,  Prev: 弱参照オブジェクト weak reference object,  Up: その他のオブジェクト

Cオブジェクト (CObject)
-----------------------

このオブジェクトの使用法に関する情報は、 _Python
インタプリタの拡張と埋め込み_ 1.12 節、 "Providing a C API for an
Extension Module," を参照してください。

`PyCObject'
     この `PyObject' のサブタイプは不透明型値 (opaque value) を
     表現します。C 拡張モジュールが Python コードから不透明型値を
     (`void*' ポインタで) 他の C コードに渡す必要があるときに 便利です。
     正規の import 機構を使って動的にロードされるモジュール内で定義
     されている C API にアクセスするために、あるモジュール内で定義
     されている C 関数ポインタを別のモジュールでも利用できるように
     するためによく使われます。

`int PyCObject_Check(PyObject *p)'
     引数が `PyCObject' の場合に真を返します。

`PyObject* PyCObject_FromVoidPtr(void* cobj, void (*destr)(void *))'
     `void *'COBJ から `PyCObject' を生成します。 関数 DESTR が
     `NULL'でない場合、オブジェクトを再利用する際に 呼び出します。

`PyObject* PyCObject_FromVoidPtrAndDesc(void* cobj, void* desc, void (*destr)(void *, void *))'
     `void *'COBJ から `PyCObject' を生成します。 関数 DESTR が
     `NULL'でない場合、オブジェクトを再利用する際に 呼び出します。 引数
     DESC を使って、デストラクタ関数に追加のコールバックデータ
     を渡せます。

`void* PyCObject_AsVoidPtr(PyObject* self)'
     `PyCObject' オブジェクト SELF を生成するのに用いた オブジェクト
     `void *' を返します。

`void* PyCObject_GetDesc(PyObject* self)'
     `PyCObject' オブジェクト SELF を生成するのに用いた
     コールバックデータ `void *' を返します。


File: python-api-jp.info,  Node: セルオブジェクト cell object,  Prev: Cオブジェクト CObject,  Up: その他のオブジェクト

セルオブジェクト (cell object)
------------------------------

"セル (cell)" オブジェクトは、複数のスコープから参照される
変数群を実装するために使われます。セルは各変数について作成され、
各々の値を記憶します; この値を参照する各スタックフレームにおける
ローカル変数には、そのスタックフレームの外側で同じ値を参照している
セルに対する参照が入ります。セルで表現された値にアクセスすると、
セルオブジェクト自体の代わりにセル内の値が使われます。この
セルオブジェクトを使った間接参照 (dereference) は、インタプリタに
よって生成されたバイトコード内でサポートされている必要があります;
セルオブジェクトにアクセスした際に、自動的に間接参照は起こり
ません。上記以外の状況では、セルオブジェクトは役に立たないはずです。

`PyCellObject'
     セルオブジェクトに使われる C 構造体です。

`PyTypeObject PyCell_Type'
     セルオブジェクトに対応する型オブジェクトです。

`int PyCell_Check(ob)'
     OB がセルオブジェクトの場合に真を返します; OB は
     `NULL'であってはなりません。

`PyObject* PyCell_New(PyObject *ob)'
     値 OB の入った新たなセルオブジェクトを生成して返します。 引数を
     `NULL'にしてもかまいません。

`PyObject* PyCell_Get(PyObject *cell)'
     CELL の内容を返します。

`PyObject* PyCell_GET(PyObject *cell)'
     CELL の内容を返しますが、CELL が非 `NULL' でかつ
     セルオブジェクトであるかどうかチェックしません。

`int PyCell_Set(PyObject *cell, PyObject *value)'
     セルオブジェクト CELL の内容を VALUE に設定します。
     この関数は現在のセルの全ての内容に対する参照を解放します。 VALUE
     は `NULL'でもかまいません。CELL は 非`NULL' でなければなりません;
     もしCELL がセルオブジェクトでない 場合、 `-1'
     を返します。成功すると `0' を返します。

`void PyCell_SET(PyObject *cell, PyObject *value)'
     セルオブジェクト CELL の値を VALUE に設定します。
     参照カウントに対する変更はなく、安全のためのチェックは何も
     行いません; CELL は非`NULL' でなければならず、かつ
     セルオブジェクトでなければなりません。


File: python-api-jp.info,  Node: 初期化 initialization、終了処理 finalization、スレッド,  Next: メモリ管理,  Prev: 具象オブジェクト concrete object レイヤ,  Up: Top

初期化 (initialization)、終了処理 (finalization)、スレッド
**********************************************************

`void Py_Initialize()'
     Python インタプリタを初期化します。Python の埋め込みを行う
     アプリケーションでは、他のあらゆる Python/C API を使用するよりも
     前にこの関数を呼び出さねばなりません; ただし、
     `Py_SetProgramName()' , `PyEval_InitThreads()' ,
     `PyEval_ReleaseLock()' , および `PyEval_AcquireLock()' は例外です。
     この関数はロード済みモジュールのテーブル (`sys.modules') を初期化
     し、基盤となるモジュール群、 `__builtin__' , `__main__'  および
     `sys'  を生成します。 また、モジュール検索パス

     (`sys.path') も初期化します。 `sys.argv' の設定は行いません;
     設定するには、 `PySys_SetArgv()'  を使ってください。 この関数を
     (`Py_Finalize()'  を 呼ばずに) 再度呼び出しても何も行いません。
     戻り値はありません; 初期化が失敗すれば、それは致命的なエラーです。

`int Py_IsInitialized()'
     Python インタプリタがすでに初期化済みの場合に真 (非ゼロ) を返し、
     そうでない場合には偽 (ゼロ) を返します。`Py_Finalize()'
     を呼び出すと、次に`Py_Initialize()' を呼び出すまで
     この関数は偽を返します。

`void Py_Finalize()'
     `Py_Initialize()' とそれ以後の Python/C API 関数で行った
     全ての初期化処理を取り消し、最後の `Py_Initialize()'
     呼び出し以後に Python インタプリタが生成した全てのサブインタプリタ
     (sub-interpreter, 下記の `Py_NewInterpreter()' を参照) を
     消去します。 理想的な状況では、この関数によって Python
     インタプリタが確保した メモリは全て解放されます。 この関数を
     (`Py_Initialize()' を呼ばずに) 再度呼び出しても 何も行いません。
     戻り値はありません; 終了処理中のエラーは無視されます。

     この関数が提供されている理由はいくつかあります。Python の埋め込みを
     行っているアプリケーションでは、アプリケーションを再起動することなく
     Python を再起動したいことがあります。また、動的ロード可能イブラリ
     (あるいは DLL) から Python インタプリタをロードするアプリケーション
     では、DLL をアンロードする前に Python が確保したメモリを解放したい
     と考えるかもしれません。アプリケーション内で起きているメモリリークを
     追跡する際に、開発者は Python が確保したメモリをアプリケーションの
     終了前に解放させたいと思う場合もあります。

     *バグおよび注意事項:* モジュールやモジュール内のオブジェクト
     はランダムな順番で削除されます; このため、他のオブジェクト
     (関数オブジェクトも含みます) やモジュールに依存するデストラクタ
     (`__del__()' メソッド) が失敗してしまうことがあります。
     動的にロードされるようになっている拡張モジュールが Python によって
     ロードされていた場合、アンロードされません。Python が確保した
     メモリがわずかながら解放されないかもしれません (メモリリークを
     発見したら、どうか報告してください)。オブジェクト間の循環参照に
     捕捉されているメモリは解放されないことがあります。拡張モジュール
     が確保したメモリは解放されないことがあります。拡張モジュールに
     よっては、初期化ルーチンを 2 度以上呼び出すと正しく動作
     しないことがあります; こうした状況は、`Py_Initialize()'
     や`Py_Finalize()' を 2 度以上呼び出すと起こり得ます。

`PyThreadState* Py_NewInterpreter()'
     新しいサブインタプリタ (sub-interpreter) を生成します。
     サブインタプリタとは、(ほぼ完全に) 個別に分割された Python
     コードの実行環境です。特に、新しいサブインタプリタは、 import
     されるモジュール全てについて個別のバージョンを持ち、
     これには基盤となるモジュール `__builtin__' , `__main__'  および
     `sys'  も含まれます。 ロード済みのモジュールからなるテーブル
     (`sys.modules') およびモジュール検索パス (`sys.path')
     もサブインタプリタ
     毎に別個のものになります。新たなサブインタプリタ環境には
     `sys.argv' 変数がありません。また、サブインタプリタは 新たな標準
     I/O ストリーム `sys.stdin', `sys.stdout' および `sys.stderr'
     を持ちます (とはいえ、これらのストリームは 根底にある C
     ライブラリの同じ `FILE' 構造体を参照しています)。

     戻り値は、新たなサブインタプリタが生成したスレッド状態 (thread
     state) オブジェクトのうち、最初のものを指しています。
     このスレッド状態が現在のスレッド状態 (current thread state)
     になります。
     実際のスレッドが生成されるわけではないので注意してください;
     下記のスレッド状態に関する議論を参照してください。
     新たなインタプリタの生成に失敗すると、`NULL' を返します;
     例外状態はセットされませんが、これは例外状態が現在のスレッド状態に
     保存されることになっていて、現在のスレッド状態なるものが
     存在しないことがあるからです。 (他の Python/C API 関数のように、
     この関数を呼び出す前にはグローバルインタプリタロック (global
     interpreter lock) が保持されていなければならず、関数が
     処理を戻した際にも保持されたままになります; しかし、 他の Python/C
     API 関数とは違い、関数から戻ったときの現在のスレッド状態
     が関数に入るときと同じとは限らないので注意してください)。

     拡張モジュールは以下のような形で (サブ) インタプリタ間で共有
     されます: ある特定の拡張モジュールを最初に import すると、
     モジュールを通常通りに初期化し、そのモジュールの辞書の (浅い)
     コピーをしまい込んでおきます。他の (サブ) インタプリタが
     同じ拡張モジュールを import すると、新たなモジュールを初期化し、
     先ほどのコピーの内容で辞書の値を埋めます; 拡張モジュールの `init'
     関数は呼び出されません。この挙動は、 `Py_Finalize()'  および
     `Py_Initialize()'  を呼び出して
     インタプリタを完全に再初期化した後に拡張モジュールを import した
     際の挙動とは異なるので注意してください; 再初期化後に import を
     行うと、拡張モジュールの `initMODULE' は再度 _呼び出され_ ます。

     *バグと注意事項:* サブインタプリタ (とメインインタプリタ)
     は同じプロセスの一部分なので、インタプリタ間の絶縁性は完璧では
     ありません -- 例えば、 `os.close()'
     のような低レベルのファイル操作を使うと、 (偶然なり故意なりに)
     互いのインタプリタ下にある開かれたファイルに
     影響を及ぼせてしまいます。 拡張モジュールを (サブ)
     インタプリタ間で共有する方法のために、
     拡張モジュールによっては正しく動作しないかもしれません;
     拡張モジュールが (静的な) グローバル変数を利用している
     場合や、拡張モジュールが初期化後に自身のモジュール辞書を操作
     する場合には特にそうです。
     一つのサブインタプリタで生成されたオブジェクトは他のサブインタプリタ
     の名前空間への挿入が可能です;
     ユーザ定義関数、メソッド、インスタンス
     およびクラスをサブインタプリタをサブインタプリタ間で共有しないように
     十分注意してください。というのは、これらの共有オブジェクトが
     実行した import 文は間違った (サブ) インタプリタのロード済み
     モジュール辞書に影響を及ぼす場合があるからです (XXX この問題は
     修正が難しいバグで、将来のリリースで解決される予定です)

`void Py_EndInterpreter(PyThreadState *tstate)'
     指定されたスレッド状態 TSTATE で表現される (サブ) インタプリタを
     抹消します。TSTATE は現在のスレッド状態でなければなりません。
     下記のスレッド状態に関する議論を参照してください。関数呼び出しが
     戻ったとき、現在のスレッド状態は `NULL'になっています。
     このインタプリタに関連付けられた全てのスレッド状態は抹消されます。
     (この関数を呼び出す前にはグローバルインタプリタロックを保持して
     おかねばならず、ロックは関数が戻ったときも保持されています。)
     `Py_Finalize()'  は、その時点で
     明示的に抹消されていない全てのサブインタプリタを抹消します。

`void Py_SetProgramName(char *name)'
     この関数を呼び出すなら、最初に `Py_Initialize()'  を呼び出す
     よりも前に呼び出さねばなりません。この関数はインタプリタに
     プログラムの`main()'  関数に 指定した`argv[0]' 引数の値を教えます。
     この引数値は、`Py_GetPath()'  や、
     以下に示すその他の関数が、インタプリタの実行可能形式から Python
     ランタイムライブラリへの相対パスを取得するために使われます。
     デフォルトの値は`'python'' です。引数はゼロ終端された
     キャラクタ文字列で、静的な記憶領域に入っていなければならず、
     その内容はプログラムの実行中に変更してはなりません。 Python
     インタプリタ内のコードで、この記憶領域の内容を変更するものは
     一切ありません。

`char* Py_GetProgramName()'
     `Py_SetProgramName()'  で
     設定されたプログラム名か、デフォルトのプログラム名を返します。
     関数が返す文字列ポインタは静的な記憶領域を返します; 関数の
     呼び出し側はこの値を変更できません。

`char* Py_GetPrefix()'
     プラットフォーム非依存のファイル群がインストールされている場所である
     _prefix_ を返します。この値は `Py_SetProgramName()'
     でセットされたプログラム名や
     いくつかの環境変数をもとに、数々の複雑な規則から導出されます;
     例えば、プログラム名が`'/usr/local/bin/python'' の場合、prefix は
     `'/usr/local'' になります。
     関数が返す文字列ポインタは静的な記憶領域を返します; 関数の
     呼び出し側はこの値を変更できません。 この値はトップレベルの
     `Makefile' に指定されている変数 `prefix' や、ビルド値に
     `configure' スクリプト に指定した `--prefix' 引数に対応しています。
     この値は Python コードからは `sys.prefix' として利用できます。
     UNIXでも有用です。次に説明する関数も参照してください。

`char* Py_GetExecPrefix()'
     プラットフォーム_依存_ のファイルがインストールされている場所
     である_exec-prefix_ を返します。 この値は`Py_SetProgramName()'
     でセットされたプログラム名や
     いくつかの環境変数をもとに、数々の複雑な規則から導出されます;
     例えば、プログラム名が`'/usr/local/bin/python''
     の場合、exec-prefix は `'/usr/local'' になります。
     関数が返す文字列ポインタは静的な記憶領域を返します; 関数の
     呼び出し側はこの値を変更できません。 この値はトップレベルの
     `Makefile' に指定されている変数 `exec_prefix' や、ビルド値に
     `configure' スクリプト に指定した `--exec-prefix'
     引数に対応しています。 この値は Python コードからは
     `sys.exec_prefix' として利用できます。 UNIXのみで有用です。

     背景: プラットフォーム依存のファイル (実行形式や共有ライブラリ)
     が、 別個のディレクトリツリー内にインストールされている場合、
     exec-prefix は prefix と異なります。典型的なインストール形態では、
     プラットフォーム非依存のファイルが`/usr/local' に収められる一方、
     プラットフォーム依存のファイルは`/usr/local/plat' サブツリーに
     収められます。

     概して、プラットフォームとは、ハードウェアとソフトウェアファミリの
     組み合わせを指します。例えば、 Solaris 2.x を動作させている Sparc
     マシンは全て同じプラットフォームであるとみなしますが、Solaris 2.x
     を動作させている Intel マシンは違うプラットフォームになりますし、
     同じ Intel マシンでも Linux を動作させているならまた別の
     プラットフォームです。一般的には、同じオペレーティングシステムでも、
     メジャーリビジョンの違うものは異なるプラットフォームです。 非 UNIX
     のオペレーティングシステムの場合は話はまた別です; 非 UNIX
     のシステムでは、インストール方法はとても異なっていて、 prefix や
     exec-prefix には意味がなく、空文字列が設定されている
     ことがあります。コンパイル済みの Python バイトコードは
     プラットフォームに依存しないので注意してください (ただし、
     どのバージョンの Python でコンパイルされたかには依存します!)。

     システム管理者は、`mount' や `automount' プログラムを
     使って、各プラットフォーム用の`/usr/local/plat' を異なった
     ファイルシステムに置き、プラットフォーム間で `/usr/local' を
     共有するための設定方法を知っているはずです。

`char* Py_GetProgramFullPath()'
     Python 実行可能形式の完全なプログラム名を返します; この値は
     デフォルトのモジュール検索パスを (前述の`Py_SetProgramName()'
     で設定された) プログラム名から導出する際に 副作用的に計算されます。
     関数が返す文字列ポインタは静的な記憶領域を返します; 関数の
     呼び出し側はこの値を変更できません。 この値は Python コードからは
     `sys.executable' として利用できます。 UNIXのみで有用です。

`char* Py_GetPath()'
     デフォルトモジュール検索パスを返します; パスは (上の
     `Py_SetProgramName()' で設定された) プログラム名と、
     いくつかの環境変数から計算されます。戻り値となる文字列は、
     プラットフォーム依存のパスデリミタ文字で分割された一連の
     ディレクトリ名からなります。デリミタ文字は UNIXでは`:'、 Windows
     では`;' 、Macintosh では `\n' (ASCII 改行文字)
     です。関数が返す文字列ポインタは静的な記憶領域を返します;
     関数の呼び出し側はこの値を変更できません。 この値は Python
     コードからはリスト `sys.path'  として
     利用できます。このリストは、値を修正して将来モジュールをロードする際に
     使う検索パスを変更できます。


`const char* Py_GetVersion()'
     Python インタプリタのバージョンを返します。バージョンは、

          "1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"

     ような形式の文字列です。

     第一ワード (最初のスペース文字まで) は、現在の Python のバージョン
     です;
     最初の三文字は、メジャーバージョンとマイナーバージョン、そして
     それを分割しているピリオドです。関数が返す文字列ポインタは静的な
     記憶領域を返します; 関数の呼び出し側はこの値を変更できません。
     この値は Python コードからは`sys.version'として利用できます。

`const char* Py_GetPlatform()'
     現在のプラットフォームのプラットフォーム識別文字列を返します。
     UNIXでは、オペレーティングシステムの "公式の" 名前を小文字に
     変換し、後ろにメジャーリビジョン番号を付けた構成になっています;
     例えば Solaris 2.x は、SunOS 5.x, としても知られていますが、
     `'sunos5'' になります。Macintosh では `'mac'' です。 Windows
     では`'win'' です。 関数が返す文字列ポインタは静的な
     記憶領域を返します; 関数の呼び出し側はこの値を変更できません。
     この値は Python コードからは`sys.platform'として利用できます。

`const char* Py_GetCopyright()'
     現在の Python バージョンに対する公式の著作権表示文字列、例えば
     `'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam''
     を返します。 関数が返す文字列ポインタは静的な 記憶領域を返します;
     関数の呼び出し側はこの値を変更できません。 この値は Python
     コードからは`sys.copyright'として利用できます。

`const char* Py_GetCompiler()'
     現在使っているバージョンの Python をビルドする際に用いたコンパイラ
     を示す文字列を、各括弧で囲った文字列を返します。例えば:

          "[GCC 2.7.2.2]"

     になります。

     関数が返す文字列ポインタは静的な 記憶領域を返します;
     関数の呼び出し側はこの値を変更できません。 この値は Python
     コードからは`sys.version' の一部として 取り出せます。

`const char* Py_GetBuildInfo()'
     現在使っている Python インタプリタインスタンスの、シーケンス番号と
     ビルド日時に関する情報を返します。例えば

          "#67, Aug  1 1997, 22:34:28"

     になります。

     関数が返す文字列ポインタは静的な 記憶領域を返します;
     関数の呼び出し側はこの値を変更できません。 この値は Python
     コードからは`sys.version' の一部として 取り出せます。

`int PySys_SetArgv(int argc, char **argv)'
     ARGC および ARGV に基づいて `sys.argv' を設定
     します。このパラメタはプログラムの `main()'
     に渡したパラメタに似ていますが、最初の要素が Python インタプリタ
     の宿主となっている実行形式の名前ではなく、実行されるスクリプト名を
     参照しなければならない点が違います。実行するスクリプトがない場合、
     ARGV の最初の要素は空文字列にしてもかまいません。 この関数が
     `sys.argv' の初期化に失敗した場合、致命的
     エラー条件を`Py_FatalError()' でシグナルします。

* Menu:

* スレッド状態 thread state とグローバルインタプリタロック global interpreter lock::
* プロファイルとトレース profiling and tracing::
* 高度なデバッガサポート advanced debugger support::

