This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: os,  Next: ospath,  Prev: 汎用オペレーティングシステムサービス,  Up: 汎用オペレーティングシステムサービス

雑多なオペレーティングシステムインタフェース
============================================

雑多なオペレーティングシステムインタフェース。

このモジュールでは、オペレーティングシステム依存の機能を利用する方法
として、`posix' や `nt' といったオペレーティング
システム依存の組み込みモジュールを import するよりも可搬性の高い
手段を提供しています。

このモジュールは、`mac' や `posix' のような、
オペレーティングシステム依存の組み込みモジュールから関数やデータを
検索して、見つかったものを取り出し (export) ます。Python における
組み込みのオペレーティングシステム依存モジュールは、同じ機能を
利用することができる限り、同じインタフェースを使います; たとえば、
`os.stat(PATH)' は PATH についての stat 情報を (たまたま POSIX
インタフェースに起源する) 同じ書式で返します。

特定のオペレーティングシステム固有の拡張も `os' を介して
利用することができますが、これらの利用はもちろん、可搬性を脅かします！

最初の `os' の import 以後、`os' を介した関数の
利用は、オペレーティングシステム依存組み込みモジュールにおける関数の
直接利用に比べてパフォーマンス上のペナルティは _全くありません_。
従って、`os'を利用しない理由は _存在しません_ !

`os' モジュールには多くの関数とデータ値が入っています。
以下の項目と、その後に続くサブセクションは `os' モジュールから
直接利用できます。

`error'
     関数がシステム関連のエラー(引数の型違いや他のありがちなエラーではない)
     を返した場合この例外が発生します。これは `OSError' とし
     て知られる組み込み例外でもあります。付属する値は `errno' から
     とった数値のエラーコードと、エラーコードに対応する、C 関数
     `perror()' により出力されるのと同じ文字列からなるペアです。
     背後のオペレーティングシステムで定義されているエラーコード名が収め
     られている `errno'  を参照してください。

     例外がクラスの場合、この例外は二つの属性、`errno' と `strerror'
     を持ちます。前者の属性は C の `errno' 変数 の値、後者は
     `strerror()' による対応するエラーメッセージ
     の値を持ちます。(`chdir()' や `unlink()' のような)
     ファイルシステム上のパスを含む例外に対しては、この例外インスタンス
     は 3 つめの属性、`filename' を持ち、関数に渡されたファイル名
     となります。

`name'
     import
     されているオペレーティング・システム依存モジュールの名前です。
     現在次の名前が登録されています: `'posix'', `'nt'' 、 `'dos'' 、
     `'mac'' 、 `'os2'' 、 `'ce'' 、 `'java'' 、 `'riscos'' 。


`path'
     `posixpath' や `macpath' のように、システムごとに対応
     付けられているパス名操作のためのシステム依存の標準モジュールです。
     すなわち、正しく import が行われるかぎり、 `os.path.split(FILE)'
     は `posixpath.split(FILE)'
     と等価でありながらより汎用性があります。このモジュール自体が
     import 可能なモジュールでもあるので注意してください。: `os.path'
     として直接 import してもかまいません。


* Menu:

* プロセスのパラメタ::
* ファイルオブジェクトの生成::
* ファイル記述子の操作::
* ファイルとディレクトリ::
* プロセス管理::
* 雑多なシステム情報::


File: python-lib-jp.info,  Node: プロセスのパラメタ,  Next: ファイルオブジェクトの生成,  Prev: os,  Up: os

プロセスのパラメタ
------------------

これらの関数とデータ要素は、現在のプロセスおよびユーザに対する情報
提供および操作のための機能を提供しています。

`environ'
     環境変数の値を表すマップ型オブジェクトです。例えば、
     `environ['HOME']' は( いくつかのプラットフォーム上での) あなたの
     ホームディレクトリへのパスです。これは C の `getenv("HOME")' と
     等価です。

     プラットフォーム上で `putenv()' がサポートされている場合、この
     マップ型オブジェクトは環境変数に対するクエリと同様に変更するために使うこ
     ともできます。`putenv()' はマップ型オブジェクトが修正される時に、
     自動的に呼ばれることになります。

     _Note:_ FreeBSD と Mac OS X を含むいつくかのプラットフォームでは、
     `environ' の値を変更するとメモリリークの原因になる場合があります。
     システムの putenv に関するドキュメントを参照してください。

     `putenv()' が提供されていない場合、このマッピングオブジェクト
     を適切なプロセス生成機能に渡して、子プロセスが修正された環境変数
     を利用するようにできます。

`chdir(path)'

`getcwd'
     これらの関数は、"ファイルとディレクトリ" (*Note
     ファイルとディレクトリ:: 節) で 説明されています。

`ctermid()'
     プロセスの制御端末に対応するファイル名を返します。 利用できる環境:
     UNIX。

`getegid()'
     現在のプロセスの実行グループ id を返します。この id は
     現在のプロセスで実行されているファイルの `set id' ビットに
     対応します。 利用できる環境: UNIX。

`geteuid()'
     現在のプロセスの実行ユーザ id を返します。 利用できる環境: UNIX。

`getgid()'
     現在のプロセスの実際のグループ id を返します。 利用できる環境:
     UNIX。

`getgroups()'
     現在のプロセスに関連づけられた従属グループ id のリストを返します。
     利用できる環境: UNIX。

`getlogin()'
     現在のプロセスの制御端末にログインしているユーザ名を返します。ほとんどの
     場合、ユーザが誰かを知りたいときには環境変数 `LOGNAME' を、現在有
     効になっているユーザ名を知りたいときには
     `pwd.getpwuid(os.getuid())[0]' を使うほうが便利です。
     利用できる環境: UNIX。

`getpgrp()'
     現在のプロセス・グループの id を返します。 利用できる環境: UNIX。

`getpid()'
     現在のプロセス id を返します。 利用できる環境: UNIX, Windows.。

`getppid()'
     親プロセスの id を返します。 利用できる環境: UNIX。

`getuid()'
     現在のプロセスのユーザ id を返します。 利用できる環境: UNIX。

`getenv(varname[, value])'
     環境変数 VARNAME が存在する場合にはその値を返し、存在しない
     場合には VALUE を返します。VALUE のデフォルト値は `None' です。
     利用できる環境: UNIX互換環境、Windows。

`putenv(varname, value)'
     VARNAME と名づけられた環境変数の値を文字列 VALUE に
     設定します。このような環境変数への変更は、`os.system()' 、
     `popen()'  、 `fork()' および `execv()'
     により起動された子プロセスに影響します。 利用できる環境: 主な
     UNIX互換環境、Windows。

     _Note:_ FreeBSD と Mac OS X を含むいつくかのプラットフォームでは、
     `environ' の値を変更するとメモリリークの原因になる場合があります。
     システムの putenv に関するドキュメントを参照してください。

     `putenv()' がサポートされている場合、 `os.environ'
     の要素に対する代入を行うと自動的に `putenv()' を呼び出します;
     しかし、`putenv()' の呼び出しは `os.environ' を更新しない
     ので、実際には `os.environ' の要素に代入する方が望ましい操作です。

`setegid(egid)'
     現在のプロセスに有効なグループIDをセットします。 利用できる環境:
     UNIX。

`seteuid(euid)'
     現在のプロセスに有効なユーザIDをセットします。 利用できる環境:
     UNIX。

`setgid(gid)'
     現在のプロセスにグループ id をセットします。 利用できる環境: UNIX。

`setgroups(groups)'
     現在のグループに関連付けられた従属グループ id のリストを GROUPS
     に設定します。GROUPS はシーケンス型でなくてはならず、
     各要素はグループを特定する整数でなくてはなりません。この操作は
     通常、スーパユーザしか利用できません。 Availability: UNIX.  _Added
     in Python version 2.2_

`setpgrp()'
     システムコール `setpgrp()' または `setpgrp(0, 0)'
     のどちらかのバージョンのうち、 (実装されていれば)
     実装されている方を呼び出します。 機能については UNIX
     マニュアルを参照してください。 利用できる環境: UNIX

`setpgid(pid, pgrp)'
     システムコール `setpgid()' を呼び出して、 PID の id
     をもつプロセスのプロセスグループ id を PGRP に設定します。
     利用できる環境: UNIX

`setreuid(ruid, euid)'
     現在のプロセスに対して実際のユーザ id および実行ユーザ id を
     設定します。 利用できる環境: UNIX

`setregid(rgid, egid)'
     現在のプロセスに対して実際のグループ id および実行ユーザ id を
     設定します。 利用できる環境: UNIX

`setsid()'
     システムコール `setsid()' を呼び出します。機能については UNIX
     マニュアルを参照してください。 利用できる環境: UNIX

`setuid(uid)'
     現在のプロセスのユーザ id を設定します。 利用できる環境: UNIX

`strerror(code)'
     エラーコード CODE に対応するエラーメッセージを返します。
     利用できる環境: UNIX、Windows

`umask(mask)'
     現在の数値 umask を設定し、以前の umask 値を返します。
     利用できる環境: UNIX、Windows

`uname()'
     現在のオペレーティングシステムを特定する情報の入った 5 要素のタプル
     を返します。このタプルには 5 つの文字列: `(SYSNAME, NODENAME,
     RELEASE, VERSION, MACHINE)' が入っています。
     システムによっては、ノード名を 8 文字、または先頭の要素だけに
     切り詰めます; ホスト名を取得する方法としては、
     `socket.gethostname()' を使う方がよいでしょう、あるいは
     `socket.gethostbyaddr(socket.gethostname())' でもかまいません。
     利用できる環境: UNIX互換環境


File: python-lib-jp.info,  Node: ファイルオブジェクトの生成,  Next: ファイル記述子の操作,  Prev: プロセスのパラメタ,  Up: os

ファイルオブジェクトの生成
--------------------------

以下の関数は新しいファイルオブジェクトを作成します。

`fdopen(fd[, mode[, bufsize]])'
     ファイル記述子 FD に接続している、開かれた
     ファイルオブジェクトを返します。 引数 MODE および BUFSIZE
     は、組み込み関数 `open()'
     における対応する引数と同じ意味を持ちます。 利用できる環境:
     Macintosh、 UNIX、Windows

`popen(command[, mode[, bufsize]])'
     COMMAND への、または COMMAND からのパイプ入出力を開きます。
     戻り値はパイプに接続されている開かれたファイルオブジェクトで、
     MODE が `'r'' (標準の設定です) または `'w'' かに
     よって読み出しまたは書き込みを行うことができます。 引数 BUFSIZE
     は、組み込み関数 `open()'
     における対応する引数と同じ意味を持ちます。 COMMAND
     の終了ステータス (`wait()' で指定された書式でコード化
     されています) は、`close()' メソッドの戻り値として取得することが
     できます。例外は終了ステータスがゼロ (すなわちエラーなしで終了) の
     場合で、このときには `None' を返します。 利用できる環境:
     UNIX、Windows

     _Changed in Python version 2.0_

`tmpfile()'
     更新モード(`w+b')で開かれた新しいファイルオブジェクトを返します。
     このファイルはディレクトリエントリ登録に関連付けられておらず、
     このファイルに対するファイル記述子がなくなると自動的に削除されます。
     利用できる環境: UNIX、Windows

以下の `popen()' の変種はどれも、BUFSIZE が指定されている場合には I/O
パイプのバッファサイズを表します。 MODE を指定する場合には、文字列
`'b'' または `'t'' でなければなりません; これは、Windows
でファイルをバイナリモードで開くか
テキストモードで開くかを決めるために必要です。 MODE の標準の
設定値は`'t'' です。

以下のメソッドは子プロセスからリターンコードを取得できるようには
していません。入出力ストリームを制御し、かつ終了コードの取得も
行える唯一の方法は、 `popen2' モジュールの  `Popen3' と  `Popen4'
クラスを利用する事です。これらは UNIX上でのみ利用可能です。

これらの関数の利用に関係して起きうるデッドロック状態についての議論は、
"フロー制御問題" (section~*Note 利用可能なデータ型::)
を参照してください。

`popen2(cmd[, mode[, bufsize]])'
     CMD を子プロセスとして実行します。ファイル・オブジェクト
     `(CHILD_STDIN, CHILD_STDOUT)' を返します。 利用できる環境:
     UNIX、Windows _Added in Python version 2.0_

`popen3(cmd[, mode[, bufsize]])'
     CMD を子プロセスとして実行します。ファイルオブジェクト
     `(CHILD_STDIN, CHILD_STDOUT, CHILD_STDERR)' を 返します。
     利用できる環境: UNIX、Windows _Added in Python version 2.0_

`popen4(cmd[, mode[, bufsize]])'
     CMD を子プロセスとして実行します。ファイルオブジェクト
     `(CHILD_STDIN, CHILD_STDOUT_AND_STDERR)' を返します。
     利用できる環境: UNIX、Windows _Added in Python version 2.0_

上記の機能は `popen2' モジュール内の同じ名前の関数
を使っても実現できますが、これらの関数の戻り値は異なる順序を持ってい
ます。


File: python-lib-jp.info,  Node: ファイル記述子の操作,  Next: ファイルとディレクトリ,  Prev: ファイルオブジェクトの生成,  Up: os

ファイル記述子の操作
--------------------

これらの関数は、ファイル記述子を使って参照されている
I/Oストリームを操作します。

`close(fd)'
     ファイルディスクリプタ FD を閉じます。 利用できる環境: Macintosh、
     UNIX、 Windows

     注:この関数は低レベルの I/O のためのもので、`open()' や `pipe()'
     が返すファイル記述子に対して適用しなければ
     なりません。組み込み関数 `open()' や `popen()' 、 `fdopen()'
     の返す "ファイルオブジェクト" を閉じるには、 オブジェクトの
     `close()' メソッドを使ってください。

`dup(fd)'
     ファイル記述子 FD の複製を返します。 利用できる環境: Macintosh、
     UNIX、 Windows.

`dup2(fd, fd2)'
     ファイル記述子を FD から FD2 に複製し、必要なら後者の
     記述子を前もって閉じておきます。 利用できる環境: UNIX、Windows

`fdatasync(fd)'
     ファイル記述子 FD を持つファイルのディスクへの書き込みを
     強制します。メタデータの更新は強制しません。 利用できる環境: UNIX

`fpathconf(fd, name)'
     開いているファイルに関連したシステム設定情報 (system configuration
     information) を返します。 NAME には取得したい設定名を指定します;
     これは定義済みのシステム固有値名の文字列で、多くの標準 (POSIX.1、
     UNIX 95、 UNIX 98 その他) で定義されています。
     プラットフォームによっては別の名前も定義しています。
     ホストオペレーティングシステムの関知する名前は `pathconf_names'
     辞書で与えられています。このマップオブジェクトに入っていない設定
     変数については、 NAME に整数を渡してもかまいません。
     利用できる環境: UNIX

     もし NAME が文字列でかつ不明である場合、 `ValueError'
     を送出します。NAME の指定値がホストシステムでサポートされておらず、
     `pathconf_names' にも入っていない場合、`errno.EINVAL'
     をエラー番号として `OSError' を送出します。

`fstat(fd)'
     `stat()' のようにファイル記述子 FD の状態を返します。
     利用できる環境: UNIX、Windows

`fstatvfs(fd)'
     `statvfs()' のように、ファイル記述子 FD に関連
     づけられたファイルが入っているファイルシステムに関する情報を返します。
     利用できる環境: UNIX

`fsync(fd)'
     ファイル記述子 FD
     を持つファイルのディスクへの書き込みを強制します。
     UNIXでは、ネイティブの `fsync()' 関数を、Windows では MS
     `_commit()' 関数を呼び出します。

     Python のファイルオブジェクト F を使う場合、F の内部バッファ
     を確実にディスクに書き込むために、まず `F.flush()' を実行し、
     それから `os.fsync(F.fileno())' してください。 利用できる環境:
     UNIX、2.2.3 以降では Windows も。

`ftruncate(fd, length)'
     ファイル記述子 FD に対応するファイルを、サイズが最大で LENGTH
     バイトになるように切り詰めます。 利用できる環境: UNIX。

`isatty(fd)'
     ファイル記述子 FD が開いていて、tty(のような)装置に接
     続されている場合、`1' を返します。そうでない場合は `0' を返
     します。 利用できる環境: UNIX

`lseek(fd, pos, how)'
     ファイル記述子 FD の現在の位置を POS に設定します。 POS の意味は
     HOW で修飾されます: ファイルの先頭からの相対には `0' を設定します;
     現在の位置からの相対には`1' を設定します;
     ファイルの末尾からの相対には `2' を設定します。
     利用できる環境:Macintosh、 UNIX、Windows。

`open(file, flags[, mode])'
     ファイル FILE を開き、FLAG に従って様々なフラグを 設定し、可能なら
     MODE に従ってファイルモードを設定します。 MODE の標準の設定値は
     `0777' (8進表現) で、先に 現在の umask
     を使ってマスクを掛けます。新たに開かれたファイルの
     のファイル記述子を返します。利用できる環境:Macintosh、UNIX、Windows。
     フラグとファイルモードの値についての詳細は C
     ランタイムのドキュメントを 参照してください; (`O_RDONLY' や
     `O_WRONLY' のような)
     フラグ定数はこのモジュールでも定義されています
     (以下を参照してください)。

     この関数は低レベルの I/O のためのものです。通常の利用では、
     `read()' や `write()' (やその他多くの) メソッドを持つ
     "ファイルオブジェクト" を返す、組み込み関数 `open()' を
     使ってください。, which returns a "file

`openpty()'
     新しい擬似端末のペアを開きます。ファイル記述子のペア `(MASTER,
     SLAVE)' を返し、それぞれ pty および tty を表します。(少しだけ)
     より可搬性のあるアプローチとしては、 `pty'
     モジュールを使ってください。 利用できる環境: いくつかの
     UNIX風システム。

`pipe()'
     パイプを作成します。ファイル記述子のペア `(R, W)'
     を返し、それぞれ読み出し、書き込み用に使うことができます。
     利用できる環境: UNIX、Windows。

`read(fd, n)'
     ファイル記述子 FD から最大で N バイト読み出します。
     読み出されたバイト列の入った文字列を返します。FD が参照して
     いるファイルの終端に達した場合、空の文字列が返されます。
     利用できる環境:Macintosh、UNIX、Windows。

     注:この関数は低レベルの I/O のためのもので、`open()' や `pipe()'
     が返すファイル記述子に対して適用しなければ
     なりません。組み込み関数 `open()' や `popen()' 、 `fdopen()'
     の返す "ファイルオブジェクト" 、あるいは `sys.stdin'
     から読み出すには、オブジェクトの `read()'
     メソッドを使ってください。

`tcgetpgrp(fd)'
     FD (`open()' が返す開かれたファイル記述子)
     で与えられる端末に関連付けられたプロセスグループを返します。
     利用できる環境: UNIX。

`tcsetpgrp(fd, pg)'
     FD (`open()' が返す開かれたファイル記述子)
     で与えられる端末に関連付けられたプロセスグループを PG
     に設定します。 利用できる環境: UNIX。

`ttyname(fd)'
     ファイル記述子 FD に関連付けられている端末デバイスを特定する
     文字列を返します。FD が端末に関連付けられていない場合、
     例外が送出されます。利用できる環境: UNIX。

`write(fd, str)'
     ファイル記述子 FD に文字列 STR を書き込みます。
     実際に書き込まれたバイト数を返します。 利用できる環境:Macintosh、
     UNIX、Windows。

     注:この関数は低レベルの I/O のためのもので、`open()' や `pipe()'
     が返すファイル記述子に対して適用しなければ
     なりません。組み込み関数 `open()' や `popen()' 、 `fdopen()'
     の返す "ファイルオブジェクト" 、あるいは
     `sys.stdout'、`sys.stderr' に書き込むには、オブジェクトの `write()'
     メソッドを使ってください。

以下のデータ要素は `open()' 関数の FLAGS 引数を
構築するために利用することができます。

`O_RDONLY'

`O_WRONLY'

`O_RDWR'

`O_NDELAY'

`O_NONBLOCK'

`O_APPEND'

`O_DSYNC'

`O_RSYNC'

`O_SYNC'

`O_NOCTTY'

`O_CREAT'

`O_EXCL'

`O_TRUNC'
     `open()' 関数の FLAG 引数のためのオプションフラグです。
     これらの値はビット単位 OR を取ることができます。
     利用できる環境:Macintosh、 UNIX、Windows。

`O_BINARY'
     `open()' 関数の FLAG 引数のためのオプションフラグです。
     この値は上に列挙したフラグとビット単位 OR を取ることができます。
     利用できる環境:Macintosh、Windows。



File: python-lib-jp.info,  Node: ファイルとディレクトリ,  Next: プロセス管理,  Prev: ファイル記述子の操作,  Up: os

ファイルとディレクトリ
----------------------

`access(path, mode)'
     実 uid/gid を使って PATH に対するアクセスが可能か調べます。
     ほとんどのオペレーティングシステムは実行 uid/gid を使うため、
     このルーチンは suid/sgid 環境において、プログラムを起動した
     ユーザが PATH に対するアクセス権をもっているかを調べる
     ために使われます。PATH が存在するかどうかを調べるには MODE を
     `F_OK' にします。ファイル操作許可 (permission) を調べるために
     `R_OK'、 `W_OK'、`X_OK' から一つまたはそれ以上のフラグと OR
     をとることもできます。 アクセスが許可されている場合 `1'
     を、そうでない場合 `0' を返します。詳細は `access(2)'
     のマニュアルページを参照して
     ください。利用できる環境:Macintosh、Windows。

`F_OK'
     `access()' の MODE に渡すための値で、 PATH
     が存在するかどうかを調べます。

`R_OK'
     `access()' の MODE に渡すための値で、 PATH
     が読み出し可能かどうかを調べます。

`W_OK'
     `access()' の MODE に渡すための値で、 PATH
     が書き込み可能かどうかを調べます。

`X_OK'
     `access()' の MODE に渡すための値で、 PATH
     が実行可能かどうかを調べます。

`chdir(path)'
     現在の作業ディレクトリ (current working directory) を PATH に
     設定します。利用できる環境:Macintosh、 UNIX、Windows。

`getcwd()'
     現在の作業ディレクトリを表現する文字列を返します。 利用できる環境:
     Macintosh、 UNIX、Windows。

`chroot(path)'
     現在のプロセスに対してルートディレクトリを PATH に変更します。
     利用できる環境: UNIX。 _Added in Python version 2.2_

`chmod(path, mode)'
     PATH のモードを数値 MODE に変更します。 MODE は、(`stat'
     モジュールで定義されている) 以下の値のいずれかを取り得ます:
        * `S_ISUID'

        * `S_ISGID'

        * `S_ENFMT'

        * `S_ISVTX'

        * `S_IREAD'

        * `S_IWRITE'

        * `S_IEXEC'

        * `S_IRWXU'

        * `S_IRUSR'

        * `S_IWUSR'

        * `S_IXUSR'

        * `S_IRWXG'

        * `S_IRGRP'

        * `S_IWGRP'

        * `S_IXGRP'

        * `S_IRWXO'

        * `S_IROTH'

        * `S_IWOTH'

        * `S_IXOTH'

     利用できる環境: UNIX、Windows。

`chown(path, uid, gid)'
     PATH の所有者 (owner) id とグループ id を、数値 UID および GID
     に変更します。 利用できる環境: UNIX。

`link(src, dst)'
     SRC を指しているハードリンク DST を作成します。 利用できる環境:
     UNIX。

`listdir(path)'
     ディレクトリ内のエントリ名が入ったリストを返します。
     リスト内の順番は不定です。特殊エントリ `'.'' および `'..''
     は、それらがディレクトリに入っていてもリストには含められません。
     _Changed in Python version 2.3_ 利用できる環境: Macintosh、
     UNIX、Windows。

`lstat(path)'
     `stat()' に似ていますが、シンボリックリンクをたどりません。
     利用できる環境: UNIX。

`mkfifo(path[, mode])'
     数値で指定されたモード MODE を持つ FIFO (名前付きパイプ) を PATH
     に作成します。MODE の標準の値は `0666' (8進) です。現在の umask
     値が前もって MODE からマスクされます。 利用できる環境: UNIX。

     FIFO は通常のファイルのようにアクセスできるパイプです。FIFO は
     (例えば `os.unlink()' を使って) 削除されるまで
     存在しつづけます。一般的に、FIFO は "クライアント" と "サーバ"
     形式のプロセス間でランデブーを行うために使われます: このとき、
     サーバは FIFO を読み出し用に開き、クライアントは書き込み用に
     開きます。`mkfifo()' は FIFO を開かない -- 単にランデブー
     ポイントを作成するだけ -- なので注意してください。

`mknod(path[, mode=0600, device])'
     filename という名前で、ファイルシステム・ノード
     (ファイル、デバイス特殊 ファイル、または、名前つきパイプ)
     を作ります 。MODE は、作ろうとす
     るノードの使用権限とタイプを、S_IFREG、S_IFCHR、S_IFBLK、S_IFIFO
     (これら の定数は `stat' で使用可能) のいずれかと（ビット OR
     で）組み合わ せて指定します。S_IFCHR と S_IFBLK
     を指定すると、DEVICE は新しく作 られたデバイス特殊ファイルを
     (おそらく `os.makedev()' を使って)
     定義し、指定しなかった場合には無視します。 _Added in Python
     version 2.3_

`major(device)'
     生のデバイス番号から、デバイスのメジャー番号を取り出します。
     _Added in Python version 2.3_

`minor(device)'
     生のデバイス番号から、デバイスのマイナー番号を取り出します。
     _Added in Python version 2.3_

`makedev(major, minor)'
     major と minor から、新しく生のデバイス番号を作ります。 _Added in
     Python version 2.3_

`mkdir(path[, mode])'
     数値で指定されたモード MODE をもつディレクトリ PATH
     を作成します。MODE の標準の値は `0777' (8進)です。
     システムによっては、 MODE は無視されます。利用の際には、 現在の
     umask 値が前もってマスクされます。 利用できる環境:Macintosh、
     UNIX、Windows。

`makedirs(path[, mode])'
     再帰的なディレクトリ作成関数です。

     `mkdir()' に似て いますが、末端 (leaf)
     となるディレクトリを作成するために必要な
     中間の全てのディレクトリを作成します。末端ディレクトリが
     すでに存在する場合や、作成ができなかった場合には `error'
     例外を送出します。MODE の標準の値は `0777' (8進)です。 (Windows
     システムにのみ関係することですが、Universal Naming Convention
     パスは、``\\host\path'' という書式のパスです） _Added in Python
     version 1.5.2_

`pathconf(path, name)'
     指定されたファイルに関係するシステム設定情報を返します。 var{name}
     には取得したい設定名を指定します;
     これは定義済みのシステム固有値名の文字列で、多くの標準 (POSIX.1、
     UNIX 95、 UNIX 98 その他) で定義されています。
     プラットフォームによっては別の名前も定義しています。
     ホストオペレーティングシステムの関知する名前は `pathconf_names'
     辞書で与えられています。このマップ型オブジェクトに入っていない設定
     変数については、 NAME に整数を渡してもかまいません。
     利用できる環境: UNIX

     もし NAME が文字列でかつ不明である場合、 `ValueError'
     を送出します。NAME の指定値がホストシステムでサポートされておらず、
     `pathconf_names' にも入っていない場合、`errno.EINVAL'
     をエラー番号として `OSError' を送出します。

`pathconf_names'
     `pathconf()' および `fpathconf()' が受理する
     システム設定名を、ホストオペレーティングシステムで定義されている
     整数値に対応付けている辞書です。この辞書はシステムでどの
     設定名が定義されているかを決定するために利用できます。
     利用できる環境: UNIX。

`readlink(path)'
     シンボリックリンクが指しているパスを表す文字列を返します。
     返される値は絶対パスにも、相対パスにもなり得ます; 相対 パスの場合、
     `os.path.join(os.path.dirname(PATH), RESULT)'
     を使って絶対パスに変換することができます。 利用できる環境: UNIX。

`remove(path)'
     ファイル PATH を削除します。PATH がディレクトリの 場合、`OSError'
     が送出されます; ディレクトリの削除については `rmdir()'
     を参照してください。この関数は下で述べられている `unlink()'
     関数と同一です。Windows では、使用中のファイル
     を削除しようと試みると例外を送出します; UNIXでは、ディレクトリ
     エントリは削除されますが、記憶装置上にアロケーションされたファイル領域は
     元のファイルが使われなくなるまで残されます。 利用できる環境:
     Macintosh、 UNIX、Windows。

`removedirs(path)'
     再帰的なディレクトリ削除関数です。`rmdir()' と同じように
     動作しますが、末端ディレクトリがうまく削除できるかぎり、パスを
     構成する要素の右端となるディレクトリを刈り込んでゆき、指定したパス
     全体が削除されるかエラーが送出されるまで続けます
     (このエラーは通常、
     指定したディレクトリの親ディレクトリが空でないことを意味するだけ
     なので無視されます)。末端のディレクトリがうまく削除できない
     場合には `error' を送出します。 _Added in Python version 1.5.2_

`rename(src, dst)'
     ファイルまたはディレクトリ SRC を DST に名前変更します。 DST
     がディレクトリの場合、`OSError' が送出 されます。 UNIXでは、 DST
     が存在し、かつファイルの場合、
     ユーザの権限があるかぎり暗黙のうちに元のファイルが削除されます。
     この操作はいくつかの UNIX 系において、SRC と DST
     が異なるファイルシステム上にあると失敗することがあります。
     ファイル名の変更が成功する場合、この操作は原子的 (atomic) 操作
     となります (これは POSIX 要求仕様です) Windows では、 DST
     が既に存在する場合には、たとえファイルの場合でも `OSError'
     が送出されます; これは DST が既に
     存在するファイル名の場合、名前変更の原子的操作を実装する手段が
     ないからです。利用できる環境:Macintosh、 UNIX、Windows。

`renames(old, new)'
     再帰的にディレクトリやファイル名を変更する関数です。 `rename()'
     のように動作しますが、新たなパス名を持つ
     ファイルを配置するために必要な途中のディレクトリ構造をまず作成
     しようと試みます。 名前変更の後、元のファイル名のパス要素は
     `removedirs()' を使って右側から順に枝刈りされてゆきます。
     注意：この関数はコピー元の末端のディレクトリまたはファイルを削除する
     権限がない場合には失敗します。 _Added in Python version 1.5.2_

`rmdir(path)'
     ディレクトリ PATH を削除します。 利用できる環境:Macintosh、
     UNIX、Windows。

`stat(path)'
     与えられた PATH に対して `stat()' システムコールを
     実行します。戻り値はオブジェクトで、その属性が `stat' 構造体の
     以下に挙げる各メンバ: `st_mode' (保護モードビット)、 `st_ino' (i
     ノード番号)、 `st_dev' (デバイス)、 `st_nlink' (ハードリンク数)、
     `st_uid' (所有者のユーザ ID)、 `st_gid'
     (所有者のグループ	ID)、 `st_size' (ファイルのバイトサイズ)、
     `st_atime' (最終アクセス時刻)、 `st_mtime' (最終更新時刻)、
     `st_ctime' (プラットフォーム依存：UNIXでは最終メタデータ変更時刻、
     Windowsでは作成時刻) となっています。

     _Changed in Python version stat_float_times_
     が真を返す場合、時間値は浮動小数点で秒を計ります。ファイルシステムがサポートしていれば、秒の小数点以下の桁も含めて返されます。
     Mac OS では、時間は常に浮動小数点です。詳細な説明は
     `stat_float_times' を参照してください]{2.3}

     (Linux のような) Unix システムでは、以下の属性: `st_blocks'
     (ファイル用にアロケーションされているブロック数)、 `st_blksize'
     (ファイルシステムのブロックサイズ)、 `st_rdev' (i
     ノードデバイスの場合、デバイスの形式)、
     も利用可能なときがあります。

     Mac OS システムでは、以下の属性: `st_rsize'、 `st_creator'、
     `st_type'、 も利用可能なときがあります。

     RISCOS システムでは、以下の属性: `st_ftype' (file type)、
     `st_attrs' (attributes)、 `st_obtype' (object type)、
     も利用可能なときがあります。

     後方互換性のために、`stat()' の戻り値は少なくとも 10 個の
     整数からなるタプルとしてアクセスすることができます。このタプルは
     もっとも重要な (かつ可搬性のある) `stat' 構造体のメンバを
     与えており、以下の順番、 `st_mode'、 `st_ino'、 `st_dev'、
     `st_nlink'、 `st_uid'、 `st_gid'、 `st_size'、 `st_atime'、
     `st_mtime'、 `st_ctime'、 に並んでいます。

     実装によっては、この後ろにさらに値が付け加えられていることもあります。
     Mac OS では、時刻の値は Mac OS
     の他の時刻表現値と同じように浮動小数点数 なので注意してください。
     標準モジュール `stat'  では、 `stat'
     構造体から情報を引き出す上で便利な関数や定数を定義して
     います。(Windows では、いくつかのデータ要素はダミーの値が埋められて
     います。) 利用できる環境: Macintosh、 UNIX、Windows。

     _Changed in Python version 2.2_

`stat_float_times([newvalue])'
     `stat_result' がタイムスタンプに浮動小数点オブジェクトを使うかどう
     かを決定します。newvalue が真の場合、以後の stat()
     呼び出しは浮動小数点 を返し、偽の場合には整数を返します。newvalue
     が省略された場合、現在の設 定どおりの戻り値になります。

     古いバージョンの Python と互換性を保つため、`stat_result' にタプル
     としてアクセスすると、常に整数が返されます。また、Python 2.2
     との互換性
     のため、タイムスタンプにフィールド名を指定してアクセスすると、整数で返さ
     れす。タイムスタンプの秒を小数点以下の精度で求めたいアプリケーションは、
     タイムスタンプを浮動小数点型にするために、この関数を使うことができます。
     実際に、小数点以下の桁に 0
     以外の数値が得られるかどうかは、システムに依 存します。

     将来リリースされる Python
     は、この設定のデフォルト値を変更するでしょう。
     浮動小数点型のタイムスタンプを扱えないアプリケーションは、この関数を使っ
     て、その機能を停止させることができます。

     この設定の変更は、プログラムの起動時に、 __MAIN__
     モジュールの中でのみ行うことを推奨します。
     ライブラリは決して、この設定を変更するべきではありません。
     浮動小数点型のタイムスタンプを処理すると、不正確な動作をするようなライブ
     ラリを使う場合、ライブラリが修正されるまで、浮動小数点型を返す機能を停止
     させておくべきです。

`statvfs(path)'
     与えられた PATH に対して `statvfs()' システムコールを
     実行します。戻り値はオブジェクトで、その属性は与えられたパスが収め
     られているファイルシステムについて記述したものです。かく属性は
     `statvfs' 構造体のメンバ: `f_frsize'、 `f_blocks'、 `f_bfree'、
     `f_bavail'、 `f_files'、 `f_ffree'、 `f_favail'、 `f_flag'、
     `f_namemax'、 に対応します。利用できる環境: UNIX。

     後方互換性のために、戻り値は上の順にそれぞれ対応する属性値が並んだ
     タプルとしてアクセスすることもできます。 標準モジュール `statvfs'
     では、 配列としてアクセスする場合に、`statvfs' 構造体から情報を
     引き出す上便利な関数や定数を定義しています; これは
     属性として各フィールドにアクセスできないバージョンの Python で
     動作する必要のあるコードを書く際に便利です。 _Changed in Python
     version 2.2_

`symlink(src, dst)'
     SRC を指しているシンボリックリンクを DST に作成します。
     利用できる環境: UNIX。

`tempnam([dir[, prefix]])'
     一時ファイル (temporary file)
     を生成する上でファイル名として相応しい
     一意なパス名を返します。この値は一時的なディレクトリエントリ
     を表す絶対パスで、DIR ディレクトリの下か、DIR が省略 されたり
     `None' の場合には一時ファイルを置くための共通の
     ディレクトリの下になります。PREFIX が与えられており、かつ `None'
     でない場合、ファイル名の先頭につけられる短い
     接頭辞になります。アプリケーションは `tempnam()'
     が返したパス名を使って正しくファイルを生成し、生成したファイルを
     管理する責任があります; 一時ファイルの自動消去機能は提供されて
     いません。 _`tempnam()' を使うと、symlink 攻撃に対して脆弱
     になります; 代りに`tmpfile()' を使うよう検討してください。_
     利用できる環境: UNIX、Windows。

`tmpnam()'
     一時ファイル (temporary file)
     を生成する上でファイル名として相応しい
     一意なパス名を返します。この値は一時ファイルを置くための共通の
     ディレクトリ下の一時的なディレクトリエントリを表す絶対パスです。
     アプリケーションは `tmpnam()'
     が返したパス名を使って正しくファイルを生成し、生成したファイルを
     管理する責任があります; 一時ファイルの自動消去機能は提供されて
     いません。

     _`tmpnam()' を使うと、symlink 攻撃に対して脆弱 になります;
     代りに`tmpfile()' を使うよう検討してください。_ 利用できる環境:
     UNIX、Windows。 この関数はおそらく Windows
     では使うべきではないでしょう; Micorosoft の `tmpnam()'
     実装では、常に現在のドライブの
     ルートディレクトリ下のファイル名を生成しますが、これは一般的には
     テンポラリファイルを置く場所としてはひどい場所です
     (アクセス権限によっては、この名前をつかってファイルを開くことすら
     できないかもしれません)。

`TMP_MAX'
     `tmpnam()' がテンポラリ名を再利用し始めるまでに生成できる
     一意な名前の最大数です。

`unlink(path)'
     ファイル PATH を削除します。`remove()' と同じです; `unlink()'
     の名前は伝統的な UNIX の関数名です。 利用できる環境: Macintosh、
     UNIX、Windows。

`utime(path, times)'
     PATH で指定されたファイルに最終アクセス時刻および最終修正時刻
     を設定します。TIMES が `None' の場合、ファイルの最終
     アクセス時刻および最終更新時刻は現在の時刻になります。そうでない
     場合、 TIMES は 2 要素のタプルで、`(ATIME, MTIME)'
     の形式をとらなくてはなりません。これらはそれぞれアクセス時刻および修正時刻
     を設定するために使われます。 _Changed in Python version 2.0_
     利用できる環境:Macintosh、 UNIX、Windows。

`walk(top[, topdown`=True' [, onerror`=None']])'
     `walk()' は、ディレクトリツリー以下のファイル名を、ツリーを
     トップダウンとボトムアップの両方向に歩行することで生成します。
     ディレクトリ TOP を根に持つディレクトリツリーに含まれる、
     各ディレクトリ(TOP 自身を含む) から、タプル `(DIRPATH,  DIRNAMES,
     FILENAMES)' を生成します。

     DIRPATH は文字列で、ディレクトリへのパスです。DIRNAMES は DIRPATH
     内のサブディレクトリ名のリスト (`'.'' と `'..''
     は除く）です。FILENAMES は DIRPATH 内の非ディレクトリ・ファ
     イル名のリストです。このリスト内の名前には、ファイル名までのパスが含まれ
     ないことに、注意してください。DIRPATH 内のファイルやディレクトリへ
     の (TOP からたどった) フルパスを得るには、 `os.path.join(DIRPATH,
     NAME)' してください。

     オプション引数 TOPDOWN が真であるか、指定されなかった場合、各ディ
     レクトリからタプルを生成した後で、サブディレクトリからタプルを生成します。
     (ディレクトリはトップダウンで生成)。TOPDOWN が偽の場合、ディレクト
     リに対応するタプルは、そのディレクトリ以下の全てのサブディレクトリに対応
     するタプルの後で (ボトムアップで) 生成されます

     TOPDOWN が真のとき、呼び出し側は DIRNAMES リストを、インプレ
     ースで (たとえば、`del' やスライスを使った代入で) 変更でき、
     `walk()' はDIRNAMES に残っているサブディレクトリ内のみを
     再帰します。これにより、検索を省略したり、特定の訪問順序を強制したり、呼
     び出し側が `walk()' を再開する前に、呼び出し側が作った、または
     名前を変更したディレクトリを、`walk()' に知らせたりすることがで
     きます。TOPDOWN が偽のときに DIRNAMES を変更しても効果はあり
     ません。ボトムアップモードでは  DIRNAMES 自身が生成される前に
     DIRNAMES内のディレクトリの情報が生成されるからです。

     デフォルトでは、`os.listdir()' 呼び出しから送出されたエラーは
     無視されます。オプションの引数 ONERROR を指定するなら、
     この値は関数でなければなりません; この関数は単一の引数として、
     os.error インスタンスを伴って呼び出されます。この関数では
     エラーを報告して歩行を続けたり、例外を送出して歩行を中断したり
     できます。ファイル名は例外オブジェクトの `filename' 属性として
     取得できることに注意してください。

     _Notice:_ 相対パスを渡した場合、`walk()'
     の回復の間でカレント作業ディレク
     トリを変更しないでください。`walk()' はカレントディレクトリを変
     更しませんし、呼び出し側もカレントディレクトリを変更しないと仮定していま
     す。

     _Notice:_
     シンボリックリンクをサポートするシステムでは、サブディレクトリへのリンク
     が DIRNAMES リストに含まれますが、`walk()' はそのリンクを
     たどりません
     (シンボリックリンクをたどると、無限ループに陥りやすくなりま
     す)。リンクされたディレクトリをたどるには、 `os.path.islink(PATH)'
     でリンク先ディレクトリを確認し、各ディ レクトリに対して
     `walk(PATH)' を実行するとよいでしょう。

     以下の例では、最初のディレクトリ以下にある各ディレクトリに含まれる、非ディレクトリファイルのバイト数を表示します。ただし、CVS
     サブディレクトリより下を見に行きません。

          import os
          from os.path import join, getsize
          for root, dirs, files in os.walk('python/Lib/email'):
              print root, "consumes",
              print sum([getsize(join(root, name)) for name in files]),
              print "bytes in", len(files), "non-directory files"
              if 'CVS' in dirs:
                  dirs.remove('CVS')  # don't visit CVS directories

     次の例では、ツリーをボトムアップで歩行することが不可欠になります;
     `rmdir()' はディレクトリが空になる前に削除させないからです:

          import os
          from os.path import join
          # Delete everything reachable from the directory named in 'top'.
          # CAUTION:  This is dangerous!  For example, if top == '/', it
          # could delete all your disk files.
          for root, dirs, files in os.walk(top, topdown=False):
              for name in files:
                  os.remove(join(root, name))
              for name in dirs:
                  os.rmdir(join(root, name))

     _Added in Python version 2.3_

