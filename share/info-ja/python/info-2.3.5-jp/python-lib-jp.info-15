This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: プロセス管理,  Next: 雑多なシステム情報,  Prev: ファイルとディレクトリ,  Up: os

プロセス管理
------------

プロセスを生成したり管理するために、以下の関数を利用することができます。

様々な `exec*()' 関数が、プロセス内にロードされた新たな
プログラムに与えるための引数からなるリストをとります。どの場合でも、
新たなプログラムに渡されるリストの最初の引数は、ユーザがコマンドライン
で入力する引数ではなく、プログラム自身の名前になります。 C
プログラマにとっては、これはプログラムの `main()' に 渡される `argv[0]'
になります。例えば、 `os.execv('/bin/echo', ['foo', 'bar'])'
は、標準出力に `bar' を出力します; `foo' は無視されたかのように見える
ことでしょう。

`abort()'
     `SIGABRT' シグナルを現在のプロセスに対して生成します。
     UNIXでは、標準設定の動作はコアダンプの生成です; Windows では、
     プロセスは即座に終了コード `3' を返します。 `signal.signal()'
     を使って `SIGABRT' に対する
     シグナルハンドラを設定しているプログラムは異なる挙動を示すので
     注意してください。

     利用できる環境: UNIX、Windows。

`execl(path, arg0, arg1, ...)'

`execle path, arg0, arg1, ..., env'

`execlp file, arg0, arg1, ...'

`execlpe file, arg0, arg1, ..., env'

`execv path, args'

`execve path, args, env'

`execvp file, args'

`execvpe file, args, env'
     これらの関数はすべて、現在のプロセスを置き換える形で新たな
     プログラムを実行します; 現在のプロセスは戻り値を返しません。
     UNIXでは、新たに実行される実行コードは現在のプロセス内に
     ロードされ、呼び出し側と同じプロセス ID を持つことになります。
     エラーは `OSError' 例外として報告されます。

     `l' および `v' のついた `exec*()'
     関数は、コマンドライン引数をどのように渡すかが異なります。 `l'
     型は、コードを書くときにパラメタ数が決まっている場合
     に、おそらくもっとも簡単に利用できます。個々のパラメタは単に
     `execl*()' 関数の追加パラメタとなります。`v' 型は、
     パラメタの数が可変の時に便利で、リストかタプルの引数が ARGS
     パラメタとして渡されます。どちらの場合も、子プロセスに渡す引数は
     動作させようとしているコマンドの名前から始まらなくてはなりません。

     末尾近くに `p' をもつ型 (`execlp()'、 `execlpe()'、 `execvp()'、
     および `execvpe()') は、プログラム FILE を探すために 環境変数
     `PATH' を利用します。環境変数が (次の段で述べる `exec*e()'
     型関数で) 置き換えられる場合、環境変数は `PATH'
     を決定する上の情報源として使われます。 その他の型、`execl()'、
     `execle()'、 `execv()'、 および `execve()' では、実行
     コードを探すために `PATH' を使いません。 PATH
     には適切に設定された絶対パスまたは相対パスが
     入っていなくてはなりません。

     `execle()'、 `execlpe()'、 `execve()'、 および `execvpe()'
     (全て末尾に`e' がついていること に注意してください) では、ENV
     パラメタは新たなプロセスで利用
     される環境変数を定義するためのマップ型でなくてはなりません;
     `execl()'、`execlp()'、 `execv()'、 および `execvp()'
     では、全て新たなプロセスは現在のプロセス
     の環境を引き継ぎます。利用できる環境: UNIX、Windows。

`_exit(n)'
     終了ステータス N でシステムを終了します。このとき
     クリーンアップハンドラの呼び出しや、標準入出力バッファの
     フラッシュなどは行いません。利用できる環境: UNIX、Windows。

     注意: システムを終了する標準的な方法は `sys.exit(N)'
     です。`_exit()' は通常、 `fork()' された後の子プロセス
     でのみ使われます。

以下の終了コードは必須ではありませんが `_exit()' と共に使うこと
ができます。一般に、 メールサーバの外部コマンド配送プログラムのような、
Python で書かれたシステムプログラムに使います。

`EX_OK'
     エラーが起きなかったことを表す終了コード。 利用できる環境: UNIX。
     _Added in Python version 2.3_

`EX_USAGE'
     誤った個数の引数が渡されたときなど、コマンドが間違って使われたことを表す
     終了コード。 利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_DATAERR'
     入力データが間違っていたことを表す終了コード。 利用できる環境:
     UNIX。 _Added in Python version 2.3_

`EX_NOINPUT'
     入力ファイルが存在しなかった、または、読み込み不可だったことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_NOUSER'
     指定されたユーザが存在しなかったことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_NOHOST'
     指定されたホストが存在しなかったことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_UNAVAILABLE'
     要求されたサービスが利用できないことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_SOFTWARE'
     内部ソフトウェアエラーが検出されたことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_OSERR'
     fork できない、pipe
     の作成ができないなど、オペレーティング・システム・エ
     ラーが検出されたことを表す終了コード。 利用できる環境: UNIX。
     _Added in Python version 2.3_

`EX_OSFILE'
     システムファイルが存在しなかった、開けなかった、あるいはその他のエラーが
     起きたことを表す終了コード。 利用できる環境: UNIX。 _Added in
     Python version 2.3_

`EX_CANTCREAT'
     ユーザには作成できない出力ファイルを指定したことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_IOERR'
     ファイルの I/O を行っている途中にエラーが発生したときの終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_TEMPFAIL'
     一時的な失敗が発生したことを表す終了コード。これは、再試行可能な操作の途
     中に、ネットワークに接続できないというような、実際にはエラーではないかも
     知れないことを意味します。 利用できる環境: UNIX。 _Added in Python
     version 2.3_

`EX_PROTOCOL'
     プロトコル交換が不正、不適切、または理解不能なことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`EX_NOPERM'
     操作を行うために十分な許可がなかった（ファイルシステムの問題を除く）こと
     を表す終了コード。 利用できる環境: UNIX。 _Added in Python version
     2.3_

`EX_CONFIG'
     設定エラーが起こったことを表す終了コード。 利用できる環境: UNIX。
     _Added in Python version 2.3_

`EX_NOTFOUND'
     "an entry was not found" のようなことを表す終了コード。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`fork()'
     子プロセスを fork します。子プロセスでは `0' が返り、
     親プロセスでは子プロセスの id が返ります。 利用できる環境: UNIX。

`forkpty()'
     子プロセスを fork します。このとき新しい擬似端末 (psheudo-terminal)
     を子プロセスの制御端末として使います。 親プロセスでは `(PID, FD)'
     からなるペアが返り、FD は擬似端末の マスタ側 (master end)
     のファイル記述子となります。可搬性のある
     アプローチを取るためには、`pty' モジュールを利用してください。
     利用できる環境: いくつかの UNIX系。

`kill(pid, sig)'
     プロセス PID をシグナル SIG で kill します。
     ホストプラットフォームで利用可能なシグナルを特定する定数は
     `signal' モジュールで定義されています。 利用できる環境: UNIX。

`killpg(pgid, sig)'
     プロセスグループ PGID をシグナル SIG 付きで kill する。
     利用できる環境: UNIX。 _Added in Python version 2.3_

`nice(increment)'
     プロセスの "nice 値" に INCREMENT を加えます。新たな nice
     値を返します。利用できる環境: UNIX。

`plock(op)'
     プログラムのセグメント (program segment) をメモリ内でロックします。
     OP (`<sys/lock.h>' で定義されています) にはどのセグメントを
     ロックするかを指定します。利用できる環境: UNIX。

`popen(...)'

`popen2 ...'

`popen3 ...'

`popen4 ...'
     子プロセスを起動し、子プロセスとの通信のために開かれたパイプを返します。
     これらの関数は *Note ファイルオブジェクトの生成::
     節で記述されています。

`spawnl(mode, path, ...)'

`spawnle mode, path, ..., env'

`spawnlp mode, file, ...'

`spawnlpe mode, file, ..., env'

`spawnv mode, path, args'

`spawnve mode, path, args, env'

`spawnvp mode, file, args'

`spawnvpe mode, file, args, env'
     新たなプロセス内でプログラム PATH を実行します。 MODE が
     `P_NOWAIT' の場合、この関数は 新たなプロセスのプロセス ID
     となります。; MODE が `P_WAIT'
     の場合、子プロセスが正常に終了するとその終了コードが返ります。そうでない
     場合にはプロセスを kill したシグナル SIGNAL に対して `-SIGNAL'
     が返ります。Windows では、プロセス ID は
     実際にはプロセスハンドル値になります。

     `l' および `v' のついた `spawn*()'
     関数は、コマンドライン引数をどのように渡すかが異なります。 `l'
     型は、コードを書くときにパラメタ数が決まっている場合
     に、おそらくもっとも簡単に利用できます。個々のパラメタは単に
     `spawnl*()' 関数の追加パラメタとなります。`v' 型は、
     パラメタの数が可変の時に便利で、リストかタプルの引数が ARGS
     パラメタとして渡されます。どちらの場合も、子プロセスに渡す引数は
     動作させようとしているコマンドの名前から始まらなくてはなりません。

     末尾近くに `p' をもつ型 (`spawnlp()'、 `spawnlpe()'、 `spawnvp()'、
     および `spawnvpe()') は、プログラム FILE を探すために 環境変数
     `PATH' を利用します。環境変数が (次の段で述べる `spawn*e()'
     型関数で) 置き換えられる場合、環境変数は `PATH'
     を決定する上の情報源として使われます。 その他の型、`spawnl()'、
     `spawnle()'、 `spawnv()'、 および `spawnve()' では、実行
     コードを探すために `PATH' を使いません。 PATH
     には適切に設定された絶対パスまたは相対パスが
     入っていなくてはなりません。

     `spawnle()'、 `spawnlpe()'、 `spawnve()'、 および `spawnvpe()'
     (全て末尾に`e' がついていること に注意してください) では、ENV
     パラメタは新たなプロセスで利用
     される環境変数を定義するためのマップ型でなくてはなりません;
     `spawnl()'、`spawnlp()'、 `spawnv()'、 および `spawnvp()'
     では、全て新たなプロセスは現在のプロセス の環境を引き継ぎます。

     例えば、以下の `spawnlp()' および `spawnvpe()' 呼び出し:

          import os
          os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')
          
          L = ['cp', 'index.html', '/dev/null']
          os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)

     は等価です。利用できる環境: UNIX、Windows。

     `spawnlp()'、`spawnlpe()'、 `spawnvp()' および `spawnvpe()' は
     Windows では利用できません。 _Added in Python version 1.6_


`P_NOWAIT'

`P_NOWAITO'
     `spawn*()' 関数ファミリに対する MODE パラメタ
     として取れる値です。この値のいずれかを MODE として与えた場合、
     `spawn*()' 関数は新たなプロセスが生成されるとすぐに、 プロセスの
     ID を戻り値として返ります。 利用できる環境: UNIX、Windows。 _Added
     in Python version 1.6_

`P_WAIT'
     `spawn*()' 関数ファミリに対する MODE パラメタ
     として取れる値です。この値を MODE として与えた場合、 `spawn*()'
     関数は新たなプロセスを起動して完了するまで返らず、
     プロセスがうまく終了した場合には終了コードを、シグナルによってプロセス
     が kill された場合には `-SIGNAL' を返します。 利用できる環境:
     UNIX、Windows。 _Added in Python version 1.6_

`P_DETACH'

`P_OVERLAY'
     `spawn*()' 関数ファミリに対する MODE パラメタ
     として取れる値です。これらの値は上の値よりもやや可搬性において劣って
     います。`P_DETACH' は `P_NOWAIT' に似ていますが、
     新たなプロセスは呼び出しプロセスのコンソールから切り離され (detach)
     ます。`P_OVERLAY' が使われた場合、現在のプロセスは
     置き換えられます; 従って`spawn*()' は返りません。 利用できる環境:
     Windows。 _Added in Python version 1.6_

`startfile(path)'
     ファイルを関連付けられたアプリケーションを使って「スタート」します。
     この動作は、 Windows の Explorer 上でのファイルをダブルクリックや、
     コマンドプロンプト (interactive command shell) 上での ファイル名を
     `start' 命令の引数としての実行と同様です:
     ファイルは拡張子が関連付けされているアプリケーション
     (が存在する場合) を使って開かれます。

     `startfile()' は関連付けされたアプリケーションが起動すると
     同時に返ります。アプリケーションが閉じるまで待機させるためのオプション
     はなく、アプリケーションの終了状態を取得する方法もありません。
     PATH 引数は現在のディレクトリからの相対で表します。
     絶対パスを利用したいなら、最初の文字はスラッシュ (`/')
     ではないので注意してください; もし最初の文字がスラッシュ
     なら、システムの背後にある Win32 `ShellExecute()' 関数は
     動作しません。`os.path.normpath()' 関数を使って、Win32 用に
     正しくコード化されたパスになるようにしてください。
     利用できる環境:Windows。 _Added in Python version 2.0_


`system(command)'
     サブシェル内でコマンド (文字列) を実行します。この関数は 標準 C
     関数 `system()' を使って実装されており、 `system()'
     と同じ制限があります。 `posix.environ'、 `sys.stdin'
     等に対する変更を行っても、
     実行されるコマンドの環境には反映されません。

     UNIXでは、戻り値はプロセスの終了ステータスで、`wait()'
     で定義されている書式にコード化されています。 POSIX は `system()'
     関数の戻り値の意味について定義して いないので、Python の `system'
     における戻り値はシステム依存と なることに注意してください。

     Windows では、戻り値は COMMAND を実行した後にシステムシェルから
     返される値で、Windows の環境変数 `COMSPEC' となります:
     `command.com' ベースのシステム (Windows 95, 98 および ME)
     では、この値は常に `0' です; `cmd.exe' ベースのシステム (Windows
     NT, 2000 および XP) では、この値は実行したコマンドの終了
     ステータスです;
     ネイティブでないシェルを使っているシステムについては、
     使っているシェルのドキュメントを参照してください。

     利用できる環境: UNIX、Windows。

`times()'
     (プロセスまたはその他の) 積算時間を秒で表す浮動小数点数からなる、
     5 要素のタプルを返します。タプルの要素は、ユーザ時間 (user time)、
     システム時間 (system time)、子プロセスのユーザ時間、子プロセスの
     システム時間、そして過去のある固定時点からの経過時間で、この順に
     並んでいます。UNIX マニュアルページ `times(2)' または 対応する
     Windows プラットフォーム API ドキュメントを参照してください。
     利用できる環境: UNIX、Windows。

`wait()'
     子プロセスの実行完了を待機し、子プロセスの pid
     と終了コードインジケータ -- 16
     ビットの数で、下位バイトがプロセスを kill
     したシグナル番号、上位バイト が終了ステータス
     (シグナル番号がゼロの場合) -- の入ったタプルを 返します;
     コアダンプファイルが生成された場合、下位バイトの最上桁ビットが
     立てられます。 利用できる環境: UNIX。

`waitpid(pid, options)'
     プロセス id PID で与えられた子プロセスの完了を待機し、
     子プロセスのプロセス id と(`wait()' と同様にコード化された)
     終了ステータスインジケータからなるタプルを返します。
     この関数の動作は OPTIONS によって影響されます。通常の操作では `0'
     にします。利用できる環境: UNIX。

     PID が `0' よりも大きい場合、 `waitpid()'
     は特定のプロセスのステータス情報を要求します。PID が `0'
     の場合、現在のプロセスグループ内の任意の子プロセスの状態
     に対する要求です。PID が `-1' の場合、現在のプロセス
     の任意の子プロセスに対する要求です。PID が `-1' よりも
     小さい場合、プロセスグループ `-PID' (すなわち PID の 絶対値)
     内の任意のプロセスに対する要求です。

`WNOHANG'
     子プロセス状態がすぐに取得できなかった場合にハングアップしてしまわ
     ないようにするための `waitpid()' のオプションです。利用できる環境:
     UNIX。

以下の関数は`system()'、 `wait()'、 あるいは`waitpid()'
が返すプロセス状態コード
を引数にとります。これらの関数はプロセスの配置を決めるために
利用することができます。

`WIFSTOPPED(status)'
     プロセスが停止された (stop) 場合に真を返します。 利用できる環境:
     UNIX。

`WIFSIGNALED(status)'
     プロセスがシグナルによって終了した (exit) 場合に真を返します。
     利用できる環境: UNIX。

`WIFEXITED(status)'
     プロセスが `exit(2)' システムコールで終了した場合に
     真を返します。利用できる環境: UNIX。

`WEXITSTATUS(status)'
     `WIFEXITED(STATUS)' が真の場合、`exit(2)' システム
     コールに渡された整数パラメタを返します。そうでない場合、
     返される値には意味がありません。 利用できる環境: UNIX。

`WSTOPSIG(status)'
     プロセスを停止させたシグナル番号を返します。 利用できる環境: UNIX。

`WTERMSIG(status)'
     プロセスを終了させたシグナル番号を返します。利用できる環境: UNIX


File: python-lib-jp.info,  Node: 雑多なシステム情報,  Prev: プロセス管理,  Up: os

雑多なシステム情報
------------------

`confstr(name)'
     文字列形式によるシステム設定値 (system configuration
     value)を返します。 NAME には取得したい設定名を指定します; この値は
     定義済みのシステム値名を表す文字列にすることができます; 名前は
     多くの標準 (POSIX.1、 UNIX 95、 UNIX 98 その他)
     で定義されています。
     ホストオペレーティングシステムの関知する名前は `confstr_names'
     辞書で与えられています。 このマップ型オブジェクトに入っていない設定
     変数については、 NAME に整数を渡してもかまいません。
     利用できる環境: UNIX。

     NAME に指定された設定値が定義されていない場合、空文字列を返します。

     もし NAME が文字列でかつ不明である場合、 `ValueError'
     を送出します。NAME の指定値がホストシステムでサポートされておらず、
     `confstr_names' にも入っていない場合、`errno.EINVAL'
     をエラー番号として `OSError' を送出します。

`confstr_names'
     `confstr()' が受理する名前を、ホストオペレーティングシステムで
     定義されている整数値に対応付けている辞書です。
     この辞書はシステムでどの
     設定名が定義されているかを決定するために利用できます。
     利用できる環境: UNIX。

`getloadavg()'
     過去 1 分、5
     分、15分間で、システムで走っているキューの平均プロセス数を
     返します。平均負荷が得られない場合には OSError を送出します。
     _Added in Python version 2.3_

`sysconf(name)'
     整数値のシステム設定値を返します。 NAME
     で指定された設定値が定義されていない場合、`-1' が返されます。NAME
     に関するコメントとしては、`confstr()'
     で述べた内容が同様に当てはまります; 既知の設定名についての情報を
     与える辞書は `sysconf_names' で与えられています。 利用できる環境:
     UNIX。

`sysconf_names'
     `sysconf()' が受理する名前を、ホストオペレーティングシステムで
     定義されている整数値に対応付けている辞書です。
     この辞書はシステムでどの設定名が定義されているかを決定するために
     利用できます。利用できる環境: UNIX。

以下のデータ値はパス名編集操作をサポートするために利用されます。
これらの値は全てのプラットフォームで定義されています。

パス名に対する高レベルの操作は `os.path' モジュールで 定義されています。

`curdir'
     現在のディレクトリ参照するためにオペレーティングシステムで使われる
     文字列定数です。 例: POSIX では `'.'' 、Machintosh では`':'' 。
     `os.path' からも利用できます。

`pardir'
     親ディレクトリを参照するためにオペレーティングシステムで使われる
     文字列定数です。 例: POSIX では `'..'' 、Machintosh では`'::'' 。
     `os.path' からも利用できます。

`sep'
     パス名を要素に分割するためにオペレーティングシステムで利用されている
     文字で、例えば POSIX では `/' で、Machintosh では `:'
     です。しかし、このことを知っているだけではパス名を
     解析したり、パス名同士を結合したりするには不十分です --
     こうした操作には `os.path.split()' や `os.path.join()'
     を使ってください-- が、たまに便利なこともあります。 `os.path'
     からも利用できます。

`altsep'
     文字パス名を要素に分割する際にオペレーティングシステムで利用されるもう
     一つの文字で、分割文字が一つしかない場合には `None' になります。
     この値は `sep' がバックスラッシュとなっている DOS や Windows
     システムでは `/' に設定されています。 `os.path'
     からも利用できます。

`extsep'
     ベースのファイル名と拡張子を分ける文字。 たとえば、`os.py' では
     `.' です。 `os.path' からも利用できます。 _Added in Python version
     2.2_

`pathsep'
     (`PATH' のような) サーチパス内の要素を分割するために
     オペレーティングシステムが慣習的に用いる文字で、POSIX における `:'
     や DOS および Windows における `;' に相当します。 `os.path'
     からも利用できます。

`defpath'
     `exec*p*()' や `spawn*p*()' において、環境変数辞書内に `'PATH''
     キーがない場合に使われる標準設定のサーチパスです。 `os.path'
     からも利用できます。

`linesep'
     現在のプラットフォーム上で行を分割 (あるいは終端)
     するために用いられ ている文字列です。この値は例えば POSIX
     での`'\n'' や MacOS での `'\r''
     のように、単一の文字にもなりますし、例えば DOS や Windows での
     `'\r\n'' のように複数の文字列にもなります。


File: python-lib-jp.info,  Node: ospath,  Next: dircache,  Prev: os,  Up: 汎用オペレーティングシステムサービス

共通のパス名操作
================

共通のパス名操作。

このモジュールには、パス名を操作する便利な関数が定義されています。

_これらの関数の多くはWindowsの一律命名規則（UNCパス名）を正しく
サポートしていません。`splitunc()'と`ismount()'は正し
くUNCパス名を操作できます。_

`abspath(path)'
     PATHの標準化された絶対パスを返します。
     たいていのプラットフォームでは、 `normpath(join(os.getcwd(),
     PATH))'と同じ結果になります。 _Added in Python version 1.5.2_

`basename(path)'
     パス名PATHの末尾のファイル名を返します。
     これは`split(PATH)'で返されるペアの２番目の要素です。
     この関数が返す値はUNIXの `basename'とは異なります；
     UNIXの`basename'は`'/foo/bar/''に対して
     `'bar''を返しますが、`basename()'は空文字列(`''') を返します。

`commonprefix(list)'
     パスのLISTの中の共通する最長のプレフィックスを（パス名の１文字１文
     字を判断して）返します。
     もしLISTが空なら、空文字列(`''')を返します。
     これは一度に１文字を扱うため、不正なパスを返すことがあるかもしれませんの
     で注意して下さい。

`dirname(path)'
     パスPATHのディレクトリ名を返します。
     これは`split(PATH)'で返されるペアの最初の要素です。

`exists(path)'
     PATHが存在するなら、`True'を返します。

`expanduser(path)'
     与えられた引数の最初の`~'または`~USER'を、USERの
     ホームディレクトリのパスに置き換えて返します。
     最初が`~{}'なら、環境変数の`HOME'の値に置き換えられます；
     `~USER'なら、ビルトインモジュール `pwd'
     を使ってパスワードディレクトリから該当 するものを検索します。
     もし置き換えに失敗したり、引数のパスがチルダで始まっていなかったら、パス
     をそのまま返します。 MacintoshではPATHをそのまま返します。

`expandvars(path)'
     引数のパスを環境変数に展開して返します。
     引数の中の`$NAME'または`${NAME}'の文字列が
     環境変数のNAMEに置き換えられます。
     不正な変数名や存在しない変数名の場合には変換されず、そのまま返します。
     MacintoshではPATHをそのまま返します。

`getatime(path)'
     PATHに最後にアクセスした時刻を、エポック（`time'モジュール
     を参照）からの経過時間を示す秒数で返します。
     ファイルが存在しなかったりアクセスできない場合は`os.error'を発
     生します。 _Changed in Python version 2.3_ _Added in Python
     version 1.5.2_

`getmtime(path)'
     PATHの最終更新時刻を、エポック（`time'モジュールを参照）
     からの経過時間を示す秒数で返します。
     ファイルが存在しなかったりアクセスできない場合は`os.error'を発
     生します。 _Changed in Python version 2.3_ _Added in Python
     version 1.5.2_

`getctime(path)'
     システムによって、ファイルの最終変更時刻 (UNIX のような システム)
     や 作成時刻 (Windows のようなシステム) をシステムの ctime
     で返します。
     戻り値はエポック（`time'モジュールを参照）からの経過秒数を
     示す数値です。
     ファイルが存在しなかったりアクセスできない場合は`os.error'を発
     生します。 _Added in Python version 2.3_

`getsize(path)'
     ファイルPATHのサイズをバイト数で返します。
     ファイルが存在しなかったりアクセスできない場合は`os.error'を発
     生します。 _Added in Python version 1.5.2_

`isabs(path)'
     PATHが絶対パス（スラッシュで始まる）なら、`True'を返します。

`isfile(path)'
     PATHが存在する正しいファイルなら、TRUEを返します。
     シンボリックリンクの場合にはその実体をチェックするので、同じパスに対して
     `islink()'と`isfile()'の両方がTRUEを返すことがあ ります。

`isdir(path)'
     PATHが存在するなら、`True'を返します。
     シンボリックリンクの場合にはその実体をチェックするので、同じパスに対して
     `islink()'と`isfile()'の両方がTRUEを返すことがあ ります。

`islink(path)'
     PATHがシンボリックリンクなら、`True'を返します。
     シンボリックリンクがサポートされていないプラットフォームでは、常に
     `False'を返します。

`ismount(path)'
     パス名PATHがマウントポイント"mount point"（ファイルシステムの
     中で異なるファイルシステムがマウントされているところ）なら、`True'
     を返します： この関数はPATHの親ディレクトリである`PATH/..'が
     PATHと異なるデバイス上にあるか、あるいは`PATH/..'と
     PATHが同じデバイス上の同じi-nodeを指しているかをチェックします--
     これによって全てのUNIXとPOSIX標準でマウントポイントが検出できま
     す。

`join(path1[, path2[, ...]])'
     パスに１つあるいはそれ以上のパスの要素をうまく結合します。
     付け加える要素に絶対パスがあれば、それより前の要素は全て破棄され、以降の
     要素を結合します。
     戻り値はPATH1と省略可能なPATH2以降を結合したもので、
     PATH2が空文字列でないなら、ディレクトリの区切り文字(`os.sep')
     が各要素の間に挿入されます。
     Windowsでは各ドライブに対してカレントディレクトリがあるので、
     `os.path.join("c:", "foo")'によって、
     `c:\\foo'ではなく、ドライブ`C:'上の
     カレントディレクトリからの相対パス（`c:foo'）が返されます。

`normcase(path)'
     パス名の大文字、小文字をシステムの標準にします。
     UNIXではそのまま返します。大文字、小文字を区別しないファイルシステム
     ではパス名を小文字に変換します。
     Windowsでは、スラッシュをバックスラッシュに変換します。

`normpath(path)'
     パス名を標準化します。
     余分な区切り文字や上位レベル参照を削除します。例えば、`A//B'、
     `A/./B'、`A/foo/../B'は全て`A/B'になります。
     大文字、小文字は標準化しません（それには`normcase()'を使って下
     さい）。 Windowsでは、スラッシュをバックスラッシュに変換します。

`realpath(path)'
     パスの中のシンボリックリンクを取り除いて、標準化したパスを返します。
     利用可能：UNIX。 _Added in Python version 2.2_

`samefile(path1, path2)'
     ２つの引数であるパス名が同じファイルあるいはディレクトリを指していれば（
     同じデバイスナンバーとi-nodeナンバーで示されていれば）、`True'を返
     します。
     どちらかのパス名で`os.stat()'の呼び出しに失敗した場合には、例外
     が発生します。 利用可能：Macintosh、UNIX

`sameopenfile(fp1, fp2)'
     FP1とFP2が同じファイルオブジェクトを指していたら、
     `True'を返します。
     ２つのファイルオブジェクトが異なるファイルディスクリプタを示すこともあり
     ます。 利用可能：Macintosh、UNIX

`samestat(stat1, stat2)'
     statタプルSTAT1とSTAT2が同じファイルを指していたら、
     `True'を返します。 これらのタプルは`fstat()'、`lstat()'や
     `stat()'で返されたものでかまいません。
     この関数は、`samefile()'と`sameopenfile()'で使われるの
     と同様なものを背後に実装しています。 利用可能：Macintosh、UNIX

`split(path)'
     パス名PATHを`(HEADとTAIL)'のペアに分割します。
     TAILはパスの構成要素の末尾で、HEADはそれより前の部分です。
     TAILはスラッシュを含みません；もしPATHの最後にスラッシュがあ
     れば、TAILは空文字列になります。
     もしPATHにスラッシュがなければ、HEADは空文字列になります。
     PATHが空文字列なら、HEADとTAILのどちらも空文字列になり ます。
     HEADの末尾のスラッシュは、HEADがルートディレクトリ（１つ以上
     のスラッシュのみ）でない限り、取り除かれます。
     ほとんど全ての場合、`join(HEAD, TAIL)'の結果が
     PATHと等しくなります（ただ１つの例外は、複数のスラッシュが
     HEADとTAILを分けている時です）。

`splitdrive(path)'
     パス名PATHを`(DRIVE,TAIL)'のペアに分割します。
     DRIVEはドライブ名か、空文字列です。
     ドライブ名を使用しないシステムでは、DRIVEは常に空文字列です。
     全ての場合に`DRIVE + TAIL'はPATHと等しくなりま す。 _Added in
     Python version 1.3_

`splitext(path)'
     パス名PATHを`(ROOT, EXT)'のペアにします。 `ROOT + EXT ==
     PATH'になります。
     EXTは空文字列か１つのピリオドで始まり、多くても１つのピリオドを含
     みます。

`walk(path, visit, arg)'
     PATHをルートとする各ディレクトリに対して（もしPATHがディレク
     トリならPATHも含みます）、`(ARG, DIRNAME,
     NAMES)'を引数として関数VISITを呼び出します。
     引数DIRNAMEは訪れたディレクトリを示し、引数NAMESはそのディレ
     クトリ内のファイルのリスト（`os.listdir(DIRNAME)'で得られる）
     です。 関数VISITによってNAMESを変更して、DIRNAME以下の対象と
     なるディレクトリのセットを変更することもできます。例えば、あるディレクト
     リツリーだけ関数を適用しないなど。
     （NAMESで参照されるオブジェクトは、`del'あるいはスライスを
     使って正しく変更しなければなりません。）

     _Notice:_
     ディレクトリへのシンボリックリンクはサブディレクトリとして扱われないの
     で、`walk()'による操作対象とはされません。
     ディレクトリへのシンボリックリンクを操作対象とするには、
     `os.path.islink(FILE)'と`os.path.isdir(FILE)'
     で識別して、`walk()'で必要な操作を実行しなければなりません。

     _Note:_ 新たに追加された``os'.walk()' ジェネレータを
     使用すれば、同じ処理をより簡単に行う事ができます。

`supports_unicode_filenames'
     任意のユニコード文字列を（ファイルシステムの制限内で）
     ファイルネームに使うことが可能で、`os.listdir'がユニコード文字列の
     引数に対してユニコードを返すなら、真を返します。 _Added in Python
     version 2.3_


File: python-lib-jp.info,  Node: dircache,  Next: stat,  Prev: ospath,  Up: 汎用オペレーティングシステムサービス

キャッシュされたディレクトリ一覧の生成
======================================

キャッシュメカニズムを備えたディレクトリ一覧生成。

`durcache' モジュールはキャッシュされた情報を使って
ディレクトリ一覧を読み出すための関数を定義しています。
キャッシュはディレクトリの MTIME に応じて無効化されます。
さらに、一覧中のディレクトリにスラッシュ ('/') を追加することで
ディレクトリであると分かるようにするための関数も定義しています。

`dircache' モジュールは以下の関数を定義しています:

`listdir(path)'
     `os.listdir()' によって得た PATH のディレクトリ一覧を
     返します。PATH を変えない限り、以降の `listdir()'
     を呼び出してもディレクトリ構造を読み込みなおすことはしないので
     注意してください。

     返されるリストは読み出し専用であると見なされるので注意してください
     (おそらく将来のバージョンではタプルを返すように変更されるはず ?
     です)。

`opendir(path)'
     `listdir()' と同じです。以前のバージョンとの互換性のために
     定義されています。

`annotate(head, list)'
     LIST を HEAD の相対パスからなるリストとして、
     各パスがディレクトリを指す場合には `/' をパス名の後ろ
     に追加したものに置き換えます。

     >>> import dircache
     >>> a=dircache.listdir('/')
     >>> a=a[:] # Copy the return value so we can change 'a'
     >>> a
     ['bin', 'boot', 'cdrom', 'dev', 'etc', 'floppy', 'home', 'initrd', 'lib', 'lost+
     found', 'mnt', 'proc', 'root', 'sbin', 'tmp', 'usr', 'var', 'vmlinuz']
     >>> dircache.annotate('/', a)
     >>> a
     ['bin/', 'boot/', 'cdrom/', 'dev/', 'etc/', 'floppy/', 'home/', 'initrd/', 'lib/
     ', 'lost+found/', 'mnt/', 'proc/', 'root/', 'sbin/', 'tmp/', 'usr/', 'var/', 'vm
     linuz']


File: python-lib-jp.info,  Node: stat,  Next: statcache,  Prev: dircache,  Up: 汎用オペレーティングシステムサービス

`stat()' の返す内容を解釈する
=============================

`os.stat()'、`os.lstat()' および `os.fstat()'
の返す内容を解釈するためのユーティリティ群。

`stat' モジュールでは、`os.stat()'、 `os.lstat()' および `os.fstat()'
(存在すれば) の返す
内容を解釈するための定数や関数を定義しています。`stat()'、
`fstat()'、および `lstat()' の関数呼び出しについての
完全な記述はシステムのドキュメントを参照してください。

`stat' モジュールでは、特殊なファイル型を判別するための以下の
関数を定義しています:

`S_ISDIR(mode)'
     ファイルのモードがディレクトリの場合にゼロでない値を返します。

`S_ISCHR(mode)'
     ファイルのモードがキャラクタ型の特殊デバイスファイルの場合にゼロでない値を返します。

`S_ISBLK(mode)'
     ファイルのモードがブロック型の特殊デバイスファイルの場合にゼロでない値を返します。

`S_ISREG(mode)'
     ファイルのモードが通常ファイルの場合にゼロでない値を返します。

`S_ISFIFO(mode)'
     ファイルのモードが FIFO (名前つきパイプ)
     の場合にゼロでない値を返します。

`S_ISLNK(mode)'
     ファイルのモードがシンボリックリンクの場合にゼロでない値を返します。

`S_ISSOCK(mode)'
     ファイルのモードがソケットの場合にゼロでない値を返します。

より一般的なファイルのモードを操作するための二つの関数が定義されています:

`S_IMODE(mode)'
     `os.chmod()' で設定することのできる一部のファイルモード --
     すなわち、ファイルの許可ビット (permission bits) に加え、
     (サポートされているシステムでは) スティッキービット (sticky bit)、
     実行グループ ID 設定 (set-group-id) および 実行ユーザ ID 設定
     (set-user-id) ビット -- を返します。

`S_IFMT(mode)'
     ファイルの形式を記述しているファイルモードの一部 (上記の `S_IS*()'
     関数で使われます) を返します。

通常、ファイルの形式を調べる場合には `os.path.is*()' 関数
を使うことになります; ここで挙げた関数は同じファイルに対して
複数のテストを同時に行いたいが、`stat()' システムコール
を何度も呼び出してオーバヘッドが生じるのを避けたい場合に便利です。
これらはまた、ブロック型およびキャラクタ型デバイスに対するテスト
のように、`os.path' で扱うことのできないファイルの
情報を調べる際にも便利です。

以下の全ての変数は、`os.stat()'、 `os.fstat()'、または `os.lstat()'
が返す 10 要素のタプルにおけるインデクスを単に
シンボル定数化したものです。

`ST_MODE'
     I ノードの保護モード。

`ST_INO'
     I ノード番号。

`ST_DEV'
     I ノードが存在するデバイス。

`ST_NLINK'
     該当する I ノードへのリンク数。

`ST_UID'
     ファイルの所持者のユーザ ID。

`ST_GID'
     ファイルの所持者のグループ ID。

`ST_SIZE'
     通常ファイルではバイトサイズ; いくつかの特殊ファイルでは処理待ちの
     データ量。

`ST_ATIME'
     最後にアクセスした時刻。

`ST_MTIME'
     最後に変更された時刻。

`ST_CTIME'
     オペレーティングシステムから返される"ctime"。あるOS(UNIXなど)では最
     後にメタデータが更新された時間となり、別のOS(Windowsなど)では作成時間と
     なります(詳細については各プラットフォームのドキュメントを参照してください)。

"ファイルサイズ" の解釈はファイルの型によって異なります。
通常のファイルの場合、サイズはファイルの大きさをバイトで表した
ものです。ほとんどの UNIX 系 (特に Linux) における FIFO やソケット
の場合、"サイズ" は `os.stat()'、 `os.fstat()'、 あるいは `os.lstat()'
を呼び出した時点で読み出し待ちであった データのバイト数になります;
この値は時に有用で、特に上記の特殊なファイル
を非ブロックモードで開いた後にポーリングを行いたいといった場合に
便利です。他のキャラクタ型およびブロック型デバイスにおけるサイズ
フィーるの意味はさらに異なっていて、背後のシステムコールの実装に
よります。

例を以下に示します:

     import os, sys
     from stat import *
     
     def walktree(top, callback):
         '''recursively descend the directory tree rooted at top,
            calling the callback function for each regular file'''
     
         for f in os.listdir(top):
             pathname = os.path.join(top, f)
             mode = os.stat(pathname)[ST_MODE]
             if S_ISDIR(mode):
                 # It's a directory, recurse into it
                 walktree(pathname, callback)
             elif S_ISREG(mode):
                 # It's a file, call the callback function
                 callback(pathname)
             else:
                 # Unknown file type, print a message
                 print 'Skipping %s' % pathname
     
     def visitfile(file):
         print 'visiting', file
     
     if __name__ == '__main__':
         walktree(sys.argv[1], visitfile)


File: python-lib-jp.info,  Node: statcache,  Next: statvfs,  Prev: stat,  Up: 汎用オペレーティングシステムサービス

`os.stat()' の最適化
====================

ファイルの stat を調べ、その結果を記憶します。

_This is deprecated in Python 2.2.   キャッシュを使わずに ``os'.stat()'
を直接 使ってください;
キャッシュはそれを使うアプリケーションに非常に高い
レベルの脆弱性をもたらし、キャッシュ管理のサポートを追加する
ことでアプリケーションのソースコードを難解にしてしまいます。_

`statcache' モジュールは `os.stat()' を最後に呼び出
した際の値を記憶することによる最適化機能を提供します。

`statcache' モジュールでは以下の関数を定義しています:

`stat(path)'
     このモジュールの主要なエントリポイントです。

     `os.stat()' と同じですが、将来同じ呼び出しが行われた
     ときの為に結果を記憶しておきます。

その他の関数はキャッシュやその一部を消去するために用いられます。

`reset()'
     キャッシュを消去します: これまでの全ての `stat()' 呼び出し
     による結果を忘却します。

`forget(path)'
     `stat(PATH)' のキャッシュが存在すれば、それを忘却します。

`forget_prefix(prefix)'
     PREFIX で始まる PATH に対する `stat(PATH)'
     の結果をすべて忘却します。

`forget_dir(prefix)'
     PREFIX で始まる PATH に対する `stat(PATH)'
     の結果を、`stat(PREFIX)' も含めてすべて忘却します。

`forget_except_prefix(prefix)'
     `forget_prefix()' に似ていますが、PREFIX で _始まらない_ 全ての
     PATH について忘却します。

以下に例を示します:

     >>> import os, statcache
     >>> statcache.stat('.')
     (16893, 2049, 772, 18, 1000, 1000, 2048, 929609777, 929609777, 929609777)
     >>> os.stat('.')
     (16893, 2049, 772, 18, 1000, 1000, 2048, 929609777, 929609777, 929609777)


File: python-lib-jp.info,  Node: statvfs,  Next: filecmp,  Prev: statcache,  Up: 汎用オペレーティングシステムサービス

`os.statvfs()' で使われる定数群
===============================

`os.statvfs()' の返す値を解釈するために使われる定数群。

`statvfs' モジュールでは、`os.statvfs()' の返す値
を解釈するための定数を定義しています。`os.statvfs()' は
"マジックナンバ" を記憶せずにタプルを生成して返します。
このモジュールで定義されている各定数は `os.statvfs()' が
返すタプルにおいて、特定の情報が収められている各エントリへの
_インデクス_ です。

`F_BSIZE'
     選択されているファイルシステムのブロックサイズです。

`F_FRSIZE'
     ファイルシステムの基本ブロックサイズです。

`F_BLOCKS'
     ブロック数の総計です。

`F_BFREE'
     空きブロック数の総計です。

`F_BAVAIL'
     非スーパユーザが利用できる空きブロック数です。

`F_FILES'
     ファイルノード数の総計です。

`F_FFREE'
     空きファイルノード数の総計です。

`F_FAVAIL'
     非スーパユーザが利用できる空きノード数です。

`F_FLAG'
     フラグで、システム依存です: `statvfs()' マニュアルページを
     参照してください。

`F_NAMEMAX'
     ファイル名の最大長です。


File: python-lib-jp.info,  Node: filecmp,  Next: popen2,  Prev: statvfs,  Up: 汎用オペレーティングシステムサービス

ファイルおよびディレクトリの比較
================================

ファイル群を効率的に比較します。

`filecmp' モジュールでは、ファイルおよびディレクトリを
比較するため、様々な時間／正確性のトレードオフに関するオプションを
備えた関数を定義しています。

`filecmp' モジュールでは以下の関数を定義しています:

`cmp(f1, f2[, shallow[, use_statcache]])'
     名前が F1 および F2 のファイルを比較し、二つのファイルが
     同じらしければ `True' を返し、そうでなければ `false' を 返します。

     SHALLOW が与えられておりかつ偽でなければ、`os.stat()'
     の返すシグネチャが一致するファイルは同じであると見なされます。
     _Changed in Python version 2.3_

     この関数で比較されたファイルは `os.stat()' シグネチャが
     変更されるまで再び比較されることはありません。USE_STATCACHE
     を真にすると、キャッシュ無効化機構を失敗させます -- そのため、
     `statcache' のキャッシュから古いファイル stat 値が 使われます。

     可搬性と効率のために、個の関数は外部プログラムを一切呼び出さないので
     注意してください。

`cmpfiles(dir1, dir2, common[, shallow[, use_statcache]])'
     ファイル名からなる 3つのリスト: MATCH、MISMATCH、 ERRORS
     を返します。MATCH には双方のディレクトリで
     一致したファイルのリストが含まれ、MISMATCH にはそうでない
     ファイル名のリストが入ります。そして ERRORS は比較されなかった
     ファイルが列挙されます。ファイルによっては、ユーザにそのファイル
     を読む権限がなかったり、比較を完了することができなかった場合以外
     のその他諸々の理由により、 ERRORS に列挙されることがあります。

     引数 COMMON は両方のディレクトリにあるファイルのリストです。 引数
     SHALLOW および USE_STATCACHE はその意味も標準 の設定も
     `filecmp.cmp()' と同じです。

例:

     >>> import filecmp
     >>> filecmp.cmp('libundoc.tex', 'libundoc.tex')
     True
     >>> filecmp.cmp('libundoc.tex', 'lib.tex')
     False

* Menu:

* dircmp クラス::


File: python-lib-jp.info,  Node: dircmp クラス,  Prev: filecmp,  Up: filecmp

`dircmp' クラス
---------------

`dircmp' のインスタンスは以下のコンストラクタで生成されます:

`dircmp(a, b[, ignore[, hide]])'
     ディレクトリ A および B を比較するための新しいディレクトリ
     比較オブジェクトを生成します。IGNORE は比較の際に無視する
     ファイル名のリストで、標準の設定では `['RCS', 'CVS', 'tags']'
     です。HIDE は表示しない名前のリストで、標準の設定では `[os.curdir,
     os.pardir]' です。

`dircmp' クラスは以下のメソッドを提供しています:

`report()'
     A および B の間の比較結果を (`sys.stdout' に) 出力します。

`report_partial_closure()'
     A および B およびそれらの直下にある共通のサブディレクトリ
     間での比較結果を出力します。

`report_full_closure()'
     A および B およびそれらの共通のサブディレクトリ間での 比較結果を
     (再帰的に比較して) 出力します。

`dircmp' は、比較しているディレクトリツリーに関する様々な
種類の情報を取得するために使えるような、多くの興味深い属性を提供
しています。

`__getattr__()' フックを経由すると、全ての属性を
のろのろと計算するため、速度上のペナルティを受けないのは
計算処理の軽い属性を使ったときだけなので注意してください。

`left_list'
     A にあるファイルおよびサブディレクトリです。 HIDE および IGNORE
     でフィルタされています。

`right_list'
     B にあるファイルおよびサブディレクトリです。 HIDE および IGNORE
     でフィルタされています。

`common'
     A および B の両方にあるファイルおよびサブディレクトリです。

`left_only'
     A だけにあるファイルおよびサブディレクトリです。

`right_only'
     B だけにあるファイルおよびサブディレクトリです。

`common_dirs'
     A および B の両方にあるサブディレクトリです。

`common_files'
     A および B の両方にあるファイルです。

`common_funny'
     A および B の両方にあり、ディレクトリ間で
     タイプが異なるか、`os.stat()' がエラーを報告するような 名前です。

`same_files'
     A および B 両方にあり、一致するファイルです。

`diff_files'
     A および B 両方にあるが、一致しないファイルです。

`funny_files'
     A および B 両方にあるが、比較されなかったファイルです。

`subdirs'
     `common_dirs' のファイル名を `dircmp' オブジェクトに
     対応付けた辞書です。


File: python-lib-jp.info,  Node: popen2,  Next: datetime,  Prev: filecmp,  Up: 汎用オペレーティングシステムサービス

アクセス可能な I/O ストリームを持つ子プロセス生成
=================================================

アクセス可能な I/O ストリームを持つ子プロセス生成。

このモジュールにより、UNIX および Windows でプロセスを起動し、
その入力／出力／エラー出力パイプに接続し、そのリターンコード
を取得することができます。

Python 2.0 から、この機能は `os' モジュールにある
関数を使って得ることができるので注意してください。 `os'
にある関数はこのモジュールにおけるファクトリ関数
と同じ名前を持ちますが、戻り値に関する取り決めは `os'
の関数の方がより直感的です。

このモジュールで提供されている第一のインタフェースは 3 つの
ファクトリ関数です。これらの関数のいずれも、BUFSIZE を 指定した場合、
I/O パイプのバッファサイズを決定します。 MODE
を指定する場合、文字列`'b'' または `'t'' でなければなりません; Windows
では、ファイルオブジェクトを
バイナリあるいはテキストモードのどちらで開くかを決めなければ
なりません。MODE の標準の値は `'t'' です。

子プロセスからのリターンコードを取得するには、`Popen3' および `Popen4'
クラスの `poll()' あるいは `wait()' メソッドを使うしかありません;
これらの機能は UNIXでしか利用できません。この情報は `popen2()'、
`popen3()'、および `popen4()' 関数、 あるいは `os'
モジュールにおける同等の関数の 使用によっては得ることができません。

`popen2(cmd[, bufsize[, mode]])'
     CMD をサブプロセスとして実行します。ファイルオブジェクト
     `(CHILD_STDOUT, CHILD_STDIN)' を返します。

`popen3(cmd[, bufsize[, mode]])'
     CMD をサブプロセスとして実行します。ファイルオブジェクト
     `(CHILD_STDOUT, CHILD_STDIN, CHILD_STDERR)' を返します。

`popen4(cmd[, bufsize[, mode]])'
     CMD をサブプロセスとして実行します。ファイルオブジェクト
     `(CHILD_STDOUT_AND_STDERR, CHILD_STDIN)'.  _Added in Python
     version 2.0_

UNIXでは、ファクトリ関数によって返されるオブジェクトを定義している
クラスも利用することができます。これらのオブジェクトは Windows 実装
で使われていないため、そのプラットフォーム上で使うことはできません。

`Popen3(cmd[, capturestderr[, bufsize]])'
     このクラスは子プロセスを表現します。通常、 `Popen3'
     インスタンスは上で述べた `popen2()' および `popen3()'
     ファクトリ関数を使って生成されます。

     `Popen3' オブジェクトを生成するためにいずれかのヘルパー関数を
     使っていないのなら、CMD パラメタは子プロセスで実行する
     シェルコマンドになります。CAPTURESTDERR フラグが真であれば、
     このオブジェクトが子プロセスの標準エラー出力を捕獲しなければならない
     ことを意味します。標準の値は偽です。BUFSIZE パラメタが存在
     する場合、子プロセスへの／からの I/O バッファのサイズを指定します。

`Popen4(cmd[, bufsize])'
     `Popen3' に似ていますが、標準エラー出力を標準出力と同じファイル
     オブジェクトで捕獲します。このオブジェクトは通常 `popen4()' で
     生成されます。 _Added in Python version 2.0_

* Menu:

* Popen3 および Popen4 オブジェクト::
* フロー制御の問題::


File: python-lib-jp.info,  Node: Popen3 および Popen4 オブジェクト,  Next: フロー制御の問題,  Prev: popen2,  Up: popen2

Popen3 および Popen4 オブジェクト
---------------------------------

`Popen3' および `Popen4' クラスのインスタンスは以下の
メソッドを持ちます:

`poll()'
     子プロセスがまだ終了していない際には `-1' を、そうでない場合には
     リターンコードを返します。

`wait()'
     子プロセスの状態コード出力を待機して返します。状態コードでは
     子プロセスのリターンコードと、プロセスが `exit()' によって
     終了したか、あるいはシグナルによって死んだかについての情報を
     符号化しています。状態コードの解釈を助けるための関数は `os'
     モジュールで定義されています; *Note プロセス管理:: 節の `W*()'
     関数ファミリを 参照してください。

以下の属性も利用可能です:

`fromchild'
     子プロセスからの出力を提供するファイルオブジェクトです。 `Poepn4'
     インスタンスの場合、この値は標準出力と標準
     エラー出力の両方を提供するオブジェクトになります。

`tochild'
     子プロセスへの入力を提供するファイルオブジェクトです。

`childerr'
     コンストラクタに CAPTURESTDERR を渡した際には子プロセスからの
     標準エラーを提供するファイルオブジェクトで、そうでない場合 `None'
     になります。 `Popen4' インスタンスでは、この値は常に `None'
     になります。

`pid'
     子プロセスのプロセス番号です。


File: python-lib-jp.info,  Node: フロー制御の問題,  Prev: Popen3 および Popen4 オブジェクト,  Up: popen2

フロー制御の問題
----------------

何らかの形式でプロセス間通信を利用している際には常に、制御フローに
ついて注意深く考える必要があります。これはこのモジュール (あるいは `os'
モジュールにおける等価な機能) で生成される
ファイルオブジェクトの場合にもあてはまります。

親プロセスが子プロセスの標準出力を読み出している一方で、子プロセスが
大量のデータを標準エラー出力に書き込んでいる場合、この子プロセスから
出力を読み出そうとするとデッドロックが発生します。
同様の状況は読み書きの他の組み合わせでも生じます。本質的な要因は、
一方のプロセスが別の
プロセスでブロック型の読み出しをしている際に、`_PC_PIPE_BUF'
バイトを超えるデータがブロック型の入出力を行うプロセスによって書き込ま
れることにあります。

こうした状況を扱うには幾つかのやりかたがあります。

多くの場合、もっとも単純なアプリケーションに対する変更は、
親プロセスで以下のようなモデル:

     import popen2
     
     r, w, e = popen2.popen3('python slave.py')
     e.readlines()
     r.readlines()
     r.close()
     e.close()
     w.close()

に従うようにし、子プロセスで以下:

     import os
     import sys
     
     # note that each of these print statements
     # writes a single long string
     
     print >>sys.stderr, 400 * 'this is a test\n'
     os.close(sys.stderr.fileno())
     print >>sys.stdout, 400 * 'this is another test\n'

のようなコードにすることでしょう。

とりわけ、`sys.stderr' は全てのデータを書き込んた後に閉じ
られなければならないということに注意してください。さもなければ、
`readlines()' は返ってきません。また、 `sys.stderr.close()' が `stderr'
を閉じないように `os.close()'
を使わなければならないことにも注意してください。
(そうでなく、`sys.stderr' に関連付けると、暗黙のうちに閉じられて
しまうので、それ以降のエラーが出力されません)。

より一般的なアプローチををサポートする必要があるアプリケーションでは、
パイプ経由の I/O を `select()' ループでまとめるか、 個々の `popen*()'
関数や `Popen*'
クラスが提供する各々のファイルに対して、個別のスレッドを使って
読み出しを行います。

