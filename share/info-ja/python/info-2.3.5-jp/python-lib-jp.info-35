This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: mailcap,  Next: mailbox,  Prev: email,  Up: インターネット上のデータの操作

mailcap ファイルの操作
======================

mailcap ファイルの操作。

mailcap ファイルは、メイルリーダや Web ブラウザのような MIME 対応の
アプリケーションが、異なる MIME タイプのファイルにどのように反応
するかを設定するために使われます ("mailcap" の名前は "mail capability"
から取られました)。 例えば、ある mailcap ファイルに `video/mpeg; xmpeg
%s' のような 行が入っていたとします。ユーザが email メッセージや Web
ドキュメント 上でその MIME タイプ `video/mpeg' に遭遇すると、 `%s'
はファイル名 (通常テンポラリファイルに属するものになります)
に置き換えられ、ファイルを閲覧するために `xmpeg' プログラムが
自動的に起動されます。

mailcap の形式は RFC 1524 , "A User Agent Configuration Mechanism For
Multimedia Mail Format Information"
で文書化されていますが、この文書はインターネット標準ではありません。
しかしながら、 mailcap ファイルはほとんどの UNIX システムで
サポートされています。

`findmatch(caps, MIMEtype                            [, key[, filename[, plist]]])'
     2 要素のタプルを返します; 最初の要素は文字列で、実行すべき
     コマンド (`os.system()' に渡されます) が入っています。
     二つめの要素は与えられた MIME タイプに対する mailcap エントリです。
     一致する MIME タイプが見つからなかった場合、`(None, None)' が
     返されます。

     KEY は desired フィールドの値で、
     実行すべき動作のタイプを表現します; ほとんどの場合、単に MIME
     形式のデータ本体を見たいと思うので、標準の値は 'view'
     になっています。与えられた MIME 型をもつ新たなデータ本体を作成した
     場合や、既存のデータ本体を置き換えたい場合には、'view' の他に
     'compose' および 'edit' を取ることもできます。

     これらフィールドの完全なリストについては RFC 1524
     を参照してください。

     FILENAME はコマンドライン中で `%s' に代入されるファイル名 です;
     標準の値は `'/dev/null'' で、たいていこの値を使いたい
     わけではないはずです。従って、ファイル名を指定してこのフィールドを
     上書きする必要があるでしょう。

     PLIST は名前付けされたパラメタのリストです; 標準の値は単なる
     空のリストです。リスト中の各エントリはパラメタ名を含む文字列、
     等号 (`=')、およびパラメタの値でなければなりません。 mailcap
     エントリには `%{foo}' といったような名前つき
     のパラメタを含めることができ、'foo' と名づけられたパラメタの値に
     置き換えられます。例えば、コマンドライン `showpartial %{id}
     %{number} %{total}' が mailcap ファイルにあり、PLIST が `['id=1',
     'number=2', 'total=3']' に設定されていれば、コマンドラインは
     `'showpartial 1 2 3'' になります。

     mailcap ファイル中では、 オプションの "test" フィールドを
     使って、(計算機アーキテクチャや、利用しているウィンドウシステムといった)
     何らかの外部条件をテストするよう指定することができます。
     `findmatch()' はこれらの条件を自動的にチェックし、
     チェックが失敗したエントリを読み飛ばします。

`getcaps()'
     MIME タイプを mailcap
     ファイルのエントリに対応付ける辞書を返します。 この辞書は
     `findmatch()' 関数に渡されるべきものです。
     エントリは辞書のリストとして記憶されますが、この表現形式の
     詳細について知っておく必要はないでしょう。

     mailcap 情報はシステム上で見つかった全ての mailcap ファイルから
     導出されます。ユーザ設定の mailcap ファイル `$HOME/.mailcap'
     はシステムの mailcap ファイル `/etc/mailcap'、
     `/usr/etc/mailcap'、および `/usr/local/etc/mailcap'
     の内容を上書きします。

以下に使用例を示します:
     >>> import mailcap
     >>> d=mailcap.getcaps()
     >>> mailcap.findmatch(d, 'video/mpeg', filename='/tmp/tmp1223')
     ('xmpeg /tmp/tmp1223', {'view': 'xmpeg %s'})


File: python-lib-jp.info,  Node: mailbox,  Next: mhlib,  Prev: mailcap,  Up: インターネット上のデータの操作

様々なメールボックス形式の読み出し
==================================

様々なメールボックス形式の読み出し。

このモジュールでは (UNIXの) メイルボックス内のメイルに
簡単かつ一様な方法でアクセスできるようにするクラスを定義しています。

`UnixMailbox(fp[, factory])'
     全てのメッセージが単一のファイルに収められ、`From ' (`From_'
     として知られています) 行によって分割されているような、 旧来の
     UNIX形式のメイルボックスにアクセスします。 ファイルオブジェクト FP
     はメイルボックスファイルを指します。 オプションの FACTORY
     パラメタは新たなメッセージオブジェクト
     を生成するような呼び出し可能オブジェクトです。FACTORY は、
     メイルボックスオブジェクトに対して `next()' メソッドを実行
     した際に、単一の引数、FP を伴って呼び出されます。
     この引数の標準の値は `rfc822.Message' クラスです (`rfc822'
     モジュール - および以下 - を参照してください)。

     _Notice:_ このモジュールの実装上の理由により、FP
     オブジェクトはバイナリ
     モードで開くようにしてください。特にWindows上では注意が必要です。

     可搬性を最大限にするために、UNIX形式のメイルボックス内にある
     メッセージは、正確に `'From '' (末尾の空白に注意してください)
     で始まる文字列が、直前の正しく二つの改行の後にくるような行で
     分割されます。現実的には広範なバリエーションがあるため、それ以外の
     From_ 行について考慮すべきではないのですが、現在の実装では先頭の
     二つの改行をチェックしていません。これはほとんどのアプリケーションで
     うまく動作します。

     `UnixMailbox' クラスでは、ほぼ正確に From_ デリミタにマッチする
     ような正規表現を用いることで、より厳密に From_ 行のチェックを行う
     バージョンを実装しています。`UnixMailbox' ではデリミタ行が `From
     NAME TIME' の行に分割されるものと考えます。
     可搬性を最大限にするためには、代わりに `PortableUnixMailbox'
     クラスを使ってください。このクラスは `UnixMailbox' と同じですが、
     個々のメッセージは `From ' 行だけで分割されるものとみなします。

     より詳細な情報については、

     を参照してください。

`PortableUnixMailbox(fp[, factory])'
     厳密性の低い `UnixMailbox' のバージョンで、メッセージを分割
     する行は `From ' のみであると見なします。実際に見られるメイル
     ボックスのバリエーションに対応するため、 From 行における "NAME
     TIME" 部分は無視されます。メイル処理ソフトウェア はメッセージ中の
     `'From '' で始まる行をクオートするため、
     この分割はうまく動作します。

`MmdfMailbox(fp[, factory])'
     全てのメッセージが単一のファイルに収められ、4 つの control-A 文字
     によって分割されているような、MMDF
     形式のメイルボックスにアクセスします。 ファイルオブジェクト FP
     はメイルボックスファイルをさします。 オプションの FACTORY は
     `UnixMailbox' クラスにおけるのと 同様です。

`MHMailbox(dirname[, factory])'
     数字で名前のつけられた別々のファイルに個々のメッセージを収めた
     ディレクトリである、MH メイルボックスにアクセスします。
     メイルボックスディレクトリの名前は DIRNAME で渡します。 FACTORY は
     `UnixMailbox' クラスにおけるのと 同様です。

`Maildir(dirname[, factory])'
     Qmail メイルディレクトリにアクセスします。DIRNAME で
     指定された全ての新規および現在のメッセージにアクセスできます。
     FACTORY は `UnixMailbox' クラスにおけるのと 同様です。

`BabylMailbox(fp[, factory])'
     MMDF メイルボックスと似ている、Babyl
     メイルボックスにアクセスします。 Babyl
     形式では、各メッセージは二つのヘッダからなるセット、 _original_
     ヘッダおよび _visible_ ヘッダをを持っています。 original ヘッダは
     `'*** EOOH ***'' (End-Of-Original-Headers)
     だけを含む行の前にあり、visible ヘッダは `EOOH' 行の後に
     あります。Babyl 互換のメイルリーダは visible ヘッダのみを表示 し、
     `BabylMailbox' オブジェクトは visible ヘッダのみを
     含むようなメッセージを返します。メイルメッセージは EOOH
     行で始まり、 `'\037\014'' だけを含む行で終わります。 FACTORY は
     `UnixMailbox' クラスにおけるのと 同様です。

`rfc822' モジュールが撤廃されたことにより、 `email'
パッケージを使ってメイルボックスから
メッセージオブジェクトを生成するよう推奨されているので
注意してください。 (デフォルトの設定は以前のバージョンとの
互換性のために変更されていません。)
安全に移行を行うには、以下のちょっとしたコードを使います:

     import email
     import email.Errors
     import mailbox
     
     def msgfactory(fp):
         try:
             return email.message_from_file(fp)
         except email.Errors.MessageParseError:
             # Don't return None since that will
     	# stop the mailbox iterator
     	return ''
     
     mbox = mailbox.UnixMailbox(fp, msgfactory)

上のラッパはメイルボックス内にある不正な形式の MIME メッセージに
対して防御性がある反面、メイルボックスの `next()' メソッド
が空文字列を渡す場合に備えなければなりません。逆に、もし
メイルボックス内には正しい形式の MIME メッセージしか入っていないと
分かっているのなら、単に以下のようにします:

     import email
     import mailbox
     
     mbox = mailbox.UnixMailbox(fp, email.message_from_file)

See also:
     `mbox - file containing mail messages'{伝統的な "mbox"
     メイルボックス形式に関する記述です。} `maildir - directory for
     incoming mail messages'{"maildir"  メイルボックス形式の記述です。}
     `Configuring Netscape Mail on UNIX: Why the Content-Length Format
     is Bad'{メイルボックスファイルに記録されている `Content-Length'
     ヘッダに依存した場合に発生する問題についての記述です。}

* Menu:

* Mailbox オブジェクト::


File: python-lib-jp.info,  Node: Mailbox オブジェクト,  Prev: mailbox,  Up: mailbox

Mailbox オブジェクト
--------------------

メイルボックスオブジェクトの実装はすべて反復可能なオブジェクトであり、
外部に公開されているメソッドを一つもっています。このメソッドは
メイルボックスオブジェクトから生成されるイテレータによって使われ、
直接利用することもできます。

`next()'
     メイルボックスオブジェクトのコンストラクタに渡された、オプションの
     FACTORY 引数を使って、メイルボックス中の次のメッセージを
     生成して返します。標準の設定では、FACTORY は `rfc822.Message'
     オブジェクトです (`rfc822' モジュールを参照してください)。
     メイルボックスの実装により、このオブジェクトの FP 属性は
     真のファイルオブジェクトかもしれないし、
     複数のメイルメッセージが単一のファイルに収められているなどの場合に、
     メッセージ間の境界を注意深く扱うためにファイルオブジェクトをシミュレート
     するクラスのインスタンスであるかもしれません。
     次のメッセージがない場合、このメソッドは `None' を返します。


File: python-lib-jp.info,  Node: mhlib,  Next: mimetools,  Prev: mailbox,  Up: インターネット上のデータの操作

MH のメイルボックスへのアクセス機構
===================================

Python から MH のメイルボックスを操作します。

`mhlib' モジュールは MH フォルダおよびその内容に対する Python
インタフェースを提供します。

このモジュールには、あるフォルダの集まりを表現する `MH'、
単一のフォルダを表現する `Folder'、単一のメッセージを表現 する
`Message'、の 3 つのクラスが入っています。

`MH([path[, profile]])'
     `MH' は MH フォルダの集まりを表現します。

`Folder(mh, name)'
     `Folder' クラスは単一のフォルダとフォルダ内のメッセージ群を
     表現します。

`Message(folder, number[, name])'
     `Message' オブジェクトはフォルダ内の個々のメッセージを表現
     します。メッセージクラスは `mimetools.Message' から
     導出されています。

* Menu:

* MH オブジェクト::
* Folder オブジェクト::
* Message オブジェクト::


File: python-lib-jp.info,  Node: MH オブジェクト,  Next: Folder オブジェクト,  Prev: mhlib,  Up: mhlib

MH オブジェクト
---------------

`MH' インスタンスは以下のメソッドを持っています:

`error(format[, ...])'
     エラーメッセージを出力します - 上書きすることができます。

`getprofile(key)'
     プロファイルエントリ (設定されていなければ `None') を返します。

`getpath()'
     メイルボックスのパス名を返します。

`getcontext()'
     現在のフォルダ名を返します。

`setcontext(name)'
     現在のフォルダ名を設定します。

`listfolders()'
     トップレベルフォルダのリストを返します。

`listallfolders()'
     全てのフォルダを列挙します。

`listsubfolders(name)'
     指定したフォルダの直下にあるサブフォルダのリストを返します。

`listallsubfolders(name)'
     指定したフォルダの下にある全てのサブフォルダのリストを返します。

`makefolder(name)'
     新しいフォルダを生成します。

`deletefolder(name)'
     フォルダを削除します - サブフォルダが入っていてはいけません。

`openfolder(name)'
     新たな開かれたフォルダオブジェクトを返します。


File: python-lib-jp.info,  Node: Folder オブジェクト,  Next: Message オブジェクト,  Prev: MH オブジェクト,  Up: mhlib

Folder オブジェクト
-------------------

`Folder' インスタンスは開かれたフォルダを表現し、以下のメソッドを
持っています:

`error(format[, ...])'
     エラーメッセージを出力します - 上書きすることができます。

`getfullname()'
     フォルダの完全なパス名を返します。

`getsequencesfilename()'
     フォルダ内のシーケンスファイルの完全なパス名を返します。

`getmessagefilename(n)'
     フォルダ内のメッセージ N の完全なパス名を返します。

`listmessages()'
     フォルダ内のメッセージの (番号の) リストを返します。

`getcurrent()'
     現在のメッセージ番号を返します。

`setcurrent(n)'
     現在のメッセージ番号を N に設定します。

`parsesequence(seq)'
     msgs 文を解釈して、メッセージのリストにします。

`getlast()'
     最新のメッセージを取得します。メッセージがフォルダにない場合には
     `0' を返します。

`setlast(n)'
     最新のメッセージを設定します (内部使用のみ)。

`getsequences()'
     フォルダ内のシーケンスからなる辞書を返します。シーケンス名がキーとして
     使われ、値はシーケンスに含まれるメッセージ番号のリストになります。

`putsequences(dict)'
     フォルダ内のシーケンスからなる辞書 {name: list} を返します。

`removemessages(list)'
     リスト中のメッセージをフォルダから削除します。

`refilemessages(list, tofolder)'
     リスト中のメッセージを他のフォルダに移動します。

`movemessage(n, tofolder, ton)'
     一つのメッセージを他のフォルダの指定先に移動します。

`copymessage(n, tofolder, ton)'
     一つのメッセージを他のフォルダの指定先にコピーします。


File: python-lib-jp.info,  Node: Message オブジェクト,  Prev: Folder オブジェクト,  Up: mhlib

Message オブジェクト
--------------------

`Message' クラスは `mimetools.Message' の
メソッドに加え、一つメソッドを持っています:

`openmessage(n)'
     新たな開かれたメッセージオブジェクトを返します (ファイル記述子を
     一つ消費します)。


File: python-lib-jp.info,  Node: mimetools,  Next: mimetypes,  Prev: mhlib,  Up: インターネット上のデータの操作

MIME メッセージを解析するためのツール
=====================================

MIME-スタイルのメッセージ本体を解析するためのツール。 _This is
deprecated in Python 2.3.   `email' パッケージを
`mimetools'モジュールより 優先して使うべきです。この
モジュールは、下位互換性維持のためにのみ 存在しています。_

このモジュールは、 `rfc822'  モジュールの `Message'
クラスのサブクラスと、マルチパートMIME や符合化メッセージの操作に
役に立つ多くのユーティリティ関数を定義しています。

これには以下の項目が定義されています：

`Message(fp[, seekable])'
     `Message' クラスの新しいインスタンスを返します。これは、
     `rfc822.Message' クラスのサブクラスで、いくつかの追加のメソッドが
     あります(以下を参照のこと)。 SEEKABLE 引数は、 `rfc822.Message'の
     ものと同じ意味を持ちます。

`choose_boundary()'
     パートの境界として使うことができる見込みが高いユニークな文字列を返します。
     その文字列は、 `'HOSTIPADDR.UID.PID.TIMESTAMP.RANDOM''
     の形をしています。

`decode(input, output, encoding)'
     オープンしたファイルオブジェクト INPUT から、許される MIME ENCODING
     を使って符号化されたデータを読んで、オープンされたファイルオブジェクト
     OUTPUT に復号化されたデータを書きます。 ENCODING に許される値は、
     `'base64'', `'quoted-printable'', `'uuencode'', `'x-uuencode'',
     `'uue'', `'x-uue'', `'7bit'', および `'8bit''です。`'7bit''
     あるいは `'8bit'' で符号化された
     メッセージを復号化しても何も効果がありません。入力が出力に単純にコピーされるだけです。

`encode(input, output, encoding)'
     オープンしたファイルオブジェクト  INPUT からデータを読んで、
     それを許される MIME ENCODING を使って符号化して、オープンした
     ファイルオブジェクト OUTPUT に書きます。 ENCODING
     に許される値は、[method{decode()}のものと同じです。

`copyliteral(input, output)'
     オープンしたファイル INPUTから行を `EOF' まで読んで、
     それらをオープンしたファイル OUTPUT に書きます。

`copybinary(input, output)'
     オープンしたファイル INPUTからブロックを `EOF' まで読んで、
     それらをオープンしたファイル OUTPUT に書きます。
     ブロックの大きさは現在 8192 に固定されています。

See also:
     *Note email:: 圧縮電子メール操作パッケージ； `mimetools'
     モジュールに委譲。 *Note rfc822::
     `mimetools.Message'のベースクラスを提供する。 *Note multifile::
     MIME データのような、別個のパーツを含む
     ファイルの読み込みをサポート。

    <http://www.cs.uu.nl/wais/html/na-dir/mail/mime-faq/.html>
          MIME でよく訊ねられる質問。MIMEの概要に関しては、 この文書の
          Part 1 の質問 1.1 への答えを見ること。


* Menu:

* Message オブジェクトの追加メソッド::


File: python-lib-jp.info,  Node: Message オブジェクトの追加メソッド,  Prev: mimetools,  Up: mimetools

Message オブジェクトの追加メソッド
----------------------------------

`Message' クラスは、`rfc822.Message' メソッドに加えて、
以下のメソッドを定義しています：

`getplist()'
     `Content-Type' ヘッダのパラメータリストを返します。
     これは文字列のリストです。 `KEY=VALUE'の形のパラメータに対しては、
     KEY は小文字に変換されますが、 VALUE は変換されません。
     たとえば、もしメッセージに、ヘッダ `Content-type: text/html;
     spam=1; Spam=2; Spam' が含まれていれば、 `getplist()' は、Python
     リスト  `['spam=1', 'spam=2', 'Spam']'を返すでしょう。

`getparam(name)'
     与えられた NAMEの( `NAME=VALUE' の形に対して `getplist()' が返す )
     第1パラメータの VALUE を返します。 もし VALUE が、``<'...`>''
     あるいは ``"'...`"''のように引用符で囲まれていれば、
     これらは除去されます。

`getencoding()'
     `Content-Transfer-Encoding' メッセージヘッダで指定された
     符号化方式を返します。もしそのようなヘッダが存在しなければ、
     `'7bit''を返します。符号化方式文字列は小文字に変換されます。

`gettype()'
     `Content-Type' ヘッダで指定された
     (`TYPE/SUBTYPE'の形での)メッセージ型を返します。
     もしそのようなヘッダが存在しなければ、 `'text/plain''を返します。
     型文字列は小文字に変換されます。

`getmaintype()'
     `Content-Type' ヘッダで指定された主要型を返します。
     もしそのようなヘッダが存在しなければ、 `'text''を返します。
     主要型文字列は小文字に変換されます。

`getsubtype()'
     `Content-Type'ヘッダで指定された下位型を返します。
     もしそのようなヘッダが存在しなければ、 `'plain''を返します。
     下位型文字列は小文字に変換されます。


File: python-lib-jp.info,  Node: mimetypes,  Next: MimeWriter,  Prev: mimetools,  Up: インターネット上のデータの操作

ファイル名を MIME 型へマップする
================================

Mapping of filename extensions to MIME types.  ファイル名拡張子の MIME
型へのマッピング。

`mimetypes' モジュールは、ファイル名あるいは URL と、ファイル名拡張子に
関連付けられた MIME 型とを変換します。ファイル名から MIME 型へと、 MIME
型からファイル名拡張子への変換が提供されます；
後者の変換では符号化方式はサポートされていません。

このモジュールは、一つのクラスと多くの便利な関数を提供します。
これらの関数がこのモジュールへの標準のインターフェースですが、
アプリケーションによっては、そのクラスにも関係するかもしれません。

以下で説明されている関数は、このモジュールへの主要なインターフェースを
提供します。たとえモジュールが初期化されていなくても、もしこれらの関数が、
`init()' がセットアップする情報に依存していれば、これらの関数は、
`init()' を呼びます。

`guess_type(filename[, strict])'
     FILENAME で与えられるファイル名あるいは URL に基づいて、
     ファイルの型を推定します。戻り値は、タプル `(TYPE, ENCODING)'
     です、ここで  TYPEは、
     もし型が(拡張子がないあるいは未定義のため)推定できない場合は、
     `None' を、あるいは、 MIME `content-type' ヘッダ
     に利用できる、`'TYPE/SUBTYPE''の形の文字列です。

     ENCODING は、符合化方式がない場合は `None' を、あるいは、
     符号化に使われるプログラムの名前 (たとえば、`compress' あるいは
     `gzip')です。 符号化方式は  `Content-Encoding'ヘッダとして
     使うのに適しており、 `Content-Transfer-Encoding'
     ヘッダには適して_いません_。
     マッピングはテーブルドリブンです。符号化方式のサフィックスは大/小文字を区別します;
     データ型サフィックスは、最初大/小文字を区別して試し、
     それから大/小文字を区別せずに試します。

     省略可能な STRICTは、既知の MIME 型のリストとして認識されるものが、
     IANAとして登録された
     正式な型のみに限定されるかどうかを指定するフラグです。 STRICT が
     true (デフォール)の時は、IANA 型のみがサポートされます; STRICT が
     false のときは、いくつかの追加の、非標準ではあるが、一般的に
     使用される MIME 型も認識されます。

`guess_all_extensions(type[, strict])'
     TYPE で与えられる MIME 型に基づいてファイルの拡張子を推定します。
     戻り値は、先頭のドット (`.')を含む、可能なファイル拡張子すべてを
     与える文字列のリストです。拡張子と特別なデータストリームとの関連付けは
     保証されませんが、 `guess_type()'によって MIME型 TYPE
     とマップされます。

     省略可能な STRICT は `guess_type()'
     関数のものと同じ意味を持ちます。

`guess_extension(type[, strict])'
     TYPE で与えられる MIME 型に基づいてファイルの拡張子を推定します。
     戻り値は、先頭のドット (`.')を含む、ファイル拡張子を
     与える文字列のリストです。拡張子と特別なデータストリームとの関連付けは
     保証されませんが、 `guess_type()'によって MIME型 TYPE
     とマップされます。 もし TYPEに対して拡張子が推定できない場合は、
     `None'が返されます。

     省略可能な STRICT は `guess_type()'
     関数のものと同じ意味を持ちます。

モジュールの動作を制御するために、いくつかの追加の関数とデータ項目が
利用できます。

`init([files])'
     内部のデータ構造を初期化します。 もし  FILES
     が与えられていれば、これはデフォールトの型のマップを
     増やすために使われる、一連のファイル名でなければなりません。
     もし省略されていれば、使われるファイル名は `knownfiles'から
     取られます。FILE あるいは `knownfiles' 内の各ファイル名は、
     それ以前に現れる名前より優先されます。 繰り返し `init()'
     を呼び出すことは許されています。

`read_mime_types(filename)'
     ファル FILENAME で与えられた型のマップが、もしあればロードします。
     型のマップは、先頭の dot (`.') を含むファイル名拡張子を、
     `'TYPE/SUBTYPE''の形の文字列にマッピングする辞書として返されます。
     もしファイル FILENAME が存在しないか、読み込めなければ、 `None'
     が返されます。

`add_type(type, ext[, strict])'
     mime型 TYPE からのマッピングを拡張子 EXT に追加します。
     拡張子がすでに既知であれば、新しい型が古いものに置き替わります。
     その型がすでに既知であれば、その拡張子が、既知の拡張子のリストに追加されます。

     STRICTがある時は、そのマッピングは正式なMIME型に、
     そうでなければ、非標準のMIME型に追加されます。

`inited'
     グローバルなデータ構造が初期化されているかどうかを示すフラグ。
     これは `init()' により true に設定されます。

`knownfiles'
     共通にインストールされた型マップファイル名のリスト。これらの
     ファイルは、普通 `mime.types'という名前であり、パッケージごとに
     異なる場所にインストールされます。

`suffix_map'
     サフィックスをサフィックスにマップする辞書。これは、符号化方式と
     型が同一拡張子で示される符号化ファイルが認識できるように
     使用されます。例えば、`.tgz' 拡張子は、符号化と型が別個に
     認識できるように `.tar.gz'にマップされます。

`encodings_map'
     ファイル名拡張子を符号化方式型にマッピングする辞書

`types_map'
     ファイル名拡張子をMIME型にマップする辞書

`common_types'
     ファイル名拡張子を非標準ではあるが、一般に使われているMIME型に
     マップする辞書

`MimeTypes' クラスは、1つ以上のMIME-型 データベースを
必要とするアプリケーションに役に立つでしょう。

`MimeTypes([filenames])'
     このクラスは、MIME-型データベースを表現します。デフォールトでは、
     このモジュールの他のものと同じデータベースへのアクセスを提供します。
     初期データベースは、このモジュールによって提供されるもののコピーで、
     追加の `mime.types'-形式のファイルを、`read()' あるいは `readfp()'
     メソッドを使って、データベースにロードすることで拡張されます。
     マッピング辞書も、もしデフォールトのデータが望むものでなければ、
     追加のデータをロードする前にクリアされます。

     省略可能な FILENAMESパラメータは、追加のファイルを、デフォールト
     データベースの"トップに"ロードさせるのに使うことができます。

     _Added in Python version 2.2_

* Menu:

* Mime型 オブジェクト::


File: python-lib-jp.info,  Node: Mime型 オブジェクト,  Prev: mimetypes,  Up: mimetypes

Mime型 オブジェクト
-------------------

`MimeTypes' インスタンスは、`mimetypes' モジュールの
それと非常によく似たインターフェースを提供します。

`suffix_map'
     サフィックスをサフィックスにマップする辞書。これは、符号化方式と
     型が同一拡張子で示されるような符号化ファイルが認識できるように
     使用されます。例えば、`.tgz' 拡張子は、符号化方式と型が別個に
     認識できるように `.tar.gz'に対応づけられます。
     これは、最初はモジュールで定義されたグローバルな `suffix_map' の
     コピーです。

`encodings_map'
     ファイル名拡張子を符号化型にマッピングする辞書。
     これは、最初はモジュールで定義されたグローバルな `encodings_map' の
     コピーです。

`types_map'
     ファイル名拡張子をMIME型にマッピングするる辞書。
     これは、最初はモジュールで定義されたグローバルな `types_map' の
     コピーです。

`common_types'
     ファイル名拡張子を非標準ではあるが、一般に使われているMIME型にマップする辞書。
     これは、最初はモジュールで定義されたグローバルな `common_types' の
     コピーです。

`guess_extension(type[, strict])'
     `guess_extension()' 関数と同様に、オブジェクトの
     一部として保存されたテーブルを使用します。

`guess_type(url[, strict])'
     `guess_type()' 関数と同様に、オブジェクトの
     一部として保存されたテーブルを使用します。

`read(path)'
     MIME情報を、PATHという名のファイルからロードします。
     これはファイルを解析するのに `readfp()' を使用します。

`readfp(file)'
     MIME型情報を、オープンしたファイルからロードします。
     ファイルは、標準の `mime.types'
     ファイルの形式でなければなりません。


File: python-lib-jp.info,  Node: MimeWriter,  Next: mimify,  Prev: mimetypes,  Up: インターネット上のデータの操作

汎用 MIME ファイルライター
==========================

汎用 MIME ファイルライター。

_This is deprecated in Python 2.3.   `email' パッケージを、`MimeWriter'
モジュールよりも優先して使用すべきです。このモジュールは、
下位互換性維持のためだけに存在します。_

このモジュールは、クラス `MimeWriter'を定義します。この `MimeWriter'
クラスは、MIME マルチパートファイルを作成するための
基本的なフォーマッタを実装します。これは出力ファイル内をあちこち移動することも、
大量のバッファスペースを使うこともありません。あなたは、最終のファイルに
現れるであろう順番に、パートを書かなければなりません。 `MimeWriter'
は、あなたが追加するヘッダをバッファして、それらの
順番を並び替えることができるようにします。

`MimeWriter(fp)'
     `MimeWriter' クラスの新しいインスタンスを返します。渡される
     唯一の引数 FP は、書くために使用するファイルオブジェクトです。
     `StringIO' オブジェクトを使うこともできることに注意して下さい。

* Menu:

* MimeWriter オブジェクト::


File: python-lib-jp.info,  Node: MimeWriter オブジェクト,  Prev: MimeWriter,  Up: MimeWriter

MimeWriter オブジェクト
-----------------------

`MimeWriter' インスタンスには以下のメソッドがあります：

`addheader(key, value[, prefix])'
     MIMEメッセージに新しいヘッダ行を追加します。KEY は、
     そのヘッダの名前であり、そして VALUEで、そのヘッダの値を明示的に
     与えます。省略可能な引数
     PREFIXは、ヘッダが挿入される場所を決定します; `0'
     は最後に追加することを意味し、`1' は先頭への挿入です。
     デフォールトは最後に追加することです。

`flushheaders()'
     今まで集められたヘッダすべてが書かれ(そして忘れられ)るようにします。
     これは、もし全く本体が必要でない場合に役に立ちます。例えば、
     ヘッダのような情報を保管するために(誤って)使用された、 型
     `message/rfc822' のサブパート用。

`startbody(ctype[, plist[, prefix]])'
     メッセージの本体に書くのに使用できるファイルのようなオブジェクトを
     返します。コンテント-型は、与えられた CTYPE に設定され、
     省略可能なパラメータ PLISTは、コンテント-型定義のための
     追加のパラメータを与えます。 PREFIX は、そのデフォールトが
     先頭への挿入以外は `addheader()' でのように働きます。

`startmultipartbody(subtype[, boundary[, plist[, prefix]]])'
     メッセージ本体を書くのに使うことができるファイルのようなオブジェクトを
     返します。更に、このメソッドはマルチパートのコードを初期化します。ここで、
     SUBTYPE が、そのマルチパートのサブタイプを、 BOUNDARY
     がユーザ定義の境界仕様を、そして PLIST
     が、そのサブタイプ用の省略可能なパラメータを定義します。 PREFIX
     は、`startbody()' でのように働きます。サブパートは、
     `nextpart()'を使って作成するべきです。

`nextpart()'
     マルチパートメッセージの個々のパートを表す、 `MimeWriter'の
     新しいインスタンスを返します。これは、そのパートを書くのにも、
     また複雑なマルチパートを再帰的に作成するのにも使うことができます。
     メッセージは、`nextpart()' を使う前に, 最初 `startmultipartbody()'
     で初期化しなければなりません。

`lastpart()'
     これは、マルチパートメッセージの最後のパートを指定するのに使うことが
     でき、マルチパートメッセージを書くときは  _いつでも_使うべきです。


File: python-lib-jp.info,  Node: mimify,  Next: multifile,  Prev: MimeWriter,  Up: インターネット上のデータの操作

電子メイルメッセージの MIME 処理
================================

電子メイルメッセージの MIME 化および非 MIME 化。

_This is deprecated in Python 2.3.  `mimify' モジュールを使うよりも
`email' パッケージを使うべきです。このモジュールは
以前のバージョンとの互換性のために保守されているにすぎません。_

`mimify' モジュールでは電子メイルメッセージから MIME へ、 および MIME
から電子メイルメッセージへの変換を行うための二つの関数を
定義しています。電子メイルメッセージは単なるメッセージでも、 MIME
形式でもかまいません。各パートは個別に扱われます。 メッセージ (の一部)
の MIME 化 (mimify) の際、7 ビット ASCII
文字を使って表現できない何らかの文字が含まれていた場合、メッセージの
quoted-printable への符号化が伴います。メッセージが送信される前に
編集しなければならない場合、MIME 化および非 MIME 化は特に便利です。
典型的な使用法は以下のようになります:

     unmimify message
     edit message
     mimify message
     send message

モジュールでは以下のユーザから呼び出し可能な関数と、ユーザが設定可能な
変数を定義しています:

`mimify(infile, outfile)'
     INFILE を OUTFILE にコピーします。その際、パートを
     quoted-printable に変換し、必要なら MIME メイルヘッダを追加します。
     INFILE および OUTFILE はファイルオブジェクト
     (実際には、`readline()' メソッドを持つ (INFILE) か、 `write'
     (OUTFILE) メソッドを持つあらゆるオブジェクト)
     か、ファイル名を指す文字列を指定することができます。 INFILE および
     OUTFILE が両方とも文字列の場合、 同じ値にすることができます。

`unmimify(infile, outfile[, decode_base64])'
     INFILE を OUTFILE にコピーします。その際、全ての quoted-printable
     化されたパートを復号化します。INFILE および OUTFILE
     はファイルオブジェクト (実際には、`readline()' メソッドを持つ
     (INFILE) か、 `write' (OUTFILE) メソッドを持つあらゆるオブジェクト)
     か、ファイル名を指す文字列を指定することができます。 DECODE_BASE64
     引数が与えられており、その値が真である場合、 base64
     符号で符号化されているパートも同様に復号化されます。

`mime_decode_header(line)'
     LINE 内の符号化されたヘッダ行が復号化されたものを 返します。ISO
     8859-1 文字セット (Latin-1) だけをサポートします。

`mime_encode_header(line)'
     LINE 内のヘッダ行が MIME 符号化されたものを返します。

`MAXLEN'
     標準では、非 ASCII 文字 (8 ビット目がセットされている文字) を含む
     か、`MAXLEN' 文字 (標準の値は 200 です) よりも長い 部分は
     quoted-printable 形式で符号化されます。

`CHARSET'
     文字セットがメイルヘッダで指定されていない場合指定しなければ
     なりません。使われている文字セットを表す文字列は `CHARSET'
     に記憶されます。標準の値は ISO-8859-1 (Latin1 (latin-one) としても
     知られています)。

このモジュールはコマンドラインから利用することもできます。
以下のような使用法:
     mimify.py -e [-l length] [infile [outfile]]
     mimify.py -d [-b] [infile [outfile]]

で、それぞれ符号化 (mimify) および復号化 (unmimify) を行います。
標準の設定では INFILE は標準入力で、PUTFILE は標準出力
です。入出力に同じファイルを指定することもできます。

符号化の際に *-l* オプションを与えた場合、LENGTH で
指定した長さより長い行があれば、その長さに含まれる部分が符号化
されます。

復号化の際に *-b* オプションが与えられていれば、base64 パート
も同様に復号化されます。

See also:
     *Note quopri:: MIME quoted-printable 形式ファイルのエンコード
     およびデコード。


File: python-lib-jp.info,  Node: multifile,  Next: rfc822,  Prev: mimify,  Up: インターネット上のデータの操作

個別の部分を含んだファイル群のサポート
======================================

MIME データのような、個別の部分を含んだファイル群に対する
読み出しのサポート。

`MultiFile' オブジェクトはテキストファイルを区分したものを
ファイル類似の入力オブジェクトとして扱えるようにし、指定した区切り文字
(delimiter) パタンに遭遇した際に `''' が返されるようにします。
このクラスの標準設定は MIME マルチパートメッセージを解釈する上で
便利となるように設計されていますが、サブクラス化を行って幾つかの
メソッドを上書きすることで、簡単に汎用目的に対応させることができます。
ます。

`MultiFile(fp[, seekable])'
     マルチファイル (multi-file) を生成します。このクラスは `open()'
     が返すファイルオブジェクトのような、 `MultiFile'
     インスタンスが行データを取得するための
     入力となるオブジェクトを引数としてインスタンス化を
     行わなければなりません。

     `MultiFile' は入力オブジェクトの `readline()' 、 `seek()'、および
     `tell()' メソッドしか参照せず、 後者の二つのメソッドは個々の MIME
     パートにランダムアクセスしたい 場合にのみ必要です。`MultiFile' を
     seek できないストリーム オブジェクトで使うには、オプションの
     SEEKABLE 引数の値を 偽にしてください;
     これにより、入力オブジェクトの `seek()' および `tail()'
     メソッドを使わないようになります。

`MultiFile' の視点から見ると、テキストは三種類の行データ:
データ、セクション分割子、終了マーカ、からなることを知っていると
約に立つでしょう。MultiFile は、多重入れ子構造になっている可能性
のある、それぞれが独自のセクション分割子および終了マーカのパターン
を持つメッセージパートをサポートするように設計されています。

See also:
     *Note email:: 網羅的な電子メイル操作パッケージ;  `multifile'
     モジュールに取って代わります。

* Menu:

* MultiFile オブジェクト::
* MultiFile の例::


File: python-lib-jp.info,  Node: MultiFile オブジェクト,  Next: MultiFile の例,  Prev: multifile,  Up: multifile

MultiFile オブジェクト
----------------------

`MultiFile' インスタンスには以下のメソッドがあります:

`readline(str)'
     一行データを読みます。その行が
     (セクション分割子や終了マーカや本物の EOF でない)
     データの場合、行データを返します。その行がもっとも最近
     スタックにプッシュされた境界パターンにマッチした場合、`''' を返し、
     マッチした内容が終了マーカかそうでないかによって `self.last' を 1
     か 0
     に設定します。行がその他のスタックされている境界パターンにマッチ
     した場合、エラーが送出されます。背後のストリームオブジェクトにおける
     ファイルの終端に到達した場合、全ての境界がスタックから除去されていない
     限りこのメソッドは `Error' を送出します。

`readlines(str)'
     このパートの残りの全ての行を文字列のリストとして返します。

`read()'
     次のセクションまでの全ての行を読みます。読んだ内容を単一の
     (複数行にわたる) 文字列として返します。このメソッドには size
     引数をとらないので注意してください！

`seek(pos[, whence])'
     ファイルを seek します。seek する際のインデクスは現在のセクションの
     開始位置からの相対位置になります。PIS および WHENCE 引数
     はファイルの seek における引数と同じように解釈されます。

`tell()'
     現在のセクションの先頭に対して相対的なファイル位置を返します。

`next()'
     次のセクションまで行を読み飛ばします (すなわち、セクション分割子
     または終了マーカが消費されるまで行データを読みます)。
     次のセクションがあった場合には真を、終了マーカが発見された場合
     には偽を返します。最も最近スタックにプッシュされた境界パターンを
     最有効化します。

`is_data(str)'
     STR がデータの場合に真を返し、セクション分割子の可能性がある
     場合には偽を返します。このメソッドは行の先頭が (全ての MIME 境界が
     持っている) `'-'`-'' 以外になっているかを調べるように
     実装されていますが、導出クラスで上書きできるように宣言されています。

     このテストは実際の境界テストにおいて高速性を保つために使われて
     いるので注意してください; このテストが常に false を返す場合、
     テストが失敗するのではなく、単に処理が遅くなるだけです。

`push(str)'
     境界文字列をスタックにプッシュします。この境界文字列の適切に修飾された
     バージョンが入力ファイル中に見つかった場合、セクション分割子
     または終了マーカであると解釈されます。それ以降の全てのデータ読み出し
     は、`pop()' を呼んで境界文字列を除去するか、`next()'
     を呼んで境界文字列を再有効化しないかぎり、ファイル終端を示す空文字列を
     返します。

     一つ以上の境界をプッシュすることは可能です。もっとも最近プッシュされた
     境界に遭遇すると EOF が返ります; その他の境界に遭遇するとエラーが
     送出されます。

`pop()'
     セクション境界をポップします。この境界はもはや EOF として解釈
     されません。

`section_divider(str)'
     境界をセクション分割子にします。標準では、このメソッドは (全ての
     MIME 境界が持っている) `'-'`-'' を境界文字列の
     先頭に追加しますが、これは導出クラスで上書きできるように宣言
     されています。末尾の空白は無視されることから考えて、このメソッド
     では LF や CR-LF を追加する必要はありません。

`end_marker(str)'
     境界文字列を終了マーカ行にします。標準では、このメソッドは (MIME
     マルチパートデータのメッセージ終了マーカのように) `'-'`-''
     を境界文字列の先頭に追加し、かつ `'-'`-''
     を境界文字列の末尾に追加しますが、
     これは導出クラスで上書きできるように宣言されています。
     末尾の空白は無視されることから考えて、このメソッド では LF や
     CR-LF を追加する必要はありません。

最後に、`MultiFile' インスタンスは二つの公開されたインスタンス
変数を持っています:

`level'
     現在のパートにおける入れ子の深さです。

`last'
     最後に見つかったファイル終了イベントがメッセージ終了マーカ
     であった場合に真となります。


File: python-lib-jp.info,  Node: MultiFile の例,  Prev: MultiFile オブジェクト,  Up: multifile

`MultiFile' の例
----------------

     import mimetools
     import multifile
     import StringIO
     
     def extract_mime_part_matching(stream, mimetype):
         """Return the first element in a multipart MIME message on stream
         matching mimetype."""
     
         msg = mimetools.Message(stream)
         msgtype = msg.gettype()
         params = msg.getplist()
     
         data = StringIO.StringIO()
         if msgtype[:10] == "multipart/":
     
             file = multifile.MultiFile(stream)
             file.push(msg.getparam("boundary"))
             while file.next():
                 submsg = mimetools.Message(file)
                 try:
                     data = StringIO.StringIO()
                     mimetools.decode(file, data, submsg.getencoding())
                 except ValueError:
                     continue
                 if submsg.gettype() == mimetype:
                     break
             file.pop()
         return data.getvalue()


File: python-lib-jp.info,  Node: rfc822,  Next: base64,  Prev: multifile,  Up: インターネット上のデータの操作

RFC 2822 準拠のメイルヘッダ読み出し
===================================

RFC 2822 形式のメイルメッセージを解釈します。

_This is deprecated in Python 2.3.  `rfc822' モジュールを使うよりも
`email' パッケージを使うべきです。このモジュールは
以前のバージョンとの互換性のために保守されているにすぎません。_

このモジュールでは、インターネット標準 RFC 2822

(1) で定義されている "電子メイルメッセージ" を表現するクラス、
`Message' を定義しています。
このメッセージはメッセージヘッダ群とメッセージボディの集まり
からなります。このモジュールではまた、ヘルパークラス RFC 2822
アドレス群を解釈するための `AddressList' クラス を定義しています。RFC
2822 メッセージ固有の構文に関する情報 は RFC を参照してください。

`mailbox'  モジュールでは、
多くのエンドユーザメイルプログラムによって生成されるメイルボックス
を読み出すためのクラスを提供しています。

`Message(file[, seekable])'
     `Message' インスタンスは入力オブジェクトをパラメタに与えて
     インスタンス化します。入力オブジェクトのメソッドのうち、Message が
     依存するのは `readline()' だけです; 通常のファイル
     オブジェクトは適格です。インスタンス化を行うと、入力オブジェクト
     からデリミタ行 (通常は空行 1 行) に到達するまでヘッダを読み出し、
     それらをインスタンス中に保持します。ヘッダの後のメッセージ本体は
     読み出しません。

     このクラスは `readline()' メソッドをサポートする任意の入力
     オブジェクトを扱うことができます。入力オブジェクトが seek および
     tell できる場合、 `rewindbody()' メソッドが動作します。
     また、不正な行データを入力ストリームにプッシュバックできます。
     入力オブジェクトが seek できない一方で、入力行をプッシュバックする
     `unread()' メソッドを持っている場合、`Message'
     は不正な行データにこのプッシュバックを使います。こうして、
     このクラスはバッファされているストリームから来るメッセージを
     解釈するのに使うことができます。

     オプションの SEEKABLE 引数は、`lseek()' システムコール
     が動作しないと分かるまでは `tell()' がバッファされたデータを
     無視するような、ある種の stdio
     ライブラリで回避手段として提供されています。
     可搬性を最大にするために、socket
     オブジェクトによって生成されたファイル のような、seek
     できないオブジェクトを渡す際には、最初に `tell()'
     が呼び出されないようにするために seekable
     引数をゼロに設定すべきです。

     ファイルとして読み出された入力行データは CR-LF と単一の改行 (line
     feed) のどちらで終端されていてもかまいません;
     行データを記憶する前に、終端の CR-LF
     は単一の改行と置き換えられます。

     ヘッダに対するマッチは全て大小文字に依存しません。例えば、
     `M['From']'、 `M['from']'、および `M['FROM']'
     は全て同じ結果になります。

`AddressList(field)'
     RFC 2833 アドレスをカンマで区切ったものとして解釈される
     単一の文字列パラメタを使って、`AddressList' ヘルパークラスを
     インスタンス化することができます。 (パラメタ `None'
     は空のリストを表します。)

`quote(str)'
     STR 中のバックスラッシュが 2 つのバックスラッシュに置き換えられ、
     二重引用符がバックスラッシュ付きの二重引用符に置き換えられた、
     新たな文字列を返します。

`unquote(str)'
     STR の _逆クオートされた_ 新たな文字列を返します。 STR
     が二重引用符で囲われていた場合、二重引用符を剥ぎ取ります。
     同様に、 STR が三角括弧で囲われていた場合にも剥ぎ取ります。

`parseaddr(address)'
     `To' や `Cc' といった、アドレスが入っている フィールドの値 ADDRESS
     を解析し、含まれている "実名 (realname)" 部分および
     "電子メールアドレス" 部分に分けます。それらの情報からなる
     タプルを返します。解析が失敗した場合には 2 要素のタプル `(None,
     None)' を返します。

`dump_address_pair(pair)'
     `parseaddr()' の逆で、`(REALNAME, EMAIL_ADDRESS)' 形式の 2
     要素のタプルをとり、`To' や `Cc' ヘッダに
     適した文字列値を返します。PAIR の最初の要素が真値をとらない
     場合、二つ目の要素をそのまま返します。

`parsedate(date)'
     RFC 2822 の規則に従っている日付を解析しようと試みます。
     しかしながら、メイラによっては RFC 2822 で指定されている
     ような書式に従わないため、そのような場合には `parsedata()'
     は正しい日付を推測しようと試みます。 DATE は `'Mon, 20 Nov 1995
     19:12:08 -0500'' のような RFC 2822
     様式の日付を収めた文字列です。日付の解析に成功した場合、
     `parsedate()' は `time.mktime()' にそのまま渡す ことができるような
     9 要素のタプルを返します; そうでない場合には `None'
     を返します。結果のフィールド 6、7、および 8 は
     有用な情報ではありません。

`parsedate_tz(date)'
     `parsedate()' と同じ機能を実現しますが、`None' または 10
     要素のタプルを返します; 最初の 9 要素は `time.mktime()'
     に直接渡すことができるようなタプルで、 10 番目の要素はその日の
     タイムゾーンにおける UTC (グリニッチ標準時の公式名称) からの
     オフセットです。(タイムゾーンオフセットの符号は、
     同じタイムゾーンにおける `time.timezone' 変数の符号と反転
     しています; 後者の変数が POSIX 標準に従っている一方、
     このモジュールは RFC 2822 に従っているからです。) 入力文字列
     がタイムゾーン情報を持たない場合、タプルの最後の要素は `None'
     になります。結果のフィールド 6、7、および 8 は
     有用な情報ではありません。

`mktime_tz(tuple)'
     `parsedata_tz()' が返す 10 要素のタプルを UTC タイムスタンプ
     に変換します。タプル内のタイムゾーン要素が `None' の場合、地域の
     時刻を表しているものと家庭します。些細な欠陥: この関数はまず最初の
     8
     要素を地域における時刻として変換し、次にタイムゾーンの違いに対する
     補償を行います; これにより、夏時間の切り替え日前後でちょっとした
     エラーが生じるかもしれません。通常の利用に関しては心配ありません。

See also:
     *Note email:: 網羅的な電子メイル処理パッケージです; `rfc822'
     モジュールを代替します。 *Note mailbox::
     エンドユーザのメイルプログラムによって生成される、様々な mailbox
     形式を読み出すためのクラス群。 *Note mimetools:: MIME
     エンコードされたメッセージを処理する `rfc822.Message'
     のサブクラス。

* Menu:

* Message オブジェクト 2::
* AddressList オブジェクト::

---------- Footnotes ----------

(1)  このモジュールはもともと RFC 822
に適合していたので、そういう名前に なっています。その後、RFC 2822 が
RFC 822 に対する更新として リリースされました。このモジュールは RFC 2822
適合であり、特に RFC 822
からの構文や意味付けに対する変更がなされています。

