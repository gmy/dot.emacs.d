This is python-mac-jp.info, produced by makeinfo version 4.5 from
python-mac-jp.texi.

12 October 2005


File: python-mac-jp.info,  Node: Top,  Next: 序,  Prev: (dir),  Up: (dir)

Macintoshモジュールリファレンス
*******************************

* Menu:

* 序::
* Mac OS 9でPythonを利用する::
* MacPython モジュール::
* MacPython OSA モジュール::
* MacOS ツールボックスモジュール::
* 文書化されていないモジュール::
* 歴史とライセンス::
* 日本語訳について::
* Module Index::
* Class-Exception-Object Index::
* Function-Method-Variable Index::
* Miscellaneous Index::


File: python-mac-jp.info,  Node: 序,  Next: Mac OS 9でPythonを利用する,  Prev: Top,  Up: Top

序
**

Copyright (C) 2001, 2002, 2003 Python Software Foundation.  All rights
reserved.

Copyright (C) 2000 BeOpen.com.  All rights reserved.

Copyright (C) 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

Copyright (C) 1991-1995 Stichting Mathematisch Centrum.  All rights
reserved.

Translation Copyright (C) 2003 Python Document Japanese Translation
Project. All rights reserved.

ライセンスおよび許諾に関する完全な情報は、このドキュメントの末尾を
参照してください。

     このライブラリリファレンスマニュアルでは、Macintosh用のPython拡張に関
     して詳しく記述します。
     も同時に参照しながら利用するようにしてください。標準ライブラリと組み込み型はそちら
     に詳しく書かれています。

     このマニュアルを読むにあたっては、Python言語の基礎知識を持っていること
     が必要です。Pythonの肩のこらない入門編が必要なら、
     を読んでください。 は、構文や意味論に
     関する疑問を解決するため、それなりに分かった人が読むべきものです。最
     後にひとつ。インタプリタの拡張と組み込み

     という名のマニュアルでは、Pythonへ新たに拡張機能を追加す
     る方法と、他のアプリケーションに組み込む方法について述べています。



File: python-mac-jp.info,  Node: Mac OS 9でPythonを利用する,  Next: MacPython モジュール,  Prev: 序,  Up: Top

Mac OS 9でPythonを利用する
**************************

Macintosh 上での Python の使い方は、特にMac OS 9上においては UNIXラ
イクなシステムや Windows システム上で使うのと全く異なっています
(MacPython-OSXは完全な UNIX Python を含んでいるため UNIXライクな
システムとほぼ同じ知識が利用できます) 。ほとんどの  Python 文書や、
"公式"文書、出版された本のたぐいも、UNIXライクなシステムや Windows
システム上でどう Python を使うかについて述べているにすぎず、  Python
を利用するのは MacPython-OS9 が初めてという人が混乱する原因になってい
ます。この章では、簡単な入門編として Macintosh 上で Python  を具体的に
どう使うのかを解説していきます。

IDEについての章(*Note Python
Interactiveウィンドウを使う::章参照)はMacPython-OSXでも利用できます。

* Menu:

* MacPython-OSXの取得とインストール::
* MacPython-OS9の取得とインストール::
* 統合開発環境::


File: python-mac-jp.info,  Node: MacPython-OSXの取得とインストール,  Next: MacPython-OS9の取得とインストール,  Prev: Mac OS 9でPythonを利用する,  Up: Mac OS 9でPythonを利用する

MacPython-OSXの取得とインストール
=================================

Python 2.3a2 の時点で、自分のマシンにMacPython-OSXをインストールする唯
一確実な方法はソース配布物を取得し、"framework Python"と呼ばれるものを
自分で構築する事です。構築方法の詳細は `Mac/OSX/README' に記述さ
れています。

バイナリインストーラーが利用可能になりしだい、詳細が
<http://www.cwi.nl/~{}jack/macpython.html> に掲示され るでしょう。

多くのものがインストールされます。

   * `Applications' フォルダ中に `MacPython-2.3'フォルダが作
     成されます。このフォルダ中に、PythonIDE 統合開発環境、ファインダ
     からのダブルクリックで Python スクリプトを起動するための
     PythonLauncher、そして Package Manager が含まれています。

   * 標準 UNIX コマンドライン Python インタプリタが
     `/usr/local/bin/python' にインストールされます。しかし、
     `/usr/local/lib/python' は除きます。

   * 全ての機能の実体として `/Library/Frameworks/Python.framework'
     にフレームワークがインストールされます。しかし、普通はこの事を知っ
     ている必要はありません。

MacPython をアンインストールするには、単にこの3つを削除するだけです。

PythonIDEは、そのヘルプメニューからアクセスすることができる "MacPython
Help" と呼ばれる Apple ヘルプビューア書類を含んでいます。Python にまっ
たく不慣れなら、そのドキュメント中の IDE 入門を読み始めるのが良いでしょ
う。

他の UNIX プラットフォーム上の Python に精通しているなら、UNIX
シェルからの Python スクリプトの実行についてのセクションを読むのが良い
でしょう。

* Menu:

* Pythonスクリプト実行方法::
* GUIを利用したスクリプトの実行::
* 設定::


File: python-mac-jp.info,  Node: Pythonスクリプト実行方法,  Next: GUIを利用したスクリプトの実行,  Prev: MacPython-OSXの取得とインストール,  Up: MacPython-OSXの取得とインストール

Pythonスクリプト実行方法
------------------------

Mac OS X 上で Python を始めるには PythonIDE 統合開発環境に触れてみるの
が最良の方法です。章 *Note Python Interactiveウィンドウを使う::
を見るか、IDE が起動しているならヘルプ メニューから呼び出せる Apple
ヘルプビューア書類の IDE 入門を読みながら IDE に触れてみてください。

ターミナルウィンドウのコマンドライン、あるいはファインダから Python
スクリプトを実行したければ、スクリプトを作成するために最初にエディタ
が必要になるでしょう。Mac OS X には、`vi' および `emacs' など多くの標準
UNIX コマンドラインエディタが付属し ます。もし Mac
らしいエディタを利用したいなら Bare Bones Software
(<http://www.barebones.com/products/bbedit/index.shtml>) の `BBEdit' か
`TextWrangler' が良いでしょう。フリーウェ アの `BBEdit Lite'
の公式サポートは中止されましたが、まだ利用 可能です。`AppleWorks' や OS
X についてくる `TextEdit' のように，ASCII
としてファイルを保存できるワードプロセッサも 選択肢です。

ターミナルウィンドウから自作のスクリプトを起動するにはシェルの検索パス
に `/usr/local/bin' を `/usr/bin' よりも前に設定する必要があ
ります。これを設定しないと Apple 提供の Python が起動されてしまいます。
(Mac OS X 10.2.4時点では Python 2.2です)

ファインダから自作スクリプトを実行するには、2種類方法があります。
   * `PythonLauncher' にドラックする

   * ファインダの情報ウィンドウで自作スクリプト(もしくはいずれかの .py
     スクリプト)の「このアプリケーションで開く」の設定のデフォルトを
     `PythonLauncher' にして、スクリプトをダブルクリックする。

PythonLauncherは、あなたのスクリプトをどのように起動するかコントロール
するための様々な設定ができます。オプションを押しながらドラッグするとそ
の実行においてのみ設定の変更がされます。また変更をずっと反映させるため
には PythonLauncher の設定メニューから変更してください。


File: python-mac-jp.info,  Node: GUIを利用したスクリプトの実行,  Next: 設定,  Prev: Pythonスクリプト実行方法,  Up: MacPython-OSXの取得とインストール

GUIを利用したスクリプトの実行
-----------------------------

Mac OS X では Aqua ウィンドウマネージャに依存するプログラム(言いかえれ
ば GUI を持っているものすべて) は特別な方法で起動する必要がある事を知っ
ておく必要があります。GUIを持ったスクリプトを実行するには `python'
のかわりに `pythonw' を利用してください。


File: python-mac-jp.info,  Node: 設定,  Prev: GUIを利用したスクリプトの実行,  Up: MacPython-OSXの取得とインストール

設定
----

MacPython は、`PYTHONPATH' のような標準 UNIX 環境変数をすべ
て利用しますが、ファインダは自作の `.profile' や `.cshrc' を
読まないので、ファインダから起動するプログラムのためにこれらの変数を設
定することは非標準です。ファインダのためには
`~/.MacOSX/environment.plist' ファイルを作成する必要があります。詳細に
関しては Apple Technical Document QA1067を見てください。

追加の Python パッケージのインストールは、パッケージマネージャによっ
てかなり簡単にできます。詳細は MacPython ヘルプを見てください。


File: python-mac-jp.info,  Node: MacPython-OS9の取得とインストール,  Next: 統合開発環境,  Prev: MacPython-OSXの取得とインストール,  Up: Mac OS 9でPythonを利用する

MacPython-OS9の取得とインストール
=================================

最新リリースは、今後現われる実験的な新版と同様に、Jack Jansenにより運
営されている MacPythonページ：
<http://homepages.cwi.nl/~jack/macpython.html> で見 つかります。

使い方に関する最新情報は、配布物に含まれる `README' を参照してく
ださい。

MacPython-OS9 は Mac OS X 上で正常に起動しますし、クラシック環境の中で
はなくネイティブモードで起動します。それでも、CFM に基づいたPython を
必要とする特別な理由がない限り、Mac OS X 上でMacPython-OSX を利用しな
い理由にはなりません。

* Menu:

* 対話型インタプリタを使う::
* Pythonスクリプトの走らせ方::
* コマンドライン引数をシミュレートする::
* Pythonスクリプトを作成する::
* 設定を行なう::


File: python-mac-jp.info,  Node: 対話型インタプリタを使う,  Next: Pythonスクリプトの走らせ方,  Prev: MacPython-OS9の取得とインストール,  Up: MacPython-OS9の取得とインストール

対話型インタプリタを使う
------------------------

Python ドキュメントで使われている対話型インタプリタは、
`PythonInterpreter' アイコンをダブルクリックすると起動します。
アイコンは16トンの重りが落ちてきたように見えるものになっています。 (1)
バージョン情報と `>`>'>~' プロンプトが表示されるはずです。これは
標準ドキュメントに書かれているそのままに使えます。

---------- Footnotes ----------

(1) 訳注：なぜアイコンが16トンの重りなのかを疑問に思うかもしれません。
これは Monty Python's Flying Circus に由来します。Monty Python's Flying
Circus を見てみるとよいでしょう。


File: python-mac-jp.info,  Node: Pythonスクリプトの走らせ方,  Next: コマンドライン引数をシミュレートする,  Prev: 対話型インタプリタを使う,  Up: MacPython-OS9の取得とインストール

Pythonスクリプトの走らせ方
--------------------------

既に手元にある Python スクリプトを走らせるにはいくつかの方法があります。
普通は、"ドラッグ＆ドロップする"か"ダブルクリックする"か、この２つ
の方法のいずれかを使います。他にも、IDE(節 *Note Python
Interactiveウィンドウを使う:: を参照)の中から走 らせるとか、AppleScript
経由で起動する方法があります。

* Menu:

* ドラッグ＆ドロップする::
* クリエータをセットしてダブルクリックする::


File: python-mac-jp.info,  Node: ドラッグ＆ドロップする,  Next: クリエータをセットしてダブルクリックする,  Prev: Pythonスクリプトの走らせ方,  Up: Pythonスクリプトの走らせ方

ドラッグ＆ドロップする
......................

一番簡単に Python スクリプトを起動させるのは、"ドラッグ＆ドロップ"経
由で行うことです。これはファインダで、テキストファイルをワードプロセッ
サのアイコンの上に"ドラッグ"し、そこに"ドロップ"して起動させるのに
似ています。"ドラッグ＆ドロップ"による Python スクリプトの起動には
`PythonInterpreter' を使うように気をつけてください。 `IDE' や `Idle'
では、以下に示すのとは、異なる振る舞い になってしまいます。

ただ問題もいくつかあります。

   * `PythonInterpreter' の上にスクリプトをドロップした後にウィン
     ドウがフラッシュするが、その後消えてしまう場合。恐らく、これはシステ
     ムの設定関連の問題です。`PythonInterpreter' は実行完了の後す
     ぐに終了するよう設定されているのに、スクリプトが何か表示するものがあっ
     たらしばらく待つ事を想定して作成されている場合です。これを修正するに
     は、節 *Note デフォルトの起動オプション:: を参照してください。

   * スクリプトのアイコンを `PythonInterpreter' の上に重ねようとふ
     らふらさせても、 `PythonInterpreter' がハイライトにならない場
     合。これは、たぶんクリエータコードと文書のタイプがセットされていない(ある
     いは誤ってセットされている)ためです。 - こういうことは、ファイルを
     Mac でないコ
     ンピュータから持ってきた場合に時々おこることです。詳細は節 *Note
     クリエータをセットしてダブルクリックする:: を参照してください。


File: python-mac-jp.info,  Node: クリエータをセットしてダブルクリックする,  Prev: ドラッグ＆ドロップする,  Up: Pythonスクリプトの走らせ方

クリエータをセットしてダブルクリックする
........................................

起動したいスクリプトが適当なクリエータコードとファイルタイプを持ってい
るなら、スクリプトを起動するには単にダブルクリックすれば良い。 "ダブ
ルクリック可能"にするには、ファイルが `TEXT' タイプで、クリエー
タコード`Pyth' である必要があります。

クリエータコードとファイルタイプをセットするには、IDEで行うか (節 *Note
Pythonスクリプトを書く:: と *Note Save as対Save as Applet:: を参照)
Python モードを持つエディタ (`BBEdit' など)で行うか - これについては節
*Note BBedit:: を参照、あるいは他のMacのユーティリティで
行えます。しかし、スクリプト(`fixfiletypes.py')が MacPython に同
梱されていて、このスクリプトで Python により適切なタイプとクリエータコー
ドをセットできるようになっています。

`fixfiletypes.py' スクリプトは、指定したディレクトリに対してファ
イルタイプとクリエータコードを変えます。`fixfiletypes.py' は以下
のよう使います。

  1. スクリプトを、MacPython 配布物の Mac フォルダの中にある scripts
     フォル ダに置く。

  2. 修正したいスクリプトを、全部ひとつのフォルダに入れる。

  3. `fixfiletypes.py' アイコンをダブルクリックする。

  4. 修正したいファイルの入ったフォルダを選んで"Select current folder"
     ボタンを押す。


File: python-mac-jp.info,  Node: コマンドライン引数をシミュレートする,  Next: Pythonスクリプトを作成する,  Prev: Pythonスクリプトの走らせ方,  Up: MacPython-OS9の取得とインストール

コマンドライン引数をシミュレートする
------------------------------------

MacPython-OS9
でコマンドライン引数をシミュレートするには２つの方法があります。

  1. インタプリタオプション経由
        * スクリプトを起動する時、オプションキーを押す。こうするとPython
          インタプリタオプションのダイアログボックスが現われます。

        * "Set UNIX-style command line.."ボタンをクリックする。

        * "Argument"フィールドに引数をタイプする。

        * "OK"をクリックする。

        * "Run"をクリックする。

  2.
     ドロップ＆ドロップ経由。スクリプトをアプレットとして保存した場合には
     (節 *Note Save as対Save as Applet:: を参照)、
     "ドラッグ＆ドロップ"経由でコマンド引数
     もシミュレートできます。この場合、アプレットにドロップされたファイルの
     名前は `sys.argv' に追加され、スクリプトからはコマンドラインでタ
     イプされたように見えます。UNIX システムでのように、`sys.srgv'
     の第一項目は、アプレットへのパスになり、残りの項目はアプレットにドロッ
     プされたファイルです。


File: python-mac-jp.info,  Node: Pythonスクリプトを作成する,  Next: 設定を行なう,  Prev: コマンドライン引数をシミュレートする,  Up: MacPython-OS9の取得とインストール

Pythonスクリプトを作成する
--------------------------

Python スクリプトは単純なテキストファイルなので、テキストファイルが作
れるならどのような方法でも作成可能です。しかし、他にも特徴を供えた専用
ツールもあります。

* Menu:

* エディタでスクリプトを作成::
* Pythonモード付きのエディタ::
* BBedit::


File: python-mac-jp.info,  Node: エディタでスクリプトを作成,  Next: Pythonモード付きのエディタ,  Prev: Pythonスクリプトを作成する,  Up: Pythonスクリプトを作成する

エディタでスクリプトを作成
..........................

`MSWord' や `AppleWorks'  などのワードプロセッサプログ
ラムでテキストファイルを作成することもできますが、ファイルを"ASCII"
か"プレインテキスト"で保存するよう気を付けてください。


File: python-mac-jp.info,  Node: Pythonモード付きのエディタ,  Next: BBedit,  Prev: エディタでスクリプトを作成,  Up: Pythonスクリプトを作成する

Pythonモード付きのエディタ
..........................

テキストエディタのうちいくつかは、Python スクリプトを作成するための機
能が付加されています。例えば、コードを読みやすくするために Python キー
ワードに色を付けたり、モジュールのブラウズ、組み込みデバッガなどの機能
が含まれています。こうしたエディタには、`Alpha'、 `Pepper'、
`BBedit'、MacPython IDE(節 *Note Python
Interactiveウィンドウを使う::)があり ます。(1)

---------- Footnotes ----------

(1) 訳注：`mi'(<http://www.mimikaki.net/>)にも  Python
モードがありますので利用してみてください。


File: python-mac-jp.info,  Node: BBedit,  Prev: Pythonモード付きのエディタ,  Up: Pythonスクリプトを作成する

BBedit
......

`BBEdit' でスクリプトを作成する時は、保存したファイルをダブル
クリックすると起動できるように、エディタで Python クリエータコードを与
えると便利です。

   * `BBEdit' を立ち上げる。

   * "Preferences"を"Edit"メニューを選択する。

   * スクローリングリストから"File Types"を選択する。

   * "Add..."ボタンをクリックし、ナヴィゲーションダイアログから
     MacPython 配布物のディレクトリから `PythonInterpreter'
     を選んで、"open"をクリックする。

   * 設定パネルの"Save"ボタンをクリックする。


File: python-mac-jp.info,  Node: 設定を行なう,  Prev: Pythonスクリプトを作成する,  Up: MacPython-OS9の取得とインストール

設定を行なう
------------

MacPython 配布物には、作業を円滑に行なうために MacPython 環境をカスタ
マイズするのを助けるアプレット `EditPythonPrefs' が付属します。

* Menu:

* EditPythonPrefs::
* モジュール検索パスにモジュールを追加する::
* デフォルトの起動オプション::


File: python-mac-jp.info,  Node: EditPythonPrefs,  Next: モジュール検索パスにモジュールを追加する,  Prev: 設定を行なう,  Up: 設定を行なう

EditPythonPrefs
...............

`EditPythonPrefs' を利用して自分が望むような動作を Python にさ
せるための設定をする事ができます。`EditPythonPrefs' は、初期設
定を設定することと、特別版のPython実行ファイルをドロップしてカスタマイ
ズすること、の2つの事ができます。例えば、普段は正常終了したら出力ウィ
ンドウが閉じるが、正常終了した時に出力ウィンドウを開きっぱなしにしたい
などの理由で  `PythonInterpreter' の別のコピーを持ちたい場合、
後者の方法で手軽にできます。

デフォルト初期設定を変更するためには、単に `EditPythonPrefs'
をダブルクリックしてください。インタープリタの1つのコピーのみに対す
る変更は、`EditPythonPrefs' に対象となるコピーをドロップしてく
ださい。さらに、`Python IDE' および任意のアプレットの初期設定
を設定するために、この方法で `EditPythonPrefs' を使用すること
ができます。節 *Note Save as対Save as Applet:: を参照してください。


File: python-mac-jp.info,  Node: モジュール検索パスにモジュールを追加する,  Next: デフォルトの起動オプション,  Prev: EditPythonPrefs,  Up: 設定を行なう

モジュール検索パスにモジュールを追加する
........................................

`import' 文を実行する時、Python は `sys.path' で定義し
た場所のモジュールを探します。Mac 上で `sys.path' を編集するに
は、`EditPythonPrefs' を起動し、パスを上部の大きめのフィールド
に入力します(1行に1パス)。

MacPython はメイン Python ディレクトリを定義しているので、フォルダをメ
イン Python ディレクトリに追加するのが最も簡単な方法です。作成したスク
リプトを入れた"My Folder"という名前のフォルダをメイン Python ディレ
クトリに追加するには、`$(PYTHON):My Folder' を新規行として入力し ます。

OS 9 かそれ以前の OS でデスクトップを追加するには、
`StartupDriveName:Desktop Folder' を新規行として入力します。


File: python-mac-jp.info,  Node: デフォルトの起動オプション,  Prev: モジュール検索パスにモジュールを追加する,  Up: 設定を行なう

デフォルトの起動オプション
..........................

`EditPythonPrefs' ダイアログボックスの "Default startup
options..."ボタンは、多くのオプションを提供します。例えば、スクリプト
が終了した後で"Output"ウィンドウを開いたままにしたり、スクリプトの実行
が終了した後で対話モードに入るようにしたりできます。後者は、スクリプト
の途中で生成されたオブジェクトを検査する場合にとても便利です。


File: python-mac-jp.info,  Node: 統合開発環境,  Prev: MacPython-OS9の取得とインストール,  Up: Mac OS 9でPythonを利用する

統合開発環境
============

`Python IDE'(統合開発環境)は独立したアプリケーションで、Python
コードのテキストエディタや、クラスブラウザ、グラフィカルデバッガなどとし
て動作します。

* Menu:

* Python Interactiveウィンドウを使う::
* Pythonスクリプトを書く::
* 統合開発環境の中からスクリプトを実行する::
* Save as対Save as Applet::


File: python-mac-jp.info,  Node: Python Interactiveウィンドウを使う,  Next: Pythonスクリプトを書く,  Prev: 統合開発環境,  Up: 統合開発環境

"Python Interactive"ウィンドウを使う
------------------------------------

"ドラッグ＆ドロップ"の手法を使えない以外は、このウィンドウは
`PythonInterpreter' と同様に使えます。通常のドラッグ＆ドロップ
の代わりに、スクリプトを`Python IDE' アイコンの上にドロップす
ると、別々なスクリプトウィンドウでファイルが開かれます(こうすると手動
で実行させることができます - 節 *Note
統合開発環境の中からスクリプトを実行する::を参照)。


File: python-mac-jp.info,  Node: Pythonスクリプトを書く,  Next: 統合開発環境の中からスクリプトを実行する,  Prev: Python Interactiveウィンドウを使う,  Up: 統合開発環境

Pythonスクリプトを書く
----------------------

`Python IDE' は、対話的に使うだけでなく、Python プログラムを書
き上げ、順次保存したり、全体や一部分を実行したりすることもできます。

新たにスクリプトを作成したり、前に保存したスクリプトを開いたり、
"File"メニューの適当なメニューアイテムを選択することで、現在開いてい
るスクリプトを保存することもできます。 Python スクリプトを `Python IDE'
の上にドロップすると、ファイルが開いて編集可能に なります。

スクリプトを `Python IDE' で開きたいが "Open"ダイアログボッ
クスから場所を特定できない時や、"Can't open file of type ..."のよう
なエラーメッセージが出る時は、節 *Note
クリエータをセットしてダブルクリックする:: を参照してください。

`Python IDE' がスクリプトを保存する時に使われるクリエータコー
ドの設定は、ドキュメントウィンドウの一番右上の小さな黒い三角形をクリッ
クすると見つかり、"save options"を選択することで設定できます。デフォ
ルトではファイルのクリエータコードは `Python IDE' になります。
つまり保存されたファイルのアイコンダブルクリックするとそのまま IDE で
編集できます。`PythonInterpreter' で開いて実行するように、こ
の動作を変えたい時もあるでしょう。そうするには単に"save options"から
"Python Interpreter"を選べば良いだけです。こうしたオプションは
_ファイル単位_の設定であり、アプリケーション単位の設定でないこと
に注意してください。


File: python-mac-jp.info,  Node: 統合開発環境の中からスクリプトを実行する,  Next: Save as対Save as Applet,  Prev: Pythonスクリプトを書く,  Up: 統合開発環境

統合開発環境の中からスクリプトを実行する
----------------------------------------

`Python IDE'の最前面のウィンドウで全部実行(run all)ボタンを押
すと、そのウィンドウのスクリプトを実行できます。しかし、もし Python の
習慣通りに `if __name__ == "__main__":' と書いても、スクリプトは
デフォルトでは"__main__"に _ならない_ ことを知っておいてくださ
い。そういう風に動作させるには、ドキュメントウィンドウの一番右上の小さ
な黒い三角形から、"Run as __main__"オプションを選ばなくてはいけませ
ん。こうしたオプションは _ファイル単位_ の設定であって、アプリケー
ション単位でないことに注意してください。ただし、このオプションは、保存した後で
も _そのまま_ でありつづけます。これをオフにするには、単にもう一
度選択すればよいだけです。


File: python-mac-jp.info,  Node: Save as対Save as Applet,  Prev: 統合開発環境の中からスクリプトを実行する,  Up: 統合開発環境

"Save as"対"Save as Applet"
---------------------------

Python スクリプトを書き終わったら、"applet"として保存することもでき
ます("File"メニューの"Save as applet"を選択する)。こうする重要なメ
リットは、できあがったアプレットの上にファイルやフォルダをドロップする
と、スクリプトに対してコマンドライン風に引数として渡すことができる点に
あります。ただし、アプレットを別ファイルとして保存するように気をつけて、
くれぐれもせっかく作ったスクリプトを上書きしないようにしてください。そ
うしてしまうと、再度編集できなくなってしまいます。

"ドラッグ＆ドロップ"経由でアプレットに渡された項目にアクセスするため
には、標準的な `sys.argv' の動作を使えばよいです。詳しい説明は
Pythonの標準ドキュメントを見てください。

スクリプトをアプレットとして保存しても、 Python がインストールされてい
ないシステムでは実行できないことに注意してください。


File: python-mac-jp.info,  Node: MacPython モジュール,  Next: MacPython OSA モジュール,  Prev: Mac OS 9でPythonを利用する,  Up: Top

MacPython モジュール
********************

このドキュメントで記述されている次のモジュールは、いずれもMacintoshで
のみ利用可能です。

* Menu:

* mac::
* macpath::
* macfs::
* ic::
* MacOS::
* macostools::
* findertools::
* EasyDialogs::
* FrameWork::
* autoGIL::


File: python-mac-jp.info,  Node: mac,  Next: macpath,  Prev: MacPython モジュール,  Up: MacPython モジュール

`os' モジュールの実装
=====================

`os' モジュールの実装

このモジュールは、標準モジュール `os'  でサポー
トされるのと同様の機能を、Mac OS 9 オペレーティングシステムに依存した
機能として実装しています。このモジュールを利用する一番良い使い方は
`posix' モジュール経由で使うことです。このモジュールは MacPython-OS9
にのみ存在し、MacPython-OSX 上では  `posix' を利 用します。

このモジュールでは次の関数が使えます。 `chdir()'、 `close()'、 `dup()'、
`fdopen()'、 `getcwd()'、 `lseek()'、 `listdir()'、 `mkdir()'、
`open()'、 `read()'、 `rename()'、 `rmdir()'、 `stat()'、 `sync()'、
`unlink()'、 `write()'、 そして例外 `error'
も定義されています。`stat()' に より返される時間は浮動小数点数で、
MacPython-OS9 で使われる他の時間の 値と同様です。


File: python-mac-jp.info,  Node: macpath,  Next: macfs,  Prev: mac,  Up: MacPython モジュール

MacOS のパス操作関数
====================

MacOS のパス操作関数

このモジュールは `os.path' モジュールの Macintosh 実装です。こ
のモジュールで、`os.path'  への最も汎用性
のあるアクセスができます。`os.path' のドキュメントに関しては、
を参照してくだ さい。

次の関数がこのモジュールで利用できます。 `normcase()'、 `normpath()'、
`isabs()'、 `join()'、 `split()'、 `isdir()'、 `isfile()'、 `walk()'、
`exists()'。 `os.path'
で利用できる他の関数については、ダミーの関数として相
当する物が利用できます。


File: python-mac-jp.info,  Node: macfs,  Next: ic,  Prev: macpath,  Up: MacPython モジュール

各種のファイルシステムのサービス
================================

FSSpec、エイリアスマネージャ、`finder'エイリアス、標準ファイル
パッケージのサポート。

_This is deprecated in Python 2.3.
macfsモジュールは旧式のものです。`FSSpec'、`FSRef'、
`Alias'の代わりにCarbon.FileあるいはCarbon.Folderを使用し
てください。ファイルダイアログには`EasyDialogs'を使用してください。_

このモジュールはMacintosh FSSpecの操作、エイリアスマネージャ、`finder'
エイリアス、標準ファイルパッケージへのアクセスを提供します。

関数やメソッドがFILE引数をとる所では、引数は次の3つのうちのどれか1
つです。つまり、 (1) Macintoshのフルパス名あるいは部分パス名、(2)
`FSSpec'オブジェクト、(3) に記述され た3要素のタプル`(WDREFNUM, PARID,
NAME)'。
それを含むフォルダが存在する限り、`FSSpec'は存在しないファイルを示
すこともできます。
MacPythonではパス名も同じように使用できますが、パス名とFSRefsの働きの違
いのため、unix-Pythonでは異なります。詳しくはAppleの文書を参照してくださ
い。

エイリアスと標準ファイルパッケージの詳細についてもその文書に書かれていま
す。

`FSSpec(file)'
     指定したファイルに対する`FSSpec'オブジェクトを作成します。

`RawFSSpec(data)'
     文字列として`FSSpec'のC構造体の生データを与えると`FSSpec'
     オブジェクトを作成します。主に`FSSpec'構造体をネットワーク経由で得
     る場合に便利です。

`RawAlias(data)'
     文字列としてエイリアスのC構造体を生データとして与えると`Alias'
     オブジェクトを作成します。主に`FSSpec'構造体をネットワーク経由で得
     る場合に便利です。

`FInfo()'
     ゼロで埋めた`FInfo'オブジェクトを作成します。

`ResolveAliasFile(file)'
     エイリアスファイルを解決します(オリジナルのファイルとの対応を取りま
     す)。3要素のタプル`(FSSPEC, ISFOLDER,
     ALIASED)'を返します。ここでFSSPECは解決後の
     `FSSpec'オブジェクト、もしF SSPECがフォルダを指していた
     らISFOLDERはtrue、もしエイリアスだったらALIASEDはtrue(そ
     うでなければファイルそのものの`FSSpec'オブジェクトが返されます)で
     す。

`StandardGetFile([type, ...])'
     ユーザに標準的な"入力ファイルを開く"ダイアログを提示します。オプション
     として、4つまでの4文字のファイルタイプを渡すことができて、ユーザーが選ぶ
     ファイルを制限することができます。この関数は`FSSpec'オブジェクト
     と、ユーザがキャンセルしないでダイアログを完了したかを示すフラグを返しま
     す。

`PromptGetFile(prompt[, type, ...])'
     `StandardGetFile()'とほぼ同じですが、ダイアログの一番上に表示さ
     れるプロンプトを指定できます。

`StandardPutFile(prompt[, default])'
     ユーザに標準的な"出力ファイルを開く"ダイアログを提示します。
     PROMPTはプロンプト文字列で、省略可能なDEFAULT引数で出力
     ファイル名の初期値を指定します。この関数は`FSSpec'オブジェクト
     と、ユーザがキャンセルしないでダイアログを完了したかを示すフラグを返
     します。

`GetDirectory([prompt])'
     ユーザに非標準的な"ディレクトリを選ぶ"ダイアログを提示します。
     "select  current directory"ボタンをクリックするときには、選んだディ
     レクトリを開いていなくてはなりません。PROMPTはプロンプト文字列
     で、ダイアログの一番上に表示されます。`FSSpec'オブジェクトと、
     ユーザがキャンセルしないでダイアログを完了したかを示すフラグを返しま
     す。

`SetFolder([fsspec])'
     ファイル選択ダイアログを提示する時に、最初に表示されるフォルダをセッ
     トします。FSSPECで指定するのはそのフォルダにあるファイルであっ
     て、フォルダそのものではありません(指定されたファイルは存在していな
     くても構いません)。もし引数を渡さない場合は、フォルダはカレントディ
     レクトリ、つまり `os.getcwd()'で返されるディレクトリにセッ
     トされます。

     システム7.5から"一般設定"コントロールパネルで、ユーザが標準ファイ
     ルパッケージの振る舞いを変えられることに注意してください。その設定し
     だいでこの関数の呼びだしは効果がなくなります。

`FindFolder(where, which, create)'
     MacOSが管理する"特別な"フォルダ、例えばゴミ箱や初期設定フォルダな
     どの位置を探しだします。WHEREは検索するディスク、WHICHは
     探し出すフォルダを指定する4文字の文字列です。CREATEをセットす
     ると、そのフォルダが存在しなければ新たに生成します。 `(VREFNUM,
     DIRID)'のタプルを返します。

     WHEREとWHICHに与える定数は、標準モジュール
     CARBON.FOLDERSにあります。

`NewAliasMinimalFromFullPath(pathname)'
     与えられたファイルを指す最短の`alias'オブジェクトを返します。
     ファイルはフルパス名で与えなければなりません。これは存在しないファイ
     ルを指す`Alias'を作成する唯一の方法です。

`FindApplication(creator)'
     4文字のクリエータコードCREATORを持ったアプリケーションの位置を
     探し出します。この関数はアプリケーションを指す`FSSpec'オブジェ
     クトを返します。

* Menu:

* FSSpecオブジェクト::
* エイリアスオブジェクト::
* FInfoオブジェクト::


File: python-mac-jp.info,  Node: FSSpecオブジェクト,  Next: エイリアスオブジェクト,  Prev: macfs,  Up: macfs

FSSpecオブジェクト
------------------

`data'
     FSSpecオブジェクトの生データで、例えば他のアプリケーションに渡す場合に適
     しています。

`as_pathname()'
     `FSSpec'で記述されたファイルのフルパス名を返します。

`as_tuple()'
     `FSSpec'オブジェクトで記述されたファイルの `(WDREFNUM, PARID,
     NAME)'のタプルを返します。

`NewAlias([file])'
     このFSSpecで記述されたファイルのエイリアスオブジェクトを作成します。
     省略可能なFILEパラメータを渡すと、エイリアスはそのファイルに対
     する相対指定で作成され、その他の場合は絶対指定となります。

`NewAliasMinimal()'
     このファイルを指す最短エイリアスを作成します。

`GetCreatorType()'
     このファイルの4文字のクリエータとタイプを返します。

`SetCreatorType(creator, type)'
     このファイルに4文字のクリエータとタイプを設定します。

`GetFInfo()'
     ファイルのファインダ情報を示す`FInfo'オブジェクトを返します。

`SetFInfo(finfo)'
     ファイルのファインダ情報をFINFO(`FInfo'オブジェクト)で与えた
     値に設定します。

`GetDates()'
     作成日、修正日、バックアップ日を意味する3つの浮動小数点数からなるタプル
     を返します。

`SetDates(crdate, moddate, backupdate)'
     ファイルの作成日、修正日、バックアップ日を設定します。各々の値はPythonシ
     ステム全体で標準的な浮動小数点数フォーマットです。


File: python-mac-jp.info,  Node: エイリアスオブジェクト,  Next: FInfoオブジェクト,  Prev: FSSpecオブジェクト,  Up: macfs

エイリアスオブジェクト
----------------------

`data'
     Aliasレコードの生データで、リソースに書き込む時や他のプログラムに転送す
     る時に適しています。

`Resolve([file])'
     エイリアスを解決します。もしエイリアスが相対エイリアスとして作成され
     ていた場合は、相対指定の起点となるファイルを渡す必要があります。指定
     先のファイルのFSSpecと、`Alias'オブジェクト自体が検索途中で修
     正されたかどうかのフラグを返します。もしファイルが存在しなくてそのファ
     イルまでのパスが存在すれば、正しいFSSpecが返されます。

`GetInfo(num)'
     Cのルーチン`GetAliasInfo()'へのインターフェース。

`Update(file[, file2])'
     与えられたFILEを指すエイリアスを更新します。もしFILE2引
     数があれば、相対エイリアスが作成されます。

今のところ、リソースを`Alias'オブジェクトとして直接操作すること
は出来ません。そのため、`Update()'を呼んだ後か、
`Resolve()'でエイリアスに変更があったと分かった後は、Pythonプロ
グラムが責任もって `Alias'オブジェクトから`data'の値を取
りだして、リソースを修正する必要があります。


File: python-mac-jp.info,  Node: FInfoオブジェクト,  Prev: エイリアスオブジェクト,  Up: macfs

FInfoオブジェクト
-----------------

各々のフィールドが何を意味するかはに
完全に記述されているので、そちらを参照してください。

`Creator'
     ファイルの4文字のクリエータコード。

`Type'
     ファイルの4文字のタイプコード。

`Flags'
     ファイルのファインダフラグを16ビットの整数で表現したもの。
     FLAGSのビット値は、標準モジュール`MACFS'で定義されてい ます。

`Location'
     ファイルのアイコンがフォルダの中で配置される位置。

`Fldr'
     ファイルがあるフォルダ(整数表現)。


File: python-mac-jp.info,  Node: ic,  Next: MacOS,  Prev: macfs,  Up: MacPython モジュール

インターネット設定へのアクセス
==============================

インターネット設定へのアクセス。

このモジュールはMacintoshのインターネット設定 パッ
ケージへのアクセスを提供します。このパッケージにはインターネットプログラ
ムの設定、例えばメールアドレス、デフォルトのホームページなどが保存されてい
ます。
それ以外にもインターネット設定はMacintoshのクリエータ／タイプとファイル
名の拡張子との対応付けや、ファイルの転送方法(バイナリ、アスキーなど)に関す
る情報を含んでいます。 MacOS
9以降では、このモジュールは"インターネット"という名前のコント
ロールパネルになりました。

`icglue' という低レベルの関連モジュールが
あって、このモジュールはインターネット設定の基本的なアクセス機能を提供し
ています。
この低レベルモジュールは文書化されていませんが、ルーチンのdocstringでパ
ラメータが説明されていますし、ルーチン名はインターネット設定にあるPascal
やCのAPIと同じなので、このモジュールを使う場合はICプログラマーのため
の標準的な文書が利用できます。

`ic'モジュールは例外`error'と、インターネット設定から生
じる全てのエラーコードに対するシンボル名を定義しています。詳細はソースを
参照してください。

`error'
     `ic'モジュール内部のエラーで発生した例外。

`ic'モジュールは以下のクラスと関数を定義しています：

`IC([signature[, ic]])'
     インターネット設定オブジェクトを作成します。SIGNATUREは、現在のア
     プリケーションの4文字のクリエータ(デフォルトは`'Pyth'')で、他のICの
     設定に影響する可能性があります。オプションの引数ICはあらかじめ作成さ
     れた低レベルの`icglue.icinstance'で、別の設定ファイルなどから設定を得
     る場合に便利です。

`launchurl(url[, hint])'

`parseurl data[, start[, end[, hint]]]'

`mapfile file'

`maptypecreator type, creator[, filename]'

`settypecreator file'
     これらの関数は、後述する同名のメソッドへの"ショートカット"です。

* Menu:

* ICオブジェクト::


File: python-mac-jp.info,  Node: ICオブジェクト,  Prev: ic,  Up: ic

ICオブジェクト
--------------

`IC'オブジェクトは対応付けのインターフェースを持っているので、メー
ルアドレスは単に`IC['MailAddress']'で得ることができます。値の
代入も機能しますし、設定ファイルのオプションを変えることができます。

このモジュールは各種のデータ型を知っているので、IC内部の表現を"論理的"
なPythonデータ構造に変換します。`ic'モジュールをスタンドアロン
で実行するとテストプログラムが実行され、ICデータベースにある全てのキーと
値のペアをリスト表示するので、文書代わりになります。

もしこのモジュールがデータをどう表わすか分からない場合は、`data'
属性に生のデータを入れた`ICOpaqueData'タイプのインスタンスを返しま
す。このタイプのオブジェクトは値のアクセスだけでなく代入も可能です。

ディクショナリのインターフェースだけでなく、`IC'には以下のメソッド
があります。

`launchurl(url[, hint])'
     与えられたURLを解析し、正しいアプリケーションを起動してURLを渡します。省
     略可能なHINTは、`'mailto:''などのスキーム名で、不完全なURLはこ
     のスキームにあわせて完全化されます。もしHINTが与えられていない場合
     は、不完全なURLは無効になります。

`parseurl(data[, start[, end[, hint]]])'
     DATAの中からURLを検索して、URLの開始位置、終了位置、URLそのものを
     返します。省略可能なSTARTとENDで検索範囲を制限することができ
     ます。例えば、ユーザーが長いテキストフィールドをクリックしたとしても、テ
     キストフィールド全体とクリック位置STARTを渡すことができて、この
     ルーチンによってユーザーがクリックしたテキストからURL全体が返されます。
     既に述べたように、HINTはオプションのスキームで、不完全なURLを完全
     化するために使われます。

`mapfile(file)'
     与えられたFILEに対するマッピングエントリーを返します。FILEと
     してファイル名か`macfs.FSSpec()'の結果を渡すことができて、存在
     しないファイルであってもかまいません。

     マッピングエントリーはタプル`(VERSION, TYPE, CREATOR, POSTCREATOR,
     FLAGS, EXTENSION, APPNAME, POSTAPPNAME, MIMETYPE, ENTRYNAME)'
     として返されます。ここでVERSIONはエントリーのバージョン番号、
     TYPEは4文字のファイルタイプ、CREATORは4文字のクリエータタ
     イプ、POSTCREATORは省略可能な後処理用アプリケーションを示す4文字
     のクリエータで、このアプリケーションはファイルをダウンロードした後にファ
     イルを後処理します。FLAGSは各種のビットであり、転送をバイナリで
     行うかアスキーで行うかなどを表わします。EXTENSIONはこのファイルタ
     イプに対するファイル名の拡張子、APPNAMEはファイルが属するアプリ
     ケーションの出力可能な名前、POSTAPPNAMEは後処理用アプリケーショ
     ン、MIMETYPEはこのファイルのMIMEタイプ、最後のENTRYNAMEは
     このエントリーの名前です。

`maptypecreator(type, creator[, filename])'
     与えられた4文字のTYPEとCREATORを持つファイルに対するマッピン
     グエントリーを返します。正しいエントリーが見つかりやすいように、オプショ
     ンのFILENAMEを指定することもできます(例えばクリエータ`'????''
     の場合など)。

     マッピングエントリーはMAPFILEと同じフォーマットで返されます。

`settypecreator(file)'
     存在するFILEをファイル名か`macfs.FSSpec()'の結果として与
     えると、拡張子から判断してクリエータとタイプを適切にセットします。ファイ
     ンダにこの変更が伝えられるので、ファインダのアイコンは即座に更新されま
     す。


File: python-mac-jp.info,  Node: MacOS,  Next: macostools,  Prev: ic,  Up: MacPython モジュール

Mac OS インタプリタ機能へのアクセス
===================================

Mac OS 固有のインタープリタ機能へのアクセス。

このモジュールは、Python インタプリタ内の MacOS 固有の機能に対するアク
セスを提供します。例えば、インタプリタのイベントループ関数などです。十
分注意して利用してください。

モジュール名が大文字で始まることに注意してください。これは昔からの約束
です。

`runtimemodel'
     `'carbon'' か `'macho'' のいずれかです。現在利用している Python が
     Mac OS X および Mac OS 9互換性をもつ CarbonLib 形式、あるい は Mac
     OS X のみの Mach-O 形式をのどちらであるか判断できます。Python
     の初期のバージョンでは、値がさらに古い Mac OS 8
     ランタイムモデル用の `'ppc'' である事があります。

`linkmodel'
     インタープリタがどのような方法でリンクされているかを返します。拡張モ
     ジュールがリンクモデル間で非互換性かもしれない場合、パッケージはより多
     くの適切なエラーメッセージを伝えるためにこの情報を使用することができま
     す。値は静的リンクした Python は `'static''、Mac OS X framework
     で構築した Python は `'framework''、標準の unix 共有ライブラリ
     (shared library)で構築された Python は `'shared''、Mac OS 9 互換
     Python  では `'cfm'' となります。

`Error'
     MacOS でエラーがあると、このモジュールの関数か、Mac
     固有なツールボック
     スインターフェースモジュールから、この例外が生成されます。引数は、整数
     エラーコード(`OSErr' 値)とテキストで記述されたエラーコードです。
     分かっている全てのエラーコードのシンボル名は、標準モジュール
     `macerrors'  で定義されています。

`SetEventHandler(handler)'
     内部のインタプリタループでは、`ScheduleParams()' で止めないか
     ぎり、Python
     は時々イベントをチェックします。イベントがある場合は、こ
     の関数を使うと、Pythonイベントハンドラ関数を渡せます。イベントはパラメー
     タとして渡され、イベントが完全に処理された場合は、ハンドラ関数は非ゼロ
     を返さなくてはなりません。それ以外はイベント処理は継続されます(例えば、
     イベントをコンソールウィンドウパッケージ渡すなど)。

     イベントハンドラをクリアするには、パラメータなしで
     `SetEventHandler()' を呼び出します。既にイベントハンドラがセッ
     トされているのに、さらにセットしようとするとエラーになります。

     有効性：MacPython-OS9

`SchedParams([doint[, evtmask[, besocial[, interval[, bgyield]]]]])'
     これはインタプリタの内部ループイベントハンドラに影響を与えます。
     INTERVAL は、インタプリタがどれだけの頻度(浮動小数点数の秒で表わさ
     れる)でイベント処理コードに入るかを指定します。真なら DOINT は割
     り込み(コマンドドット)チェックが行われます。EVTMASK はインタプリ
     タに、イベントをマスクして
     (再描画、他のアプリケーションに切り替わるマ
     ウスクリックなど)イベント処理するよう指示します。BESOCIAL
     フラグは、 他のプロセスが動作するチャンスを与えます。Python
     が最前面で動いている 時は、最小限の実行時間が割り当てられ、Python
     が背景にある場合は、 INTERVAL 当りに BGYIELD 秒が与えられます。

     全てのパラメータはオプションで、現在の値がデフォルト値となります。この
     関数で返される値は、これらのオプションの既存の値からなるタプルです。デ
     フォルトの初期値は、全ての処理がオンで、チェックは 1/4
     秒毎、バックグ ラウンドで動作している場合はプロセッサも 1/4
     秒毎に割り当てられます。

     最も一般的な使用ケースは完全にインタープリタメインループ中の処理をで
     きなくするために `SchedParams(0, 0)' を呼ぶことです。

     有効性：MacPython-OS9

`HandleEvent(ev)'
     イベントレコード EV を Python のイベントループに渡す、というより
     は、`sys.stdout' ウィンドウ(Pythonをビルドしたコンパイラにもとづ
     いて) のハンドラに渡されることになります。こうすると、Python
     プログラ
     ムが独自のイベント処理を行え、コマンドピリオドやウィンドウの切り替えが
     行えます。

     `SetEventHandler()' でセットしたイベントハンドラからこの関数
     を呼びだそうとすると、例外が生じます。

     有効性：MacPython-OS9

`GetErrorString(errno)'
     MacOSのエラーコード ERRNO のテキスト表現を返します。

`splash(resid)'
     この関数は、RESID で与えた DLOG リソースの内容で、スプラッシュウィ
     ンドウを画面に表示します。引数なしで呼びだすと、スプラッシュ画面を取り
     除きます。拡張モジュールをたくさんロードさせる前に、初期化のタイミング
     でアプレットにスプラッシュ画面を表示させたいときに、この関数が便利でしょ
     う。

     有効性：MacPython-OS9

`DebugStr(message [, object])'
     Mac OS 9上では、メッセージ MESSAGE を出してローレベルデバッガに
     入ります。オプションの OBJECT 引数は使われませんが、デバッガから
     内容を容易に検査することができます。Mac OS X 上では 文字列が単に
     stderr に印字されます。

     この関数を使うときは十分気を付けてください。MacsBug
     などのローレベルデ
     バッガがインストールされていない場合は、システムがクラッシュしてしまい
     ます。この関数は主に Python
     拡張モジュールの開発者のために用意されてい ます。

`SysBeep()'
     ベルを鳴らします。

`GetTicks()'
     システム起動時からのチック数(clock ticks、1/60秒)を得ます。

`GetCreatorAndType(file)'
     2つの4文字の文字列としてファイルクリエータおよびファイルタイプを返しま
     す。FILE 引数はパスもしくは、`FSSpec'、`FSRef' オブジェ
     クトを与える事ができます。

`SetCreatorAndType(file, creator, type)'
     ファイルクリエータおよびファイルタイプを設定します。FILE 引数は
     パスもしくは、`FSSpec'、`FSRef' オブジェクトを与える事ができ
     ます。CREATOR と TYPE は4文字の文字列が必要です。

`openrf(name [, mode])'
     ファイルのリソースフォークを開きます。引数は組み込み関数 `open()'
     と同じです。返されたオブジェクトはファイルのように
     見えるかもしれませんが、これは Python
     のファイルオブジェクトではあり
     ませんので扱いに微妙な違いがあります。

`WMAvailable()'
     現在のプロセスが動作しているウィンドウマネージャにアクセスします。例え
     ば、Mac OS X サーバー上、あるいは SSH
     でログインしている、もしくは現在
     のインタープリタがフルブローンアプリケーションバンドル(fullblown
     application
     bundle)から起動されていない場合などのような、ウィンドウマネー
     ジャが存在しない場合は `False' を返します。

     Mac OS 9 上ではこの関数はつねに `True' を返します。


File: python-mac-jp.info,  Node: macostools,  Next: findertools,  Prev: MacOS,  Up: MacPython モジュール

ファイル操作に便利なルーチン
============================

ファイル操作に便利なルーチン。

このモジュールには、Macintosh上のファイル操作のための便利なルーチンがい
くつか含まれています。ファイルのパラメータは全てパス名、あるいは
`FSRef'か`FSSpec'オブジェクトで指定します。

`macostools'モジュールには以下の関数が定義されています。

`copy(src, dst[, createpath[, copytimes]])'
     ファイルSRCをDSTへコピーします。
     CREATEPATHが非ゼロなら、必要に応じてDSTに至るまでのフォルダ
     を作成します。
     このメソッドはデータとリソースフォークとファインダ情報をいくつか(クリ
     エータ、タイプ、フラグ)をコピーします。オプションで作成日、修正日、バッ
     クアップ日の情報もコピーします(デフォルトでこれらもコピーします)。カスタ
     ムアイコン、コメント、アイコン位置はコピーされません。

`copytree(src, dst)'
     必要に応じてフォルダを作成しながら、SRCからDSTへ再帰的にファ
     イルのツリーをコピーします。SRCとDSTはパス名で指定しなければ
     なりません。

`mkalias(src, dst)'
     SRCを示すファインダエイリアスDSTを作成します。

`touched(dst)'
     ファイルDSTのクリエータやタイプなどのファインダ情報が変わったこと
     をファインダに知らせます。
     ファイルはパス名か`FSSpec'で指定できます。この呼び出しによってアイ
     コンを再描画するようファインダに指示します。

`BUFSIZ'
     `copy'に用いるバッファサイズで、デフォルトは1メガバイトです。

ファインダエイリアスの作成プロセスは、Appleの文書で明らかにされていませ
ん。そのため、`mkalias()'で作成されたエイリアスは互換性のない振
る舞いをすることもあることに注意してください。


File: python-mac-jp.info,  Node: findertools,  Next: EasyDialogs,  Prev: macostools,  Up: MacPython モジュール

`finder'のApple Eventsインターフェース
======================================

`finder'のApple Eventsインターフェースのラッパー。

このモジュールのルーチンを使うと、Pythonプログラムからファインダが持つい
くつかの機能へアクセスできます。 これらの機能はファインダへのAppleEvent
インターフェー スのラッパーとして実装されています。
全てのファイルとフォルダのパラメータは、フルパス名、あるいは
`FSRef'か`FSSpec'オブジェクトで指定できます。

`findertools'モジュールは以下の関数を定義しています。

`launch(file)'
     ファインダにFILEを起動するように命令します。
     起動が意味するものはFILEに依存します。アプリケーションなら起動しま
     すし、フォルダなら開かれ、文書なら適切なアプリケーションで開かれます。

`Print(file)'
     ファインダにファイルを印刷するよう命令します。
     実際の動作はファイルを選択し、ファインダのファイルメニューから印刷コマン
     ドを使うのと同じです。

`copy(file, destdir)'
     ファインダにファイルかフォルダであるFILEをフォルダDESTDIRに
     コピーするよう命令します。
     この関数は新しいファイルを示す`Alias'オブジェクトを返します。

`move(file, destdir)'
     ファインダにファイルかフォルダであるFILEをフォルダDESTDIRに
     移動するように命令します。
     この関数は新しいファイルを示す`Alias'オブジェクトを返します。

`sleep()'
     マシンがサポートしていれば、ファインダにMacintoshをスリープさせるよう命
     令します。

`restart()'
     ファインダに、マシンが適切にリスタートするよう命令します。

`shutdown()'
     ファインダに、マシンが適切にシャットダウンするよう命令します。

