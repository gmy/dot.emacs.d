This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: 使用法,  Next: 何を pickle 化したり unpickle 化できるのか?,  Prev: データストリームの形式,  Up: pickle

使用法
------

オブジェクト階層を直列化するには、まず pickler を生成し、続いてpickler
の `dump()' メソッドを呼び出します。データストリームから非直列化
するには、まず unpickler を生成し、続いて unpicklerの `load()' メ
ソッドを呼び出します。`pickle' モジュールでは以下の定数を提供して
います:

`HIGHEST_PROTOCOL'
     有効なプロトコルのうち、最も大きいバージョン。この値は、PROTOCOL
     として渡せます。 _Added in Python version 2.3_

この手続きを便利にするために、`pickle' モジュールでは以下の関数を
提供しています:

`dump(object, file[, protocol[, bin]])'
     すでに開かれているファイルオブジェクト FILE に、OBJECT を pickle
     化したものを表現する文字列を書き込みます。 `Pickler(FILE,
     PROTOCOL, BIN).dump(OBJECT)' と同じです。

     PROTOCOL を指定しない場合、プロトコル 0 が使われます。PROTOCOL
     に負値か `HIGHEST_PROTOCOL'
     を指定すると、有効なプロトコルの内、もっとも高いバージョンのものが使われます。

     _Changed in Python version 2.3_

     オプションの BIN 引数が真の場合、バイナリ pickle 化形式が使われ
     ます; そうでない場合 (より低効率の) テキスト pickle
     化形式が使われます
     (以前のバージョンとの互換性のため、こちらが標準になっています)。

     FILE は、単一の文字列引数を受理する `write()' メソッド
     を持たなければなりません。従って、 FILE としては、書き込みのために
     開かれたファイルオブジェクト、 `StringIO' オブジェクト、
     その他前述のインタフェースに適合する他のカスタムオブジェクトをとることが
     できます。

`load(file)'
     すでに開かれているファイルオブジェクト FILE から文字列を読み出し、
     読み出された文字列を pickle 化されたデータ列として解釈して、もとの
     オブジェクト階層を再構築して返します。`Unpickler(FILE).load()'
     と同じです。

     FILE は、整数引数をとる `read()' メソッドと、引数の必要 ない
     `readline()' メソッドを持たなければなりません。
     これらのメソッドは両方とも文字列を返さなければなりません。
     従って、 FILE としては、読み出しのために
     開かれたファイルオブジェクト、 `StringIO' オブジェクト、
     その他前述のインタフェースに適合する他のカスタムオブジェクトをとることが
     できます。

     この関数はデータ列の書き込まれているモードがバイナリかそうでないかを
     自動的に判断します。

`dumps(object[, protocol[, bin]])'
     OBJECT の pickle 化された表現を、ファイルに書き込む代わりに
     文字列で返します。

     PROTOCOL を指定しない場合、プロトコル 0 が使われます。PROTOCOL
     に負値か `HIGHEST_PROTOCOL'
     を指定すると、有効なプロトコルの内、もっとも高いバージョンのものが使われます。

     _Changed in Python version 2.3_

     オプションの BIN 引数が真の場合、バイナリの pickle
     形式が使われます; そうでない場合、(より低効率の) テキストの pickle
     形式が使われます (こちらが標準の設定です)。

`loads(string)'
     pickle 化されたオブジェクト階層を文字列から読み出します。
     文字列中で pickle 化されたオブジェクト表現よりも後に続く文字列
     は無視されます。

`pickle' モジュールでは、以下の 3 つの例外も定義しています:

`PickleError'
     下で定義されている他の例外で共通の基底クラスです。`Exception'
     を継承しています。

`PicklingError'
     この例外は unpickle 不可能なオブジェクトが `dump()' メソッドに
     渡された場合に送出されます。

`UnpicklingError'
     この例外は、オブジェクトを unpickle 化する際に問題が発生した場合に
     送出されます。 unpickle 化中には `AttributeError'、 `EOFError'、
     `ImportError'、および `IndexError' といった他の例外
     (これだけとは限りません) も発生する可能性があるので
     注意してください。

`pickle' モジュールでは、2 つの呼び出し可能オブジェクト (1)
として、`Pickler' および `Unpickler' を提供しています:

`Pickler(file[, protocol[, bin]])'
     pickle 化されたオブジェクトのデータ列を書き込むためのファイル類似の
     オブジェクトを引数にとります。

     PROTOCOL を指定しない場合、プロトコル 0 が使われます。PROTOCOL
     に負値か `HIGHEST_PROTOCOL'
     を指定すると、有効なプロトコルの内、もっとも高いバージョンのものが使われます。

     _Changed in Python version 2.3_

     オプションの BIN を真にすると、 pickler により高効率のバイナリ
     pickle 形式を使うように指示します。 そうでない場合、ASCII
     形式が使われます (こちらの方が標準です)。

     FILE は単一の文字列引数を受理する `write()' メソッドを
     持たなければなりません。従って、 FILE としては、書き込みのために
     開かれたファイルオブジェクト、 `StringIO' オブジェクト、
     その他前述のインタフェースに適合する他のカスタムオブジェクトをとることが
     できます。

`Pickler' オブジェクトでは、一つ (または二つ) の public なメソッド
を定義しています:

`dump(object)'
     コンストラクタで与えられた、すでに開かれているファイルオブジェクトに
     OBJECT の pickle
     化された表現を書き込みます。コンストラクタに渡された BIN
     フラグの値に応じて、バイナリおよびASCII 形式が使われます。

`clear_memo()'
     picller の "メモ" を消去します。メモとは、共有オブジェクトまたは
     再帰的なオブジェクトが値ではなく参照で記憶されるようにするために、
     pickler がこれまでどのオブジェクトに遭遇してきたかを記憶するデータ
     構造です。このメソッドは pickler を再利用する際に便利です。

     _Notice:_ Python 2.3 以前では、`clear_memo()' は `cPickle'
     で生成された pickler でのみ利用可能でした。`pickle' モジュール
     では、pickler は `memo' と呼ばれる Python 辞書型のインスタンス
     変数を持ちます。従って、`pickler' モジュールにおける pickler
     のメモを消去は、以下のようにしてできます:

          mypickler.memo.clear()

     以前のバージョンの Python
     での動作をサポートする必要のないコードでは、 単に `clear_memo()'
     を使ってください。


同じ `Pickler' のインスタンスに対し、 `dump()' メソッドを
複数回呼び出すことは可能です。この呼び出しは、対応する `Unpickler'
インスタンスで同じ回数だけ `load()' を呼び出す操作に対応します。
同じオブジェクトが `dump()' を複数回呼び出して pickle 化された
場合、`load()' は全て同じオブジェクトに対して参照を行います (2)。 。

`Unpickler' オブジェクトは以下のように定義されています:

`Unpickler(file)'
     pickle データ列を読み出すためのファイル類似のオブジェクトを引数に
     取ります。このクラスはデータ列がバイナリモードかどうかを自動的に
     判別します。従って、`Pickler' のファクトリメソッドのような
     フラグを必要としません。

     FILE は、整数引数を取る `read()' メソッド、および引数を 持たない
     `readline()' メソッドの、 2 つのメソッドを持ちます。
     両方のメソッドとも文字列を返します。従って、 FILE としては、
     読み出しのために開かれたファイルオブジェクト、 `StringIO'
     オブジェクト、その他前述のインタフェースに適合する他のカスタム
     オブジェクトをとることができます。

`Unpickler' オブジェクトは 1 つ (または 2 つ) の public な
メソッドを持っています:

`load()'
     コンストラクタで渡されたファイルオブジェクトからオブジェクトの
     pickle 化表現
     を読み出し、中に収められている再構築されたオブジェクト階層を返します。

`noload()'
     `load()' に似ていますが、実際には何もオブジェクトを生成
     しないという点が違います。この関数は第一に pickle
     化データ列中で参照されている、"永続化 id" と呼ばれている
     値を検索する上で便利です。 詳細は以下の ~*Note pickle
     化プロトコル:: を参照してください。

     *注意:* `noload()' メソッドは現在 `cPickle' モジュールで生成された
     `Unpickler' オブジェクトのみで 利用可能です。`pickle' モジュールの
     `Unpickler' には、 `noload()' メソッドがありません。

---------- Footnotes ----------

(1)  `pickle'では、これらの呼び出し可能オブジェクトはクラスであり、
サブクラス化してその動作をカスタマイズすることができます。しかし、
`cPickle' モジュールでは、これらの呼び出し可能オブジェクト
はファクトリ関数であり、サブクラス化することができません。
サブクラスを作成する共通の理由の一つは、どのオブジェクトを実際に
unpickle するかを制御することです。詳細については  ~*Note Unpickler
をサブクラス化する:: を参照してください。

(2)  _警告_: これは、複数のオブジェクトを pickle
化する際に、オブジェクト
やそれらの一部に対する変更を妨げないようにするための仕様です。
あるオブジェクトに変更を加えて、その後同じ `Pickler' を使って 再度
pickle 化しようとしても、そのオブジェクトは pickle 化しなおされ ません
-- そのオブジェクトに対する参照が pickle 化され、`Unpickler'
は変更された値ではなく、元の値を返します。これには 2 つの問題点 : (1)
変更の検出、そして (2) 最小限の変更を整列化すること、があります。
ガーベジコレクションもまた問題になります。


File: python-lib-jp.info,  Node: 何を pickle 化したり unpickle 化できるのか?,  Next: pickle 化プロトコル,  Prev: 使用法,  Up: pickle

何を pickle 化したり unpickle 化できるのか?
-------------------------------------------

以下の型は pickle 化できます:

   * `None'、 `True'、および `False'

   * 整数、長整数、浮動小数点数、複素数

   * 通常文字列および Unicode 文字列

   * pickle 化可能なオブジェクトからなるタプル、リスト、および辞書

   * モジュールのトップレベルで定義されている関数

   * モジュールのトップレベルで定義されている組込み関数

   * モジュールのトップレベルで定義されているクラス

   * `__dict__' または `__setstate__()' を pickle 化
     できる上記クラスのインスタンス (詳細は ~*Note pickle
     化プロトコル:: 節を 参照してください)


pickle 化できないオブジェクトを pickle 化しようとすると、
`PicklingError' 例外が送出されます; この例外が起きた
場合、背後のファイルには未知の長さのバイト列が書き込まれて しまいます。

(組み込みおよびユーザ定義の) 関数は、値ではなく "完全記述された"
参照名として pickle 化されるので注意してください。これは、
関数の定義されているモジュールの名前と一緒と併せ、関数名 だけが pickle
化されることを意味します。 関数のコードや関数の属性は何も pickle
化されません。 従って、定義しているモジュールは unpickle 化環境で
import 可能で
なければならず、そのモジュールには指定されたオブジェクトが含まれて
いなければなりません。そうでない場合、例外が送出されます (1) 。

クラスも同様に名前参照で pickle 化されるので、unpickle 化環境には
同じ制限が課せられます。クラス中のコードやデータは何も pickle 化
されないので、以下の例ではクラス属性 `attr' が unpickle 化環境
で復元されないことに注意してください:

     class Foo:
         attr = 'a class attr'
     
     picklestring = pickle.dumps(Foo)

pickle 化可能な関数やクラスがモジュールのトップレベルで定義されて
いなければならないのはこれらの制限のためです。

同様に、クラスのインスタンスが pickle 化された際、そのクラスの
コードおよびデータはオブジェクトと一緒に pickle 化されることは
ありません。インスタンスのデータのみが pickle 化されます。
この仕様は、クラス内のバグを修正したりメソッドを追加した後でも、
そのクラスの以前のバージョンで作られたオブジェクトを読み出せるように
意図的に行われています。あるクラスの多くのバージョンで使われる
ような長命なオブジェクトを作ろうと計画しているなら、 そのクラスの
`__setstate__()' メソッドによって適切な変換が
行われるようにオブジェクトのバージョン番号を入れておくとよいかも
しれません。

---------- Footnotes ----------

(1) 送出される例外は `ImportError' や `AttributeError'
になるはずですが、他の例外も 起こりえます


File: python-lib-jp.info,  Node: pickle 化プロトコル,  Next: Unpickler をサブクラス化する,  Prev: 何を pickle 化したり unpickle 化できるのか?,  Up: pickle

pickle 化プロトコル
-------------------

この節では pickler/unpickler と直列化対象のオブジェクトとの間の
インタフェースを定義する "pickle 化プロトコル" について記述します。
このプロトコルは自分のオブジェクトがどのように直列化されたり非直列化
されたりするかを定義し、カスタマイズし、制御するための標準的な方法を
提供します。この節での記述は、unpickle 化環境を不信な pickle 化データ
に対して安全にするために使う特殊なカスタマイズ化についてはカバー
していません; 詳細は ~*Note Unpickler をサブクラス化する::
を参照してください。

* Menu:

* 通常のクラスインスタンスの pickle 化および unpickle 化::
* 拡張型の pickle 化および unpickle 化::
* 外部オブジェクトの pickle 化および unpickle 化::


File: python-lib-jp.info,  Node: 通常のクラスインスタンスの pickle 化および unpickle 化,  Next: 拡張型の pickle 化および unpickle 化,  Prev: pickle 化プロトコル,  Up: pickle 化プロトコル

通常のクラスインスタンスの pickle 化および unpickle 化
......................................................

pickle 化されたクラスインスタンスが unpickle 化されたとき、
`__init__()' メソッドは通常呼び出され_ません_ 。 unpickle 化の際に
`__init__()' が呼び出される方が望ましい場合、 クラスにおいてメソッド
`__getinitargs__()' を定義することが
できます。このメソッドはクラスコンストラクタ (すなわち `__init__()')
に渡されるべき _タプルを_ 返さなければなりません。 `__getinitargs__()'
メソッドは pickle 時に呼び出されます;
この関数が返すタプルはインスタンスの pickle 化データに組み込まれます。

クラスは、インスタンスの pickle 化方法にさらに影響を与えることが
できます; クラスが `__getstate__()' メソッドを定義している
場合、このメソッドが呼び出され、返された状態値はインスタンスの内容
として、インスタンスの辞書の代わりに pickle 化されます。
`__getstate__()' メソッドが定義されていない場合、 インスタンスの
`__dict__' の内容が pickle 化されます。

unpickle 化では、クラスが `__setstate__()' も定義していた
場合、unpickle 化された状態値とともに呼び出されます
(1)。`__setstate__()' メソッドが定義 されていない場合、pickle
化された状態は辞書型でなければならず、
その要素は新たなインスタンスの辞書に代入されます。クラスが
`__getstate__()' と `__setstate__()' の両方を定義して
いる場合、状態値オブジェクトは辞書である必要はなく、これらのメソッド
は期待通りの動作を行います。 (2)

_Notice:_ [warning] 新しいスタイルのクラスにおいて `__getstate__()'
が負値を返す場合、`__setstate__()' メソッドは呼ばれません。

---------- Footnotes ----------

(1) これらのメソッドはクラスインスタンスのコピーを
実装する際にもｔ用いられます

(2) このプロトコルはまた、 `copy'
で定義されている浅いコピーや深いコピー操作でも用いら れます。


File: python-lib-jp.info,  Node: 拡張型の pickle 化および unpickle 化,  Next: 外部オブジェクトの pickle 化および unpickle 化,  Prev: 通常のクラスインスタンスの pickle 化および unpickle 化,  Up: pickle 化プロトコル

拡張型の pickle 化および unpickle 化
....................................

`Pickler' が全く未知の型の -- 拡張型のような -- オブジェクトに
遭遇した場合、pickle 化方法のヒントとして 2 個所を探します。 第一は
`__reduce__()' メソッドを実装しているかどうかです。
もし実装されていれば、pickle 化時に `__reduce__()' メソッド
が引数なしで呼び出され、この呼び出しに対しては文字列またはタプルの
どちらかが返されなくてはなりません。

文字列が返された場合、文字列は通常通りに pickle 化されるグローバルな
変数を表します。タプルが返される場合、タプルの長さは 2 または 3
でなければならず、以下のような意味構成になっていなければなりません:

   * 呼び出し可能なオブジェクトで、unpickle 化環境において、クラスか、
     "安全なコンストラクタ (safe constructor)" (下を参照してください)
     として登録 されているか、属性 `__safe_for_unpickling__'
     を持ち値が真に
     設定されているような呼び出し可能なオブジェクトでなければなりません。
     そうでない場合、 unpickle 化環境で `UnpicklingError' が
     送出されます。通常通り、呼び出しオブジェクト自体はその名前が
     pickle 化されます。

   * 呼び出し可能なオブジェクトのための引数からなるタプルか、あるいは
     `None' _This is deprecated in Python 2.3.
     引数のタプルを使ってください_。

   * オプションとして、オブジェクトの状態。 ~*Note 外部オブジェクトの
     pickle 化および unpickle 化::
     節で記述されているようにして、オブジェクトの `__setstate__()'
     メソッドに渡されます。オブジェクトが `__setstate__()'
     メソッドを持たない場合、上記のように、
     この値は辞書でなくてはならず、オブジェクトの `__dict__'
     に追加されます。


unpickle 化の際、(上の条件に合致する場合) 呼び出し可能
オブジェクトは引数のタプルを渡して呼び出されます; オブジェクトは
unpickle 化されたオブジェクトを返さなくてはなりません。

タプルの二つ目の要素が `None' だった場合、呼び出し可能
オブジェクトを直接呼び出す代わりに、オブジェクトの `__basicnew__()'
メソッドが引数なしで呼び出されます。 オブジェクトは同様に unpickle
化されたオブジェクトを返さなければ なりません。

_This is deprecated in Python 2.3.  引数のタプルを使ってください。_

pickle 化するオブジェクト上で `__reduce__()' メソッドを実装
する代わりに、`copy_reg' モジュールを使って
呼び出し可能オブジェクトを登録する方法もあります。このモジュール
はプログラムに "縮小化関数 (reduction function)" と
ユーザ定義型のためのコンストラクタを登録する方法を提供します。
縮小化関数は、単一の引数として pickle 化するオブジェクトをとる
ことを除き、上で述べた `__reduce__()' メソッドと同じ意味
とインタフェースを持ちます。

登録されたコンストラクタは上で述べたような unpickle 化については
"安全なコンストラクタ" であると考えられます。


File: python-lib-jp.info,  Node: 外部オブジェクトの pickle 化および unpickle 化,  Prev: 拡張型の pickle 化および unpickle 化,  Up: pickle 化プロトコル

外部オブジェクトの pickle 化および unpickle 化
..............................................

オブジェクトの永続化を便利にするために、`pickle' は pickle
化されたデータ列上にないオブジェクトに対して参照を
行うという概念をサポートしています。これらのオブジェクトは "永続化 id
(persistent id)" で参照されており、この id は 単に印字可能な ASCII
文字からなる任意の文字列です。 これらの名前の解決方法は `pickle'
モジュールでは定義されて いません; オブジェクトはこの名前解決を pickler
および unpickler 上のユーザ定義関数にゆだねます (1) 。

外部永続化 id の解決を定義するには、pickler オブジェクトの
`persistent_id' 属性と、 unpickler オブジェクトの `persistent_load'
属性を設定する必要があります。

外部永続化 id を持つオブジェクトを pickle 化するには、pickler は自作の
`persistent_id()' メソッドを
持たなければなりません。このメソッドは一つの引数をとり、 `None'
とオブジェクトの永続化 id のうちどちらかを
返さなければなりません。`None' が返された場合、 pickler
は単にオブジェクトを通常のように pickle 化するだけ です。永続化 id
文字列が返された場合、 piclkler はその 文字列に対して、、unpickler
がこの文字列を永続化 id として 認識できるように、マーカと共に pickle
化します。

外部オブジェクトを unpickle 化するには、unpickler は自作の
`persistent_load()' 関数を持たなければなりません。 この関数は永続化 id
文字列を引数にとり、参照されているオブジェクト を返します。

_多分_ より理解できるようになるようなちょっとした 例を以下に示します:

     import pickle
     from cStringIO import StringIO
     
     src = StringIO()
     p = pickle.Pickler(src)
     
     def persistent_id(obj):
         if hasattr(obj, 'x'):
             return 'the value %d' % obj.x
         else:
             return None
     
     p.persistent_id = persistent_id
     
     class Integer:
         def __init__(self, x):
             self.x = x
         def __str__(self):
             return 'My name is integer %d' % self.x
     
     i = Integer(7)
     print i
     p.dump(i)
     
     datastream = src.getvalue()
     print repr(datastream)
     dst = StringIO(datastream)
     
     up = pickle.Unpickler(dst)
     
     class FancyInteger(Integer):
         def __str__(self):
             return 'I am the integer %d' % self.x
     
     def persistent_load(persid):
         if persid.startswith('the value '):
             value = int(persid.split()[2])
             return FancyInteger(value)
         else:
             raise pickle.UnpicklingError, 'Invalid persistent id'
     
     up.persistent_load = persistent_load
     
     j = up.load()
     print j

`cPickle' モジュール内では、 unpickler の `persistent_load' 属性は
Python リスト型として設定することができます。この場合、 unpickler
が永続化 id に遭遇しても、永続化 id 文字列は単にリストに
追加されるだけです。この仕様は、pickle データ中の全てのオブジェクトを
実際にインスタンス化しなくても、 pickle データ列中でオブジェクトに対する
参照を "嗅ぎ回る" ことができるようにするために存在しています (2)。
リストに `persistent_load' を設定するやり方は、 よく Unpickler クラスの
`noload()' メソッドと共に使われます。

---------- Footnotes ----------

(1)  ユーザ定義関数に関連付けを行うための実際のメカニズムは、 `pickle'
および `cPickle' では少し異なります。 `pickle'
のユーザは、サブクラス化を行い、 `persistend_id()' および
`persistent_load()'
メソッドを上書きすることで同じ効果を得ることができます

(2) Guide と Jim が居間に座り込んでピクルス (pickles) を
嗅いでいる光景を想像してください。


File: python-lib-jp.info,  Node: Unpickler をサブクラス化する,  Next: 例 3,  Prev: pickle 化プロトコル,  Up: pickle

Unpickler をサブクラス化する
----------------------------

デフォルトでは、逆 pickle 化は pickle 化されたデータ中に見つかった
クラスを import することになります。自前の unpickler をカスタマイズ
することで、何が unpickle 化されて、どのメソッドが呼び出されるか
を厳密に制御することはできます。しかし不運なことに、厳密に
なにを行うべきかは`pickle' と `cPickle' のどちらを使うかで異なります
(1)。

`pickle' モジュールでは、`Unpickler' からサブクラスを
導出し、`load_global()' メソッドを上書きする必要があります。
`load_global()' は pickle データ列から最初の 2 行を読まなければ
ならず、ここで最初の行はそのクラスを含むモジュールの名前、2 行目は
そのインスタンスのクラス名になるはずです。
次にこのメソッドは、例えばモジュールをインポートして属性を掘り起こす
などしてクラスを探し、発見されたものを unpickler のスタックに置きます。
その後、このクラスは空のクラスの `__class__' 属性に代入する
方法で、クラスの `__init__()' を使わずにインスタンスを魔法のように
生成します。 あなたの作業は (もしその作業を受け入れるなら)、unpickler
のスタックの 上に push された `load_global()' を、unpickle
しても安全だと
考えられる何らかのクラスの既知の安全なバージョンにすることです。
あるいは全てのインスタンスに対して unpickling を許可したくないなら
エラーを送出してください。このからくりがハックのように
思えるなら、あなたは間違っていません。このからくりを動かすには、
ソースコードを参照してください。

`cPickle' では事情は多少すっきりしていますが、十分という
わけではありません。何を unpickle 化するかを制御するには、 unpickler の
`find_global' 属性を関数か `None' に 設定します。属性が `None'
の場合、インスタンスを unpickle しようとする試みは全て
`UnpicklingError' を送出します。
属性が関数の場合、この関数はモジュール名またはクラス名を
受理し、対応するクラスオブジェクトを返さなくてはなりません。
このクラスが行わなくてはならないのは、クラスの探索、必要な import
のやり直しです。そしてそのクラスのインスタンスが unpickle
化されるのを防ぐためにエラーを送出することもできます。

以上の話から言えることは、アプリケーションが unpickle 化する
文字列の発信元については非常に高い注意をはらわなくてはならないと
いうことです。

---------- Footnotes ----------

(1)  注意してください: ここで記述されている機構は内部の属性とメソッドを
使っており、これらはPython の将来のバージョンで変更される対象に
なっています。われわれは将来、この挙動を制御するための、 `pickle'
および `cPickle' の両方で動作する、
共通のインタフェースを提供するつもりです。


File: python-lib-jp.info,  Node: 例 3,  Prev: Unpickler をサブクラス化する,  Up: pickle

例
--

以下にあるクラスについてどうやって picklle 化の振る舞いを変更
するかのれいを示します。`TextReader' クラスはファイルを開き、
`readline()' メソッドが呼ばれるたびに行番号と行の内容を
返します。`TextReader' インスタンスが pickle 化された場合、
ファイルオブジェクト _以外の_ 全ての属性が保存されます。 インスタンスが
unpickle 化された際、ファイルは再度開かれ、
以前のファイル位置から読み出しを再開します。上記の動作を
実装するために、`__setstat__()' および `__getstate__()'
メソッドが使われています。

     class TextReader:
         """Print and number lines in a text file."""
         def __init__(self, file):
             self.file = file
             self.fh = open(file)
             self.lineno = 0
     
         def readline(self):
             self.lineno = self.lineno + 1
             line = self.fh.readline()
             if not line:
                 return None
             if line.endswith("\n"):
                 line = line[:-1]
             return "%d: %s" % (self.lineno, line)
     
         def __getstate__(self):
             odict = self.__dict__.copy() # copy the dict since we change it
             del odict['fh']              # remove filehandle entry
             return odict
     
         def __setstate__(self,dict):
             fh = open(dict['file'])      # reopen file
             count = dict['lineno']       # read from file...
             while count:                 # until line count is restored
                 fh.readline()
                 count = count - 1
             self.__dict__.update(dict)   # update attributes
             self.fh = fh                 # save the file object

使用例は以下のようになるでしょう:

     >>> import TextReader
     >>> obj = TextReader.TextReader("TextReader.py")
     >>> obj.readline()
     '1: #!/usr/local/bin/python'
     >>> # (more invocations of obj.readline() here)
     ... obj.readline()
     '7: class TextReader:'
     >>> import pickle
     >>> pickle.dump(obj,open('save.p','w'))

`pickle' が Python プロセス間でうまく働くことを見たい
なら、先に進む前に他の Python セッションを開始してください。
以下の振る舞いは同じプロセスでも新たなプロセスでも起こります。

     >>> import pickle
     >>> reader = pickle.load(open('save.p'))
     >>> reader.readline()
     '8:     "Print and number lines in a text file."'

See also:
     *Note copy_reg:: 拡張型を登録するための Pickle
     インタフェース構成機構。

     *Note shelve:: オブジェクトのインデクス付きデータベース; `pickle'
     を使います。

     *Note copy:: オブジェクトの浅いコピーおよび深いコピー。

     *Note marshal:: 高いパフォーマンスを持つ組み込み型整列化機構。


File: python-lib-jp.info,  Node: cPickle,  Next: copy_reg,  Prev: pickle,  Up: Python ランタイム サービス

より高速な `pickle'
===================

`pickle' の高速バージョンですが、サブクラスはできません。

`cPickle' モジュールは Python オブジェクトの直列化および
非直列化をサポートし、`pickle'

モジュールとほとんど同じインタフェースと機能を提供します。
いくつか相違点がありますが、最も重要な違いはパフォーマンスと
サブクラス化が可能かどうかです。

第一に、`cPickle' は C で実装されているため、`pickle' よりも最大で 1000
倍高速です。第二に、`cPickle' モジュール
内では、呼び出し可能オブジェクト `Pickler()' および `Unpickler()'
は関数で、クラスではありません。 つまり、pickle 化や unpickle
化を行うカスタムのサブクラスを 導出することができないということです。
多くのアプリケーションではこの機能は不要なので、`cPickle'
モジュールによる大きなパフォーマンス向上の恩恵を受けられるはず
です。`pickle' と `cPickle' で作られた pickle
データ列は同じなので、既存の pickle データに対して `pickle' と
`cPickle' を互換に使用することができます (1)。

`cPickle' と `pickle' の API 間には他にも些細な相違が
ありますが、ほとんどのアプリケーションで互換性があります。
より詳細なドキュメンテーションは `pickle' のドキュメント
にあり、そこでドキュメント化されている相違点について挙げています。

---------- Footnotes ----------

(1) pickle データ形式は実際には小規模なスタック指向のプログラム
言語であり、またあるオブジェクトをエンコードする際に多少の自由度が
あるため、二つのモジュールが同じ入力オブジェクトに対して異なる
データ列を生成することもあります。しかし、常に互いに他のデータ列
を読み出せることが保証されています。


File: python-lib-jp.info,  Node: copy_reg,  Next: shelve,  Prev: cPickle,  Up: Python ランタイム サービス

`pickle'サポート関数を登録する
==============================

`pickle'サポート関数を登録する。

`copy_reg'モジュールは`pickle' と`cPickle'
モジュールに対するサポートを提供します。その上、`copy'
モジュールは将来これをつかう可能性が高いです。クラスでないオブジェクトコンストラクタについての設定情報を提供します。このようなコンストラクタはファクトリ関数か、またはクラスインスタンスでしょう。

`constructor(object)'
     OBJECTを有効なコンストラクタであると宣言します。OBJECTが呼び出し可能でなければ(そして、それゆえコンストラクタとして有効でないならば)、`TypeError'を発生します。

`pickle(type, function[, constructor])'
     FUNCTIONが型TYPEのオブジェクトに対する"リダクション"関数として使うことを宣言します。TYPEは"標準的な"クラスオブジェクトであってはいけません。(標準的なクラスは異なった扱われ方をします。詳細は、`pickle'モジュールのドキュメンテーションを参照してください。)
     FUNCTIONは文字列または二ないし三つの要素を含むタプルです。

     オプションのCONSTRUCTORパラメータが与えられた場合は、ピクルス化時にFUNCTIONが返した引数のタプルとともによびだされたときにオブジェクトを再構築するために使われ得る呼び出し可能オブジェクトです。OBJECTがクラスであるか、またはCONSTRUCTORが呼び出し可能でない場合に、`TypeError'を発生します。

     FUNCTIONとCONSTRUCTORの求められるインターフェイスについての詳細は、`pickle'モジュールを参照してください。


File: python-lib-jp.info,  Node: shelve,  Next: copy,  Prev: copy_reg,  Up: Python ランタイム サービス

Python オブジェクトの永続化
===========================

Python オブジェクトの永続化。

"シェルフ (shelf, 棚)" は辞書に似た永続性を持つオブジェクトです。 "dbm"
データベースとの違いは、シェルフの値 (キーではありません！)
は実質上どんな Python オブジェクトにも -- `pickle' モジュール
が扱えるなら何でも -- できるということです。これにはほとんどの
クラスインスタンス、再帰的なデータ型、沢山の共有されたサブオブジェクト
を含むオブジェクトが含まれます。キーは通常の文字列です。

`open(filename[,flag='c'[,protocol=`None'[,writeback=`False'[,binary=`None']]]])'
     永続的な辞書を開きます。指定された FILENAME は、根底にある
     データベースの基本ファイル名となります。副作用として、FILENAME
     には拡張子がつけられる場合があり、ひとつ以上のファイルが生成される
     可能性もあります。デフォルトでは、根底にあるデータベースファイルは
     読み書き可能なように開かれます。オプションの {}FLAG パラメタ は
     `anydbm.open' における FLAG パラメタと同様に 解釈されます。

     デフォルトでは、値を整列化する際にはバージョン 0 の pickle 化が
     用いられます。pickle 化プロトコルのバージョンは PROTOCOL
     パラメタで指定することができます。_Changed in Python version 2.3_

     デフォルトでは、永続的な辞書の可変エントリに対する変更をおこなっても、
     自動的にファイルには書き戻されません。オプションの WRITEBACK
     パラメタが {}TRUE に設定されていれば、アクセスされたすべての
     エントリはメモリ上にキャッシュされ、ファイルを閉じる際に書き戻されます;
     この機能は永続的な辞書上の可変の要素に対する変更を容易にしますが、
     多数のエントリがアクセスされた場合、膨大な量のメモリがキャッシュの
     ために消費され、アクセスされた全てのエントリを書き戻す
     (アクセスされた
     エントリが可変であるか、あるいは実際に変更されたかを決定する方法は
     存在しないのです)
     ために、ファイルを閉じる操作を非常に低速にしてしまいます。

shelve
オブジェクトは辞書がサポートする全てのメソッドをサポートしています。
これにより、辞書ベースのスクリプトから永続的な記憶媒体を必要とする
スクリプトに容易に移行できるようになります。

* Menu:

* 制限事項::
* 使用例::


File: python-lib-jp.info,  Node: 制限事項,  Next: 使用例,  Prev: shelve,  Up: shelve

制限事項
--------

   * どのデータベースパッケージが使われるか (例えば `dbm'、
     `gdbm'、`bsddb') は、どのインタフェースが
     利用可能かに依存します。従って、データベースを `dbm'
     を使って直接開く方法は安全ではありません。データベースはまた、
     `dbm' が使われた場合 (不幸なことに) その制約に縛られます --
     これはデータベースに 記録されたオブジェクト (の pickle
     化された表現) はかなり小さく
     なければならず、キー衝突が生じた場合に、稀にデータベースを更新
     することができなくなるということを意味します。

   * 実装に依存して、永続化した辞書を閉じるときには、変更がディスクに
     書き込まれるかもしれないし、必ずしも書き込まれないかもしれません。
     `Shelf' クラスの `__del__' メソッドは `close'
     メソッドを呼び出すので、プログラマは通常この作業を明示的に行う必要は
     ありません。

   * `shelve' モジュールは、シェルフに置かれたオブジェクトの _並列した_
     読み出し/書き込みアクセスをサポートしません
     (複数の同時読み出しアクセスは安全です)。あるプログラムが書き込み
     ために開かれたシェルフを持っているとき、他のプログラムは
     そのシェルフを読み書きのために開いてはいけません。この問題を
     解決するために UNIX のファイルロック機構を使うことができますが、
     この機構は UNIX のバージョン間で異なり、使われている
     データベースの実装について知識が必要となります。

`Shelf(dict[, protocol=None[, writeback=False[, binary=None]]])'
     `UserDict.DictMixin' のサブクラスで、pickle 化された値を DICT
     オブジェクトに保存します。

     デフォルトでは、値を整列化する際にはバージョン 0 の pickle 化が
     用いられます。pickle 化プロトコルのバージョンは PROTOCOL
     パラメタで指定することができます。pickle 化プロトコルについては
     `pickle' のドキュメントを参照してください。 _Changed in Python
     version 2.3_

     WRITEBACK パラメタが {}TRUE
     に設定されていれば、アクセスされたすべての
     エントリはメモリ上にキャッシュされ、ファイルを閉じる際に書き戻されます;
     この機能により、可変のエントリに対して自然な操作が可能になりますが、
     さらに多くのメモリを消費し、辞書をファイルと同期して閉じる際に長い時間が
     かかるようになります。

`BsdDbShelf(dict[, protocol=None[, writeback=False[, binary=None]]])'
     `Shelf' のサブクラスで、`first'、`next'、 `previous'、 `last'
     および `set_location' メソッドを公開しています。これらのメソッドは
     `bsddb' モジュールでは
     利用可能ですが、他のデータベースモジュールでは利用できません。
     コンストラクタに渡された DICT オブジェクトは上記のメソッドを
     サポートしていなくてはなりません。通常は、`bsddb.hashopen'、
     `bsddb.btopen' または `bsddb.rnopen' のいずれか
     を呼び出して得られるオブジェクトが条件を満たしています。オプションの
     PROTOCOL、 WRITEBACK、および BINARY パラメタは `Shelf'
     クラスにおけるパラメタと同様に解釈されます。


`DbfilenameShelf(filename[, flag='c'[, protocol=None[, writeback=False[, binary=None]]]])'
     `Shelf' のサブクラスで、辞書様オブジェクトの代わりに FILENAME
     を受理します。根底にあるファイルは {}`anydbm.open'
     を使って開かれます。デフォルトでは、
     ファイルは読み書き可能な状態で開かれます。オプションの FLAG
     パラメタは `open' 関数におけるパラメタと同様に解釈されます。
     オプションの PROTOCOL、 WRITEBACK、および BINARY パラメタは
     `Shelf' クラスにおけるパラメタと同様に解釈されます。



File: python-lib-jp.info,  Node: 使用例,  Prev: 制限事項,  Up: shelve

使用例
------

インタフェースは以下のコードに集約されています (`key' は文字列で、
`data' は任意のオブジェクトです):

     import shelve
     
     d = shelve.open(filename) # open -- file may get suffix added by low-level
                               # library
     
     d[key] = data   # store data at key (overwrites old data if
                     # using an existing key)
     data = d[key]   # retrieve a COPY of data at key (raise KeyError if no
                     # such key)
     del d[key]      # delete data stored at key (raises KeyError
                     # if no such key)
     flag = d.has_key(key)   # true if the key exists
     list = d.keys() # a list of all existing keys (slow!)
     
     # as d was opened WITHOUT writeback=True, beware:
     d['xx'] = range(4)  # this works as expected, but...
     d['xx'].append(5)   # *this doesn't!* -- d['xx'] is STILL range(4)!!!
     # having opened d without writeback=True, you need to code carefully:
     temp = d['xx']      # extracts the copy
     temp.append(5)      # mutates the copy
     d['xx'] = temp      # stores the copy right back, to persist it
     # or, d=shelve.open(filename,writeback=True) would let you just code
     # d['xx'].append(5) and have it work as expected, BUT it would also
     # consume more memory and make the d.close() operation slower.
     
     d.close()       # close it

See also:
     *Note anydbm:: `dbm'
     スタイルのデータベースに対する汎用インタフェース。 *Note bsddb::
     BSD `db' データベースインタフェース。 *Note dbhash:: `bsddb'
     をラップする薄いレイヤで、他のデータベースモジュールのように関数
     `open' を提供しています。 *Note dbm:: 標準の UNIX
     データベースインタフェース。 *Note dumbdbm:: `dbm'
     インタフェースの移植性のある実装。 *Note gdbm:: `dbm'
     インタフェースに基づいた GNU データベースインタフェース。 *Note
     pickle:: `shelve' によって使われるオブジェクト整列化機構。 *Note
     cPickle:: `pickle' の高速版。


File: python-lib-jp.info,  Node: copy,  Next: marshal,  Prev: shelve,  Up: Python ランタイム サービス

浅いコピーおよび深いコピー操作
==============================

浅いコピーおよび深いコピー操作。

このモジュールでは汎用の (浅い／深い) コピー操作を提供しています。

以下にインタフェースをまとめます:

     import copy
     
     x = copy.copy(y)        # make a shallow copy of y
     x = copy.deepcopy(y)    # make a deep copy of y

このモジュール固有のエラーに対しては、`copy.error' が送出されます。

浅い (shallow) コピーと深い (deep) コピーの違いが関係するのは、
複合オブジェクト (リストやクラスインスタンスのような他のオブジェクトを
含むオブジェクト) だけです:

   * _浅いコピー (shallow copy)_ は新たな複合オブジェクトを作成し、
     その後 (可能な限り)
     元のオブジェクト中に見つかったオブジェクトに対する _参照_
     を挿入します。

   * _深いコピー (deep copy)_ は新たな複合オブジェクトを作成し、
     その後元のオブジェクト中に見つかったオブジェクトの _コピー_
     を挿入します。


深いコピー操作には、しばしば浅いコピー操作の時には存在しない 2 つの
問題がついてまわります:

   * 再帰的なオブジェクト (直接、間接に関わらず、自分自身に対する参照
     を持つ複合オブジェクト) は再帰ループを引き起こします。

   * 深いコピーでは、_何もかも_ をコピーするため、例えば複数の
     コピー間で共有されるべき管理データ構造までも、余分にコピー
     してしまいます。


`deepcopy()' 関数では、これらの問題を以下のようにして 回避しています:

   * 現在のコピー過程ですでにコピーされたオブジェクトからなる、 "メモ"
     辞書を 保持します; かつ

   *
     ユーザ定義のクラスでコピー操作やコピーされる内容の集合を上書きできる
     ようにします。


現在のバージョンでは、モジュール、クラス、関数、メソッド、スタック追跡、
スタック構造、ファイル、ソケット、ウィンドウ、アレイ、その他これらに
類似の型をコピーしません。

クラスでは、pickle
化を制御するためのインタフェースと同じインタフェースを
コピーの制御に使うことができます。これらのメソッドに関する情報は
`pickle'  モジュールの記述を 参照してください。`copy' モジュールは
pickle 用関数登録モジュール `copy_reg' を使いません。

クラス独自のコピー実装を定義するために、特殊メソッド `__copy__()'
および `__deepcopy__()' を定義することができます。前者は
浅いコピー操作を実装するために使われます; 追加の引数はありません。
後者は深いコピー操作を実現するために呼び出されます; この関数には
単一の引数としてメモ辞書が渡されます。`__deepcopy__()'
の実装で、内容のオブジェクトに対して深いコピーを生成する必要がある場合、
`deepcopy()' を呼び出し、最初の引数にそのオブジェクトを、
メモ辞書を二つ目の引数に与えなければなりません。

See also:
     *Note pickle:: オブジェクト状態の取得と復元をサポートするために
     使われる特殊メソッドについて議論されています。


File: python-lib-jp.info,  Node: marshal,  Next: warnings,  Prev: copy,  Up: Python ランタイム サービス

内部使用向けの Python オブジェクト整列化
========================================

Python オブジェクトをバイト列に変換したり、その逆を
(異なる拘束条件下で) 行います。

このモジュールには Python 値をバイナリ形式で読み書きできるような関数
が含まれています。このバイナリ形式は Python 特有のものですが、
マシンアーキテクチャ非依存のものです (つまり、Python の値を PC 上で
ファイルに書き込み、Sun に転送し、そこで読み戻すことができます)。
バイナリ形式の詳細がドキュメントされていないのは故意によるもの です;
この形式は (稀にしかないことですが) Python のバージョン間で
変更される可能性があるからです。(1)

このモジュールは汎用の "永続化 (persistence)" モジュールでは
ありません。汎用的な永続化や、RPC 呼び出しを通じたPython オブジェクト
の転送については、モジュール `pickle' および `shelve'
を参照してください。`marshal' モジュールは主に、 "擬似コンパイルされた
(pseudo-compiled)" コードの `.pyc' ファイル
への読み書きをサポートするために存在します。従って、 Python のメンテナ
は、必要が生じれば marshal 形式を後方互換性のないものに変更する権利を
有しています。Python オブジェクトを直列化および非直列化したい場合には、
`pickle' モジュールを使ってください。

+ _Notice:_ [warning] + The `marshal' module is not intended to be
secure against + erroneous or maliciously constructed data.  Never
unmarshal data + received from an untrusted or unauthenticated source.
+ + _Notice:_ [warning]
`marshal'モジュールは、誤ったデータや悪意を持って作成されたデータ
に対する安全性を考慮していません。信頼できない、もしくは認証されていない
出所からのデータを非直列化してはなりません。

全ての Python オブジェクト型がサポートされているわけではありません;
一般的には、どの起動中の Python 上に存在するかに依存しないオブジェクト
だけがこのモジュールで読み書きできます。以下の型:
`None'、整数、長整数、浮動小数点数、文字列、Unicode オブジェクト、
タプル、リスト、辞書、タプルとして解釈されるコードオブジェクト、
がサポートされています。リストと辞書は含まれている要素もサポート
されている型であるもののみサポートされています; 再帰的なリストおよび
辞書は書き込んではなりません (無限ループを引き起こしてしまいます)。

*補足説明:* C 言語の `long int' が (DEC Alpha のように) 32
ビットよりも長いビット長を持つ場合、32 ビットよりも長い Python
整数を作成することが可能です。そのような整数が整列化された後、 C 言語の
`long int' のビット長が 32 ビットしかないマシン上で
読み戻された場合、通常整数の代わりにPython 長整数が返されます。
型は異なりますが、数値は同じです。(この動作は Python 2.2 で新たに
追加されたものです。それ以前のバージョンでは、値のうち最小桁から 32
ビット以外の情報は失われ、警告メッセージが出力されます。)

文字列を操作する関数と同様に、ファイルの読み書きを行う関数が
提供されています。

このモジュールでは以下の関数を定義しています:

`dump(value, file)'
     開かれたファイルに値を書き込みます。値はサポートされている型で
     なくてはなりません。ファイルは `sys.stdout' か、 `open()' や
     `posix.popen()' が返すようなファイル
     オブジェクトでなくてはなりません。またファイルはバイナリモード
     (`'wb'' または `'w+b'') で開かれていなければ なりません。

     値 (または値のオブジェクトに含まれるオブジェクト) がサポートされて
     いない型の場合、`ValueError' 例外が送出されます --
     が、同時にごみのデータがファイルに書き込まれます。このオブジェクトは
     `load()' で適切に読み出されることはないはずです。

`load(file)'
     開かれたファイルから値を一つ読んで返します。有効な値が読み出せなかった
     場合、`EOFError'、`ValueError'、または `TypeError'
     を送出します。ファイルはバイナリモード (`'rb'' または `'r+b'')
     で開かれたファイルオブジェクトでなければ なりません.
     _サポートされない型を含むオブジェクトが `dump()' で
     整列化されている場合、`load()' は整列化不能な値を `None'
     で置き換えます。_

`dumps(value)'
     `dump(VALUE, FILE)' でファイルに書き込まれるような
     文字列を返します。値はサポートされている型でなければなりません。値が
     サポートされていない型 (またはサポートされていない型のオブジェクト
     を含むような) オブジェクトの場合、`ValueError' 例外が
     送出されます。

`loads(string)'
     データ文字列を値に変換します。有効な値が見つからなかった場合、
     `EOFError'、 `ValueError'、または `TypeError' が送出されます。
     文字列中の他の文字は無視されます。

---------- Footnotes ----------

(1)  このモジュールの名前は (特に) Modula-3 の設計者の間で使われて
いた用語の一つに由来しています。彼らはデータを自己充足的な形式
で輸送する操作に "整列化 (marshalling)" という用語を使いました。
厳密に言えば、"整列させる (to marshal)" とは、あるデータを (例えば RPC
バッファのように) 内部表現形式から外部表現形式に変換する
ことを意味し、"非整列化 (unmarshalling)" とはその逆を意味します。


File: python-lib-jp.info,  Node: warnings,  Next: imp,  Prev: marshal,  Up: Python ランタイム サービス

警告の制御
==========

警告メッセージを送出したり、その処理方法を制御したり します。

_Added in Python version 2.1_

警告メッセージは一般に、ユーザに警告しておいた方がよいような状況下に
プログラムが置かれているが、その状況は (通常は) 例外を送出したり
そのプログラムを終了させるほどの正当な理由がないといった状況で
発されます。例えば、プログラムが古いモジュールを使っている場合
には警告を発したくなるかもしれません。

Python プログラマは、このモジュールの `warn()' 関数を
使うことで警告を発することができます。(C 言語のプログラマは
`PyErr_Warn()' を使います; 詳細は  を参照してください)。

警告メッセージは通常 `sys.stderr' に出力されますが、その処理
方法は、全ての警告に対する無視する処理から警告を例外に変更する
処理まで、柔軟に変更することができます。警告の処理方法は 警告カテゴリ
(以下参照)、警告メッセージテキスト、そして警告を
発したソースコード上の場所に基づいて変更することができます。
ソースコード上の同じ場所に対して特定の警告が繰り返された場合、
通常は抑制されます。

警告制御には 2 つの段階 (stage) があります: 第一に、警告が発される
たびに、メッセージを出力すべきかどうか決定が行われます; 次に、
メッセージを出力するなら、メッセージはユーザによって設定が可能なフック
を使って書式化され印字されます。

警告メッセージを出力するかどうかの決定は、警告フィルタによって制御
されます。警告フィルタは一致規則 (matching rule)と動作からなる配列です。
`filterwarnings()' を呼び出して一致規則をフィルタに追加する
ことができ、`resetwarnings()' を呼び出してフィルタを標準
設定の状態にリセットすることができます。

警告メッセージの印字は `showwarning()' を呼び出して行うことが
でき、この関数は上書きすることができます; この関数の標準の実装では、
`formatwarning()' を呼び出して警告メッセージを書式化しますが、
この関数についても自作の実装を使うことができます。

* Menu:

* 警告カテゴリ::
* 警告フィルタ::
* 利用可能な関数::


File: python-lib-jp.info,  Node: 警告カテゴリ,  Next: 警告フィルタ,  Prev: warnings,  Up: warnings

警告カテゴリ
------------

警告カテゴリを表現する組み込み例外は数多くあります。このカテゴリ化は
警告をグループごとフィルタする上で便利です。現在以下の警告カテゴリ
クラスが定義されています:

クラス                               記述
------                               -----
Warning                              全ての警告カテゴリクラスの基底クラスです。
                                     `Exception' のサブクラスです。
UserWarning                          `warn()' の標準のカテゴリです。
DeprecationWarning                   その機能が廃用化されていることを示す
                                     警告カテゴリの基底クラスです。
SyntaxWarning                        その文法機能があいまいであることを示す警告
                                     カテゴリの基底クラスです。
RuntimeWarning                       その実行時システム機能があいまいであることを
                                     示す警告カテゴリの基底クラスです。
FutureWarning                        その構文の意味付けが将来変更される予定である
                                     ことを示す警告カテゴリの基底クラスです。

これらは技術的には組み込み例外ですが、概念的には警告メカニズムに
属しているのでここで記述されています。

標準の警告カテゴリをユーザの作成したコード上でサブクラス化することで、
さらに別の警告カテゴリを定義することができます。 警告カテゴリは常に
`Warning' クラスのサブクラスでなければ なりません。


File: python-lib-jp.info,  Node: 警告フィルタ,  Next: 利用可能な関数,  Prev: 警告カテゴリ,  Up: warnings

警告フィルタ
------------

警告フィルタは、ある警告を無視すべきか、表示すべきか、あるいは
(例外を送出する) エラーにするべきかを制御します。

概念的には、警告フィルタは複数のフィルタ仕様からなる順番付けられた
リストを維持しています; 何らかの特定の警告が生じると、フィルタ仕様の
一致するものが見つかるまで、リスト中の各フィルタとの照合が行われます;
一致したフィルタ仕様がその警告の処理方法を決定します。
フィルタの各エントリは (ACTION, MESSAGE, CATEGORY, MODULE, LINENO)
からなるタプルです。ここで:

   * ACTION は以下の文字列のうちの一つです:

     値                                 処理方法
     ------                             -----
     "error"                            一致した警告を例外に変えます
     "ignore"                           一致した警告を決して出力しません
     "always"                           一致した警告を常に出力します
     "default"                          一致した警告のうち、警告の原因になった
                                        ソースコード上の場所ごとに、最初の警告のみ出力します。
     "module"                           一致した警告のうち、警告の原因になった
                                        モジュールごとに、最初の警告のみ出力します。
     "once"                             一致した警告のうち、警告の原因になった
                                        場所にかかわらず最初の警告のみ出力します。

   * MESSAGE は正規表現を含む文字列で、メッセージはこの
     パタンに一致しなければなりません (照合時には常に大小文字の区別を
     しないようにコンパイルされます)。

   * CATEGORY はクラス (`Warning' のサブクラス) です。
     警告クラスはこのクラスのサブクラスに一致しなければなりません。

   * MODULE は正規表現を含む文字列で、モジュール名はこのパタン
     に一致しなければなりません (照合時には常に大小文字の区別を
     しないようにコンパイルされます)。

   * LINENO 整数で、警告が発生した場所の行番号に一致しなければ
     なりません、すべての行に一致する場合には `0' になります。


`Warning' クラスは組み込みの `Exception' クラスから
導出されているので、警告をエラーに変えるには単に `category(message)' を
`raise' します。

警告フィルタは Python インタプリタのコマンドラインに渡される `-W'
オプションで初期化されます。インタプリタは `-W'
オプションに渡される全ての引数を `sys.warnoptions';
に変換せずに保存します; `warnings' モジュールは最初に `import'
された際にこれらの引数を解釈します (無効なオプションは`sys.stderr'
にメッセージを出力した後 無視されます)。

