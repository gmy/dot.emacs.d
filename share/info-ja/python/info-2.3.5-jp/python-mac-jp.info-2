This is python-mac-jp.info, produced by makeinfo version 4.5 from
python-mac-jp.texi.

12 October 2005


File: python-mac-jp.info,  Node: EasyDialogs,  Next: FrameWork,  Prev: findertools,  Up: MacPython モジュール

基本的なMacintoshダイアログ
===========================

基本的なMacintoshダイアログ。

`EasyDialogs'モジュールはMacintoshの単純なダイアログを含んでいま す。
全てのルーチンは省略可能なリソースIDのパラメータIDをとり、対応する
ダイアログアイテム（タイプとアイテム番号）があれば、このIDによっ
てダイアログ用の`DLOG'リソースを上書きできます。詳細については
ソースを参照してください。

`EasyDialogs'モジュールには以下の関数が定義されています。

`Message(str[, id[, ok=None]])'
     メッセージテキストSTR付きのモーダルダイアログを表示します。テキス
     トの長さは最大255文字です。
     ボタンのテキストはデフォルトでは"OK"ですが、文字列の引数OKが与え
     られると、その文字列に設定できます。
     ユーザが"OK"ボタンをクリックすると、ユーザにコントロールが渡されます。

`AskString(prompt[, default[, id[, ok[, cancel]]]])'
     ユーザに文字列値を入力するよう要求するモーダルダイアログ表示します。
     PROMPTはプロンプトメッセージで、省略可能なDEFAULT引数は入力
     文字列の初期値です（指定されないなら`""'が使われます）。
     "OK"と"Cancel"ボタンの文字列はOKとCANCELの引数で変える
     ことができます。 文字列の長さは全て最大255文字です。
     `AskString()'は入力された文字列を返し、ユーザがキャンセルした
     場合は`None'を返します。

`AskPassword(prompt[, default[, id[, ok[, cancel]]]])'
     ユーザに文字列を入力するように要求するモーダルダイアログを表示します。
     `AskString()'に似ていますが、テキストは点で表示されます。
     引数は`AskString()'のものと同じ意味です。

`AskYesNoCancel(question[, default[, yes[, no[, cancel[, id]]]]])'
     プロンプトQUESTIONと"Yes"、"No"、"Cancel"というラベルの3つ
     ボタンが付いたダイアログを表示します。
     "Yes"を押したら`1'、"No"なら`0'、"Cancel"なら`-1' を返します。
     <RETURN>キーを押した場合はDEFAULTの値（DEFAULTが設定さ
     れていないなら`0'）を返します。
     ボタンのテキストはYES、NO、CANCELの引数で変更できます
     。ボタンを表示させないためにはその引数に`""'を与えます。

`ProgressBar([title[, maxval[, label[, id]]]])'
     プログレスバー付きのモードレスダイアログを表示します。
     これは後述の`ProgressBar'クラスのためのコンストラクタです。
     TITLEは表示されるテキスト文字列（デフォルトは"Working..."）で、
     MAXVALは進行が完了するときの値（デフォルトは`0'で、不定量の
     作業が残っていることを示します）、LABELはプログレスバーの上に表示
     されるテキストです。

`GetArgv([optionlist[ commandlist[, addoldfile[, addnewfile[, addfolder[, id]]]]]])'
     コマンドライン引数のリストを作るのを補助するダイアログを表示します。
     引数を`getopt.getopt()'に渡すのに適した`sys.argv'のフォー
     マットのリストを返します。
     ADDOLDFILE、ADDNEWFILE、ADDFOLDERの引数はブーリアン型 の引数です。
     これらが非ゼロなら、存在するファイル、まだ（おそらく）存在しないファイ
     ル、フォルダをコマンドラインのパスとしてそれぞれ設定できます。
     （注意：`getopt.getopt()'で認識されるために、オブションの引数は
     コマンドラインの中でファイルとフォルダの引数の前に示されなければなりませ
     ん。）
     空白を含む引数は、空白をシングルクォートあるいはダブルクォートで囲んで
     指定できます。

     ユーザが"Cancel"ボタンを押したら`SystemExit'例外が発生しま す。

     OPTIONLISTはポップアップメニューを示すリストで、ユーザはその中から
     選択できます。
     ポップアップメニューのアイテムは次の2つの形のうちの1つです。OPTSTR
     あるいは`(OPTSTR, DESCR)'。
     DESCRは短い説明の文字列で、これがあるとポップアップメニューから選
     択されている間、ダイアログに表示されます。
     OPTSTRとコマンドライン引数の対応は以下の通りです。

     OPTSTR format                      Command-line format
     ------                             -----
     `x'                                `-x' （短いオプション）
     `x:'あるいは`x='                   `-x' （値を持つ短いオプション）
     `xyz'                              `--xyz'  （長いオプション）
     `xyz:'あるいは`xyz='               `--xyz' （値を持つ長いオプション）

     COMMANDLISTはCMDSTRあるいは`(CMDSTR,
     DESCR)'の形のアイテムからなるリストで、DESCRは前述のよ
     うに働きます。CMDSTRはポップアップメニューに表示されます。選択さ
     れるとCMDSTRがコマンドラインに追加されますが、それに続く
     `:'あるいは`='は（もし存在するなら）取り除かれます。

     _Added in Python version 2.0_

`AskFileForOpen( [message] [, typeList] [, defaultLocation] [, defaultOptionFlags] [, location] [, clientName] [, windowTitle] [, actionButtonLabel] [, cancelButtonLabel] [, preferenceKey] [, popupExtension] [, eventProc] [, previewProc] [, filterProc] [, wanted] )'
     開くファイルをユーザに尋ねるダイアログを表示して、選択されたファイ
     ルあるいはユーザがキャンセルしたらNONEを返します。
     MESSAGEは表示するテキストメッセージで、TYPELISTは選択
     可能にする4文字のファイルタイプのリスト、DEFAULTLOCATIONは最
     初に表示すルフォルダのパスネームでFSSpecあるいはFSRefで指定します。
     LOCATIONはダイアログを表示するスクリーン上の位置の`(x, y)'で、
     ACTIONBUTTONLABELはOKボタンの位置に"Open"の代わり
     に表示する文字列、CANCELBUTTONLABELは"Cancel"ボタンの位置
     に"Cancel"の代わりに表示する文字列、WANTEDは返したい値のタ
     イプで`string'、`unicode'、A`FSSpec'、
     `FSRef'とそれらのサブタイプを指定できます。

     その他の引数の説明についてはApple Navigation
     Servicesのドキュメントと
     EasyDialogsのソースコードを参照してください。

`AskFileForSave( [message] [, savedFileName] [, defaultLocation] [, defaultOptionFlags] [, location] [, clientName] [, windowTitle] [, actionButtonLabel] [, cancelButtonLabel] [, preferenceKey] [, popupExtension] [, fileType] [, fileCreator] [, eventProc] [, wanted] )'
     保存するファイルをユーザに尋ねるダイアログを表示して、選択されたファイ
     ルあるいはユーザがキャンセルしたらNONEを返します。
     SAVEDFILENAMEは保存するファイルのデフォルトの名前（であり、返され
     る値）です。
     その他の引数の説明についてはAskFileForOpenを参照してください。

`AskFolder( [message] [, defaultLocation] [, defaultOptionFlags] [, location] [, clientName] [, windowTitle] [, actionButtonLabel] [, cancelButtonLabel] [, preferenceKey] [, popupExtension] [, eventProc] [, filterProc] [, wanted] )'
     選択するフォルダをユーザに尋ねるダイアログを表示して、選択されたフォルダ
     あるいはユーザがキャンセルしたらNONEを返します。
     引数についての説明はAskFileForOpenを参照してください。

* Menu:

* プログレスバーオブジェクト::


File: python-mac-jp.info,  Node: プログレスバーオブジェクト,  Prev: EasyDialogs,  Up: EasyDialogs

プログレスバーオブジェクト
--------------------------

`ProgressBar'オブジェクトはモードレスプログレスバーの土台を提供し ます。
定量プログレスインジケータ（温度計スタイル）と不定量プログレスインジケ
ータ（床屋さんのぐるぐる看板のスタイル）が使用できます。
プログレスバーは最大値がゼロより大きければ定量インジケータに、そうでな
いなら不定量インジケータになります。 _Changed in Python version 2.2_

ダイアログは作られるとすぐに表示されます。
ダイアログの"Cancel"ボタンが押されるか、<Cmd-.>
(コマンドキーを押しながらピリオド.を押す)か<ESC>がタイ
プされるとダイアログウィンドウは隠され、`KeyboardInterrupt'が
発生します（しかし、この反応はプログレスバーが次にアップデートされるまで
、つまり`inc()'か`set()'の呼び出しによって次にアップデー
トされるまで発生しません）。
それ以外は、プログレスバーは`ProgressBar'オブジェクトが捨てられる
まで表示されたままになります。

`ProgressBar'オブジェクトには以下の属性とメソッドがあります。

`curval'
     プログレスバーの現在の値（整数型あるいはロング整数型）。
     プログレスバーの通常のアクセスのメソッドによって`curval'を
     `0'と`maxval'の間にします。
     この属性は直接変更すべきではありません。

`maxval'
     プログレスバーの最大の値（整数型あるいはロング整数型。`curval'
     が`maxval'に等しい時にはプログレスバー（温度計スタイル）は最大値
     を示します。
     もし`maxval'が`0'なら、プログレスバーは不定量インジケータ（
     床屋さんのぐるぐる看板）です。
     この属性は直接変更すべきではありません。

`title([newstr])'
     プログレスバーのダイアログのタイトルバーのテキストをNEWSTRに設定
     します。

`label([newstr])'
     プログレスバーのダイアログのプログレスボックスのテキストをNEWSTR
     に設定します。

`set(value[, max])'
     プログレスバーの現在値`curval'をVALUEに設定し、もし
     MAXが指定されたら`maxval'をMAXにします。
     VALUEは初めに0と`maxval'の間に強制的に設定されます。
     温度計スタイルのバーは変化を反映して更新され、また不定量インジケータも
     定量インジケータへ、あるいはその逆も起こります。

`inc([n])'
     プログレスバーの`curval'をNだけ増やし、Nが指定されな
     いなら`1'だけ増やします。
     （Nは負でもかまいません。その場合は減少します。）
     プログレスバーは変化を反映してアップデートされます。
     もしプログレスバーが不定量インジケータなら、床屋さんのぐるぐる看板が1回
     "スピン"します。
     もし増加された結果が0と`maxval'の範囲外になったら、
     `curval'は0と`maxval'の間に強制的に設定されます。


File: python-mac-jp.info,  Node: FrameWork,  Next: autoGIL,  Prev: EasyDialogs,  Up: MacPython モジュール

対話型アプリケーション・フレームワーク
======================================

対話型アプリケーション・フレームワーク

`FrameWork' モジュールは、対話型 Macintosh アプリケーションのク
ラスで、同時にフレームワークを提供します。プログラマは、サブクラスを作っ
て基底クラスの様々なメソッドをオーバーライドし、必要な機能を実装するこ
とでアプリケーションを組み立てられます。機能のオーバーライドは、時によっ
て様々な異なるレベルで行われます。つまり、ある一つのダイアログウィンド
ウでクリックの処理を普段と違う方法で行うには、完全なイベント処理をオー
バーライドする必要はありません。

`FrameWork' はまだ作成中のところがずいぶん残っています。このド
キュメントでは最も重要な機能だけしか記述していませんし、それさえも論理
的な形で書かれてもいません。ソースか例題を詳しく見てください。次にあげ
るのは、MacPython ニュースグループにポストされたコメントで、
`FrameWork' の強力さと限界について述べています。

     `FrameWork' の最大の強みは、制御の流れをたくさんの異なる部分に
     分割できることです。例えば `W' を使って、いろいろな方法でメ
     ニューをオン/オフしたり、残りをいじらずにうまくプラグインさせることが
     できます。`FrameWork' の弱点は、コマンドインタフェースが抽象化
     されていないこと(といっても難しいわけではないですが)、ダイアログサポー
     トが最低限しかないこと、それからコントロール/ツールバーサポートが全く
     ないことです。

`FrameWork' モジュールは次の関数を定義しています。

`Application()'
     アプリケーション全体を表現しているオブジェクト。メソッドについての詳細
     は以下の記述を参照してください。デフォルト `__init__()' ルーチ
     ンは、空のウィンドウ辞書とアップルメニューつきのメニューバーをを作成し
     ます。

`MenuBar()'
     メニューバーを表現するオブジェクト。このオブジェクトは普通はユーザは
     作成しません。

`Menu(bar, title[, after])'
     メニューを表現するオブジェクト。生成時には、メニューが現われる
     `MenuBar' と、TITLE 文字列、メニューが表示されるべき(1から
     始まる)位置 AFTER (デフォルトは末尾)を渡します。

`MenuItem(menu, title[, shortcut, callback])'
     メニューアイテムオブジェクトを作成します。引数は作成するメニューと、ア
     イテムのタイトル文字列、オプションのキーボードショートカット、コールバッ
     クルーチンです。コールバックは、メニューID、メニュー内のアイテム番号(1
     から数える)、現在のフロントウィンドウ、イベントレコードを引数に呼ばれ
     ます。

     呼び出し可能なオブジェクトのかわりに、コールバックは文字列でも良いです。
     この場合、メニューの選択は、最前面のウィンドウとアプリケーションの中で
     メソッド探索を引き起こします。メソッド名は、コールバック文字列の前に
     `'domenu_'' を付けたものです。

     `MenuBar' の `fixmenudimstate()'メソッドを呼びだすと、現在
     のフロントウィンドウにもとづいて、適切なディム化を全てのメニューアイテ
     ムに対してほどこします。

`Separator(menu)'
     メニューの最後にセパレータを追加します。

`SubMenu(menu, label)'
     LABEL の名前のサブメニューを、メニュー MENU の下に作成しま
     す。メニューオブジェクトが返されます。

`Window(parent)'
     (モードレス)ウィンドウを作成します。PARENT は、ウィンドウが属す
     るアプリケーションオブジェクトです。作成されたウィンドウはまだ表示され
     ません。

`DialogWindow(parent)'
     モードレスダイアログウィンドウを作成します。

`windowbounds(width, height)'
     与えた幅と高さのウィンドウを作成するのに必要な、`(LEFT, TOP,
     RIGHT, BOTTOM)' からなるタプルを返します。ウィ
     ンドウは以前のウィンドウに対して位置をずらして作成され、全体のウィンド
     ウが画面からなるべく外れないようにします。しかし、ウィンドウはいつでも
     全く同じサイズで、そのため一部は画面から隠れる場合もあります。

`setwatchcursor()'
     マウスカーソルを時計型に設定します。

`setarrowcursor()'
     マウスカーソルを矢印型に設定します。

* Menu:

* アプリケーションオブジェクト::
* ウィンドウオブジェクト::
* コントロールウィンドウオブジェクト::
* スクロールウィンドウオブジェクト::
* ダイアログウィンドウオブジェクト::


File: python-mac-jp.info,  Node: アプリケーションオブジェクト,  Next: ウィンドウオブジェクト,  Prev: FrameWork,  Up: FrameWork

アプリケーションオブジェクト
----------------------------

アプリケーションオブジェクトのメソッドは各種ありますが、次のメソッドを
あげておきます。

`makeusermenus()'
     アプリケーションでメニューを使う必要がある場合、このメソッドをオーバー
     ライドします。属性 `menubar' にメニューを追加します。

`getabouttext()'
     このメソッドをオーバーライドすることで、アプリケーションの説明を記述す
     るテキスト文字列を返します。代わりに、`do_about()' メソッドをオー
     バーライドすれば、もっと凝った"アバウト"メッセージを出す事ができます。

`mainloop([mask[, wait]])'
     このルーチンがメインイベントループで、作成したアプリケーションが動き出
     すためにはこれを呼ぶことになります。MASK は操作したいイベントを
     選択するマスクです。 WAIT は並行に動作しているアプリケーションに
     割り当てたいチック数(1/60秒)です(デフォルトで 0
     ですが、あまり良い値で はありません)。SELF
     フラグを立ててメインループを抜ける方法はまだ
     サポートされていますが、これはお勧めできません。代わりに
     `self._quit()'を呼んでください。

     イベントループは小さなパーツに分割されていて、各々をオーバーライドでき
     るようになっています。これらのメソッドは、デフォルトでウィンドウとダイ
     アログや、ドラッグとリサイズの操作、
     AppleEvent、非FrameWorkのウィンド
     ウに関するウィンドウの操作などに関するイベントを分岐することなどまで面
     倒をみてくれます。

     原則として、全てのイベントハンドラは、イベントが完全に取り扱われた場合
     は `1' を返さなくてはいけませんし、それ以外では `0' を返さな
     くてはいけません(例えば、前面のウィンドウは FrameWork
     ウィンドウではな
     い場合を考えてください)。こうしなくてはいけない理由は、アップデートイ
     ベントなどが Sioux
     コンソールウィンドウなどの他のウィンドウにきちんと渡さ
     れるようにするためです。OUR_DISPATCH やその呼び出し元の内部から
     `MacOS.HandleEvent()' を呼んではいけません。そうしたコードが
     Python
     の内部ループのイベントハンドラを経由して呼ばれると、無限ループ
     になりかねないからです。

`asyncevents(onoff)'
     非同期でイベント操作をしたい場合は、非ゼロの引数でこのメソッドを呼んで
     ください。こうすることで、イベントが生じた時に、内部のインタプリタのルー
     プで、アプリケーションイベントハンドラ ASYNC_DISPATCH が呼ばれる
     ことになります。すると、長時間の計算を行っている場合でも、FrameWorkウィ
     ンドウがアップデートされ、ユーザーインターフェースが動き続けるようにな
     ります。ただし、インタプリタの動作が減速し、非リエントラントのコード
     (例えばFrameWork自身など)に奇妙な動作が見られるかもしれません。デフォル
     トでは ASYNC_DISPATCH はすぐに OUR_DISPATCH を呼びますが、
     このメソッドをオーバーライドすると、特定のイベントを非同期で操作しても
     良くなります。処理しないイベントは Sioux
     などに渡されることになります。

     onあるいはoff値が返されます。

`_quit()'
     実行中の `mainloop()' 呼び出しを、次の適当なタイミングで終了さ
     せます。

`do_char(c, event)'
     ユーザーが文字 C をタイプした時に呼ばれます。イベントの全詳細は
     event構造体の中にあります。このメソッドはウィンドウオブジェクト内で使
     うためにも提供されています。このオブジェクトのウィンドウが最前面にある
     場合は、アプリケーション全般について本ハンドラをオーバーライドします。

`do_dialogevent(event)'
     イベントループ内部で最初に呼ばれて、モードレスダイアログイベントを処理
     します。デフォルトではメソッドは単にイベントを適切なダイアログに分岐す
     るだけです(関連したダイアログウィンドウオブジェクトを経由してではあり
     ません)。特別にダイアログイベント(キーボードショートカットなど)を処理す
     る必要がある場合にオーバーライドしてください。

`idle(event)'
     イベントが無い場合にメインイベントループから呼ばれます。 null
     イベン
     トも渡されます(つまりマウス位置などを監視することができます)。


File: python-mac-jp.info,  Node: ウィンドウオブジェクト,  Next: コントロールウィンドウオブジェクト,  Prev: アプリケーションオブジェクト,  Up: FrameWork

ウィンドウオブジェクト
----------------------

ウィンドウオブジェクトは特に次のメソッドを持ちます。

`open()'
     ウィンドウを開く時はこのメソッドをオーバーライドします。MacOS
     ウィンド ウ ID を `self.wid' に入れて `do_postopen()' メソッドを
     呼ぶと、親アプリケーションにウィンドウを登録します。

`close()'
     ウィンドウを閉じるときに特別な処理をする場合はこのメソッドをオーバーラ
     イドします。親アプリケーションからウィンドウの登録を削除するには、
     `do_postclose()' を呼びます。

`do_postresize(width, height, macoswindowid)'
     ウィンドウがリサイズされた後に呼ばれます。`InvalRect' を呼び出す
     以外にもすることがある場合はこれをオーバーライドします。

`do_contentclick(local, modifiers, event)'
     ウィンドウのコンテント部分をユーザーがクリックすると呼ばれます。引数は
     位置座標(ウィンドウを基準)、キーモディファイア、生のイベントです。

`do_update(macoswindowid, event)'
     ウィンドウのアップデートイベントが受信された時に呼ばれます。ウィンドウ
     を再描画します。

`do_activate(activate, event)'
     ウィンドウがアクティブ化(`ACTIVATE == 1')、非アクティブ化
     (`ACTIVATE == 0')する際に呼ばれます。フォーカスのハイライト
     などを処理します。


File: python-mac-jp.info,  Node: コントロールウィンドウオブジェクト,  Next: スクロールウィンドウオブジェクト,  Prev: ウィンドウオブジェクト,  Up: FrameWork

コントロールウィンドウオブジェクト
----------------------------------

コントロールウィンドウオブジェクトには `Window' オブジェクトのメ
ソッドの他に次のメソッドがあります。

`do_controlhit(window, control, pcode, event)'
     コントロール CONTROL のパートコード PCODE がユーザーにヒットされた
     場合に呼ばれます。トラッキングなどは任せておいてかまいません。


File: python-mac-jp.info,  Node: スクロールウィンドウオブジェクト,  Next: ダイアログウィンドウオブジェクト,  Prev: コントロールウィンドウオブジェクト,  Up: FrameWork

スクロールウィンドウオブジェクト
--------------------------------

スクロールウィンドウオブジェクトは、次のメソッドを追加したコントロール
ウィンドウオブジェクトです。

`scrollbars([wantx[, wanty]])'
     水平スクロールバーと垂直スクロールバーを作成します(あるいは破棄します)。
     引数はどちらが欲しいか指定します(デフォルトは両方)。スクロールバーは常
     に最小値 `0' 、最大値 `32767' です。

`getscrollbarvalues()'
     このメソッドは必ず作っておかなくてはいけません。現在のスクロールバーの
     位置を与えるタプル `(X, Y)' を(`0' の `32767'
     間で)返してください。バーの方向について全文書が可視状態で
     あること知らせるため `None' を返す事もできます。

`updatescrollbars()'
     文書に変更があった場合はこのメソッドを呼びます。このメソッドは
     `getscrollbarvalues()' を呼んでスクロールバーを更新します。

`scrollbar_callback(which, what, value)'
     あらかじめ与えておくメソッドで、ユーザーとの対話により呼ばれます。
     WHICH は `'x'' か `'y'' 、WHATは `'-'', `'--'', `'set'',`'++'',
     `'+''のどれかです。 `'set''
     の場合は、VALUEに新しいスクロールバー位置を入れてお きます。

`scalebarvalues(absmin, absmax, curmin, curmax)'
     `getscrollbarvalues()' の結果から値を計算するのを助ける補助的な
     メソッドです。文書の最小値と最大値、可視部分に関する最先頭値(最左値)と
     最底値(最右値)を渡すと、正しい数か `None' を返します。

`do_activate(onoff, event)'
     ウィンドウが最前面になった時、スクロールバーのディム(dimming)/ハイライ
     トの面倒をみます。このメソッドをオーバーライドするなら、オーバーライド
     したメソッドの最後でオリジナルのメソッドを呼んでください。

`do_postresize(width, height, window)'
     スクロールバーを正しい位置に移動させます。オーバーライドする時は、オー
     バーライドしたメソッドの一番最初でオリジナルのメソッドを呼んでください。

`do_controlhit(window, control, pcode, event)'
     スクロールバーのインタラクションを処理します。これをオーバーライドする
     時は、オリジナルのメソッドを最初に呼び出してください。非ゼロの返り値は
     スクロールバー内がヒットされたことを意味し、実際に処理が進むことになり
     ます。


File: python-mac-jp.info,  Node: ダイアログウィンドウオブジェクト,  Prev: スクロールウィンドウオブジェクト,  Up: FrameWork

ダイアログウィンドウオブジェクト
--------------------------------

ダイアログウィンドウオブジェクトには、`Window' オブジェクトのメソッ
ドの他に次のメソッドがあります。

`open(resid)'
     ID RESID の DLOG リソースからダイアログウィンドウを作成します。
     ダイアログオブジェクトは `self.wid' に保存されます。

`do_itemhit(item, event)'
     アイテム番号 ITEM がヒットされた時に呼ばれます。トグルボタンなど
     の再描画は自分で処理してください。


File: python-mac-jp.info,  Node: autoGIL,  Prev: FrameWork,  Up: MacPython モジュール

イベントループ中のグローバルインタープリタの取り扱い
====================================================

イベントループ中のグローバルインタープリタの取り扱い

`autoGIL'モジュールは、自動的にイベントループを実行する場合 、 Python
のグローバルインタープリタをロックしたり、ロックの解除をした
りするための関数 `installAutoGIL' を提供します。

`AutoGILError'
     例えば現在のスレッドがループしていないなど、オブザーバにコールバックが
     できない場合に発生します。

`installAutoGIL()'
     現在のスレッドのイベントループ(CFRunLoop)中のオブザーバにコールバッ
     クを行ない、適切な時にグローバルインタープリタロック(GIL)を、イ
     ベントループが使用されていない間、他の Python スレッドの起動がで
     きるようにロックしたり、ロックの解除をしたりします。

     有効性：OSX 10.1以降


File: python-mac-jp.info,  Node: MacPython OSA モジュール,  Next: MacOS ツールボックスモジュール,  Prev: MacPython モジュール,  Up: Top

MacPython OSA モジュール
************************

Python は オープンスクリプティングアーキテクチャ(Open Scripting
Architecure、OSA、一般的には AppleScript と呼ばれる)のかなり完全な実装
を行っていて、Python プログラムからスクリプト可能なアプリケーションを
操作したり、Python
へのインターフェースを備えたものにすることができます。

AppleScript と OSA の様々なコンポーネントの記述のために、また、アーキ
テクチャおよび用語についての理解を得るために、アップルの文書を読む必
要があります。"Applescript Language Guide"
は概念のモデルおよび用語、Standard Suiteについ
て説明した文書です。"Open Scripting Architecture" 文書は、ア
プリケーションプログラマの視点から OSA を使用する方法について説明
しています。これらの文書はAppleヘルプビューワのDeveloper Documentation
中のCore Technologiesセクションにあります。

アプリケーションをスクリプトで操作する例として、次の AppleScript  は、
一番前の `Finder' ウィンドウの名前を取得し、それを印字します。

     tell application "Finder"
         get name of window 1
     end tell

Pythonでは以下のコードで同じ事ができます。

     import Finder
     
     f = Finder.Finder()
     print f.get(f.window(1).name)

配布されている Python ライブラリは、Standard Suite を実装したパッケー
ジに加えて、いくつかの一般的なアプリケーションへのインターフェースを実
装したパッケージが含まれています。

アプリケーションに AppleEvent を送るためには、アプリケーションの用語
(`Script Editor'が「辞書」と呼ぶもの)に接続する Python パッケー
ジを最初に作成しなければなりません。これは、`PythonIDE' の内部
から、あるいは、コマンドラインからのスタンドアロンのプログラムとして
`gensuitemodule.py' モジュールを実行することにより行うことができ ます。

`gensuitemodule.py' モジュールで生成される出力は多くのモジュール
を備えたパッケージのため、全ての Suite をプログラムの中で 1 つにまとめ
て利用できるようにするために `__init__' モジュールが追加されて
います。Python 継承グラフは  AppleScript 継承グラフを理解するので、
Standard Suite をサポートしていて、余分な引数を備えた1つあるいは2つの
変数を拡張する事ができるようにプログラム辞書が書かれていた場合、出力さ
れた Suite は、`StdSuites.Standard_Suite' からすべてをインポー
トして再エクスポートし、さらに拡張機能をもったメソッドをオーバーライド
するモジュール `Standard_Suite' を含みます。 `gensuitemodule'
の出力は人間に判読可能で、Python docstrings中 にはオリジナルの
AppleScript 辞書にあった文書を含んでいます。したがっ
て、それを読むことは有用な情報源となります。

出力されたパッケージは、メソッドとして AppleScript 変数をすべて含み、
第1の引数としての直接オブジェクトを含み、キーワード引数としてのすべて
のオプションの引数を含む、パッケージと同じ名前を備えた主要なクラスを実
装しています。また AppleScript クラスは Python クラス、そして類事物そ
の他のもろもろの物として実装されています。

変数を実装する主要な Python クラスは、さらに AppleScriptクラス
"application" で宣言されたプロパティおよび要素へのアクセスを許可します。
現在のリリースでオブジェクト指向的にやろうとするならば、例えば、より
Python 的な `f.window(1).name.get()' の代りに `f.get(f.window(1).name)'
を利用する必要があります。

AppleScript 識別子が Python 識別子と同じでない場合、名前は少数の規則に
よって判別します。
   * スペースは下線に置換されます。

   * `_xx_' が16進法の文字値である場合、他の英数字でない文字は `xx'
     と置換されます。

   * あらゆるPython 予約語には下線を追加します。

Python は、さらに Python でスクリプト対応アプリケーションを作成する事
をサポートしています。次のモジュールはMacPythonのAppleScriptサポートに
適切です。

さらに、`Finder', `Terminal', `Explorer', `Netscape', `CodeWarrior',
`SystemEvents' そして `StdSuites'
のサポートモジュールは、あらかじめ生成されています。

* Menu:

* gensuitemodule::
* aetools::
* aepack::
* aetypes::
* MiniAEFrame::


File: python-mac-jp.info,  Node: gensuitemodule,  Next: aetools,  Prev: MacPython OSA モジュール,  Up: MacPython OSA モジュール

OSA スタプ作成パッケージ
========================

OSA辞書からスタブパッケージを作成します。

`gensuitemodule' モジュールは AppleScript 辞書によって特定のア
プリケーションに実装されている AppleScript 群のためのスタブコードを実
装した Python パッケージを作成します。

このモジュールは、通常は `PythonIDE' からユーザによって起動さ
れますが、コマンドラインからスクリプトとして実行する(オプションとして
ヘルプに `--help' を与えてみてください)こともできますし、Python
コードでインポートして利用する事もできます。使用例として、どのようにし
て標準ライブラリに含まれているスタブパッケージを生成するか、
`Mac/scripts/genallsuites.py' にあるソースを見てください。

このモジュールは次の関数を定義しています。

`is_scriptable(application)'
     `application' としてパス名を与えたアプリケーションがスクリプト可
     能でありそうな場合、真を返します。返り値はやや不確実な場合があります。
     `Internet Explorer' はスクリプト不可能なように見えてしまいます
     が、実際はスクリプト可能です。

`processfile(application[, output, basepkgname,  edit_modnames, creatorsignature, dump, verbose])'
     パス名として渡された `application' のためのスタブパッケージを作成
     します。`.app' として一つのパッケージにまとめてあるプログラム群の
     ために内部の実行プログラムそのものではなくパッケージへのパス名を渡すだ
     けでよくなっています。パッケージ化されていないCFM
     アプリケーションでは
     アプリケーションバイナリのファイル名を渡す事もできます。

     この関数は、アプリケーションの OSA
     用語リソースを捜し、これらのリソー
     スを読み取り、その結果データをクライアントスタブを実装したPython
     コー ドパッケージを作成するために使用します。

     `output' は作成結果のパッケージを保存するパス名で、指定しない場合
     は標準の「別名で保存(save file as)」ダイアログが表示されます。
     `basepkgname' はこのパッケージの基盤となるパッケージを指定します。
     デフォルトは `StdSuites' になります。`StdSuites' 自体を
     生成する場合だけ、このオプションを指定する必要があります。
     `edit_modnames' は自動生成によって作成されてあまり綺麗ではないモ
     ジュール名を変更するために使用することができる辞書です。
     `creator_signature' はパッケージ中の `PkgInfo' ファイル、あ るいは
     CFM ファイルクリエータ署名から通常得られる4文字クリエータコード
     を無視するために使用することができます。`dump' にはファイルオブジェ
     クトを与えます、これを指定するとリソースを読取った後に停止して
     `processfile' がコード化した用語リソースの Python 表現をダンプし
     ます。`verbose' にもまたファイルオブジェクトを与え、これを指定する
     と `processfile' の行なっている処理の詳細を出力します。

`processfile_fromresource(application[, output,  basepkgname, edit_modnames, creatorsignature, dump, verbose])'
     この関数は、用語リソースを得るのに異なる方法を使用する以外は、
     `processfile' と同じです。この関数では、リソースファイルとして
     `application' を開き、このファイルから  `"aete"' および `"aeut"'
     リソースをすべて読み込む事で、AppleScript 用語リソース読み
     込みを行ないます。


File: python-mac-jp.info,  Node: aetools,  Next: aepack,  Prev: gensuitemodule,  Up: MacPython OSA モジュール

OSA クライアントのサポート
==========================

Apple Eventを送るための基本的なサポート

`aetools' モジュールは Python で AppleScript クライアントとして
の機能をサポートするアプリケーションを構築するための基本的な機能を含ん
でいます。さらに、このモジュールは、 `aetypes' および `aepack'
モジュールの中核機能をインポートし再 エクスポートします。
`gensuitemodule' によって生成されたスタブパッケージは `aetools'
のかなり適切な部分をインポートするので、通常はそれを
明示的にインポートする必要はありません。生成されたパッケージ群を使用す
ることができない場合と、スクリプト対応のためにより低いレベルのアクセス
を必要としている場合、例外が発生します。

`aetools' モジュールはそれ自身、`Carbon.AE' モジュールに
よって提供される AppleEvent サポートを利用します。このモジュールにはウィ
ンドウマネージャへのアクセスを必要とするという1つの欠点があります。詳
細は第  *Note 設定:: 章を見てください。この制限は将来のリリー
スで撤廃されるかもしれません。

`aetools' モジュールは下記の関数を定義しています。

`packevent(ae, parameters, attributes)'
     あらかじめ作成された `Carbon.AE.AEDesc' オブジェクト中のパラメー
     ターおよび属性を保存します。`parameters' と `attributes' は Python
     オブジェクトの4文字の OSA パラメータのキーを写像した辞書です。
     このオブジェクトをパックするには `aepack.pack()' を使います。

`unpackevent(ae[, formodulename])'
     再帰的に、`Carbon.AE.AEDesc' イベントをPython オブジェクトへアン
     パックします。関数は引数の辞書および属性の辞書を返します。
     `formodulename' 引数は AppleScript クラスをどこに捜しに行くか制御
     するために、生成されたスタブパッケージにより使用されます。

`keysubst(arguments, keydict)'
     Python キーワード引数辞書 `arguments' を、写像による4文字の OSA
     キーとして `keydict' の中で指定されたPython 識別子であるキーの交
     換により `packevent' によって要求されるフォーマットへ変換します。
     生成されたパッケージ群によって使用されます。

`enumsubst(arguments, key, edict)'
     `arguments' 辞書が `key' へのエントリーを含んでいる場合、辞 書
     `edict' のエントリーに見合う値に変換します。これは人間に判読可
     能なように Python 列挙名を OSA
     4文字のコードに変換します。生成されたパッ
     ケージ群によって使用されます。

`aetools' モジュールは次のクラスを定義しています。

`TalkTo([signature=None, start=0, timeout=0])'
     アプリケーションとの対話に利用する代理の基底クラスです。
     `signature' はクラス属性 `_signature' (サブクラスによって通
     常設定される)を上書きした、対話するアプリケーションを定義する4文字クリ
     エートコードです。`start' にはクラスインスタンス上でアプリケーショ
     ンを実行することを可能にするために、真を設定する事ができます。
     `timeout' を明示的に設定する事で、 AppleEvent の返答を待つデフォ
     ルトのタイムアウト時間を変更する事ができます。

`_start()'
     アプリケーションが起動していてるか確認し、起動していなければ起動しよう
     とします。

`send(code, subcode[, parameters, attributes])'
     OSA指示子  `code, subcode' (いずれも通常4文字の文字列です)を持った
     変数のために、`parameters' をパックし、`attributes'に戻し、
     目標アプリケーションにそれを送って、返答を待ち、`unpackevent' を
     含んだ返答をアンパックし、AppleEvent
     の返答を返し、辞書としてアンパッ
     クした値と属性を返して、AppleEvent `Carbon.AE.AEDesc' を作成しま
     す。


File: python-mac-jp.info,  Node: aepack,  Next: aetypes,  Prev: aetools,  Up: MacPython OSA モジュール

Python変数とAppleEventデータコンテナ間の変換
============================================

Python変数とAppleEventデータコンテナ間の変換

`aepack' モジュールは、Python 変数から AppleEvent ディスクリプ
タへの変換(パック)と、その逆に変換(アンパック)する関数を定義しています。
Python 内では AppleEvent ディスクリプタは、組み込み型である AEDesc の
Python オブジェクトとして扱われます。`AEDesc' は `Carbon.AE'
モジュールで定義されています。

`aepack' モジュールは次の関数を定義しています。

`pack(x[, forcetype])'
     Python 値 x を変換した値を保持する `AEDesc' オブジェクトを返しま
     す。FORCETYPE が与えることで、結果のディスクリプタ型を指定できま
     す。それ以外では、Python 型から Apple
     Eventディスクリプタ型へのデフォ
     ルトのマッピングが使われます。マッピングは次の通りとなります。

     Python type                        descriptor type
     ------                             -----
     `FSSpec'                           typeFSS
     `FSRef'                            typeFSRef
     `Alias'                            typeAlias
     integer                            typeLong (32 bit integer)
     float                              typeFloat (64 bit floating point)
     string                             typeText
     unicode                            typeUnicodeText
     list                               typeAEList
     dictionary                         typeAERecord
     instance                           _see below_

     X がPythonインスタンスなら、この関数は `__aepack__()' メ
     ソッドを呼びだそうとします。このメソッドは `AEDesc' オブジェ
     クトを返します。

     X の変換が上で定義されていない場合は、この関数は、テキストディス
     クリプタとしてエンコードされた、値の(repr()関数による)Python文字列表現
     が返されます。

`unpack(x[, formodulename])'
     X は `AEDesc' タイプのオブジェクトでなければいけません。
     この関数は、Apple Eventディスクリプタ X のデータのPythonオブジェ
     クト表現を返します。単純なAppleEventデータ型(整数、テキスト、浮動少
     数点数)の、対応するPython型が返されます。Apple
     EventリストはPythonリ
     ストとして返され、リストの要素は再帰的にアンパックされます。
     `formodulename' の指定がない場合、オブジェクト参照 (例：`line 3 of
     document 1')が、`aetypes.ObjectSpecifier' のインスタ
     ンスとして返されます。ディスクリプタ型がtypeFSSであるAppleEventディ
     スクリプタが、`FSSpec' オブジェクトとして返されます。
     AppleEventレコードディスクリプタが、再帰的にアンパックされた、型の4
     文字キーと要素を持つPython辞書として返されます。

     オプションの `formodulename' 引数は `gensuitemodule' よ
     り作成されるスタブパッケージにより利用され、オブジェクト指定子のため
     の OSA
     クラスをモジュールの中で見つけられることを保証します。これは、
     例えば、ファインダがウィンドウに対してオブジェクト指定子を返す場合、
     `Finder.Window' のインスタンスが得られ、`aetypes.Window'
     が得られないことを保証します。前者は、ファインダ上のウィンドウが持っ
     ている、すべての特性および要素のことを知っています。一方、後者のもの
     はそれらのことを知りません。

See also:
     *Note CarbonAE:: Apple Eventマネージャルーチンへの組み込みアクセス
     *Note aetypes:: Apple
     Eventディスクリプタ型としてコードされたPython定義 ` Inside
     Macintosh: Interapplication
     Communication'{Macintosh上でのプロセス間通信に関する情報}


File: python-mac-jp.info,  Node: aetypes,  Next: MiniAEFrame,  Prev: aepack,  Up: MacPython OSA モジュール

AppleEvent オブジェクト
=======================

Apple Event オブジェクトモデルの Python 表現

`aetypes' は Apple Event データディスクリプタおよび Apple Event
オブジェクト指定子を表わすために使用されるクラスを定義します。

Apple Event データはディスクリプタに含まれていて、これらのディスクリプ
タは型です。多くのディスクリプタについては、そのPython 表現は単に対応
するPython の型になります。例えば、OSA 中の `typeText' は Python
文字列型で、`typeFloat' は 浮動小数点型、などのようになります。直 接
Python で相当する型がない OSA の型については、このモジュールがクラ
スを宣言します。これらのクラスのインスタンスのパック、アンパックは
`aepack' によって自動的に処理されます。

オブジェクト指定子は本質的に Apple Event サーバーの中で実行しているオ
ブジェクトのアドレスです。Apple Event 指定子は、Apple Event のための直
接オブジェクト、あるいはオプションパラメータの引数として使用されます。
`aetypes' モジュールは OSA クラス、およびプロパティのための基底
クラスを含んでいて、それらは、与えられたクラス群やプロパティ群のクラス
およびプロパティに含めるために、 `gensuitemodule' によって生成
されたパッケージによって使用されます。

下位互換性のためと、スクリプトにスタブパッケージを生成していないアプリ
ケーションを必要とする場合のために、このモジュールはさらに `Document'
、`Window'、`Character'、などのような多くの共 通 OSA
クラス用のオブジェクト指定子を含んでいます。

`AEObjects' モジュールは Apple Event ディスクリプタデータを表わ
すために次のクラスを定義しています。

`Unknown(type, data)'
     これ以外のクラスによって表わされず、単純な Python
     の値と等価でないよう な、`aepack' および `aetypes'
     モジュールでサポートしてい ない OSA ディスクリプタデータの表現。

`Enum(enum)'
     与えられた4文字のストリング値を持った列挙値。

`InsertionLoc(of, pos)'
     オブジェクト `of' の中の `pos' の位置。

`Boolean(bool)'
     真偽値。

`StyledText(style, text)'
     スタイル情報(フォント、フェイスなど)を持っているテキスト。

`AEText(script, style, text)'
     スクリプトシステムおよびスタイル情報を持っているテキスト。

`IntlText(script, language, text)'
     スクリプトシステムおよび言語情報を持っているテキスト。

`IntlWritingCode(script, language)'
     スクリプトシステムと言語情報。

`QDPoint(v, h)'
     QuickDrawの点。

`QDRectangle(v0, h0, v1, h1)'
     QuickDrawの矩形。

`RGBColor(r, g, b)'
     色。

`Type(type)'
     4文字の名前を持つ OSA 型の値。

`Keyword(name)'
     4文字の名前をを持つ OSA のキーワード。

`Range(start, stop)'
     範囲。

`Ordinal(abso)'
     `"firs"' で最初とか、`"midd"' で中央、のような数値表現でな
     い絶対位置。

`Logical(logc, term)'
     `term' にオペレーター  `logc' を適用する論理表現。

`Comparison(obj1, relo, obj2)'
     `obj1' と `obj2' の `relo' による比較。

Python の中で AppleScript クラスおよプロバティを表わすために、次のクラ
スは生成するスタブパッケージの基底クラスとして使用されます。

`ComponentItem(which[, fr])'
     OSA
     クラス用の抽象基底クラスです。サブクラスには4文字のOSAクラスコード
     のクラス属性 `want' を設定する必要があります。このクラスのサブク
     ラスのインスタンスは AppleScript
     オブジェクト指定子と等価になります。 インスタンス化する時、`which'
     の値としてセレクターを渡す事は必須 で、`fr'
     中の親オブジェクトを渡すかは任意です。

`NProperty(fr)'
     OSA プロパティ用の抽象基底クラスです。サブクラスはクラス属性として
     `want' と `which' を設定する必要がありあます。このクラスのサ
     ブクラスのインスタンスはオブジェクト指定子と等価です。

`ObjectSpecifier(want, form, seld[, fr])'
     `ComponentItem' と `NProperty' の基底クラスで、一般的な OSA
     オブジェクト指定子です。引数の内容はApple
     オープンスクリプティングアー
     キテクチャの文書を御覧ください。このクラスは抽象クラスではない事に注
     意してください。


File: python-mac-jp.info,  Node: MiniAEFrame,  Prev: aetypes,  Up: MacPython OSA モジュール

オープンスクリプティングアーキテクチャサーバのサポート
======================================================

オープンスクリプティングアーキテクチャ(OSA)サーバ("Apple
Events")のサポート。

`MiniAEFrame'モジュールは、アプリケーションにオープンスクリプ
ティングアーキテクチャ (OSA)サーバ機
能を持たせるためのフレームワークを提供します。つまり、 AppleEvents
の受信と処理を行わせます。 `FrameWork' と連携させても良いし、単独
でも使えます。
実例として、このモジュールは`PythonCGISlave'の中で使われていま す。

`MiniAEFrame'には以下のクラスが定義されています。

`AEServer()'
     AppleEventの分岐を処理するクラス。作成するアプリケーションはこのクラス
     と、`MiniApplication'あるいは`FrameWork.Application'のサブク
     ラスでなければなりません。サブクラス化したクラスでは`__init__()'
     メソッドで、継承した両方のクラスの`__init__()'メソッドを呼びださ
     なければなりません。

`MiniApplication()'
     `FrameWork.Application'とある程度互換なクラスですが、機能は少ない
     です。このクラスのイベントループはアップルメニュー、Cmd-.(コマンドキーを押しながらピリオド.を押す)、
     AppleEventをサポートします。他のイベントはPythonインタープリタかSioux（CodeWarriorの
     コンソールシステム）に渡されます。作成するアプリケーションで
     `AEServer'を使いたいが、独自のウィンドウなどを持たない場合に便利で
     す。

* Menu:

* AEServer オブジェクト::


File: python-mac-jp.info,  Node: AEServer オブジェクト,  Prev: MiniAEFrame,  Up: MiniAEFrame

AEServer オブジェクト
---------------------

`installaehandler(classe, type, callback)'
     AppleEventハンドラをインストールします。CLASSEとTYPEは4文字
     のOSAクラスとタイプの指定子で、ワイルドカード`'****''も使えます。対
     応するAppleEventを受けるとパラメータがデコードされ、与えたコールバックが
     呼び出されます。

`callback(_object, **kwargs)'
     与えたコールバックは、OSAダイレクトオブジェクトを1番目のパラメータとして
     呼び出されます。他のパラメータは4文字の指定子を名前にしたキーワード引数
     として渡されます。他に3つのキーワード・パラメータが渡されます。つまり、
     `_class'と`_type'はクラスとタイプ指定子で、`_attributes'
     はAppleEvent属性を持つ辞書です。

     与えたメソッドの返り値は`aetools.packevent()'でパックされ、リプ
     ライとして送られます。

現在のクラス設計にはいくつか重大な問題があることに注意してください。引数
に名前ではない4文字の指定子を持つAppleEventはまだ実装されていないし、イ
ベントの送信側にエラーを返すこともできません。この問題は将来のリリースま
で先送りにされています。


File: python-mac-jp.info,  Node: MacOS ツールボックスモジュール,  Next: 文書化されていないモジュール,  Prev: MacPython OSA モジュール,  Up: Top

MacOS ツールボックスモジュール
******************************

各種のMacOSツールボックスへのインターフェースを与えるモジュール群があ
ります。対応するモジュールがあるなら、そのモジュールではツールボックス
で宣言された各種の構造体のPythonオブジェクトが定義され、操作は定義され
たオブジェクトのメソッドとして実装されています。その他の操作はモジュー
ルの関数として実装されています。 Cで可能な操作がすべてPythonで可能なわ
けではありませんし(コールバックはよく問題になります)、パラメータが
Pythonだと違ってしまうことはよくあります(特に入力バッファや出力バッファ)。
全てのメソッドと関数は `__doc__' 文字列があるので、引数と返り値
の説明を得る事ができます。他の情報源としては、 などを参照してください。

これらのモジュールは全て `Carbon' パッケージに含まれています。
この名前にもかかわらずそれら全てが Carbon フレームワークの一部なわけで
はありません。CF は、CoreFoundationフレームワークの中に実際はあります
し、QtはQuickTimeフレームワークにあります。ツールボックスモジュールは普通以下
のようにして利用します。

     from Carbon import AE

*注意！*これらのモジュールはまだ文書化されていません。これらの
モジュールのどれでもよいですが文書化に協力したいという方は、
<docs@python.org> まで連絡をください。

* Menu:

* CarbonAE::
* CarbonAH::
* CarbonApp::
* CarbonCF::
* CarbonCG::
* CarbonCarbonEvt::
* CarbonCm::
* CarbonCtl::
* CarbonDlg::
* CarbonEvt::
* CarbonFm::
* CarbonFolder::
* CarbonHelp::
* CarbonList::
* CarbonMenu::
* CarbonMlte::
* CarbonQd::
* CarbonQdoffs::
* CarbonQt::
* CarbonRes::
* CarbonScrap::
* CarbonSnd::
* CarbonTE::
* CarbonWin::
* ColorPicker::


File: python-mac-jp.info,  Node: CarbonAE,  Next: CarbonAH,  Prev: MacOS ツールボックスモジュール,  Up: MacOS ツールボックスモジュール

Apple Events
============

Apple Eventツールボックスへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonAH,  Next: CarbonApp,  Prev: CarbonAE,  Up: MacOS ツールボックスモジュール

Apple ヘルプ
============

Apple ヘルプマネージャへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonApp,  Next: CarbonCF,  Prev: CarbonAH,  Up: MacOS ツールボックスモジュール

アピアランスマネージャ
======================

アピアランスマネージャへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCF,  Next: CarbonCG,  Prev: CarbonApp,  Up: MacOS ツールボックスモジュール

Core Foundation
===============

Core Foundationへのインタフェース

`CFBase', `CFArray', `CFData', `CFDictionary', `CFString' と `CFURL'
オブジェクトがいくらか部分的にサポート されています。


File: python-mac-jp.info,  Node: CarbonCG,  Next: CarbonCarbonEvt,  Prev: CarbonCF,  Up: MacOS ツールボックスモジュール

Core Graphics
=============

Component Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCarbonEvt,  Next: CarbonCm,  Prev: CarbonCG,  Up: MacOS ツールボックスモジュール

Carbon Event Manager
====================

Carbon Event Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCm,  Next: CarbonCtl,  Prev: CarbonCarbonEvt,  Up: MacOS ツールボックスモジュール

Component Manager
=================

Component Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonCtl,  Next: CarbonDlg,  Prev: CarbonCm,  Up: MacOS ツールボックスモジュール

Control Manager
===============

Control Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonDlg,  Next: CarbonEvt,  Prev: CarbonCtl,  Up: MacOS ツールボックスモジュール

Dialog Manager
==============

Dialog Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonEvt,  Next: CarbonFm,  Prev: CarbonDlg,  Up: MacOS ツールボックスモジュール

Event Manager
=============

Event Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonFm,  Next: CarbonFolder,  Prev: CarbonEvt,  Up: MacOS ツールボックスモジュール

Font Manager
============

Font Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonFolder,  Next: CarbonHelp,  Prev: CarbonFm,  Up: MacOS ツールボックスモジュール

Folder Manager
==============

Folder Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonHelp,  Next: CarbonList,  Prev: CarbonFolder,  Up: MacOS ツールボックスモジュール

Help Manager
============

Carbon Help Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonList,  Next: CarbonMenu,  Prev: CarbonHelp,  Up: MacOS ツールボックスモジュール

List Manager
============

List Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonMenu,  Next: CarbonMlte,  Prev: CarbonList,  Up: MacOS ツールボックスモジュール

Menu Manager
============

Menu Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonMlte,  Next: CarbonQd,  Prev: CarbonMenu,  Up: MacOS ツールボックスモジュール

MultiLingual Text Editor
========================

MultiLingual Text Editorへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonQd,  Next: CarbonQdoffs,  Prev: CarbonMlte,  Up: MacOS ツールボックスモジュール

QuickDraw
=========

QuickDrawツールボックスへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonQdoffs,  Next: CarbonQt,  Prev: CarbonQd,  Up: MacOS ツールボックスモジュール

QuickDraw Offscreen
===================

QuickDrawオフスクリーン APIへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonQt,  Next: CarbonRes,  Prev: CarbonQdoffs,  Up: MacOS ツールボックスモジュール

QuickTime
=========

QuickTime ツールボックスへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonRes,  Next: CarbonScrap,  Prev: CarbonQt,  Up: MacOS ツールボックスモジュール

Resource Manager and Handles
============================

Resource Managerとハンドルへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonScrap,  Next: CarbonSnd,  Prev: CarbonRes,  Up: MacOS ツールボックスモジュール

Scrap Manager
=============

Carbon Scrap Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonSnd,  Next: CarbonTE,  Prev: CarbonScrap,  Up: MacOS ツールボックスモジュール

Sound Manager
=============

Sound Managerへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonTE,  Next: CarbonWin,  Prev: CarbonSnd,  Up: MacOS ツールボックスモジュール

TextEdit
========

TextEditへのインタフェース ~


File: python-mac-jp.info,  Node: CarbonWin,  Next: ColorPicker,  Prev: CarbonTE,  Up: MacOS ツールボックスモジュール

Window Manager
==============

Window Managerへのインタフェース ~


File: python-mac-jp.info,  Node: ColorPicker,  Prev: CarbonWin,  Up: MacOS ツールボックスモジュール

色選択ダイアログ
================

標準色選択ダイアログへのインターフェース

`ColorPicker' モジュールは標準色選択ダイアログへのアクセスを提
供します。

`GetColor(prompt, rgb)'
     標準色選択ダイアログを表示し、ユーザが色を選択することを可能にします。
     PROMPT の文字列によりユーザに指示を与えられ、デフォルトの選択 色を
     RGB で設定する事ができます。RGB は赤、緑、青の色要
     素のタプルで与えてください。`GetColor()' はユーザが選択した
     色のタプルと色が選択されたか、取り消されたかを示すフラグを返します。

