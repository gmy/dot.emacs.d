This is python-api-jp.info, produced by makeinfo version 4.5 from
python-api-jp.texi.

12 October 2005


File: python-api-jp.info,  Node: Top,  Next: 序,  Prev: (dir),  Up: (dir)

Python/C API リファレンスマニュアル
***********************************

* Menu:

* 序::
* はじめに::
* 超高レベルレイヤ::
* 参照カウント 2::
* 例外処理::
* ユーティリティ関数::
* 抽象オブジェクトレイヤ abstract objects layer::
* 具象オブジェクト concrete object レイヤ::
* 初期化 initialization、終了処理 finalization、スレッド::
* メモリ管理::
* オブジェクト実装サポート object implementation support::
* バグ報告::
* 歴史とライセンス::
* 日本語訳について::
* Module Index::
* Class-Exception-Object Index::
* Function-Method-Variable Index::
* Miscellaneous Index::


File: python-api-jp.info,  Node: 序,  Next: はじめに,  Prev: Top,  Up: Top

序
**

Copyright (C) 2001, 2002, 2003 Python Software Foundation.  All rights
reserved.

Copyright (C) 2000 BeOpen.com.  All rights reserved.

Copyright (C) 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

Copyright (C) 1991-1995 Stichting Mathematisch Centrum.  All rights
reserved.

Translation Copyright (C) 2003 Python Document Japanese Translation
Project. All rights reserved.

ライセンスおよび許諾に関する完全な情報は、このドキュメントの末尾を
参照してください。

     このマニュアルでは、拡張モジュールを書いたり Python インタプリタを
     アプリケーションに埋め込んだりしたい C および C++ プログラマ
     が利用できる API について述べています。
     は拡張モジュールを書く際の一般的な決まりごとについて
     記述していますが、API の詳細までは記述していないので、
     このドキュメントが手引きになります。

     _このドキュメントの現在のバージョンはまだ不完全です。
     とはいえ、役に立つだろうと思います。引き続きドキュメントの整備を
     継続して、 Python ソースコードのリリースとは別に、その時々で
     新たなバージョンをリリースするつもりです。_



File: python-api-jp.info,  Node: はじめに,  Next: 超高レベルレイヤ,  Prev: 序,  Up: Top

はじめに
********

Python のアプリケーションプログラマ用インタフェース (Application
Programmer's Interface, API) は、 Python
インタプリタに対する様々なレベルでのアクセス手段を C や C++
のプログラマに提供しています。この API は通常 C++
からも全く同じように利用できるのですが、簡潔な呼び名に するために
Python/C API と名づけられています。 根本的に異なる二つの目的から、
Python/C API が用いられます。 第一は、特定用途の _拡張モジュール
(extention module)_、 すなわち Python インタプリタを拡張する C
で書かれたモジュール
を記述する、という目的です。第二は、より大規模なアプリケーション 内で
Python を構成要素 (component) として利用するという目的です;
このテクニックは、一般的にはアプリケーションへの Python の 埋め込み
("embedding") と呼びます。
拡張モジュールの作成は比較的わかりやすいプロセスで、 "手引書
(cookbook)" 的なアプローチでうまく実現できます。
作業をある程度まで自動化してくれるツールもいくつかあります。
一方、他のアプリケーションへの Python の埋め込みは、Python
ができてから早い
時期から行われてきましたが、拡張モジュールの作成に比べるとやや難解です。

多くの API 関数は、Python の埋め込みであるか拡張であるかに関わらず
役立ちます; とはいえ、 Python を埋め込んでいるほとんどのアプリケーション
は、同時に自作の拡張モジュールも提供する必要が生じることになる
でしょうから、Python を実際にアプリケーションに埋め込んでみる前に
拡張モジュールの書き方に詳しくなっておくのはよい考えだと思います。

* Menu:

* インクルードファイル::
* オブジェクト、型および参照カウント::
* 例外::
* Python の埋め込み::


File: python-api-jp.info,  Node: インクルードファイル,  Next: オブジェクト、型および参照カウント,  Prev: はじめに,  Up: はじめに

インクルードファイル
====================

Python/C API を使うために必要な、関数、型およびマクロの全ての定義
をインクルードするには、以下の行:

     #include "Python.h"

をソースコードに記述します。 この行を記述すると、標準ヘッダ:
`<stdio.h>', `<string.h>', `<errno.h>', `<limits.h>', and `<stdlib.h>'
を (あれば) インクルードします。 _Notice:_ [warning]
システムによっては、Python の定義しているプリプロセッサ定義が
標準ヘッダに影響をおよぼす可能性があるので、`Python.h'
は他の標準ヘッダファイルよりも前にインクルードしてください。

Python.h で定義されている、ユーザから見える名前全て (Python.h
がインクルードしている標準ヘッダの名前は除きます) には、接頭文字列 `Py'
または `_Py' が付きます。 `_Py' で始まる名前は Python
実装で内部使用するための名前で、拡張モジュールの作者は
使ってはなりません。構造体のメンバには予約済みの接頭文字列はありません。

*重要:* API のユーザは、`Py' や `_Py' で始まる名前を
定義するようなコードを絶対に書いてはなりません。
後からコードを読む人を混乱させたり、将来の Python のバージョンで同じ
名前が定義されて、ユーザの書いたコードの可搬性を危うくする可能性が
あります。

ヘッダファイル群は通常 Python と共にインストールされます。 UNIXでは
``prefix'/include/pythonVERSION/' および
``exec_prefix'/include/pythonVERSION/' に 置かれます。`prefix' と
`exec_prefix' は Python を ビルドする際の `configure'
スクリプトに与えたパラメタに 対応し、VERSION は `sys.version[:3]'
に対応します。 Windows では、ヘッダは ``prefix'/include' に置かれます。
`prefix' はインストーラに指定したインストールディレクトリです。

ヘッダをインクルードするには、 各ヘッダの入ったディレクトリ (別々の
ディレクトリの場合は両方) を、コンパイラがインクルードファイルを
検索するためのパスに入れます。 親ディレクトリをサーチパスに入れて、
`#include <python2.3/Python.h>' のようにしては _なりません_; `prefix'
内のプラットフォームに依存しない ヘッダは、`exec_prefix'
からプラットフォーム依存のヘッダを
インクルードしているので、このような操作を行うと複数のプラットフォーム
でのビルドができなくなります。

API はすべて C 言語を使って定義していますが、ヘッダファイルは
エントリポイントを `extern "C"' で適切に宣言しているので、 C++
ユーザは、なんの問題もなく C++から API を利用できる
ことに気づくはずです。


File: python-api-jp.info,  Node: オブジェクト、型および参照カウント,  Next: 例外,  Prev: インクルードファイル,  Up: はじめに

オブジェクト、型および参照カウント
==================================

Python/C API 関数は、 `PyObject*' 型の一つ以上の引数と
戻り値を持ちます。この型は、任意の Python オブジェクトを表現する 不透明
(opaque) なデータ型へのポインタです。 Python 言語は、全ての Python
オブジェクト型をほとんどの状況 (例えば代入、スコープ規則 (scope
rule)、引数渡し) で同様に 扱います。ほとんど全ての Python
オブジェクトはヒープ (heap) 上に 置かれます: このため、`PyObject'
型のオブジェクトは、 自動記憶 (automatic) としても静的記憶 (static)
としても 宣言できません。`PyObject*' 型のポインタ変数のみ
宣言できます。唯一の例外は、型オブジェクト  です;
型オブジェクトはメモリ解放 (deallocate) してはならないので、
通常は静的記憶の `PyTypeObject' オブジェクトにします。

全ての Python オブジェクトには (Python 整数型ですら) 型 ("type")
と参照カウント ("reference count") があります。
あるオブジェクトの型は、そのオブジェクトがどの種類のオブジェクト か
(例えば整数、リスト、ユーザ定義関数、など; その他多数については、
で説明して います)
を決定します。よく知られている型については、各々マクロが
存在して、あるオブジェクトがその型かどうか調べられます; 例えば、
`PyList_Check(A)' は、A で示されたオブジェクトが Python リスト型のとき
(かつそのときに限り) 真値を返します。

* Menu:

* 参照カウント::
* 型::


File: python-api-jp.info,  Node: 参照カウント,  Next: 型,  Prev: オブジェクト、型および参照カウント,  Up: オブジェクト、型および参照カウント

参照カウント
------------

今日の計算機は有限の (しばしば非常に限られた) メモリサイズしか
持たないので、参照カウントは重要な概念です; 参照カウントは、
あるオブジェクトに対して参照を行っている場所が何箇所あるか
を数える値です。参照を行っている場所とは、別のオブジェクトで
あったり、グローバルな (あるいは静的な) C 変数であったり、 何らかの C
関数内にあるローカルな変数だったりします。
あるオブジェクトの参照カウントがゼロになると、そのオブジェクトは
解放されます。そのオブジェクトに他のオブジェクトへの
参照が入っていれば、他のオブジェクトの参照カウントはデクリメント
されます。デクリメントの結果、他のオブジェクトの参照カウント
がゼロになると、今度はそのオブジェクトが解放される、といった具合に
以後続きます。(言うまでもなく、互いを参照しあうオブジェクトに
ついて問題があります; 現状では、解決策は "何もしない" です。)

参照カウントは、常に明示的なやり方で操作されます。
通常の方法では、`Py_INCREF()'

でオブジェクトの参照を 1 インクリメントし、 `Py_DECREF()'  で 1
デクリメント します。`Py_DECREF()' マクロは、incref よりもかなり
複雑です。というのは、`Py_DECREF()' マクロは参照カウント
がゼロになったかどうかを調べて、なった場合にはオブジェクトの
デアロケータ (deallocator) を呼び出さなければならないからです。
デアロケータとは、オブジェクトの型を定義している構造体内にある
関数へのポインタです。 型固有のデアロケータは、その型が複合オブジェクト
(compound object)
型である場合には、オブジェクト内の他のオブジェクトに対する参照
カウントをデクリメントするよう気を配るとともに、その他の必要な
ファイナライズ (finalize) 処理を実行します。
参照カウントがオーバフローすることはありません; というのも、
仮想メモリ空間には、(`sizeof(long) >= sizeof(char*)' と 仮定した場合)
少なくとも参照カウントの記憶に使われるビット数と
同じだけのメモリ上の位置があるからです。従って、参照カウントの
インクリメントは単純な操作になります。

オブジェクトへのポインタが入っているローカルな変数全てについて、
オブジェクトの参照カウントを必ずインクリメントしなければならない
わけではありません。理論上は、オブジェクトの参照カウントは、
オブジェクトを指し示す変数が生成されたときに 1 増やされ、
その変数がスコープから出て行った際に 1 減らされます。しかしこの
場合、二つの操作は互いに相殺するので、結果的に参照カウントは
変化しません。参照カウントを使う真の意義とは、手持ちの何らかの
変数がオブジェクトを指している間はオブジェクトがデアロケート
されないようにすることにあります。オブジェクトに対して、
一つでも別の参照が行われていて、その参照が手持ちの変数
と同じ間維持されるのなら、参照カウントを一時的に増やす必要は
ありません。参照カウント操作の必要性が浮き彫りになる重要な局面
とは、Python から呼び出された拡張モジュール内の C 関数に
オブジェクトを引数として渡すときです; 呼び出しメカニズムは、
呼び出しの間全ての引数に対する参照を保証します。

しかしながら、よく陥る過ちとして、あるオブジェクトをリストから
得たときに、参照カウントをインクリメントせずにしばらく放っておく
というのがあります。他の操作がオブジェクトをリストから除去してしまい、
参照カウントがデクリメントされてデアロケートされてしまうことが
考えられます。
本当に危険なのは、まったく無害そうにみえる操作が、上記の動作を
引き起こす何らかの Python コードを呼び出しかねないということです;
`Py_DECREF()' からユーザへ制御を戻せるような
コードパスが存在するため、ほとんど全ての操作が潜在的に危険を
はらむことになります。

安全に参照カウントを操作するアプローチは、汎用の操作 (関数名が
`PyObject_', `PyNumber_', `PySequence_', および `PyMapping_'
で始まる関数) の利用です。これらの操作は
常に戻り値となるオブジェクトの参照カウントをインクリメントします。
ユーザには戻り値が不要になったら `Py_DECREF()' を呼ぶ
責任が残されています; とはいえ、すぐにその習慣は身に付くでしょう。

* Menu:

* 参照カウントの詳細::


File: python-api-jp.info,  Node: 参照カウントの詳細,  Prev: 参照カウント,  Up: 参照カウント

参照カウントの詳細
..................

Python/C API の各関数における参照カウントの振る舞いは、
説明するには、_参照の所有権 (ownership of references)_
という言葉でうまく説明できます。所有権は参照に対するもので、
オブジェクトに対するものではありません (オブジェクトは
誰にも所有されず、常に共有されています)。 ある参照の "所有"
は、その参照が必要なくなった時点で `Py_DECREF()'
を呼び出す役割を担うことを意味します。
所有権は委譲でき、あるコードが委譲によって所有権を得ると、
今度はそのコードが参照が必要なくなった際に最終的に `Py_DECREF()' や
`Py_XDECREF()' を呼び出して decref する役割を担います --
あるいは、その役割を (通常はコードを 呼び出した元に) 受け渡します。
ある関数が、関数の呼び出し側に対して参照の所有権を渡すと、 呼び出し側は
_新たな_ 参照 (new reference) を得る、と言います。
所有権が渡されない場合、呼び出し側は参照を_借りる_ (borrow)
といいます。借りた参照に対しては、何もする必要はありません。

逆に、ある関数呼び出しで、あるオブジェクトへの参照を呼び出される
関数に渡す際には、二つの可能性: 関数がオブジェクトへの参照を _盗み取る_
(steal) 場合と、そうでない場合があります。
参照を盗み取る関数はほとんどありません; 例外としてよく知られているのは、
`PyList_SetItem()'  と `PyTuple_SetItem()'  で、
これらは配列に入れる要素に対する参照を盗み取ります (しかし、要素の
入る先のタプルやリストの参照は盗み取りません!)。これらの関数は、
リストやタプルの中に新たに作成されたオブジェクトを入れていく際の
常套的な書き方をしやすくするために、参照を盗み取るように設計されて
います; 例えば、`(1, 2, "three")' というタプルを生成するコードは
以下のようになります (とりあえず例外処理のことは忘れておきます;
もっとよい書き方を後で示します):

     PyObject *t;
     
     t = PyTuple_New(3);
     PyTuple_SetItem(t, 0, PyInt_FromLong(1L));
     PyTuple_SetItem(t, 1, PyInt_FromLong(2L));
     PyTuple_SetItem(t, 2, PyString_FromString("three"));

ちなみに、`PyTuple_SetItem()' はタプルに値をセットする ための _唯一の_
方法です; タプルは変更不能なデータ型なので、 `PySequence_SetItem()' や
`PyObject_SetItem()'
を使うと上の操作は拒否されてしまいます。自分でタプルの値を入れていく
つもりなら、`PyTuple_SetItem()' だけしか使えません。

同じく、リストに値を入れていくコードは `PyList_New()' と
`PyList_SetItem()' で書けます。このコードは 以下のように
`PySequence_SetItem()' を使っても書けます; これを見れば、二つの違い
(`Py_DECREF()' を別に呼び出して いる) が分かります:
     PyObject *l, *x;
     
     l = PyList_New(3);
     x = PyInt_FromLong(1L);
     PySequence_SetItem(l, 0, x); Py_DECREF(x);
     x = PyInt_FromLong(2L);
     PySequence_SetItem(l, 1, x); Py_DECREF(x);
     x = PyString_FromString("three");
     PySequence_SetItem(l, 2, x); Py_DECREF(x);

"推奨されている" アプローチのほうが、コード量が多いので奇妙に
思うかもしれませんね。しかし実際には、タプルやリストを生成して
値を入れる際には、上記のような方法はほとんど使いません。
より汎用性のある関数、`Py_BuildValue()' があり、
ほとんどの主要なオブジェクトをフォーマット文字列 "format string"
の指定に基づいて C の値から生成できます。例えば、
上の二種類のコードブロックは、以下のように置き換えられます
(エラーチェックにも配慮しています):

     PyObject *t, *l;
     
     t = Py_BuildValue("(iis)", 1, 2, "three");
     l = Py_BuildValue("[iis]", 1, 2, "three");

自作の関数に渡す引数のように、単に参照を借りるだけの要素に
対しては、`PyObject_SetItem()' とその仲間を 使うのがはるかに一般的です。
その場合、参照カウントをインクリメントする必要がなく、 参照を引き渡せる
("参照を盗み取らせられる") ので、
参照カウントに関する動作はより健全になります。
例えば、以下の関数は与えられた要素をリスト中の全ての要素の値に
セットします:

     int
     set_all(PyObject *target, PyObject *item)
     {
         int i, n;
     
         n = PyObject_Length(target);
         if (n < 0)
             return -1;
         for (i = 0; i < n; i++) {
             if (PyObject_SetItem(target, i, item) < 0)
                 return -1;
         }
         return 0;
     }

関数の戻り値の場合には、状況は少し異なります。
ほとんどの関数については、参照を渡してもその参照に対する
所有権が変わることがない一方で、あるオブジェクトに対する参照を
返すような多くの関数は、参照に対する所有権を呼び出し側に与えます。
理由は簡単です: 多くの場合、関数が返すオブジェクトはその場で (on the
fly) 生成されるため、呼び出し側が得る参照は生成された
オブジェクトに対する唯一の参照になるからです。
従って、`PyObject_GetItem()' や `PySequence_GetItem()'
のように、オブジェクトに対する
参照を返す汎用の関数は、常に新たな参照を返します (呼び出し側
が参照の所有者になります)。

重要なのは、関数が返す参照の所有権を持てるかどうかは、どの関数を
呼び出すかだけによる、と理解することです -- 関数呼び出し時の _お飾り_
(関数に引数として渡したオブジェクトの型) は
_この問題には関係ありません!_ 従って、`PyList_GetItem()'
を使ってリスト内の要素を 得た場合には、参照の所有者にはなりません --
が、同じ要素を 同じリストから `PySequence_GetItem()' (図らずもこの関数は
全く同じ引数をとります) を使って取り出すと、返されたオブジェクト
に対する参照を得ます。

以下は、整数からなるリストに対して各要素の合計を計算する関数を
どのようにして書けるかを示した例です; 一つは `PyList_GetItem()'
を使っていて、 もう一つは `PySequence_GetItem()' を使っています。

     long
     sum_list(PyObject *list)
     {
         int i, n;
         long total = 0;
         PyObject *item;
     
         n = PyList_Size(list);
         if (n < 0)
             return -1; /* リストではない */
         for (i = 0; i < n; i++) {
             item = PyList_GetItem(list, i); /* 失敗しないはず */
             if (!PyInt_Check(item)) continue; /* 整数でなければ読み飛ばす */
             total += PyInt_AsLong(item);
         }
         return total;
     }

     long
     sum_sequence(PyObject *sequence)
     {
         int i, n;
         long total = 0;
         PyObject *item;
         n = PySequence_Length(sequence);
         if (n < 0)
             return -1; /* 長さの概念がない */
         for (i = 0; i < n; i++) {
             item = PySequence_GetItem(sequence, i);
             if (item == NULL)
                 return -1; /* 配列でないか、その他の失敗 */
             if (PyInt_Check(item))
                 total += PyInt_AsLong(item);
             Py_DECREF(item); /* GetItem で得た所有権を放棄する */
         }
         return total;
     }


File: python-api-jp.info,  Node: 型,  Prev: 参照カウント,  Up: オブジェクト、型および参照カウント

型
--

Python/C API において重要な役割を持つデータ型は、`PyObject'
型の他にもいくつかあります; ほとんどは `int', `long', `double', および
`char*' といった、単なる C のデータ型です。
また、モジュールで公開している関数を列挙する際に用いられる静的な
テーブルや、新しいオブジェクト型におけるデータ属性を記述したり、
複素数の値を記述したりするために構造体をいくつか使っています。
これらの型については、その型を使う関数とともに説明してゆきます。


File: python-api-jp.info,  Node: 例外,  Next: Python の埋め込み,  Prev: オブジェクト、型および参照カウント,  Up: はじめに

例外
====

Python プログラマは、特定のエラー処理が必要なときだけしか例外を扱う
必要はありません; 処理しなかった例外は、処理の呼び出し側、そのまた
呼び出し側、といった具合に、トップレベルのインタプリタ層まで自動的に
伝播します。インタプリタ層は、スタックトレースバックと合わせて
例外をユーザに報告します。

ところが、 C プログラマの場合、エラーチェックは常に明示的に行わねば
なりません。Python/C API の全ての関数は、関数のドキュメントで明確に
説明がない限り例外を発行する可能性があります。
一般的な話として、ある関数が何らかのエラーに遭遇すると、関数は
例外を送出して、関数内における参照の所有権を全て放棄し、 エラー指標
(error indicator) -- 通常は `NULL' または `-1'
を返します。いくつかの関数ではブール型で真/偽を返し、偽はエラーを
示します。きわめて少数の関数では明確なエラー指標を返さなかったり、
あいまいな戻り値を返したりするので、 `PyErr_Occurred()'  で
明示的にエラーテストを行う必要があります。

例外時の状態情報 (exception state)は、スレッド単位に用意された 記憶領域
(per-thread storage) 内で管理されます (この記憶領域は、
スレッドを使わないアプリケーションではグローバルな記憶領域と 同じです)。
一つのスレッドは二つの状態のどちらか: 例外が発生したか、まだ発生
していないか、をとります。 関数 `PyErr_Occurred()'
を使うと、この状態を調べられます:
この関数は例外が発生した際にはその例外型オブジェクトに対する 借用参照
(borrowed reference) を返し、そうでないときには `NULL'
を返します。例外状態を設定する関数は数多くあります: `PyErr_SetString()'
はもっとも よく知られている (が、もっとも汎用性のない)
例外を設定するための 関数で、`PyErr_Clear()'  は
例外状態情報を消し去る関数です。

完全な例外状態情報は、3 つのオブジェクト: 例外の型、例外の値、
そしてトレースバック、からなります  (どのオブジェクトも
`NULL'を取り得ます)。これらの情報は、 Python オブジェクトの
`sys.exc_type', `sys.exc_value', および `sys.exc_traceback'
と同じ意味を持ちます; とはいえ、 C と Python
の例外状態情報は全く同じではありません: Python における
例外オブジェクトは、Python の `try' ...  `except'
文で最近処理したオブジェクトを表す一方、 C
レベルの例外状態情報が存続するのは、 渡された例外情報を
`sys.exc_type'その他に転送するよう取り計らう Python
のバイトコードインタプリタのメインループに到達するまで、
例外が関数の間で受け渡しされている間だけです。

Python 1.5 からは、Python で書かれたコードから例外状態情報にアクセス
する方法として、推奨されていてスレッドセーフな方法は `sys.exc_info()'
になっているので注意してください。 この関数は Python
コードの実行されているスレッドにおける 例外状態情報を返します。
また、これらの例外状態情報に対するアクセス手段は、両方とも 意味づけ
(semantics) が変更され、ある関数が例外を捕捉すると、
その関数を実行しているスレッドの例外状態情報を保存して、呼び出し側の
呼び出し側の例外状態情報を維持するようになりました。
この変更によって、無害そうに見える関数が現在扱っている例外を上書き
することで引き起こされる、例外処理コードでよくおきていたバグを
抑止しています; また、トレースバック内のスタックフレームで
参照されているオブジェクトがしばしば不必要に寿命を永らえて
いたのをなくしています。

一般的な原理として、ある関数が別の関数を呼び出して何らかの作業を
させるとき、呼び出し先の関数が例外を送出していないか調べなくては
ならず、もし送出していれば、その例外状態情報は呼び出し側に
渡されなければなりません。
呼び出し元の関数はオブジェクト参照の所有権をすべて放棄し、
エラー指標を返さなくてはなりませんが、余計に例外を設定 する必要は
_ありません_ -- そんなことをすれば、たった今
送出されたばかりの例外を上書きしてしまい、エラーの原因そのもの
に関する重要な情報を失うことになります。

例外を検出して渡す例は、上の `sum_sequence()'  で示しています。
偶然にも、この例ではエラーを検出した際に何ら参照を放棄する必要が
ありません。以下の関数の例では、エラーに対する後始末について示して
います。まず、どうして Python で書くのが好きか思い出してもらうために、
等価な Python コードを示します:

     def incr_item(dict, key):
         try:
             item = dict[key]
         except KeyError:
             item = 0
         dict[key] = item + 1

以下は対応するコードを C で完璧に書いたものです:

     int
     incr_item(PyObject *dict, PyObject *key)
     {
         /* Py_XDECREF 用に全てのオブジェクトを NULL で初期化 */
         PyObject *item = NULL, *const_one = NULL, *incremented_item = NULL;
         int rv = -1; /* 戻り値の初期値を -1 (失敗) に設定しておく */
     
         item = PyObject_GetItem(dict, key);
         if (item == NULL) {
             /* KeyError だけを処理: */
             if (!PyErr_ExceptionMatches(PyExc_KeyError))
                 goto error;
     
             /* エラーを無かったことに (clear) してゼロを使う: */
             PyErr_Clear();
             item = PyInt_FromLong(0L);
             if (item == NULL)
                 goto error;
         }
         const_one = PyInt_FromLong(1L);
         if (const_one == NULL)
             goto error;
     
         incremented_item = PyNumber_Add(item, const_one);
         if (incremented_item == NULL)
             goto error;
     
         if (PyObject_SetItem(dict, key, incremented_item) < 0)
             goto error;
         rv = 0; /* うまくいった場合 */
         /* 後始末コードに続く */
     
      error:
         /* 成功しても失敗しても使われる後始末コード */
     
         /* NULL を参照している場合は無視するために Py_XDECREF() を使う */
         Py_XDECREF(item);
         Py_XDECREF(const_one);
         Py_XDECREF(incremented_item);
     
         return rv; /* エラーなら -1 、 成功なら 0 */
     }

なんとこの例は C で `goto' 文を使うお勧めの方法まで示して いますね!
この例では、特定の例外を処理するために `PyErr_ExceptionMatches()'

および `PyErr_Clear()'  をどう使うかを
示しています。また、所有権を持っている参照で、値が `NULL' に
なるかもしれないものを捨てるために `Py_XDECREF()'

をどう使うかも示しています (関数名に `X' が付いていることに
注意してください; `Py_DECREF()' は `NULL' 参照に出くわすと
クラッシュします)。正しく動作させるためには、所有権を持つ参照を
保持するための変数を `NULL' で初期化することが重要です; 同様に、
あらかじめ戻り値を定義する際には値を `-1' (失敗) で初期化して
おいて、最後の関数呼び出しまでうまくいった場合にのみ `0' (成功)
に設定します。


File: python-api-jp.info,  Node: Python の埋め込み,  Prev: 例外,  Up: はじめに

Python の埋め込み
=================

Python インタプリタの埋め込みを行う人 (いわば拡張モジュールの
書き手の対極) が気にかけなければならない重要なタスクは、 Python
インタプリタの初期化処理 (initialization)、そしておそらくは 終了処理
(finalization) です。インタプリタのほとんどの機能は、
インタプリタの起動後しか使えません。

基本的な初期化処理を行う関数は `Py_Initialize()'  です。
この関数はロード済みのモジュールからなるテーブルを作成し、
土台となるモジュール `__builtin__' , `__main__' , `sys' , および
`exceptions'  を作成します。 また、モジュール検索パス (`sys.path')

の初期化も行います。

`Py_Initialize()' の中では、 "スクリプトへの引数リスト" (script
argument list, `sys.argv' のこと) を設定しません。
この変数が後に実行される Python コード中で必要なら、 `Py_Initialize()'
に続いて `PySys_SetArgv(ARGC, ARGV)'
を呼び出して明示的に設定しなければなりません。

ほとんどのシステムでは (特に UNIX と Windows は、詳細がわずかに
異なりはしますが)、 `Py_Initialize()' は 標準の Python
インタプリタ実行形式の場所に対する推定結果に基づいて、 Python
のライブラリが Python インタプリタ実行形式からの相対パスで
見つかるという仮定の下にモジュール検索パスを計算します。
とりわけこの検索では、シェルコマンド検索パス (環境変数 `PATH')
上に見つかった `python' という名前の実行ファイルの置かれている
ディレクトリの親ディレクトリからの相対で、 `lib/python2.3'
という名前のディレクトリを探します。

例えば、 Python 実行形式が `/usr/local/bin/python' で見つかった
とすると、`Py_Initialize()' はライブラリが `/usr/local/lib/python2.3'
にあるものと仮定します。 (実際には、このパスは "フォールバック
(fallback)" のライブラリ 位置でもあり、`python' が `PATH'
上にない場合に使われます。) ユーザは `PYTHONHOME'
を設定することでこの動作をオーバライド したり、`PYTHONPATH'
を設定して追加のディレクトリを
標準モジュール検索パスの前に挿入したりできます。

埋め込みを行うアプリケーションでは、 `Py_Initialize()' を呼び出す _前に_
`Py_SetProgramName(FILE)'

を呼び出すことで、上記の検索を操作できます。
この埋め込みアプリケーションでの設定は依然として `PYTHONHOME'
でオーバライドでき、標準のモジュール検索パスの前には以前として
`PYTHONPATH' が挿入されるので注意してください。
アプリケーションでモジュール検索パスを完全に制御したいのなら、 独自に
`Py_GetPath()' , `Py_GetPrefix()' , `Py_GetExecPrefix()' , および
`Py_GetProgramFullPath()'

の実装を提供しなければなりません (これらは全て `Modules/getpath.c'
で定義されています)。

たまに、 Python を "初期化しない" ようにしたいことがあります。
例えば、あるアプリケーションでは実行を最初からやりなおし (start over)
させる (`Py_Initialize()' をもう一度呼び出させる) ように
したいかもしれません。あるいは、アプリケーションが Python を一旦
使い終えて、Python が確保した全てのメモリを解放できるようにしたいかも
しれません。`Py_Finalize()' を使うと、こうした処理を
実現できます。また、関数 `Py_IsInitialized()'

は、Python が現在初期化済みの状態にある場合に真を返します。
これらの関数についてのさらなる情報は、後の章で説明します。


File: python-api-jp.info,  Node: 超高レベルレイヤ,  Next: 参照カウント 2,  Prev: はじめに,  Up: Top

超高レベルレイヤ
****************

この章の関数を使うとファイルまたはバッファにあるPythonソースコードを
実行できますが、より詳細なやり取りをインタプリタとすることはできないでしょう。

これらの関数のいくつかは引数として文法の開始記号を受け取ります。
使用できる開始記号は`Py_eval_input'と`Py_file_input'、
`Py_single_input'です。開始期号の説明はこれらを引数として取る
関数の後にあります。

これらの関数のいくつかが`FILE*'引数をとることにも注意してください。
注意深く扱う必要がある特別な問題には、異なるCライブラリの`FILE'構造体は
異なっていて互換性がない可能性があるということが関係しています。
実際に(少なくとも)Windowsでは、動的リンクされる拡張が異なるライブラリを
使うことが可能であり、したがって、`FILE*'引数がPythonランタイムが
使っているライブラリと同じライブラリによって作成されたことが確かならば、
単にこれらの関数へ渡すだけということに注意すべきです。

`int Py_Main(int argc, char **argv)'
     標準インタプリタのためのメインプログラム。Pythonを組み込む
     プログラムのためにこれを利用できるようにしています。
     ARGCとARGV引数をCプログラムの`main()'関数へ
     渡されるものとまったく同じに作成すべきです。
     引数リストが変更される可能性があるという点に注意することは重要です。
     (しかし、引数リストが指している文字列の内容は変更されません)。
     戻り値は`sys.exit()'関数へ渡される整数でしょう。
     例外が原因でインタプリタが終了した場合は`1'、あるいは、
     引数リストが有効なPythonコマンドラインになっていない場合は`2'です。

`int PyRun_AnyFile(FILE *fp, char *filename)'
     FPが対話的デバイス(コンソールや端末入力あるいはUNIX仮想端末)と
     関連づけられたファイルを参照しているならば、
     `PyRun_InteractiveLoop()'の値を返します。それ以外の場合は、
     `PyRun_SimpleFile()'の結果を返します。FILENAMEが
     `NULL'ならば、この関数はファイル名として`"???"'を使います。

`int PyRun_SimpleString(char *command)'
     `__main__'モジュールの中でCOMMANDに含まれるPythonソースコードを
     実行します。`__main__'がまだ存在しない場合は作成されます。
     正常終了の場合は`0'を返し、また例外が発生した場合は`-1'を
     返します。エラーがあっても、例外情報を得る方法はありません。

`int PyRun_SimpleFile(FILE *fp, char *filename)'
     `PyRun_SimpleString()'と似ていますが、Pythonソースコードを
     メモリ内の文字列ではなくFPから読み込みます。
     FILENAMEはそのファイルの名前でなければなりません。

`int PyRun_InteractiveOne(FILE *fp, char *filename)'
     対話的デバイスに関連付けられたファイルから文を一つ読み込み実行します。
     FILENAMEが`NULL'ならば、`"???"'が代わりに使われます。
     `sys.ps1'と`sys.ps2'を使って、ユーザにプロンプトを提示します。
     入力が正常に実行されたときは`0'を返します。例外が発生した場合は
     `-1'を返すか、もしくはパースエラーの場合はPythonの一部として配布されている
     `errcode.h'インクルードファイルにあるエラーコードを返します。
     (`Python.h'は`errcode.h'をインクルードしません。したがって、
     必要ならば特別にインクルードしなければならないことに注意してください。)

`int PyRun_InteractiveLoop(FILE *fp, char *filename)'
     対話的デバイスに関連付けられたファイルから`EOF'
     に達するまで複数の文を
     読み込み実行します。FILENAMEが`NULL'ならば、`"???"'が代わりに
     使われます。`sys.ps1'と`sys.ps2'を使って、ユーザにプロンプトを
     提示します。`EOF'に達すると`0'を返します。

`struct _node* PyParser_SimpleParseString(char *str, int start)'
     開始トークンSTARTを使ってSTRに含まれるPythonソースコードをパースします。
     効率的に評価可能なコードオブジェクトを作成するためにその結果を使うことができます。
     コード断片を何度も評価しなければならない場合に役に立ちます。

`struct _node* PyParser_SimpleParseFile(FILE *fp, char *filename, int start)'
     `PyParser_SimpleParseString()'に似ていますが、
     Pythonソースコードをメモリ内の文字列ではなくFPから読み込みます。
     FILENAMEはそのファイルの名前でなけれななりません。

`PyObject* PyRun_String(char *str, int start, PyObject *globals, PyObject *locals)'
     辞書GLOBALSとLOCALSで指定されるコンテキストにおいて、
     STRに含まれるPythonソースコードを実行します。
     パラメータSTARTはソースコードをパースするために使われるべき
     開始トークンを指定します。

     コードを実行した結果をPythonオブジェクトとして返します。または、
     例外が発生したならば`NULL' を返します。

`PyObject* PyRun_File(FILE *fp, char *filename, int start, PyObject *globals, PyObject *locals)'
     `PyRun_String()'と似ていますが、Pythonソースコードを
     メモリ内の文字列ではなくFPから読み込みます。
     FILENAMEはそのファイルの名前でなければなりません。

`PyObject* Py_CompileString(char *str, char *filename, int start)'
     STR内のPythonソースコードをパースしてコンパイルし、
     作られたコードオブジェクトを返します。開始トークンは
     STARTによって与えられます。これはコンパイル可能なコードを
     制限するために使うことができ、`Py_eval_input'、
     `Py_file_input'もしくは`Py_single_input'であるべきです。
     FILENAMEで指定されるファイル名はコードオブジェクトを構築するために使われ、
     トレースバックあるいは`SyntaxError'例外メッセージに出てくる可能性があります。
     コードがパースできなかったりコンパイルできなかったりした場合に、
     これは`NULL' を返します。

`int Py_eval_input'
     単独の式に対するPython文法の開始記号で、 `Py_CompileString()'
     と一緒に使います。

`int Py_file_input'
     ファイルあるいは他のソースから読み込まれた文の並びに対するPython文法の
     開始記号で、`Py_CompileString()' と
     一緒に使います。これは任意の長さのPythonソースコードをコンパイルするときに
     使う記号です。

`int Py_single_input'
     単一の文に対するPython文法の開始記号で、 `Py_CompileString()'
     と一緒に使います。
     これは対話式のインタプリタループのための記号です。


File: python-api-jp.info,  Node: 参照カウント 2,  Next: 例外処理,  Prev: 超高レベルレイヤ,  Up: Top

参照カウント
************

この節のマクロはPythonオブジェクトの参照カウントを管理するために使われます。

`void Py_INCREF(PyObject *o)'
     オブジェクトOに対する参照カウントを一つ増やします。オブジェクトが
     `NULL'であってはいけません。それが`NULL'ではないと確信が持てないならば、
     `Py_XINCREF()'を使ってください。

`void Py_XINCREF(PyObject *o)'
     オブジェクトOに対する参照カウントを一つ増やします。オブジェクトが
     `NULL'であってもよく、その場合マクロは何の影響も与えません。

`void Py_DECREF(PyObject *o)'
     オブジェクトOに対する参照カウントを一つ減らします。オブジェクトが
     `NULL'であってはいけません。それが`NULL'ではないと確信が持てないならば、
     `Py_XDECREF()'を使ってください。参照カウントがゼロになったら、
     オブジェクトの型のメモリ解放関数(`NULL'であってはならない)が呼ばれます。

     _(例えば`__del__()'メソッドをもつクラスインスタンスが
     メモリ解放されたときに)メモリ解放関数は任意のPythonコードを呼び出すことが
     できます。このようなコードでは例外は伝播しませんが、実行されたコードは
     すべてのPythonグローバル変数に自由にアクセスできます。
     これが意味するのは、`Py_DECREF()'が呼び出されるより前では、
     グローバル変数から到達可能などんなオブジェクトも一貫した状態に
     あるべきであるということです。
     例えば、リストからオブジェクトを削除するコードは削除するオブジェクト
     への参照を一時変数にコピーし、リストデータ構造を更新し、それから
     一時変数に対して`Py_DECREF()'を呼び出すべきです。_

`void Py_XDECREF(PyObject *o)'
     オブジェクトOへの参照カウントを一つ減らします。オブジェクトは
     `NULL'であってもよいが、その場合マクロは何の影響も与えません。それ以外の
     場合、結果は`Py_DECREF()'と同じです。また、注意すべきことも
     同じです。

以下の関数やマクロはインタプリタのコアの内部においてのみ使用するための
ものです: `_Py_Dealloc()', `_Py_ForgetReference()',
`_Py_NewReference()'。また、グローバル変数`_Py_RefTotal' も同様です。


File: python-api-jp.info,  Node: 例外処理,  Next: ユーティリティ関数,  Prev: 参照カウント 2,  Up: Top

例外処理
********

この章で説明する関数を使うと、Pythonの例外の処理や送出ができるように
なります。Pythonの例外処理の基本をいくらか理解することが大切です。
例外はUNIX `errno'変数にやや似た機能を果たします: 発生した
中で最も新しいエラーの(スレッド毎の)グローバルなインジケータがあります。
実行に成功した場合にはほとんどの関数がこれをクリアしませんが、失敗したときには
エラーの原因を示すために設定します。ほとんどの関数はエラーインジケータも
返し、通常は関数がポインタを返すことになっている場合は`NULL'であり、
関数が整数を返す場合は`-1'です。(例外: `PyArg_*()'関数は
実行に成功したときに`1'を返し、失敗したときに`0'を返します).

ある関数が呼び出した関数がいくつか失敗したために、その関数が失敗しなければ
ならないとき、一般的にエラーインジケータを設定しません。呼び出した関数が
すでに設定しています。エラーを処理して例外をクリアするか、あるいは
(オブジェクト参照またはメモリ割り当てのような)それが持つどんなリソースも
取り除いた後に戻るかのどちらか一方を行う責任があります。エラーを処理する
準備をしていなければ、普通に続けるべきでは_ありません_。エラーのために
戻る場合は、エラーが設定されていると呼び出し元に知らせることが大切です。
エラーが処理されていない場合または丁寧に伝えられている場合には、
Python/C APIのさらなる呼び出しは意図した通りには動かない可能性があり、
不可解な形で失敗するかもしれません。

エラーインジケータは Python変数`sys.exc_type', `sys.exc_value' および
`sys.exc_traceback'に対応する三つのPythonオブジェクトからからなります。
いろいろな方法でエラーインジケータとやりとりするためにAPI関数が存在します。
各スレッドに別々のエラーインジケータがあります。

`void PyErr_Print()'
     `sys.stderr'へ標準トレースバックをプリントし、エラーインジケータを
     クリアします。エラーインジケータが設定されているときにだけ、この関数を
     呼び出してください。(それ以外の場合、致命的なエラーを引き起こすでしょう!)

`PyObject* PyErr_Occurred()'
     エラーインジケータが設定されているかテストします。設定されている場合は、
     例外の_型_(`PyErr_Set*()'関数の一つあるいは
     `PyErr_Restore()'への最も新しい呼び出しに対する第一引数)を返します。
     設定されていない場合は`NULL'を返します。あなたは戻り値への参照を持っていませんので、
     それに`Py_DECREF()'する必要はありません。_Note:_
     戻り値を特定の例外と
     比較しないでください。その代わり、下に示す`PyErr_ExceptionMatches()'を
     使ってください。(比較は簡単に失敗するでしょう。なぜなら、例外はクラスではなく
     インスタンスかもしれないし、あるいは、クラス例外の場合は期待される例外の
     サブクラスかもしれないからです。)

`int PyErr_ExceptionMatches(PyObject *exc)'
     `PyErr_GivenExceptionMatches(PyErr_Occurred(), EXC)'と同じ。
     例外が実際に設定されたときにだけ、これを呼び出だすべきです。例外が発生
     していないならば、メモリアクセス違反が起きるでしょう。

`int PyErr_GivenExceptionMatches(PyObject *given, PyObject *exc)'
     GIVEN例外がEXCの例外と一致するなら真を返します。これはEXCが
     クラスオブジェクトである場合も真を返します。これはGIVENがサブクラスの
     インスタンスであるときも真を返します。EXCがタプルならば、タプル内
     (と再帰的にサブタプル内)のすべての例外が一致するか調べられます。
     GIVENが`NULL'ならば、メモリアクセス違反が起きるでしょう。

`void PyErr_NormalizeException(PyObject**exc, PyObject**val, PyObject**tb)'
     ある状況では、以下の`PyErr_Fetch()'が返す値は
     "正規化されていない"可能性があります。つまり、`*EXC'は
     クラスオブジェクトだが`*VAL'は同じクラスのインスタンスでは
     ないという意味です。この関数はそのような場合にそのクラスをインスタンス化
     するために使われます。その値がすでに正規化されている場合は何も起きません。
     遅延正規化はパフォーマンスを改善するために実装されています。

`void PyErr_Clear()'
     エラーインジケータをクリアします。エラーインジケータが設定されていないならば、
     効果はありません。

`void PyErr_Fetch(PyObject **ptype, PyObject **pvalue, PyObject **ptraceback)'
     エラーインジケータをアドレスを渡す三つの変数の中へ取り出します。
     エラーインジケータが設定されていない場合は、三つすべての変数を`NULL'に
     設定します。エラーインジケータが設定されている場合はクリアされ、
     あなたは取り出されたそれぞれのオブジェクトへの参照を持つことになります。
     型オブジェクトが`NULL'でないときでさえ、その値とトレースバックオブジェクトは
     `NULL'かもしれません。_Note:_
     通常、この関数は例外を扱う必要のあるコード
     あるいはエラーインジケータを一時的に保存して元に戻す必要のあるコードに
     よってのみ使用されます。

`void PyErr_Restore(PyObject *type, PyObject *value, PyObject *traceback)'
     三つのオブジェクトからエラーインジケータを設定します。エラーインジケータが
     すでに設定されている場合は、最初にクリアされます。オブジェクトが`NULL'ならば、
     エラーインジケータがクリアされます。`NULL'のtypeと非`NULL'のvalueあるいは
     tracebackを渡してはいけません。例外の型(type)はクラスであるべきです。
     無効な例外の型(type)あるいは値(value)を渡してはいけません。
     (これらの規則を破ると後で気付きにくい問題の原因となるでしょう。)
     この呼び出しはそれぞれのオブジェクトへの参照を取り除きます:
     あなたは
     呼び出しの前にそれぞれのオブジェクトへの参照を持たなければならないのであり、
     また呼び出しの後にはもはやこれらの参照を持っていません。
     (これを理解していない場合は、この関数を使ってはいけません。注意しておきます。)
     _Note:_
     通常この関数はエラーインジケータを一時的に保存し元に戻す必要のある
     コードによってのみに使われます。現在の例外状態を保存するためには
     `PyErr_Fetch()'を使ってください。

`void PyErr_SetString(PyObject *type, char *message)'
     これはエラーインジケータを設定するための最も一般的な方法です。第一引数は
     例外の型を指定します。通常は標準例外の一つ、例えば`PyExc_RuntimeError'です。
     その参照カウントを増加させる必要はありません。第二引数はエラーメッセージで、
     文字列オブジェクトへ変換されます。

`void PyErr_SetObject(PyObject *type, PyObject *value)'
     この関数は`PyErr_SetString()'に似ていますが、
     例外の"値(value)"として任意のPythonオブジェクトを指定することができます。

`PyObject* PyErr_Format(PyObject *exception, const char *format, ...)'
     この関数はエラーインジケータを設定し`NULL'を返します。
     EXCEPTIONはPython例外(インスタンスではなくクラス)であるべきです。
     FORMATは文字列であるべきであり、`printf()'に似た
     書式化コードを含んでいます。書式化コードの前の`幅.精度(width.precision)'は
     解析されますが、幅の部分は無視されます。

     文字                               意味
     ------                             -----
     c                                  文字、`int'引数として
     d                                  10進数、`int'引数として
     x                                  16進数、`int'引数として
     s                                  文字列、`char *'引数として
     p                                  16進法のポインタ、`void
                                        *'引数として

     認識できない書式化文字があると書式化文字列の残りすべてがそのまま
     結果の文字列へコピーされ、余分の引数はどれも捨てられます。

`void PyErr_SetNone(PyObject *type)'
     これは`PyErr_SetObject(TYPE, Py_None)'を省略したものです。

`int PyErr_BadArgument()'
     これは`PyErr_SetString(PyExc_TypeError, MESSAGE)'を省略したもので、
     ここでMESSAGEは組み込み操作が不正な引数で呼び出されたということを表しています。
     主に内部で使用するためのものです。

`PyObject* PyErr_NoMemory()'
     これは`PyErr_SetNone(PyExc_MemoryError)'を省略したもので、
     `NULL'を返します。したがって、メモリ不足になったとき、
     オブジェクト割り当て関数は`return PyErr_NoMemory();'と
     書くことができます。

`PyObject* PyErr_SetFromErrno(PyObject *type)'
     Cライブラリ関数がエラーを返してC変数`errno'を設定したときに、
     これは例外を発生させるために便利な関数です。第一要素が
     整数`errno'値で、第二要素が (`strerror()' から得られる)対応する
     エラーメッセージであるタプルオブジェクトを構成します。それから、
     `PyErr_SetObject(TYPE, OBJECT)'を呼び出します。
     UNIXでは、`errno'値が`EINTR'であるとき、すなわち
     割り込まれたシステムコールを表しているとき、これは
     `PyErr_CheckSignals()'を呼び出し、それがエラーインジケータを
     設定した場合は設定されたままにしておきます。関数は常に`NULL'を返します。
     したがって、システムコールがエラーを返したとき、システムコールの
     ラッパー関数は`return PyErr_SetFromErrno(TYPE);'と
     書くことができます。

`PyObject* PyErr_SetFromErrnoWithFilename(PyObject *type, char *filename)'
     `PyErr_SetFromErrno()'に似ていて、FILENAMEが`NULL'でない場合に、
     それがTYPEのコンストラクタに第三引数として渡されるというふるまいが追加
     されています。`IOError'と`OSError'のような例外の場合では、
     これが例外インスタンスの`filename'属性を定義するために使われます。

`PyObject* PyErr_SetFromWindowsErr(int ierr)'
     これは`WindowsError'を発生させるために便利な関数です。
     `0'のIERRとともに呼び出された場合、`GetLastError()'が
     返すエラーコードが代りに使われます。IERRあるいは
     `GetLastError()'によって与えられるエラーコードのWindows用の説明を
     取り出すために、Win32関数`FormatMessage()'を呼び出します。それから、
     第一要素がIERR値で第二要素が(`FormatMessage()'から得られる)
     対応するエラーメッセージであるタプルオブジェクトを構成します。そして、
     `PyErr_SetObject(PYEXC_WINDOWSERROR, OBJECT)'を呼び出します。
     この関数は常に`NULL'を返します。 利用可能範囲: Windows。

`PyObject* PyErr_SetExcFromWindowsErr(PyObject *type, int ierr)'
     `PyErr_SetFromWindowsErr()'に似ていて、送出する例外の型を
     指定する引数が追加されています。 利用可能範囲: Windows。 _Added in
     Python version 2.3_

`PyObject* PyErr_SetFromWindowsErrWithFilename(int ierr, char *filename)'
     `PyErr_SetFromWindowsErr()'に似ていて、FILENAMEが`NULL'でない場合には
     `WindowsError'のコンストラクタへ第三引数として渡されるという振る舞いが
     追加されています。 利用可能範囲: Windows。

`PyObject* PyErr_SetExcFromWindowsErrWithFilename(PyObject *type, int ierr, char *filename)'
     `PyErr_SetFromWindowsErrWithFilename()'に似ていて、
     発生させる例外の型を指定する引数が追加されています。 利用可能範囲:
     Windows。 _Added in Python version 2.3_

`void PyErr_BadInternalCall()'
     `PyErr_SetString(PyExc_TypeError, MESSAGE)'を省略したものです。
     ここでMESSAGEは内部操作(例えば、Python/C API関数)が不正な引数と
     ともに呼び出されたということを示しています。主に内部で使用するためのもの
     です。

`int PyErr_Warn(PyObject *category, char *message)'
     警告メッセージを出します。CATEGORY引数は警告カテゴリ(以下を参照)
     かまたは`NULL'で、MESSAGE引数はメッセージ文字列です。

     この関数は通常警告メッセージをSYS.STDERRへプリントします。
     けれども、ユーザが警告をエラーへ変更するように指定することも可能です。
     そのような場合には、これは例外を発生させます。警告機構がもつ問題のために
     その関数が例外を発生させるということも可能です。(実装ではその厄介な仕事を
     行うために`warnings'モジュールをインポートします)。
     例外が発生させられなければ、戻り値は`0'です。あるいは、例外が発生させ
     られると`-1'です。(警告メッセージが実際にプリントされるかどうかを決定
     することはできず、また何がその例外の原因なのかを決定することもできない。
     これは意図的なものです。)例外が発生した場合、呼び出し元は通常の例外処理を
     行います(例えば、`Py_DECREF()'は参照を持っており、エラー値を
     返します)。

     警告カテゴリは`Warning'のサブクラスでなければならない。
     デフォルト警告カテゴリは`RuntimeWarning'です。
     標準Python警告カテゴリは`PyExc_'にPython例外名が続く名前の
     グローバル変数を用いて変更できます。これらは型`PyObject*'を
     持ち、すべてクラスオブジェクトです。それらの名前は
     `PyExc_Warning', `PyExc_UserWarning', `PyExc_DeprecationWarning',
     `PyExc_SyntaxWarning',
     `PyExc_RuntimeWarning'および`PyExc_FutureWarning'です。
     `PyExc_Warning'は`PyExc_Exception'のサブクラスです。
     その他の警告カテゴリは`PyExc_Warning'のサブクラスです。

     警告をコントロールするための情報については、`warnings'モジュールの
     ドキュメンテーションとコマンドライン・ドキュメンテーションの
     `-W'オプションを参照してください。 警告コントロールのためのC
     APIはありません。

`int PyErr_WarnExplicit(PyObject *category, char *message, char *filename, int lineno, char *module, PyObject *registry)'
     すべての警告の属性を明示的に制御した警告メッセージを出します。
     これはPython関数`warnings.warn_explicit()'の直接的なラッパで、
     さらに情報を得るにはそちらを参照してください。そこに説明されているデフォルトの
     効果を得るために、MODULEとREGISTRY引数は`NULL'に設定できます。

`int PyErr_CheckSignals()'
     この関数はPythonのシグナル処理とやりとりすることができます。
     シグナルがそのプロセスへ送られたかどうかチェックし、そうならば対応する
     シグナルハンドラを呼び出します。 `signal'
     モジュールがサポートされている場合は、
     これはPythonで書かれたシグナルハンドラを呼び出せます。すべての場合で、
     `SIGINT' のデフォルトの効果は
     `KeyboardInterrupt'例外を発生させることです。例外が発生した場合、
     エラーインジケータが設定され、関数は`1'を返します。
     そうでなければ、関数は`0'を返します。エラーインジケータが以前に
     設定されている場合は、それがクリアされるかどうかわかりません。

`void PyErr_SetInterrupt()'
     `SIGINT' シグナルが 到達した影響をシミュレートします -- 次に
     `PyErr_CheckSignals()'が呼ばれるとき、
     `KeyboardInterrupt'は送出されるでしょう。インタプリタロックを
     保持することなく呼び出せます。

`PyObject* PyErr_NewException(char *name, PyObject *base, PyObject *dict)'
     このユーティリティ関数は新しい例外オブジェクトを作成して返します。
     NAME引数は新しい例外の名前、`module.class'形式の
     C文字列でなければなりません。
     BASEとDICT引数は通常`NULL'です。これはすべての例外のためのルート、
     組み込み名`Exception'(Cでは`PyExc_Exception'としてアクセス可能)
     から導出されたクラスオブジェクトを作成します。
     新しいクラスの`__module__'属性はNAME引数の前半部分(最後のドットまで)に
     設定され、クラス名は後半部分(最後のドットの後)に設定されます。
     BASE引数は代わりのベースクラスを指定するために使えます。
     DICT引数はクラス変数とメソッドの辞書を指定するために使えます。

`void PyErr_WriteUnraisable(PyObject *obj)'
     例外が設定されているがインタプリタが実際に例外を発生させることができないときに、
     このユーティリティ関数は警告メッセージを`sys.stderr'へプリントします。
     例えば、例外が`__del__()'メソッドで発生したときに使われます。

     発生させられない例外が生じたコンテキストを特定するための一つの引数OBJとともに
     関数が呼び出されます。OBJのreprが警告メッセージにプリントされるでしょう。

* Menu:

* 標準例外::
* 文字列例外の廃止::

