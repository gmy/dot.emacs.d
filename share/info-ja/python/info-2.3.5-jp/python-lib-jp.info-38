This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: DOM 内のオブジェクト,  Next: 適合性,  Prev: モジュールの内容 4,  Up: xmldom

DOM 内のオブジェクト
--------------------

DOM について最も明確に限定しているドキュメントは W3C による DOM
仕様です。

DOM 属性は単純な文字列としてだけではなく、ノードとして操作される
かもしれないので注意してください。とはいえ、そうしなければならない
場合はかなり稀なので、今のところ記述されていません。

インタフェース           節                       目的
------                   -----                    -----
DOMImplementation        *Note DOMImplementation  根底にある実装へのインタフェース。
                         オブジェクト::           
Node                     *Note Node               ドキュメント内の大部分のオブジェクトのに対する基底インタフェース。
                         オブジェクト::           
NodeList                 *Note NodeList           ノードの配列に対するインタフェース。
                         オブジェクト::           
DocumentType             *Note DocumentType       ドキュメントを処理するために必要な宣言についての情報。
                         オブジェクト::           
Document                 *Note Document           ドキュメント全体を表現するオブジェクト。
                         オブジェクト::           
Element                  *Note Element            ドキュメント階層内の要素ノード。
                         オブジェクト::           
Attr                     *Note Attr               階層ノード上の属性値。
                         オブジェクト::           
Comment                  *Note Comment            ソースドキュメント内のコメント表現。
                         オブジェクト::           
Text                     *Note Text               ドキュメント内のテキスト記述を含むノード。
                         オブジェクトおよび       
                         CDATASection             
                         オブジェクト::           
ProcessingInstruction    *Note                    処理命令 (processing
                         ProcessingInstruction    instruction) 表現。
                         オブジェクト::           

さらに追加の節として、 Python で DOM を利用するために定義されている
例外について記述しています。

* Menu:

* DOMImplementation オブジェクト::
* Node オブジェクト::
* NodeList オブジェクト::
* DocumentType オブジェクト::
* Document オブジェクト::
* Element オブジェクト::
* Attr オブジェクト::
* NamedNodeMap Objects::
* Comment オブジェクト::
* Text オブジェクトおよび CDATASection オブジェクト::
* ProcessingInstruction オブジェクト::
* 例外 2::


File: python-lib-jp.info,  Node: DOMImplementation オブジェクト,  Next: Node オブジェクト,  Prev: DOM 内のオブジェクト,  Up: DOM 内のオブジェクト

DOMImplementation オブジェクト
..............................

`DOMImplementation' インタフェースは、利用している DOM 実装
において特定の機能が利用可能かどうかを決定するための方法を
アプリケーションに提供します。DOM レベル~2 では、 `DOMImplementation'
を使って新たな`Document' オブジェクト や `DocumentType'
オブジェクトを生成する機能も追加しています。

`hasFeature(feature, version)'


File: python-lib-jp.info,  Node: Node オブジェクト,  Next: NodeList オブジェクト,  Prev: DOMImplementation オブジェクト,  Up: DOM 内のオブジェクト

Node オブジェクト
.................

XML 文書の全ての構成要素は `Node' のサブクラスです。

`nodeType'
     ノード (node) の型を表現する整数値です。型に対応する以下の
     シンボル定数: `ELEMENT_NODE' 、 `ATTRIBUTE_NODE' 、 `TEXT_NODE' 、
     `CDATA_SECTION_NODE' 、 `ENTITY_NODE' 、
     `PROCESSING_INSTRUCTION_NODE' 、 `COMMENT_NODE' 、 `DOCUMENT_NODE'
     、 `DOCUMENT_TYPE_NODE' 、 `NOTATION_NODE' 、 が `Node'
     オブジェクトで定義されています。 読み出し専用の属性です。

`parentNode'
     現在のノードの親ノードか、文書ノードの場合には `None'
     になります。この値は常に `Node' オブジェクトか `None'
     になります。`Element' ノードの場合、この値はルート要素 (root
     element) の場合を除き親要素 (parent element) となり、
     ルート要素の場合には `Document' オブジェクトとなります。 `Attr'
     ノードの場合、この値は常に `None' となります。
     読み出し専用の属性です。

`attributes'
     属性オブジェクトの `NamedNodeMap' です。要素だけがこの属性に
     実際の値を持ちます; その他のオブジェクトでは、この属性を `None'
     にします。 読み出し専用の属性です。

`previousSibling'
     このノードと同じ親ノードを持ち、直前にくるノードです。例えば、
     SELF 要素のの開始タグの直前にくる終了タグを持つ要素です。
     もちろん、XML 文書は要素だけで構成されているだけではないので、
     直前にくる兄弟関係にある要素 (sibling) はテキストやコメント、
     その他になる可能性があります。このノードが親ノードにおける
     先頭の子ノードである場合、属性値は `None' になります。
     読み出し専用の属性です。

`nextSibling'
     このノードと同じ親ノードを持ち、直後にくるノードです。例えば、
     `previousSibling' も参照してください。
     このノードが親ノードにおける末尾頭の子ノードである場合、 属性値は
     `None' になります。 読み出し専用の属性です。

`childNodes'
     このノード内に収められているノードからなるリストです。
     読み出し専用の属性です。

`firstChild'
     このノードに子ノードがある場合、その先頭のノードです。
     そうでない場合 `None' になります。 読み出し専用の属性です。

`lastChild'
     このノードに子ノードがある場合、その末尾のノードです。
     そうでない場合 `None' になります。 読み出し専用の属性です。

`localName'
     `tagName' にコロンがあれば、コロン以降の部分に、なければ `tagName'
     全体になります。値は文字列です。

`prefix'
     `tagName' のコロンがあれば、コロン以前の部分に、なければ
     空文字列になります。値は文字列か、`None' になります。

`namespaceURI'
     要素名に関連付けられた名前空間です。文字列か `None' に
     なります。読み出し専用の属性です。

`nodeName'
     この属性はノード型ごとに異なる意味を持ちます; 詳しくは DOM 仕様を
     参照してください。この属性で得られることになる情報は、全てのノード
     型では `tagName' 、属性では `name' プロパティといった
     ように、常に他のプロパティで得ることができます。全てのノード型で、
     この属性の値は文字列か `None' になります。 読み出し専用の属性です。

`nodeValue'
     この属性はノード型ごとに異なる意味を持ちます; 詳しくは DOM 仕様を
     参照してください。その序今日は `nodeName' と似ています。
     この属性の値は文字列か `None' になります。

`hasAttributes()'
     ノードが何らかの属性を持っている場合に真を返します。

`hasChildNodes()'
     ノードが何らかの子ノードを持っている場合に真を返します。

`isSameNode(other)'
     OTHER がこのノードと同じノードを参照している場合に真を返します。
     このメソッドは、何らかのプロキシ (proxy) 機構を利用するような DOM
     実装で特に便利です (一つ以上のオブジェクトが同じノードを参照
     するかもしれないからです)。

     _Notice:_ このメソッドは DOM レベル~3 API で提案されており、まだ
     "ワーキングドラフト(working draft)" の段階です。しかし、
     このインタフェースだけは議論にはならないと考えられます。 W3C
     による変更は必ずしも Python DOM インタフェースにおける
     このメソッドに影響するとは限りません (ただしこのメソッドに
     対する何らかの新たな W3C API もサポートされるかもしれません)。


`appendChild(newChild)'
     現在のノードの子ノードリストの末尾に新たな子ノードを追加し、
     NEWCHILD を返します。

`insertBefore(newChild, refChild)'
     新たな子ノードを既存の子ノードの前に挿入します。REFCHILD
     は現在のノードの子ノードである場合に限られます; そうでない場合、
     `ValueError' が送出されます。 NEWCHILD が返されます。

`removeChild(oldChild)'
     子ノードを削除します。OLDCHILD はこのノードの子ノードでなければ
     なりません。そうでない場合、`ValueError' が送出されます。
     成功した場合 OLDCHILD が返されます。 OLDCHILD
     をそれ以降使わない場合、`unlink()' メソッドを
     呼び出さなければなりません。

`replaceChild(newChild, oldChild)'
     既存のノードと新たなノードを置き換えます。この操作は OLDCHILD
     が現在のノードの子ノードである場合に限られます; そうでない場合、
     `ValueError' が送出されます。

`normalize()'
     一続きのテキスト全体を一個の `Text' インスタンスとして保存する
     ために隣接するテキストノードを結合します。これにより、多くの
     アプリケーションで DOM ツリーからのテキスト処理が簡単になります。
     _Added in Python version 2.1_

`cloneNode(deep)'
     このノードを複製 (clone) します。DEEP を設定すると、子ノードも
     同様に複製することを意味します。複製されたノードを返します。


File: python-lib-jp.info,  Node: NodeList オブジェクト,  Next: DocumentType オブジェクト,  Prev: Node オブジェクト,  Up: DOM 内のオブジェクト

NodeList オブジェクト
.....................

`NodeList' は、ノードからなる配列を表現します。これらのオブジェクト は
DOM コア勧告 (DOM Core recommendation) において、二通りに使われて
います: `Element' オブジェクトでは、子ノードのリストを提供するのに
`NodeList' を利用します。また、このインタフェースにおける `Node' の
`getElementsByTagName()' および `getElementsByTagNameNS()'
メソッドは、クエリに対する結果 を表現するのに`NodeList' を利用します。

DOM レベル~2 勧告では、これらのオブジェクトに対し、メソッドと属性を
一つづつ定義しています:

`item(i)'
     配列に I 番目の要素がある場合にはその要素を、そうでない場合には
     `None' を返します。I はゼロよりも小さくてはならず、
     配列の長さ以上であってはなりません。

`length'
     配列中のノードの数です。

この他に、Python の DOM インタフェースでは、`NodeList' オブジェクトを
Python の配列として使えるようにするサポートが
追加されていることが必要です。`NodeList' の実装では、全て `__len__()'
と `__getitem__()' をサポートしなければ なりません;
このサポートにより、`for' 文内で `NodeList'
にわたる繰り返しと、組み込み関数 `len()'
の適切なサポートができるようになります。

DOM 実装が文書の変更をサポートしている場合、`NodeList' の 実装でも
`__setitem__()' および `__delitem__()' メソッドを
サポートしなければなりません。


File: python-lib-jp.info,  Node: DocumentType オブジェクト,  Next: Document オブジェクト,  Prev: NodeList オブジェクト,  Up: DOM 内のオブジェクト

DocumentType オブジェクト
.........................

文書で宣言されている記法 (notation) やエンティティ (entity) に関する
(外部サブセット(external subset) がパーザから利用でき、情報
を提供できる場合にはそれも含めた) 情報は、 `DocumentType'
オブジェクトから手に入れることができます。文書の `DocumentType'
は、`Document' オブジェクトの `doctype' 属性で入手することが できます;
文書の `DOCTYPE' 宣言がない場合、文書の `doctype'
属性は、このインタフェースを持つインスタンスの代わりに `None'
に設定されます。

`DocumentType' は `Node' を特殊化したもので、以下の 属性を加えています:

`publicId'
     文書型定義 (document type definition) の外部サブセットに対する
     公開識別子 (public identifier) です。文字列または `None'
     になります。

`systemId'
     文書型定義 (document type definition) の外部サブセットに対する
     システム識別子 (system identifier) です。文字列の URI または
     `None' になります。

`internalSubset'
     ドキュメントの完全な内部サブセットを与える文字列です。
     サブセットを囲むブラケットは含みません。ドキュメントが内部サブセット
     を持たない場合、この値は `None' です。

`name'
     `DOCTYPE' 宣言でルート要素の名前が与えられている場合、その
     値になります。

`entities'
     外部エンティティの定義を与える `NamedNodeMap' です。
     複数回定義されているエンティティに対しては、最初の定義だけが
     提供されます (その他は XML 勧告での要求仕様によって無視されます)。
     パーザによって情報が提供されないか、エンティティが定義されていない
     場合には、この値は `None' になることがあります。

`notations'
     記法の定義を与える `NamedNodeMap' です。
     複数回定義されている記法名に対しては、最初の定義だけが
     提供されます (その他は XML 勧告での要求仕様によって無視されます)。
     パーザによって情報が提供されないか、エンティティが定義されていない
     場合には、この値は `None' になることがあります。


File: python-lib-jp.info,  Node: Document オブジェクト,  Next: Element オブジェクト,  Prev: DocumentType オブジェクト,  Up: DOM 内のオブジェクト

Document オブジェクト
.....................

`Document' は XML ドキュメント全体を表現し、その構成要素
である要素、属性、処理命令、コメント等が入っています。 `Document' は
`Node' からプロパティを継承していることを 思い出してください。

`documentElement'
     ドキュメントの唯一無二のルート要素です。

`createElement(tagName)'
     新たな要素ノードを生成して返します。要素は、生成された時点では
     ドキュメント内に挿入されません。`insertBefore()' や
     `appendChild()' のような他のメソッドの一つを使って
     明示的に挿入を行う必要があります。

`createElementNS(namespaceURI, tagName)'
     名前空間を伴う新たな要素ノードを生成して返します。TAGNAME
     にはプレフィクス (prefix)
     があってもかまいません。要素は、生成された
     時点では文書内に挿入されません。`insertBefore()' や
     `appendChild()' のような他のメソッドの一つを使って
     明示的に挿入を行う必要があります。 `appendChild()'.

`createTextNode(data)'
     パラメタで渡されたデータの入ったテキストノードを生成して返します。
     他の生成 (create) メソッドと同じく、このメソッドは生成された
     ノードをツリーに挿入しません。

`createComment(data)'
     パラメタで渡されたデータの入ったコメントノードを生成して返します。
     他の生成 (create) メソッドと同じく、このメソッドは生成された
     ノードをツリーに挿入しません。

`createProcessingInstruction(target, data)'
     パラメタで渡された TARGET および DATA の入った処理命令
     ノードを生成して返します。他の生成 (create) メソッドと同じく、
     このメソッドは生成されたノードをツリーに挿入しません。

`createAttribute(name)'
     属性ノードを生成して返します。このメソッドは属性ノードを特定の
     要素に関連づけることはしません。新たに生成された属性インスタンス
     を使うには、適切な `Element' オブジェクトの `setAttributeNode()'
     を使わなければなりません。

`createAttributeNS(namespaceURI, qualifiedName)'
     名前空間を伴う新たな属性ノードを生成して返します。TAGNAME
     にはプレフィクス (prefix) があってもかまいません。
     このメソッドは属性ノードを特定の要素に関連づけることはしません。
     新たに生成された属性インスタンスを使うには、適切な `Element'
     オブジェクトの `setAttributeNode()' を使わなければなりません。

`getElementsByTagName(tagName)'
     全ての下位要素 (直接の子要素、子要素の子要素、等) から、特定の
     要素型名を持つものを検索します。

`getElementsByTagNameNS(namespaceURI, localName)'
     全ての下位要素 (直接の子要素、子要素の子要素、等) から、特定の
     名前空間 URI とローカル名 (local name) を持つものを検索します。
     ローカル名は名前空間におけるプレフィクス以降の部分です。


File: python-lib-jp.info,  Node: Element オブジェクト,  Next: Attr オブジェクト,  Prev: Document オブジェクト,  Up: DOM 内のオブジェクト

Element オブジェクト
....................

`Element' は `Node' のサブクラスです。このため `Node'
クラスの全ての属性を継承します。

`tagName'
     要素型名です。名前空間使用の文書では、要素型名中にコロンが
     あるかもしれません。値は文字列です。

`getElementsByTagName(tagName)'
     `Document' クラス内における同名のメソッドと同じです。

`getElementsByTagNameNS(tagName)'
     `Document' クラス内における同名のメソッドと同じです。

`getAttribute(attname)'
     属性値を文字列で返します。

`getAttributeNode(attrname)'
     ATTRNAME で指定された属性の `Attr' ノードを返します。

`getAttributeNS(namespaceURI, localName)'
     指定した NAMESPACEURI および LOCALNAME を持つ属性値を
     文字列として返します。

`getAttributeNodeNS(namespaceURI, localName)'
     指定した NAMESPACEURI および LOCALNAME を持つ属性値を
     ノードとして返します。

`removeAttribute(attname)'
     名前で指定された属性を削除します。該当する属性がなくても例外は送出
     されません。

`removeAttributeNode(oldAttr)'
     OLDATTR が属性リストにある場合、削除して返します。 OLDATTR
     が存在しない場合、`NotFoundErr' が送出されます。

`removeAttributeNS(namespaceURI, localName)'
     名前で指定された属性を削除します。このメソッドは QNAME では なく
     LOCALNAME を使うので注意してください。該当する
     属性がなくても例外は送出されません。

`setAttribute(attname, value)'
     文字列を使って属性値を設定します。

`setAttributeNode(newAttr)'
     新たな属性ノードを要素に追加します。`name' 属性が
     既存の属性に一致した場合、必要に応じて属性を置き換えます。
     置換が生じると、古い属性ノードが返されます。 NEWATTR
     がすでに使われていれば、 `InuseAttributeErr' が送出されます。

`setAttributeNodeNS(newAttr)'
     新たな属性ノードを要素に追加します。`namespaceURI' および
     `localName' 属性が既存の属性に一致した場合、必要に応じて
     属性を置き換えます。置換が生じると、古い属性ノードが返されます。
     NEWATTR がすでに使われていれば、 `InuseAttributeErr'
     が送出されます。

`setAttributeNS(namespaceURI, qname, value)'
     指定された NAMESPACEURI および QNAME で与えられた属性
     の値を文字列で設定します。qname は属性の完全な名前であり、この点が
     上記のメソッドと違うので注意してください。


File: python-lib-jp.info,  Node: Attr オブジェクト,  Next: NamedNodeMap Objects,  Prev: Element オブジェクト,  Up: DOM 内のオブジェクト

Attr オブジェクト
.................

`Attr' は `Node' を継承しており、全ての属性を受け継いで います。

`name'
     要素型名です。名前空間使用の文書では、要素型名中にコロンが
     あるかもしれません。

`localName'
     名前にコロンがあればコロン以降の部分に、なければ名前全体になります。

`prefix'
     名前にコロンがあればコロン以前の部分に、なければ空文字列になります。


File: python-lib-jp.info,  Node: NamedNodeMap Objects,  Next: Comment オブジェクト,  Prev: Attr オブジェクト,  Up: DOM 内のオブジェクト

NamedNodeMap Objects
....................

`NamedNodeMap' は `Node' を継承して _いません_ 。

`length'
     属性リストの長さです。

`item(index)'
     特定のインデクスを持つ属性を返します。属性の並び方は任意ですが、
     DOM 文書が生成されている間は一定になります。各要素は属性
     ノードです。属性値はノードの `value' 属性で取得してください。

このクラスをよりマップ型的な動作ができるようにする実験的なメソッド
もあります。そうしたメソッドを使うこともできますし、 `Element'
オブジェクトに対して、標準化された `getAttribute*()'
ファミリのメソッドを使うこともできます。


File: python-lib-jp.info,  Node: Comment オブジェクト,  Next: Text オブジェクトおよび CDATASection オブジェクト,  Prev: NamedNodeMap Objects,  Up: DOM 内のオブジェクト

Comment オブジェクト
....................

`Comment' は XML 文書中のコメントを表現します。 `Comment' は `Node'
のサブクラスですが、 子ノードを持つことはありません。

`data'
     文字列によるコメントの内容です。この属性には、コメントの先頭にある
     `<!-'`-' と末尾にある `-'`->' 間の全ての文字
     が入っていますが、`<!-'`-' と`-'`->' 自体は 含みません。


File: python-lib-jp.info,  Node: Text オブジェクトおよび CDATASection オブジェクト,  Next: ProcessingInstruction オブジェクト,  Prev: Comment オブジェクト,  Up: DOM 内のオブジェクト

Text オブジェクトおよび CDATASection オブジェクト
.................................................

`Text' インタフェースは XML 文書内のテキストを表現します。 パーザおよび
DOM 実装が DOM の XML 拡張をサポートしている場合、 CDATA
でマークされた区域 (section) に入れられている部分テキスト は
`CDATASection' オブジェクトに記憶されます。
これら二つのインタフェースは同一のものですが、`nodeType'
属性が異なります。

これらのインタフェースは `Node' インタフェースを拡張したもの
です。しかし子ノードを持つことはできません。

`data'
     文字列によるテキストノードの内容です。

_Notice:_ `CDATASection' ノードの利用は、ノードが完全な CDATA マーク区域
を表現するという意味ではなく、ノードの内容が CDATA 区域の一部である
ということを意味するだけです。 単一の CDATA
セクションは文書ツリー内で複数のノードとして表現
されることがあります。二つの隣接する `CDATASection' ノードが、異なる
CDATA マーク区域かどうかを決定する方法はありません。


File: python-lib-jp.info,  Node: ProcessingInstruction オブジェクト,  Next: 例外 2,  Prev: Text オブジェクトおよび CDATASection オブジェクト,  Up: DOM 内のオブジェクト

ProcessingInstruction オブジェクト
..................................

XML 文書内の処理命令を表現します; `Node' インタフェース
を継承していますが、子ノードを持つことはできません。

`target'
     最初の空白文字までの処理命令の内容です。 読み出し専用の属性です。

`data'
     最初の空白文字以降の処理命令の内容です。


File: python-lib-jp.info,  Node: 例外 2,  Prev: ProcessingInstruction オブジェクト,  Up: DOM 内のオブジェクト

例外
....

_Added in Python version 2.1_

DOM レベル~2 勧告では、単一の例外 `DOMException' と、
どの種のエラーが発生したかをアプリケーションが決定できるようにする
多くの定数を定義しています。 `DOMException'
インスタンスは、特定の例外に関する 適切な値を提供する `code'
属性を伴っています。

Python DOM インタフェースでは、上記の定数を提供していますが、
同時に一連の例外を拡張して、DOM で定義されている各例外コードに対して
特定の例外が存在するようにしています。 DOM
の実装では、適切な特定の例外を送出しなければならず、 各例外は `code'
属性に対応する適切な値を伴わなければ なりません。

`DOMException'
     全ての特定の DOM 例外で使われている基底例外クラスです。この例外
     クラスは直接インスタンス化することができません。

`DomstringSizeErr'
     指定された範囲のテキストが文字列に収まらない場合に送出されます。
     この例外は Python の DOM 実装で使われるかどうかは判っていませんが、
     Python で書かれていない DOM 実装から送出される場合があります。

`HierarchyRequestErr'
     挿入できない型のノードを挿入しようと試みたときに送出されます。

`IndexSizeErr'
     メソッドに与えたインデクスやサイズパラメタが負の値や許容範囲の
     値を超えた際に送出されます。

`InuseAttributeErr'
     文書中にすでに存在する `Attr' ノードを挿入しようと試みた
     際に送出されます。

`InvalidAccessErr'
     パラメタまたは操作が根底にあるオブジェクトでサポートされていない
     場合に送出されます。

`InvalidCharacterErr'
     この例外は、文字列パラメタが、現在使われているコンテキストで XML
     1.0 勧告によって許可されていない場合に送出されます。
     例えば、要素型に空白の入った `Element' ノードを生成
     しようとすると、このエラーが送出されます。

`InvalidModificationErr'
     ノードの型を変更しようと試みた際に送出されます。

`InvalidStateErr'
     定義されていないオブジェクトや、もはや利用できなくなったオブジェクトを
     使おうと試みた際に送出されます。

`NamespaceErr'
     に照らして許可されていない方法でオブジェクトを変更しようと
     試みた場合、この例外が送出されます。

`NotFoundErr'
     参照しているコンテキスト中に目的のノードが存在しない場合に送出される
     例外です。例えば、`NamedNodeMap.removeNamedItem()' は
     渡されたノードがノードマップ中に存在しない場合にこの例外を送出
     します。

`NotSupportedErr'
     要求された方のオブジェクトや操作が実装でサポートされていない場合に
     送出されます。

`NoDataAllowedErr'
     データ属性をサポートしないノードにデータを指定した際に送出されます。

`NoModificationAllowedErr'
     オブジェクトに対して (読み出し専用ノードに対する修正のように)
     許可されていない修正を行おうと試みた際に送出されます。

`SyntaxErr'
     無効または不正な文字列が指定された際に送出されます。

`WrongDocumentErr'
     ノードが現在属している文書と異なる文書に挿入され、
     かつある文書から別の文書へのノードの移行が実装でサポート
     されていない場合に送出されます。

DOM 勧告で定義されている例外コードは、以下のテーブルに従って
上記の例外と対応付けられます:

定数                                 例外
------                               -----
DOMSTRING_SIZE_ERR                   `DomstringSizeErr'
HIERARCHY_REQUEST_ERR                `HierarchyRequestErr'
INDEX_SIZE_ERR                       `IndexSizeErr'
INUSE_ATTRIBUTE_ERR                  `InuseAttributeErr'
INVALID_ACCESS_ERR                   `InvalidAccessErr'
INVALID_CHARACTER_ERR                `InvalidCharacterErr'
INVALID_MODIFICATION_ERR             `InvalidModificationErr'
INVALID_STATE_ERR                    `InvalidStateErr'
NAMESPACE_ERR                        `NamespaceErr'
NOT_FOUND_ERR                        `NotFoundErr'
NOT_SUPPORTED_ERR                    `NotSupportedErr'
NO_DATA_ALLOWED_ERR                  `NoDataAllowedErr'
NO_MODIFICATION_ALLOWED_ERR          `NoModificationAllowedErr'
SYNTAX_ERR                           `SyntaxErr'
WRONG_DOCUMENT_ERR                   `WrongDocumentErr'


File: python-lib-jp.info,  Node: 適合性,  Prev: DOM 内のオブジェクト,  Up: xmldom

適合性
------

この節では適合性に関する要求と、Python DOM API、W3C DOM 勧告、 および
OMG IDL の Python API への対応付けとの間の関係について 述べます。

* Menu:

* 型の対応付け::
* アクセサメソッド::


File: python-lib-jp.info,  Node: 型の対応付け,  Next: アクセサメソッド,  Prev: 適合性,  Up: 適合性

型の対応付け
............

DOM 仕様で使われている基本的な IDL 型は、以下のテーブルに従って Python
の型に対応付けられています。

IDL 型                               Python 型
------                               -----
boolean                              `IntegerType' (値 `0' または `1')
                                     による
int                                  `IntegerType'
long int                             `IntegerType'
unsigned int                         `IntegerType'

さらに、勧告で定義されている `DOMString' は、Python 文字列 または
Unicode 文字列に対応付けられます。アプリケーションでは、 DOM
から文字列が返される際には常に Unicode を扱えなければ なりません。

IDL の `null' 値は `None' に対応付けられており、 API で `null'
の使用が許されている場所では常に受理されるか、
あるいは実装によって提供されるはずです。


File: python-lib-jp.info,  Node: アクセサメソッド,  Prev: 型の対応付け,  Up: 適合性

アクセサメソッド
................

OMG IDL から Python への対応付けは、 IDL `attribute'
宣言へのアクセサ関数の定義を、Java による対応付けが行うのと
ほとんど同じように行います。

IDL 宣言の対応付け

     readonly attribute string someValue;
              attribute string anotherValue;

は、三つのアクセサ関数: `someValue' に対する "get" メソッド
(`_get_someValue()')、そして`anotherValue' に対する "get" および "set"
メソッド (`_get_anotherValue()' および `_set_anotherValue()')
を生み出します。 とりわけ、対応付けでは、IDL 属性が通常の Python
属性としてアクセス 可能であることは必須ではありません:
`OBJECT.someValue' が 動作することは必須 _ではなく_ 、`AttributeError'
を送出してもかまいません。

しかしながら、Python DOM API では、通常の属性アクセスが動作することが
必須です。これは、Python IDL コンパイラによって生成された典型的な
サロゲーションはまず動作することはなく、DOM オブジェクトが CORBA
を解してアクセスされる場合には、クライアント上で
ラッパオブジェクトが必要であることを意味します。 CORBA DOM
クライアントでは他にもいくつか考慮すべきことがある一方で、 CORBA
を介して DOM を使った経験を持つ実装者はこのことを問題視して
いません。`readonly' であると宣言された属性は、全ての DOM
実装で書き込みアクセスを制限しているとは限りません。

さらに、アクセサ関数は必須ではありません。アクセサ関数が提供された場合、
Python IDL 対応付けによって定義された形式をとらなければなりませんが、
属性は Python から直接アクセスすることができるので、それらのメソッドは
必須ではないと考えられます。`readonly' であると宣言された
属性に対しては、 "set" アクセサを提供してはなりません。


File: python-lib-jp.info,  Node: xmldomminidom,  Next: xmldompulldom,  Prev: xmldom,  Up: 構造化マークアップツール

軽量な DOM 実装
===============

軽量な文書オブジェクトモデルの実装。

_Added in Python version 2.0_

`xml.dom.minidom' は、軽量な文書オブジェクトモデルインタフェース
の実装です。この実装では、完全な DOM よりも
単純で、かつ十分に小さくなるよう意図しています。

DOM アプリケーションは典型的に、XML を DOM に解析 (parse) することで
開始します。`xml.dom.minidom' では、以下のような解析用の関数
を介して行います:

     from xml.dom.minidom import parse, parseString
     
     dom1 = parse('c:\\temp\\mydata.xml') # parse an XML file by name
     
     datasource = open('c:\\temp\\mydata.xml')
     dom2 = parse(datasource)   # parse an open file
     
     dom3 = parseString('<myxml>Some data<empty/> some more data</myxml>')

`parse()' 関数はファイル名か、開かれたファイルオブジェクト
を引数にとることができます。

`parse(filename_or_file{, parser})'
     与えられた入力から `Document' を返します。 FILENAME_OR_FILE
     はファイル名でもファイルオブジェクトでもかまいません。PARSER
     を指定する場合、SAX2 パーザオブジェクトでなければなりません。
     この関数はパーザの文書ハンドラを変更し、名前空間サポートを有効に
     します; (エンティティリゾルバ (entity resolver) のような)
     他のパーザ設定 は前もっておこなわなければなりません。

XML データを文字列で持っている場合、`parseString()' を
代わりに使うことができます:

`parseString(string[, parser])'
     STRING を表現する `Document' を返します。このメソッドは
     文字列に対する `StringIO' オブジェクトを生成して、その
     オブジェクトを `parse' に渡します。

これらの関数は両方とも、文書の内容を表現する `Document' オブジェクトを
返します。

`parse()' や `parseString()' といった関数が行うのは、 XML
パーザを、何らかの SAX パーザからくる解析イベント (parse event)
を受け取って DOM ツリーに変換できるような "DOM ビルダ (DOM builder)"
に結合することです。関数は誤解を招くような名前になっているかも
しれませんが、インタフェースについて学んでいるときには理解しやすい
でしょう。文書の解析はこれらの関数が戻るより前に完結します; 要するに、
これらの関数自体はパーザ実装を提供しないということです。

"DOM 実装" オブジェクトのメソッドを呼び出して `Document' を
生成することもできます。このオブジェクトは、`xml.dom'
パッケージ、または`xml.dom.minidom' モジュールの
`getDOMImplementation()' 関数を呼び出して取得できます。
`xml.dom.minidom' モジュールの実装を使うと、常に minidom 実装の
`Document' インスタンスを返します。一方、 `xml.dom'
版の関数では、別の実装によるインスタンスを 返すかもれません (PyXML
package がインストールされているとそうなるでしょう)。`Document'
を取得したら、DOM を構成するために子ノードを追加していくことができます:

     from xml.dom.minidom import getDOMImplementation
     
     impl = getDOMImplementation()
     
     newdoc = impl.createDocument(None, "some_tag", None)
     top_element = newdoc.documentElement
     text = newdoc.createTextNode('Some textual content.')
     top_element.appendChild(text)

DOM 文書オブジェクトを手にしたら、XML 文書のプロパティやメソッドを
使って、文書の一部にアクセスすることができます。これらのプロパティは
DOM 仕様で定義されています。文書オブジェクトの主要なプロパティは
`documentElement' プロパティです。このプロパティは XML
文書の主要な要素: 他の全ての要素を保持する要素、を与えます。
以下にプログラム例を示します:

     dom3 = parseString("<myxml>Some data</myxml>")
     assert dom3.documentElement.tagName == "myxml"

DOM を使い終えたら、後片付けを行わなければなりません。 Python
のバージョンによっては、循環的に互いを参照するオブジェクト
に対するガベージコレクションをサポートしていないため、この操作が
必要となります。この制限が全てのバージョンの Python から除去される
までは、循環参照オブジェクトが消去されないものとしてコードを
書くのが無難です。

DOM を片付けるには、 `unlink()' メソッドを呼び出します:

     dom1.unlink()
     dom2.unlink()
     dom3.unlink()

`unlink()' は、 DOM API に対する `xml.dom.minidom'
特有の拡張です。ノードに対して `unlink()' を呼び出した後は、
ノードとその下位ノードは本質的には無意味なものとなります。

See also:
     `Document Object Model (DOM) Level 1 Specification'
     {`xml.dom.minidom' でサポートされている DOM の W3C 勧告。}

* Menu:

* DOM オブジェクト::
* DOM の例::
* minidom と DOM 標準::


File: python-lib-jp.info,  Node: DOM オブジェクト,  Next: DOM の例,  Prev: xmldomminidom,  Up: xmldomminidom

DOM オブジェクト
----------------

Python の DOM API 定義は `xml.dom' モジュールドキュメント
の一部として与えられています。この節では、`xml.dom' の API と
`xml.dom.minidom' との違いについて列挙します。

`unlink()'
     DOM との内部的な参照を破壊して、循環参照ガベージコレクションを
     持たないバージョンの Python でもガベージコレクションされるように
     します。循環参照ガベージコレクションが利用できても、このメソッドを
     使えば、大量のメモリをすぐに使えるようにできるため、必要なくなったら
     すぐにこのメソッドを DOM オブジェクトに対して呼ぶのが良い習慣です。
     このメソッドは `Document' オブジェクトに対してだけ呼び出せば
     よいのですが、あるノードの子ノードを放棄するために子ノードに対して
     呼び出してもかまいません。

`writexml(writer)'
     XML を WRITER オブジェクトに書き込みます。 WRITER
     は、ファイルオブジェクトインタフェースの `write()' に該当する
     メソッドを持たなければなりません。

     _Changed in Python version 2.1_

     _Changed in Python version 2.3_

`toxml([encoding])'
     DOM が表現している XML を文字列にして返します。

     引数がなければ、 XML ヘッダは encoding を指定せず、
     文書内の全ての文字をデフォルトエンコード方式で表示できない場合、
     結果は Unicode 文字列となります。この文字列を UTF-8 以外の
     エンコード方式でエンコードするのは不正であり、なぜなら UTF-8 が
     XML のデフォルトエンコード方式だからです。

     明示的な ENCODING 引数があると、結果は指定されたエンコード
     方式によるバイト文字列となります。引数を常に指定するよう推奨します。
     表現不可能なテキストデータの場合に UnicodeError が送出されるのを
     避けるため、encoding 引数は "utf-8" に指定するべきです。

     _Changed in Python version 2.3_

`toprettyxml([indent[, newl]])'
     美しく出力されたバージョンの文書を返します。INDENT は
     インデントを行うための文字で、デフォルトはタブです; NEWL
     には行末で出力される文字列を指定し、デフォルトは \nです。

     _Added in Python version 2.1_ _Changed in Python version 2.3_

以下の標準 DOM メソッドは、`xml.dom.minidom' では特別な
注意をする必要があります:

`cloneNode(deep)'
     このメソッドは Python 2.0 にパッケージされているバージョンの
     `xml.dom.minidom' にはありましたが、これには深刻な
     障害があります。以降のリリースでは修正されています。


File: python-lib-jp.info,  Node: DOM の例,  Next: minidom と DOM 標準,  Prev: DOM オブジェクト,  Up: xmldomminidom

DOM の例
--------

以下のプログラム例は、かなり現実的な単純なプログラムの例です。
特にこの例に関しては、DOM の柔軟性をあまり活用してはいません。

`minidom-example.py'


File: python-lib-jp.info,  Node: minidom と DOM 標準,  Prev: DOM の例,  Up: xmldomminidom

minidom と DOM 標準
-------------------

`xml.dom.minidom' モジュールは、本質的には DOM 1.0 互換の DOM
に、いくつかの DOM 2 機能 (主に名前空間 機能) を追加したものです。

Python における DOM インタフェースは率直なものです。以下の
対応付け規則が適用されます:

   * インタフェースはインスタンスオブジェクトを介してアクセスされます。
     アプリケーション自身から、クラスをインスタンス化してはなりません;
     `Document' オブジェクト上で利用可能な生成関数 (creator function)
     を使わなければなりません。導出インタフェースでは基底インタフェースの
     全ての演算 (および属性) に加え、新たな演算をサポートします。

   * 演算はメソッドとして使われます。DOM では `in' パラメタ
     のみを使うので、引数は通常の順番 (左から右へ) で渡されます。
     オプション引数はありません。`void' 演算は`None' を返します。

   * IDL 属性はインスタンス属性に対応付けられます。OMG IDL 言語
     における Python への対応付けとの互換性のために、属性 `foo'
     はアクセサメソッド `_get_foo()' および `_set_foo()'
     でもアクセスできます。 `readonly' 属性は変更しては なりません;
     とはいえ、これは実行時には強制されません。

   * `short int' 、 `unsigned int' 、 `unsigned long long' 、および
     `boolean' 型は、全て Python 整数 オブジェクトに対応付けられます。

   * `DOMString' 型は Python 文字列型に対応付けられます。
     `xml.dom.minidom' ではバイト文字列 (byte string) および Unicode
     文字列のどちらかに対応づけられますが、通常 Unicode 文字列
     を生成します。`DOMString' 型の値は、W3C の DOM 仕様で、IDL `null'
     値になってもよいとされている場所では `None' に なることもあります。

   * `const' 宣言を行うと、
     (`xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE' のように)
     対応するスコープ内の変数に対応付けを行います;
     これらは変更してはなりません。

   * `DOMException' は現状では `xml.dom.minidom'
     でサポートされていません。その代わり、`xml.dom.minidom'
     は、`TypeError' や `AttributeError' といった 標準の Python
     例外を使います。

   * `NodeList' オブジェクトは Python の組み込みリスト型を
     使って実装されています。 Python 2.2 からは、これらのオブジェクトは
     DOM 仕様で定義されたインタフェースを提供していますが、それ以前の
     バージョンの Python では、公式の API をサポートしていません。
     しかしながら、これらの API は W3C 勧告で定義されたインタフェース
     よりも "Python 的な" ものになっています。

以下のインタフェースは `xml.dom.minidom' では全く実装 されていません:

   * `DOMTimeStamp'

   * `DocumentType' (added in Python 2.1)

   * `DOMImplementation' (added in Python 2.1)

   * `CharacterData'

   * `CDATASection'

   * `Notation'

   * `Entity'

   * `EntityReference'

   * `DocumentFragment'

これらの大部分は、ほとんどの DOM のユーザにとって一般的な用途として有用
とはならないような XML 文書内の情報を反映しています。


File: python-lib-jp.info,  Node: xmldompulldom,  Next: xmlsax,  Prev: xmldomminidom,  Up: 構造化マークアップツール

部分的な DOM ツリー構築のサポート
=================================

SAX イベントからの部分的な DOM ツリー構築のサポート。

_Added in Python version 2.0_

`xml.dom.pulldom' では、SAX イベントから、文書の文書オブジェクト
モデル表現の選択された一部分だけを構築できるようにします。

`PullDOM([documentFactory])'
     `xml.sax.handler.ContentHandler' 実装です ...

`DOMEventStream(stream, parser, bufsize)'
     ...

`SAX2DOM([documentFactory])'
     `xml.sax.handler.ContentHandler' 実装です ...

`parse(stream_or_string[, parser[, bufsize]])'
     ...

`parseString(string[, parser])'
     ...

`default_bufsize'
     `parse()' の BUFSIZE パラメタのデフォルト値です。 _Changed in
     Python version 2.1_

* Menu:

* DOMEventStream オブジェクト::


File: python-lib-jp.info,  Node: DOMEventStream オブジェクト,  Prev: xmldompulldom,  Up: xmldompulldom

DOMEventStream オブジェクト
---------------------------

`getEvent()'
     ...

`expandNode(node)'
     ...

`reset()'
     ...


File: python-lib-jp.info,  Node: xmlsax,  Next: xmlsaxhandler,  Prev: xmldompulldom,  Up: 構造化マークアップツール

SAX2 パーサのサポート
=====================

SAX2 基底クラスと有用な関数のパッケージ

_Added in Python version 2.0_

`xml.sax' パッケージはPython 用の Simple API for XML (SAX) イン
ターフェースを実装した数多くのモジュールを提供しています。またパッケー
ジには SAX 例外と SAX API 利用者が頻繁に利用するであろう有用な関数群も
含まれています。

その関数群は以下の通りです:

`make_parser([parser_list])'
     SAX `XMLReader' オブジェクトを作成して返します。パーサには最初
     に見つかったものが使われます。PARSER_LIST を指定する場合は、
     `create_parser()' 関数を含んでいるモジュール名のシーケンス
     を与える必要があります。PARSER_LIST のモジュールはデフォルトの
     パーサのリストに優先して使用されます。

`parse(filename_or_stream, handler[, error_handler])'
     SAX パーサを作成してドキュメントをパースします。
     FILENAME_OR_STREAM として指定するドキュメントはファイル名、ファ
     イル・オブジェクトのいずれでもかまいません。HANDLER パラメータ
     には SAX `ContentHandler' のインスタンスを指定します。
     ERROR_HANDLER には SAX `ErrorHandler' のインスタンスを指
     定します。これが指定されていないときは、すべてのエラーで
     `SAXParseException' 例外が発生します。関数の戻り値はなく、
     すべての処理は HANDLER に渡されます。

`parseString(string, handler[, error_handler])'
     `parse()' に似ていますが、こちらはパラメータ STRING
     で指定されたバッファをパースします。

典型的な SAX アプリケーションでは3種類のオブジェクト(リーダ、ハンドラ、
入力元)が用いられます(ここで言うリーダとはパーサを指しています)。言い
換えると、プログラムはまず入力元からバイト列、あるいは文字列を読み込み、
一連のイベントを発生させます。発生したイベントはハンドラ・オブジェクト
によって振り分けられます。さらに言い換えると、リーダがハンドラのメソッ
ドを呼び出すわけです。つまり SAX アプリケーションには、リーダ・オブジェ
クト、(作成またはオープンされる)入力元のオブジェクト、ハンドラ・オブジェ
クト、そしてこれら3つのオブジェクトを連携させることが必須なのです。前
処理の最後の段階でリーダは入力をパースするために呼び出されます。パース
の過程で入力データの構造、構文にもとづいたイベントにより、ハンドラ・オ
ブジェクトのメソッドが呼び出されます。

これらのオブジェクトは(通常アプリケーション側でインスタンスを作成しな
い)インターフェースに相当するものです。Python はインターフェースという
明確な概念を提供していないため、形としてはクラスが用いられています。し
かし提供されるクラスを継承せずに、アプリケーション側で独自に実装するこ
とも可能です。`InputSource'、`Locator'、`Attributes'、
`AttributesNS'、`XMLReader' の各インターフェースは `xml.sax.xmlreader'
モジュールで定義されています。ハンドラ・ インターフェースは
`xml.sax.handler' で定義されています。し
ばしばアプリケーション側で直接インスタンスが作成される `InputSource'
とハンドラ・クラスは利便性のため `xml.sax'
にも含まれています。これらのインターフェースに関しては後に解説します。

このほかに `xml.sax' は次の例外クラスも提供しています。

`SAXException(msg[, exception])'
     XML エラーと警告をカプセル化します。このクラスには XML パーサとアプ
     リケーションで発生するエラーおよび警告の基本的な情報を持たせることが
     できます。また機能追加や地域化のためにサブクラス化することも可能です。
     なお `ErrorHandler' で定義されているハンドラがこの例外のインス
     タンスを受け取ることに注意してください。実際に例外を発生させることは
     必須でなく、情報のコンテナとして利用されることもあるからです。

     インスタンスを作成する際 MSG はエラー内容を示す可読データにし
     てください。オプションの EXCEPTION パラメータは `None' も
     しくはパース用コードで補足、渡って来る情報でなければなりません。

     このクラスはSAX 例外の基底クラスになります。

`SAXParseException(msg, exception, locator)'
     パースエラー時に発生する `SAXException' のサブクラスです。
     パースエラーに関する情報として、このクラスのインスタンスが SAX
     `ErrorHandler' インターフェースのメソッドに渡されます。このク
     ラスは `SAXException' 同様 SAX `Locator' インターフェー
     スもサポートしています。

`SAXNotRecognizedException(msg[, exception])'
     SAX `XMLReader' が認識できない機能やプロパティに遭遇したとき発
     生させる `SAXException' のサブクラスです。SAX アプリケーショ
     ンや拡張モジュールにおいて同様の目的にこのクラスを利用することもでき
     ます。

`SAXNotSupportedException(msg[, exception])'
     SAX `XMLReader' が要求された機能をサポートしていないとき発生さ
     せる `SAXException' のサブクラスです。SAX アプリケーション
     や拡張モジュールにおいて同様の目的にこのクラスを利用することもできま
     す。

See also:
     `SAX: The Simple API for XML'{SAX API
     定義に関し中心となっているサイトです。Java に
     よる実装とオンライン・ドキュメントが提供されています。実装 と SAX
     API の歴史に関する情報のリンクも掲載されています。}

     *Note xmlsaxhandler:: アプリケーションが提供するオブジェクトの
     インターフェース定義

     *Note xmlsaxsaxutils:: SAX アプリケーション向けの有用な関数群

     *Note xmlsaxxmlreader:: パーサが提供するオブジェクトのインター
     フェース定義

* Menu:

* SAXException オブジェクト::


File: python-lib-jp.info,  Node: SAXException オブジェクト,  Prev: xmlsax,  Up: xmlsax

SAXException オブジェクト
-------------------------

`SAXException' 例外クラスは以下のメソッドをサポートしています。

`getMessage()'
     エラー状態を示す可読メッセージを返します。

`getException()'
     カプセル化した例外オブジェクトまたは `None' を返します。


File: python-lib-jp.info,  Node: xmlsaxhandler,  Next: xmlsaxsaxutils,  Prev: xmlsax,  Up: 構造化マークアップツール

SAX ハンドラの基底クラス
========================

SAX イベント・ハンドラの基底クラス

_Added in Python version 2.0_

SAX API はコンテント・ハンドラ、DTD ハンドラ、エラー・ハンドラ、エンティ
ティ・リゾルバという4つのハンドラを規定しています。通常アプリケーショ
ン側で実装する必要があるのは、これらのハンドラが発生させるイベントのう
ち、処理したいものへのインターフェースだけです。インターフェースは1つ
のオブジェクトにまとめることも、複数のオブジェクトに分けることも可能で
す。ハンドラはすべてのメソッドがデフォルトで実装されるように、
`xml.sax' で提供される基底クラスを継承しなくてはなりません。

`ContentHandler'
     アプリケーションにとって最も重要なメインの SAX
     コールバック・インター
     フェースです。このインターフェースで発生するイベントの順序はドキュメ
     ント内の情報の順序を反映しています。

`DTDHandler'
     DTD イベントのハンドラです。

     未構文解析エンティティや属性など、パースに必要な DTD イベントの抽出
     だけをおこなうインターフェースです。

`EntityResolver'
     エンティティ解決用の基本インターフェースです。このインターフェースを
     実装したオブジェクトを作成しパーサに登録することで、パーサはすべての
     外部エンティティを解決するメソッドを呼び出すようになります。

`ErrorHandler'
     エラーや警告メッセージをアプリケーションに通知するためにパーサが使用
     するインターフェースです。このオブジェクトのメソッドが、エラーをただ
     ちに例外に変換するか、あるいは別の方法で処理するかの制御をしています。

これらのクラスに加え、`xml.sax.handler' は機能やプロパティ名の
シンボル定数を提供しています。

`feature_namespaces'
     値: `"http://xml.org/sax/features/namespaces"'\ true:
     名前空間の処理を有効にする。\ false:
     オプションで名前空間の処理を無効にする (暗黙に namespace-prefixes
     も無効にする - デフォルト )。\ アクセス: (パース時)
     リードオンリー; (パース時以外) 読み書き可

`feature_namespace_prefixes'
     値: `"http://xml.org/sax/features/namespace-prefixes"'\ true:
     名前空間宣言で用いられているオリジナルのプリフィックス名と属性
     を通知する。\ false: 名前空間宣言で用いられている属性を通知しない。
     オプションでオリジナルのプリフィックス名も通知しない(デフォルト)。\
     アクセス: (パース時) リードオンリー; (パース時以外) 読み書き可

`feature_string_interning'
     値: `"http://xml.org/sax/features/string-interning"'\ true:
     すべての要素名、プリフィックス、属性、名前、名前空間、URI、
     ローカル名を組込みの intern 関数を使ってシンボルに登録する。\
     false: 名前のすべてを必ずしもシンボルに登録しない(デフォルト)。\
     アクセス: (パース時) リードオンリー; (パース時以外) 読み書き可

`feature_validation'
     値: `"http://xml.org/sax/features/validation"'\ true:
     すべての妥当性検査エラーを通知する(external-general-entities
     とexternal-parameter-entities が暗黙の前提になっている)。\ false:
     妥当性検査エラーを通知しない。\ アクセス: (パース時)
     リードオンリー; (パース時以外) 読み書き可

`feature_external_ges'
     値: `"http://xml.org/sax/features/external-general-entities"'\
     true: 外部一般(テキスト)エンティティの取り込みをおこなう。\ false:
     外部一般エンティティを取り込まない。\ アクセス: (パース時)
     リードオンリー; (パース時以外) 読み書き可

`feature_external_pes'
     値: `"http://xml.org/sax/features/external-parameter-entities"'\
     true: 外部 DTD サブセットを含むすべての外部パラメータ・エンティティ
     の取り込みをおこなう。\ false:
     外部パラーメタ・エンティティおよび外部 DTD サブセットを取り込
     まない。\ アクセス: (パース時) リードオンリー; (パース時以外)
     読み書き可

`all_features'
     すべての機能の一覧。

`property_lexical_handler'
     値: `"http://xml.org/sax/properties/lexical-handler"'\ data type:
     xml.sax.sax2lib.LexicalHandler (Python 2 では未サポート)\
     description:
     コメントなど字句解析イベント用のオプション拡張ハンドラ。\
     アクセス: 読み書き可

`property_declaration_handler'
     Value: `"http://xml.org/sax/properties/declaration-handler"'\ data
     type: xml.sax.sax2lib.DeclHandler (Python 2 では未サポート)\
     description: ノーテーションや未解析エンティティをのぞく DTD
     関連イベン ト用のオプション拡張ハンドラ。\ access: read/write

`property_dom_node'
     Value: `"http://xml.org/sax/properties/dom-node"'\ data type:
     org.w3c.dom.Node (Python 2 では未サポート) \ description:
     パース時は DOM イテレータにおけるカレント DOM ノード、
     非パース時はルート DOM ノードを指す。\ アクセス: (パース時)
     リードオンリー; (パース時以外) 読み書き可

`property_xml_string'
     値: `"http://xml.org/sax/properties/xml-string"'\ データ型: 文字列\
     説明: カレント・イベントの元になったリテラル文字列\ アクセス:
     リードオンリー

`all_properties'
     既知のプロパティ名の全リスト。

* Menu:

* ContentHandler オブジェクト::
* DTDHandler オブジェクト::
* EntityResolver オブジェクト::
* ErrorHandler オブジェクト::

