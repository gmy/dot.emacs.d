This is python-ref-jp.info, produced by makeinfo version 4.5 from
python-ref-jp.texi.

12 October 2005


File: python-ref-jp.info,  Node: import 文,  Next: global 文,  Prev: continue 文,  Up: 単純文 simple statement

`import' 文
===========

`import_stmt "import" `module' ["as" `name'] ( "," `module' ["as" `name'] )*'

` | "from" `module' "import" `identifier' ["as" `name']'

`   ( "," `identifier' ["as" `name'] )*'

` | "from" `module' "import" "*"'

`module (`identifier' ".")* `identifier''

import 文は、(1) モジュールを探し、必要なら初期化 (initialize) する;
(`import' 文のあるスコープにおける) ローカルな名前空間で
名前を定義する、の二つの段階を踏んで初期化されます。 第一形式 (`from'
のない形式) は、上記の段階をリスト中にある
各識別子に対して繰り返し実行していきます。 `from' のある形式では、(1)
を一度だけ行い、次いで (2) を 繰り返し実行します。

組み込みモジュールや拡張モジュールの "初期化" は、ここでは
初期化関数の呼び出しを意味します。モジュールは初期化を行うために
かならず初期化関数を提供しなければなりません
(リファレンス実装では、関数名はモジュール名の前に "init" を
つけたものになっています); Python で書かれたモジュールの "初期化"
は、モジュール本体の 実行を意味します。

Python 処理系は、すでに初期化済みのモジュールや、初期化中のモジュール
をモジュール名でインデクス化したテーブルを維持しています。
このテーブルは `sys.modules' からアクセスできます。
モジュール名がこのテーブル内にあるなら、段階 (1) は完了しています。
そうでなければ、処理系はモジュール定義の検索を開始します。モジュール
が見つかった場合、モジュールを読み込み (load) ます。モジュール検索や
読み込みプロセスの詳細は、実装やプラットフォームに依存します。
一般的には、ある名前のモジュールを検索する際、まず同名の "組み込み
(built-in)" モジュールを探し、次に `sys.path'
で列挙されている場所を探します。

組み込みモジュールが見つかった場合  、
組み込みの初期化コードが実行され、段階 (1) を完結します。
合致するファイルが見つからなかった場合、 `ImportError'  が送出されます。
ファイルが見つかった場合、ファイルを構文解析して実行可能な
コードブロックにします。構文エラーが起きた場合、 `SyntaxError'
が送出されます。
それ以外の場合、まず指定された名前をもつ空のモジュールを作成し、
モジュールテーブルに挿入します。次に、このモジュールの実行コンテキスト
下でコードブロックを実行します。実行中に例外が発生すると、段階 (1)
を終了 (terminate) します。

段階 (1) が例外を送出することなく完了したなら、段階 (2) を開始 します。

`import' 文の第一形式は、ローカルな名前空間に置かれた
モジュール名をモジュールオブジェクトに束縛し、import すべき
次の識別子があればその処理に移ります。モジュール名の後ろに `as'
がある場合、`as' の後ろの名前はモジュールの
ローカルな名前として使われます。

`from' 形式は、モジュール名の束縛を行いません: `from' 形式では、段階
(1) で見つかったモジュール内から、
識別子リストの各名前を順に検索し、見つかったオブジェクトを識別子の
名前でローカルな名前空間において束縛します。 `import'
の第一形式と同じように、"`as' localname"
で別名を与えることができます。指定された名前が見つからない場合、
`ImportError' が送出されます。識別子のリストを星印 (`*')
で置き換えると、モジュールで公開されている名前 (public name) 全てを
`import' 文のある場所のローカルな 名前空間に束縛します。。。

モジュールで _公開されている名前 (public names)_ は、
モジュールの名前空間内にある `__all__' という名前の変数
を調べて決定します; `__all__' が定義されている場合、 `__all__'
はモジュールで定義されていたり、import されている
ような名前の文字列からなる配列でなければなりません。 `__all__'
内にある名前は、全て公開された名前であり、 実在するものとみなされます。
`__all__' が定義されていない場合、モジュールの名前空間に
見つかった名前で、アンダースコア文字 (`_') で始まっていない
全ての名前が公開された名前になります。 `__all__' には、公開されている
API 全てを入れなければなりません。 `__all__' には、(モジュール内で
import されて使われている ライブラリモジュールのように) API
を構成しない要素を意に反して
公開してしまうのを避けるという意図があります。

`*' を使った `from' 形式は、モジュールのスコープ内
だけに作用します。関数内でワイルドカードの import 文 -- `import *' --
を使い、関数が自由変数を伴うネストされたブロック
であったり、ブロックを含んでいる場合、コンパイラは `SyntaxError'
を送出します。

*階層的なモジュール名:*
モジュール名に一つまたはそれ以上のドットが入っている場合、
モジュール検索パスは違った扱われ方をします。最後のドットまでの
各識別子からなる配列は、"パッケージ (package)"
を見つけるために使われます; 次に、パッケージ内から各識別子が
検索されます。パッケージとは、一般には `sys.path' 上のディレクトリ
のサブディレクトリで、`__init__.py'.  ファイルを持つものです。 [XXX
この説明については、ここでは今のところこれ以上詳しく書けません;
詳細や、パッケージ内モジュールの検索がどのように行われるかは、
<http://www.python.org/doc/essays/packages.html> を参照 してください]

どのモジュールがロードされるべきかを動的に決めたいアプリケーションの
ために、組み込み関数 `__import__()' が提供されています; 詳細は、 の
組み込み関数 を参照してください。

* Menu:

* future 文 future statement::


File: python-ref-jp.info,  Node: future 文 future statement,  Prev: import 文,  Up: import 文

future 文 (future statement)
----------------------------

"future 文"  は、 将来の特定の Python
のリリースで利用可能になるような構文や意味付け
を使って、特定のモジュールをコンパイルさせるための、コンパイラに
対する指示句 (directive) です。 future
文は、言語仕様に非互換性がもたらされるような、将来の Python
のバージョンに容易に移行できるよう意図されています。 future
文によって、新たな機能が標準化されたリリースが
出される前に、その機能をモジュール単位で使えるようにします。

     [*]

`future_statement "from" "__future__" "import" feature ["as" name]'

` ("," feature ["as" name])*'

`feature identifier'

`name identifier'

future 文は、モジュールの先頭周辺に書かなければなりません。 future
文の前に書いてよい内容は:

   * the module docstring (if any),

   * comments,

   * blank lines, and

   * other future statements.


です。

Python 2.3 が feature 文で新たに認識するようになった機能は、
`generators'、`division'、および `nested_scopes' です。 `generators'
および `nested_scopes' は Python 2.3
では常に有効になっているので、冗長な機能名といえます。

future 文は、コンパイル時に特別なやり方で認識され、扱われます:
言語の中核をなす構文構成 (construct) に対する意味付けが変更されて
いる場合、変更部分はしばしば異なるコードを生成することで実現
されています。新たな機能によって、(新たな予約語のような)
互換性のない新たな構文が取り入れられることさえあります。
この場合、コンパイラはモジュールを別のやりかたで解析する必要が
あるかもしれません。こうしたコード生成に関する決定は、
実行時まで先延ばしすることはできません。

これまでの全てのリリースにおいて、コンパイラはどの機能が定義済み
かを知っており、future 文に未知の機能が含まれている場合には
コンパイル時エラーを送出します。

future 文の実行時における直接的な意味付けは、import 文と同じです。
標準モジュール `__future__' があり、これについては後で述べます。
`__future__' は、future 文が実行される際に通常の方法で import されます。

future 文の実行時における特別な意味付けは、future 文で有効化される
特定の機能によって変わります。

以下の文:

     import __future__ [as name]

には、何ら特殊な意味はないので注意してください。

これは future 文ではありません; この文は通常の import 文であり、
その他の特殊な意味付けや構文的な制限はありません。

future 文の入ったモジュール `M' 内で使われている exec 文、組み込み関数
`compile()' や `execfile()'
によってコンパイルされるコードは、デフォルトの設定では、 future
文に関係する新たな構文や意味付けを使うようになっています。 Python 2.2
からは、この仕様を `compile()' のオプション引数
で制御できるようになりました -- 詳細はライブラリリファレンスの
`compile()' に関するドキュメントを参照してください。

対話的インタプリタのプロンプトでタイプ入力した future 文は、
その後のインタプリタセッション中で有効になります。インタプリタ を `-i'
オプションで起動して実行すべきスクリプト名を 渡し、スクリプト中に
future 文を入れておくと、新たな機能は
スクリプトが実行された後に開始する対話セッションで有効になります。


File: python-ref-jp.info,  Node: global 文,  Next: exec 文,  Prev: import 文,  Up: 単純文 simple statement

`global' 文
===========

`global_stmt "global" `identifier' ("," `identifier')*'

`global' 文は、現在のコードブロック全体で維持される宣言文
です。`global' 文は、列挙した識別子をグローバル変数として
解釈するよう指定することを意味します。 `global'
を使わずにグローバル変数に代入を行うことは
不可能ですが、自由変数を使えばその変数をグローバルであると宣言せずに
グローバル変数を参照することができます。

`global' 文で列挙する名前は、同じコードブロック中で、
プログラムテキスト上 `global' 文より前に使っては なりません。

`global' 文で列挙する名前は、`for' ループの
ループ制御ターゲットや、`class' 定義、関数定義、 `import'
文内で仮引数として使ってはなりません。

(現在の実装では、後ろ二つの制限については強制していませんが、
プログラムでこの緩和された仕様を乱用すべきではありません。
将来の実装では、この制限を強制したり、暗黙のうちにプログラム
の意味付けを変更したりする可能性があります。)

*プログラマのための注意点:* `global' はパーザに対する指示句 (directive)
です。 この指示句は、`global' 文と同時に読み込まれたコード
に対してのみ適用されます。特に、`exec' 文内に入っている `global'
文は、`exec' 文を _含んでいる_
コードブロック内に効果を及ぼすことはなく、`exec' 文内に
含まれているコードは、`exec' 文を含むコード内での `global'
文に影響を受けません。同様のことが、関数 `eval()'、 `execfile()'
、および `compile()' にも当てはまります。


File: python-ref-jp.info,  Node: exec 文,  Prev: global 文,  Up: 単純文 simple statement

`exec' 文
=========

`exec_stmt "exec" `expression' ["in" `expression' ["," `expression']]'

この文は、Python コードの動的な実行をサポートします。
最初の式の値評価結果は文字列か、開かれたファイルオブジェクトか、
コードオブジェクトでなければなりません。文字列の場合、 一連の Python
実行文として解析し、(構文エラーが生じない限り)
実行します。開かれたファイルであれば、ファイルを `EOF'
まで読んで解析し、実行します。コードオブジェクトなら、単に
オブジェクトを実行します。

いずれの場合でも、オプションの部分が省略されると、コードは
現在のスコープ内で実行されます。`in' の後ろに一つだけ
式を指定する場合、その式は辞書でなくてはならず、
グローバル変数とローカル変数の両方に使われます。
二つの式が与えられた場合、双方ともに辞書でなくてはならず、
それぞれグローバル変数とローカル変数として使われます。

`exec' の副作用として実行されるコードで設定された変数名に
対応する名前の他に、追加のキーを辞書に追加することがあります。
例えば、現在の実装では、組み込みモジュール `__builtin__'
の辞書に対する参照を、`__builtins__' (!) というキーで追加
することがあります。

*プログラマのためのヒント:* 式の動的な評価は、組み込み関数 `eval()'
でサポートされています 組み込み関数 `globals()' および `locals()' は、
それぞれ現在のグローバル辞書とローカル辞書を返すので、 `exec'
に渡して使うと便利です。


File: python-ref-jp.info,  Node: 複合文 compound statement,  Next: トップレベル要素,  Prev: 単純文 simple statement,  Up: Top

複合文 (compound statement)
***************************

複合文には、他の文 (のグループ) が入ります; 複合文は、中に入っている
他の文の実行の制御に何らかのやり方で影響を及ぼします。
一般的には、複合文は複数行にまたがって書かれますが、
全部の文を一行に連ねた単純な書き方もあります。

`if'、`while' 、および `for' 文は、
伝統的な制御フロー構成を実現します。`try' は例外処理
かつ/または一連の文に対するクリーンアップコードを指定します。
関数とクラス定義もまた、構文法的には複合文です。

複合文は、一つまたはそれ以上の `節 (clause)' からなります。
一つの節は、ヘッダと `スイート (suite)' からなります。
特定の複合文を構成する節のヘッダ部分は、全て同じインデント
レベルになります。各々の節ヘッダ行は一意に識別されるキーワード
から始まり、コロンで終わります。スイートは、ヘッダのコロンの後ろに
セミコロンで区切られた一つまたはそれ以上の単純文を並べるか、
ヘッダ行後のインデントされた文の集まりです。
後者の形式のスイートに限り、ネストされた複合文を入れることが できます;
以下の文は、`else' 節がどの `if' 節
に属するかがはっきりしないという理由から不正になります:

     if test1: if test2: print x

また、このコンテキスト中では、セミコロンはコロンよりも強い結合を
表すことにも注意してください。従って、以下の例では、`print'
は全て実行されるか、されないかのどちらかです:

     if x < y < z: print x; print y; print z

まとめると、以下のようになります:

`compound_stmt `if_stmt''

` | `while_stmt''

` | `for_stmt''

` | `try_stmt''

` | `funcdef''

` | `classdef''

`suite `stmt_list' NEWLINE | NEWLINE INDENT `statement'+ DEDENT'

`statement `stmt_list' NEWLINE | `compound_stmt''

`stmt_list `simple_stmt' (";" `simple_stmt')* [";"]'

文は常に `NEWLINE'  か、その後に `DEDENT'
が続いたもので終了することに注意してください。
また、オプションの継続節は常にあるキーワード
から始まり、このキーワードから複合文を開始することはできないため、
曖昧さは存在しないことにも注意してください (Python では、
`ぶら下がり(dangling) `else'' 問題を、ネストされた `if'
文はインデントさせること解決しています)。

以下の節における文法規則の記述方式は、明確さのために、
各節を別々の行に書くようにしています。

* Menu:

* if 文::
* while 文::
* for 文::
* try 文::
* 関数定義::
* クラス定義::


File: python-ref-jp.info,  Node: if 文,  Next: while 文,  Prev: 複合文 compound statement,  Up: 複合文 compound statement

`if' 文
=======

`if' 文は、条件分岐を実行するために使われます:

`if_stmt "if" `expression' ":" `suite''

` ( "elif" `expression' ":" `suite' )*'

` ["else" ":" `suite']'

`if' 文は、式を一つ一つ評価してゆき、真になるまで続けて、
真になった節のスイートだけを選択します (真: true と偽: false の定義
については、~*Note ブール演算 boolean operation::
節を参照してください); 次に、選択した スイートを実行します (または、
`if' 文の他の部分を実行 したり、評価したりします)
全ての式が偽になった場合、 `else' 節があれば、そのスイート
が実行されます。


File: python-ref-jp.info,  Node: while 文,  Next: for 文,  Prev: if 文,  Up: 複合文 compound statement

`while' 文
==========

`while' 文は、式の値が真である間、実行を繰り返すために使われます:

`while_stmt "while" `expression' ":" `suite''

` ["else" ":" `suite']'

`while' 文は式を繰り返し真偽評価し、真であれば最初の
スイートを実行します。式が偽であれば (最初から偽になっていることも
ありえます)、`else' 節がある場合にはそれを実行し、 ループを終了します。

最初のスイート内で `break' 文が実行されると、`else' 節の
スイートを実行することなくループを終了します。 `continue'
文が最初のスイート内で実行されると、
スイート内にある残りの文の実行をスキップして、式の真偽評価に戻ります。


File: python-ref-jp.info,  Node: for 文,  Next: try 文,  Prev: while 文,  Up: 複合文 compound statement

`for' 文
========

`for' 文は、配列 (文字列、タプルまたはリスト) や、その他の
反復可能なオブジェクト (iterable object) 内の要素に渡って反復処理を
行うために使われます:

`for_stmt "for" `target_list' "in" `expression_list' ":" `suite''

` ["else" ":" `suite']'

式リストは一度だけ値評価されます; 結果はイテレーション可能な
オブジェクトにならなければなりません。{}`expression_list'
の結果からイテレータが生成されます。
次に、配列の各要素についてインデクスの小さい順に一度だけスイートを
実行します。このとき配列内の要素が通常の代入規則を使ってターゲットリスト
に代入され、その後スイートが実行されます。全ての要素を使い切ると
(配列が空の場合にはすぐに)、 `else' 節があればそれが
実行され、ループを終了します。

最初のスイート内で `break' 文が実行されると、`else' 節の
スイートを実行することなくループを終了します。 `continue'
文が最初のスイート内で実行されると、
スイート内にある残りの文の実行をスキップして、式の真偽評価に戻ります。

スイートの中では、ターゲットリスト内の変数に代入を行えます;
この代入によって、次に代入される要素に影響を及ぼすことはありません。

ループが終了してもターゲットリストは削除されませんが、配列が
空の場合には、ループでの代入は全く行われません。 ヒント: 組み込み関数
`range()' は、 Pascal 言語における `for i := a to b do' の効果を
エミュレートするのに適した数列を返します; すなわち、 `range(3)'
はリスト `[0, 1, 2]' を返します。

_ループ中の配列の変更には微妙な問題があります (これは
変更可能な配列、すなわちリストで起こります)。
どの要素が次に使われるかを追跡するために、内部的なカウンタが
使われており、このカウンタは反復処理を行うごとに加算されます。
このカウンタが配列の長さに達すると、ループは終了します。
このことは、スイート中で配列から現在の (または以前の) 要素を
除去すると、(次の要素のインデクスは、すでに取り扱った要素の
インデクスになるために) 次の要素が飛ばされることを意味します。
同様に、スイート中で配列中の現在の要素以前に要素を挿入すると、
ループ中で現在の要素が再度扱われることになります。
こうした仕様は、厄介なバグになります。配列全体に相当するスライスを
使って一時的なコピーを作ると、これを避けることができます。

_

     for x in a[:]:
         if x < 0: a.remove(x)


File: python-ref-jp.info,  Node: try 文,  Next: 関数定義,  Prev: for 文,  Up: 複合文 compound statement

`try' 文
========

`try' 文は、ひとまとめの文に対して、例外処理かつ/または
クリーンアップコードを指定します:

`try_stmt `try_exc_stmt' | `try_fin_stmt''

`try_exc_stmt "try" ":" `suite''

` ("except" [`expression' ["," `target']] ":" `suite')+'

` ["else" ":" `suite']'

`try_fin_stmt "try" ":" `suite' "finally" ":" `suite''

`try' 文には二つの形式: `try'...`except' および `try'...`finally'
があります。 これら二つの形式を混合することはできません
(互いにネストすることは できます)。

`try'...`except' 形式では、一つまたはそれ以上の 例外ハンドラ (`except'
節) を指定します。 `try'
節内で全く例外が起きなければ、どの例外ハンドラも 実行されません。`try'
スイート内で例外が発生すると、
例外ハンドラの検索が開始されます。この検索では、`except'
節を逐次調べて、発生した例外に合致するまで続けます。 式を伴わない
`except' 節を使う場合、最後に書かなければ なりません; この `except'
節は全ての例外に合致します。 式を伴う `except'
節に対しては、式が値評価され、 返されたオブジェクトが例外と "互換である
(compatible)"
場合にその節が合致します。ある例外に対してオブジェクトが互換で
あるのは、オブジェクトがその例外のアイデンティティを持つオブジェクト
であるか、(クラスの例外の場合) 例外の基底クラスであるか、
例外と互換性のある要素が入ったタプルである場合です。
同じ値を持つオブジェクトであるだけでなく、アイデンティティが
合致しなければならないので注意してください。

例外がどの `except' 節にも合致しなかった場合、現在の
コードを囲うさらに外側、そして呼び出しスタックへと検索を続けます。

`except' 節のヘッダにある式を値評価するときに例外が発生
すると、元々のハンドラ検索はキャンセルされ、新たな例外に対する
例外ハンドラの検索を現在の `except' 節の外側のコードや
呼び出しスタックに対して行います (`try' 文全体が
例外を発行したかのように扱われます)。

合致する `except' 節が見つかると、その `except' 節に
ターゲットが指定されている場合、ターゲットに例外のパラメタが代入
され、その後`except' 節のスイートが実行されます。 `except'
節は全て実行可能なブロックを持っていなければ
なりません。ブロックの末尾に到達すると、通常は `try' 文
全体の直後に実行を継続します。(このことは、同じ例外に対してネスト
した二つの例外ハンドラが存在し、内側のハンドラ内の `try' 節
で例外が発生した場合、外側のハンドラが例外を処理できないことを意味
します。)

`except' 節のスイートが実行されｍる前に、例外に関する 詳細が `sys'
モジュール内の三つの 変数に代入されます: `sys.exc_type'
は、例外を示すオブジェクト を受け取ります; `sys.exc_value'
は例外のパラメタを受け取ります; `sys.exc_traceback'
は、プログラム上の例外が発生した位置を
識別するトレースバックオブジェクト (~*Note 標準型の階層:: 節参照)
を受け取ります。 これらの詳細はまた、関数 `sys.exc_info()' を介して
入手することもできます。この関数は タプル `(EXC_TYPE, EXC_VALUE,
EXC_TRACEBACK)'
を返します。ただしこの関数に対応する変数の使用は、スレッドを使った
プログラムで安全に使えないため撤廃されています。 Python 1.5
からは、例外を処理した関数から戻るときに、以前の値 (関数呼び出し前の値)
に戻されます。

オプションの `else' 節は、実行の制御が `try' 節
の末尾に到達した場合に実行されます。(1) `else'
節内で起きた例外は、`else' 節に先行する `except'
節で処理されることはありません。

`try'...`finally' 形式では、`クリーンアップ' ハンドラを
指定します。まず `try' 節が実行されます。例外が全く発生
しなければ、`finally' 節が実行されます。例外が`try'
節内で発生した場合、例外は一時的に保存され、 `finally'
が実行された後、保存されていた例外が再送出されます。 `finally'
節で別の例外が送出されたり、`return' や `break'
節が実行された場合、保存されていた例外は失われます。 `finally' 節での
`continue' 文の使用は不正となります (理由は現在の実装上の問題にあります
-- この制限は将来解消される かもしれません)。`finally'
節の実行中は、例外情報を取得 することはできません。

`try'...`finally' 文の `try' スイート内で `return'、 `break'、または
`continue' 文が 実行された場合、`finally' 節も `抜け出る途中に (on the
way out)' 実行されます。

例外に関するその他の情報は ~*Note 例外:: 節にあります。また、 `raise'
文の使用による例外の生成に関する情報は、 ~*Note raise 文::
節にあります。

---------- Footnotes ----------

(1)  現在、制御が "末尾に到達する" のは、例外が発生したり、
`return'、`continue'、または `break' 文 が実行される場合を除きます。


File: python-ref-jp.info,  Node: 関数定義,  Next: クラス定義,  Prev: try 文,  Up: 複合文 compound statement

関数定義
========

関数定義は、ユーザ定義関数オブジェクトを定義します (~*Note
標準型の階層:: 節参照):

`funcdef "def" `funcname' "(" [`parameter_list'] ")" ":" `suite''

`parameter_list (`defparameter' ",")*'

` (~~"*" `identifier' [, "**" `identifier']'

` | "**" `identifier''

` | `defparameter' [","])'

`defparameter `parameter' ["=" `expression']'

`sublist `parameter' ("," `parameter')* [","]'

`parameter `identifier' | "(" `sublist' ")"'

`funcname `identifier''

関数定義は実行可能な文です。関数定義を実行すると、現在のローカルな
名前空間内で関数名を関数オブジェクト (関数の実行可能コードを
くるむラッパ) に束縛します。この関数オブジェクトには、関数が呼び出された
際に使われるグローバルな名前空間として、現在のグローバルな名前空間
への参照が入っています。

関数定義は関数本体を実行しません; 関数本体は関数が呼び出された
時にのみ実行されます。

一つ以上のトップレベルのパラメタに  PARAMETER `=' EXPRESSION
の形式がある場合、関数は "デフォルトのパラメタ値 (default parameter
values)" を持つと
いいます。デフォルト値を伴うパラメタに対しては、関数呼び出しの
際に対応するパラメタが省略されると、パラメタの値はデフォルト値で
置き換えられます。 あるパラメタがデフォルト値を持つ場合、それ以後の
パラメタは全てデフォルト値を持たなければなりません -- これは
文法的には表現されていない構文上の制限です。

*デフォルトパラメタ値は関数定義を実行する際に値評価されます。*
これは、デフォルトパラメタの式は関数を定義するときにただ一度だけ評価され、
同じ "計算済みの" 値が全ての呼び出しで使われることを意味します。
デフォルトパラメタ値がリストや辞書のような変更可能なオブジェクトである
場合、この使用を理解しておくことは特に重要です: 関数でこのオブジェクト
を (例えばリストに要素を追加して) 変更する と、実際のデフォルト
値が変更されてしまいます。一般には、これは意図しない動作です。
このような動作を避けるには、デフォルト値に `None' を使い、
この値を関数本体の中で明示的にテストします。例えば以下のようにします:

     def whats_on_the_telly(penguin=None):
         if penguin is None:
             penguin = []
         penguin.append("property of the zoo")
         return penguin

関数呼び出しの意味付けに関する詳細は、~*Note 呼び出し call::
節で述べられて います。
関数呼び出しを行うと、パラメタリストに記述された全てのパラメタ
に対して、固定引数、キーワード引数、デフォルト引数のいずれか
から値を代入します。"`*identifier'" 形式が存在する場合、
余った固定引数を受け取るタプルに初期化されます。この変数の
デフォルト値は空のタプルです。"`**identifier'" 形式が
存在する場合、余ったキーワード引数を受け取るタプルに初期化されます。
デフォルト値は空の辞書です。

式で直接使うために、無名関数 (名前に束縛されていない関数) を作成する
ことも可能です。無名関数の作成には、~*Note ラムダ lambda::
節で記述されている ラムダ形式 (lambda form)
を使います。ラムダ形式は、単純化された
関数定義を行うための略記法にすぎません; "`def'" 文で定義
された関数は、ラムダ形式で定義された関数と全く同様に引渡したり、
他の名前に代入したりできます。実際には、"`def'" 形式は複数の
式を実行できるという点でより強力です。

*プログラマのための注釈:* 関数は一級の (first-class) オブジェクト
です。関数定義内で"`def'" 形式を実行すると、戻り値として返したり
引き渡したりできるローカルな関数を定義します。
ネストされた関数内で自由変数を使うと、`def' 文の入っている
関数のローカル変数にアクセスすることができます。詳細は ~*Note
名前づけと束縛 naming and binding:: 節を参照してください。


File: python-ref-jp.info,  Node: クラス定義,  Prev: 関数定義,  Up: 複合文 compound statement

クラス定義
==========

クラス定義は、クラスオブジェクトを定義します (~*Note 標準型の階層::
節参照):

`classdef "class" `classname' [`inheritance'] ":" `suite''

`inheritance "(" `expression_list' ")"'

`classname `identifier''

クラス定義は実行可能な文です。クラス定義では、まず継承リストがあれば
それを評価します。継承リストの各要素の値評価結果はクラスオブジェクトで
なければなりません。次にクラスのスイートが新たな実行フレーム内で、
新たなローカル名前空間と元々のグローバル名前空間を使って実行されます
(~*Note 名前づけと束縛 naming and binding:: 節を参照してください)。
(通常、スイートには関数定義のみが含まれます) クラスのスイートを
実行し終えると、実行フレームは無視されますが、ローカルな
名前空間は保存されます。次に、基底クラスの継承リストを使って
クラスオブジェクトが生成され、ローカルな名前空間を属性値辞書
として保存します。最後に、もとのローカルな名前空間において、クラス名が
このクラスオブジェクトに束縛されます。

*プログラマのための注釈:* クラス定義内で定義された変数は
クラス変数です; クラス変数は全てのインスタンス間で共有されます。
インスタンス変数を定義するには、`__init__()' メソッドや
他のメソッド中で変数に値を与えます。クラス変数もインスタンス変数も
"`self.name'" 表記でアクセスすることができます。この表記で
アクセスする場合、インスタンス変数は同名のクラス変数を隠蔽します。
変更不能な値をもつクラス変数は、インスタンス変数のデフォルト値と
して使えます。


File: python-ref-jp.info,  Node: トップレベル要素,  Next: 歴史とライセンス,  Prev: 複合文 compound statement,  Up: Top

トップレベル要素
****************

Python インタプリタは、標準入力や、プログラムの引数として与えられた
スクリプト、対話的にタイプ入力された命令、モジュールのソースファイルな
ど、様々な入力源から入力を得ることができます。この章では、それぞれの場
合に用いられる構文法について説明しています。

* Menu:

* 完全な Python プログラム::
* ファイル入力::
* 対話的入力::
* 式入力::


File: python-ref-jp.info,  Node: 完全な Python プログラム,  Next: ファイル入力,  Prev: トップレベル要素,  Up: トップレベル要素

完全な Python プログラム
========================

言語仕様の中では、その言語を処理するインタプリタがどのように起動される
かまで規定する必要はないのですが、完全な Python プログラムについての概
念を持っておくと役に立ちます。完全な Python プログラムは、最小限に初期
化された環境: 全ての組み込み変数と標準モジュールが利用可能で、かつ
`sys' (様々なシステムサービス)、`__builtin__' (組み込み
関数、例外、および `None')、`__main__' の 3 つを除く全ての
モジュールが初期化されていない状態で動作します。`__main__' は、
完全なプログラムを実行する際に、ローカルおよびグローバルな名前空間を提
供するために用いられます。

完全な Python プログラムの構文は、下の節で述べるファイル入力の
ためのものです。

インタプリタは、対話的モード (interactive mode) で起動されることもあり
ます; この場合、インタプリタは完全なプログラムを読んで実行するのではな
く、一度に単一の実行文 (複合文のときもあります) を読み込んで実行します。
初期状態の環境は、完全なプログラムを実行するときの環境と同じです; 各実
行文は、`__main__' の名前空間内で実行されます。

{UNIX} の環境下では、完全なプログラムをインタプリタに渡すには三通りの
方法があります: 第一は、 `-c' STRING コマンドラインオ
プションを使う方法、第二はファイルを第一コマンドライン引数として指定す
る方法、そして最後は標準入力から入力する方法です。ファイルや標準入力が
tty (端末) デバイスの場合、インタプリタは対話モードに入ります; そうで
ない場合、ファイルを完全なプログラムとして実行します。


File: python-ref-jp.info,  Node: ファイル入力,  Next: 対話的入力,  Prev: 完全な Python プログラム,  Up: トップレベル要素

ファイル入力
============

非対話的なファイルから読み出された入力は、全て同じ形式:

`file_input (NEWLINE | `statement')*'

をとります。この構文法は、以下の状況で用いられます:

   * (ファイルや文字列内の) 完全な Python プログラムを構文解析するとき;

   * モジュールを構文解析するとき;

   * `exec' で渡された文字列を構文解析するとき;



File: python-ref-jp.info,  Node: 対話的入力,  Next: 式入力,  Prev: ファイル入力,  Up: トップレベル要素

対話的入力
==========

対話モードでの入力は、以下の文法の下に構文解析されます:

`interactive_input [`stmt_list'] NEWLINE | `compound_stmt' NEWLINE'

対話モードでは、(トップレベルの) 複合文の最後に空白行を入れなくてはな
らないことに注意してください; これは、複合文の終端をパーザが検出するた
めの手がかりとして必要です。


File: python-ref-jp.info,  Node: 式入力,  Prev: 対話的入力,  Up: トップレベル要素

式入力
======

式入力には二つの形式があります。双方とも、先頭の空白を無視します。
`eval()' に対する文字列引数は、以下の形式をとらなければ なりません:

`eval_input `expression_list' NEWLINE*'

`input()' で読み込まれる入力行は、以下の形式をとらなければ なりません:

`input_input `expression_list' NEWLINE'

注意: 文としての解釈を行わない `生の (raw)' 入力行を読み出すためには、
組み込み関数 `raw_input()' や、ファイルオブジェクトの `readline()'
メソッドを使うことができます。


File: python-ref-jp.info,  Node: 歴史とライセンス,  Next: 日本語訳について,  Prev: トップレベル要素,  Up: Top

歴史とライセンス
****************

* Menu:

* History of the software::
* Terms and conditions for accessing or otherwise using Python::


File: python-ref-jp.info,  Node: History of the software,  Next: Terms and conditions for accessing or otherwise using Python,  Prev: 歴史とライセンス,  Up: 歴史とライセンス

History of the software
=======================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see <http://www.cwi.nl/>) in the Netherlands
as a successor of a language called ABC.  Guido remains Python's
principal author, although it includes many contributions from others.

In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see
<http://www.cnri.reston.va.us/>) in Reston, Virginia where he released
several versions of the software.

In May 2000, Guido and the Python core development team moved to
BeOpen.com to form the BeOpen PythonLabs team.  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation; see <http://www.zope.com/>).  In 2001, the Python Software
Foundation (PSF, see <http://www.python.org/psf/>) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property.  Zope Corporation is a sponsoring member of the
PSF.

All Python releases are Open Source (see <http://www.opensource.org/>
for the Open Source Definition).  Historically, most, but not all,
Python releases have also been GPL-compatible; the table below
summarizes the various releases.

Release        Derived from   Year           Owner          GPL
                                                            compatible?
------         ------         ------         ------         ------
0.9.0 thru     n/a            1991-1995      CWI            yes
1.2                                                         
1.3 thru       1.2            1995-1999      CNRI           yes
1.5.2                                                       
1.6            1.5.2          2000           CNRI           no
2.0            1.6            2000           BeOpen.com     no
1.6.1          1.6            2001           CNRI           no
2.1            2.0+1.6.1      2001           PSF            no
2.0.1          2.0+1.6.1      2001           PSF            yes
2.1.1          2.1+2.0.1      2001           PSF            yes
2.2            2.1.1          2001           PSF            yes
2.1.2          2.1.1          2002           PSF            yes
2.1.3          2.1.2          2002           PSF            yes
2.2.1          2.2            2002           PSF            yes
2.2.2          2.2.1          2002           PSF            yes
2.2.3          2.2.2          2002-2003      PSF            yes
2.3            2.2.2          2002-2003      PSF            yes
2.3.1          2.3            2002-2003      PSF            yes
2.3.3          2.3.2          2004           PSF            yes
2.3.4          2.3.3          2004           PSF            yes
2.3.5          2.3.4          2005           PSF            yes

_Note:_ GPL-compatible doesn't mean that we're distributing Python
under the GPL.  All Python licenses, unlike the GPL, let you distribute
a modified version without making your changes open source. The
GPL-compatible licenses make it possible to combine Python with other
software that is released under the GPL; the others don't.

Thanks to the many outside volunteers who have worked under Guido's
direction to make these releases possible.


File: python-ref-jp.info,  Node: Terms and conditions for accessing or otherwise using Python,  Prev: History of the software,  Up: 歴史とライセンス

Terms and conditions for accessing or otherwise using Python
============================================================

               *PSF LICENSE AGREEMENT FOR PYTHON 2.3.5*
  1. This LICENSE AGREEMENT is between the Python Software Foundation
     ("PSF"), and the Individual or Organization ("Licensee") accessing
     and otherwise using Python 2.3.5 software in source or binary form
     and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, PSF
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 2.3.5 alone or in any derivative version, provided,
     however, that PSF's License Agreement and PSF's notice of
     copyright, i.e., "Copyright (C) 2001-2003 Python Software
     Foundation; All Rights Reserved" are retained in Python 2.3.5
     alone or in any derivative version prepared by Licensee.

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 2.3.5 or any part thereof, and wants to
     make the derivative work available to others as provided herein,
     then Licensee hereby agrees to include in any such work a brief
     summary of the changes made to Python 2.3.5.

  4. PSF is making Python 2.3.5 available to Licensee on an "AS IS"
     basis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.3.5
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     2.3.5 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING
     PYTHON 2.3.5, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  7. Nothing in this License Agreement shall be deemed to create any
     relationship of agency, partnership, or joint venture between PSF
     and Licensee.  This License Agreement does not grant permission to
     use PSF trademarks or trade name in a trademark sense to endorse
     or promote products or services of Licensee, or any third party.

  8. By copying, installing or otherwise using Python 2.3.5, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

             *BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0*
         *BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1*
  1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an
     office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the
     Individual or Organization ("Licensee") accessing and otherwise
     using this software in source or binary form and its associated
     documentation ("the Software").

  2. Subject to the terms and conditions of this BeOpen Python License
     Agreement, BeOpen hereby grants Licensee a non-exclusive,
     royalty-free, world-wide license to reproduce, analyze, test,
     perform and/or display publicly, prepare derivative works,
     distribute, and otherwise use the Software alone or in any
     derivative version, provided, however, that the BeOpen Python
     License is retained in the Software, alone or in any derivative
     version prepared by Licensee.

  3. BeOpen is making the Software available to Licensee on an "AS IS"
     basis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO
     AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE
     SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE,
     OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY
     THEREOF.

  5. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  6. This License Agreement shall be governed by and interpreted in all
     respects by the law of the State of California, excluding conflict
     of law provisions.  Nothing in this License Agreement shall be
     deemed to create any relationship of agency, partnership, or joint
     venture between BeOpen and Licensee.  This License Agreement does
     not grant permission to use BeOpen trademarks or trade names in a
     trademark sense to endorse or promote products or services of
     Licensee, or any third party.  As an exception, the "BeOpen
     Python" logos available at http://www.pythonlabs.com/logos.html
     may be used according to the permissions granted on that web page.

  7. By copying, installing or otherwise using the software, Licensee
     agrees to be bound by the terms and conditions of this License
     Agreement.

               *CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1*
  1. This LICENSE AGREEMENT is between the Corporation for National
     Research Initiatives, having an office at 1895 Preston White Drive,
     Reston, VA 20191 ("CNRI"), and the Individual or Organization
     ("Licensee") accessing and otherwise using Python 1.6.1 software in
     source or binary form and its associated documentation.

  2. Subject to the terms and conditions of this License Agreement, CNRI
     hereby grants Licensee a nonexclusive, royalty-free, world-wide
     license to reproduce, analyze, test, perform and/or display
     publicly, prepare derivative works, distribute, and otherwise use
     Python 1.6.1 alone or in any derivative version, provided,
     however, that CNRI's License Agreement and CNRI's notice of
     copyright, i.e., "Copyright (C) 1995-2001 Corporation for National
     Research Initiatives; All Rights Reserved" are retained in Python
     1.6.1 alone or in any derivative version prepared by Licensee.
     Alternately, in lieu of CNRI's License Agreement, Licensee may
     substitute the following text (omitting the quotes): "Python 1.6.1
     is made available subject to the terms and conditions in CNRI's
     License Agreement.  This Agreement together with Python 1.6.1 may
     be located on the Internet using the following unique, persistent
     identifier (known as a handle): 1895.22/1013.  This Agreement may
     also be obtained from a proxy server on the Internet using the
     following URL: <http://hdl.handle.net/1895.22/1013>."

  3. In the event Licensee prepares a derivative work that is based on
     or incorporates Python 1.6.1 or any part thereof, and wants to make
     the derivative work available to others as provided herein, then
     Licensee hereby agrees to include in any such work a brief summary
     of the changes made to Python 1.6.1.

  4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS"
     basis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
     IMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND
     DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR
     FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1
     WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

  5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
     1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR
     LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING
     PYTHON 1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE
     POSSIBILITY THEREOF.

  6. This License Agreement will automatically terminate upon a material
     breach of its terms and conditions.

  7. This License Agreement shall be governed by the federal
     intellectual property law of the United States, including without
     limitation the federal copyright law, and, to the extent such U.S.
     federal law does not apply, by the law of the Commonwealth of
     Virginia, excluding Virginia's conflict of law provisions.
     Notwithstanding the foregoing, with regard to derivative works
     based on Python 1.6.1 that incorporate non-separable material that
     was previously distributed under the GNU General Public License
     (GPL), the law of the Commonwealth of Virginia shall govern this
     License Agreement only as to issues arising under or with respect
     to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
     this License Agreement shall be deemed to create any relationship
     of agency, partnership, or joint venture between CNRI and
     Licensee.  This License Agreement does not grant permission to use
     CNRI trademarks or trade name in a trademark sense to endorse or
     promote products or services of Licensee, or any third party.

  8. By clicking on the "ACCEPT" button where indicated, or by copying,
     installing or otherwise using Python 1.6.1, Licensee agrees to be
     bound by the terms and conditions of this License Agreement.

                                ACCEPT
          *CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2*
 Copyright
(C) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands.  All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python-ref-jp.info,  Node: 日本語訳について,  Next: Module Index,  Prev: 歴史とライセンス,  Up: Top

日本語訳について
****************

* Menu:

* このドキュメントについて::
* 翻訳者一覧 敬称略::


File: python-ref-jp.info,  Node: このドキュメントについて,  Next: 翻訳者一覧 敬称略,  Prev: 日本語訳について,  Up: 日本語訳について

このドキュメントについて
========================

この文書は、Pythonドキュメント翻訳プロジェクトによる Python Language
Reference の日本語訳版です。日本語訳に対する質問や提案などが
ありましたら、Pythonドキュメント翻訳プロジェクトのメーリングリスト

<http://www.python.jp/mailman/listinfo/python-doc-jp>

または、プロジェクトのバグ管理ページ

<http://sourceforge.jp/tracker/?atid=116&group_id=11&func=browse>

までご報告ください。


File: python-ref-jp.info,  Node: 翻訳者一覧 敬称略,  Prev: このドキュメントについて,  Up: 日本語訳について

翻訳者一覧 (敬称略)
===================

2.3.2 和訳 Yasushi Masuda <y.masuda at acm.org> (February 3, 2004)\
2.3.3 差分 Yasushi Masuda (May 31, 2004) \ 2.3.4 差分 Yasushi Masuda
(September 20, 2004) \ 2.3.5 差分 Yasushi Masuda (April 20, 2005)


File: python-ref-jp.info,  Node: Module Index,  Next: Class-Exception-Object Index,  Prev: 日本語訳について,  Up: Top

Module Index
************

* Menu:

* __abs__:                               数値型をエミュレーションする.
* __and__:                               数値型をエミュレーションする.
* __builtin__ <1>:                       exec 文.
* __builtin__:                           完全な Python プログラム.
* __divmod__:                            数値型をエミュレーションする.
* __eq__:                                基本的なカスタマイズ.
* __float__:                             数値型をエミュレーションする.
* __floordiv__:                          数値型をエミュレーションする.
* __ge__:                                基本的なカスタマイズ.
* __gt__:                                基本的なカスタマイズ.
* __hex__:                               数値型をエミュレーションする.
* __iand__:                              数値型をエミュレーションする.
* __idiv__:                              数値型をエミュレーションする.
* __ifloordiv__:                         数値型をエミュレーションする.
* __ilshift__:                           数値型をエミュレーションする.
* __imod__:                              数値型をエミュレーションする.
* __imul__:                              数値型をエミュレーションする.
* __int__:                               数値型をエミュレーションする.
* __invert__:                            数値型をエミュレーションする.
* __ior__:                               数値型をエミュレーションする.
* __ipow__:                              数値型をエミュレーションする.
* __irshift__:                           数値型をエミュレーションする.
* __isub__:                              数値型をエミュレーションする.
* __itruediv__:                          数値型をエミュレーションする.
* __ixor__:                              数値型をエミュレーションする.
* __le__:                                基本的なカスタマイズ.
* __long__:                              数値型をエミュレーションする.
* __lshift__:                            数値型をエミュレーションする.
* __main__ <1>:                          名前づけと束縛 naming and binding.
* __main__:                              完全な Python プログラム.
* __mod__:                               数値型をエミュレーションする.
* __mul__:                               数値型をエミュレーションする.
* __ne__:                                基本的なカスタマイズ.
* __or__:                                数値型をエミュレーションする.
* __pos__:                               数値型をエミュレーションする.
* __pow__:                               数値型をエミュレーションする.
* __rand__:                              数値型をエミュレーションする.
* __rdiv__:                              数値型をエミュレーションする.
* __rdivmod__:                           数値型をエミュレーションする.
* __rfloordiv__:                         数値型をエミュレーションする.
* __rlshift__:                           数値型をエミュレーションする.
* __rmod__:                              数値型をエミュレーションする.
* __rmul__:                              数値型をエミュレーションする.
* __ror__:                               数値型をエミュレーションする.
* __rpow__:                              数値型をエミュレーションする.
* __rrshift__:                           数値型をエミュレーションする.
* __rshift__:                            数値型をエミュレーションする.
* __rsub__:                              数値型をエミュレーションする.
* __rtruediv__:                          数値型をエミュレーションする.
* __rxor__:                              数値型をエミュレーションする.
* __sub__:                               数値型をエミュレーションする.
* __truediv__:                           数値型をエミュレーションする.
* __xor__:                               数値型をエミュレーションする.
* array:                                 標準型の階層.
* bsddb:                                 標準型の階層.
* dbm:                                   標準型の階層.
* gdbm:                                  標準型の階層.
* sys <1>:                               try 文.
* sys <2>:                               完全な Python プログラム.
* sys <3>:                               import 文.
* sys:                                   print 文.

