This is python-api-jp.info, produced by makeinfo version 4.5 from
python-api-jp.texi.

12 October 2005


File: python-api-jp.info,  Node: 標準例外,  Next: 文字列例外の廃止,  Prev: 例外処理,  Up: 例外処理

標準例外
========

`PyExc_'の後ろにPythonの例外名が続く名前をもつグローバル変数として、
すべての標準Python例外が利用可能です。これらは型`PyObject*'を
持ち、すべてクラスオブジェクトです。完璧を期するために、すべての変数を
以下に列挙します:

C名                      Python名                 注記
------                   -----                    -----
PyExc_Exception          `Exception'              (1)
PyExc_StandardError      `StandardError'          (1)
PyExc_ArithmeticError    `ArithmeticError'        (1)
PyExc_LookupError        `LookupError'            (1)
PyExc_AssertionError     `AssertionError'         
PyExc_AttributeError     `AttributeError'         
PyExc_EOFError           `EOFError'               
PyExc_EnvironmentError   `EnvironmentError'       (1)
PyExc_FloatingPointError `FloatingPointError'     
PyExc_IOError            `IOError'                
PyExc_ImportError        `ImportError'            
PyExc_IndexError         `IndexError'             
PyExc_KeyError           `KeyError'               
PyExc_KeyboardInterrupt  `KeyboardInterrupt'      
PyExc_MemoryError        `MemoryError'            
PyExc_NameError          `NameError'              
PyExc_NotImplementedError`NotImplementedError'    
PyExc_OSError            `OSError'                
PyExc_OverflowError      `OverflowError'          
PyExc_ReferenceError     `ReferenceError'         (2)
PyExc_RuntimeError       `RuntimeError'           
PyExc_SyntaxError        `SyntaxError'            
PyExc_SystemError        `SystemError'            
PyExc_SystemExit         `SystemExit'             
PyExc_TypeError          `TypeError'              
PyExc_ValueError         `ValueError'             
PyExc_WindowsError       `WindowsError'           (3)
PyExc_ZeroDivisionError  `ZeroDivisionError'      

注記:
`(1)'
     これは別の標準例外のためのベースクラスです。

`(2)'
     これは`weakref.ReferenceError'と同じです。

`(3)'
     Windowsでのみ定義されています。
     プリプロセッサマクロ`MS_WINDOWS'が定義されているかテストすることで、
     これを使うコードを保護してください。


File: python-api-jp.info,  Node: 文字列例外の廃止,  Prev: 標準例外,  Up: 例外処理

文字列例外の廃止
================

Pythonへ組み込まれるすべての例外あるいは標準ライブラリに提供されている例外は、
`Exception'から導出されています。

インタプリタで既存のコードが変更なしで動作するように、文字列例外は今でも
サポートされています。しかし、これも将来のリリースで変更されるでしょう。


File: python-api-jp.info,  Node: ユーティリティ関数,  Next: 抽象オブジェクトレイヤ abstract objects layer,  Prev: 例外処理,  Up: Top

ユーティリティ関数
******************

この章の関数は、 C で書かれたコードをプラットフォーム間で可搬性の
あるものにする上で役立つものから、C から Python モジュールを使う
もの、そして関数の引数を解釈したり、 C の値から Python の値を
構築するものまで、様々なユーティリティ的タスクを行います。

* Menu:

* オペレーティングシステム関連のユーティリティ::
* プロセス制御::
* モジュールの import::
* データ整列化 data marshalling のサポート::
* 引数の解釈と値の構築::


File: python-api-jp.info,  Node: オペレーティングシステム関連のユーティリティ,  Next: プロセス制御,  Prev: ユーティリティ関数,  Up: ユーティリティ関数

オペレーティングシステム関連のユーティリティ
============================================

`int Py_FdIsInteractive(FILE *fp, char *filename)'
     FILENAME という名前の標準 I/O ファイル FP が対話的 (interactive)
     であると考えられる場合に真 (非ゼロ) を返します。
     これは`isatty(fileno(FP))' が真になるファイルの場合です。
     グローバルなフラグ `Py_InteractiveFlag' が真の場合には、 FILENAME
     ポインタが `NULL' か、名前が `'<stdin>'' または `'???''
     のいずれかに等しい場合にも真を返します。

`long PyOS_GetLastModificationTime(char *filename)'
     ファイル FILENAME の最終更新時刻を返します。 結果は標準 C
     ライブラリ関数 `time()' が返すタイムスタンプと
     同じ様式で符号化されています。

`void PyOS_AfterFork()'
     プロセスが fork した後の内部状態を更新するための関数です; fork 後
     Python インタプリタを使い続ける場合、新たなプロセス内で
     この関数を呼び出さねばなりません。新たなプロセスに新たな実行
     可能物をロードする場合、この関数を呼び出す必要はありません。

`int PyOS_CheckStack()'
     インタプリタがスタック空間を使い尽くしたときに真を返します。
     このチェック関数には信頼性がありますが、`USE_STACKCHECK'
     が定義されている場合 (現状では Microsoft Visual C++ コンパイラ
     でビルドした Windows 版と Macintosh 版) にしか利用できません .
     `USE_CHECKSTACK' は自動的に定義されます; 自前のコードで
     この定義を変更してはなりません。

`PyOS_sighandler_t PyOS_getsig(int i)'
     シグナル I に対する現在のシグナルハンドラを返します。 この関数は
     `sigaction()' または `signal()' のいずれかに対する薄いラッパです。
     `sigaction()' や `signal()' を直接呼び出しては なりません!
     `PyOS_sighandler_t' は `void (*)(int)' の typedef による別名です。

`PyOS_sighandler_t PyOS_setsig(int i, PyOS_sighandler_t h)'
     シグナル I に対する現在のシグナルハンドラを H に設定 します;
     以前のシグナルハンドラを返します。 この関数は `sigaction()' または
     `signal()' のいずれかに対する薄いラッパです。 `sigaction()' や
     `signal()' を直接呼び出しては なりません!  `PyOS_sighandler_t' は
     `void (*)(int)' の typedef による別名です。


File: python-api-jp.info,  Node: プロセス制御,  Next: モジュールの import,  Prev: オペレーティングシステム関連のユーティリティ,  Up: ユーティリティ関数

プロセス制御
============

`void Py_FatalError(const char *message)'
     致命的エラーメッセージ (fatal error message) を出力してプロセスを
     強制終了 (kill)
     します。後始末処理は行われません。この関数は、Python
     インタプリタを使い続けるのが危険であるような状況が検出されたとき;
     例えば、オブジェクト管理が崩壊していると思われるときにのみ、呼び出され
     るようにしなければなりません。UNIXでは、標準 C ライブラリ関数
     `abort()'  を呼び出して `core' を生成しようと試みます。

`void Py_Exit(int status)'
     現在のプロセスを終了 (exit) します。この関数は `Py_Finalize()'
     を呼び出し、 次いで標準 C ライブラリ関数 `exit(STATUS)'
     を呼び出します。

`int Py_AtExit(void (*func) ())'
     `Py_Finalize()'  から呼び出される 後始末処理を行う関数 (cleanup
     function) を登録します。
     後始末関数は引数無しで呼び出され、値を返しません。 最大で 32 の
     後始末処理関数を登録できます。 登録に成功すると、`Py_AtExit()' は
     `0' を返します; 失敗すると `-1'
     を返します。最後に登録した後始末処理関数から
     先に呼び出されます。各関数は高々一度しか呼び出されません。 Python
     の内部的な終了処理は後始末処理関数より以前に完了している
     ので、FUNC からはいかなる Python API も呼び出してはなりません。


File: python-api-jp.info,  Node: モジュールの import,  Next: データ整列化 data marshalling のサポート,  Prev: プロセス制御,  Up: ユーティリティ関数

モジュールの import
===================

`PyObject* PyImport_ImportModule(char *name)'
     この関数は下で述べる `PyImport_ImportModuleEx()'
     を単純化したインタフェースで、 GLOBALS および LOCALS 引数を
     `NULL'のままにしたものです。 NAME 引数にドットが含まれる場合
     (あるパッケージの サブモジュールを指定している場合)、FROMLIST
     引数が リスト `['*']' に追加され、戻り値がモジュールを含む
     トップレベルパッケージではなく名前つきモジュール (named module) に
     なるようにします。 (残念ながらこのやり方には、NAME
     が実際にはサブモジュールでなく
     サブパッケージを指定している場合、パッケージの `__all__'
     変数に指定されている
     サブモジュールがロードされてしまうという副作用があります。) import
     されたモジュールへの新たな参照を返します。失敗した
     場合には例外をセットし、`NULL' を返します (その場合でも、
     モジュールは生成されている場合があります -- `sys.modules'
     を使って調べてください)。

`PyObject* PyImport_ImportModuleEx(char *name, PyObject *globals, PyObject *locals, PyObject *fromlist)'
     モジュールを import します。モジュールの import については
     組み込みの Python 関数`__import__()'
     を読むとよく分かります。というのも、標準の `__import__()'
     はこの関数を直接呼び出しているからです。

     戻り値は import
     されたモジュールかトップレベルパッケージへの新たな参照
     になります。失敗した場合には例外をセットし、`NULL' を返します
     (その場合でも、モジュールは生成されている場合があります)
     `__import__()' と同じく、パッケージに対してサブモジュール
     を要求した場合の戻り値は通常、空でない FROMLIST を指定しない
     限りトップレベルパッケージになります。

`PyObject* PyImport_Import(PyObject *name)'
     現在の "import フック関数" を呼び出すための高水準のインタフェース
     です。この関数は現在のグローバル変数辞書内の `__builtins__' から
     `__import__()' 関数を呼び出します。
     すなわち、現在の環境にインストールされている import フック、
     例えば `rexec'  や `ihooks'  を使って import を行います。

`PyObject* PyImport_ReloadModule(PyObject *m)'
     モジュールを再ロード (reload)
     します。モジュールの再ロードについては 組み込みの Python
     関数`reload()' を読むとよく分かります。というのも、標準の `reload'
     はこの関数を直接呼び出しているからです。
     戻り値は再ロードしたモジュールかトップレベルパッケージへの新たな参照
     になります。失敗した場合には例外をセットし、`NULL' を返します
     (その場合でも、モジュールは生成されている場合があります)

`PyObject* PyImport_AddModule(char *name)'
     モジュール名に対応するモジュールオブジェクトを返します。 NAME
     引数は `package.module' の形式でもかまいません。
     まずモジュール辞書に該当するモジュールがあるかどうか調べ、
     なければ新たなモジュールを生成してモジュール辞書に挿入します。
     失敗した場合には例外をセットして `NULL' を返します。 _Note:_
     この関数はモジュールの import やロードを行いません;
     モジュールがまだロードされていなければ、空のモジュール
     オブジェクトを得ることになります。 `PyImport_ImportModule()'
     やその別形式を使って モジュールを import
     してください。ドット名表記で 指定したNAME
     が存在しない場合、パッケージ構造は 作成されません。


`PyObject* PyImport_ExecCodeModule(char *name, PyObject *co)'
     モジュール名 (`package.module' 形式でもかまいません) および Python
     のバイトコードファイルや組み込み関数 `compile()'
     で得られたコードオブジェクトを元にモジュールを ロードします。
     モジュールオブジェクトへの新たな参照を返します。失敗した
     場合には例外をセットし、`NULL' を返します (その場合でも、
     モジュールは生成されている場合があります)。 この関数は、すでに
     import されているモジュールの場合には再ロードを 行います。NAME
     が`package.module' 形式のドット名表記で
     あった場合、まだ作成されていないパッケージ構造はその作成されない
     ままになります。

`long PyImport_GetMagicNumber()'
     Python バイトコードファイル (いわゆる `.pyc' および `.pyo'
     ファイル) のマジックナンバを返します。マジックナンバは
     バイトコードファイルの先頭 4 バイトにリトルエンディアン整列で
     配置されています。

`PyObject* PyImport_GetModuleDict()'
     モジュール管理のための辞書 (いわゆる `sys.modules' )を返します。
     この辞書はインタプリタごとに一つだけある変数なので注意してください。

`void _PyImport_Init()'
     import 機構を初期化します。 内部使用だけのための関数です。

`void PyImport_Cleanup()'
     モジュールテーブルを空にします。 内部使用だけのための関数です。

`void _PyImport_Fini()'
     import 機構を終了処理します。 内部使用だけのための関数です。

`PyObject* _PyImport_FindExtension(char *, char *)'
     内部使用だけのための関数です。

`PyObject* _PyImport_FixupExtension(char *, char *)'
     内部使用だけのための関数です。

`int PyImport_ImportFrozenModule(char *name)'
     NAME という名前のフリーズ (freeze) されたモジュールをロード
     します。成功すると `1' を、モジュールが見つからなかった場合には
     `0' を、初期化が失敗した場合には例外をセットして`-1' を
     返します。ロードに成功したモジュールにアクセスするには
     `PyImport_ImportModule()' を使ってください。 (Note
     この関数名はいささか誤称めいています -- この関数は すでに import
     済みのモジュールをリロードしてしまいます。)

`struct _frozen'
     `freeze'  ユーティリティが生成するような
     フリーズ化モジュールデスクリプタの構造体型定義です。 (Python
     ソース配布物の `Tools/freeze/' を参照してください)
     この構造体の定義は `Include/import.h' にあり、以下のように
     なっています:

          struct _frozen {
              char *name;
              unsigned char *code;
              int size;
          };


`struct _frozen* PyImport_FrozenModules'
     このポインタは `struct _frozen' のレコードからなり、
     終端の要素のメンバが `NULL' かゼロになっているような配列
     を指すよう初期化されます。フリーズされたモジュールを import する
     とき、このテーブルを検索します。サードパーティ製のコードから
     このポインタに仕掛けを講じて、動的に生成されたフリーズ化モジュールの
     集合を提供するようにできます。

`int PyImport_AppendInittab(char *name, void (*initfunc)(void))'
     既存の組み込みモジュールテーブルに単一のモジュールを追加します。
     この関数は利便性を目的とした `PyImport_ExtendInittab()'
     のラッパ関数で、テーブルが拡張できないときには `-1' を返します。
     新たなモジュールは NAME で import でき、最初に import を
     試みた際に呼び出される関数として INITFUNC を使います。
     `Py_Initialize()' よりも前に呼び出さねばなりません。

`struct _inittab'
     組み込みモジュールリスト内の一つのエントリを記述している構造体です。
     リスト内の各構造体には、インタプリタ内に組み込まれているモジュールの
     名前と初期化関数が指定されています。 Python
     を埋め込むようなプログラムは、この構造体の配列と
     `PyImport_ExtendInittab()' を組み合わせて、追加の
     組み込みモジュールを提供できます。構造体は`Include/import.h'
     で以下のように定義されています:

          struct _inittab {
              char *name;
              void (*initfunc)(void);
          };


`int PyImport_ExtendInittab(struct _inittab *newtab)'
     組み込みモジュールのテーブルに一群のモジュールを追加します。 配列
     NEWTAB は `name' フィールドが `NULL' になっている センチネル
     (sentinel) エントリで終端されていなければなりません;
     センチネル値を与えられなかった場合にはメモリ違反になるかもしれません。
     成功すると `0' を、内部テーブルを拡張するのに十分なメモリを
     確保できなかった場合には `-1' を返します。操作が失敗した場合、
     モジュールは一切内部テーブルに追加されません。 `Py_Initialize()'
     よりも前に呼び出さねばなりません。


File: python-api-jp.info,  Node: データ整列化 data marshalling のサポート,  Next: 引数の解釈と値の構築,  Prev: モジュールの import,  Up: ユーティリティ関数

データ整列化 (data marshalling) のサポート
==========================================

以下のルーチン群は、`marshal' モジュールと同じ形式を使った
整列化オブジェクトを C コードから使えるようにします。
整列化形式でデータを書き出す関数に加えて、データを読み戻す関数
もあります。整列化されたデータを記録するファイルはバイナリモードで
開かれていなければなりません。

数値は最小桁が先にくるように記録されます。

`void PyMarshal_WriteLongToFile(long value, FILE *file)'
     `long' 型の整数値 VALUE を FILE へ整列化します。 この関数は VALUE
     の下桁 32 ビットを書き込むだけです; ネイティブの `long'
     型サイズには関知しません。

`void PyMarshal_WriteObjectToFile(PyObject *value, FILE *file)'
     Python オブジェクトVALUE を FILE へ整列化します。

`PyObject* PyMarshal_WriteObjectToString(PyObject *value)'
     VALUE の整列化表現が入った文字列オブジェクトを返します。

以下の関数を使うと、整列化された値を読み戻せます。

`long PyMarshal_ReadLongFromFile(FILE *file)'
     読み出し用に開かれた `FILE*' 内のデータストリームから、 C の
     `long' 型データを読み出して返します。 この関数は、ネイティブの
     `long' のサイズに関係なく、 32 ビットの値だけを読み出せます。

`int PyMarshal_ReadShortFromFile(FILE *file)'
     読み出し用に開かれた `FILE*' 内のデータストリームから、 C の
     `short' 型データを読み出して返します。 この関数は、ネイティブの
     `short' のサイズに関係なく、 16 ビットの値だけを読み出せます。

`PyObject* PyMarshal_ReadObjectFromFile(FILE *file)'
     読み出し用に開かれた `FILE*' 内のデータストリームから、 Python
     オブジェクトを読み出して返します。 エラーが生じた場合、適切な例外
     (`EOFError' または `TypeError') を送出して `NULL'を返します。

`PyObject* PyMarshal_ReadLastObjectFromFile(FILE *file)'
     読み出し用に開かれた `FILE*' 内のデータストリームから、 Python
     オブジェクトを読み出して返します。
     `PyMarshal_ReadObjectFromFile()' と違い、この関数は
     ファイル中に後続のオブジェクトが存在しないと仮定し、ファイルから
     メモリ上にファイルデータを一気にメモリにロードして、逆整列化機構が
     ファイルから一バイトづつ読み出す代わりにメモリ上のデータを操作
     できるようにします。対象のファイルから他に何も読み出さないと
     分かっている場合にのみ、この関数を使ってください。
     エラーが生じた場合、適切な例外 (`EOFError' または `TypeError')
     を送出して `NULL'を返します。

`PyObject* PyMarshal_ReadObjectFromString(char *string, int len)'
     STRING が指しているLEN バイトの文字列バッファに納められた
     データストリームから Python オブジェクトを読み出して返します。
     エラーが生じた場合、適切な例外 (`EOFError' または `TypeError')
     を送出して `NULL'を返します。


File: python-api-jp.info,  Node: 引数の解釈と値の構築,  Prev: データ整列化 data marshalling のサポート,  Up: ユーティリティ関数

引数の解釈と値の構築
====================

これらの関数は独自の拡張モジュール用の関数やメソッドを作成する際に
便利です。詳しい情報や用例は  に あります。

最初に説明する 3 つの関数、 `PyArg_ParseTuple()'、
`PyArg_ParseTupleAndKeywords()'、および `PyArg_Parse()' はいずれも
_書式化文字列 (format string)_ を使います。
書式化文字列は、関数が受け取るはずの引数に関する情報を伝えるのに
用いられます。いずれの関数における書式化文字列も、同じ書式を
使っています。

書式化文字列は、ゼロ個またはそれ以上の "書式化単位 (format unit)"
から成り立ちます。一つの書式化単位は一つの Python オブジェクトを
表します; 通常は単一の文字か、書式化単位からなる文字列を括弧で
囲ったものになります。例外として、括弧で囲われていない
書式化単位文字列が単一のアドレス引数に対応する場合がいくつかあります。
以下の説明では、引用符のついた形式は書式化単位です;
(丸)括弧で囲った部分は書式化単位に対応する Python のオブジェクト型
です; [角] 括弧は値をアドレス渡しする際に使う C の変数型です。

``s' (文字列型または Unicode オブジェクト型) {[char * }]'
     Python の文字列または Unicode オブジェクトを、キャラクタ文字列を
     指す C のポインタに変換します。
     変換先の文字列自体の記憶領域を提供する必要はありません;
     キャラクタ型ポインタ変数のアドレスを渡すと、すでに存在している
     文字列へのポインタをその変数に記録します。C 文字列は NUL で
     終端されています。Python の文字列型は、NUL
     バイトが途中に埋め込まれて いてはなりません;
     もし埋め込まれていれば`TypeError' 例外を 送出します。Unicode
     オブジェクトはデフォルトエンコーディングを使って C
     文字列に変換されます。変換に失敗すると `UnicodeError' を
     送出します。

``s#' (文字列型、Unicode オブジェクト型または任意の読み出しバッファ互換型)'
     {[char *, int }] これは `s'
     の変化形で、値を二つの変数に記録します。一つ目の変数は
     キャラクタ文字列へのポインタで、二つ目はその長さです。
     この書式化単位の場合には、Python 文字列に null バイトが埋め込まれて
     いてもかまいません。 Unicode オブジェクトの場合、デフォルト
     エンコーディングでの変換が可能ならば、変換したオブジェクトから文字列
     へのポインタを返します。その他の読み出しバッファ互換オブジェクトは
     生の内部データ表現への参照を返します。

``z' (文字列型または `None') {[char * }]'
     `s' に似ていますが、Python オブジェクトは `None' でも
     よく、その場合には C のポインタは `NULL'にセットされます。

``z#' (文字列型、`None'、または任意の読み出しバッファ互換型) {[char *, int }]'
     `s#' の `s' を `z' にしたような意味です。

``u' (Unicode オブジェクト型) {[Py_UNICODE * }]'
     Python の Unicode オブジェクトを、NUL で終端された 16 ビットの
     Unicode (UTF-16) データに変換します。`s' と同様に、 Unicode
     データバッファ用に記憶領域を提供する必要はありません; `Py_UNICODE'
     型ポインタ変数のアドレスを渡すと、すでに存在している Unicode
     データへのポインタをその変数に記録します。

``u#' (Unicode オブジェクト型) {[Py_UNICODE *, int }]'
     これは `u' の変化形で、値を二つの変数に記録します。一つ目の変数は
     Unicode データバッファへのポインタで、二つ目はその長さです。 非
     Unicode のオブジェクトの場合、読み出しバッファのポインタを
     `Py_UNICODE' 型配列へのポインタと解釈して扱います。

``es' (文字列型、Unicode オブジェクト型または任意の読み出しバッファ互換型){[const char *encoding, char **buffer }]'
     これは `s' の変化形で、Unicode オブジェクトや Unicode に
     変換可能なオブジェクトをキャラクタ型バッファにエンコードするために
     用いられます。NUL
     バイトが埋め込まれていない文字列でのみ動作します。

     この書式化単位には二つの引数が必要です。一つ目は入力にのみ用いられ、
     NUL で終端されたエンコード名文字列を指す `char*' 型で
     なければなりません。指定したエンコード名を Python が理解できない
     場合には例外を送出します。第二の引数は `char**' でなければ
     なりません; この引数が参照しているポインタの値は、引数に指定した
     テキストの内容が入ったバッファへのポインタになります。
     テキストは最初の引数に指定したエンコード方式でエンコードされます。

     `PyArg_ParseTuple()' を使うと、必要なサイズのバッファを
     確保し、そのバッファにエンコード後のデータをコピーして、 *BUFFER
     がこの新たに確保された記憶領域を指すように変更します。
     呼び出し側には、確保されたバッファを使い終わった後に
     `PyMem_Free()' で解放する責任があります。

``et' (文字列型、Unicode オブジェクト型または文字列バッファ互換型) {[const char *encoding, char **buffer }]'
     `es' と同じです。ただし、8 ビット幅の文字列オブジェクトを
     エンコードし直さずに渡します。その代わり、実装では文字列オブジェクトが
     パラメタに渡したエンコードを使っているものと仮定します。

``es#' (文字列型、Unicode オブジェクト型または文字列バッファ互換型) {[const char *encoding, char **buffer, int *buffer_length }]'
     `s#' の変化形で、Unicode オブジェクトや Unicode に
     変換可能なオブジェクトをキャラクタ型バッファにエンコードするために
     用いられます。`es'
     書式化単位と違って、この変化形はバイトが埋め込まれて
     いてもかまいません。

     この書式化単位には三つの引数が必要です。一つ目は入力にのみ用いられ、
     NUL で終端されたエンコード名文字列を指す `char*' 型か
     `NULL'でなければなりません。`NULL'の場合にはデフォルトエンコーディング
     を使います。指定したエンコード名を Python が理解できない
     場合には例外を送出します。第二の引数は `char**' でなければ
     なりません; この引数が参照しているポインタの値は、引数に指定した
     テキストの内容が入ったバッファへのポインタになります。
     テキストは最初の引数に指定したエンコード方式でエンコードされます。
     第三の引数は整数へのポインタでなければなりません; ポインタが参照
     している整数の値は出力バッファ内のバイト数にセットされます。

     この書式化単位の処理には二つのモードがあります:

     *BUFFER が`NULL' ポインタを指している場合、関数は
     必要なサイズのバッファを確保し、そのバッファにエンコード後の
     データをコピーして、*BUFFER がこの新たに確保された
     記憶領域を指すように変更します。
     呼び出し側には、確保されたバッファを使い終わった後に
     `PyMem_Free()' で解放する責任があります。

     *BUFFER が非 `NULL' のポインタ (すでにメモリ確保済みの バッファ)
     を指している場合、`PyArg_ParseTuple()'
     はこのメモリ位置をバッファとして用い、*BUFFER_LENGTH
     の初期値をバッファサイズとして用います。`PyArg_ParseTuple()'
     は次にエンコード済みのデータをバッファにコピーして、NUL で終端
     します。バッファの大きさが足りなければ `ValueError'
     がセットされます。

     どちらの場合も、 *BUFFER_LENGTH は終端の NUL バイトを
     含まないエンコード済みデータの長さにセットされます。

``et#' (文字列型、Unicode オブジェクト型または文字列バッファ互換型) {[const char *encoding, char **buffer }]'
     `es#' と同じです。ただし、文字列オブジェクトを
     エンコードし直さずに渡します。その代わり、実装では文字列オブジェクトが
     パラメタに渡したエンコードを使っているものと仮定します。

``b' (整数型) {[char }]'
     Python の整数型を、 C の `char' 型の小さな整数に変換します。

``B' (整数型) {[unsigned char }]'
     Python の整数型を、オーバフローチェックを行わずに、 C の `unsigned
     char' 型の小さな整数に変換します。_Added in Python version 2.3_

``h' (整数型) {[short int }]'
     Python の整数型を、 C の `short int' 型に変換します。

``H' (整数型) {[unsigned short int }]'
     Python の整数型を、オーバフローチェックを行わずに、 C の `unsigned
     short int' 型に変換します。_Added in Python version 2.3_

``i' (整数型) {[int }]'
     Python の整数型を、 C の `int' 型に変換します。

``I' (整数型) {[unsigned int }]'
     Python の整数型を、オーバフローチェックを行わずに、 C の `unsigned
     int' 型に変換します。_Added in Python version 2.3_

``l' (整数型) {[long int }]'
     Python の整数型を、 C の `long int' 型に変換します。

``k' (整数型) {[unsigned long }]'
     Python の整数型を、オーバフローチェックを行わずに、 C の `unsigned
     long int' 型に変換します。_Added in Python version 2.3_

``L' (整数型) {[PY_LONG_LONG }]'
     Python の整数型を、 C の `long long' 型に変換します。
     この書式化単位は、`long long' 型 (または Windows の `_int64' 型)
     がサポートされているプラットフォームでのみ 利用できます。 Convert
     a Python integer to a C `long long'.  This format is only
     available on platforms that support `long long' (or `_int64' on
     Windows).

``K' (整数型) {[unsigned PY_LONG_LONG }]'
     Python の整数型を、オーバフローチェックを行わずに、 C の `unsigned
     long long' 型に変換します。 この書式化単位は、`unsigned long long'
     型 (または Windows の `unsigned _int64' 型)
     がサポートされているプラットフォームでのみ 利用できます。_Added in
     Python version 2.3_

``c' (長さ 1 の文字列型) {[char }]'
     長さ 1 の文字列として表現されている Python キャラクタを C の
     `char' 型に変換します。

``f' (浮動小数点型) {[float }]'
     Python の浮動小数点型を、 C の `float' 型に変換します。

``d' (浮動小数点型) {[double }]'
     Python の浮動小数点型を、 C の `double' 型に変換します。

``D' (複素数型) {[Py_complex }]'
     Python の複素数型を、 C の `Py_complex' 構造体に変換します。

``O' (オブジェクト) {[PyObject * }]'
     Python オブジェクトを (一切変換を行わずに) C の Python
     オブジェクト型 ポインタに保存します。これにより、C
     プログラムは実際のオブジェクトを
     受け渡しされます。オブジェクトの参照カウントは増加しません。
     保存されるポインタが `NULL'になることはありません。

``O!' (オブジェクト) {[TYPEOBJECT, PyObject * }]'
     Python オブジェクトを C の Python
     オブジェクト型ポインタに保存します。 `O' に似ていますが、二つの C
     の引数をとります: 一つ目の引数は Python
     の型オブジェクトへのアドレスで、二つ目の引数は
     オブジェクトへのポインタが保存されている (`PyObject*' の) C の
     変数へのアドレスです。Python オブジェクトが指定した型ではない場合、
     `TypeError' を送出します。

``O&' (オブジェクト) {[CONVERTER, ANYTHING }]'
     Python オブジェクトを CONVERTER 関数を介して C の変数に変換します。
     二つの引数をとります: 一つ目は関数で、二つ目は (任意の型の) C 変数
     へのアドレスを`void *' 型に変換したものです。 CONVERTER
     は以下のようにして呼び出されます:

     STATUS` = 'CONVERTER`('OBJECT, ADDRESS`);'

     ここで OBJECT は変換対象の Python オブジェクトで、 ADDRESS は
     `PyArg_Parse*()' に渡した `void*' 型の引数です。戻り値 STATUS
     は変換に成功した際に `1'、 失敗した場合には `0'
     になります。変換に失敗した場合、 CONVERTER
     関数は例外を送出しなくてはなりません。

``S' (文字列型) {[PyStringObject * }]'
     `O' に似ていますが、Python オブジェクトは文字列オブジェクトで
     なければなりません。
     オブジェクトが文字列オブジェクトでない場合には`TypeError'
     を送出します。 C 変数は `PyObject*'
     で宣言しておいてもかまいません。

``U' (Unicode 文字列型) {[PyUnicodeObject * }]'
     `O' に似ていますが、Python オブジェクトは Unicode オブジェクトで
     なければなりません。 オブジェクトが Unicode
     オブジェクトでない場合には`TypeError' を送出します。 C 変数は
     `PyObject*' で宣言しておいてもかまいません。

``t#' (読み出し専用キャラクタバッファ) {[char *, int }]'
     `s#' に似ていますが、読み出し専用バッファインタフェースを
     実装している任意のオブジェクトを受理します。 `char*'
     変数はバッファの最初のバイトを指すようにセットされ、 `int'
     はバッファの長さにセットされます。
     単一セグメントからなるバッファオブジェクトだけを受理します;
     それ以外の場合には `TypeError' を送出します。

``w' (読み書き可能なキャラクタバッファ) {[char * }]'
     `s' と同様ですが、読み書き可能なバッファインタフェースを
     実装している任意のオブジェクトを受理します。
     呼び出し側は何らかの別の手段でバッファの長さを決定するか、
     あるいは`w#' を使わねばなりません。
     単一セグメントからなるバッファオブジェクトだけを受理します;
     それ以外の場合には `TypeError' を送出します。

``w#' (読み書き可能なキャラクタバッファ) {[char *, int }]'
     `s#' に似ていますが、読み書き可能なバッファインタフェースを
     実装している任意のオブジェクトを受理します。 `char*'
     変数はバッファの最初のバイトを指すようにセットされ、 `int'
     はバッファの長さにセットされます。
     単一セグメントからなるバッファオブジェクトだけを受理します;
     それ以外の場合には `TypeError' を送出します。

``(ITEMS)' (タプル) {[MATCHING-ITEMS }]'
     オブジェクトはITEMS に入っている書式化単位の数だけの長さを持つ
     Python の配列型でなくてはなりません。各 C 引数は ITEMS 内の
     個々の書式化単位に対応づけできねばなりません。
     配列の書式化単位は入れ子構造にできます。

     _Note:_ Python のバージョン 1.5.2
     より以前は、この書式化指定文字列は
     パラメタ列ではなく、個別のパラメタが入ったタプルでなければなりません
     でした。このため、以前は `TypeError' を引き起こしていたよう
     なコードが現在は例外を出さずに処理されるかもしれません。
     とはいえ、既存のコードにとってこれは問題ないと思われます。

Python 整数型を要求している場所に Python 長整数型を渡すのは 可能です;
しかしながら、適切な値域チェックはまったく行われません --
値を受け取るためのフィールドが、値全てを受け取るには小さすぎる
場合、上桁のビット群は暗黙のうちに切り詰められます (実際のところ、
このセマンティクスは C のダウンキャスト (downcast) から継承して います
-- その恩恵は人それぞれかもしれませんが)。

その他、書式化文字列において意味を持つ文字がいくつかあります。
それらの文字は括弧による入れ子内には使えません。以下に文字を 示します:

``|''
     Python 引数リスト中で、この文字以降の引数がオプションであることを
     示します。 オプションの引数に対応する C
     の変数はデフォルトの値で初期化して おかねばなりません --
     オプションの引数が省略された場合、 `PyArg_ParseTuple()' は対応する
     C 変数の内容に 手を加えません。

``:''
     この文字があると、書式化単位の記述はそこで終わります;
     コロン以降の文字列は、エラーメッセージにおける関数名
     (`PyArg_ParseTuple()' が送出する例外の "付属値 (associated
     value)") として使われます。

``;''
     この文字があると、書式化単位の記述はそこで終わります;
     セミコロン以降の文字列は、デフォルトエラーメッセージを
     _置き換える_ エラーメッセージとして使われます。
     言うまでもなく、`:' と `;' は相互に排他の文字です。

呼び出し側に提供される Python オブジェクトの参照は全て _借りた
(borrowed)_ ものです; オブジェクトの参照カウントを
デクリメントしてはなりません!

以下の関数に渡す補助引数 (additional argument) は、書式化文字列から
決定される型へのアドレスでなければなりません; 補助引数に指定した
アドレスは、タプルから入力された値を保存するために使います。
上の書式化単位のリストで説明したように、補助引数を入力値として
使う場合がいくつかあります; その場合、対応する書式化単位
の指定する形式に従うようにせねばなりません。

変換を正しく行うためには、ARG オブジェクトは
書式化文字に一致しなければならず、かつ書式化文字列内の
書式化単位に全て値が入るようにせねばなりません。
成功すると、`PyArg_Parse*()' 関数は真を返します。
それ以外の場合には偽を返し、適切な例外を送出します。

`int PyArg_ParseTuple(PyObject *args, char *format, ...)'
     固定引数のみを引数にとる関数のパラメタを解釈して、ローカルな
     変数に変換します。
     成功すると真を返します;失敗すると偽を返し、適切な例外を送出します。

`int PyArg_ParseTupleAndKeywords(PyObject *args, PyObject *kw, char *format, char *keywords[], ...)'
     固定引数およびキーワード引数をとる関数のパラメタを解釈して、ローカルな
     変数に変換します。
     成功すると真を返します;失敗すると偽を返し、適切な例外を送出します。

`int PyArg_Parse(PyObject *args, char *format, ...)'
     "旧形式" の関数における引数リストを分析するために使われる 関数です
     -- 旧形式の関数は、引数解釈手法に `METH_OLDARGS' を使います。
     新たに書かれるコードでのパラメタ解釈にはこの関数の使用は奨められず、
     標準のインタプリタにおけるほとんどのコードがもはや引数解釈の
     ためにこの関数を使わないように変更済みです。
     この関数を残しているのは、この関数が依然として引数以外のタプルを
     分析する上で便利だからですが、この目的においては将来も使われ
     つづけるかもしれません。

`int PyArg_UnpackTuple(PyObject *args, char *name, int min, int max, ...)'
     パラメータ取得を簡単にした形式で、引数の型を指定する書式化文字列を
     使いません。
     パラメタの取得にこの手法を使う関数は、関数宣言テーブル、またはメソッド
     宣言テーブル内で`METH_VARARGS' として宣言しなくては なりません。
     実引数の入ったタプルは ARGS に渡します;
     このタプルは本当のタプルでなくてはなりません。
     タプルの長さは少なくとも MIN で、MAX を超えてはなりません; MIN と
     MAX が等しくてもかまいません。
     補助引数を関数に渡さなくてはならず、各補助引数は`PyObject*'
     変数へのポインタでなくてはなりません; これらの補助引数には、 ARGS
     の値が入ります; 値の参照は借りた参照です。
     オプションのパラメタに対応する変数のうち、ARGS に指定していない
     ものには値が入りません; 呼び出し側はそれらの値を初期化しておかねば
     なりません。 この関数は成功すると真を返し、ARGS
     がタプルでない場合や
     間違った数の要素が入っている場合に偽を返します; 何らかの失敗が
     起きた場合には例外をセットします。

     この関数の使用例を以下に示します。この例は、弱参照のための
     `_weakref' 補助モジュールのソースコードからとったものです:

          static PyObject *
          weakref_ref(PyObject *self, PyObject *args)
          {
              PyObject *object;
              PyObject *callback = NULL;
              PyObject *result = NULL;
          
              if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
                  result = PyWeakref_NewRef(object, callback);
              }
              return result;
          }

     この例における`PyArg_UnpackTuple()' 呼び出しは、
     `PyArg_ParseTuple()' を使った以下の呼び出し:

          PyArg_ParseTuple(args, "O|O:ref", &object, &callback)

     と全く等価です。

     _Added in Python version 2.2_

`PyObject* Py_BuildValue(char *format, ...)'
     `PyArg_Parse*()' ファミリの関数が受け取るのと似た
     形式の書式化文字列および値列に基づいて、新たな値を生成します。
     生成した値を返します。エラーの場合には`NULL' を返します; `NULL'
     を返す場合、例外を送出するでしょう。

     `Py_BuildValue()' は常にタプルを生成するとは限りません。
     この関数がタプルを生成するのは、書式化文字列に二つ以上の書式化単位
     が入っているときだけです。書式化文字列が空の場合、`None'
     を返します; 書式化単位が厳密に一つだけ入っている場合、
     書式化単位で指定されている何らかのオブジェクト単体を返します。
     サイズがゼロや 1 のタプルを返すように強制するには、
     丸括弧で囲われた書式化文字列を使います。

     書式化単位 `s' や `s#' の場合のように、オブジェクトを
     構築する際にデータを供給するためにメモリバッファをパラメタとして渡す
     場合には、指定したデータはコピーされます。`Py_BuildValue()'
     が生成したオブジェクトは、呼び出し側が提供したバッファを決して参照
     しません。 別の言い方をすれば、`malloc()'
     を呼び出してメモリを確保し、 それを `Py_BuildValue()'
     に渡した場合、コード内で `Py_BuildValue()' が返った後で`free()' を
     呼び出す責任があるということです。

     以下の説明では、引用符のついた形式は書式化単位です;
     (丸)括弧で囲った部分は書式化単位が返す Python のオブジェクト型
     です; [角] 括弧は関数に渡す値の C 変数型です。

     書式化文字列内では、(`s#' のような書式化単位を除いて) スペース、
     タブ、コロンおよびコンマは無視されます。
     これらの文字を使うと、長い書式化文字列をちょっとだけ読みやすく
     できます。

    ``s' (文字列型) {[char * }]'
          null 終端された C 文字列から Python オブジェクトに変換します。
          C 文字列ポインタが `NULL'の場合、 `None' になります。

    ``s#' (文字列型) {[char *, int }]'
          C 文字列とその長さから Python オブジェクトに変換します。 C
          文字列ポインタが `NULL'の場合、長さは無視され `None'
          になります。

    ``z' (string or `None') {[char * }]'
          `s' と同じです。

    ``z#' (string or `None') {[char *, int }]'
          `s#' と同じです。

    ``u' (Unicode string) {[Py_UNICODE * }]'
          null 終端された Unicode (UCS-2) データのバッファから Python
          オブジェクトに変換します。 Unicode バッファポインタが
          `NULL'の場合、 `None' になります。

    ``u#' (Unicode string) {[Py_UNICODE *, int }]'
          null 終端された Unicode (UCS-2)
          データのバッファとその長さから Python
          オブジェクトに変換します。 Unicode バッファポインタが
          `NULL'の場合、長さは無視され `None' になります。

    ``i' (整数型) {[int }]'
          通常の C の `int' を Python の整数オブジェクトに変換します。

    ``b' (整数型) {[char }]'
          `i' と同じです。

    ``h' (整数型) {[short int }]'
          `i' と同じです。

    ``l' (整数型) {[long int }]'
          C の `long int' を Python の整数オブジェクトに変換します。

    ``c' (string of length 1) {[char }]'
          文字を表す通常の C の `int' を、長さ 1 の Python の文字列
          オブジェクトに変換します。

    ``d' (浮動小数点型) {[double }]'
          C の `double' を Python の浮動小数点数に変換します。

    ``f' (浮動小数点型) {[float }]'
          `d' と同じです。

    ``D' (複素数型) {[Py_complex * }]'
          C の `Py_complex' 構造体を Python の複素数に変換します。

    ``O' (オブジェクト) {[PyObject * }]'
          Python オブジェクトを手を加えずに渡します
          (ただし、参照カウントは 1
          インクリメントします)。渡したオブジェクトが `NULL' ポインタ
          の場合、この引数を生成するのに使った何らかの呼び出しがエラーに
          なったのが原因であると仮定して、例外をセットします。
          従ってこのとき `Py_BuildValue()' は `NULL' を返しますが
          `Py_BuildValue()' 自体は例外を送出しません。
          例外をまだ送出していなければ`SystemError' をセットします。

    ``S' (オブジェクト) {[PyObject * }]'
          `O' と同じです。

    ``U' (オブジェクト) {[PyObject * }]'
          `O' と同じです。

    ``N' (オブジェクト) {[PyObject * }]'
          `O' と同じです。ただし、オブジェクトの参照カウントを
          インクリメントしません。オブジェクトが引数リスト内のオブジェクト
          コンストラクタ呼び出しによって生成されている場合に便利です。

    ``O&' (オブジェクト) {[CONVERTER, ANYTHING }]'
          ANYTHING を CONVERTER 関数を介して Python オブジェクトに
          変換します。この関数は ANYTHING  (`void *' と互換の型で
          なければなりません) を引数にして呼び出され、"新たな"
          オブジェクト を返すか、失敗した場合には `NULL'
          を返すようにしなければなりません。

    ``(ITEMS)' (タプル型) {[MATCHING-ITEMS }]'
          C の値からなる配列を、同じ要素数を持つ Python
          のタプルに変換します。

    ``[ITEMS ' (リスト型) {[MATCHING-ITEMS]}]'
          C の値からなる配列を、同じ要素数を持つ Python
          のリストに変換します。

    ``{ITEMS}' (辞書型) {[MATCHING-ITEMS }]'
          C の値からなる配列を Python
          の辞書に変換します。一連のペアからなる C
          の値が、それぞれキーおよび値となって辞書に追加されます。


     書式化文字列に関するエラーが生じると、`SystemError' 例外を
     セットして `NULL' を返します。


File: python-api-jp.info,  Node: 抽象オブジェクトレイヤ abstract objects layer,  Next: 具象オブジェクト concrete object レイヤ,  Prev: ユーティリティ関数,  Up: Top

抽象オブジェクトレイヤ (abstract objects layer)
***********************************************

この章で説明する関数は、Python オブジェクトとのやりとりを型や
(数値型全て、配列型全てといった) 大まかなオブジェクト型の種類に
関係なく行います。関数を適用対象でないオブジェクトに対して 使った場合、
Python の例外が送出されることになります。

* Menu:

* オブジェクトプロトコル object protocol::
* 数値型プロトコル number protocol::
* 配列プロトコル sequence protocol::
* マップ型プロトコル mapping protocol::
* イテレータプロトコル iterator protocol::
* バッファプロトコル buffer protocol::

