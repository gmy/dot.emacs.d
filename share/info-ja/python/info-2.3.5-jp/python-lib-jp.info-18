This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: Window オブジェクト,  Next: 定数,  Prev: 関数 2,  Up: curses

Window オブジェクト
-------------------

上記の `initscr()' や `newwin()' が返すウィンドウ
は、以下のメソッドを持ちます:

`addch([y, x,] ch[, attr])'
     _Note:_ ここで _文字_ は Python 文字 (長さ 1 の文字列) C における
     文字 (ASCII コード)
     を意味します。(この注釈は文字について触れている
     ドキュメントではどこでも当てはまります。) 組み込みの `ord()'
     は文字列をコードの集まりにする際に 便利です。

     `(Y, X)' にある文字 CH を属性 ATTR
     で描画します。このときその場所に以前描画された文字は上書きされます。
     標準の設定では、文字の位置および属性はウィンドウオブジェクトにおける
     現在の設定になります。

`addnstr([y, x,] str, n[, attr])'
     文字列 STR から最大で N 文字を `(Y, X)' に属性 ATTR
     で描画します。以前ディスプレイにあった内容はすべて 上書きされます。

`addstr([y, x,] str[, attr])'
     `(Y, X)' に文字列 STR を属性 ATTR で描画
     します。以前ディスプレイにあった内容はすべて上書きされます。

`attroff(attr)'
     現在のウィンドウに書き込まれた全ての内容に対し "バックグラウンド"
     に設定された属性 ATTR を除去します。

`attron(attr)'
     現在のウィンドウに書き込まれた全ての内容に対し "バックグラウンド"
     に属性 ATTR を追加します。

`attrset(attr)'
     "バックグラウンド" の属性セットを ATTR に設定します。 初期値は 0
     (属性なし) です。

`bkgd(ch[, attr])'
     ウィンドウ上の背景プロパティを、 ATTR を属性とする 文字 CH
     に設定します。変更はそのウィンドウ中の全ての文字に
     以下のようにして適用されます:
        * ウィンドウ中の全ての文字の属性が新たな背景属性に変更されます。

        * 以前の背景文字が出現すると、常に新たな背景文字に変更されます。


`bkgdset(ch[, attr])'
     ウィンドウの背景を設定します。ウィンドウの背景は、文字と何らかの
     属性の組み合わせから成り立ちます。背景情報の属性の部分は、
     ウィンドウ上に描画されている空白でない全ての文字と組み合わされ (OR
     され) ます。空白文字には文字部分と属性部分の両方が組み合わされ
     ます。背景は文字のプロパティとなり、スクロールや行／文字の挿入／削除
     操作の際には文字と一緒に移動します。

`border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])'
     ウィンドウの縁に境界線を描画します。各引数には境界の特定部分を表現
     するために使われる文字を指定します; 詳細は以下のテーブルを参照
     してください。文字は整数または 1 文字からなる文字列で指定されます。

     _Note:_ どの引数も、`0' を指定した場合標準設定の文字が
     使われるようになります。キーワード引数は使うことが _できません_。
     標準の設定はテーブル中に示されています:

     引数                   記述                   標準の設定値
     ------                 -----                  -----
     ls                     左側                   `ACS_VLINE'
     rs                     右側                   `ACS_VLINE'
     ts                     上側                   `ACS_HLINE'
     bs                     下側                   `ACS_HLINE'
     tl                     左上の角               `ACS_ULCORNER'
     tr                     右上の角               `ACS_URCORNER'
     bl                     左下の角               `ACS_BLCORNER'
     br                     右下の角               `ACS_BRCORNER'


`box([vertch, horch])'
     `border()' と同様ですが、LS および RS は 共に VERTCH で、TS および
     BS は共に HORCH
     です。この関数では、角に使われる文字は常に標準設定の値です。

`clear()'
     `erase()' に似ていますが、次に `refresh()' が呼び出された
     際に全てのウィンドウを再描画するようにします。

`clearok(yes)'
     YES が 1 ならば、次の `refresh()' はウィンドウを完全に 消去します。

`clrtobot()'
     カーソルの位置からウィンドウの端までを消去します: カーソル以降の
     全ての行が削除されるため、 `clrtoeol()' が実行されたのと
     おなじになります。

`clrtoeol()'
     カーソル位置から行末までを消去します。

`cursyncup()'
     ウィンドウの全ての親ウィンドウについて、現在のカーソル位置
     を反映するよう更新します。

`delch([y, x])'
     `(Y, X)' にある文字を削除します。 Delete any character at `(Y, X)'.

`deleteln()'
     カーソルの下にある行を削除します。後続の行はすべて 1
     行上に移動します。

`derwin([nlines, ncols,] begin_y, begin_x)'
     "derive window (ウィンドウを導出する)" の短縮形です。 `derwin()'
     は `subwin()' と同じですが、 BEGIN_Y および BEGIN+X
     はスクリーン全体の原点ではなく、
     ウィンドウの原点からの相対位置です。導出されたウィンドウオブジェクト
     が返されます。

`echochar(ch[, attr])'
     文字 CH に属性 ATTR を付与し、即座に `refresh()'
     をウィンドウに対して呼び出します。

`enclose(y, x)'
     与えられた文字セル座標をスクリーン原点から相対的なものとし、
     ウィンドウの中に含まれるかを調べて、真または偽を返します。
     スクリーン上のウィンドウの一部がマウスイベントの発生場所を
     含むかどうかを調べる上で便利です。

`erase()'
     ウィンドウをクリアします。

`getbegyx()'
     左上の角の座標をあらわすタプル `(Y, X)' を返します。

`getch([y, x])'
     文字を取得します。返される整数は ASCII の範囲の値となる
     _わけではない_ ので注意してください: ファンクションキー、
     キーパッド上のキー等は 256 よりも大きな数字を返します。無遅延
     (no-delay) モードでは、入力がない場合 -1 が返されます。

`getkey([y, x])'
     文字を取得し、 `getch()' のように整数を返す代わりに
     文字列を返します。ファンクションキー、キーバットキーなどは
     キー名の入った複数バイトからなる文字列を返します。無遅延
     モードでは、入力がない場合例外が送出されます。

`getmaxyx()'
     ウィンドウの高さおよび幅を表すタプル `(Y, X)' を返します。

`getparyx()'
     親ウィンドウ中におけるウィンドウの開始位置を x と y の二つの
     整数で返します。ウィンドウに親ウィンドウがない場合`-1,-1'
     を返します。

`getstr([y, x])'
     原始的な文字編集機能つきで、ユーザの入力文字列を読み取ります。

`getyx()'
     ウィンドウの左上角からの相対で表した現在のカーソル位置をタプル
     `(Y, X)' で返します。

`hline([y, x,] ch, n)'
     `(Y, X)' から始まり、 N の長さを持つ、 文字 CH
     で作られる水平線を表示します。

`idcok(flag)'
     FLAG が偽の場合、curses は端末のハードウェアによる文字挿入／削除
     機能を使おうとしなくなります; FLAG が真ならば、文字挿入／削除
     は有効にされます。curses が最初に初期化された際には文字挿入／削除は
     標準の設定で有効になっています。

`idlok(yes)'
     YES が 1 であれば、`curses' はハードウェアの行編集
     機能を利用しようと試みます。行挿入／削除は無効化されます。

`immedok(flag)'
     FLAG が真ならば、ウィンドウイメージ内における何らかの変更
     があるとウィンドウを更新するようになります; すなわち、`refresh()'
     を自分で呼ばなくても良くなります。とはいえ、wrefresh を繰り返し
     呼び出すことになるため、この操作はかなりパフォーマンスを低下させます。
     標準の設定では無効になっています。

`inch([y, x])'
     ウィンドウの指定の位置の文字を返します。下位 8
     ビットが常に文字となり、 それより上のビットは属性を表します。

`insch([y, x,] ch[, attr])'
     `(Y, X)' に文字 CH を属性 ATTR で描画し、 行の X からの内容を 1
     文字分右にずらします。

`insdelln(nlines)'
     NLINES 行を指定されたウィンドウの現在の行の上に挿入します。
     その下にある NLINES 行は失われます。負の NLINES を指定
     すると、カーソルのある行以降の NLINES を削除し、削除された行の
     後ろに続く内容が上に来ます。その下にある NLINES は消去されます。
     現在のカーソル位置はそのままです。

`insertln()'
     カーソルの下に空行を 1 行入れます。それ以降の行は 1 行づつ下に移動
     します。

`insnstr([y, x,] str, n [, attr])'
     文字列をカーソルの下にある文字の前に (一行に収まるだけ) 最大 N 文字
     挿入します。N がゼロまたは負の値の場合、文字列全体が挿入されます。
     カーソルの右にある全ての文字は右に移動し、行の左端にある文字は失われます。
     カーソル位置は (Y、 X が指定されていた場合はそこに移動しますが、
     その後は) 変化しません。

`insstr([y, x, ] str [, attr])'
     キャラクタ文字列を (行に収まるだけ) カーソルより前に挿入します。
     カーソルの右側にある文字は全て右にシフトし、行の右端の文字は失われます。
     カーソル位置は (Y、 X が指定されていた場合はそこに移動しますが、
     その後は) 変化しません。

`instr([y, x] [, n])'
     現在のカーソル位置、または Y, X が指定されている場合には
     その場所から始まるキャラクタ文字列をウィンドウから抽出して返します。
     属性は文字から剥ぎ取られます。N が指定された場合、`instr()' は
     (末尾の NUL 文字を除いて) 最大で N 文字までの長さからなる
     文字列を返します。

`is_linetouched(LINE)'
     指定した行が、最後に `refresh()' を呼んだ時から変更されている
     場合に真を返します; そうでない場合には偽を返します。 LINE
     が現在のウィンドウ上の有効な行でない場合、 `curses.error'
     例外を送出します。

`is_wintouched()'
     指定したウィンドウが、最後に `refresh()'
     を呼んだ時から変更されている 場合に真を返します;
     そうでない場合には偽を返します。

`keypad(yes)'
     YES が 1 の場合、ある種のキー (キーパッドやファンクションキー)
     によって生成されたエスケープシーケンスは `curses' で
     解釈されます。YES が 0 の場合、エスケープシーケンスは
     入力ストリームにそのままの状態で残されます。

`leaveok(yes)'
     YES が 1 の場合、カーソルは "カーソル位置" に移動せず
     現在の場所にとどめます。これにより、カーソルの移動を減らせる
     可能性があります。この場合、カーソルは不可視にされます。

     YES が 0 の場合、カーソルは更新の際に常に "カーソル位置"
     に移動します。

`move(new_y, new_x)'
     カーソルを `(NEW_Y, NEW_X)' に移動します。

`mvderwin(y, x)'
     ウィンドウを親ウィンドウの中で移動します。ウィンドウのスクリーン相対
     となるパラメタ群は変化しません。このルーチンは親ウィンドウの一部を
     スクリーン上の同じ物理位置に表示する際に用いられます。

`mvwin(new_y, new_x)'
     ウィンドウの左上角が `(NEW_Y, NEW_X)' になるように移動します。

`nodelay(yes)'
     YES が `1' の場合、`getch()' は非ブロックで動作します。

`notimeout(yes)'
     YES が `1' の場合、エスケープシーケンスはタイムアウト
     しなくなります。

     YES が `0' の場合、数ミリ秒間の間エスケープシーケンスは
     解釈されず、入力ストリーム中にそのままの状態で残されます。

`noutrefresh()'
     更新をマークはしますが待機します。この関数はウィンドウのデータ構造
     を表現したい内容を反映するように更新しますが、物理スクリーン上に
     反映させるための強制更新を行いません。更新を行うためには
     `doupdate()' を呼び出します。

`overlay(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])'
     ウィンドウを DESTWIN の上に重ね書き (overlay) します。
     ウィンドウは同じサイズである必要はなく、重なっている領域だけが
     複写されます。この複写は非破壊的 (non-destructive) です。これは
     現在の背景文字が DESTWIN の内容を上書きしないことを意味します。

     複写領域をきめ細かく制御するために、`overlay()' の第二形式を
     使うことができます。SMINROW および SMINCOL は
     元のウィンドウの左上の座標で、他の変数は DESTWIN 内の矩形を
     表します。

`overwrite(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])'
     DESTWIN の上にウィンドウの内容を上書き (overwrite) します。
     ウィンドウは同じサイズである必要はなく、重なっている領域だけが
     複写されます。この複写は破壊的 (destructive) です。これは
     現在の背景文字が DESTWIN の内容を上書きすることを意味します。

     複写領域をきめ細かく制御するために、`overlay()' の第二形式を
     使うことができます。SMINROW および SMINCOL は
     元のウィンドウの左上の座標で、他の変数は DESTWIN 内の矩形を
     表します。

`putwin(file)'
     ウィンドウに関連付けられている全てのデータを与えられたファイルオブジェクト
     に書き込みます。この情報は後に `getwin()' 関数を使って
     取得することができます。

`redrawln(beg, num)'
     BEG 行から始まる NUM スクリーン行の表示内容が壊れており、 次の
     `refresh()' 呼び出しで完全に再描画されなければならない
     ことを通知します。

`redrawwin()'
     ウィンドウ全体を更新 (touch) し、次の `refresh()' 呼び出しで
     完全に再描画されるようにします。

`refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])'
     ディスプレイを即時更新し (現実のウィンドウとこれまでの描画／削除
     メソッドの内容との同期をとり) ます。

     6 つのオプション引数はウィンドウが `newpad()' で生成された
     場合にのみ指定することができます。追加の引数はパッドやスクリーンの
     どの部分が含まれるのかを示すために必要です。 PMINROW および
     PMINCOL にはパッドが表示されている矩形の
     左上角を指定します。SMINROW,  SMINCOL, SMAXROW, および SMAXCOL
     には、スクリーン上に表示される矩形の縁を指定します。
     パッド内に表示される矩形の右下角はスクリーン座標から計算されるので、
     矩形は同じサイズでなければなりません。矩形は両方とも、それぞれの
     ウィンドウ構造内に完全に含まれていなければなりません。 PMINROW,
     PMINCOL, SMINROW, または SMINCOL
     に負の値を指定すると、ゼロを指定したものとして扱われます。

`scroll([lines` = 1'])'
     スクリーンまたはスクロール領域を上に LINES 行スクロール します。

`scrollok(flag)'
     ウィンドウのカーソルが、最下行で改行を行ったり最後の文字を入力したり
     した結果、ウィンドウやスクロール領域の縁からはみ出して移動した際の
     動作を制御します。FLAG が偽の場合、カーソルは最下行にそのまま
     にしておかれます。FLAG が真の場合、ウィンドウは 1 行上に
     スクロールします。端末の物理スクロール効果を得るためには `idlok()'
     も呼び出す必要があるので注意してください。

`setscrreg(top, bottom)'
     スクロール領域を TOP から BOTTOM に設定します。
     スクロール動作は全てこの領域で行われます。

`standend()'
     A_STANDOUT 属性をオフにします。端末によっては、この操作で
     全ての属性をオフにする副作用が発生します。

`standout()'
     A_STANDOUT 属性をオンにします。

`subpad([nlines, ncols,] begin_y, begin_x)'
     左上の角が `(BEGIN_Y, BEGIN_X)' にあり、幅／高さが それぞれ
     NCOLS/NLINES であるようなサブウィンドウを返します。

`subwin([nlines, ncols,] begin_y, begin_x)'
     左上の角が `(BEGIN_Y, BEGIN_X)' にあり、幅／高さが それぞれ
     NCOLS/NLINES であるようなサブウィンドウを返します。

     標準の設定では、サブウィンドウは指定された場所からウィンドウの右下角まで
     広がります。

`syncdown()'
     このウィンドウの上位のウィンドウのいずれかで更新(touch)された各場所を
     このウィンドウ内でも更新します。 このルーチンは `refresh()'
     から呼び出されるので、 手動で呼び出す必要はほとんどないはずです。

`syncok(flag)'
     FLAG を真にして呼び出すと、ウィンドウが変更された際は常に
     `syncup()' を自動的に呼ぶようになります。

`syncup()'
     ウィンドウ内で更新 (touch)
     した場所を、上位の全てのウィンドウ内でも更新します。

`timeout(delay)'
     ウィンドウのブロックまたは非ブロック読み込み動作を設定します。
     DELAY が負の場合、ブロック読み出しが使われ、入力を無期限で
     待ち受けます。DELAY がゼロの場合、非ブロック読み出しが 使われ、
     入力待ちの文字がない場合 `getch()' は -1 を返し ます。DELAY
     が正の値であれば、 `getch()' は DELAY
     ミリ秒間ブロックし、ブロック後の時点で入力がない場合には -1
     を返します。

`touchline(start, count)'
     START から始まる COUNT 行が変更されたかのように 振舞わせます。

`touchwin()'
     描画を最適化するために、全てのウィンドウが変更されたかのように
     振舞わせます。

`untouchwin()'
     ウィンドウ内の全ての行を、最後に `refresh()' を呼んだ際から
     変更されていないものとしてマークします。

`vline([y, x,] ch, n)'
     `(Y, X)' から始まり、 N の長さを持つ、 文字 CH
     で作られる垂直線を表示します。


File: python-lib-jp.info,  Node: 定数,  Prev: Window オブジェクト,  Up: curses

定数
----

`curses' モジュールでは以下のデータメンバを定義しています:

`ERR'
     `getch()' のような整数を返す curses ルーチンの
     いくつかは、失敗した際に `ERR' を返します。

`OK'
     `napms()' のような整数を返す curses ルーチンの
     いくつかは、成功した際に `OK' を返します。

`version'
     モジュールの現在のバージョンを表現する文字列です。 `__version__'
     でも取得できます。

以下に文字セルの属性を指定するために利用可能ないくつかの定数を示します:

属性                                 意味
------                               -----
A_ALTCHARSET                         代用文字 (alternate character)
                                     モード。
A_BLINK                              点滅モード。
A_BOLD                               太字モード。
A_DIM                                低輝度モード。
A_NORMAL                             通常の属性。
A_STANDOUT                           強調モード。
A_UNDERLINE                          下線モード。

キーは `KEY_' で始まる名前をもつ整数定数です。利用可能な
キーキャップはシステムに依存します。

キー定数                             キー
------                               -----
KEY_MIN                              最小のキー値
KEY_BREAK                            ブレーク (Break, 信頼できません)
KEY_DOWN                             下向き矢印 (Down-arrow)
KEY_UP                               上向き矢印 (Up-arrow)
KEY_LEFT                             左向き矢印 (Left-arrow)
KEY_RIGHT                            右向き矢印 (Right-arrow)
KEY_HOME                             ホームキー (Home, または上左矢印)
KEY_BACKSPACE                        バックスペース (Backspace,
                                     信頼できません)
KEY_F0                               ファンクションキー 64
                                     個までサポートされています。
KEY_FN                               ファンクションキー N の値
KEY_DL                               行削除 (Delete line)
KEY_IL                               行挿入 (Insert line)
KEY_DC                               文字削除 (Delete char)
KEY_IC                               文字挿入、または文字挿入モードへ入る
KEY_EIC                              文字挿入モードから抜ける
KEY_CLEAR                            画面消去
KEY_EOS                              画面の末端まで消去
KEY_EOL                              行末端まで消去
KEY_SF                               前に 1 行スクロール
KEY_SR                               後ろ (逆方向) に 1 行スクロール
KEY_NPAGE                            次のページ (Page Next)
KEY_PPAGE                            前のページ (Page Prev)
KEY_STAB                             タブ設定
KEY_CTAB                             タブリセット
KEY_CATAB                            全てのタブをリセット
KEY_ENTER                            入力または送信 (信頼できません)
KEY_SRESET                           ソフトウェア (部分的) リセット
                                     (信頼できません)
KEY_RESET                            リセットまたはハードリセット
                                     (信頼できません)
KEY_PRINT                            印刷 (Print)
KEY_LL                               下ホーム (Home down) または最下行
                                     (左下)
KEY_A1                               キーパッドの左上キー
KEY_A3                               キーパッドの右上キー
KEY_B2                               キーパッドの中央キー
KEY_C1                               キーパッドの左下キー
KEY_C3                               キーパッドの右下キー
KEY_BTAB                             Back tab
KEY_BEG                              開始 (Beg)
KEY_CANCEL                           キャンセル (Cancel)
KEY_CLOSE                            閉じる (Close)
KEY_COMMAND                          コマンド (Cmd)
KEY_COPY                             コピー (Copy)
KEY_CREATE                           生成 (Create)
KEY_END                              終了 (End)
KEY_EXIT                             終了 (Exit)
KEY_FIND                             検索 (Find)
KEY_HELP                             ヘルプ (Help)
KEY_MARK                             マーク (Mark)
KEY_MESSAGE                          メッセージ (Message)
KEY_MOVE                             移動 (Move)
KEY_NEXT                             次へ (Next)
KEY_OPEN                             開く (Open)
KEY_OPTIONS                          オプション (Options)
KEY_PREVIOUS                         前へ (Prev)
KEY_REDO                             やり直し (Redo)
KEY_REFERENCE                        参照 (Ref)
KEY_REFRESH                          更新 (Refresh)
KEY_REPLACE                          置換 (Replace)
KEY_RESTART                          再起動 (Restart)
KEY_RESUME                           再開 (Resume)
KEY_SAVE                             保存 (Save)
KEY_SBEG                             シフト付き開始 Beg
KEY_SCANCEL                          シフト付きキャンセル Cancel
KEY_SCOMMAND                         シフト付き Command
KEY_SCOPY                            シフト付き Copy
KEY_SCREATE                          シフト付き Create
KEY_SDC                              シフト付き Delete char
KEY_SDL                              シフト付き Delete line
KEY_SELECT                           選択 (Select)
KEY_SEND                             シフト付き End
KEY_SEOL                             シフト付き Clear line
KEY_SEXIT                            シフト付き Dxit
KEY_SFIND                            シフト付き Find
KEY_SHELP                            シフト付き Help
KEY_SHOME                            シフト付き Home
KEY_SIC                              シフト付き Input
KEY_SLEFT                            シフト付き Left arrow
KEY_SMESSAGE                         シフト付き Message
KEY_SMOVE                            シフト付き Move
KEY_SNEXT                            シフト付き Next
KEY_SOPTIONS                         シフト付き Options
KEY_SPREVIOUS                        シフト付き Prev
KEY_SPRINT                           シフト付き Print
KEY_SREDO                            シフト付き Redo
KEY_SREPLACE                         シフト付き Replace
KEY_SRIGHT                           シフト付き Right arrow
KEY_SRSUME                           シフト付き Resume
KEY_SSAVE                            シフト付き Save
KEY_SSUSPEND                         シフト付き Suspend
KEY_SUNDO                            シフト付き Undo
KEY_SUSPEND                          一時停止 (Suspend)
KEY_UNDO                             元に戻す (Undo)
KEY_MOUSE                            マウスイベント通知
KEY_RESIZE                           端末リサイズイベント
KEY_MAX                              最大キー値

VT100 や、X 端末エミュレータのようなソフトウェアエミュレーションでは、
通常少なくとも 4 つのファンクションキー (`KEY_F1'、 `KEY_F2'、
`KEY_F3'、 `KEY_F4') が利用可能 で、矢印キーは `KEY_UP'、 `KEY_DOWN'、
`KEY_LEFT' および `KEY_RIGHT' が対応付け られています。計算機に PC
キーボードが付属している場合、 矢印キーと 12 個のファンクションキー
(古い PC キーボードには 10 個しか
ファンクションキーがないかもしれません) が利用できると考えて
よいでしょう; また、以下のキーパッド対応付けは標準的なものです:

キーキャップ                         定数
------                               -----
Insert                               KEY_IC
Delete                               KEY_DC
Home                                 KEY_HOME
End                                  KEY_END
Page Up                              KEY_NPAGE
Page Down                            KEY_PPAGE

代用文字 (alternative character) セットを以下の表に列挙します。
これらは VT100 端末から継承したものであり、X 端末のような
ソフトウェアエミュレーション上で一般に利用可能なものです。
グラフィックが利用できない場合、curses は印字可能 ASCII文字による
粗雑な近似出力を行います。 _Note:_ これらは `initscr()'
が呼び出された後でしか 利用できません。

ACS コード                           意味
------                               -----
ACS_BBSS                             右上角の別名
ACS_BLOCK                            黒四角ブロック
ACS_BOARD                            白四角ブロック
ACS_BSBS                             水平線の別名
ACS_BSSB                             左上角の別名
ACS_BSSS                             上向き T 字罫線の別名
ACS_BTEE                             下向き T 字罫線
ACS_BULLET                           黒丸(bullet)
ACS_CKBOARD                          チェッカーボードパタン (点描)
ACS_DARROW                           下向き矢印
ACS_DEGREE                           度
ACS_DIAMOND                          ダイアモンド
ACS_GEQUAL                           より大きいか等しい
ACS_HLINE                            水平線
ACS_LANTERN                          ランタン(lantern) シンボル
ACS_LARROW                           left arrow
ACS_LEQUAL                           より小さいか等しい
ACS_LLCORNER                         左下角
ACS_LRCORNER                         右下角
ACS_LTEE                             left tee
ACS_NEQUAL                           等号否定
ACS_PI                               パイ記号
ACS_PLMINUS                          プラスマイナス記号
ACS_PLUS                             大プラス記号
ACS_RARROW                           右向き矢印
ACS_RTEE                             右向き T 字罫線
ACS_S1                               scan line 1
ACS_S3                               scan line 3
ACS_S7                               scan line 7
ACS_S9                               scan line 9
ACS_SBBS                             右下角の別名
ACS_SBSB                             垂直線の別名
ACS_SBSS                             右向き T 字罫線の別名
ACS_SSBB                             左下角の別名
ACS_SSBS                             下向き T 字罫線の別名
ACS_SSSB                             左向き T 字罫線の別名
ACS_SSSS                             交差罫線または大プラス記号の別名
ACS_STERLING                         ポンドスターリング記号
ACS_TTEE                             上向き T 字罫線
ACS_UARROW                           上向き矢印
ACS_ULCORNER                         左上角
ACS_URCORNER                         右上角
ACS_VLINE                            垂直線

以下のテーブルは定義済みの色を列挙したものです:

定数                                 色
------                               -----
COLOR_BLACK                          黒
COLOR_BLUE                           青
COLOR_CYAN                           シアン (薄く緑がかった青)
COLOR_GREEN                          緑
COLOR_MAGENTA                        マゼンタ (紫がかった赤)
COLOR_RED                            赤
COLOR_WHITE                          白
COLOR_YELLOW                         黄色


File: python-lib-jp.info,  Node: cursestextpad,  Next: curseswrapper,  Prev: curses,  Up: 汎用オペレーティングシステムサービス

curses プログラムのためのテキスト入力ウィジェット
=================================================

curses ウィンドウ内での Emacs ライクな入力編集機能。 _Added in Python
version 1.6_

`curses.textpad' モジュールでは、curses ウィンドウ内での基本的な
テキスト編集を処理し、Emacs に似た (すなわち Netscape Navigator, BBedit
6.x, FrameMaker, その他諸々のプログラムとも似た) キーバインドを
サポートしている `Textbox' クラスを提供します。このモジュールでは
また、テキストボックスを枠で囲むなどの目的のために有用な、矩形描画
関数を提供しています。

`curses.textpad' モジュールでは以下の関数を定義しています:

`rectangle(win, uly, ulx, lry, lrx)'
     矩形を描画します。最初の引数はウィンドウオブジェクトでなければ
     なりません; 残りの引数はそのウィンドウからの相対座標になります。 2
     番目および 3 番目の引数は描画すべき矩形の左上角の y および x
     座標です; 4 番目および 5 番目の引数は右下角の y および x 座標です。
     矩形は、 VT100/IBM PC におけるフォーム文字を利用できる 端末(xterm
     やその他のほとんどのソフトウェア端末エミュレータを含む)
     ではそれを使って描画されます。そうでなければ ASCII 文字のダッシュ、
     垂直バー、およびプラス記号で描画されます。

* Menu:

* Textbox オブジェクト::


File: python-lib-jp.info,  Node: Textbox オブジェクト,  Prev: cursestextpad,  Up: cursestextpad

Textbox オブジェクト
--------------------

以下のような `Textbox' オブジェクトをインスタンス生成することが
できます:

`Textbox(win)'
     テキストボックスウィジェットオブジェクトを返します。WIN
     引数は、テキストボックスを入れるための `WindowObject' で
     なければなりません。テキストボックスの編集カーソルは、最初は
     テキストボックスが入っているウィンドウの左上角に配置され、その
     座標は `(0, 0)' です。インスタンスの `stripspaces'
     フラグの初期値はオンに設定されます。

`Textbox' オブジェクトは以下のメソッドを持ちます:

`edit([validator])'
     普段使うことになるエントリポイントです。終了キーストロークの一つが
     入力されるまで編集キーストロークを受け付けます。VALIDATOR
     を与える場合、関数でなければなりません。VALIDATOR は
     キーストロークが入力されるたびにそのキーストロークが引数となって
     呼び出されます; 返された値に対して、コマンドキーストロークとして
     解釈が行われます。このメソッドはウィンドウの内容を文字列として返します;
     ウィンドウ内の空白が含められるかどうかは `stripspaces' メンバ
     で決められます。

`do_command(ch)'
     単一のコマンドキーストロークを処理します。以下にサポートされている
     特殊キーストロークを示します:

     キーストローク                     動作
     ------                             -----
     Control-A                          ウィンドウの左端に移動します。
     Control-B                          カーソルを左へ移動し、必要なら前の行に折り返します。
     Control-D                          カーソル下の文字を削除します。
     Control-E                          右端 (stripspaces がオフのとき)
                                        または行末 (stripspaces
                                        がオンのとき) に移動します。
     Control-F                          カーソルを右に移動し、必要なら次の行に折り返します。
     Control-G                          ウィンドウを終了し、その内容を返します。
     Control-H                          逆方向に文字を削除します。(バックスペース)
     Control-J                          ウィンドウが 1
                                        行であれば終了し、そうでなければ新しい行を挿入します。
     Control-K                          行が空白行ならその行全体を削除し、そうでなければカーソル以降行末までを消去します。
     Control-L                          スクリーンを更新します。
     Control-N                          カーソルを下に移動します; 1
                                        行下に移動します。
     Control-O                          カーソルの場所に空行を 1
                                        行挿入します。
     Control-P                          カーソルを上に移動します; 1
                                        行上に移動します。

     移動操作は、カーソルがウィンドウの縁にあって移動ができない場合には
     何も行いません。場合によっては、以下のような同義のキーストロークが
     サポートされています:

     定数                               キーストローク
     ------                             -----
     KEY_LEFT                           <Control-B>
     KEY_RIGHT                          <Control-F>
     KEY_UP                             <Control-P>
     KEY_DOWN                           <Control-N>
     KEY_BACKSPACE                      <Control-h>

     他のキーストロークは、与えられた文字を挿入し、(行折り返し付きで)
     右に移動するコマンドとして扱われます。

`gather()'
     このメソッドはウィンドウの内容を文字列として返します;
     ウィンドウ内の 空白が含められるかどうかは `stripspaces'
     メンバ変数で決められ ます。

`stripspaces'
     このデータメンバはウィンドウ内の空白領域の解釈方法を制御するための
     フラグです。フラグがオンに設定されている場合、各行の末端にある
     空白領域は無視されます; すなわち、末端空白領域にカーソルが入ると、
     その場所の代わりに行の末尾にカーソルが移動します。また、末端の空白
     領域はウィンドウの内容を取得する際に剥ぎ取られます。


File: python-lib-jp.info,  Node: curseswrapper,  Next: cursesascii,  Prev: cursestextpad,  Up: 汎用オペレーティングシステムサービス

curses プログラムのための端末ハンドラ
=====================================

curses プログラムのための端末設定ラッパ。 _Added in Python version 1.6_

このモジュールでは関数 `wrapper()' 一つを提供しています。 これは curses
使用アプリケーションの残りの部分となるもう一つの関数です。
アプリケーションが例外を送出した場合、`wrapper()' は
例外を再送出してトレースバックを生成する前に端末を正常な状態に
復元します。

`wrapper(func, ...)'
     curses を初期化し、別の関数 FUNC を呼び出、エラーが発生
     した場合には通常のキーボード／スクリーン動作に戻すラッパ関数です。
     呼び出し可能オブジェクト FUNC は主ウィンドウの 'stdscr' に
     対する最初の引数として渡されます。その他の引数は `wrapper()'
     に渡されます。

フック関数を呼び出す前に、 `wrapper()' は cbreak モード
をオン、エコーをオフにし、端末キーパッドを有効にします。
端末がカラーをサポートしている場合にはカラーを初期化します。
(通常終了も例外による終了も) 終了時には cooked モードに復元し、
エコーをオンにし、端末キーパッドを無効化します。


File: python-lib-jp.info,  Node: cursesascii,  Next: cursespanel,  Prev: curseswrapper,  Up: 汎用オペレーティングシステムサービス

ASCII 文字に関するユーティリティ
================================

ASCII 文字に関する定数および集合帰属関数。

_Added in Python version 1.6_

`curses.ascii' モジュールでは、 ASCII 文字を指す 名前定数と、様々な
ASCII 文字区分についてある文字が帰属するか
どうかを調べる関数を提供します。
このモジュールで提供されている定数は以下の制御文字の名前です:

Name                                 Meaning
------                               -----
NUL                                  空
SOH                                  ヘディング開始、コンソール割り込み
STX                                  テキスト開始
ETX                                  テキスト終了
EOT                                  テキスト伝送終了
ENQ                                  問い合わせ、`ACK' フロー制御時に使用
ACK                                  肯定応答
BEL                                  ベル
BS                                   一文字後退
TAB                                  タブ
HT                                   `TAB' の別名: "水平タブ"
LF                                   改行
NL                                   `LF' の別名: "改行"
VT                                   垂直タブ
FF                                   改頁
CR                                   復帰
SO                                   シフトアウト、他の文字セットの開始
SI                                   シフトイン、標準の文字セットに復帰
DLE                                  データリンクでのエスケープ
DC1                                  装置制御 1、フロー制御のための XON
DC2                                  装置制御 2、ブロックモードフロー制御
DC3                                  装置制御 3、フロー制御のための XOFF
DC4                                  装置制御 4
NAK                                  否定応答
SYN                                  同期信号
ETB                                  ブロック転送終了
CAN                                  キャンセル
EM                                   媒体終端
SUB                                  代入文字
ESC                                  エスケープ文字
FS                                   ファイル区切り文字
GS                                   グループ区切り文字
RS                                   レコード区切り文字、ブロックモード終了子
US                                   単位区切り文字
SP                                   空白文字
DEL                                  削除

これらの大部分は、最近は実際に定数の意味通りに使われることがほとんど
ないので注意してください。これらのニーモニック符号はデジタル計算機
より前のテレプリンタにおける慣習から付けられたものです。

このモジュールでは、標準 C ライブラリの関数を雛型とする以下の関数を
サポートしています:

`isalnum(c)'
     ASCII 英数文字かどうかを調べます; `isalpha(C) or isdigit(C)'
     と等価です。

`isalpha(c)'
     ASCII アルファベット文字かどうかを調べます; `isupper(C) or
     islower(C)' と等価です。

`isascii(c)'
     文字が 7 ビット ASCII 文字に合致するかどうかを調べます。

`isblank(c)'
     ASCII 余白文字かどうかを調べます。

`iscntrl(c)'
     ASCII 制御文字 (0x00 から 0x1f の範囲) かどうかを調べます。

`isdigit(c)'
     ASCII 10 進数字、すなわち `0' から `9' までの
     文字かどうかを調べます。 `C in string.digits' と等価です。

`isgraph(c)'
     空白以外の ASCII 印字可能文字かどうかを調べます。

`islower(c)'
     ASCII 小文字かどうかを調べます。

`isprint(c)'
     空白文字を含め、 ASCII 印字可能文字かどうかを調べます。

`ispunct(c)'
     空白または英数字以外の ASCII 印字可能文字かどうかを調べます。

`isspace(c)'
     ASCII 余白文字、すなわち空白、改行、復帰、改頁、水平タブ、
     垂直タブかどうかを調べます。

`isupper(c)'
     ASCII 大文字かどうかを調べます。

`isxdigit(c)'
     ASCII 16 進数字かどうかを調べます。 `C in string.hexdigits'
     と等価です。

`isctrl(c)'
     ASCII 制御文字 (0 から 31 までの値) かどうかを調べます。

`ismeta(c)'
     非 ASCII 文字 (0x80 またはそれ以上の値) かどうかを調べます。

これらの関数は数字も文字列も使えます; 引数を文字列にした場合、
組み込み関数 `ord()' を使って変換されます。

これらの関数は全て、関数に渡した文字列の最初の文字から得られた
ビット値を調べるので注意してください; 関数はホスト計算機で使われている
文字列エンコーディングについて何ら関知しません。文字列エンコーディング
について関知する (そして国際化に関するプロパティを正しく扱う) 関数
については、 モジュール `string' を参照してください。

以下の 2 つの関数は、引数として 1
文字の文字列または整数で表したバイト値の どちらでもとり得ます;
これらの関数は引数と同じ型で値を返します。

`ascii(c)'
     ASCII 値を返します。C の下位 7 ビットに対応します。

`ctrl(c)'
     与えた文字に対応する制御文字を返します (0x1f とビット単位で論理積
     を取ります) 。

`alt(c)'
     与えた文字に対応する 8 ビット文字を返します (0x80
     とビット単位で論理和 を取ります) 。

以下の関数は 1 文字からなる文字列値または整数値を引数に取り、文字列
を返します。

`unctrl(c)'
     ASCII 文字 C の文字列表現を返します。もし C が印字可能
     文字であれば、返される文字列は C そのものになります。 もし C
     が制御文字 (0x00-0x1f) であれば、 キャレット (`^')
     と、その後ろに続く C に対応した 大文字からなる文字列になります。C
     が ASCII 削除文字 (0x7f) であれば、文字列は `'^{}?'' になります。C
     のメタビット (0x80)
     がセットされていれば、メタビットは取り去られ、前述のルール
     が適用され、`!' が前につけられます。

`controlnames'
     0 (NUL) から 0x1f (US) までの 32 の ASCII 制御文字と、空白文字
     `SP' のニーモニック符号名からなる 33 要素の文字列による配列です。


File: python-lib-jp.info,  Node: cursespanel,  Next: getopt,  Prev: cursesascii,  Up: 汎用オペレーティングシステムサービス

curses のためのパネルスタック拡張
=================================

curses ウィンドウに深さの概念を追加するパネルスタック拡張。

パネルは深さ (depth) の機能が追加されたウィンドウです。これにより、
ウィンドウをお互いに重ね合わせることができ、各ウィンドウの可視部分だけ
が表示されます。パネルはスタック中に追加したり、スタック内で上下移動
させたり、スタックから除去することができます。

* Menu:

* 関数 3::
* Panel オブジェクト::


File: python-lib-jp.info,  Node: 関数 3,  Next: Panel オブジェクト,  Prev: cursespanel,  Up: cursespanel

関数
----

`curses.panel' では以下の関数を定義しています:

`bottom_panel()'
     パネルスタックの最下層のパネルを返します。

`new_panel(win)'
     与えられたウィンドウ WIN に関連付けられたパネルオブジェクトを
     返します。

`top_panel()'
     パネルスタックの最上層のパネルを返します。

`update_panels()'
     仮想スクリーンをパネルスタック変更後の状態に更新します。この関数では
     `curses.doupdate()' を呼ばないので、ユーザは自分で呼び出す
     必要があります。


File: python-lib-jp.info,  Node: Panel オブジェクト,  Prev: 関数 3,  Up: cursespanel

Panel オブジェクト
------------------

上記の `new_panel()' が返す Panel オブジェクトは
スタック順の概念を持つウィンドウです。
ウィンドウはパネルに関連付けられており、表示する内容を決定
している一方、パネルのメソッドはパネルスタック中のウィンドウの深さ
管理を担います。

Panel オブジェクトは以下のメソッドを持っています:

`above()'
     現在のパネルの上にあるパネルを返します。

`below()'
     現在のパネルの下にあるパネルを返します。

`bottom()'
     パネルをスタックの最下層にプッシュします。

`hidden()'
     パネルが隠れている (不可視である) 場合に真を返し、そうでない場合
     偽を返します。

`hide()'
     パネルを隠します。この操作ではオブジェクトは消去されず、
     スクリーン上のウィンドウを不可視にするだけです。

`move(y, x)'
     パネルをスクリーン座標 `(Y, X)' に移動します。

`replace(win)'
     パネルに関連付けられたウィンドウを WIN に変更します。

`set_userptr(obj)'
     パネルのユーザポインタを OBJ に設定します。このメソッドは
     任意のデータをパネルに関連付けるために使われ、任意の Python
     オブジェクト にすることができます。

`show()'
     (隠れているはずの) パネルを表示します。

`top()'
     パネルをスタックの最上層にプッシュします。

`userptr()'
     パネルのユーザポインタを返します。任意の Python オブジェクトです。

`window()'
     パネルに関連付けられているウィンドウオブジェクトを返します。


File: python-lib-jp.info,  Node: getopt,  Next: optparse,  Prev: cursespanel,  Up: 汎用オペレーティングシステムサービス

コマンドラインオプションのパーザ
================================

ポータブルなコマンドラインオプションのパーザ。長短の両方
の形式をサポートします。

このモジュールは`sys.argv'に入っているコマンドラインオプションの構文解
析を支援します。 ``-'' や ``-'`-'' の特別扱いも含めて、
UNIXの`getopt()'と同じ記法をサポートしています。
3番目の引数(省略可能)を設定することで、
GNUのソフトウェアでサポートされているような長形式のオプションも利用することが
できます。 このモジュールは1つの関数と例外を提供しています:

`getopt(args, options[, long_options])'
     コマンドラインオプションとパラメータのリストを構文解析します。
     ARGSは構文解析の対象になる引数リストです。これは
     先頭のプログラム名を除いたもので、通常`sys.argv[1:]'で与えられます。
     OPTIONS はスクリプトで認識させたいオプション文字と、引数が必要な場
     合にはコロン(`:')をつけます。つまりUNIXの
     `getopt()'と同じフォーマットになります。

     _Note:_ GNUの `getopt()'とは違って、オプションでない引数の後は全て
     オプションではないと判断されます。これは
     GNUでない、UNIXシステムの挙 動に近いものです。

     LONG_OPTIONSは長形式のオプションの名前を示す文字列のリストです。
     名前には、先頭の`'-'`-''は含めません。引数が必要な場合
     には名前の最後に等号(`=')を入れます。長形式のオプションだけを
     受けつけるためには、OPTIONSは空文字列である必要があります。
     長形式のオプションは、該当するオプションを一意に決定できる長さまで入力さ
     れていれば認識されます。たとえば、LONG_OPTIONSが `['foo',
     'frob']'の場合、`--fo'は`--foo' に該当しますが、`--f'
     では一意に決定できないので、 `GetoptError'が発生します。

     返り値は2つの要素から成っています: 最初は `(OPTION,
     VALUE)'のタプルのリスト、2つ目はオプションリス
     トを取り除いたあとに残ったプログラムの引数リストです(ARGSの末尾部
     分のスライスになります)。
     それぞれの引数と値のタプルの最初の要素は、短形式の時はハイフン
     1つで始まる文字列(例:`'-x'')、長形式の時はハイフン2つで始まる文字
     列(例: `'-'`-long-option'')となり、引数が2番目の要素になりま
     す。引数をとらない場合には空文字列が入ります。オプションは見つかった順
     に並んでいて、複数回同じオプションを指定することができます。長形式と短
     形式のオプションは混在させることができます。

`gnu_getopt(args, options[, long_options])'
     この関数はデフォルトでGNUスタイルのスキャンモードを使う以外は
     `getopt()'と同じように動作します。つまり、オプションと
     オプションでない引数とを混在させることができます。`getopt()'関
     数はオプションでない引数を見つけると解析をやめてしまいます。

     オプション文字列の最初の文字が '+'にするか、環境変数
     POSIXLY_CORRECTを設定することで、
     オプションでない引数を見つけると解析をやめるように振舞いを変えることがで
     きます。

`GetoptError'
     引数リストの中に認識できないオプションがあった場合か、引数が必要なオプショ
     ンに引数が与えられなかった場合に発生します。例外の引数は原因を示す文字
     列です。長形式のオプションについては、不要な引数が与えられた場合にもこ
     の例外が発生します。`msg'属性と`opt'属性で、エラーメッセー
     ジと関連するオプションを取得できます。特に関係するオプションが無い場合
     には`opt'は空文字列となります。

     _Changed in Python version 1.6_

`error'
     `GetoptError'へのエイリアスです。後方互換性のために残されてい
     ます。

UNIXスタイルのオプションを使った例です:
     >>> import getopt
     >>> args = '-a -b -cfoo -d bar a1 a2'.split()
     >>> args
     ['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']
     >>> optlist, args = getopt.getopt(args, 'abc:d:')
     >>> optlist
     [('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]
     >>> args
     ['a1', 'a2']

長形式のオプションを使っても同様です:

     >>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'
     >>> args = s.split()
     >>> args
     ['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']
     >>> optlist, args = getopt.getopt(args, 'x', [
     ...     'condition=', 'output-file=', 'testing'])
     >>> optlist
     [('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x',
      '')]
     >>> args
     ['a1', 'a2']

スクリプト中での典型的な使い方は以下のようになります:

     import getopt, sys
     
     def main():
         try:
             opts, args = getopt.getopt(sys.argv[1:], "ho:v", ["help", "output="])
         except getopt.GetoptError:
             # ヘルプメッセージを出力して終了
             usage()
             sys.exit(2)
         output = None
         verbose = False
         for o, a in opts:
             if o == "-v":
                 verbose = True
             if o in ("-h", "--help"):
                 usage()
                 sys.exit()
             if o in ("-o", "--output"):
                 output = a
         # ...
     
     if __name__ == "__main__":
         main()


File: python-lib-jp.info,  Node: optparse,  Next: tempfile,  Prev: getopt,  Up: 汎用オペレーティングシステムサービス

強力なコマンドラインオプション解析器
====================================

強力で柔軟、拡張性があり簡単に利用できるコマンドライン解析ライブラリ

_Added in Python version 2.3_

`optparse' モジュールは、Python による強力で柔軟、拡張性があり
簡単に利用できるコマンドライン解析ライブラリです。 `optparse'
を使うことで、有能で洗練されたコマンドラインオプションの
解析機能を少ない労力でスクリプトに追加できます。

以下は `optparse' を使っていくつかのコマンドラインオプション
を簡単なスクリプトに追加する例です:

     from optparse import OptionParser
     
     parser = OptionParser()
     parser.add_option("-f", "--file", dest="filename",
                       help="write report to FILE", metavar="FILE")
     parser.add_option("-q", "--quiet",
                       action="store_false", dest="verbose", default=1,
                       help="don't print status messages to stdout")
     
     (options, args) = parser.parse_args()

このようにわずかな行数のコードによって、スクリプトのユーザは
コマンドライン上で以下のような "よくある使い方" を実行できるように
なります:

     $ <yourscript> -f outfile --quiet
     $ <yourscript> -qfoutfile
     $ <yourscript> --file=outfile -q
     $ <yourscript> --quiet --file outfile

(これらの結果は全て `options.filename == "outfile"' および
`options.verbose == 0' ...つまり予想していた結果となります)

もっと気の利いたことに、ユーザは
     $ <yourscript> -h
     $ <yourscript> --help

のいずれかを実行することができ、`optparse' はスクリプトの
オプションについて簡単にまとめた内容を出力します:

     usage: <yourscript> [options]
     
     options:
       -h, --help           show this help message and exit
       -fFILE, --file=FILE  write report to FILE
       -q, --quiet          don't print status messages to stdout

以上は `optparse' がコマンドライン解析に与える柔軟性のほんの
一部にすぎません。

* Menu:

* オプション解析への道::
* 基本的な使い方::
* 進んだ使い方 2::
* callback オプション::
* optparse を拡張する::


File: python-lib-jp.info,  Node: オプション解析への道,  Next: 基本的な使い方,  Prev: optparse,  Up: optparse

オプション解析への道
--------------------

`optparse' は、私が考えている最も明瞭かつ素直で
ユーザフレンドリーなコマンドラインプログラムのインタフェース
を設計するための方法を実装したものです。

簡単に言うと、私は引数解析の王道 (そしてたくさんの邪道)
についてかなり頑固な考えを持っており、`optparse'
はそういった考えの多くを反映しています。
この節では上記の哲学について説明するつもりです。この哲学は UNIX と GNU
ツールキットに強く影響されています。

* Menu:

* 用語::
* オプションはどう使うのでしょうか？::
* 固定引数はどう使うのでしょうか？::

