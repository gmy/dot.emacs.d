This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: string,  Next: re,  Prev: 文字列処理,  Up: 文字列処理

一般的な文字列操作
==================

一般的な文字列操作

このモジュールは、文字クラスのチェックに役立つ定数と、文字列を扱う関数を
定義しています。正規表現を使った関数については `re'
モジュールを参照してください。

このモジュールで定義される定数は以下のとおりです。

`ascii_letters'
     後述の `ascii_lowercase' と`ascii_uppercase' を合わ
     せたもの。この値はロケールに依存しません。

`ascii_lowercase'
     小文字 `'abcdefghijklmnopqrstuvwxyz''。この値はロケールに依存せ
     ず、変更されません。

`ascii_uppercase'
     大文字 `'ABCDEFGHIJKLMNOPQRSTUVWXYZ''。この値はロケールに依存せ
     ず、変更されません。

`digits'
     文字列 `'0123456789''。

`hexdigits'
     文字列 `'0123456789abcdefABCDEF''。

`letters'
     後述の `lowercase' と `uppercase' を合わせた文字列。
     具体的な値はロケールに依存し、`locale.setlocale()' が呼ばれたと
     きに更新されます。

`lowercase'
     小文字として扱われる文字全てを含む文字列。
     ほとんどのシステムにおいて、 これは文字列
     `'abcdefghijklmnopqrstuvwxyz'' です。  この定義を
     変更してはいけません -- `upper()' と `swapcase()'
     に対する影響が定義されていないからです。具体的な値はロケールに依存し、
     `locale.setlocale()' が呼ばれたときに更新されます。

`octdigits'
     文字列 `'01234567''。

`punctuation'
     `C' ロケールにおいて、句読点として扱われる ASCII 文字の文字列。

`printable'
     印刷可能な文字で構成される文字列。これは `digits'、
     `letters'、`punctuation'、`whitespace' を組 み合わせたもの。

`uppercase'
     大文字として扱われる文字全てを含む文字列。
     ほとんどのシステムにおいて、 `'ABCDEFGHIJKLMNOPQRSTUVWXYZ'' です。
     この定義を変更してはいけま せん -- `lower()' と `swapcase()'
     に対する影響が 定義されていないからです。
     具体的な値はロケールに依存し、 `locale.setlocale()' が呼ばれたと
     きに更新されます。

`whitespace'
     空白扱いの文字全てを含む文字列。ほとんどのシステムにおいて、これはスペ
     ース、タブ、改行、リターン、改頁、垂直タブです。この定義を変更しないこ
     と -- `strip()' と `split()' に対する影響が定義され
     ていないからです。

このモジュールで提供されるほとんどの関数は、string オブジェクトと
Unicode オブジェクトのメソッドでも定義されています。詳細は "String メソ
ッド" (*Note 文字列メソッド:: ) を参照のこと。このモジュールで定義される
関数は以下のとおりです。

`atof(s)'
     _This is deprecated in Python 2.0.  組み込み関数 `float()'
     を使いましょう。_ 文 字列を浮動
     小数点型の数値に変換します。文字列は Python の浮動小数点リ テ
     ラルの文法に  従っている必要があります。先頭に符号（`+' また は
     `-'）が付く  のは構いません。この関数は、組み込み関数 `float()'
     に文字列が渡された場合と同じよう にふるまいます。

     _Note:_ 文字列が渡されたとき、内在する C ライブラリによって    NaN
     や Infinity  が返されることがあります。 これ
     らの値に変換される文字列がどれであるかは、完全に C ライブラリに
     依存す  るので、ライブラリによって異なることが知られています。

`atoi(s[, base])'
     _This is deprecated in Python 2.0.  組み込み関数 `int()'
     を使いましょう。_  文字 列   S を、BASE
     を基数とする整数に変換します。 文字列は１ 桁以上の
     数字で構成されている必要があります。先頭に符号（`+'  ま たは `-'）
     が付くのは構いません。BASE のデフォルト値は 10。 これが 0 の場合
     は、（符号を省いた後の）先頭文字によってデフォルト値
     が決定します。  `0x' か `0X' なら 16、`0' なら 8、その 他の場合は
     10 が  基数になります。  BASE が 16 の場合、先頭の `0x' や `0X'
     は常に受け付け  られますが、必須ではありません。
     この関数は、組み込み関数 `int()' に  文字列が渡されたときと同
     じようにふるまいます。（注意: より柔軟な数値リテラ
     ル解釈が必要であれ ば、組み込み関数   `eval()'  を使いましょう）

`atol(s[, base])'
     _This is deprecated in Python 2.0.  組み込み関数 `long()'
     を使ういましょう。_ 文字列   S を、 BASE を基数とする long
     整数に変換します。 文字列は１桁以
     上の数字で構成されている必要があります。先頭に符号（ `+'  または
     `-'）が付くのは構いません。 引数 BASE は `atoi()' の
     場合と同じ意味。  基数が 0 の場合を除いて、文字 列末尾の `l' や
     `L' は認めらません。BASE が与えられ ないときと、この値に 10
     が指定されたとき、この関数は組み込み関数 `long()'
     に文字列が渡されたときと同じように ふるまいます。

`capitalize(word)'
     先頭文字だけ大文字にした WORD のコピーを返します。

`capwords(s)'
     引数で与えられた文字列を`split()' で単語に分割し、 `capitalize()'
     で各単語の先頭文字を大文字化し、それを `join()' で連結します。
     この関数は連続した空白文字を、スペー
     ス1つに置換し、先頭と末尾の空白を削除することに注意しましょう。

`expandtabs(s[, tabsize])'
     タブを展開、すなわちタブを1つ以上のスペースに置換します。スペースの
     個数は現在のコラム位置とタブ幅によって決定されます。コラム位置は文字列
     中  に改行が出現する度に、0
     にリセットされます。この関数は、改行以外の 非表
     示文字やエスケープシーケンスを理解しません。タブ幅のデフォルト値
     は 8   です。

`find(s, sub[, start[,end]])'
     `S[START:END]' の中で、部分文字列 SUB が
     完全に含まれるもののうち、最初に見つかった位置を S のインデック
     スで返す。見つからなかった場合は `-1' を返す。 START と END
     のデフォルト値、および、負数が与えられた場合の 解釈はスライ
     スと同じ。

`rfind(s, sub[, start[, end]])'
     `find()' と同じですが、最後に見つかったもののインデックスを返
     します。

`index(s, sub[, start[, end]])'
     `find()' と同じですが、部分文字列が見つからなかったときに
     `ValueError' を発生させます。

`rindex(s, sub[, start[, end]])'
     `rfind()' と同じですが、部分文字列が見つからなかったときに
     `ValueError' を発生させます。

`count(s, sub[, start[, end]])'
     `S[START:END]' の中で、部分文字列 SUB が
     （重ならずに）出現する回数を返します。START と END のデフォ
     ルト値、および、負数が与えられた場合の 解釈はスライスと同じです。

`lower(s)'
     大文字を小文字に変換した、S のコピーを返します。

`maketrans(from, to)'
     `translate()' と `regex.compile()' に渡して、 FROM
     に含まれる各文字を、TO の同じ位置にある文字に置換する
     ような変換テーブルを返します。FROM と TO は同じ長さでな
     ければいけません。

     _`lowercase' と `uppercase' から得られる文字
     列を、引数にしてはいけません。ロケールによっては、これらは長さが異なる。
     大文字小文字の変換には、常に `lower()' と `upper()'
     を使いましょう。_

`split(s[, sep[, maxsplit]])'
     文字列 S に含まれる単語を、リストにして返します。  第 2 引数 SEP
     が指定されなかった場合と `None' が指定された場合 には、
     各単語は任意の空白（スペース、タブ、改行、リターン、改頁）で
     区切られ ます。第 2 引数 SEP が指定され、かつ、それが `None' でなけ
     れば、その文字列が単語の区切りになる。返されるリストの要素数は、文字列
     内で重複しない区切り文字列の数より、1個多くなります。 第 3 引数
     MAXSPLIT のデフォルト値は 0。 この引数が 0 以外の場合、多くとも
     MAXSPLIT 箇所で区切り、残りの文字列は、リストの最後の要素として
     返されます（したがって、リストは多くとも `MAXSPLIT+1' 個の
     要素を持ちます）。

`splitfields(s[, sep[, maxsplit]])'
     この関数は `split()' と同じようにふるまいます（昔は `split()'
     は引数1つの場合でのみ使われ、 `splitfields()'
     は引数2つの場合でのみ使われていました）。

`join(words[, sep])'
     単語のリストまたはタプルの要素を、SEP を間に入れて連結します。 SEP
     のデフォルト値はスペース1個。 `string.join(string.split(S, SEP),
     SEP)' は、常 に S です。

`joinfields(words[, sep])'
     この関数は `join()' と同じふるまいをします（昔は、 `join()'
     は引数1つの場合でのみ使われ、`joinfields()'
     は引数2つの場合でのみ使われていました）。 オブジェクトには
     `joinfields()' メソッドがないことに注意してください。 `join()'
     メソッドを使いましょう。

`lstrip(s[, chars])'
     先頭の文字を取り除いた文字列のコピーを返します。CHARS
     が与えられない場合や、CHARS の値が `None'
     の場合、先頭の空白を取り除きます。CHARS が与えられ、その値が
     `None' でない場合、このメソッドを呼んだ文字列から、CHARS
     に含まれる文字を取り除きます。 CHARS は文字列でなくてはいけません。
     _Changed in Python version 2.2.3_

`rstrip(s[, chars])'
     末尾の文字を取り除いた文字列のコピーを返します。CHARS
     が与えられない場合や、CHARS の値が `None'
     の場合、末尾の空白を取り除きます。CHARS が与えられ、その値が
     `None' でない場合、このメソッドを呼んだ文字列から、CHARS
     に含まれる文字を取り除きます。 CHARS は文字列でなくてはいけません。
     _Changed in Python version 2.2.3_

`strip(s[, chars])'
     先頭と末尾の文字を取り除いた文字列のコピーを返します。CHARS
     が与えられない場合や、CHARS の値が `None'
     の場合、先頭と末尾の空白を取り除きます。CHARS が与えられ、その値が
     `None' でない場合、このメソッドを呼んだ文字列から、CHARS
     に含まれる文字を取り除きます。 CHARS は文字列でなくてはいけません。
     _Changed in Python version 2.2.3_

`swapcase(s)'
     S の大文字と小文字を入れ替えたものを返します。

`translate(s, table[, deletechars])'
     S の中から、（もし指定されていれば）DELETECHARS に含まれる
     文字を削除し、TABLE を使って文字を入れ替えたものを返します。 TABLE
     は 256 文字からなる文字列で、各文字の位置が、置換前の文字
     コードに対応します。

`upper(s)'
     S に含まれる小文字を大文字に置換して返します。

`ljust(s, width)'

`rjust s, width'

`center s, width'
     これらの関数は、与えられた文字列幅の中で、それぞれ左寄せ、右寄せ、中央
     寄せします。これらが返す文字列は、少なくとも WIDTH 文字分の長さが
     あり、S の右側、左側、または両側がスペースで埋まっている。文字列
     が切られることはない。

`zfill(s, width)'
     数値文字列の左側を、与えられた幅に達するまで 0
     で埋めます。符号で始まる 場合も、正しく処理されます。

`replace(str, old, new[, maxreplace])'
     S 内の部分文字列 OLD を全て NEW に置換したものを返し ます。
     MAXREPLACE が指定された場合、最初に見つかった MAXREPLACE
     個分だけ置換します。


File: python-lib-jp.info,  Node: re,  Next: struct,  Prev: string,  Up: 文字列処理

正規表現操作
============

Perl 風の式シンタックスを用いた 正規表現検索とマッチ操作。

このモジュールは、Perl で見られるものと同様な正規表現マッチング操作を
提供します。正規表現のパターン文字列にヌルバイトを含むことはできませんが、
`\NUMBER' 記法を使って、ヌルバイトを指定することはできます。
パターンおよび検索される文字列の両方で、 8ビット文字列と同じ様に
Unicode 文字列を 使うことができます。 `re'
モジュールはいつでも利用できます。

正規表現では、特殊な形式を表したり、特殊な文字の特別な意味を呼び出さずに
その特殊な文字を使うことができるようにするために、バックスラッシュ文字
(`\') を使います。このことは、Python の、文字列リテラルの
同一文字は同一目的で使用するということと矛盾します；例えば、
文字通りのバックスラッシュとマッチするには、パターン文字列として
`'\\\\'' と書かなければなりません、というのは、正規表現は `\\'
でなければならず、各バックスラッシュは、正規な Python
文字列リテラル内では `\\' と表現しなければならないからです。

これは、正規表現パターンに Python の raw string 記法を使うことで
解決されます；`r'を前に付けた文字列リテラル内では、
バックスラッシュは、特別な風には全く処理されません。ですから、 `r"\n"'
は `\' と `n'を含む2文字の文字列であり、 一方 `"\n"'
は、改行を含む一文字文字列です。 Python コード中では、パターンは、
ふつう、この raw string 記法を使って表現されます。

See also:
     `Mastering Regular Expressions 詳説 正規表現'{Jeffrey Friedl
     著、O'Reilly 刊の正規表現に関する本です。
     この本の第2版ではPyhonについては触れていませんが、
     良い正規表現パターンの書き方を非常に詳細に説明しています。}

* Menu:

* 正規表現のシンタックス::
* マッチング vs 検索::
* Contents of Module re::
* 正規表現オブジェクト::
* MatchObject オブジェクト::
* 例 5::


File: python-lib-jp.info,  Node: 正規表現のシンタックス,  Next: マッチング vs 検索,  Prev: re,  Up: re

正規表現のシンタックス
----------------------

正規表現(すなわち RE)は、それとマッチする文字列の集合を指定します；
このモジュールの関数によって、特別な文字列が与えられた正規表現と
マッチするかどうか（あるいは与えられた正規表現が特別な文字列と
マッチするかどうか、これは結局同じことになりますが）を検査できます。

正規表現は、連結して新しい正規表現を作ることができます； もし _A_ と
_B_ が、ともに正規表現であれば、 _AB_
も正規表現です。一般的には、もし文字列 _p_ が A とマッチし、 別の文字列
_q_ が B とマッチすれば、文字列 _pq_は AB にマッチ
します。ただし、この状況が成り立つのは _A_ や _B_ が 優先度の低い演算や
_A_ と _B_ との間の境界条件、あるいは
番号付けされたグループ参照を含まない場合だけです。
かくして、ここで述べるような、より簡単でプリミティブな正規表現から、
複雑な正規表現を容易に構築することができます、
正規表現に関する理論と実装の詳細については、上記の Friedl
本か、コンパイラー構造に関する大抵の教科書を調べて下さい。

以下で正規表現の形式に関する簡単な説明をしておきます。より詳細な情報や
よりやさしい説明に関しては、<http://www.python.org/doc/howto/>
からアクセスできる正規表現ハウツウを調べて下さい。

正規表現には、特殊文字と通常文字の両方を含めることができます。 `A'、
`a'、あるいは `0'のような
殆どの通常文字は、もっとも簡単な正規表現です；それらは、単純にそれら
自身とマッチします。通常文字を連結することもできますので、 "last"
は文字列  `'last''とマッチします。(このセクションの 残りでは、RE
を普通引用符なしで "この特殊な形式"で書き、
マッチされる文字列は、`'単一引用符内''に書きます。)

`|' や `('のようないくつかの文字は特殊文字です。
特殊文字は通常文字クラスを表すか、あるいは通常文字に関する
正規表現がどのように解釈されるかに影響します。

特殊文字は：

``.''
     (ドット。) デフォールトのモードでは、これは改行以外の
     任意の文字とマッチします。もし`DOTALL' フラグが指定されていれば、
     これは、改行も含むすべての文字とマッチします。

``^''
     (キャレット。)  文字列の先頭と マッチし、`MULTILINE'
     モードでは、各改行の直後と マッチします。

``$''
     文字列の末尾、あるいは文字列の末尾の改行の 直前とマッチします。
     "foo"は、'foo' と'foobar' の両方とマッチし、 一方、正規表現
     "foo$"は、'foo' だけとマッチします。
     もっと興味深いことは、'foo1\nfoo2\n' で "foo.$"を検索すると、
     普通は 'foo2' とマッチするのですが、 `MULTILINE'モードでは 'foo1'
     とマッチします。

``*''
     結果の RE は、 前にある RE を、0
     回以上できるだけ多く繰り返したものと
     マッチするようになります。"ab*" は、 'a'、'ab'、あるいは 'a'
     に任意個数の'b' を続けたものとマッチします。

``+''
     結果の RE は、 前にある RE を、1 回以上繰り返したものと
     マッチするようになります。"ab+" は、'a' に非ゼロ個の 'b' が
     続いたものとマッチします；これは、'a' だけとはマッチしません。

``?''
     結果の RE は、 前にある RE を、0 回か
     1回繰り返したものとマッチするようになります。 "ab?" は、'a'
     あるいは 'ab' とマッチします。

``*?', `+?', `??''
     `*'、 `+'、および `?' 修飾子は、すべて "欲張り(greedy)"です；
     それらはできるだけ多くのテキストとマッチします。時にはこの動作が
     望ましくない場合があります； もし RE "<.*>" を、
     `'<H1>title</H1>''とマッチさせると、これは、全文字列とマッチし、
     `'<H1>''だけとはマッチしません。`?'を修飾子の後に追加すると、
     "控え目な(non-greedy)" あるいは "最小"
     風のマッチをするようになります； できるだけ _少ない_
     文字とマッチします。前の式で ".*?"を使うと、 `'<H1>''
     だけとマッチします。

``{M}''
     前にある RE の M 回の正確なコピーとマッチすべきであることを指定
     します；マッチ回数が少なければ、RE 全体ではマッチしません。例えば、
     "a{6}" は、正確に 6個の `a' 文字とマッチしますが、
     5個ではマッチしません。

``{M,N}''
     結果の RE は、前にある RE を、 M回からN 回まで繰り返したもので、
     できるだけ多く繰り返したものとマッチするように、マッチします。
     例えば、"a{3,5}"は、3個から 5個の `a' 文字とマッチします。
     Mを省略するとマッチ回数の下限として0を指定した事になり、 N
     を省略することは、上限が無限であることを指定します； "a{4,}b" は
     `aaaab'や、千個の `a' 文字に `b'が
     続いたものとマッチしますが、`aaab'とはマッチしません。
     コンマは省略できません、そうでないと修飾子が上で述べた形式と混同されてしまうからです。

``{M,N}?''
     結果の RE は、前にある RE の M回からN
     回まで繰り返したもので、できるだけ_少なく_
     繰り返したものとマッチするように、マッチします。これは、前の修飾子の
     控え目バージョンです。 例えば、 6文字 文字列
     `'aaaaaa''では、"a{3,5}" は、5個の `a'
     文字とマッチしますが、"a{3,5}?" は3個の文字と マッチするだけです。

``\''
     特殊文字をエスケープする( `*'や `?'等のような文字との
     マッチをできるようにする)か、あるいは、特殊シーケンスの合図です;
     特殊シーケンスは後で議論します。

     もしパターンを表現するのに raw string を使用していないのであれば、
     Python
     も、バックスラッシュを文字列リテラルでのエスケープシーケンスとして
     使っていることを覚えていて下さい；もしエスケープシーケンスを
     Python の構文解析器が認識して処理しなければ、そのバックスラッシュと
     それに続く文字は、結果の文字列にそのまま含まれます。しかし、もし
     Python が 結果のシーケンスを認識するのであれば、バックスラッシュを
     2回 繰り返さなければ いけません。このことは複雑で理解しにくいので、
     最も簡単な表現以外は、 すべて raw string を使うことをぜひ勧めます。

``[ '] 文字の集合を指定するのに使用します。文字は個々に'
     リストするか、文字の範囲を、2つの文字と`-'でそれらを分離
     して指定することができます。特殊文字は集合内では有効ではありません。
     例えば、"[akm$]"は、文字 `a'、`k'、 `m'、あるいは
     `$'のどれかとマッチします； "[a-z]"
     は、任意の小文字と、`[a-zA-Z0-9]' は、
     任意の文字や数字とマッチします。 (以下で定義する) `\w'
     や`\S'のような
     文字クラスも、範囲に含めることができます。もし文字集合に `]' や
     `-' を含めたいのなら、その前にバックスラッシュを
     付けるか、それを最初の文字として指定します。たとえば、パターン
     "[]]" は `']'' とマッチします。

     範囲内にない文字とは、その集合の"補集合をとること"で
     マッチすることができます。これは、集合の最初の文字として `^'
     を含めることで表すことができます； 他の場所にある `^'は、単純に
     `^'文字とマッチするだけです。例えば、 "[{^}5]" は、
     `5'以外の任意の文字とマッチし、 "[^`^']" は、 `^'
     以外の任意の文字とマッチします。

``|''
     `A|B' は、ここで A と B は任意の RE ですが、 A か B
     のどちらかとマッチする正規表現を作成します。任意個数の RE を、
     こういう風に `|' で分離することができます。これはグループ
     (以下参照)
     内部でも同様に使えます。検査対象文字列をスキャンする中で、 `|'
     で分離された RE は左から右への順に検査されます。
     一つでも完全にマッチしたパターンがあれば、そのパターン枝が受理されます。
     このことは、もし `A' がマッチすれば、たとえ`B' によるマッチが
     全体としてより長いマッチになったとしても、`B'
     を決して検査しないことを 意味します。 言いかえると、`|'
     演算子は決して貪欲 (greedy) ではありません。 文字通りの
     `|'とマッチするには、"\|" を使うか、 あるいはそれを "[|]"
     のように文字クラス内に入れます。

``(...)''
     丸括弧の中にどのような正規表現があってもマッチし、
     またグループの先頭と末尾を表します；グループの中身は、マッチが
     実行された後に検索され、後述する "\NUMBER"
     特殊シーケンス付きの文字列内で、後でマッチされます。 文字通りの
     `(' や `)'とマッチするには、 "\(" あるいは "\)" を
     使うか、それらを文字クラス内に入れます： "[(] [)]"。

``(?...)''
     これは拡張記法です( `(' に続く`?'は他には意味がありません)。
     `?'の後の最初の文字が、この構造の意味とこれ以上の
     シンタックスがどういうものであるかを決定します。
     拡張記法は普通新しいグループを作成しません；
     "(?P<NAME>...)"がこの規則の唯一の例外です。
     以下に現在サポートされている拡張記法を示します。

``(?iLmsux)''
     ( 集合 `i'、`L'、 `m'、 `s'、`u'、`x'
     から1文字以上)。グループは空文字列ともマッチします；文字は、
     正規表現全体の対応するフラグ (`re.I'、 `re.L'、 `re.M'、 `re.S'、
     `re.U'、 `re.X' ) を設定します。 これはもしFLAG 引数を`compile()'
     関数に渡さずに、そのフラグを正規表現の一 部として含めたいならば
     役に立ちます。

     "(?x)" フラグは、式が構文解析される
     方法を変更することに注意して下さい。
     これは式文字列内の最初か、あるいは1つ以上の空白文字の後で使うべきです。
     もしこのフラグの前に非空白文字があると、その結果は未定義です。

``(?:...)''
     正規表現の丸括弧の非グループ化バージョンです。
     どのような正規表現が丸括弧内にあってもマッチしますが、
     グループによってマッチされたサブ文字列は、
     マッチを実行したあと検索されることも、あるいは後でパターンで
     参照されることも _できません_。

``(?P<NAME>...)''
     正規表現の丸括弧と同様ですが、
     グループによってマッチされたサブ文字列は、記号グループ名
     NAMEを介してアクセスできます。グループ名は、正しい Python
     識別子でなければならず、各グループ名は、正規表現内で一度だけ定義され
     なければなりません。記号グループは、グループに名前が付けられていない場合のように、
     番号付けされたグループでもあります。そこで上の例で
     'id'という名前がついた グループは、番号グループ 1
     として参照することもできます。

     たとえば、もしパターンが
     "(?P<id>[a-zA-Z_]\w*)"であれば、このグループは、
     マッチオブジェクトのメソッドへの引数に、 `m.group('id')' あるいは
     `m.end('id')'のような名前で、 またパターンテキスト内(例えば、
     "(?P=id)") や 置換テキスト内( `\g<id>'のように)
     で名前で参照することができます。

``(?P=NAME)''
     前に NAME と名前付けされたグループに
     マッチした、いかなるテキストにもマッチします。

``(?#...)''
     コメントです；括弧の内容は 単純に無視されます。

``(?=...)''
     もし "..."が次に続くものとマッチすればマッチしますが、
     文字列をまったく消費しません。これは先読みアサーション(lookahead
     assertion)と呼ばれます。 例えば、"Isaac (?=Asimov)"
     は、`'Isaac~''に
     `'Asimov''が続く場合だけ、`'Isaac~''とマッチします。

``(?!...)''
     もし "..." が次に続くものとマッチしなければマッチします。
     これは否定先読みアサーション(negative lookahead
     assertion)です。例えば、 "Isaac (?!Asimov)"は、`'Isaac~'' に
     `'Asimov''が続か_ない_場合のみマッチします。

``(?<=...)''
     もし文字列内の現在位置の前に、 現在位置で終わる "..."
     とのマッチがあれば、マッチします。 これは
     "肯定後読みアサーション(positive lookbehind
     assertion)"と呼ばれます。 "(?<=abc)def" は、`abcdef'
     にマッチを見つけます、
     というのは後読みが3文字をバックアップして、含まれているパターンと
     マッチするかどうか検査するからです。含まれるパターンは、
     固定長の文字列にのみマッチしなければなりません、ということは、
     "abc" や "a|b" は許されますが、 "a*" や "a{3,4}"
     は許されないことを意味します。
     肯定後読みアサーションで始まるパターンは、検索される文字列の
     先頭とは決してマッチしないことに注意して下さい； 多分、`match()'
     関数よりは `search()'関数を使いたいでしょう：

          >>> import re
          >>> m = re.search('(?<=abc)def', 'abcdef')
          >>> m.group(0)
          'def'

     この例ではハイフンに続く単語を探します：

          >>> m = re.search('(?<=-)\w+', 'spam-egg')
          >>> m.group(0)
          'egg'

``(?<!...)''
     もし文字列内の現在位置の前に "..."との
     マッチがないならば、マッチします。これは
     "否定後読みアサーション(negative lookbehind
     assertion)"と呼ばれます。
     肯定後読みアサーションと同様に、含まれるパターンは固定長さの文字列だけに
     マッチしなければいけません。否定後読みアサーションで始まるパターンは、
     検索される文字列の先頭とマッチすることができます。


特殊シーケンスは `\' と以下のリストにある文字から
構成されます。もしリストにあるのが通常文字でないならば、結果の RE は
2番目の文字とマッチします。例えば、 "\$" は文字 `$'とマッチします。

``\NUMBER''
     同じ番号のグループの中身とマッチします。
     グループは1から始まる番号をつけられます。例えば、 "(.+) \1"
     は、`'the the'' あるいは `'55 55''とマッチしますが、 `'the
     end''とはマッチしません(グループの後のスペースに注意して下さい)。
     この特殊シーケンスは最初の 99
     グループのうちの一つとマッチするのに使うことが
     できるだけです。もし NUMBERの最初の桁が 0 である、すなわち
     NUMBERが 3
     桁の8進数であれば、それはグループのマッチとは解釈されず、 8進数値
     NUMBER を持つ文字として解釈されます。 文字クラスの `['と
     `]'の中の数値エスケープは、文字として 扱われます。

``\A''
     文字列の先頭だけにマッチします。

``\b''
     空文字列とマッチしますが、単語の先頭か末尾の時だけです。
     単語は英数字あるいは下線文字の並んだものとして定義されていますので、単語の末尾は
     空白あるいは非英数字、非下線文字によって表されます。 {}`\b'
     は、`\w' と `\W'の間の境界として定義されているので、
     英数字であると見なされる文字の正確な集合は、`UNICODE'と`LOCALE'フラグの
     値に依存することに注意して下さい。 文字の範囲の中では、"\b" は、
     Python の文字列リテラルと互換性を持たせるために、
     後退(backspace)文字を表します。

``\B''
     空文字列とマッチしますが、それが単語の先頭あるいは末尾に
     _ない_時だけです。これは {}`\b'のちょうど反対ですので、 `LOCALE'
     と`UNICODE'の設定にも影響されます。

``\d''
     任意の十進数とマッチします；これは 集合 "[0-9]" と同じ意味です。

``\D''
     任意の非数字文字とマッチします；これは 集合
     "[{^}0-9]"と同じ意味です。

``\s''
     任意の空白文字とマッチします；これは 集合 "[
     \t\n\r\f\v]"と同じ意味です。

``\S''
     任意の非空白文字とマッチします；これは 集合 "[^ \t\n\r\f\v]"
     と同じ意味です。

``\w''
     `LOCALE' と`UNICODE' フラグが
     指定されていない時は、任意の英数文字および下線とマッチします；これは、集合
     "[a-zA-Z0-9_]"と同じ意味です。`LOCALE'が設定されていると、 集合
     "[0-9_]" プラス 現在のロケール用に英数字として定義されている任意の
     文字とマッチします。 もし `UNICODE' が設定されていれば、 文字
     "[0-9_]" プラス Unicode
     文字特性データベースで英数字として分類されて
     いるものとマッチします。

``\W''
     `LOCALE'と `UNICODE' フラグが
     指定されていない時、任意の非英数文字とマッチします；これは 集合
     "[{^}a-zA-Z0-9_]"と同じ意味です。 `LOCALE'が指定されていると、
     集合 "[0-9_]"になく、
     現在のロケールで英数字として定義されていない任意の文字とマッチします。
     もし `UNICODE'がセットされていれば、これは "[0-9_]" および Unicode
     文字特性データベースで
     英数字として表されている文字以外のものとマッチします。

``\Z''
     文字列の末尾とのみマッチします。


Python 文字列リテラルによってサポートされている標準エスケープの
ほとんども、正規表現パーザに認識されます：

     \a      \b      \f      \n
     \r      \t      \v      \x
     \\

8進エスケープは制限された形式で含まれています：もし第1桁が 0
であるか、もし8進3桁であれば、それは8進エスケープとみなされます。
そうでなければ、それはグループ参照です。


File: python-lib-jp.info,  Node: マッチング vs 検索,  Next: Contents of Module re,  Prev: 正規表現のシンタックス,  Up: re

マッチング vs 検索
------------------

Python は、正規表現に基づく、2つの異なるプリミティブな操作を
提供しています：マッチと検索です。もしあなたが Perl
の記号に慣れているのであれば、 検索操作があなたの求めるものです。
`search()' 関数と、 コンパイルされた正規表現オブジェクトでの
対応するメソッドを見て下さい。

マッチは、`^'で始まる正規表現を使うと、検索とは
異なるかもしれないことに注意して下さい： `^'
は文字列の先頭でのみ、あるいは `MULTILINE'
モードでは改行の直後ともマッチします。 "マッチ" 操作は
、もしそのパターンが、モードに拘らず文字列の先頭とマッチ
するか、あるいは改行がその前にあるかどうかに拘らず、省略可能な POS
引数によって 与えられる先頭位置でマッチする場合のみ成功します。

     re.compile("a").match("ba", 1)           # 成功
     re.compile("^a").search("ba", 1)         # 失敗； 'a' は先頭にない
     re.compile("^a").search("\na", 1)        # 失敗； 'a' は先頭にない
     re.compile("^a", re.M).search("\na", 1)  # 成功
     re.compile("^a", re.M).search("ba", 1)   # 失敗； \n が前にない


File: python-lib-jp.info,  Node: Contents of Module re,  Next: 正規表現オブジェクト,  Prev: マッチング vs 検索,  Up: re

モジュール コンテンツ
---------------------

このモジュールは以下の関数および定数、それに例外を定義しています：

`compile(pattern[, flags])'
     正規表現パターンを正規表現オブジェクトにコンパイルします。
     このオブジェクトは、以下で述べる `match()' と `search()'
     メソッドを使って、マッチングに使うことが できます。

     式の動作は、FLAGSの値を指定することで加減することが
     できます。値は以下の変数を、ビットごとの OR ( `|' 演算子)を
     使って組み合わせることができます。

     シーケンス

          prog = re.compile(pat)
          result = prog.match(str)

     は、

          result = re.match(pat, str)

     と同じ意味ですが、`compile()' を使うバージョンの方が、
     その式を一つのプログラムで何回も使う時にはより効率的です。

`I'

`IGNORECASE'
     大文字・小文字を区別しないマッチングを実行します；
     "[A-Z]"のような式は、
     小文字にもマッチします。これは現在のロケールには 影響されません。

`L'

`LOCALE'
     "\w"、 "\W"、 "\b"および "\B" を、現在のロケールに従わさせます。

`M'

`MULTILINE'
     指定されると、パターン文字 `^' は、
     文字列の先頭および各行の先頭(各改行の直後)とマッチします；そして
     パターン文字 `$' は文字列の末尾および各行の末尾
     (改行の直前)とマッチします。デフォールトでは、 `^' は、
     文字列の先頭とだけマッチし、
     `$'は、文字列の末尾および文字列の末尾の
     改行の直前(がもしあれば)とマッチします。

`S'

`DOTALL'
     特殊文字 `.' を、改行をを含む任意の文字と、とにかくマッチ
     させます；このフラグがなければ、`.' は、改行 _以外の_
     任意の文字とマッチします。

`U'

`UNICODE'
     "\w"、 "\W"、 "\b" および "\B" を、Unicode
     文字特性データベースに従わさせます。 _Added in Python version 2.0_

`X'

`VERBOSE'
     このフラグによって、より見やすく正規表現を書くことができます。
     パターン内の空白は、文字クラス内にあるか、エスケープされていない
     バックスラッシュが前にある時以外は無視されます。
     また、行に、文字クラス内にもなく、エスケープされていない
     バックスラッシュが前にもない `#' がある時は、 そのような
     `#'の左端から その行の末尾までが無視されます。

`search(pattern, string[, flags])'
     STRING全体を走査して、正規表現 PATTERN がマッチを発生する
     位置を探して、対応する `MatchObject' インスタンスを返します。
     もし文字列内に、そのパターンとマッチする位置がないならば、 `None'
     を返します； これは、文字列内のある点で長さゼロのマッチ
     を探すこととは異なることに注意して下さい。

`match(pattern, string[, flags])'
     もし STRING の先頭で0 個以上の文字が正規表現 PATTERN と
     マッチすれば、対応する `MatchObject' インスタンスを返します。
     もし文字列がパターンとマッチしなければ、 `None' を返します；
     これは長さゼロのマッチとは異なることに 注意して下さい。

     _Note:_ もし STRING のどこかにマッチを位置付けたいのであれば、
     代わりに `search()' を使って下さい。

`split(pattern, string[, maxsplit` = 0'])'
     STRINGを、 PATTERNがあるたびに分割します。もし 括弧のキャプチャが
     PATTERNで使われていれば、パターン内の
     すべてのグループのテキストも結果のリストの一部として返されます。
     MAXSPLIT がゼロでなければ、高々  MAXSPLIT個の分割が
     発生し、文字列の残りは、リストの最終要素として返されます。
     (非互換性ノート：オリジナルの Python 1.5 リリースでは、
     MAXSPLITは無視されていました。これはその後のリリースでは
     修正されました。)

          >>> re.split('\W+', 'Words, words, words.')
          ['Words', 'words', 'words', '']
          >>> re.split('(\W+)', 'Words, words, words.')
          ['Words', ', ', 'words', ', ', 'words', '.', '']
          >>> re.split('\W+', 'Words, words, words.', 1)
          ['Words', 'words, words.']

     この関数は、古い `regsub.split()' と`regsub.splitx()'の
     機能を結合して拡張したものです。

`findall(pattern, string)'
     STRING 内の PATTERNの重複しないマッチのすべての
     リストを返します。もしパターンにグループが1つ以上あれば、
     グループのリストを返します；これは、もしパターンにグループが
     1つ以上あれば、タプルのリストとなります。他にマッチがなければ、
     空のマッチも結果に入ります。 _Added in Python version 1.5.2_

`finditer(pattern, string)'
     STRING 内の RE PATTERNの重複しないマッチのすべての
     イテレータを返します。各マッチごとに、イテレータはマッチ
     オブジェクトを返します。他にマッチがなければ、
     空のマッチも結果に入ります。 _Added in Python version 2.2_

`sub(pattern, repl, string[, count])'
     STRING 内で、 PATTERNと重複しないマッチの内、一番左にあるものを
     置換 REPL で置換して得られた文字列を返します。もしパターンが
     見つからなければ、STRING を変更せずに返します。 REPL
     は文字列でも関数でも構いません；もしそれが文字列であれば、
     それにある任意のバックスラッシュエスケープは処理されます。すなわち、
     `\n' は単一の改行文字に変換され、`\r'は、
     行送りコードに変換されます、等々。 `\j'
     のような未知のエスケープはそのままにされます。
     `\6'のような後方参照(backreference)は、パターンのグループ 6
     とマッチ したサブ文字列で置換されます。 例えば：

          >>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
          ...        r'static PyObject*\npy_\1(void)\n{',
          ...        'def myfunc():')
          'static PyObject*\npy_myfunc(void)\n{'

     もし REPL が関数であれば、重複しない PATTERNが発生する
     たびにその関数が呼ばれます。この関数は一つのマッチオブジェクト
     引数を取り、置換文字列を返します。例えば：

          >>> def dashrepl(matchobj):
          ....    if matchobj.group(0) == '-': return ' '
          ....    else: return '-'
          >>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
          'pro--gram files'

     パターンは、文字列でも RE
     でも構いません；もし正規表現フラグを指定する 必要があれば、RE
     オブジェクトを使うか、パターンに埋込み修飾子を使わ
     なければなりません；たとえば、`sub("(?i)b+", "x", "bbbb BBBB")' は
     `'x x'' を返します。

     省略可能な引数 COUNT は、置換されるパターンの出現回数の
     最大値です；COUNT は非負の整数でなければなりません。
     もし省略されるかゼロであれば、出現したものがすべて置換されます。
     パターンのマッチが空であれば、以前のマッチと隣合わせでない時だけ
     置換されますので、`sub('x*', '-', 'abc')' は `'-a-b-c-'' を
     返します。

     上で述べた文字エスケープや後方参照の他に、 `\g<name>' は、
     "(?P<name>...)" のシンタックスで定義されているように、 `name'
     という名前のグループとマッチしたサブ文字列を
     使います。`\g<number>' は対応するグループ番号を使います； それゆえ
     `\g<2>' は `\2'と同じ意味ですが、 `\g<2>0'
     のような置換でもあいまいではありません。 `\20' は、 グループ 20
     への参照として解釈されますが、グループ 2 にリテラル文字 `0'
     が続いたものへの参照としては解釈されません。 後方参照  `\g<0>' は、
     RE とマッチするサブ文字列全体を置き換えます。

`subn(pattern, repl, string[, count])'
     `sub()' と同じ操作を行いますが、タプル `(NEW_STRING、
     NUMBER_OF_SUBS_MADE)'を返します。

`escape(string)'
     バックスラッシュにすべての非英数字をつけたSTRINGを返します；これは
     もし、その中に正規表現のメタ文字を持つかもしれない任意のリテラル文字列と
     マッチしたいとき、役に立ちます。

`error'
     ここでの関数の一つに渡された文字列が、正しい正規表現ではない時
     (例えば、その括弧が対になっていなかった)、あるいはコンパイルや
     マッチングの間になんらかのエラーが発生したとき、発生する例外です。
     たとえ文字列がパターンとマッチしなくても、
     決してエラーではありません。


File: python-lib-jp.info,  Node: 正規表現オブジェクト,  Next: MatchObject オブジェクト,  Prev: Contents of Module re,  Up: re

正規表現オブジェクト
--------------------

コンパイルされた正規表現オブジェクトは、以下のメソッドと属性をサポート
します：

`match(string[, pos[, endpos]])'
     もし STRINGの先頭の 0 個以上の文字がこの正規表現とマッチすれば、
     対応する `MatchObject' インスタンスを返します。
     もし文字列がパタンーとマッチしなければ、`None' を返します；
     これは長さゼロのマッチとは異なることに 注意して下さい。

     _Note:_ もしマッチを STRING のどこかに位置付けたければ、 代わりに
     `search()' を使って下さい。

     省略可能な第2のパラメータ
     POSは、文字列内の検索を始めるインデッスクを
     与えます；デフォールトでは `0' です。これは、文字列のスライシングと
     完全に同じ意味だというわけではありません；`'^'' パターン文字は、
     文字列の実際の先頭と改行の直後とマッチしますが、
     それが必ずしも検索が開始するインデックスであるわけでは
     ないからです。

     省略可能なパラメータ ENDPOSは、どこまで文字列が検索されるかを
     制限します；あたかもその文字列が ENDPOS 文字長であるかのように
     しますので、 POS から `ENDPOS - 1' までの文字が、
     マッチのために検索されます。もし ENDPOS が POSより小さければ、
     マッチは見つかりませんが、そうでなくて、もしRX がコンパイルされた
     正規表現オブジェクトであれば、 `RX.match(STRING, 0, 50)' は
     `RX.match(STRING[:50], 0)'と同じ意味になります。

`search(string[, pos[, endpos]])'
     STRING全体を走査して、この正規表現がマッチする位置を探して、
     対応する `MatchObject' インスタンスを返します。もし文字列内に
     パターンとマッチする位置がないならば、`None' を返します；
     これは文字列内のある点で長さゼロのマッチを探すこととは異なることに
     注意して下さい。

     省略可能な POS と ENDPOS パラメータは、 `match()'
     メソッドのものと同じ意味を持ちます。

`split(string[, maxsplit` = 0'])'
     `split()' 関数と同様で、コンパイルしたパターンを使います。

`findall(string)'
     `findall()' 関数と同様で、コンパイルしたパターンを使います。

`finditer(string)'
     `finditer()' 関数と同様で、コンパイルしたパターンを使います。

`sub(repl, string[, count` = 0'])'
     `sub()' 関数と同様で、コンパイルしたパターンを使います。

`subn(repl, string[, count` = 0'])'
     `subn()' 関数と同様で、コンパイルしたパターンを使います。

`flags'
     flags 引数は、RE オブジェクトがコンパイルされたとき使われ、 もし
     flags が何も提供されなければ `0' です。

`groupindex'
     "(?P<ID>)"で定義された任意の記号グループ名の、グループ番号
     への辞書マッピングです。もし記号グループが
     パターン内で何も使われていなければ、辞書は空です。

`pattern'
     RE オブジェクトがそれからコンパイルされたパターン文字列です。


File: python-lib-jp.info,  Node: MatchObject オブジェクト,  Next: 例 5,  Prev: 正規表現オブジェクト,  Up: re

MatchObject オブジェクト
------------------------

`MatchObject' インスタンスは以下のメソッドと属性を サポートします：

`expand(template)'
     テンプレート文字列 TEMPLATE に、`sub()' メソッドがするような
     バックスラッシュ置換をして得られる文字列を返します。
     `\n'のようなエスケープは適当な文字に変換され、数値の後方参照
     (`\1'、 `\2') と名前付きの後方参照 (`\g<1>'、 `\g<name>')
     は、対応するグループの 内容で置き換えられます。

`group([group1, ...])'
     マッチした1個以上のサブグループを返します。もし引数で一つであれば、
     その結果は一つの文字列です；複数の引数があれば、その結果は、
     引数ごとに一項目を持つタプルです。引数がなければ、 GROUP1
     はデフォールトでゼロです(マッチしたものすべてが 返されます)。 もし
     GROUPN 引数がゼロであれば、対応する戻り値は、マッチ
     する文字列全体です；もしそれが範囲 [1..99]
     内であれば、それは、対応する
     丸括弧つきグループとマッチする文字列です。もしグループ番号が負であるか、
     あるいはパターンで定義されたグループの数より大きければ、
     `IndexError' 例外が発生します。もしグループがマッチしなかった
     パターンの一部に含まれていれば、対応する結果は `None' です。
     もしグループが、複数回マッチしたパターンの一部に 含まれていれば、
     最後のマッチが返されます。

     もし正規表現が "(?P<NAME>...)" シンタックスを使うならば、
     GROUPN引数は、それらのグループ名によってグループを識別する文字列であっても
     構いません。もし文字列引数がパターンのグループ名として使われていないもので
     あれば、`IndexError' 例外が発生します。

     適度に複雑な例題：

          m = re.match(r"(?P<int>\d+)\.(\d*)", '3.14')

     このマッチを実行したあとでは、`m.group(1)' は `m.group('int')'
     と同じく、`'3'' であり、そして`m.group(2)' は `'14'' です。

`groups([default])'
     1からどれだけ多くであろうがパターン内にあるグループ数までの、
     マッチの、すべてのサブグループを含むタプルを返します。 DEFAULT
     引数は、マッチに加わらなかったグループ用に使われます；
     それはデフォールトでは `None' です。 (非互換性ノート：オリジナルの
     Python 1.5 リリースでは、たとえタプルが一要素長で
     あっても、その代わりに文字列を返すことはありません。(1.5.1
     以降の)後のバージョンでは、
     そのような場合には、シングルトンタプルが返されます。)

`groupdict([default])'
     すべての _名前つきの_サブグループを含む、マッチの、
     サブグループ名でキー付けされた辞書を返します。 DEFAULT
     引数はマッチに加わらなかったグループ用に
     使われます；それはデフォールトでは `None'です。

`start([group])'

`end([group])'
     GROUPとマッチしたサブ文字列の先頭と末尾のインデックスを
     返します；GROUP は、デフォールトでは (マッチしたサブ文字列
     全体を意味する）ゼロです。 GROUP
     が存在してもマッチに寄与しなかった場合は、 `-1'
     を返します。マッチオブジェクト M および
     マッチに寄与しなかったグループ Gがあって、 グループ G
     とマッチしたサブ文字列 ( `M.group(G)'と同じ意味ですが) は、

          m.string[m.start(g):m.end(g)]

     です。 もし GROUPがヌル文字列とマッチすれば、 `m.start(GROUP)'が
     `m.end(GROUP)' と等しくなろことに 注意して下さい。例えば、 `M =
     re.search('b(c?)', 'cba')' の後では、`M.start(0)'は 1 で、
     `M.end(0)' は 2 であり、 `M.start(1)' と `M.end(1)' はともに 2
     であり、 `M.start(2)' は `IndexError'例外を発生します。

`span([group])'
     `MatchObject' M については、 2-タプル `(M.start(GROUP)、
     M.end(GROUP))'を 返します。もし GROUP
     がマッチに寄与しなかったら、これは `(-1, -1)' です。また GROUP
     はデフォールトでゼロです。

`pos'
     `RegexObject' の `search()' あるいは `match()' メソッドに渡された
     POSの値です。 これは RE
     エンジンがマッチを探し始める位置の文字列のインデックスです。

`endpos'
     `RegexObject' の `search()' あるいは `match()' メソッドに渡された
     ENDPOSの値です。 これは RE
     エンジンがそれ以上は進まない位置の文字列のインデックスです。

`lastindex'
     最後にマッチした取り込みグループの整数インデックスです。もしどのグループも
     全くマッチしなければ `None' です。

`lastgroup'
     最後にマッチした取り込みグループの名前です。もしグループに名前がないか、
     あるいはどのグループも全くマッチしなければ `None' です。

`re'
     その `match()'あるいは `search()' メソッドが、この `MatchObject'
     インスタンスを生成した正規表現オブジェクトです。

`string'
     `match()' あるいは `search()'に渡された文字列です。


File: python-lib-jp.info,  Node: 例 5,  Prev: MatchObject オブジェクト,  Up: re

例
--

*`scanf()'をシミュレートする*

Python には現在のところ、`scanf()'に相当するものがありません。
正規表現は、 `scanf()'のフォーマット文字列よりも、一般的に
より強力であり、また冗長でもあります。以下の表に、 `scanf()'
のフォーマットトークンと正規表現の 大体同等な対応付けを示します。

`scanf()' トークン                   正規表現
------                               -----
`%c'                                 "."
`%5c'                                ".{5}"
`%d'                                 "[-+]?\d+"
`%e', `%E', `%f', `%g'               "[-+]?(\d+(\.\d*)?|\d*\.\d+)([eE][-+]?\d+)?"
`%i'                                 "[-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)"
`%o'                                 "0[0-7]*"
`%s'                                 "\S+"
`%u'                                 "\d+"
`%x', `%X'                           "0[xX][\dA-Fa-f]+"

         /usr/sbin/sendmail - 0 errors, 4 warnings

のような文字列からファイル名と数値を抽出するには、

         %s - %d errors, %d warnings

のように `scanf()'フォーマットを使うでしょう。 それと同等な正規表現は

         (\S+) - (\d+) errors, (\d+) warnings

*再帰を避ける*

エンジンに大量の再帰を要求するような正規表現を作成すると、 `maximum
recursion limit exceeded(最大再帰制限を超過した)'
というメッセージを持つ RuntimeError
例外に出くわすかもしれません。たとえば、

     >>> import re
     >>> s = "Begin" + 1000 * 'a very long string' + 'end'
     >>> re.match('Begin (\w| )*? end', s).end()
     Traceback (most recent call last):
       File "<stdin>", line 1, in ?
       File "/usr/local/lib/python2.3/sre.py", line 132, in match
         return _compile(pattern, flags).match(string)
     RuntimeError: maximum recursion limit exceeded

再帰を避けるように正規表現を組みなおせることはよくあります。

Python 2.3 からは、再帰を避けるために "*?" パターンの利用が
特別扱いされるようになりました。したがって、上の正規表現は "Begin
[a-zA-Z0-9_ ]*?end" に書き直すことで再帰を防ぐことが
できます。それ以上の恩恵として、そのような正規表現は、
再帰的な同等のものよりもより速く動作します。

