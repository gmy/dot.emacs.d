This is python-lib-jp.info, produced by makeinfo version 4.5 from
python-lib-jp.texi.

12 October 2005


File: python-lib-jp.info,  Node: Pythonバイトコード命令,  Prev: dis,  Up: dis

Pythonバイトコード命令
----------------------

現在Pythonコンパイラは次のバイトコード命令を生成します。

`STOP_CODE'
     コンパイラにend-of-code(コードの終わり)を知らせます。インタプリタでは使われません。

`POP_TOP'
     top-of-stack (TOS)(スタックの先頭)の項目を取り除きます。

`ROT_TWO'
     スタックの先頭から二つの項目を入れ替えます。

`ROT_THREE'
     スタックの二番目と三番目の項目の位置を一つ上げ、先頭を三番目へ下げます。

`ROT_FOUR'
     スタックの二番目、三番目および四番目の位置を一つ上げ、先頭を四番目に下げます。

`DUP_TOP'
     スタックの先頭に参照の複製を作ります。

一項演算はスタックの先頭を取り出して演算を適用し、結果をスタックへプッシュし戻します。

`UNARY_POSITIVE'
     `TOS = +TOS'を実行します。

`UNARY_NEGATIVE'
     `TOS = -TOS'を実行します。

`UNARY_NOT'
     `TOS = not TOS'を実行します。

`UNARY_CONVERT'
     `TOS = `TOS`'を実行します。

`UNARY_INVERT'
     `TOS = ~{}TOS'を実行します。

`GET_ITER'
     `TOS = iter(TOS)'を実行します。

二項演算はスタックからスタックの先頭(TOS)と先頭から二番目のスタック項目を取り除きます。演算を実行し、スタックへ結果をプッシュし戻します。

`BINARY_POWER'
     `TOS = TOS1 ** TOS'を実行します。

`BINARY_MULTIPLY'
     `TOS = TOS1 * TOS'を実行します。

`BINARY_DIVIDE'
     `from __future__ import division'が有効でないとき、`TOS = TOS1 /
     TOS'を実行します。

`BINARY_FLOOR_DIVIDE'
     `TOS = TOS1 // TOS'を実行します。

`BINARY_TRUE_DIVIDE'
     `from __future__ import division'が有効でないとき、`TOS = TOS1 /
     TOS'を実行します。

`BINARY_MODULO'
     `TOS = TOS1 %{} TOS'を実行します。

`BINARY_ADD'
     `TOS = TOS1 + TOS'を実行します。

`BINARY_SUBTRACT'
     `TOS = TOS1 - TOS'を実行します。

`BINARY_SUBSCR'
     `TOS = TOS1[TOS]'を実行します。

`BINARY_LSHIFT'
     `TOS = TOS1 <`'< TOS'を実行します。

`BINARY_RSHIFT'
     `TOS = TOS1 >`'> TOS'を実行します。

`BINARY_AND'
     `TOS = TOS1 & TOS'を実行します。

`BINARY_XOR'
     `TOS = TOS1 ^ TOS'を実行します。

`BINARY_OR'
     `TOS = TOS1 | TOS'を実行します。

インプレース演算はTOSとTOS1を取り除いて結果をスタックへプッシュするという点で二項演算と似ています。しかし、TOS1がインプレース演算をサポートしている場合には演算が直接TOS1に行われます。また、演算結果のTOSは元のTOS1と同じオブジェクトになることが多いですが、常に同じというわけではありません。

`INPLACE_POWER'
     インプレースに`TOS = TOS1 ** TOS'を実行します。

`INPLACE_MULTIPLY'
     インプレースに`TOS = TOS1 * TOS'を実行します。

`INPLACE_DIVIDE'
     `from __future__ import
     division'が有効でないとき、インプレースに`TOS = TOS1 /
     TOS'を実行します。

`INPLACE_FLOOR_DIVIDE'
     インプレースに`TOS = TOS1 // TOS'を実行します。

`INPLACE_TRUE_DIVIDE'
     `from __future__ import
     division'が有効でないとき、インプレースに`TOS = TOS1 /
     TOS'を実行します。

`INPLACE_MODULO'
     インプレースに`TOS = TOS1 %{} TOS'を実行します。

`INPLACE_ADD'
     インプレースに`TOS = TOS1 + TOS'を実行します。

`INPLACE_SUBTRACT'
     インプレースに`TOS = TOS1 - TOS'を実行します。

`INPLACE_LSHIFT'
     インプレースに`TOS = TOS1 <`'< TOS'を実行します。

`INPLACE_RSHIFT'
     インプレースに`TOS = TOS1 >`'> TOS'を実行します。

`INPLACE_AND'
     インプレースに`TOS = TOS1 & TOS'を実行します。

`INPLACE_XOR'
     インプレースに`TOS = TOS1 ^ TOS'を実行します。

`INPLACE_OR'
     インプレースに`TOS = TOS1 | TOS'を実行します。

スライス演算は三つまでのパラメータを取ります。

`SLICE+0'
     `TOS = TOS[:]'を実行します。

`SLICE+1'
     `TOS = TOS1[TOS:]'を実行します。

`SLICE+2'
     `TOS = TOS1[:TOS]'を実行します。

`SLICE+3'
     `TOS = TOS2[TOS1:TOS]'を実行します。

スライス代入はさらに別のパラメータを必要とします。どんな文もそうであるように、スタックに何もプッシュしません。

`STORE_SLICE+0'
     `TOS[:] = TOS1'を実行します。

`STORE_SLICE+1'
     `TOS1[TOS:] = TOS2'を実行します。

`STORE_SLICE+2'
     `TOS1[:TOS] = TOS2'を実行します。

`STORE_SLICE+3'
     `TOS2[TOS1:TOS] = TOS3'を実行します。

`DELETE_SLICE+0'
     `del TOS[:]'を実行します。

`DELETE_SLICE+1'
     `del TOS1[TOS:]'を実行します。

`DELETE_SLICE+2'
     `del TOS1[:TOS]'を実行します。

`DELETE_SLICE+3'
     `del TOS2[TOS1:TOS]'を実行します。

`STORE_SUBSCR'
     `TOS1[TOS] = TOS2'を実行します。

`DELETE_SUBSCR'
     `del TOS1[TOS]'を実行します。

その他の演算。

`PRINT_EXPR'
     対話モードのための式文を実行します。TOSはスタックから取り除かれプリントされます。非対話モードにおいては、式文は`POP_STACK'で終了しています。

`PRINT_ITEM'
     `sys.stdout'に束縛されたファイル互換のオブジェクトへTOSをプリントします。`print'文に、各項目に対するこのような命令が一つあります。

`PRINT_ITEM_TO'
     `PRINT_ITEM'と似ていますが、TOSから二番目の項目をTOSにあるファイル互換オブジェクトへプリントします。これは拡張print文で使われます。

`PRINT_NEWLINE'
     `sys.stdout'へ改行をプリントします。これは`print'文がコンマで終わっていない場合に`print'文の最後の演算として生成されます。

`PRINT_NEWLINE_TO'
     `PRINT_NEWLINE'と似ていますが、TOSのファイル互換オブジェクトに改行をプリントします。これは拡張print文で使われます。

`BREAK_LOOP'
     `break'文があるためループを終了します。

`CONTINUE_LOOP target'
     `continue'文があるためループを継続します。TARGETはジャンプするアドレスです(アドレスは`FOR_ITER'命令であるべきです)。

`LOAD_LOCALS'
     現在のスコープのローカルな名前空間(locals)への参照をスタックにプッシュします。これはクラス定義のためのコードで使われます:
     クラス本体が評価された後、localsはクラス定義へ渡されます。

`RETURN_VALUE'
     関数の呼び出し元へTOSを返します。

`YIELD_VALUE'
     `TOS'をポップし、それをジェネレータからyieldします。

`IMPORT_STAR'
     `_'で始まっていないすべてのシンボルをモジュールTOSから直接ローカル名前空間へロードします。モジュールはすべての名前をロードした後にポップされます。この演算コードは`from
     module import *'を実行します。

`EXEC_STMT'
     `exec
     TOS2,TOS1,TOS'を実行します。コンパイラは見つからないオプションのパラメータを`None'で埋めます。

`POP_BLOCK'
     ブロックスタックからブロックを一つ取り除きます。フレームごとにブロックのスタックがあり、ネストしたループ、try文などを意味しています。

`END_FINALLY'
     `finally'節を終わらせます。インタプリタは例外を再び発生させなければならないかどうか、あるいは、関数が返り外側の次のブロックに続くかどうかを思い出します。

`BUILD_CLASS'
     新しいクラスオブジェクトを作成します。TOSはメソッド辞書、TOS1は基底クラスの名前のタプル、TOS2はクラス名です。

次の演算コードはすべて引数を要求します。引数はより重要なバイトを下位にもつ2バイトです。

`STORE_NAME namei'
     `name =
     TOS'を実行します。NAMEIはコードオブジェクトの属性`co_names'におけるNAMEのインデックスです。コンパイラは可能ならば`STORE_LOCAL'または`STORE_GLOBAL'を使おうとします。

`DELETE_NAME namei'
     `del
     name'を実行します。ここで、NAMEIはコードオブジェクトの`co_names'属性へのインデックスです。

`UNPACK_SEQUENCE count'
     TOSをCOUNT個のへ個別の値に分け、右から左にスタックに置かれます。

`DUP_TOPX count'
     COUNT個の項目を同じ順番を保ちながら複製します。実装上の制限から、COUNTは1から5の間(5を含む)でなければいけません。

`STORE_ATTR namei'
     `TOS.name =
     TOS1'を実行します。ここで、NAMEIは`co_names'における名前のインデックスです。

`DELETE_ATTR namei'
     `co_names'へのインデックスとしてNAMEIを使い、`del
     TOS.name'を実行します。

`STORE_GLOBAL namei'
     `STORE_NAME'として機能しますが、グローバルとして名前を記憶します。

`DELETE_GLOBAL namei'
     `DELETE_NAME'として機能しますが、グルーバル名を削除します。

`LOAD_CONST consti'
     `co_consts[CONSTI]'をスタックにプッシュします。

`LOAD_NAME namei'
     `co_names[NAMEI]'に関連付けられた値をスタックにプッシュします。

`BUILD_TUPLE count'
     スタックからCOUNT個の項目を消費するタプルを作り出し、できたタプルをスタックにプッシュします。

`BUILD_LIST count'
     `BUILD_TUPLE'として機能しますが、リストを作り出します。

`BUILD_MAP zero'
     スタックに新しい空の辞書オブジェクトをプッシュします。引数は無視され、コンパイラによってゼロに設定されます。

`LOAD_ATTR namei'
     TOSを`getattr(TOS, co_names[NAMEI])'と入れ替えます。

`COMPARE_OP opname'
     ブール演算を実行します。演算名は`cmp_op[OPNAME]'にあります。

`IMPORT_NAME namei'
     モジュール`co_names[NAMEI]'をインポートします。モジュールオブジェクトはスタックへプッシュされます。現在の名前空間は影響されません:
     適切なimport文に対して、それに続く`STORE_FAST'命令が名前空間を変更します。

`IMPORT_FROM namei'
     属性`co_names[NAMEI]'をTOSに見つかるモジュールからロードします。作成されたオブジェクトはスタックにプッシュされ、その後`STORE_FAST'命令によって記憶されます。

`JUMP_FORWARD delta'
     バイトコードカウンタをDELTAだけ増加させます。

`JUMP_IF_TRUE delta'
     TOSが真ならば、DELTAだけバイトコードカウンタを増加させます。TOSはスタックに残されます。

`JUMP_IF_FALSE delta'
     TOSが偽ならば、DELTAだけバイトコードカウンタを増加させます。TOSは変更されません。

`JUMP_ABSOLUTE target'
     バイトコードカウンタをTARGETに設定します。

`FOR_ITER delta'
     `TOS'はイテレータです。その`next()'メソッドを呼び出します。これが新しい値を作り出すならば、それを(その下にイテレータを残したまま)スタックにプッシュします。イテレータが尽きたことを示した場合は、`TOS'がポップされます。そして、バイトコードカウンタがDELTAだけ増やされます。

`LOAD_GLOBAL namei'
     グルーバル名`co_names[NAMEI]'をスタック上にロードします。

`SETUP_LOOP delta'
     ブロックスタックにループのためのブロックをプッシュします。ブロックは現在の命令からDELTAバイトの大きさを占めます。

`SETUP_EXCEPT delta'
     try-except節からtryブロックをブロックスタックにプッシュします。DELTAは最初のexceptブロックを指します。

`SETUP_FINALLY delta'
     try-except節からtryブロックをブロックスタックにプッシュします。DELTAはfinallyブロックを指します。

`LOAD_FAST var_num'
     ローカルな`co_varnames[VAR_NUM]'への参照をスタックにプッシュします。

`STORE_FAST var_num'
     TOSをローカルな`co_varnames[VAR_NUM]'の中に保存します。

`DELETE_FAST var_num'
     ローカルな`co_varnames[VAR_NUM]'を削除します。

`LOAD_CLOSURE i'
     セルと自由変数記憶領域のスロットIに含まれるセルへの参照をプッシュします。IがCO_CELLVARSの長さより小さければ、変数の名前は`co_cellvars[I]'です。そうでなければ、それは`co_freevars[I
     - len(co_cellvars)]'です。


`LOAD_DEREF i'
     セルと自由変数記憶領域のスロットIに含まれるセルをロードします。セルが持つオブジェクトへの参照をスタックにプッシュします。

`STORE_DEREF i'
     セルと自由変数記憶領域のスロットIに含まれるセルへTOSを保存します。

`SET_LINENO lineno'
     このオペコードは廃止されました。

`RAISE_VARARGS argc'
     例外を発生させます。ARGCはraise文へ与えるパラメータの数を0から3の範囲で示します。ハンドラはTOS2としてトレースバック、TOS1としてパラメータ、そしてTOSとして例外を見つけられます。

`CALL_FUNCTION argc'
     関数を呼び出します。ARGCの低位バイトは位置パラメータを示し、高位バイトはキーワードパラメータの数を示します。オペコードは最初にキーワードパラメータをスタック上に見つけます。それぞれのキーワード引数に対して、その値はキーの上にあります。スタック上のキーワードパラメータの下に位置パラメータはあり、先頭に最も右のパラメータがあります。スタック上のパラメータの下には、呼び出す関数オブジェクトがあります。


`MAKE_FUNCTION argc'
     新しい関数オブジェクトをスタックにプッシュします。TOSは関数に関連付けられたコードです。関数オブジェクトはTOSの下にあるARGCデフォルトパラメータをもつように定義されます。

`MAKE_CLOSURE argc'
     新しい関数オブジェクトを作り出し、そのFUNC_CLOSUREスロットを設定し、それをスタックにプッシュします。TOSは関数に関連付けられたコードです。コードオブジェクトがN個の自由変数を持っているならば、スタック上の次のN個の項目はこれらの変数に対するセルです。関数はセルの前にあるARGCデフォルトパラメータも持っています。

`BUILD_SLICE argc'
     スライスオブジェクトをスタックにプッシュします。ARGCは2あるいは3でなければなりません。2ならば`slice(TOS1,
     TOS)'がプッシュされます。3ならば`slice(TOS2, TOS1,
     TOS)'がプッシュされます。これ以上の情報については、`slice()'
     組み込み関数を参照してください。

`EXTENDED_ARG ext'
     大きすぎてデフォルトの二バイトに当てはめることができない引数をもつあらゆるオペコードの前に置かれます。EXTは二つの追加バイトを保持し、その後ろのオペコードの引数と一緒になって取られます。それらは四バイト引数を構成し、EXTはその最上位バイトです。

`CALL_FUNCTION_VAR argc'
     関数を呼び出します。ARGCは`CALL_FUNCTION'のように解釈実行されます。スタックの先頭の要素は変数引数リストを含んでおり、その後にキーワードと位置引数が続きます。

`CALL_FUNCTION_KW argc'
     関数を呼び出します。ARGCは`CALL_FUNCTION'のように解釈実行されます。スタックの先頭の要素はキーワード引数辞書を含んでおり、その後に明示的なキーワードと位置引数が続きます。

`CALL_FUNCTION_VAR_KW argc'
     関数を呼び出します。ARGCは`CALL_FUNCTION'のように解釈実行されます。スタックの先頭の要素はキーワード引数辞書を含んでいおり、その後に変数引数のタプルが続き、さらに明示的なキーワードと位置引数が続きます。


File: python-lib-jp.info,  Node: distutils,  Prev: dis,  Up: Python言語サービス

Python モジュールの構築とインストール
=====================================

現在インストールされている Python に追加するためのモジュール構築、
および実際のインストールを支援する。

`distutils' パッケージは、現在インストールされている Python に
追加するためのモジュール構築、および実際のインストールを支援します。
新規のモジュールは 100%{}-pure Python でも、C
で書かれた拡張モジュールでも、 あるいは Python と C
両方のコードが入っているモジュールからなる Python
パッケージでもかまいません。

このパッケージは、Python ドキュメンテーション パッケージに含まれている
これとは別の 2つのドキュメントで詳しく説明されています。`distutils'
の機能を使って新しいモジュールを配布する方法は、  に書かれています。
Python モジュールをインストールする方法は、 モジュールの作者が
`distutils' パッケージを使っている場合でもいない場合でも、
に書かれています。

See also:
     `Python モジュールを配布する'{このマニュアルは Python
     モジュールの開発者およびパッケージ担当に向けたものです。
     ここでは、現在インストールされている Python に簡単に追加できる
     `distutils'ベースのパッケージをどうやって用意するかについて
     説明しています。}

     `Python モジュールをインストールする'{ 現在インストールされている
     Python にモジュールを追加するための 情報が書かれた "管理者"
     向けのマニュアルです。 この文書を読むのに Python
     プログラマである必要はありません。}


File: python-lib-jp.info,  Node: Python コンパイラパッケージ,  Next: SGI IRIX 特有のサービス,  Prev: Python言語サービス,  Up: Top

Python コンパイラパッケージ
***************************

Python compiler パッケージは Python のソースコードを分析したり Python
バイトコードを生成するためのツールです。compiler は Python
のソースコードから抽象的な構文木を生成し、その構文木から Python
バイトコードを生成するライブラリをそなえています。

`compiler' パッケージは、Python で書かれた Python
ソースコードからバイトコードへの変換プログラムです。
これは組み込みの構文解析器をつかい、そこで得られた
具体的な構文木に対して標準的な `parser' モジュールを使用します。
この構文木から抽象構文木 AST (Abstract Syntax Tree) が生成され、 その後
Python バイトコードが得られます。

このパッケージの機能は、Python インタプリタに内蔵されている
組み込みのコンパイラがすべて含んでいるものです。これはその機能と
正確に同じものになるよう意図してつくられています。なぜ同じことをする
コンパイラをもうひとつ作る必要があるのでしょうか? このパッケージは
いろいろな目的に使うことができるからです。これは組み込みのコンパイラよりも
簡単に変更できますし、これが生成する AST は Python ソースコードを
解析するのに有用です。

この章では `compiler' パッケージのいろいろなコンポーネントが
どのように動作するのかを説明します。そのため説明はリファレンスマニュアル的なものと、
チュートリアル的な要素がまざったものになっています。

以下のモジュールは `compiler' パッケージの一部です:

* Menu:

* 基本的なインターフェイス::
* 制限::
* Python 抽象構文::
* Visitor を使って AST をわたり歩く::
* バイトコード生成::


File: python-lib-jp.info,  Node: 基本的なインターフェイス,  Next: 制限,  Prev: Python コンパイラパッケージ,  Up: Python コンパイラパッケージ

基本的なインターフェイス
========================

このパッケージのトップレベルでは 4つの関数が定義されています。
`compiler' モジュールを import すると、これらの関数および
このパッケージに含まれている一連のモジュールが使用可能になります。

`parse(buf)'
     BUF 中の Python ソースコードから得られた抽象構文木 AST を返します。
     ソースコード中にエラーがある場合、この関数は SyntaxError
     を発生させます。 返り値は `compiler.ast.Module'
     インスタンスであり、 この中に構文木が格納されています。

`parseFile(path)'
     PATH で指定されたファイル中の Python ソースコードから得られた
     抽象構文木 AST を返します。これは `parse(open(PATH).read())'
     と等価な働きをします。

`walk(ast, visitor[, verbose])'
     AST に格納された抽象構文木の各ノードを先行順序 (pre-order) で
     たどっていきます。各ノードごとに VISITOR インスタンスの
     該当するメソッドが呼ばれます。

`compile(source, filename, mode, flags=None,  dont_inherit=None)'
     文字列 SOURCE、Python モジュール、文あるいは式を exec 文あるいは
     `eval()' 関数で実行可能なバイトコードオブジェクトに
     コンパイルします。この関数は組み込みの `compile()' 関数を
     置き換えるものです。

     FILENAME は実行時のエラーメッセージに使用されます。

     MODE は、モジュールをコンパイルする場合は 'exec'、
     (対話的に実行される) 単一の文をコンパイルする場合は 'single'、
     式をコンパイルする場合には 'eval' を渡します。

     引数 FLAGS および DONT_INHERIT は将来的に使用される文に
     影響しますが、いまのところはサポートされていません。

`compileFile(source)'
     ファイル SOURCE をコンパイルし、.pyc ファイルを生成します。

`compiler' パッケージは以下のモジュールを含んでいます: `ast'、
`consts',、 `future'、 `misc'、 `pyassem'、 `pycodegen'、 `symbols'、
`transformer'、 そして `visitor'。


File: python-lib-jp.info,  Node: 制限,  Next: Python 抽象構文,  Prev: 基本的なインターフェイス,  Up: Python コンパイラパッケージ

制限
====

compiler パッケージにはエラーチェックにいくつか問題が存在します。
構文エラーはインタープリタの 2つの別々のフェーズによって認識されます。
ひとつはインタープリタのパーザによって認識されるもので、
もうひとつはコンパイラによって認識されるものです。 compiler
パッケージはインタープリタのパーザに依存しているので、
最初の段階のエラーチェックは労せずして実現できています。
しかしその次の段階は、実装されてはいますが、その実装は不完全です。
たとえば compiler パッケージは引数に同じ名前が 2度以上出てきていても
エラーを出しません: `def f(x, x): ...'

compiler の将来のバージョンでは、これらの問題は修正される予定です。


File: python-lib-jp.info,  Node: Python 抽象構文,  Next: Visitor を使って AST をわたり歩く,  Prev: 制限,  Up: Python コンパイラパッケージ

Python 抽象構文
===============

`compiler.ast' モジュールは Python の抽象構文木 AST を定義します。 AST
では各ノードがそれぞれの構文要素をあらわします。 木の根は `Module'
オブジェクトです。

抽象構文木 AST は、パーズされた Python ソースコードに対する
高水準のインターフェイスを提供します。Python インタプリタにおける
`parser' モジュールと コンパイラは C
で書かれおり、具体的な構文木を使っています。 具体的な構文木は Python
のパーザ中で使われている構文と密接に関連しています。
ひとつの要素に単一のノードを割り当てる代わりに、ここでは Python の
優先順位に従って、何層にもわたるネストしたノードがしばしば使われています。

抽象構文木 AST は、`compiler.transformer' (変換器) モジュールに
よって生成されます。transformer は組み込みの Python
パーザに依存しており、
これを使って具体的な構文木をまず生成します。つぎにそこから抽象構文木
AST を 生成します。

`transformer' モジュールは、実験的な Python-to-C コンパイラ用に Greg
Stein  と Bill Tutt  によって作られました。
現行のバージョンではいくつもの修正と改良がなされていますが、 抽象構文木
AST と transformer の基本的な構造は Stein と Tutt によるものです。

* Menu:

* AST ノード::
* 代入ノード::
* サンプル::


File: python-lib-jp.info,  Node: AST ノード,  Next: 代入ノード,  Prev: Python 抽象構文,  Up: Python 抽象構文

AST ノード
----------

`compiler.ast' モジュールは、各ノードのタイプとその要素を記述した
テキストファイルからつくられます。各ノードのタイプはクラスとして表現され、
そのクラスは抽象基底クラス `compiler.ast.Node' を継承し
子ノードの名前属性を定義しています。

`Node()'
     `Node'
     インスタンスはパーザジェネレータによって自動的に作成されます。
     ある特定の `Node'
     インスタンスに対する推奨されるインターフェイスとは、
     子ノードにアクセスするために public な (訳注: 公開された)
     属性を使うことです。 public
     な属性は単一のノード、あるいは一連のノードのシーケンスに
     束縛されている (訳注: バインドされている) かもしれませんが、
     これは `Node' のタイプによって違います。 たとえば `Class' ノードの
     `bases' 属性は 基底クラスのノードのリストに束縛されており、`doc'
     属性は 単一のノードのみに束縛されている、といった具合です。

     各 `Node' インスタンスは `lineno' 属性をもっており、 これは `None'
     かもしれません。 XXX どういったノードが使用可能な lineno
     をもっているかの規則は定かではない。

`Node' オブジェクトはすべて以下のメソッドをもっています:

`getChildren()'
     子ノードと子オブジェクトを、これらが出てきた順で、平らなリスト形式にして返します。
     とくにノードの順序は、 Python
     文法中に現れるものと同じになっています。 すべての子が `Node'
     インスタンスなわけではありません。
     たとえば関数名やクラス名といったものは、ただの文字列として表されます。

`getChildNodes()'
     子ノードをこれらが出てきた順で平らなリスト形式にして返します。
     このメソッドは `getChildren()' に似ていますが、 `Node'
     インスタンスしか返さないという点で異なっています。

`Node' クラスの一般的な構造を説明するため、 以下に
2つの例を示します。`while' 文は以下のような文法規則により
定義されています:

     while_stmt:     "while" expression ":" suite
                    ["else" ":" suite]

`While' ノードは 3つの属性をもっています: `test'、 `body'、 および
`else_' です。(ある属性にふさわしい名前が Python
の予約語としてすでに使われているとき、その名前を属性名にすることは
できません。そのため、ここでは名前が正規のものとして受けつけられるように
アンダースコアを後につけてあります、そのため `else_' は `else'
のかわりです。)

`if' 文はもっとこみ入っています。なぜならこれは
いくつもの条件判定を含む可能性があるからです。

     if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]

`If' ノードでは、`tests' および `else_' の
2つだけの属性が定義されています。`tests' 属性には条件式とその後の動作の
タプルがリスト形式で入っています。おのおのの `if'/`elif' 節ごとに
1タプルです。各タプルの最初の要素は条件式で、2番目の要素はもしその式が
真ならば実行されるコードをふくんだ `Stmt' ノードになっています。

`If' の `getChildren()' メソッドは、
子ノードの平らなリストを返します。`if'/`elif' 節が 3つあって `else'
節がない場合なら、`getChildren()' は 6要素のリストを 返すでしょう:
最初の条件式、最初の `Stmt'、2番目の条件式…といった具合です。

以下の表は `compiler.ast' で定義されている `Node' サブクラスと、
それらのインスタンスに対して使用可能なパブリックな属性です。
ほとんどの属性の値じたいは `Node'
インスタンスか、インスタンスのリストです。
この値がインスタンス型以外の場合、その型は備考の中で記されています。
これら属性の順序は、 `getChildren()' および `getChildNodes()'
が返す順です。

ノードの型               属性                     値
------                   -----                    -----
Add                      `left'                   左側の項
                         `right'                  右側の項
And                      `nodes'                  項のリスト
AssAttr                                           _代入先をあらわす属性_
                         `expr'                   ドット(.) の左側の式
                         `attrname'               属性名をあらわす文字列
                         `flags'                  XXX
AssList                  `nodes'                  代入先のリスト要素のリスト
AssName                  `name'                   代入先の名前
                         `flags'                  XXX
AssTuple                 `nodes'                  代入先のタプル要素のリスト
Assert                   `test'                   検査される条件式
                         `fail'                   `AssertionError' の値
Assign                   `nodes'                  代入先のリスト、代入記号(=)ごとにひとつ
                         `expr'                   代入する値
AugAssign                `node'                   
                         `op'                     
                         `expr'                   
Backquote                `expr'                   
Bitand                   `nodes'                  
Bitor                    `nodes'                  
Bitxor                   `nodes'                  
Break                                             
CallFunc                 `node'                   呼ばれる側をあらわす式
                         `args'                   引数のリスト
                         `star_args'              *-arg 拡張引数の値
                         `dstar_args'             **-arg 拡張引数の値
Class                    `name'                   クラス名をあらわす文字列
                         `bases'                  基底クラスのリスト
                         `doc'                    doc
                                                  string、文字列あるいは
                                                  `None'
                         `code'                   クラス文の本体
Compare                  `expr'                   
                         `ops'                    
Const                    `value'                  
Continue                                          
Dict                     `items'                  
Discard                  `expr'                   
Div                      `left'                   
                         `right'                  
Ellipsis                                          
Exec                     `expr'                   
                         `locals'                 
                         `globals'                
For                      `assign'                 
                         `list'                   
                         `body'                   
                         `else_'                  
From                     `modname'                
                         `names'                  
Function                 `name'                   def
                                                  で定義される名前をあらわす文字列
                         `argnames'               引数をあわらす文字列のリスト
                         `defaults'               デフォルト値のリスト
                         `flags'                  xxx
                         `doc'                    doc
                                                  string、文字列あるいは
                                                  `None'
                         `code'                   関数の本体
Getattr                  `expr'                   
                         `attrname'               
Global                   `names'                  
If                       `tests'                  
                         `else_'                  
Import                   `names'                  
Invert                   `expr'                   
Keyword                  `name'                   
                         `expr'                   
Lambda                   `argnames'               
                         `defaults'               
                         `flags'                  
                         `code'                   
LeftShift                `left'                   
                         `right'                  
List                     `nodes'                  
ListComp                 `expr'                   
                         `quals'                  
ListCompFor              `assign'                 
                         `list'                   
                         `ifs'                    
ListCompIf               `test'                   
Mod                      `left'                   
                         `right'                  
Module                   `doc'                    doc
                                                  string、文字列あるいは
                                                  `None'
                         `node'                   モジュール本体、`Stmt'
                                                  インスタンス
Mul                      `left'                   
                         `right'                  
Name                     `name'                   
Not                      `expr'                   
Or                       `nodes'                  
Pass                                              
Power                    `left'                   
                         `right'                  
Print                    `nodes'                  
                         `dest'                   
Printnl                  `nodes'                  
                         `dest'                   
Raise                    `expr1'                  
                         `expr2'                  
                         `expr3'                  
Return                   `value'                  
RightShift               `left'                   
                         `right'                  
Slice                    `expr'                   
                         `flags'                  
                         `lower'                  
                         `upper'                  
Sliceobj                 `nodes'                  文のリスト
Stmt                     `nodes'                  
Sub                      `left'                   
                         `right'                  
Subscript                `expr'                   
                         `flags'                  
                         `subs'                   
TryExcept                `body'                   
                         `handlers'               
                         `else_'                  
TryFinally               `body'                   
                         `final'                  
Tuple                    `nodes'                  
UnaryAdd                 `expr'                   
UnarySub                 `expr'                   
While                    `test'                   
                         `body'                   
                         `else_'                  
Yield                    `value'                  


File: python-lib-jp.info,  Node: 代入ノード,  Next: サンプル,  Prev: AST ノード,  Up: Python 抽象構文

代入ノード
----------

代入をあらわすのに使われる一群のノードが存在します。
ソースコードにおけるそれぞれの代入文は、抽象構文木 AST では
単一のノード `Assign' になっています。 `nodes'
属性は各代入の対象にたいするノードのリストです。
これが必要なのは、たとえば `a = b = 2' のように
代入が連鎖的に起こるためです。 このリスト中における各 `Node' は、
次のうちどれかのクラスになります: `AssAttr'、 `AssList'、 `AssName'、
または `AssTuple'。

代入対象の各ノードには代入されるオブジェクトの種類が記録されています。
`AssName' は `a = 1' などの単純な変数名、 `AssAttr' は `a.x = 1'
などの属性に対する代入、 `AssList' および `AssTuple' はそれぞれ、 `a,
b, c = a_tuple' などのようなリストとタプルの展開をあらわします。

代入対象ノードはまた、そのノードが代入で使われるのか、それとも del
文で使われるのかをあらわす属性 `flags' も持っています。 `AssName' は
`del x' などのような del 文をあらわすのにも 使われます。

ある式がいくつかの属性への参照をふくんでいるときは、 代入あるいは del
文はただひとつだけの `AssAttr' ノードをもちます -
最終的な属性への参照としてです。それ以外の属性への参照は `AssAttr'
インスタンスの `expr' 属性にある `Getattr'
ノードによってあらわされます。


File: python-lib-jp.info,  Node: サンプル,  Prev: 代入ノード,  Up: Python 抽象構文

サンプル
--------

この節では、Python ソースコードに対する抽象構文木 AST の
かんたんな例をいくつかご紹介します。これらの例では `parse()'
関数をどうやって使うか、AST の repr 表現は
どんなふうになっているか、そしてある AST ノードの属性に
アクセスするにはどうするかを説明します。

最初のモジュールでは単一の関数を定義しています。 かりにこれは
`/tmp/doublelib.py' に格納されていると仮定しましょう。

     """This is an example module.
     
     This is the docstring.
     """
     
     def double(x):
         "Return twice the argument"
         return x * 2

以下の対話的インタプリタのセッションでは、 見やすさのため 長い AST の
repr を整形しなおしてあります。 AST の repr では qualify
されていないクラス名が使われています。 repr
表現からインスタンスを作成したい場合は、 `compiler.ast' モジュールから
それらのクラス名を import しなければなりません。

     >>> import compiler
     >>> mod = compiler.parseFile("/tmp/doublelib.py")
     >>> mod
     Module('This is an example module.\n\nThis is the docstring.\n',
            Stmt([Function('double', ['x'], [], 0, 'Return twice the argument',
            Stmt([Return(Mul((Name('x'), Const(2))))]))]))
     >>> from compiler.ast import *
     >>> Module('This is an example module.\n\nThis is the docstring.\n',
     ...    Stmt([Function('double', ['x'], [], 0, 'Return twice the argument',
     ...    Stmt([Return(Mul((Name('x'), Const(2))))]))]))
     Module('This is an example module.\n\nThis is the docstring.\n',
            Stmt([Function('double', ['x'], [], 0, 'Return twice the argument',
            Stmt([Return(Mul((Name('x'), Const(2))))]))]))
     >>> mod.doc
     'This is an example module.\n\nThis is the docstring.\n'
     >>> for node in mod.node.nodes:
     ...     print node
     ...
     Function('double', ['x'], [], 0, 'Return twice the argument',
              Stmt([Return(Mul((Name('x'), Const(2))))]))
     >>> func = mod.node.nodes[0]
     >>> func.code
     Stmt([Return(Mul((Name('x'), Const(2))))])


File: python-lib-jp.info,  Node: Visitor を使って AST をわたり歩く,  Next: バイトコード生成,  Prev: Python 抽象構文,  Up: Python コンパイラパッケージ

Visitor を使って AST をわたり歩く
=================================

visitor パターンは ...  `compiler' パッケージは、Python
のイントロスペクション機能を利用して visitor
のために必要な大部分のインフラを省略した、visitor
パターンの変種を使っています。

visit されるクラスは、visitor
を受け入れるようにプログラムされている必要はありません。 visitor
が必要なのはただそれがとくに興味あるクラスに対して visit メソッドを
定義することだけです。それ以外はデフォルトの visit
メソッドが処理します。

XXX The magic `visit()' method for visitors.

`walk(tree, visitor[, verbose])'

`ASTVisitor()'
     `ASTVisitor' は構文木を正しい順序でわたり歩くようにします。
     それぞれのノードはまず `preorder()' の呼び出しではじまります。
     各ノードに対して、これは `visitNodeType'
     という名前のメソッドに対する `preorder()' 関数への VISITOR
     引数をチェックします。 ここで NodeType
     の部分はそのノードのクラス名です。たとえば `While'
     ノードなら、`visitWhile()' が呼ばれるわけです。
     もしそのメソッドが存在している場合、それはそのノードを第一引数として呼び出されます。

     ある特定のノード型に対する visitor メソッドでは、
     その子ノードをどのようにわたり歩くかが制御できます。 `ASTVisitor'
     は visitor に visit メソッドを追加することで、 その visitor
     引数を修正します。特定のノード型に対する visitor が
     存在しない場合、 `default()' メソッドが呼び出されます。


`ASTVisitor' オブジェクトには以下のようなメソッドがあります:

XXX 追加の引数を記述

`default(node[, ...])'

`dispatch(node[, ...])'

`preorder(tree, visitor)'


File: python-lib-jp.info,  Node: バイトコード生成,  Prev: Visitor を使って AST をわたり歩く,  Up: Python コンパイラパッケージ

バイトコード生成
================

バイトコード生成器はバイトコードを出力する visitor です。 visit
メソッドが呼ばれるたびにこれは `emit()' メソッドを
呼び出し、バイトコードを出力します。基本的なバイトコード生成器は
モジュール、クラス、および関数によって拡張できます。
アセンブラがこれらの出力された命令を低レベルのバイトコードに変換します。
これはコードオブジェクトからなる定数のリスト生成や、
分岐のオフセット計算といった処理をおこないます。


File: python-lib-jp.info,  Node: SGI IRIX 特有のサービス,  Next: SunOS 特有のサービス,  Prev: Python コンパイラパッケージ,  Up: Top

SGI IRIX 特有のサービス
***********************

この章で記述されているモジュールは、SGI の IRIX オペレーティングシステム
(バージョン4と5) 特有の機能へのインターフェイスを提供します。

* Menu:

* al::
* AL::
* cd::
* fl::
* FL::
* flp::
* fm::
* gl::
* DEVICE::
* GL::
* imgfile::
* jpeg::


File: python-lib-jp.info,  Node: al,  Next: AL,  Prev: SGI IRIX 特有のサービス,  Up: SGI IRIX 特有のサービス

SGIのオーディオ機能
===================

SGIのオーディオ機能。

このモジュールを使うと、SGI IndyとIndigoワークステーションのオーディオ装
置にアクセスできます。
詳しくはIRIXのmanページのセクション3Aを参照してください。
ここに書かれた関数が何をするかを理解するには、manページを読む必要が
あります！ IRIXのリリース4.0.5より前のものでは使えない関数もあります。
お使いのプラットフォームで特定の関数が使えるかどうか、マニュアルで確認し
てください。

このモジュールで定義された関数とメソッドは全て、名前に`AL'の接頭辞
を付けたCの関数と同義です。

Cのヘッダーファイル`<audio.h>'のシンボル定数は標準モジュール `AL'
に定義されています。 下記を参照してください。

_
オーディオライブラリの現在のバージョンは、不正な引数が渡されるとエラース
テイタスが返るのではなく、coreを吐き出すことがあります。
残念ながら、この現象が確実に起こる環境は述べられていないし、確認する
ことは難しいので、Pythonインターフェースでこの種の問題に対して防御する
ことはできません。 （一つの例は過大なキューサイズを特定することです --
上限については記載 されていません。）_

このモジュールには、以下の関数が定義されています：

`openport(name, direction[, config])'
     引数NAMEとDIRECTIONは文字列です。
     省略可能な引数CONFIGは、`newconfig()'で返されるコンフィ
     ギュレーションオブジェクトです。 返り値は"audio port
     object"です；オーディオポートオブジェクトの
     メソッドは下に書かれています。

`newconfig()'
     返り値は新しい"audio configuration object"です；オーディオコンフィ
     ギュレーションオブジェクトのメソッドは下に書かれています。

`queryparams(device)'
     引数DEVICEは整数です。
     返り値は`ALqueryparams()'で返されるデータを含む整数のリストで す。

`getparams(device, list)'
     引数DEVICEは整数です。
     引数LISTは`queryparams()'で返されるようなリストです；
     `queryparams()'を適切に（！）修正して使うことができます。

`setparams(device, list)'
     引数DEVICEは整数です。
     引数LISTは`queryparams()'で返されるようなリストです。

* Menu:

* コンフィギュレーションオブジェクト::
* ポートオブジェクト::


File: python-lib-jp.info,  Node: コンフィギュレーションオブジェクト,  Next: ポートオブジェクト,  Prev: al,  Up: al

コンフィギュレーションオブジェクト
----------------------------------

`newconfig()'で返されるコンフィギュレーションオブジェクト
には以下のメソッドがあります：

`getqueuesize()'
     キューサイズを返します。

`setqueuesize(size)'
     キューサイズを設定します。

`getwidth()'
     サンプルサイズを返します。

`setwidth(width)'
     サンプルサイズを設定します。

`getchannels()'
     チャンネル数を返します。

`setchannels(nchannels)'
     チャンネル数を設定します。

`getsampfmt()'
     サンプルのフォーマットを返します。

`setsampfmt(sampfmt)'
     サンプルのフォーマットを設定します。

`getfloatmax()'
     浮動小数点数でサンプルデータの最大値を返します。

`setfloatmax(floatmax)'
     浮動小数点数でサンプルデータの最大値を設定します。


File: python-lib-jp.info,  Node: ポートオブジェクト,  Prev: コンフィギュレーションオブジェクト,  Up: al

ポートオブジェクト
------------------

`openport()'で返されるポートオブジェクトには以下のメソッドがあ ります：

`closeport()'
     ポートを閉じます。

`getfd()'
     ファイルディスクリプタを整数で返します。

`getfilled()'
     バッファに存在するサンプルの数を返します。

`getfillable()'
     バッファの空きに入れることのできるサンプルの数を返します。

`readsamps(nsamples)'
     必要ならブロックして、キューから指定のサンプル数を読み込みます。
     生データを文字列として
     （例えば、サンプルサイズが2バイトならサンプル当たり2バイトがbig-endian
     （high byte、low byte）で）返します。

`writesamps(samples)'
     必要ならブロックして、キューにサンプルを書き込みます。
     サンプルは`readsamps()'で返される値のようにエンコードされていなけ
     ればなりません。

`getfillpoint()'
     `fill point'を返します。

`setfillpoint(fillpoint)'
     `fill point'を設定します。

`getconfig()'
     現在のポートのコンフィギュレーションを含んだコンフィギュレーションオブ
     ジェクトを返します。

`setconfig(config)'
     コンフィギュレーションを引数に取り、そのコンフィギュレーションに設定しま
     す。

`getstatus(list)'
     最後のエラーについてのステイタスの情報を返します。


File: python-lib-jp.info,  Node: AL,  Next: cd,  Prev: al,  Up: SGI IRIX 特有のサービス

`al'モジュールで使われる定数
============================

`al'モジュールで使われる定数。

このモジュールには、組み込みモジュール`al'（上記参照）を使用す
るのに必要とされるシンボリック定数が定義されています。
定数の名前はCのincludeファイル`<audioio.h>'で
接頭辞`AL_'を除いたものと同じです。

定義されている名前の完全なリストについてはモジュールのソースを参照してく
ださい。 お勧めの使い方は以下の通りです：

     import al
     from AL import *


File: python-lib-jp.info,  Node: cd,  Next: fl,  Prev: AL,  Up: SGI IRIX 特有のサービス

SGIシステムのCD-ROMへのアクセス
===============================

Silicon GraphicsシステムのCD-ROMへのインターフェース

このモジュールはSilicon Graphics CD ライブラリへのインターフェースを提供
します。 Silicon Graphics システムだけで利用可能です。

ライブラリは以下のように使われます。

CD-ROMデバイスを`open()'で開き、
`createparser()'でCDからデータをパースするためのパーザを作りま す。
`open()'で返されるオブジェクトはCDからデータを読み込むのに使わ
れますが、CD-ROMデバイスのステータス情報や、CDの情報、たとえば目次などを
得るのにも使われます。
CDから得たデータはパーザに渡され、パーザはフレームをパースし、あらかじめ
加えられたコールバック関数を呼び出します。

オーディオCDはトラック"tracks"あるいはプログラム"programs"（同じ
意味で、どちらかの用語が使われます）に分けられます。
トラックはさらにインデックス"indices"に分けられます。
オーディオCDは、CD上の各トラックのスタート位置を示す 目次"table of
contents"を持っています。
インデックス0は普通、トラックの始まりの前のポーズです。
目次から得られるトラックのスタート位置は通常、インデックス1のスタート位
置です。

CD上の位置は2通りの方法で得ることができます。
それはフレームナンバーと、分、秒、フレームの3つの値からなるタプ
ルの2つです。 ほとんどの関数は後者を使います。
位置はCDの開始位置とトラックの開始位置の両方に相対的になります。

モジュール`cd'は、以下の関数と定数を定義しています：

`createparser()'
     不透明なパーザオブジェクトを作って返します。
     パーザオブジェクトのメソッドは下に記載されています。

`msftoframe(minutes, seconds, frames)'
     絶対的なタイムコードである`(MINUTES, SECONDS,
     FRAMES)'の3つ組の表現を、相当するCDのフレームナンバーに変換しま
     す。

`open([device[, mode]])'
     CD-ROMデバイスを開きます。
     不透明なプレーヤーオブジェクトを返します；
     プレーヤーオブジェクトのメソッドは下に記載されています。
     デバイスDEVICEはSCSIデバイスファイルの名前で、例えば
     `'/dev/scsi/sc0d4l0''あるいは`None'です。
     もし省略したり、`None'なら、ハードウエアが検索されてCD-ROMデバイス
     を割り当てます。 MODEは、省略しないなら`'r''にすべきです。

このモジュールでは以下の変数を定義しています：

`error'
     様々なエラーについて発生する例外です。

`DATASIZE'
     オーディオデータの1フレームのサイズです。
     これは`audio'タイプのコールバックへ渡されるオーディオデータのサイ
     ズです。

`BLOCKSIZE'
     オーディオデータが読み取られていないフレーム1つのサイズです。

以下の変数は`getstatus()'で返されるステータス情報です：

`READY'
     オーディオCDがロードされて、ドライブが操作可能であることを示します。

`NODISC'
     ドライブにCDがロードされていないことを示します。

`CDROM'
     ドライブにCD-ROMがロードされていることを示します。
     続いてplayあるいはreadの操作をすると、I/Oエラーを返します。

`ERROR'
     ディスクや目次を読み込もうとしているときに起こるエラー。

`PLAYING'
     ドライブがオーディオCDをCDプレーヤーモードでオーディオ端子から再生
     していることを示します。

`PAUSED'
     ドライブがCDプレーヤーモードで、再生を一時停止していることを示します。

`STILL'
     `PAUSED'と同じですが、古いモデル（non 3301）である Toshiba
     CD-ROMドライブのものです。
     このドライブはもうSGIから出荷されていません。

`audio'

`pnum'

`index'

`ptime'

`atime'

`catalog'

`ident'

`control'
     これらは整数の定数で、パーザのいろいろなタイプのコールバックを示していま
     す。コールバックはCDパーザオブジェクトの`addcallback()'で設定でき
     ます（下記参照）。

* Menu:

* プレーヤーオブジェクト::
* パーザオブジェクト::


File: python-lib-jp.info,  Node: プレーヤーオブジェクト,  Next: パーザオブジェクト,  Prev: cd,  Up: cd

プレーヤーオブジェクト
----------------------

プレーヤーオブジェクト（`open()'で返されます）には以下のメソッ
ドがあります：

`allowremoval()'
     CD-ROMドライブのイジェクトボタンのロックを解除して、ユーザがCDキャディを
     排出するのを許可します。

`bestreadsize()'
     メソッド`readda()'のパラメータNUM_FRAMESとして最適の値を返 します。
     最適値はCD-ROMドライブからの連続したデータフローが許可される値が定義され
     ます。

`close()'
     プレーヤーオブジェクトと関連付けられたリソースを解放します。
     `close()'を呼び出したあとでは、そのオブジェクトに対するメソッドは
     使用できません。

`eject()'
     CD-ROMドライブからキャディを排出します。

`getstatus()'
     CD-ROMドライブの現在の状態に関する情報を返します。
     返される情報は以下の値からなるタプルです：
     STATE、TRACK、RTIME、ATIME、TTIME、
     FIRST、LAST、SCSI_AUDIO、CUR_BLOCK。
     RTIMEは現在のトラックの初めからの相対的な時間；
     ATIMEはディスクの初めからの相対的な時間；
     TTIMEはディスクの全時間です。
     それぞれの値の詳細については、マニュアルページ
     `CDgetstatus(3dm)'を参照してください。
     STATEの値は以下のうちのどれか一つです：
     `ERROR'、`NODISC'、`READY'、 `PLAYING'、`PAUSED'、`STILL'、
     `CDROM'。

`gettrackinfo(track)'
     特定のトラックについての情報を返します。
     返される情報は、トラックの開始時刻とトラックの時間の長さの二つの要素から
     なるタプルです。

`msftoblock(min, sec, frame)'
     分、秒、フレームの3つからなる絶対的なタイムコードを、与えられたCD-ROMド
     ライブの相当する論理ブロック番号に変換します。
     時刻を比較するには`msftoblock()'よりも`msftoframe()'を
     使うべきです。
     論理ブロック番号は、CD-ROMドライブによって必要とされるオフセット値が違う
     ため、フレームナンバーと異なります。

`play(start, play)'
     CD-ROMドライブのオーディオCDの特定のトラックから再生を開始します。
     CD-ROMドライブのヘッドフォン端子と（備えているなら）オーディオ端子から出
     力されます。 ディスクの最後で再生は停止します。
     STARTは再生を開始するCDのトラックナンバーです；
     PLAYが0なら、CDは最初の一時停止状態になります。
     その状態からメソッド`togglepause()'で再生を開始できます。

`playabs(minutes, seconds, frames, play)'
     `play()'と似ていますが、開始位置をトラックナンバーの代わりに分、
     秒、フレームで与えます。

`playtrack(start, play)'
     `play()'と似ていますが、トラックの終わりで再生を停止します。

`playtrackabs(track, minutes, seconds, frames, play)'
     `play()'と似ていますが、指定した絶対的な時刻から再生を開始して、
     指定したトラックで終了します。

`preventremoval()'
     CD-ROMドライブのイジェクトボタンをロックして、ユーザがCDキャディを排出で
     きないようにします。

`readda(num_frames)'
     CD-ROMドライブにマウントされたオーディオCDから、指定したフレーム数を読み
     込みます。 オーディオフレームのデータを示す文字列を返します。
     この文字列はそのままパーザオブジェクトのメソッド`parseframe()'へ
     渡すことができます。

`seek(minutes, seconds, frames)'
     CD-ROMから次にデジタルオーディオデータを読み込む開始位置のポインタを設定
     します。 ポインタはMINUTES、SECONDS、FRAMESで指定した絶対的なタ
     イムコードの位置に設定されます。
     返される値はポインタが設定された論理ブロック番号です。

`seekblock(block)'
     CD-ROMから次にデジタルオーディオデータを読み込む開始位置のポインタを設定
     します。 ポインタは指定した論理ブロック番号に設定されます。
     返される値はポインタが設定された論理ブロック番号です。

`seektrack(track)'
     CD-ROMから次にデジタルオーディオデータを読み込む開始位置のポインタを設定
     します。 ポインタは指定したトラックに設定されます。
     返される値はポインタが設定された論理ブロック番号です。

`stop()'
     現在実行中の再生を停止します。

`togglepause()'
     再生中ならCDを一時停止し、一時停止中なら再生します。

