これは automake-ja.info、automake-ja.texi より makeinfo
バージョン 4.8 によって作成されました。

   This manual is for GNU Automake (version 1.9, 28 July 2004), a
program which creates GNU standards-compliant Makefiles from template
files.

   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* automake(ja): (automake-ja).		Making Makefile.in's.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* aclocal(ja): (automake-ja)Invoking aclocal.          Generating aclocal.m4.
END-INFO-DIR-ENTRY


File: automake-ja.info,  Node: Top,  Next: Introduction,  Up: (dir)

GNU Automake
************

This manual is for GNU Automake (version 1.9, 28 July 2004), a program
which creates GNU standards-compliant Makefiles from template files.

   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

* Menu:

* Introduction::                Automake's purpose
* Generalities::                General ideas
* Examples::                    Some example packages
* Invoking Automake::           Creating a Makefile.in
* configure::                   Scanning configure.ac or configure.in
* Directories::                 Declaring subdirectories
* Programs::                    Building programs and libraries
* Other objects::               Other derived objects
* Other GNU Tools::             Other GNU Tools
* Documentation::               Building documentation
* Install::                     What gets installed
* Clean::                       What gets cleaned
* Dist::                        What goes in a distribution
* Tests::                       Support for test suites
* Rebuilding::                  Automatic rebuilding of Makefile
* Options::                     Changing Automake's behavior
* Miscellaneous::               Miscellaneous rules
* Include::                     Including extra files in an Automake template.
* Conditionals::                Conditionals
* Gnits::                       The effect of `--gnu' and `--gnits'
* Cygnus::                      The effect of `--cygnus'
* Not Enough::                  When Automake is not Enough
* Distributing::                Distributing the Makefile.in
* API versioning::              About compatibility between Automake versions
* Upgrading::                   Upgrading to a Newer Automake Version
* FAQ::                         Frequently Asked Questions
* Copying This Manual::         How to make copies of this manual
* Indices::                     Indices of variables, macros, and concepts

 --- ノードリストの詳細 ---

一般的な考え

* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require

いくつかのパッケージの例

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* true::                        Building true and false

`configure.ac'のスキャン

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* aclocal options::             aclocal command line arguments
* Macro search path::           Modifying aclocal's search path
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
* Local Macros::                Organizing local macros
* Future of aclocal::           aclocal's scheduled death

`aclocal.m4'の自動生成

* aclocal options::             Options supported by aclocal
* Macro search path::           How aclocal finds .m4 files

Automakeが提供するAutoconfマクロ

* Public macros::               Macros that you can use.
* Private macros::              Macros that you should not use.

ディレクトリ

* Subdirectories::              Building subdirectories recursively
* Conditional Subdirectories::  Conditionally not building directories
* Alternative::                 Subdirectories without recursion
* Subpackages::                 Nesting packages

プログラムとライブラリのビルド

* A Program::                   Building a program
* A Library::                   Building a library
* A Shared Library::            Building a Libtool library
* Program and Library Variables::  Variables controlling program and
                                library builds
* Default _SOURCES::            Default source files
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::                 Compiling C++ sources
* Assembly Support::            Compiling assembly sources
* Fortran 77 Support::          Compiling Fortran 77 sources
* Fortran 9x Support::          Compiling Fortran 9x sources
* Java Support::                Compiling Java sources
* Support for Other Languages::  Compiling other languages
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking
* EXEEXT::                      Support for executable extensions

プログラムのビルド

* Program Sources::             Defining program sources
* Linking::                     Linking with libraries or extra objects
* Conditional Sources::         Handling conditional sources
* Conditional Programs::        Building program conditionally

共有ライブラリのビルド

* Libtool Concept::             Introducing Libtool
* Libtool Libraries::           Declaring Libtool Libraries
* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally
* Conditional Libtool Sources::  Choosing Library Sources Conditionally
* Libtool Convenience Libraries::  Building Convenience Libtool Libraries
* Libtool Modules::             Building Libtool Modules
* Libtool Flags::               Using _LIBADD and _LDFLAGS
* LTLIBOBJ::                    Using $(LTLIBOBJ)
* Libtool Issues::              Common Issues Related to Libtool's Use

Fortran 77のサポート

* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources
* Compiling Fortran 77 Files::  Compiling Fortran 77 sources
* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++

CとC++と，Fortran 77との混在

* How the Linker is Chosen::    Automatic linker selection

Fortran 9xのサポート

* Compiling Fortran 9x Files::  Compiling Fortran 9x sources

その他の生成されるオブジェクト

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources

ビルドされているソース

* Built sources example::       Several ways to handle built sources.

その他のGNUツール

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Libtool::                     Libtool
* Java::                        Java
* Python::                      Python

ドキュメントのビルド

* Texinfo::                     Texinfo
* Man pages::                   Man pages

雑多なルール

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions
* Multilibs::                   Support for multilibs.

Automakeが十分でないとき

* Extending::                   Adding new rules or overriding existing ones.
* Third-Party Makefiles::       Integrating Non-Automake `Makefile's.

Automakeに関するよくある質問

* CVS::                         CVS and generated files
* maintainer-mode::             missing and AM_MAINTAINER_MODE
* wildcards::                   Why doesn't Automake support wildcards?
* distcleancheck::              Files left in build directory after distclean
* renamed objects::             Why are object files sometimes renamed?
* Multiple Outputs::            Writing rules for tools with many output files

このマニュアルのコピーについて

* GNU Free Documentation License::  License for copying this manual

索引

* Macro and Variable Index::    Index of Autoconf macros and Automake variables
* General Index::               General index


File: automake-ja.info,  Node: Introduction,  Next: Generalities,  Prev: Top,  Up: Top

1 はじめに
**********

Automakeは，`Makefile.am'というファイルから，`Makefile.in'を
自動的に生成するツールです．それぞれの`Makefile.am'は，基本的には
一連の`make'変数の定義(1)に
なっていて，ルールが時折導入されています．生成された`Makefile.in' はGNU
Makefileの標準に従います．

   GNU Makefile Standards Documentは(*note Makefile Conventions:
(standards)Makefile Conventions.)，長くて複雑で変更の原因にもなり
ます．Automakeの目的は，個別のGNU管理者の背中からMakefle管理の負担を取
り除く(そしてAutomake管理者に任せる)ことです．

一般的なAutomakeの入力ファイルは，単純な一連の変数定義です．それぞれの
ファイルは，`Makefile.in'を作成するために処理されます．通常，プロ
ジェクト内のディレクトリごとに，一つの`Makefile.am'を配置します．

   Automakeは，若干プロジェクトに制限を与えます．例えば，プロジェクトで
Autoconf(*note Introduction: (autoconf)Top.)
を使用していると仮定すると，`configure.ac'の内容には，ある制限が
生じます(2)．

   Automakeでは，`Makefile.in'を生成するために`perl'が必要にな
ります．しかし，Automakeで作成された配布物は完全にGNUの標準に従ってい
て，ビルドするために`perl'は不要です．

   <bug-automake@gnu.org>宛にAutomakeの提案とバグレポートをメール
してください．

   ---------- Footnotes ----------

   (1) これらの変数は，Makeの用語では "makeのマクロ(make
macros)"とも呼ばれていますが，このマニュアルで は，"マクロ(macro)"
はAutoconfのマクロの予約語になっています．

   (2) 古いバージョンのAutoconfでは`configure.in'を使
用していました．Autoconf 2.50とそれ以降では，`configure.in'ではな
く`configure.ac'を推奨しています．このドキュメントの残りの部分で
は`configure.ac'について説明していますが，後方互換性として Automake
は`configure.in'もサポートしています．


File: automake-ja.info,  Node: Generalities,  Next: Examples,  Prev: Introduction,  Up: Top

2 一般的な考え
**************

以下のセクションで，Automakeが動作する方法を理解することに役立つ，基本
的な考えをいくつか述べます．

* Menu:

* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require


File: automake-ja.info,  Node: General Operation,  Next: Strictness,  Up: Generalities

2.1 一般的な操作
================

Automakeは`Makefile.am'を読み込み，`Makefile.in'を生成します．
`Makefile.am'で定義されている変数とルールで，Automake は更に特殊
なコードを生成します．例えば，`bin_PROGRAMS'変数定義で，生成され
るプログラムをコンパイルしてリンクするルールを生成します．

   `Makefile.am'の変数定義とルールは，そのまま生成されたファイルにコ
ピーされます．これにより，生成される`Makefile.in'に任意のコードを
加えることが可能になります．例えばAutomakeの配布物には，Automake管理者
がソースコントロールシステムから配布物を作成するときに使用する，非標準
的な`cvs-dist'ターゲットが含まれています．

   ほとんどのGNU
makeの拡張は，Automakeが理解しないことに注意してください．
`Makefile.am'でこのような拡張を使用すると，エラーが生じたり紛らわ
しい動作をしたりします．

   特別な例外として，GNU makeの追加オペレータの`+='はサポートされて
います．このオペレータは，その右辺の引数を左辺で指定された変数に追加し
ます．Automakeはそのオペレータを通常の`='オペレータに変換します．
このため`+='は，あらゆるmakeプログラムでうまく動作します．

Automakeは賢い方法で，ルールや変数定義に隣接しているグループ化されたコ
メントの保持を試みます．

   一般に，`Makefile.am'で定義されているルールは，`automake'に
よって自動的に生成されるルールに似た名前を持つものに優先します．これは
サポートされている機能ですが，一般的に，生成されるルールは非常に特殊な
こともあるので，それを利用することは避けたほうがよいでしょう．

   同様に，`Makefile.am'で定義されている変数や`configure.ac'で
`AC_SUBST'されているものも，`automake'が通常作成するあらゆる
変数定義より優先されます．この機能は，ルール優先の機能より役に立つこと
が多いでしょう．`automake'で生成された多くの変数は，内部で使用す
ることだけ考慮されていて，それら名前が将来のリリースで変更される可能性
があることに注意しておいてください．

変数定義を調査しているとき，Automakeは定義で参照されている変数を再帰的
に調査します．例えば，以下の断片的な`foo_SOURCES'の内容をAutomake
が調査している状況を考えます．

     xs = a.c b.c
     foo_SOURCES = c.c $(xs)

   それは，ファイル`a.c'，`b.c'，そして`c.c'を
`foo_SOURCES'の内容として使用します．

   Automakeでは，出力ファイルにコピー_されない_コメントの形式も利用
可能です．Automakeは`##'で始まる(スペースの前置は可能です)すべて
の行を完全に無視します．

   読み込まれる`Makefile.am'の最初の行に，以下の行を書くのはいつもの
ことです．

     ## Process this file with automake to produce Makefile.in


File: automake-ja.info,  Node: Strictness,  Next: Uniform,  Prev: General Operation,  Up: Generalities

2.2 厳密さ
==========

Automakeは，GNUパッケージの管理者が使用することを目的としていますが，
使用したいけれども，すべてのGNU規約を使用したいわけではない人たちをも
受け入れる努力をしています．

   このため，Automakeは三つの"厳密さ"のレベルをサポートします -- 厳
密さとは，Automakeに調査させる標準への適合度を示すものです．

   有効な厳密さのレベルは以下のとおりです．

`foreign'
     Automakeは，適切な処理のため絶対に必要なものだけを調査します．例えば，
     GNUの標準は`NEWS'ファイルが存在することを必要としますが，このモー
     ドで必要ではありません．この名前(foreign)は，本来はGNUプログラムのため
     にAutomakeを使用して欲しいのでこのように名付けられています．これらの緩
     い規則は標準的な操作様式ではありません．

`gnu'
     Automakeは，パッケージがGNUの標準に準拠しているかどうか --
     可能な限り -- 調査します．これはデフォルトです．

`gnits'
     Automakeは，まだ書かれていない"Gnits standards"に準拠しているかど
     うかを調査します．これらはGNUの標準に基づいていますが，より詳しく記述
     されています．Gnits standardsの貢献者でない場合，Gnits
     standardsが実際
     に発表されるときまで(発表されることはないかもしれませんが)，このオプショ
     ンの使用を避けるよう推奨します．

   厳密さのレベルの正確な意味についての詳細は，*Note
Gnits::を参照してくだ さい．

   Automakeには，厳密さに似ていますが異なる扱いを受ける，特殊な"cygnus"
モードもあります．このモードは，"Cygnus"形式のツリー(例えば，GCCツリー)
に配置するパッケージで役に立ちます．このモードの詳細は，*Note Cygnus::を
参照してください．


File: automake-ja.info,  Node: Uniform,  Next: Canonicalization,  Prev: Strictness,  Up: Generalities

2.3 一様な命名法
================

Automake変数は，一般に以下の"一様な命名法(uniform naming scheme)"
に従っていて，それは，プログラム(とその他の派生されるオブジェクト)のビ
ルド方法と，それらのインストール方法の決定を容易にします．この手法は，
`configure'時にビルドするものを決定することもサポートしています．

   `make'時にビルドするオブジェクトを決定するため，特定の変数を使用
します．変数の名前は，いくつかの部品をお互いに連結したものからできてい
ます．

   ビルドするものをautomakeに伝える部品は，一般に"プライマリ"と呼ばれ
ています．例えば，プライマリの`PROGRAMS'は，コンパイルされリンク
されるプログラムのリストを保持しています． 

ビルドしたオブジェクトをインストールする場所を決定するため，異なる名前
の組が使用されます．これらの名前はプライマリに前置されていて，それはイ
ンストールするディレクトリとして使用される標準的なディレクトリを示して
います．標準的なディレクトリ名はGNUの標準で与えられています (*note
Directory Variables: (standards)Directory Variables.)．
Automakeは，`pkglibdir'，`pkgincludedir'，そして
`pkgdatadir'を用いて，このリストを拡張します．これらは非
`pkg'のバージョンと同じですが，`$(PACKAGE)'が付加されます．
例えば，`pkglibdir'は`$(libdir)/$(PACKAGE)'として定義されま す． 

   それぞれのプライマリに対して，`EXTRA_'をプライマリ名に前置して命
名された追加の変数があります．この変数は，ビルドされたりされなかったり
する可能性のあるオブジェクトのリストで使用され，それは，
`configure'が決定したものに依存します．Automakeは，すべての状況で
動作する`Makefile.in'を生成するために，ビルドされる可能性のあるオ
ブジェクト全体のリストをあらかじめ知っておく必要があるので，この変数が
必要になります．

   例えば，`cpio'はconfigure時にビルドするプログラムを決定します．
`bindir'にインストールされるプログラムもあれば，`sbindir'に
インストールされるものもあります．

     EXTRA_PROGRAMS = mt rmt
     bin_PROGRAMS = cpio pax
     sbin_PROGRAMS = $(MORE_PROGRAMS)

   接頭辞がないプライマリを変数として定義すること，例えば`PROGRAMS'
はエラーになります．

   一般的な`dir'接尾辞は，変数名を作るときには捨てられることに注意し
て下さい．このため，`bindir_PROGRAMS'ではなく，
`bin_PROGRAMS'と書きます．

すべての種類のオブジェクトが，すべてのディレクトリにインストールされる
わけではありません．Automakeはエラーを見つけたとき，フラグを付けようと
します．Automakeはディレクトリ名での明らかなスペルミスも診断します．

   標準ディレクトリは -- Automakeによって強化されてはいますが -- 十分で
ない場合もあります．特に，前もって定義されているディレクトリのサブディ
レクトリにオブジェクトをインストールすると役に立つこともあります．この
ため，Automakeはインストール可能なディレクトリのリストを拡張することを
可能にします．与えられている接頭辞(例えば`zar')は，同じ名前の変数
に`dir'を付加した変数(例えば`zardir')が定義されている場合に 有効です．

例えば，HTMLファイルのインストールはAutomakeの一部ですが，以下のように
して生のHTMLドキュメントをインストール可能です．

     htmldir = $(prefix)/html
     html_DATA = automake.html

   特別な接頭辞`noinst'は，該当するオブジェクトをビルドしインストー
ルは決して行なわないことを示します．これは，パッケージ残りのビルドで必
要なオブジェクト，例えば，スタティックライブラリ(*note A Library::)や，
補助的なスクリプトに対して有効です．

   特別な接頭辞`check'は，該当するオブジェクトが`make check'コ
マンドが実行されるまでビルドされないことを示します．これらのオブジェク
トはインストールもされません．

   現在のプライマリ名は，`PROGRAMS'，`LIBRARIES'，`LISP'，
`PYTHON'，`JAVA'，`SCRIPTS'，`DATA'，
`HEADERS'，`MANS'，そして`TEXINFOS'です． 

   `automake'の動作の他の側面を制御する，追加の接頭辞が可能なプライ
マリもあります．現在定義されている接頭辞は，`dist_'，
`nodist_'，そして`nobase_'です．これらの接頭辞は後で説明しま す(*note
Program and Library Variables::)．


File: automake-ja.info,  Node: Canonicalization,  Next: User Variables,  Prev: Uniform,  Up: Generalities

2.4 派生される変数と命名法
==========================

Makefileの変数名は，管理者が提供するいくつかのテキストから派生すること
もあります．例えば，`_PROGRAMS'にリストアップされているプログラム
名は，`_SOURCES'変数の名前にも再び書き込まれます．このような状況
では，プログラム名とそれに類似したものがMakefileの変数命名規則に従う必
要が無いように，Automakeはテキストを標準に従うものにします．名前の中の
文字，数字，アットマーク(@)，そしてアンダースコア以外のすべての文字は，
変数で参照されるときにアンダースコアに変換されます．

   例えば，プログラムを`sniff-glue'と命名する場合，派生する変数名は，
`sniff-glue_SOURCES'ではなく`sniff_glue_SOURCES'になります．
同様に，`libmumble++.a'と命名されるライブラリのソースは，
`libmumble___a_SOURCES'変数にリストアップすべきです．

変数名の内部でAutoconfの置換を使用する際にできるだけ明瞭にするため，アッ
トマーク(strudel)が追加されています．


File: automake-ja.info,  Node: User Variables,  Next: Auxiliary Programs,  Prev: Canonicalization,  Up: Generalities

2.5 ユーザに対して予約されている変数
====================================

`Makefile'変数には，"user"が使用するためにGNU Coding Standards
で予約されているものもあります - それはパッケージを構築する人のためで
す．例えば，`CFLAGS'はそのような変数の一つです．

   パッケージ開発者は，明らかに仕事を簡単にするために，`CFLAGS'のよ
うなユーザ変数の設定を試みるときもあります．しかし，パッケージ自身でユー
ザ変数を設定すべきではなく，特に，パッケージの適切なコンパイルに要求さ
れるスイッチを含めるべきではありません．これらの変数はパッケージの構築
者に対して説明されるので，人々は，ビルド時にこれらの変数に優先させるこ
とが可能だと期待しています．

   この問題を解決するため，automakeはそれぞれのユーザフラグ変数に対し，
automake特有の隠れた変数を導入しています．(隠れた変数は，`CC'のよ
うな変数に対しては導入されておらず，それは意味が無いためです．)隠れた
変数は，ユーザ変数名に`AM_'を前置して命名されています．例えば，
`YFLAGS'に対する隠れた変数は，`AM_YFLAGS'になります．


File: automake-ja.info,  Node: Auxiliary Programs,  Prev: User Variables,  Up: Generalities

2.6 automakeが必要とする可能性があるプログラム
==============================================

生成された`Makefile'が適切に動作するように，automakeが補助的なプ
ログラムを必要とすることもあります．それらは数がかなり多いのですが，こ
こにリストアップします．

`ansi2knr.c'
`ansi2knr.1'
     これらの二つのファイルは，自動的なde-ANSI-ficationのサポートで使用され
     ます(*note ANSI::)．

`compile'
     これは，`-c'と`-o'の両方を同時に受け入れることができないコン
     パイラに対するラッパーです．それは実際に要求されたときだけ使用されます．
     そのようなコンパイラは滅多にありません．

`config.guess'
`config.sub'
     これらのプログラムは，与えられているビルド，ホスト，またはターゲットの
     アーキテクチャといった，三つの標準的なものを調べます．これらのプログラ
     ムは，新しいアーキテクチャのサポートや新しいカーネルでの変更で検査の失
     敗を修正するために定期的に更新されています．これらのファイルの最新バー
     ジョンを`ftp://ftp.gnu.org/gnu/config/'から取得して，リリース物を
     作成する前に確かめてください．

`depcomp'
     要求された出力だけでなく，自動的な依存性の追跡機能で使用されている依存
     情報も生成するために，このプログラムはコンパイラの実行方法を理解します．

`elisp-comp'
     このプログラムは，Emacs
     Lispコードをバイトコンパイルするために使用され ます．

`install-sh'
     これは，`install'プログラムの代わりのもので，`install'の利用
     や使用が不可能なプラットフォームで動作します．

`mdate-sh'
     このスクリプトは，`version.texi'ファイルを生成します．それはファ
     イルを調査し，それに関する日付の情報を出力します．

`missing'
     これは，通常管理者だけが必要とするいくつかのプログラムのラッパーです．
     該当のプログラムが存在しない場合，`missing'は情報を伝える警告を出
     力し，ビルドを継続することが可能になるように修正を試みます．

`mkinstalldirs'
     このスクリプトは移植性が無い`mkdir -p'のラッパーです．現在我々は，
     `mkdir -p'が動作しないことをconfigure時に見つけたとき，
     `install-sh -d'を使用するようにしていて，これで配布時のスクリプト
     が少なくなります．

     `automake'がパッケージで`mkinstalldirs'を見つけた時，後方互
     換性のため，それはまだ使用され配布されます．しかし，それはもはや自動的
     にインストールされず，削除した方が安全でしょう．

`py-compile'
     これは，Pythonスクリプトをバイトコンパイルするために使用されます．

`texinfo.tex'
     プログラムではなく，パッケージにTexinfoソースファイルがあるとき，この
     ファイルは，`make dvi'，`make ps'，そして`make pdf'を動
     作させるために必要になります．

`ylwrap'
     このプログラムは，`lex'と`yacc'のラッパーで，例えば，複数の
     `yacc'のインスタンスを単一のディレクトリで，並行して呼び出すこと
     が可能であることを確かめます．



File: automake-ja.info,  Node: Examples,  Next: Invoking Automake,  Prev: Generalities,  Up: Top

3 いくつかのパッケージの例
**************************

* Menu:

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* true::                        Building true and false


File: automake-ja.info,  Node: Complete,  Next: Hello,  Up: Examples

3.1 簡単なサンプル例の最初から最後まで
======================================

さて，渦から渦まで頭を浮かせる(?)プログラムの`zardoz'を，たった今
書き終えたと仮定します．移植性のフレームワークを提供するためにAutoconf
を使用していましたが，`Makefile.in'は特別に作成しました．それらを
堅牢にしたいのでAutomakeに切替えてみましょう．

   第一歩は`automake'が必要とするコマンドを含めるため，
`configure.ac'の更新を開始します．こうする方法は，`AC_INIT'
の直後に`AM_INIT_AUTOMAKE'の呼び出しを加えることです．

     AC_INIT(zardoz, 1.0)
     AM_INIT_AUTOMAKE
     ...

   プログラムには，(例えば，`gettext'を使用していないし，共有ライブ
ラリもビルドしないし)複雑な要因が全くないので，この部分はおしまいです．
なんて簡単なんでしょう！

   さて`configure'を再生成する必要があります．しかしこうするためには，
使用している新しいマクロを見つける方法を`autoconf'に伝える必要が
あります．こうするための最も簡単な方法は，`aclocal.m4'を生成する
`aclocal'プログラムを使用することです．しかしちょっと待って下さい
...プログラムに対してちょっとマクロを書く必要があり，既に
`aclocal.m4'があるかもしれません．`aclocal'プログラムでは，
マクロを`acinclude.m4'に書いておく必要があるので，単純に名前を変
更して以下のように実行します．

     mv aclocal.m4 acinclude.m4
     aclocal
     autoconf

   さて`zardoz'に対する`Makefile.am'を書く時間がやってきました．
`zardoz'はユーザプログラムなので，他のユーザプログラムがインストー
ルされる場所にインストールしたいと思います．`bindir'です．さらに，
`zardoz'にはTexinfoドキュメントもあります．`configure.ac'ス
クリプトでは`AC_REPLACE_FUNCS'を使用するので，`$(LIBOBJS)'
をリンクする必要があります．そのため以下のように書いたほうが良いでしょ
う．

     bin_PROGRAMS = zardoz
     zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c
     zardoz_LDADD = $(LIBOBJS)

     info_TEXINFOS = zardoz.texi

   さて，`Makefile.in'を生成するために`automake --add-missing'
を実行して，必要な補助ファイルを入手して，おしまいです！


File: automake-ja.info,  Node: Hello,  Next: true,  Prev: Complete,  Up: Examples

3.2 古典的なプログラム
======================

GNU hello (ftp://prep.ai.mit.edu/pub/gnu/hello-1.3.tar.gz)は，古
典的単純さと融通性で有名です．このセクションでは，AutomakeをGNU Hello
パッケージに使用する方法を示します．以下の例は，GNU Helloの最近のベー
タバージョンからのものですが，著作権のコメント全体と同様に，管理者専用
のすべてのコードが取り除かれています．

   もちろん，GNU Helloは伝統的な二行より幾分長くなっています．GNU
Helloは
国際化されていて，オプション処理をして，そしてマニュアルとテストスイー
トもあります．

   GNU Helloの`configure.ac'は以下のようになっています．*注意
して下さい:* 例にある`AC_INIT'と`AM_INIT_AUTOMAKE'の呼出は，
推奨されない構文です．現在の手法は，*Note Public macros::の
`AM_INIT_AUTOMAKE'の記述を参照して下さい．

     dnl Process this file with autoconf to produce a configure script.
     AC_INIT(src/hello.c)
     AM_INIT_AUTOMAKE(hello, 1.3.11)
     AM_CONFIG_HEADER(config.h)

     dnl Set of available languages.
     ALL_LINGUAS="de fr es ko nl no pl pt sl sv"

     dnl Checks for programs.
     AC_PROG_CC
     AC_ISC_POSIX

     dnl Checks for libraries.

     dnl Checks for header files.
     AC_STDC_HEADERS
     AC_HAVE_HEADERS(string.h fcntl.h sys/file.h sys/param.h)

     dnl Checks for library functions.
     AC_FUNC_ALLOCA

     dnl Check for st_blksize in struct stat
     AC_ST_BLKSIZE

     dnl internationalization macros
     AM_GNU_GETTEXT
     AC_OUTPUT([Makefile doc/Makefile intl/Makefile po/Makefile.in \
                src/Makefile tests/Makefile tests/hello],
        [chmod +x tests/hello])

   `AM_'マクロは，Automake(あるいはGettextライブラリ)によって提供さ
れています．残りは標準的なAutoconfマクロです．

   最上位の`Makefile.am'は以下のようになっています．

     EXTRA_DIST = BUGS ChangeLog.O
     SUBDIRS = doc intl po src tests

御覧のように，ここでの仕事はすべてサブディレクトリで実際に実行されます．

   `po'と`intl'ディレクトリは，`gettextize'を使用すること
で自動的に生成されます．それらについてはここで述べません．

   `doc/Makefile.am'は以下のようになっています．

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   これで，GNU Helloマニュアルをビルドして，インストールして，そして配布
するには十分です．

   `tests/Makefile.am'は以下のようになっています．

     TESTS = hello
     EXTRA_DIST = hello.in testdata

   `hello'スクリプトは，`configure'により生成され，それはテスト
ケースのみで生成されます．`make check'でこのテストを実行します．

   最後は`src／Makefile.am'で，実際にすべての仕事が行なわれる場所で す．

     bin_PROGRAMS = hello
     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
     hello_LDADD = $(INTLLIBS) $(ALLOCA)
     localedir = $(datadir)/locale
     INCLUDES = -I../intl -DLOCALEDIR=\"$(localedir)\"


File: automake-ja.info,  Node: true,  Prev: Hello,  Up: Examples

3.3 trueとfalseのビルド
=======================

以下にもう一つの，トリッキーな例があります．それは同じソースファイル
(`true.c')から二つのプログラム(`true'と`false')を生成す
る方法を示します．難しい部分は，それぞれの`true.c'のコンパイルで，
異なる`cpp'フラグが必要になるということです．

     bin_PROGRAMS = true false
     false_SOURCES =
     false_LDADD = false.o

     true.o: true.c
             $(COMPILE) -DEXIT_CODE=0 -c true.c

     false.o: true.c
             $(COMPILE) -DEXIT_CODE=1 -o false.o -c true.c

   `true_SOURCES'の定義が無いことに注意してください．Automake は，ソー
スファイル名`true.c'が存在すると暗黙に仮定し，`true.o'にコン
パイルし，`true'にリンクするルールを定義します．上記の
`Makefile.am'で提供されている`true.o: true.c'のルールは，
Automakeが生成する`true.o'をビルドするためのルールに優先します．

   `false_SOURCES'は空で定義されています -- その方法では，暗黙の値
で置換されません．`false'のソースでリストアップしていないので，プ
ログラムをリンクする方法をAutomakeに伝える必要があります．これが
`false_LDADD'行の目的です．`false_DEPENDENCIES'変数は
`false'ターゲットの依存性を保持していて，`false_LDADD'の内容
からAutomakeが自動的に生成されます．

   上記のルールは，コンパイラが`-c'と`-o'の両方を受け入れない場
合は動作しません．これを簡単に修正するため，(並行した`make'の問題
を避けるために)偽の依存性を導入します．

     true.o: true.c false.o
             $(COMPILE) -DEXIT_CODE=0 -c true.c

     false.o: true.c
             $(COMPILE) -DEXIT_CODE=1 -c true.c && mv true.o false.o

また，これらの明示的なルールは，de-ANSI-ficationが使用される場合は動作
しません(*note ANSI::)．de-ANSI-ficationをサポートするためには，もう少
し多くの仕事が必要です．

     true_.o: true_.c false_.o
             $(COMPILE) -DEXIT_CODE=0 -c true_.c

     false_.o: true_.c
             $(COMPILE) -DEXIT_CODE=1 -c true_.c && mv true_.o false_.o

お分かりのように，同じ作業を行なうため，よりいっそう簡単な方法もありま
す．上記のテクニックには，マニュアルの例として残しておくには十分役に立
つものもあります．しかし，`true'と`false'を現実的にビルドす
る場合は，以下のように，おそらくプログラムごとにコンパイルのフラグを使
用することでしょう．

     bin_PROGRAMS = false true

     false_SOURCES = true.c
     false_CPPFLAGS = -DEXIT_CODE=1

     true_SOURCES = true.c
     true_CPPFLAGS = -DEXIT_CODE=0

   この状況では，Automakeによって，`true.c'は異なるフラグで二度コン
パイルされることになります．de-ANSI-ficationは自動的に動作します．この
例では，オブジェクトファイルの名前はautomakeが選択します．それは
`false-true.o'と`true-true.o'になるでしょう．(オブジェクトファ
イルの名前が問題となることは滅多にありません．)


File: automake-ja.info,  Node: Invoking Automake,  Next: configure,  Prev: Examples,  Up: Top

4 `Makefile.in'の生成
*********************

パッケージに対するすべての`Makefile.in'を作成するため，
`automake'プログラムを最上位のディレクトリで，引数無しで実行して
ください．`automake'は，(`configure.ac'をスキャンしながら *note
configure::)，自動的にそれぞれ適切な`Makefile.am'を見つけ，
対応する`Makefile.in'を生成します．`automake'では，パッケー
ジを構成するものへの視野がかなり単純になっていることに注意してください．
それは，一つのパッケージにはトップディレクトリにただ一つ
`configure.ac'があることを想定しています．パッケージに複数の
`configure.ac'がある場合，`configure.ac'があるそれぞれのディ
レクトリで`automake'を実行する必要があります．(代わりの方法として，
パッケージツリーを巡回して，適切な場所で`automake'を実行すること
が可能な，Autoconfの`autoreconf'をあてにしてもかまいません．)

   オプションとして`automake'に引数を与えることが可能です．
`.am'が引数に後置され，その結果が入力ファイルの名前として使用され
ます．この機能は，一般的に，時代遅れの`Makefile.in'を自動的にリビ
ルドするためだけに使用します．いくつかのサブディレクトリで
`Makefile.in'を再生成するために使用している場合でも，プロジェクト
のトップディレクトリで`automake'を実行する必要があることに注意し
てください．これは，`automake'は`configure.ac'をスキャンする
必要があるため，そして，`automake'が状況によってその動作を変更す
るため，`Makefile.in'がサブディレクトリに存在するという知識を使用
するためです．

   Automakeは，`configure.ac'をスキャンするためと，その依存性
(`aclocal.m4')のため，`autoconf'を実行するので，
`autoconf'は`PATH'に存在する必要があります．`AUTOCONF'
変数が環境変数にある場合，`autoconf'の代わりにそれを使用し，これ
で特定のバージョンのAutoconfを選択することが可能になります．ところで，
この段落を誤解しないでください．Automakeは`configure.ac'を
*スキャン*するために`autoconf'を実行するのであって，
`configure'をビルドするわけではありません．この目的に対しては
`autoconf'を自分で実行する必要があります．

   `automake'は以下のオプションを受け入れます．

`-a'
`--add-missing'
     Automakeには，ある共通ファイルが存在することを要求する状況もあります．
     例えば，`configure.ac'で`AC_CANONICAL_HOST'を実行する場合，
     `config.guess'が必要です．Automakeはこれらのファイルのいくつかと
     一緒に配布されています(*note Auxiliary
     Programs::)．このオプションは，
     可能であれば，足りないものを自動的にパッケージに加えます．一般的に，
     Automakeが足りないファイルがあることを告げる場合，このオプションを使用
     してみてください．デフォルトでAutomakeは，足りないファイルを指し示すシ
     ンボリックリンクの作成を試みます．これは`--copy'で変更可能です．

     足りない可能性のあるファイルの多くは共通スクリプトで，それは
     `AC_CONFIG_AUX_DIR'マクロで指定した場所に配置してもかまいません．
     このため，`AC_CONFIG_AUX_DIR'の設定は，ファイルが足りないかどうか
     を考慮したり，足りないファイルを追加する場所(*note
     Optional::)に影響し ます．

`--libdir=DIR'
     Automakeのデータファイルを，インストールされたディレクトリではなく
     DIRで探します．これは通常，デバッグで使用されます．

`-c'
`--copy'
     `--add-missing'と一緒に使用するとき，インストールされるファイルを
     コピーします．デフォルトではシンボリックリンクを作成します．

`--cygnus'
     GNUやGnitsの規則の代わりに，Cygnusの規則に従う`Makefile.in'を生成
     します．詳細は，*Note Cygnus::を参照してください．

`-f'
`--force-missing'
     `--add-missing'とともに使用するとき，標準のファイルがソースツリー
     に存在する場合でもそれらを再インストールします．これで，新しいシンボリッ
     クリンクを作成する前に，ソースツリーからファイルを削除します(または，
     `--copy'とともに使用すると，新しいファイルをコピーします)．

`--foreign'
     グローバルな厳密さを`foreign'に設定します．詳細は， *Note
     Strictness::を参照してください．

`--gnits'
     グローバルな厳密さを`gnits'に設定します．詳細は，*Note Gnits::を参
     照してください．

`--gnu'
     グローバルな厳密さを`gnu'に設定します．詳細は，*Note Gnits::を参照
     してください．これはデフォルトの厳密さです．

`--help'
     コマンドラインオプションの概要を出力して終了します．

`-i'
`--ignore-deps'
     これは，生成される`Makefile'での依存性追跡の機能を使用不可能にし
     ます．*Note Dependencies::を参照してください．

`--include-deps'
     依存性追跡の機能を使用可能にします．この機能は，デフォルトで使用可能で
     す．このオプションは歴史的な理由でのみ提供されていて，おそらく使用すべ
     きではありません．

`--no-force'
     通常`automake'は，`configure.ac'で記述されているすべての
     `Makefile.in'を作成します．このオプションは，依存性の一つの側面を
     用いて，時代遅れになっている`Makefile.in'だけを更新します．

`-o DIR'
`--output-dir=DIR'
     生成された`Makefile.in'をDIRに配置します．通常，それぞれの
     `Makefile.in'は，`Makefile.am'に対応するディレクトリに作成さ
     れます．このオプションの使用は反対で，将来のリリースでは削除されるでしょ
     う．

`-v'
`--verbose'
     読み込まれたり作成されたりしているファイルの情報をAutomakeに出力させま
     す．

`--version'
     Automakeのバージョンナンバーを出力して終了します．

`-W CATEGORY'

`--warnings=CATEGORY'
     CATEGORYにあてはまる警告を出力します．CATEGORYは以下の一つ です．
    `gnu'
          GNU Coding Standards(*note Top:
          (standards)Top.)に関連する警告です．

    `obsolete'
          時代遅れの機能と構成物です．

    `override'
          Automakeのルールと変数のユーザによる再定義．

    `portability'
          移植性の問題です(例えば，移植性が無いことが知られているMakeの機能)．

    `syntax'
          怪しい構文，未使用の変数，入力ミスです．

    `unsupported'
          サポートされていない，または不完全な機能です．

    `all'
          すべての警告です．

    `none'
          すべての警告をオフにします．

    `error'
          警告をエラーとして処理します．

     カテゴリは，その名前に`no-'を前置することでオフにすることが可能で
     す．例えば，`-Wno-syntax'は未使用の変数に関する警告を隠します．

     デフォルトで出力されるカテゴリは，`syntax'と`unsupported'で
     す．さらに，`gnu'は`--gnu'と`--gnits'の厳密さで有効にな ります．

     `portability'の警告は，現在デフォルトでは無効になっていますが，将
     来のリリースでは，`--gnu'と`--gnits'の厳密さで有効になるでしょ う．

     環境変数`WARNINGS'に，カンマで分けた有効にするカテゴリのリストを
     含めることが可能です．それは，コマンドラインスイッチの前に累積され，こ
     の方法で`-Wnone'することで，`WARNINGS'で有効にしたすべての警
     告カテゴリを無視します．この変数は`autoconf'のような他のツール
     でも使用されます．このため，未知のカテゴリは無視されます．



File: automake-ja.info,  Node: configure,  Next: Directories,  Prev: Invoking Automake,  Up: Top

5 `configure.ac'のスキャン
**************************

Automakeは，パッケージに関する特定の情報を決定するために，パッケージの
`configure.ac'をスキャンします．必要な`autoconf'マクロもあれ
ば，`configure.ac'で定義する必要がある変数もあります．Automakeは，
出力物を調整するためにも，`configure.ac'からの情報を使用します．

Automakeは，管理をより容易にするためのAutoconfマクロも提供しています．
これらのマクロは，`aclocal'プログラムを使用して自動的に
`aclocal.m4'に書き込むことが可能です．

* Menu:

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* aclocal options::             aclocal command line arguments
* Macro search path::           Modifying aclocal's search path
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
* Local Macros::                Organizing local macros
* Future of aclocal::           aclocal's scheduled death


File: automake-ja.info,  Node: Requirements,  Next: Optional,  Up: configure

5.1 コンフィグレーションの必要条件
==================================

Automakeが本当に必要としていることは一つで，`configure.ac'でマク
ロ`AM_INIT_AUTOMAKE'を呼び出すことです．このマクロは，適切な
Automakeの処理に必要なことをいくつか行ないます(*note Macros::)． 

   Automakeは必要としますが，`AM_INIT_AUTOMAKE'で実行されないマクロ
には，以下のものがあります．

`AC_CONFIG_FILES'
`AC_OUTPUT'
     Automakeは，作成するファイルを決定するためにこれらを使用します
     (*note Creating Output Files:
     (autoconf)Output.)．同じ名前のファイルが`.am'拡張子が後置されている状態で存
     在している場合，リストアップされているファイルは，Automakeが
     `Makefile'を生成するものと考慮します．通常，
     `AC_CONFIG_FILES([foo/Makefile])'で，`foo/Makefile.am'が存在
     する場合は，Automakeが`foo/Makefile.in' を生成します．

     `AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])'のように，
     複数の入力ファイルで`AC_CONFIG_FILES'を使用しているとき，Automake
     は，存在する`.am'ファイルに対して，最初の`.in'入力ファイルを
     生成します．そのようなファイルが存在しない場合，出力ファイルはAutomake
     が生成したものと考えません．

     `AC_CONFIG_FILES'で生成されたファイルは，`make distclean'で
     削除されます． 


File: automake-ja.info,  Node: Optional,  Next: Invoking aclocal,  Prev: Requirements,  Up: configure

5.2 その他のAutomakeが理解すること
==================================

Automakeは実行されるたびに，`configure.ac'を追跡するために
Autoconfを呼び出します．この方法で，特定のマクロの使用を認識し，生成さ
れる`Makefile.in'を適切に調整します．現在認識されるマクロとそれら
の効果は，以下のようになっています．

`AC_CONFIG_HEADERS'
     Automakeはこれらのヘッダをリビルドするルールを生成します．古いバージョ
     ンのAutomakeは`AM_CONFIG_HEADER'の使用を要求していました (*note
     Macros::)．これは今日では既に事実ではありません． 

`AC_CONFIG_LINKS'
     `configure'が生成したリンクをAutomakeは`make distclean'で削
     除し，`make dist'の部分で生成される指名されたソースファイルを配布
     するためのルールを生成します． 

`AC_CONFIG_AUX_DIR'
     Automakeは，`install-sh'のような様々なヘルパースクリプトを，この
     マクロの呼び出しで指定されたディレクトリで探します．

     (スクリプトの完全なリストは以下のとおりです．`config.guess'，
     `config.sub'， `depcomp'， `elisp-comp'，
     `compile'，`install-sh'， `ltmain.sh'， `mdate-sh'，
     `missing'，`mkinstalldirs'， `py-compile'，
     `texinfo.tex'，そして`ylwrap')すべてのスクリプトが常に探され
     るわけではありません．`Makefile.in'の要求で生成された場合だけ探さ
     れるスクリプトもあります． 

     `AC_CONFIG_AUX_DIR'が与えられていない場合，スクリプトは
     `standard'な場所で探されます．`mdate-sh'，`texinfo.tex'，
     そして`ylwrap'の標準的な場所は，現在の`Makefile.am'に対応す
     るソースディレクトリです．それ以外のものの標準的な場所は，最初は
     `.'，`..'，または`../..'(トップソースディレクトリに関連)
     で，それは経る羽ースクリプトの一つを提供しています．*Note Finding
     `configure' Input: (autoconf)Input.

     `AC_CONFIG_AUX_DIR'で要求されるファイルは，このディレクトリに
     `Makefile.am'が無い場合でも自動的に配布されます．

`AC_CANONICAL_HOST'
     Automakeは，`config.guess'と`config.sub'が確実に存在するよう
     にします．また，`Makefile'変数の`host_alias'と
     `host_triplet'も導入します．*Note Getting the Canonical System
     Type: (autoconf)Canonicalizing.を参照してくださ い． 

`AC_CANONICAL_SYSTEM'
     これは`AC_CANONICAL_HOST'に似ていますが，`Makefile'変数の
     `build_alias'と`target_alias'も定義します． *Note Getting the
     Canonical System Type: (autoconf)Canonicalizing.  

`AC_LIBSOURCE'
`AC_LIBSOURCES'
`AC_LIBOBJ'
     Automakeは，`AC_LIBSOURCE'や`AC_LIBSOURCES'でリストアップさ
     れているすべてのファイルを自動的に配布します．

     `AC_LIBOBJS'マクロが`AC_LIBSOURCE'を呼び出すことに注意してく
     ださい．そのため，Autoconfマクロが`AC_LIBOBJ([file])'を呼び出すと
     説明されている場合，`file.c'はAutomakeで自動的に配布されます．こ
     れには，`AC_FUNC_ALLOCA'，`AC_FUNC_MEMCMP'，
     `AC_REPLACE_FUNCS'等の多くのマクロが含まれます． 

     ところで，直接`LIBOBJS'に代入することは，既にサポートされていませ
     ん．この目的では常に`AC_LIBOBJ'を使用すべきです．*Note `AC_LIBOBJ'
     vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs LIBOBJS.  

`AC_PROG_RANLIB'
     これは，ライブラリをビルドするパッケージの場合に必要になります．
     *Note Particular Program Checks: (autoconf)Particular Programs.  

`AC_PROG_CXX'
     これは，C++ソースが含まれる場合に必要になります．*Note Particular
     Program Checks: (autoconf)Particular Programs.  

`AC_PROG_F77'
     これは，Fortran77ソースが含まれる場合に必要になります．このマクロは
     Autoconfのバージョン2.13以降で配布されます．*Note Particular
     Program Checks: (autoconf)Particular Programs.  

`AC_F77_LIBRARY_LDFLAGS'
     これはFortran77を含む言語が混在しているプログラムと共有ライブラリに対
     して必要になります(*note Mixing Fortran 77 With C and C++::)．
     *Note Autoconf macros supplied with Automake: Macros.  

`AC_PROG_FC'
     Fortran 90/95ソースが含まれる場合に必要になります．このマクロは
     Autoconfのバージョン2.58以降で配布されます．*Note Particular
     Program Checks: (autoconf)Particular Programs.  

`AC_PROG_LIBTOOL'
     Automakeは`libtool'に対する処理を開始します(*note Introduction:
     (libtool)Top.)． 

`AC_PROG_YACC'
     Yaccソースファイルがある場合，このマクロを使用するか，
     `configure.ac'で変数`YACC'を定義する必要があります．前者が好
     まれます(*note Particular Program Checks: (autoconf)Particular
     Programs.)． 

`AC_PROG_LEX'
     Lexソースファイルがある場合，このマクロを使用する必要があります．
     *Note Particular Program Checks: (autoconf)Particular Programs.  

`AC_SUBST'
     最初の引数は，それぞれの生成される`Makefile.in'で，変数として自動
     的に定義されます．*Note Setting Output Variables:
     (autoconf)Setting Output Variables.

     Autoconfマニュアルで，マクロがVARに対して`AC_SUBST'を呼び出
     すとか，出力変数VARを定義するといった説明がある場合，VARは
     それぞれのAutomakeが生成する`Makefile.in'で定義されます．例えば，
     `AC_PATH_XTRA'は`X_CFLAGS'と`X_LIBS'を定義するので，
     `AC_PATH_XTRA'が呼び出されている場合，`Makefile.am'でこれら
     変数と使用することが可能です．

`AM_C_PROTOTYPES'
     これは，de-ANSI-ficationを自動的に使用するときに必要です．*Note
     ANSI::を 参照してください． 

`AM_GNU_GETTEXT'
     このマクロはGNU gettextを使うパッケージに対して必要になります
     (*note
     gettext::)．それはgettextとともに配布されます．Automakeがこのマ
     クロを見つけた場合，このマクロはパッケージがgettextの必要条件のいくつ
     かを確実に満たすようにします． 

`AM_MAINTAINER_MODE'
     このマクロは`configure'に`--enable-maintainer-mode'オプショ
     ンを加えます．これが使用されている場合，`automake'は生成された
     `Makefile.in'内の`maintainer-only'ルールをデフォルトで停止し
     ます．このマクロは`MAINTAINER_MODE'条件を定義し，自分の
     `Makefile.am'で使用することが可能です． 

`m4_include'
     `configure.ac'でインクルードされるこのマクロを使用しているファイ
     ルはAutomakeで検索され，自動的に配布されます．それらは`Makefile'
     のルールで依存性として表現されます．

     `m4_include'が`configure.ac'の著者によって使用されることは滅
     多にありませんが，`aclocal'がパッケージローカルのファイルにあ
     るマクロを要求していることを検出したとき，`aclocal.m4'に現れるは
     ずです(システム全域のディレクトリにインストールされているマクロとは異
     なります．*Note Invoking aclocal::を参照して下さい)．



File: automake-ja.info,  Node: Invoking aclocal,  Next: aclocal options,  Prev: Optional,  Up: configure

5.3 aclocal.m4の自動生成
========================

Automakeには，パッケージで使用可能な多くのAutoconfマクロがあります
(*note Macros::)．状況によってはAutomakeが実際に必要とするものもありま
す．これらのマクロは`aclocal.m4'で定義する必要があります．さもな
ければ，それらは`autoconf'では見つからないでしょう．

   `aclocal'プログラムは，`configure.ac'の内容に基づいて自動的
に`aclocal.m4'ファイルを生成します．これは，Automakeが提供するマ
クロを入手する便利な方法を提供し，それらを探し回る必要がないようになっ
ています．`aclocal'のメカニズムで，他のパッケージに対して独自のマ
クロを提供することも可能です(*note Extending aclocal::)．また，カスタ
ムマクロの独自セットを管理するためにそれを使用することも可能です (*note
Local Macros::)．

   はじめに，`aclocal'はマクロ定義を探しながら見つかったすべての
`.m4'ファイルをスキャンします(*note Macro search path::)．それか
ら`configure.ac'をスキャンします．最初のステップで見つかったマク
ロの記述によって，マクロとマクロが要求するファイルを`aclocal.m4'
に書き込みます．

   マクロ定義を含むファイルを`aclocal.m4'に_書くこと_は，通常こ
のファイルのテキスト全体を，`#'と`dnl'コメントを含め，未使用
のマクロまで含めてコピーすることで実行されます．`aclocal'がコメン
トを完全に無視するようにしたい場合は，コメントの最初に`##'を使用
して下さい．

   `aclocal'が選択しているファイルが`aclocal'の`-I'
オプションで相対的なサーチパスで指定されているパッケージのサブディレク
トリに存在するとき，`aclocal'はそのファイルがパッケージに属し
ていると仮定し，`aclocal.m4'にコピーする代わりに`m4_include'
を使用します．これで，パッケージはより小さくなり，依存性の追跡がより容
易になり，ファイルを自動的に配布物に含めるようになります．(例は， *note
Local Macros::．) システム全体で，または絶対パスで検索され見つかっ
たマクロはコピーされます．そのため，外部パッケージとして考慮する必要が
ある相対的なディレクトリがあるときは，`-I reldir'の代わりに `-I
`pwd`/reldir'を使用して下さい．

   `acinclude.m4'の内容も，このファイルが存在する場合は自動的に
`aclocal.m4'に含められます．我々は，新しいパッケージでの
`acinclude.m4'の使用に反対します(*note Local Macros::)．

   `aclocal.m4'を調べている間，実際に利用されているマクロを追跡し，
記述されているが要望されていないすべてのマクロを`aclocal.m4'から
削除するため，`aclocal'は`autom4te'を実行します(*note Using `Autom4te':
(autoconf)Using autom4te.)．
`autom4te'は`autoconf'と同じ`PATH'にあることを期待され
ています．その場所は，`AUTOM4TE'環境変数を使用して優先させること
が可能です．

* Menu:

* aclocal options::             Options supported by aclocal
* Macro search path::           How aclocal finds .m4 files


File: automake-ja.info,  Node: aclocal options,  Next: Macro search path,  Prev: Invoking aclocal,  Up: configure

5.4 aclocalのオプション
=======================

`aclocal'は，以下のオプションを受け入れます．

`--acdir=DIR'
     インストールされたディレクトリの代わりに，DIRでマクロファイルを
     探します．これは，通常デバッグで使用します．

`--help'
     コマンドラインオプションの概要を出力し，終了します．

`-I DIR'
     `.m4'ファイルを探すディレクトリのリストに，DIRディレクトリ
     を追加します．

`--force'
     出力ファイルを常に上書きします．デフォルトは，必要なときだけ，すなわち
     その内容が変更されたときや，その依存元がより新しい場合，出力ファイルを
     上書きします．

`--output=FILE'
     `aclocal.m4'の代わりに，FILEに出力を書き込みます．

`--print-ac-dir'
     サードパーティーの`.m4'ファイルを見つけるために`aclocal'が検
     索するディレクトリの名前を出力します．このオプションが与えられていると
     き，標準的な処理は行われません．このオプションは，パッケージがマクロファ
     イルをインストールする場所を決定するために使用することが可能です．

`--verbose'
     調査しているファイルの名前を出力します．

`--version'
     Automakeのバージョンナンバーを出力し，終了します．


File: automake-ja.info,  Node: Macro search path,  Next: Macros,  Prev: aclocal options,  Up: configure

5.5 マクロ検索パス
==================

デフォルトで，`aclocal'は`.m4'ファイルを以下のディレクト
リで，この順番に探します．

`ACDIR-APIVERSION'
     これは，automake自身が配布している`.m4'マクロを保持している場所で
     す．APIVERSIONは，使用しているautomakeのリリースに依存します．
     automake 1.6.xに対して，APIVERSION = `1.6'になります．

`ACDIR'
     このディレクトリは，サードパーティーの`.m4'ファイルが目的で，
     `automake'自身がビルドされるときにconfigureされます．これは
     `@datadir@/aclocal/'で，通常`${prefix}/share/aclocal/'に
     展開されます．組み込みのACDIRを知るために，`--print-ac-dir'
     オプションを使用してください．

   例として，automake-1.6.2が`--prefix=/usr/local'を用いてconfigure
されたと仮定します．そのとき検索パスは以下のようになります．

  1. `/usr/local/share/aclocal-1.6/'

  2. `/usr/local/share/aclocal/'

   (*note aclocal options::)で説明したように，この検索パスの変更や拡張で
使用可能なオプションもあります．

5.5.1 マクロ検索パスを変更する: `--acdir'
-----------------------------------------

検索パスを変更する最も明確なオプションは`--acdir=DIR'で，デ
フォルトのディレクトリを変更し，APIVERSIONディレクトリを取り消し
ます．例えば，`--acdir=/opt/private/'を指定した場合，検索パスは以
下のようになります．

  1. `/opt/private/'

   このオプション`--acdir'の目的は，automakeのテストスイートの内部で
使用することだけです．それはエンドユーザは通常不要です．

5.5.2 マクロ検索パスを変更する: `-I DIR'
----------------------------------------

`-I'オプション(*note aclocal options::)を使用して，あらゆる追加ディ
レクトリを指定することで，これらの検索リストに_前置します_．この
ため，`aclocal -I /foo -I /bar'は結果として以下のような検索パスに
なります．

  1. `/foo'

  2. `/bar'

  3. ACDIR-APIVERSION

  4. ACDIR

5.5.3 マクロ検索パスを変更する: `dirlist'
-----------------------------------------

検索パスをカスタマイズするため，三番目のメカニズムがあります．
`dirlist'ファイルがACDIRに存在する場合，そのファイルが，一
行ごとに検索リストに追加するディレクトリリストを含んでいると仮定されま
す．これらのディレクトリは，すべての他のディレクトリの_後に_検索
されます．

   例えば，`ACDIR/dirlist'が以下の内容を含んでいると仮定します．

     /test1
     /test2

そして，`aclocal'を`-I /foo -I /bar'オプションで呼び出したと
仮定します．そのとき検索パスは以下のようになります．

  1. `/foo'

  2. `/bar'

  3. ACDIR-APIVERSION

  4. ACDIR

  5. `/test1'

  6. `/test2'

   `--acdir=DIR'オプションが使用されている場合，
`aclocal'は`dirlist'ファイルをDIRで検索します．上記
の`--acdir=/opt/private/'の例では，`aclocal'は
`/opt/private/dirlist'を探します．しかし，繰り返しますが，
`--acdir'オプションの目的は，automakeのテストスイートの内部で使用
されることだけです．通常，`--acdir'はエンドユーザには不要です．

   以下のような状況で，`dirlist'は役に立ちます．`automake'のバー
ジョン`1.6.2'が，`$prefix=/usr'でシステムベンダーによってイ
ンストールされていると仮定します．このためデフォルトの検索ディレクトリ
は以下のようになります．

  1. `/usr/share/aclocal-1.6/'

  2. `/usr/share/aclocal/'

   しかし，システムには多くのパッケージが，いつも通りに
`$prefix=/usr/local'に手動でインストールされていると仮定します．
この状況では，これらの"追加の"`.m4'ファイルは
`/usr/local/share/aclocal'にあります．これらの"追加の" `.m4'
ファイルを見つけるため，`/usr/bin/aclocal'を強制させる
方法は，常に`aclocal -I /usr/local/share/aclocal'を呼び出すことで
す．これは不便です．`dirlist'を用いると，以下のファイルを作成する
ことができます．

   `/usr/share/aclocal/dirlist'

その内容は以下のようになっています．

   `/usr/local/share/aclocal'

さて，システムに影響する"デフォルト"の検索パスは以下のようになります．

  1. `/usr/share/aclocal-1.6/'

  2. `/usr/share/aclocal/'

  3. `/usr/local/share/aclocal/'

   `-I'オプションは不要です．`-I'は，ローカルなシステム依存のツー
ルのインストールディレクトリを回避するのではなく，プロジェクト独自のも
のが必要な(`my-source-dir/m4/')として予約可能です．

   同様に，Automakeのローカルコピーをアカウント内にインストールし，
`aclocal'でシステムの他の場所にインストールされているマクロを
探したい場合，`dirlist'は手頃なはずです．


File: automake-ja.info,  Node: Macros,  Next: Extending aclocal,  Prev: Macro search path,  Up: configure

5.6 Automakeが提供するAutoconfマクロ
====================================

Automakeは，`configure.ac'で使用可能ないくつかのAutoconfマクロと
ともに出荷されています．そのうちの一つを使用するとき，`aclocal'で
`aclocal.m4'に含められるでしょう．

* Menu:

* Public macros::               Macros that you can use.
* Private macros::              Macros that you should not use.


File: automake-ja.info,  Node: Public macros,  Next: Private macros,  Up: Macros

5.6.1 パブリックマクロ
----------------------

`AM_CONFIG_HEADER'
     Automakeは，コンフィグヘッダを自動的に再生成するルールを生成します．こ
     の時代遅れのマクロは，現在は`AC_CONFIG_HEADERS'と同じです (*note
     Optional::)． 

`AM_ENABLE_MULTILIB'
     これは，"multilib"ライブラリをビルドするときに使用します．最初のオプ
     ション引数は，生成される`Makefile'の名前です．デフォルトは
     `Makefile'です．二番目のオプション引数は，ソースディレクトリのトッ
     プを見つけるために使用します．デフォルトは空の文字列です(内部を理解し
     ていない場合，通常はこれを使用しないほうが良いでしょう．) *Note
     Multilibs::.

`AM_C_PROTOTYPES'
     関数プロトタイプをコンパイラが理解するかどうかを調査します．その場合，
     `PROTOTYPES'を定義して，出力変数`U'と`ANSI2KNR'を空の文
     字列に設定します．それ以外の場合，`U'を`_'に，
     `ANSI2KNR'を`./ansi2knr'にします．Automakeはこれらの値を自動
     的なde-ANSI-ficationを実装するために使用します． 

`AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL'
     `TIOCGWINSZ'を使用するときに`<sys/ioctl.h>'が必要な場合，
     `GWINSZ_IN_SYS_IOCTL'を定義します．それ以外の場合，
     `TIOCGWINSZ'は`<termios.h>'で見つかるはずです． 

`AM_INIT_AUTOMAKE([OPTIONS])'
`AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])'
     生成されたMakefileが適切な処理を行なうために必要な多くのマクロを実行し
     ます．

     このマクロには二つの形式があり，最初のものが好まれます．この形式では，
     `AM_INIT_AUTOMAKE'は単一の引数で呼び出されます -- ツリー内のすべ
     ての`Makefile.am'に適用するAutomakeオプションのスペースで分離され
     ているリストです．それぞれのオプションが`AUTOMAKE_OPTIONS'でリス
     トアップされているかの様な効果があります．

     反対されている二番目の`AM_INIT_AUTOMAKE'の形式は，二つの引数が必
     要です．パッケージとバージョンナンバーです．この形式は，PACKAGE
     とVERSIONがAutoconfの`AC_INIT'マクロ(それ自身も古い形式と新
     しい形式があります)から得ることが可能なので時代遅れです．

     `configure.ac'が以下の場合を考えます．
          AC_INIT(src/foo.c)
          AM_INIT_AUTOMAKE(mumble, 1.5)
     以下のようにして新しいものにすることが可能です．
          AC_INIT(mumble, 1.5)
          AC_CONFIG_SRCDIR(src/foo.c)
          AM_INIT_AUTOMAKE

     `configure.ac'を以前のバージョンのAutomakeから更新している場合，
     上記の例のように，単純にパッケージバージョンの引数を，直接
     `AM_INIT_AUTOMAKE'から`AC_INIT'へ移動することが常に正しいと
     は限りません．`AC_INIT'の最初の引数はパッケージの名前(例えば `GNU
     Automake')ですが，`AM_INIT_AUTOMAKE'に渡すために使用し
     ているtarballの名前(例えば`automake')ではありません．Autoconfはパッ
     ケージ名からtarball名を導き出すことを試み，それはほとんどのパッケージ
     で動作しますが全てで動作するとは限りません．(うまく動作しない場合
     -- Autoconfのバージョン2.52g以上からサポートされている --
     tarball名を明
     示的に提供する，`AC_INIT'の四つの引数を用いる形式を使用することが
     可能です)．

     デフォルトでこのマクロは`PACKAGE'と`VERSION'を
     `AC_DEFINE'します．以下のように`no-define'オプションを渡すこ
     とでこれを避けることが可能です．
          AM_INIT_AUTOMAKE([gnits 1.5 no-define dist-bzip2])
     または時代遅れの形式に空の三番目に引数を渡すことで避けることが可能です．

`AM_PATH_LISPDIR'
     `emacs'プログラムを検索し，見つかった場合は，Emacsのsite-lispディ
     レクトリへのフルパスを出力変数`lispdir'に設定します．

     このテストは(GNU EmacsやXEmacsのような)Emacs Lispをサポートしてい
     るバージョンの`emacs'が見つかることを想定しています．それ以外の
     emacsenでは，このテストはハングアップします(古いバージョンのMicroEmacs
     のように，対話モードでセットアップされているものは，終了するために
     `C-x C-c'が必要で，emacsユーザでなければなかなか気付かないでしょ
     う)．しかし，ほとんどの状況で，テストを終了するために`C-c'を使用
     することが可能でしょう．問題を避けるため，環境変数で`EMACS'を
     "no"に設定したり，(Emacs Lispをサポートしている`emacs'が確実に
     ある場合は)正しいパスを明示的に設定するために`configure'で
     `--with-lispdir'を使用することが可能です． 

`AM_PROG_AS'
     プロジェクトにアセンブラコードがあるときは，このマクロを使用して下さい．
     これはアセンブラを選択し(デフォルトはCコンパイラ)，`CCAS'を設定し，
     そして，必要な場合は`CCASFLAGS'も設定します．

`AM_PROG_CC_C_O'
     これは`AC_PROG_CC_C_O'に似ていますが，それはautomakeが要求する形
     式の結果を生成します．この機能が必要なときは，`AC_PROG_CC_C_O'の
     代わりにこれを使用して下さい．

`AM_PROG_LEX'
     `AC_PROG_LEX'に似ていますが(*note Particular Program Checks:
     (autoconf)Particular Programs.)，`lex'
     が無いシステムで`missing'スクリプトを使用します．`HP-UX 10'
     はそのようなシステムの一つです．

`AM_PROG_GCJ'
     このマクロは，`gcj'プログラムを見つけるか，そうでなければエラーを
     発生します．それは`GCJ'と`GCJFLAGS'を設定します．`gcj' は，GNU
     Compiler CollectionのJavaフロントエンドです． 

`AM_SYS_POSIX_TERMIOS'
     POSIX
     termiosヘッダと関数がシステムで利用可能かどうか調査します．その
     場合，シェル変数`am_cv_sys_posix_termios'を`yes'に設定します．
     そうでない場合，その変数を`no'に設定します．

`AM_WITH_DMALLOC'
     dmalloc (ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz)パッケー
     ジに対するサポートを追加します．ユーザが`--with-demalloc'を用いて
     configureする場合，`WITH_DMALLOC'を定義し，`LIBS'に
     `-ldmalloc'を加えます．

`AM_WITH_REGEX'
     `configure'コマンドラインに`--with-regex'を追加します．指定
     されている(デフォルトの)場合，`regex'の正規表現ライブラリが使用さ
     れ，`regex.o'が`LIBOBJS'に書き込まれ，そして，
     `WITH_REGEX'が定義されます．`--without-regex'が与えられる場
     合，`rx'正規表現ライブラリが使用され，`rx.o'が`LIBOBJS'
     に書き込まれます．



File: automake-ja.info,  Node: Private macros,  Prev: Public macros,  Up: Macros

5.6.2 プライベートマクロ
------------------------

以下のマクロは，直接呼び出すべきではないプライベートマクロです．それら
は適切なときに他のパブリックマクロから呼び出されます．将来のバージョン
で変更される可能性があるので，それらを呼び出さないでください．それらは
実装の詳細を考察するものと考えてください．または，何も考えないほうが良
いかもしれません．このセクションは読み飛ばしてください！

`_AM_DEPENDENCIES'
`AM_SET_DEPDIR'
`AM_DEP_TRACK'
`AM_OUTPUT_DEPENDENCY_COMMANDS'
     これらのマクロはAutomakeの自動的な依存性の追跡手法を実装するために使用
     されます．それらは，要求されたときAutomakeから自動的に呼び出され，手動
     で呼び出す必然性はありません．

`AM_MAKE_INCLUDE'
     このマクロは，ユーザの`make'が`include'文を処理する方法を知
     るために使用されます．それらは，必要なとき自動的に呼び出されます．手動
     で呼び出す必然性はありません．

`AM_PROG_INSTALL_STRIP'
     これは，インストール時にプログラムを`strip'するために使用可能な
     `install'のバージョンを知るために使用されます．このマクロは要求さ
     れるとき自動的にインクルードされます．

`AM_SANITY_CHECK'
     これは，ビルドディレクトリに作成されるファイルがソースディレクトリのファ
     イルより確実に新しいことを調査します．時計の設定が正しくないシステムで
     失敗するはずです．このマクロは`AM_INIT_AUTOMAKE'から自動的に実行
     されます．



File: automake-ja.info,  Node: Extending aclocal,  Next: Local Macros,  Prev: Macros,  Up: configure

5.7 独自のaclocalマクロを書く
=============================

`aclocal'プログラムには，マクロ組み込みの知識が全く無いので，
独自のマクロでそれを拡張することは容易です．

これは，他のプログラムで使用する独自のAutoconfマクロを，供給したいライ
ブラリに対して使用することが可能です．例えば`gettext'ライブラリは，
`gettext'を使用しているあらゆるパッケージで使用されるように，
`AM_GNU_GETTEXT'マクロを提供しています．ライブラリがインストール
されるとき，`aclocal'で見つかるように，このマクロをインストールし ます．

   マクロファイルの名前は`.m4'で終わらせすべきです．そのようなファイ
ルは`$(datadir)/aclocal'にインストールされます．簡単に書くと以下
のようになります．

     aclocaldir = $(datadir)/aclocal
     aclocal_DATA = mymacro.m4 myothermacro.m4

   マクロのファイルは，`AC_DEFUN' (*note Macro Definitions:
(autoconf)Macro Definitions.)で適切に引用符で囲むべきです．
`aclocal'プログラムは`AC_REQUIRE' (*note Prerequisite Macros:
(autoconf)Prerequisite Macros.)も理解するので，個別のファ
イルのそれぞれのマクロに書き込んでも大丈夫です．それぞれのファイルには
マクロ定義以外の副作用が無いようにすべきです．特に，`AC_PREREQ'の
呼び出しは，マクロ定義内部にすべきでファイルの最初に書くべきではありま
せん．

   Automake 1.8から，`aclocal'は，引用符で囲まれていない
`AC_DEFUN'の呼び出しすべてに警告を発するようになっています．我々
はこれで，人々がうんざりすることを自覚していて，それは
`aclocal'はこれまであまり厳密ではなく，多くのサードパーティー
のマクロは引用符で囲まれていないためです．そして我々は，この一時的な不
便さを謝罪しなければなりません．我々が厳密にする必要がある理由は，将来
の`aclocal' (*note Future of aclocal::)の実装で，一時的にこれ
らすべてのサードパーティーの`.m4'ファイルを，可能性としては複数回，
不要なものであっても，インクルードする必要があるためです．そうすること
で，多少なりとも現在の実装では多くの問題があるのですが，より厳密な形式
をマクロの著者に要求することになります．希望としては，既存のマクロを
ちょっと修正して欲しいと思っています．例えば以下のようにします．
     # bad style
     AC_PREREQ(2.57)
     AC_DEFUN(AX_FOOBAR,
     [AC_REQUIRE([AX_SOMETHING])dnl
     AX_FOO
     AX_BAR
     ])
   以下のように書き換えるべきです．
     AC_DEFUN([AX_FOOBAR],
     [AC_PREREQ(2.57)dnl
     AC_REQUIRE([AX_SOMETHING])dnl
     AX_FOO
     AX_BAR
     ])

   `AC_PREREQ'の呼出をマクロ内にラップすることで，Autoconf 2.57は，
`AX_FOOBAR'を実際に使用しない場合は要求しなくなります．最も重要な
ことは，`AC_DEFUN'の最初の引数を引用符で囲むことで，マクロを再定
義したり，二回インクルードすることが可能になります(そうしなければ，こ
の最初の引数は二番目の定義の間展開されたままです)．

   このような`aclocal'の診断が示された場合，マクロ実装の管理者で
はない場合，マクロの管理者に連絡したいかもしれません．マクロの最新バー
ジョンと，そのような報告が以前になされていないことを確認ししてください．
人は，メールの洪水がないときには，すぐにでも仕事をするものです．

   `aclocal'を一般的に使用するもう一つの状況は，パッケージローカ
ルのマクロを管理するときです．*Note Local Macros::を参照して下さい．


File: automake-ja.info,  Node: Local Macros,  Next: Future of aclocal,  Prev: Extending aclocal,  Up: configure

5.8 ローカルなマクロの処理
==========================

Autoconfで提案される機能テストは，すべてのニーズをカバーしていません．
独自のマクロやサードパーティーのマクロで既存のテストを補足する必要があ
ることもよくあります．

   パッケージのカスタムマクロを体系付ける方法は二つあります．

   利用可能な最初の方法は(歴史的な手法で)すべてのマクロを
`acinclude.m4'にリストアップすることです．このファイルは
`aclocal'の実行時に`aclocal.m4'に含められ，そのマクロはそ
れ以降`autoconf'から見えるようになります．しかし，たくさんのマ
クロを含んでいる場合，ちょっとした管理が難しくなり，パッケージ間でマク
ロを共有することが不可能になります．

利用可能な二番めの方法は，こちらが推奨されていますが，それぞれのマクロ
を単独ファイルに書き，一つのディレクトリにこれらすべてのファイルをまと
めておくことです．このディレクトリは通常`m4/'と呼ばれています．こ
のため，`aclocal.m4'をビルドする際，`aclocal'に`m4/'
をスキャンするように指示するべきです．コマンドラインからは， `aclocal
-I m4'とします．または，最上位のの`Makefile.am'の定
義を以下のように更新すべきです．

      ACLOCAL_AMFLAGS = -I m4

   `ACLOCAL_AMFLAGS'は，`aclocal.m4'が`make'でリビルドされ
るとき，`aclocal'に渡すオプションを含んでいます．この行は，適
切なオプションで`aclocal'を実行するため，`autoreconf' (*note Using
`autoreconf' to Update `configure' Scripts: (autoconf)autoreconf
Invocation.)や，Gettextの
マクロがインストールされている場所を示すため`autopoint' (*note Invoking
the `autopoint' Program: (gettext)autopoint Invocation.)と`gettextize'
(*note Invoking the `gettextize' Program: (gettext)gettextize
Invocation.)でも使用されます．そのため，リビ
ルドのルールであまり注意していなくても，`ACLOCAL_AMFLAGS'を定義す
べきです．

   `aclocal -I m4'が実行されるとき，要求されているマクロが定義されて
いる`m4/'のあらゆるファイルを`m4_include'し，
`aclocal.m4'をビルドします．ローカルに見つからないマクロは， *Note
Macro search path::で説明されているシステム全体のディレクトリで検
索されます．

   カスタムマクロは`configure.ac'と同じ理由で配布すべきです．パッケー
ジを動作させたい人は，そのすべてのファイルを持っているようにすべきです．
実際これは，すべての`m4_include'されるファイルが配布されるので，
自動的に配布されます．

しかし，パッケージで使用しているサードパーティーのマクロの配布には一致
している見解はありません．多くのライブラリは，独自のマクロをシステム全
体の`aclocal'ディレクトリ(*note Extending aclocal::)にインストー
ルします．例えば，Guileはコンパイラの設定とGuileを使用する際に適切なリ
ンカフラグ定義するために使用することが可能な，マクロ`GUILE_FLAGS'
を含んでいる`guile.m4'と呼ばれるファイルを配布しています．
`configure.ac'で`GUILE_FLAGS'を使用することで，
`aclocal'は`guile.m4'を`aclocal.m4'にコピーしますが，
`guile.m4'はプロジェクトの一部ではないので，それは配布していませ
ん．技術的には，`aclocal.m4'をリビルドする必要があるユーザはGuile
を最初にインストールする必要があることを意味します．Guileがパッケージ
のビルドで必要な場合，これはおそらく問題無いでしょう．しかし，Guileは
単なる追加機能だったり，パッケージをGuileがインストール不可能なマシン
で実行する可能性がある場合，この必要条件は開発の邪魔になります．簡単な
解決方法は，そのようなサードパーティーのマクロを，それらも配布されるよ
うに，ローカルな`m4/'ディレクトリにコピーすることです．


File: automake-ja.info,  Node: Future of aclocal,  Prev: Local Macros,  Up: configure

5.9 `aclocal'の将来
===================

`aclocal'の消滅が予想されています．この機能はAutomakeで提供す
るものではありません．Automakeは`Makefile'の生成に焦点を絞るべき
です．M4マクロの処理は，本当はAutoconfの仕事でしょう．
`aclocal'を使用するためだけにAutomakeをインストールしていて，
それ以外での`automake'を使用しない人もいますが，それこそが，こ
の機能が場違いであることを示しています．

   新たな実装は，若干違うものになる可能性があります．例えば，*Note
Local Macros::で議論した`m4/'形式の配置を強制し，
`/usr/share/aclocal/'から持ってきたサードパーティーのマクロをこの
ディレクトリにコピー(そして更新)するようになるかもしれません．

我々には，これがどうすれば良いか分かりません．このことは，これまでに何
度も議論されてきましたが，誰かがそのような不明確な作業を自分に科さなけ
ればなりません．

   ユーザの視点からは，`aclocal'の消滅は痛ましいものになり得ます．
がたがたしないように切替えるための予防策があります．それは自分で
`aclocal'を呼び出さないことです．こいつを`autoreconf'
の制御下に追いやったり，Automakeのリビルドのルールにしたりしてください．
希望としては，`aclocal'が無くなったとき，すべての面倒が見られ
ていて，崩壊後に悩む必要が無いようにしたいことでしょう．それ以外で，直
接，またはスクリプトから`aclocal'を呼び出している場合，変更に
注意して下さい．

   `aclocal'，`libtoolize'，`gettextize'または
`autopoint'，`autoconf'，`autoheader'，そして
`automake'を正しい順序で呼び出している，`bootstrap.sh'や
`autogen.sh'といったスクリプトが一緒になっているパッケージもたく
さんあります．実際，これは`autoreconf'でできることと全く同じで
す．`bootstrap.sh'や`autogen.sh'のようなスクリプトがパッケー
ジにある場合，`autoreconf'の使用を検討してみて下さい．それは論
理的にずいぶん簡単になり(管理には旨味はないけどね！)，スクリプトはもは
や不要で，`aclocal'を直接呼び出す場所も無くなります．

   しばらくは，サードパーティのパッケージはパブリックマクロを
`/usr/share/aclocal/'にインストールし続けるでしょう．
`aclocal'が別のツールに置き換えられる場合，ディレクトリ名を変
更することに意味がありますが，すべてのマクロの後方互換性をより容易に提
供するため，`/usr/share/aclocal/'をサポートし続けるように書かれる
ことになるでしょう(*note Extending aclocal::)．


File: automake-ja.info,  Node: Directories,  Next: Programs,  Prev: configure,  Up: Top

6 ディレクトリ
**************

配布されるすべてのファイルが同じディレクトリにある単純なプロジェクトに
対して，すべてをその場でビルドする単一の`Makefile.am'があれば十分 です．

大きなプロジェクトでは，ツリーの別々のディレクトリに体系化されたファイ
ルがあるのが一般的です．例えば，プログラムごと，ライブラリごと，そして
モジュールごと一つのディレクトリがあります．伝統的な手法は，これらのサ
ブディレクトリを再帰的にビルドしていました．それぞれのディレクトリには
(`Makefile.am'から生成された)`Makefile'が含まれており，
`make'をトップレベルのディレクトリで実行すると，それぞれのサブ
ディレクトリに移動し，順番にその内容をビルドしていきます．

* Menu:

* Subdirectories::              Building subdirectories recursively
* Conditional Subdirectories::  Conditionally not building directories
* Alternative::                 Subdirectories without recursion
* Subpackages::                 Nesting packages


File: automake-ja.info,  Node: Subdirectories,  Next: Conditional Subdirectories,  Up: Directories

6.1 サブディレクトリの再帰
==========================

サブディレクトリがあるパッケージでは，最上位の`Makefile.am'でビル
ドするサブディレクトリをAutomakeに伝える必要があります．これは
`SUBDIRS'変数によってなされます． 

   `SUBDIRS'変数は，さまざまな種類のビルドが行われるサブディレクトリ
のリストを保持しています．生成されている`Makefile'内の多くのター
ゲットに対するルールは(例えば`all')，ローカルと指定されたすべての
サブディレクトリの両方で実行されます．`SUBDIRS'でリストアップされ
ているディレクトリには，`Makefile.am'を含んでいる必要がないことに
注意してください．(configure後の)`Makefile'だけが必要です．こうす
ることで，(`gettext'のようなもので，*Note Third-Party Makefiles::
も参照して下さい)Automakeを使用しないパッケージからライブラリを含める
ことが可能になります．

   サブディレクトリを使用しているパッケージでは，最上位の
`Makefile.am'は非常に短いことが多くなっています．例えば，GNU Hello
配布物の`Makefile.am'は以下のようになっています．

     EXTRA_DIST = BUGS ChangeLog.O README-alpha
     SUBDIRS = doc intl po src tests

   Automakeが`make'をサブディレクトリで呼び出すとき，`MAKE'変数
の値を使用します．それは，変数`AM_MAKEFLAGS'の値を`make'の呼
び出しに渡します．これで，常に`make'に渡す必要があるフラグを
`Makefile.am'で設定することが可能になります． 

   `SUBDIRS'で記述されているディレクトリは，通常，現在のディレクトリ
の直接の子ディレクトリになっていて，それぞれのサブディレクトリには，そ
れより不快サブディレクトリを示す`SUBDIRS'を示している，独自の
`Makefile.am'が含まれています．この方法で任意の深さのパッケージ構
成で，Automakeを使用することがが可能になります．

   デフォルトで，Automakeはpostfixの順序での最初の深さで動作する
`Makefile'を生成します．サブディレクトリはカレントディレクトリの
前にビルドされます．しかし，この順序を変更することは可能です．
`SUBDIRS'に`.'を書くことでこうすることが可能です．例えば，
`.'を最初に書くことで，ディレクトリの`prefix'の順序になりま す．

   以下を使用します．

     SUBDIRS = lib src . test

これで`lib/'が`src/'の前にビルドされ，そしてカレントディレク
トリがビルドされ，最後に`test/'ディレクトリがビルドされるでしょう．
構成されたものをテストするので，テストディレクトリを他のすべての後にビ
ルドするように手配するのは一般的です．

   すべての`clean'ルールは，ビルドルールの逆の順序で実行されます．


File: automake-ja.info,  Node: Conditional Subdirectories,  Next: Alternative,  Prev: Subdirectories,  Up: Directories

6.2 サブディレクトリの条件
==========================

GNU `Inetutils'のように，パッケージ全体のサブセットをビルドしたい
だけの場合，`SUBDIRS'変数を条件的に定義することがが可能です．

   これがどのように動作するかを説明するため，二つのディレクトリ `src/'
と`opt/'があると仮定しましょう．`src/'は常にビル
ドされますが，`opt/'は`./configure'でビルドするかどうかを決
定したいと思います．(この例では，変数`$want_opt'が`yes'に設
定されているとき`opt/'をビルドすると仮定します．)

   `make'と実行することで，`src/'は常に再帰され，`opt/'も
そうなるかもしれません．

   しかし，`make dist'では常に`src/'と`opt/'の両方を再帰す
べきです．つまり，現在のconfigureでは不要な場合でも，`opt/'は配布
されるべきです．これは，`opt/Makefile'は_条件に依存せず_作成
されるべきだということを意味します．

   このようにプロジェクトを設定する方法は二つあります．Automakeの条件式
(*note Conditionals::)を使用したり，Autoconfの`AC_SUBST'マクロ (*note
Setting Output Variables: (autoconf)Setting Output
Variables.)を使用したりすることが可能です．
Automakeの条件式の使用は，より好まれる解となります．これら二つの可能性
を示す前に，`DIST_SUBDIRS'を紹介しましょう．

6.2.1 `SUBDIRS'対`DIST_SUBDIRS'
-------------------------------

Automakeは，`SUBDIRS'と`DIST_SUBDIRS'で定義される，二つのディ
レクトリ・セットを考慮します．

   `SUBDIRS'は，ビルドする必要があるカレント・ディレクトリのサブディ
レクトリを含んでいます(*note Subdirectories::)．それは手動で定義する必
要があります．Automakeは，ビルドするディレクトリかどうかを判定すること
はありません．以下の二つのセクションで分かるように，ビルドするディレク
トリからいくつかのディレクトリを削除する条件を定義することが可能です．

   `DIST_SUBDIRS'はすべてのディレクトリを再帰する必要があるルールで
使用され，ビルドされる条件から外れていても使用されます．サブディレクト
リ`opt/'はビルドしないのに，それを配布したいという例を思い出しま
したか？これは`DIST_SUBDIRS'で行ないます．`opt'は
`SUBDIRS'にはありませんが，`DIST_SUBDIRS'には存在する必要が あります．

   厳密にいうと，`DIST_SUBDIRS'は`make dist'，`make
distclean'，そして`make maintainer-clean'で使用されます．それ以外
の再帰的なルールでは`SUBDIRS'が使用されます．

   `SUBDIRS'がAutomakeの条件文を使用し条件的に定義される場合，
Automakeは，すべての条件で`SUBDIRS'がとり得る値で，
`DIST_SUBDIRS'を自動的に定義します．

   `SUBDIRS'が`AC_SUBST'変数を含む場合，Automakeはこれらの変数
がとり得る値が分からないので，`DIST_SUBDIRS'は正確に定義できませ
ん．この状況では，`DIST_SUBDIRS' を手動で定義する必要があります．

6.2.2 `AM_CONDITIONAL'を用いた条件付サブディレクトリ
----------------------------------------------------

`configure'でそれぞれのディレクトリの`Makefile'を出力し，
`opt/'をビルドするかどうかの条件を定義すべきです．

     ...
     AM_CONDITIONAL([COND_OPT], [test "$want_opt" = yes])
     AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])
     ...

   `SUBDIRS'は，最上位の`Makefile.am'で，以下のように定義するこ
とが可能です．

     if COND_OPT
       MAYBE_OPT = opt
     endif
     SUBDIRS = src $(MAYBE_OPT)

   御覧のように，`make'を実行することで，`src/'と，おそらく
`opt/'に再帰していくでしょう．

   見ることはできませんが，`make dist'は`make all'とは異なり，
`SUBDIRS'変数を使用しないので，`make dist'を実行することで，
`src/'と`opt/'の両方に再帰的に行ないます．それは
`DIST_SUBDIRS'変数を使用します．

   この場合，Automakeは`MAYBE_OPT'が条件によっては`opt'を含むこ
とを知っているので，`DIST_SUBDIRS = src opt'を自動的に定義します．

6.2.3 `AC_SUBST'を用いたサブディレクトリの条件式
------------------------------------------------

もう一つの可能な方法は，`AC_SUBST'を使用して，`./configure'
で`MAYBE_OPT'を定義することです．

     ...
     if test "$want_opt" = yes; then
       MAYBE_OPT=opt
     else
       MAYBE_OPT=
     fi
     AC_SUBST([MAYBE_OPT])
     AC_CONFIG_FILES([Makefile src/Makefile opt/Makefile])
     ...

   この状況では，最上位の`Makefile.am'は以下のようになるでしょう．

     SUBDIRS = src $(MAYBE_OPT)
     DIST_SUBDIRS = src opt

   欠点は，Automakeが`MAYBE_OPT'の変数が何かを推測することが不可能な
ので，`DIST_SUBDIRS'に定義する必要があるということです．

6.2.4 コンフィグレーションされないサブディレクトリ
--------------------------------------------------

`DIST_SUBDIRS'の意味は，サブディレクトリを条件的に_コンフィ
グレーションしビルド_しようとするユーザに誤解されていることが多くなっ
ています．ここでのコンフィグレーションとは，`Makefile'の作成を意
味します(入れ子状の`configure'スクリプトの呼び出しの可能性もあ
ります．これはコストのかかる処理で，条件的にしたい言い訳にしますが，
`Makefile'に関することだけを議論します)．

   上記の例ではすべて，ビルドされないディレクトリを含めて，全部の
`Makefile'の作成を仮定しています．単純な理由として，`make
dist'でビルドされないディレクトリも配布したいことがあり(例えば，プラッ
トフォーム依存のコード)，このため`make dist'でサブディレクトリを
再帰的にする必要があり，更にこのディレクトリをコンフィグレーションし
`DIST_SUBDIRS'に存在させる必要があります．

すべてのサブディレクトリをコンフィグレーションするわけではないパッケー
ジのビルドはトリッキーな作業になり，間違って不完全なtarballを生成しが
ちなので，初心者にはお勧めしません．我々はこのトピックをここでは深く議
論しませんが，ちょっと危険なので,いくつかルールがあることを覚えておい
て下さい．

   * `SUBDIRS'は常に`DIST_SUBDIRS'のサブセット(下位集合)にすべきです．

     `DIST_SUBDIRS'には無いディレクトリを`SUBDIRS'に書くことには
     ちょっとだけ意味があります．前者はディレクトリのリストを伝える方法で，
     後者はビルドすべきものです．

   *
     `DIST_SUBDIRS'と`SUBDIRS'にリストアップされるディレクトリは，すべてコンフィグレーションすべきです．

     すなわち，`Makefile'が存在する必要があり，そうしなければ，再帰的
     な`make'ルールでディレクトリを処理することができません．

   *
     コンフィグレーションされるディレクトリはすべて`DIST_SUBDIRS'にリストアップする必要があります．

     cleanルールで生成された`Makefile'を削除するようにするためです．
     `DIST_SUBDIRS'が変数として，コンフィグレーションされるすべてのディ
     レクトリをリストアップしていることを確認するのが王道です．


コンフィグレーションされないディレクトリを再帰するのを避けるため，その
ディレクトリが確実に`DIST_SUBDIRS'(と`SUBDIRS')に存在しない
ことを確かめる必要があります．例えば，`AC_SUBST'を使用して
`SUBDIRS'を条件的に定義していて，`DIST_SUBDIRS'が明示的に定
義されていない場合，それはデフォルトで`$(SUBDIRS)'になります．も
う一つの可能性として，`DIST_SUBDIRS = $(SUBDIRS)'を強制します．


File: automake-ja.info,  Node: Alternative,  Next: Subpackages,  Prev: Conditional Subdirectories,  Up: Directories

6.3 サブディレクトリに代わるアプローチ
======================================

Peter Millerの優れた論文をすでに読んでいる場合 Recursive Make
Considered Harmful
(http://www.pcug.org.au/~millerp/rmch/recu-make-cons-harm.html)，サブディレクトリを使用する前のセク
ションは，おそらくありがたくない助言になるでしょう．論文を読んでいない
人のために，Millerの主題は，再帰的な`make'の呼び出しは，遅くてエ
ラーを発生しやすいということです．

   複雑な複数のディレクトリがあるパッケージに対して，単一の
`Makefile.am'だけを書くことを可能にする，ディレクトリを跨るための
優れたサポート(1)を， Automake は提供しています．

デフォルトで，サブディレクトリで指定されているインストール可能なファイ
ルは，インストールする前にそのディレクトリ名が切り取られています．例え
ば以下の例では，ヘッダファイルが`$(includedir)/stdio.h'にインストー
ルされるでしょう．

     include_HEADERS = inc/stdio.h

   しかし，`nobase_'を前置することで，このパスを切り取りを回避するこ
とが可能になります．以下の例では，ヘッダファイルは
`$(includedir)/sys/types.h'にインストールされるでしょう．

     nobase_include_HEADERS = sys/types.h

   `nobase_'は，`dist_'や`nodist_'(*note Dist::)のいずれか
と組合わせて使用するとき，最初に指定するべきです．例えば以下のようにし
ます．

     nobase_dist_pkgdata_DATA = images/vortex.pgm

   ---------- Footnotes ----------

   (1) 我々は信じています．この動作は新しく，問題があ
る可能性があります．バグレポートの情報は，*Note Introduction::.


File: automake-ja.info,  Node: Subpackages,  Prev: Alternative,  Up: Directories

6.4 入れ子状のパッケージ
========================

GNUビルド・システムでは，パッケージを任意の深さに入れ子状にすることが
可能です．これは，独自の`configure'，`Makefile'などがある他
のパッケージを埋め込んだパッケージが可能になることを意味します．

これらのその他のパッケージは，親パッケージのサブディレクトリに存在する
ようにすべきです．それらは，他の普通のディレクトリと同様に
`SUBDIRS'にリストアップする必要があります．しかし，サブパッケージ
の`Makefile'は，親の`configure'ではなく，独自の
`configure'スクリプトで出力するようにすべきです．これはAutoconfマ
クロの`AC_CONFIG_SUBDIRS'を使用して達成します (*note AC_CONFIG_SUBDIRS:
(autoconf)Subdirectories.)．

   サブディレクトリの`hand/'にある入れ子状のパッケージ`hand'ラ
イブラリとリンクする，`arm'プログラムのパッケージ例は，以下のよう
になります．

   `arm'の`configure.ac'です．

     AC_INIT([arm], [1.0])
     AC_CONFIG_AUX_DIR([.])
     AM_INIT_AUTOMAKE
     AC_PROG_CC
     AC_CONFIG_FILES([Makefile])
     # Call hand's ./configure script recursively.
     AC_CONFIG_SUBDIRS([hand])
     AC_OUTPUT

   `arm'の`Makefile.am'です．

     # Build the library in the hand subdirectory first.
     SUBDIRS = hand

     # Include hand's header when compiling this directory.
     AM_CPPFLAGS = -I$(srcdir)/hand

     bin_PROGRAMS = arm
     arm_SOURCES = arm.c
     # link with the hand library.
     arm_LDADD = hand/libhand.a

   さて，`hand'の`hand/configure.ac'です．

     AC_INIT([hand], [1.2])
     AC_CONFIG_AUX_DIR([.])
     AM_INIT_AUTOMAKE
     AC_PROG_CC
     AC_PROG_RANLIB
     AC_CONFIG_FILES([Makefile])
     AC_OUTPUT

そしてその`hand/Makefile.am'です．

     lib_LIBRARIES = libhand.a
     libhand_a_SOURCES = hand.c

   `make dist'がトップレベルのディレクトリで実行されるとき，
`hand'サブディレクトリだけでなく，`arm'コードも含むアーカイ
ブ`arm-1.0.tar.gz'を作成します．このパッケージは，通常のパッケー
ジと同じように，いつもの`./configure && make && make install'でビ
ルドしインストールすることが可能です(`hand'サブパッケージは，処理
中にビルドとインストールがなされます．)．

   `make dist'が`hand'ディレクトリで実行されるとき，それ自身が
含まれている`hand-1.2.tar.gz'アーカイブを作成します．他のパッケー
ジに埋め込まれているのですが，別々に使用することも可能です．

   `AC_CONFIG_AUX_DIR([.])'機能の目的は，AutomakeとAutoconfに追加ス
クリプトをカレントディレクトリで探すように強制することです．例えば，二
つの`install-sh'のコピーがあって，一つはトップレベルの`arm'
パッケージ，もう一つは`hand'パッケージの`hand/'サブディレク
トリにあるということを意味します．

歴史的なデフォルトは，これらの追加スクリプトを直接の親と更にその親のディ
レクトリで探します．そのため，`AC_CONFIG_AUX_DIR([.])'行が
`hand/configure.ac'からなくなると，サブパッケージは`arm'パッ
ケージの追加スクリプトを共有します．これは若干サイズが大きくなる(数Kバ
イト)ように見えますが，`hand'サブパッケージのモジュール性が実際に
なくなり，自身には含まれないことになってしまいます(サブディレクトリで
`make dist'しても動作しません)．

Automakeを使用しないパッケージは，この方法で統合するために，さらなる作
業が必要です*Note Third-Party Makefiles::.


File: automake-ja.info,  Node: Programs,  Next: Other objects,  Prev: Directories,  Up: Top

7 プログラムとライブラリのビルド
********************************

Automakeの機能の大半は，プログラムとライブラリのビルドを容易にすること
に費やされています．

* Menu:

* A Program::                   Building a program
* A Library::                   Building a library
* A Shared Library::            Building a Libtool library
* Program and Library Variables::  Variables controlling program and
                                library builds
* Default _SOURCES::            Default source files
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::                 Compiling C++ sources
* Assembly Support::            Compiling assembly sources
* Fortran 77 Support::          Compiling Fortran 77 sources
* Fortran 9x Support::          Compiling Fortran 9x sources
* Java Support::                Compiling Java sources
* Support for Other Languages::  Compiling other languages
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking
* EXEEXT::                      Support for executable extensions


File: automake-ja.info,  Node: A Program,  Next: A Library,  Up: Programs

7.1 プログラムのビルド
======================

プログラムをビルドするために，その一部となるソースとリンクされるライブ
ラリをAutomakeに伝える必要があります．

このセクションは，ソースやプログラムの条件付きコンパイルもカバーしてい
ます．これらのコメントのほとんどは，ライブラリ(*note A Library::)と
libtoolライブラリ(*note A Shared Library::)に適用されます．

* Menu:

* Program Sources::             Defining program sources
* Linking::                     Linking with libraries or extra objects
* Conditional Sources::         Handling conditional sources
* Conditional Programs::        Building program conditionally


File: automake-ja.info,  Node: Program Sources,  Next: Linking,  Up: A Program

7.1.1 プログラムソースの定義
----------------------------

(ライブラリやスクリプトと比べて)プログラムにビルドされるソースを含んで
いるディレクトリには，`PROGRAMS'プライマリが使用されます．プログ
ラムを，`bindir'，`sbindir'，`libexecdir'，
`pkglibdir'にインストールしたり，または全くインストールしない
(`noinst')ことが可能です．`make check'に対してのみビルドさせ
ることも可能で，そのときは接頭辞は`check'になります．

   例えば以下のようにします．

     bin_PROGRAMS = hello

   この単純な状況では，結果として生成される`Makefile.in'に，
`hello'という名前のプログラムを生成するコードが含まれるでしょう．

それぞれのプログラムに関連して，プログラムの後に命名される補助変数もあ
ります．これらの変数はすべてオプションで，妥当なデフォルト値を持ちます．
それぞれの変数，その使用，そしてデフォルトについては以下で記述します．
我々は，"hello"の例を終始使用します．

   変数`hello_SOURCES'は，実行形式にビルドされるソースファイルを指定
するために使用されます．

     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h

   これにより，上記のそれぞれの`.c'ファイルを，対応する`.o'にコ
ンパイルします．そして，すべては`hello'を生成するためにリンクされ ます．

   `hello_SOURCES'が指定されていない場合，そのデフォルトは一つのファ
イル`hello.c'になります(*note Default _SOURCES::)． 

複数のプログラムを一つのディレクトリでビルドすることが可能です．複数の
プログラムで単一のソースファイルを共有することが可能で，それぞれの
`_SOURCES'定義でリストアップする必要があります．

   `_SOURCES'定義にリストアップされているヘッダファイルは配布物に含
まれますが，それ以外のものは無視されます．明らかではないときは，
`configure'で生成されるヘッダファイルを`_SOURCES'変数に含め
るべきではありません．このファイルは配布すべきではありません．
Lex(`.l')とYacc(`.y')のファイルもリストアップすることが可能 です．*Note
Yacc and Lex::を参照して下さい．


File: automake-ja.info,  Node: Linking,  Next: Conditional Sources,  Prev: Program Sources,  Up: A Program

7.1.2 プログラムのリンク
------------------------

`configure'で見つからないライブラリに対してリンクする必要がある場
合，そうするために`LDADD'を使用することが可能です．この変数は，リ
ンクする追加のオブジェクトやライブラリを指定するために使用されます．そ
れは，特定のリンカフラグを指定するには不適切で，この目的では
`AM_LDFLAGS'を使用すべきです． 

複数のプログラムが一つのディレクトリでビルドされていても，リンク時に同
じ条件を共有しないときもあります．この場合は，グローバルな`LDADD'
に優先させるため，`PROG_LDADD'変数(ここでのPROGはプロ
グラムの名前で，それは`_PROGRAMS'変数にあって，通常は小文字で書か
れています)を使用することが可能です．この変数が所定のプログラムに対し
て存在する場合，そのプログラムは`LDADD'を使用してリンクされません． 

   例えば，GNU cpioでは，`pax'，`cpio'，そして`mt'は，
`libcpio.a'ライブラリにリンクされます．しかし，`rmt'は同じディ
レクトリでビルドされますが，そのようなリンクは必要ありません．また，
`mt'と`rmt'は特定のアーキテクチャでのみビルドされます．以下
は，cpioの`src/Makefile.am'に似たものです(省略されています)．

     bin_PROGRAMS = cpio pax $(MT)
     libexec_PROGRAMS = $(RMT)
     EXTRA_PROGRAMS = mt rmt

     LDADD = ../lib/libcpio.a $(INTLLIBS)
     rmt_LDADD =

     cpio_SOURCES = ...
     pax_SOURCES = ...
     mt_SOURCES = ...
     rmt_SOURCES = ...

   `PROG_LDADD'でプログラム独自のリンカフラグ(`-l'，
`-L'，`-dlopen'そして`-dlpreopen'を除く)を渡すことは不
適当です．そのため，この目的に対しては`PROG_LDFLAGS'変数を
使用してください． 

実際にはプログラムの一部でない他のターゲットに依存するプログラムを持つ
ことが役に立つこともあります．これは`PROG_DEPENDENCIES'変数
を使用することで可能になります．それぞれのプログラムはこの変数の内容に
依存しますが，それ以上の解釈はされません．

   `PROG_DEPENDENCIES'が提供されていない場合，Automakeが考えま
す．自動的に割り当てられる値は`PROG_LDADD'の内容で，ほとん
どのconfigureの置換式，`-l'，`-L'，`-dlopen'，そして
`-dlpreopen'オプションは削除されます．残っているconfigureの置換式
は，`$(LIBOBJS)'と`$(ALLOCA)'だけです．これらは，生成される
`PROG_DEPENDENCIES'に無効な値を与えないことが知られているの
で残されています．


File: automake-ja.info,  Node: Conditional Sources,  Next: Conditional Programs,  Prev: Linking,  Up: A Program

7.1.3 ソースの条件コンパイル
----------------------------

`configure'の置換式(例えば，`AC_SUBST'で定義される`FOO'
を用いた`@FOO@'や`$(FOO)')を`_SOURCES' 変数に書き込む
ことはできません．この理由を説明するのは少し難しいのですが，単純に言っ
て動作しないということで十分でしょう．これを試みた場合，Automakeはエラー
を発します．

   幸い，同じ結果を達成するために二つの別の方法があります．一つは，
`configure'の置換式を`_LDADD'変数で使用する方法で，もう一つ
は，Automakeの条件式を使用する方法です．

7.1.3.1 `_LDADD'の置換式を使用した条件コンパイル
................................................

Automakeは，すべてのファイルが全ての状況でビルドされるわけではない場合
でも，プログラムに組み込まれる可能性があるソースファイルをすべて知って
いる必要があります．条件によってのみビルドされるファイルは，適切な
`EXTRA_'変数でリストアップすべきです．例えば，条件によって
`hello-linux.c'や`hello-generic.c'を`hello'に組み込む場
合，`Makefile.am'に以下のものを含めます．

     bin_PROGRAMS = hello
     hello_SOURCES = hello-common.c
     EXTRA_hello_SOURCES = hello-linux.c hello-generic.c
     hello_LDADD = $(HELLO_SYSTEM)
     hello_DEPENDENCIES = $(HELLO_SYSTEM)

`configure.ac'で`$(HELLO_SYSTEM)'の置換式を設定することが可 能です．

     ...
     case $host in
       *linux*) HELLO_SYSTEM='hello-linux.$(OBJEXT)' ;;
       *)       HELLO_SYSTEM='hello-generic.$(OBJEXT)' ;;
     esac
     AC_SUBST([HELLO_SYSTEM])
     ...

   この場合，`HELLO_SYSTEM'は`hello-linux.o'や
`hello-generic.o'で置換され，ビルドしリンクするために
`hello_DEPENDENCIES'と`hello_LDADD'に追加されます．

7.1.3.2 Automakeの条件式を使用した条件コンパイル
................................................

条件によってソースファイルをコンパイルするためのより簡単な方法としては，
Automakeの条件式を使用することが多くなっています．例えば，同じ
`hello'の例をビルドするため，以下のような内容の`Makefile.am'
を使用することが可能でしょう．

     bin_PROGRAMS = hello
     if LINUX
     hello_SOURCES = hello-linux.c hello-common.c
     else
     hello_SOURCES = hello-generic.c hello-common.c
     endif

   この場合，`configure.ac'で`AM_CONDITIONAL'を使用して
`LINUX'条件式を設定する必要があります(*note Conditionals::)．

Automakeは，ソースファイルの完全なリストを構成するためにそれぞれの変数
の内容を調査するので，このような条件を使用するときは，`EXTRA_'変
数を使用する必要はありません．

   プログラムで多くのファイルを使用している場合，おそらく条件付の
`+='のほうが望ましいでしょう．

     bin_PROGRAMS = hello
     hello_SOURCES = hello-common.c
     if LINUX
     hello_SOURCES += hello-linux.c
     else
     hello_SOURCES += hello-generic.c
     endif


File: automake-ja.info,  Node: Conditional Programs,  Prev: Conditional Sources,  Up: A Program

7.1.4 プログラムの条件付コンパイル
----------------------------------

ビルドされるプログラムをconfigure時に決定することが役に立つときもあり
ます．例えば，GNU `cpio'は特別な状況のときだけ`mt'と
`rmt'をビルドします．プログラムの条件付きコンパイルを達成するとい
う意味は，ソースファイルのコンパイルを条件的に行なうことと一緒です．置
換式を用いたり条件式を用いたりします．

7.1.4.1 `configure'の置換式を使用した条件的プログラム
.....................................................

この場合は，ビルドされる可能性のあるすべてのプログラムをAutomakeに知ら
せる必要がありますが，同時に，`configure'で指定されるプログラムを
使用するように`Makefile.in'を生成させる必要もあります．このことは，
それぞれの`_PROGRAMS'定義に`configure'での置換式の値を持たせ
ることで行なわれますが，一方では，`EXTRA_PROGRAMS'でオプションと
してビルドされるプログラムがすべてリストアップされています． 

     bin_PROGRAMS = cpio pax $(MT)
     libexec_PROGRAMS = $(RMT)
     EXTRA_PROGRAMS = mt rmt

   *Note EXEEXT::の説明として，Automakeは`$(EXEEXT)'をそれぞれのバイナ
リに付加して，`bin_PROGRAMS'，`libexec_PROGRAMS'，そして
`EXTRA_PROGRAMS'を書き換えます．`configure'の置換式で，実行
時に値を明示的に書き換えることは明らかに不可能なので， `AC_SUBST([MT],
['mt${EXEEXT}'])'の様に`$(EXEEXT)'を付加す ることには気を付けて下さい．

7.1.4.2 Automakeの条件式を使用した条件的プログラム
..................................................

ビルドするプログラムを選択するため，Automakeの条件式を (*note
Conditionals::)使用することも可能です．この状況では，
`$(EXEEXT)'や`EXTRA_PROGRAMS'に気を付ける必要はありません．

     bin_PROGRAMS = cpio pax
     if WANT_MT
       bin_PROGRAMS += mt
     endif
     if WANT_RMT
       libexec_PROGRAMS = rmt
     endif


File: automake-ja.info,  Node: A Library,  Next: A Shared Library,  Prev: A Program,  Up: Programs

7.2 ライブラリのビルド
======================

ライブラリをビルドすることは，プログラムをビルドすることによく似ていま
す．この場合は，プライマリの名前は`LIBRARIES'です．ライブラリは
`libdir'や`pkglibdir'にインストールされます．

   libtoolと`LTLIBRARIES'プライマリを使用して共有ライブラリをビルド
する方法についての詳細は，*Note A Shared Library::.

   それぞれの`_LIBRARIES'変数は，ビルドされるライブラリのリストです．
例えば，`libcpio.a'という名前のライブラリを作成し，それをインストー
ルしないため，以下のように書きます．

     noinst_LIBRARIES = libcpio.a

   ライブラリに組み込まれるソースは，プログラムのときのように，
`_SOURCES'変数によって正しく決定されます．ライブラリ名は標準的に
されるので(*note Canonicalization::)，`liblob.a'に対応する
`_SOURCES'変数は`liblob.a_SOURCES'ではなく
`liblob_a_SOURCES'になることに注意してください．

   追加のオブジェクトは，`LIBRARY_LIBADD'変数を使用してライブ
ラリに追加することが可能です．これは`configure'で決定されるオブジェ
クトに対して使用されるべきです．再び`cpio'からの引用です． 

     libcpio_a_LIBADD = $(LIBOBJS) $(ALLOCA)

   さらに，configure時まで存在しない追加のオブジェクトに対するソースは，
`BUILT_SOURCES'変数に追加する必要があります(*note Sources::)．

スタティックライブラリをビルドすることは，すべてのオブジェクトファイル
をコンパイルし，その後で`$(AR) $(ARFLAGS)'にライブラリ名とオブジェ
クトのリストを続けたものを呼び出し，そして最後にライブラリで
`$(RANLIB)'を呼び出すことで達成されます．`RANLIB'を定義する
ため，`AC_PROG_RANLIB'を`configure.ac'から呼び出すべきです
(そうしなければ，Automakeは文句を言います)．`AR'と`ARFLAGS'
のデフォルトはそれぞれ`ar'と`cru'です．これらの二つの変数を
`Makefile.am'で設定する，`configure.ac'で`AC_SUBST'する，
または，ライブラリごとに`maude_AR'変数で定義することで優先させる
ことが可能です(*note Program and Library Variables::)．


File: automake-ja.info,  Node: A Shared Library,  Next: Program and Library Variables,  Prev: A Library,  Up: Programs

7.3 共有ライブラリのビルド
==========================

移植性の高い共有ライブラリをビルドすることは比較的複雑な問題です．この
ために，GNU Libtoolは(*note Introduction:
(libtool)Top.)プラットホームに依存しない方法で共有ライブラリをビルドする補助
を行なうために作成されました．

* Menu:

* Libtool Concept::             Introducing Libtool
* Libtool Libraries::           Declaring Libtool Libraries
* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally
* Conditional Libtool Sources::  Choosing Library Sources Conditionally
* Libtool Convenience Libraries::  Building Convenience Libtool Libraries
* Libtool Modules::             Building Libtool Modules
* Libtool Flags::               Using _LIBADD and _LDFLAGS
* LTLIBOBJ::                    Using $(LTLIBOBJ)
* Libtool Issues::              Common Issues Related to Libtool's Use


File: automake-ja.info,  Node: Libtool Concept,  Next: Libtool Libraries,  Up: A Shared Library

7.3.1 Libtoolの概念
-------------------

Libtoolは，共有ライブラリとスタティックライブラリを統一した概念で，
"libtoolライブラリ(libtool libraries)"と呼ばれるものに抽出します．
Libtoolライブラリは`.la'接尾子を使用しているファイルで，スタティッ
クライブラリ，共有ライブラリ，または両方を表します．正確な性質は
`./configure'が実行されるまで決定することは不可能です．すべてのプ
ラットフォームですべての種類のライブラリをサポートしているわけではあり
ませんし，ユーザは明示的にビルドするライブラリを選択するすることも可能
です．(しかし，パッケージの管理者はデフォルトを調整することが可能です．
*Note The `AC_PROG_LIBTOOL' macro: (libtool)AC_PROG_LIBTOOL.)

共有ライブラリとスタティックライブラリのオブジェクトファイルは，別々に
コンパイルする必要があるので，libtoolはコンパイル時にも使用されます．
libtoolでビルドされたライブラリは，"libtoolオブジェクト(libtool
objects)"と呼ばれます．これらは，`.lo'接尾子を利用しているファイ
ルです．libtoolライブラリはこれらのlibtoolオブジェクトからビルドされま
す．

   `.la'や`.lo'ファイルの構造や，libtoolがそれらを構築する方法
を仮定すべきではありません．これはlibtoolが考えることで，最後のものは
libtoolの中身を勉強したい人が欲しいものです．しかし，これらのファイル
は，libtoolライブラリをビルドするとき，`Makefile'ルール内のターゲッ
トと依存性として使用されるので，その存在が重要になります．例えば，条件
的にソースファイルをビルドする依存性を表現するとき，これらを参照する必
要がある状況があります(*note Conditional Libtool Sources::)．

動的にロードされるモジュールとなっているプラグインシステムを書こうと考
えている人々は，`libltdl'の中を見るべきです．libtoolによるライブ
ラリのdlopenです(*note Using libltdl: (libtool)Using
libltdl.)．これは，libtoolライブラリを動的にロードするための移
植性の高いdlopenを提供し，やむをえないところではスタティックにリンクす
ることも可能です．

   我々がAutomakeを用いてlibtoolを使用する方法の詳細を議論する前に，
libtoolマニュアルにあるlibtoolとともにAutomakeを使用する方法に付いて書
かれているセクションにも注意しておくべきです(*note Using Automake with
Libtool: (libtool)Using Automake.)．


File: automake-ja.info,  Node: Libtool Libraries,  Next: Conditional Libtool Libraries,  Prev: Libtool Concept,  Up: A Shared Library

7.3.2 Libtoolライブラリのビルド
-------------------------------

Automakeは，`LTLIBRARIES'プライマリで宣言されたライブラリをビルド
するためにLibtoolを使用します．それぞれの`_LTLIBRARIES'変数はビル
ドするlibtoolライブラリのリストです．例えば，`libgettext.la'とい
う名前のlibtoolライブラリを作成し，`libdir'にインストールするため
に，以下のように書いてください．

     lib_LTLIBRARIES = libgettext.la
     libgettext_la_SOURCES = gettext.c gettext.h ...

   Automakeは変数`pkglibdir'を前もって定義しているので，ライブラリを
`$(libdir)/@PACKAGE@/'にインストールするために，
`pkglib_LTLIBRARIES'を使用することが可能です．


File: automake-ja.info,  Node: Conditional Libtool Libraries,  Next: Conditional Libtool Sources,  Prev: Libtool Libraries,  Up: A Shared Library

7.3.3 Libtoolライブラリのビルドの条件分岐
-----------------------------------------

プログラムの条件式のように(*note Conditional Programs::)，ライブラリの
条件付きビルドにも主に二つの方法があります．Automakeの条件式を使用する
方法と，Autoconfの`AC_SUBST'を使用する方法です．

気を付けるべき重要な実装の詳細は，ライブラリがインストールされる場所が
libtoolにとって重要だということです．それは，`-rpath'オプションを
使用して_リンク時に_示されるものが必要になります．

Automakeの実行時にインストール先のディレクトリが分かっているライブラリ
に対し，Automakeは自動的に適切な`-rpath'オプションをlibtoolに供給
します．これは，`lib_LTLIBRARIES'のように，インストール可能な
`_LTLIBRARIES'に明示的にリストアップされているライブラリの場合で す．

   しかし，configure時に決定される(`EXTRA_LTLIBRARIES'に記述されてい
る)ライブラリに対して，Automakeは最終的なインストールディレクトリが分
かりません．そのようなライブラリに対して，適切な`_LDFLAGS'変数に
`-rpath'オプションを手動で追加する必要があります．

   以下の例で，これら二つの手法の違いを説明します．

   この例は，`$(WANTEDLIBS)'が`AC_SUBST'されている変数で，
`./configure'時に`libfoo.la'，`libbar.la'，その両方，ま
たは空で設定されます．`$(WANTEDLIBS)'は`lib_LTLIBRARIES'に書
かれていますが，Automakeは，それが`libfoo.la'または
`libbar.la'に関連付けされることを，これら二つのライブラリに対する
リンクルールが作成されるときまで推測することが不可能です．このため，特
に`-rpath'引数を提供する必要があります．

     EXTRA_LTLIBRARIES = libfoo.la libbar.la
     lib_LTLIBRARIES = $(WANTEDLIBS)
     libfoo_la_SOURCES = foo.c ...
     libfoo_la_LDFLAGS = -rpath '$(libdir)'
     libbar_la_SOURCES = bar.c ...
     libbar_la_LDFLAGS = -rpath '$(libdir)'

   これは，同じ`Makefile.am'で，`WANT_LIBFOO'と
`WANT_LIBBAR'という名前のAutomakeの条件式を使用しているものがあり
ます．Automakeは，両方のライブラリをインストールする場合，結局
`$(libdir)'になることが明らかなので，`-rpath'の設定を自分で
計算することが可能です．

     lib_LTLIBRARIES =
     if WANT_LIBFOO
     lib_LTLIBRARIES += libfoo.la
     endif
     if WANT_LIBBAR
     lib_LTLIBRARIES += libbar.la
     endif
     libfoo_la_SOURCES = foo.c ...
     libbar_la_SOURCES = bar.c ...


File: automake-ja.info,  Node: Conditional Libtool Sources,  Next: Libtool Convenience Libraries,  Prev: Conditional Libtool Libraries,  Up: A Shared Library

7.3.4 条件的ソースを用いたLibtoolライブラリ
-------------------------------------------

ライブラリでのソースの条件的コンパイルは，プログラムでのソースの条件的
コンパイルと同じ方法で達成することが可能です(*note Conditional
Sources::)．違いは，`_LDADD'の代わりに`_LIBADD'を使用し，
libtoolオブジェクト(`.lo'ファイル)について記述することだけです．

   そのため，*Note Conditional Sources::の`hello'の例を真似てみると，
以下のような`Makefile.am'を用いて`hello-linux.c'または
`hello-generic.c'のいずれかを使用して`libhello.la'ライブラリ
をビルドすることが可能でしょう．

     lib_LTLIBRARIES = libhello.la
     libhello_la_SOURCES = hello-common.c
     EXTRA_libhello_la_SOURCES = hello-linux.c hello-generic.c
     libhello_la_LIBADD = $(HELLO_SYSTEM)
     libhello_la_DEPENDENCIES = $(HELLO_SYSTEM)

そして，`$(HELLO_SYSTEM)'が`./configure'で
`hello-linux.lo'または`hello-generic.lo'のいずれかに設定され
ていることを確かめて下さい．

また，Automake条件式を使用して以下のように簡単にすることも可能でしょう．

     lib_LTLIBRARIES = libhello.la
     libhello_la_SOURCES = hello-common.c
     if LINUX
     libhello_la_SOURCES += hello-linux.c
     else
     libhello_la_SOURCES += hello-generic.c
     endif


File: automake-ja.info,  Node: Libtool Convenience Libraries,  Next: Libtool Modules,  Prev: Conditional Libtool Sources,  Up: A Shared Library

7.3.5 Libtoolのコンビニエンスライブラリ
---------------------------------------

インストールされないlibtoolライブラリをビルドしたいときもあります．こ
れらは，"libtoolコンビニエンスライブラリ(libtool convenience
libraries)"と呼ばれ，通常多くのサブライブラリをカプセル化し，後でイン
ストールされる大きな一つのライブラリにまとめるときに使用されます．

   libtoolコンビニエンスライブラリは，`noinst_LTLIBRARIES'，
`check_LTLIBRARIES'，または`EXTRA_LTLIBRARIES'でも宣言されま
す．インストールされるlibtoolライブラリと異なり，それらはリンク時に
`-rpath'フラグが不要です(実際，これが違うだけです)．

   `noinst_LTLIBRARIES'でリストアップされているコンビニエンスライブ
ラリは，常にビルドされます．`check_LTLIBRARIES'にリストアップされ
ているものは，`make check'のときだけビルドされます．最後に，
`EXTRA_LTLIBRARIES'でリストアップされているライブラリは，明示的に
はビルドされません．Automakeはそれらのビルドルールを出力しますが，ライ
ブラリがMakefileの依存性に表れない場合はビルドされません(これは，
`EXTRA_LTLIBRARIES'が条件付きコンパイルで使用されるためです)．

   サブディレクトリのlibtoolコンビニエンスライブラリを，一つの中心となる
`libtop.la'ライブラリにまとめる設定例は以下のようになります．

     # -- Top-level Makefile.am --
     SUBDIRS = sub1 sub2 ...
     lib_LTLIBRARIES = libtop.la
     libtop_la_SOURCES =
     libtop_la_LIBADD = \
       sub1/libsub1.la \
       sub2/libsub2.la \
       ...

     # -- sub1/Makefile.am --
     noinst_LTLIBRARIES = libsub1.la
     libsub1_la_SOURCES = ...

     # -- sub2/Makefile.am --
     # showing nested convenience libraries
     SUBDIRS = sub2.1 sub2.2 ...
     noinst_LTLIBRARIES = libsub2.la
     libsub2_la_SOURCES =
     libsub2_la_LIBADD = \
       sub21/libsub21.la \
       sub22/libsub22.la \
       ...


File: automake-ja.info,  Node: Libtool Modules,  Next: Libtool Flags,  Prev: Libtool Convenience Libraries,  Up: A Shared Library

7.3.6 Libtoolのモジュール
-------------------------

これらは，dlopenされることを意味するlibtoolライブラリです．それらは，
リンク時に`-module'をlibtoolに渡すことで示されます．

     pkglib_LTLIBRARIES = mymodule.la
     mymodule_la_SOURCES = doit.c
     mymodule_la_LDFLAGS = -module

   通常，Automakeは共有ライブラリの名前が`lib'で始まることを要求しま
す．しかし，動的にロードされるモジュールをビルドしている場合，"標準的
でない" 名前を使用したいかもしれません．

   `mymodule_la_SOURCES'が指定されていない場合，そのデフォルトは単一
ファイルの`mymodule.c' (*note Default _SOURCES::)です．


File: automake-ja.info,  Node: Libtool Flags,  Next: LTLIBOBJ,  Prev: Libtool Modules,  Up: A Shared Library

7.3.7 _LIBADDと_LDFLAGS
-----------------------

前のセクションで見てきたように，`LIBRARY_LIBADD'変数は，
LIBRARYに追加する補助的なlibtoolオブジェクト(`.lo'ファイル)
やlibtoolライブラリ(`.la')をリストアップするために使用すべきです．

   `LIBRARY_LDFLAGS'変数には，`-version-info'，
`-static'，などの追加のlibtoolフラグをリストアップします． *Note Using
libltdl: (libtool)Link mode.


File: automake-ja.info,  Node: LTLIBOBJ,  Next: Libtool Issues,  Prev: Libtool Flags,  Up: A Shared Library

7.3.8 `LTLIBOBJS'
-----------------

通常のライブラリは`$(LIBOBJS)'に含まれますが，libtoolライブラリは
`$(LTLIBOBJS)'を使用する必要があります．libtoolが処理するオブジェ
クトファイルは，最終的に`.o'にする必要がないため，このように要求
されます．

   現在，`LIBOBJS'から`LTLIBOBJS'を求めることはAutoconfが自動的
に実行します(*note `AC_LIBOBJ' vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs
LIBOBJS.)．


File: automake-ja.info,  Node: Libtool Issues,  Prev: LTLIBOBJ,  Up: A Shared Library

7.3.9 Libtoolの使用に関連する一般的な問題
-----------------------------------------

7.3.9.1 `required file `./ltmain.sh' not found'
...............................................

libtoolは，パッケージにlibtoolのサポートを行なうファイルをインストール
する`libtoolize'と呼ばれるツールから生じます．このコマンドを実
行すると，`ltmain.sh'がインストールされます．`aclocal'と
`automake'の前にそれを実行すべきです．

古いパッケージから新しいautotoolにアップグレードすると，古いバージョン
のAutomakeは`libtoolize'と呼ばれるものを使用していたのでこの問
題に直面します．このため，古いビルドスクリプトでは`libtoolize'
を呼び出しません．

   Automake1.6から，`libtoolize'の実行がAutomakeの仕事ではないと
決定しました．その代わり，その機能は`autoreconf'コマンドに渡さ
れました(*note Using `autoreconf': (autoconf)autoreconf
Invocation.)．いつ何を実行するのか覚えたくない場合，
`autoreconf'コマンドだけを勉強して下さい．希望的には，既存の
`bootstrap.sh'や`autogen.sh'スクリプトを`autoreconf'
の呼び出しに置換することで，将来においても同様の互換性の無い変更から自
由になれるでしょう．

7.3.9.2 libtoolで作成されたりされなかったりするオブジェクト
...........................................................

同じソースファイルが，libtoolライブラリのビルドと，libtoolではない他の
ターゲット(プログラムだったり，他のライブラリだったりします)をビルドす
るために使用されることもあります．

   以下の`Makefile.am'を考えてみましょう．

     bin_PROGRAMS = prog
     prog_SOURCES = prog.c foo.c ...

     lib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES = foo.c ...

(この平凡な状況では，`prog_SOURCES'にリストアップされている
`foo.c'の代わりに，`prog'を用いて`libfoo.la'をリンクす
ることを避けることで，問題を回避することが可能です．しかし，実際には
`prog'と`libfoo.la'は別々に保持したいと仮定します．)

   技術的には，我々は`prog'に対して`foo.$(OBJEXT)'をビルドし，
`libfoo.la'に対して`foo.lo'をビルドべきだということを意味し
ます．問題は，`foo.lo'を作成する仮定で，libtoolが
`foo.$(OBJEXT)'を削除(または置換)する可能性があるということです -
これは避けられません．

このため，Automakeがこの状況を検出すると，以下のようなメッセージで文句
を言います．
     object `foo.$(OBJEXT)' created both with libtool and without

この問題を回避する方法は，これら二つのオブジェクトを確実に異なるベース
名にすることです．*Note renamed
objects::で説明されているように，ターゲッ
トごとのフラグが使用されているとき，これは自動的に行なわれます．

     bin_PROGRAMS = prog
     prog_SOURCES = prog.c foo.c ...
     prog_CFLAGS = $(AM_CFLAGS)

     lib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES = foo.c ...

`prog_CFLAGS = $(AM_CFLAGS)'の追加は，`prog_CFLAGS'が定義さ
れているとき，`AM_CFLAGS'の代わりにそれを使用するので，ほとんど何
もしません．しかし，副作用として，`prog.c'と`foo.c'を
`prog-prog.$(OBJEXT)'と`prog-foo.$(OBJEXT)'にコンパイルし，
問題を解決することになります．


File: automake-ja.info,  Node: Program and Library Variables,  Next: Default _SOURCES,  Prev: A Shared Library,  Up: Programs

7.4 プログラムとライブラリの変数
================================

それぞれのプログラムに関連して，プログラムのビルドの方法を修正するため
に使用可能な変数の集合があります．それぞれのライブラリに対しても，それ
に似たような変数のリストがあります．プログラム(やライブラリ)の標準的な
名前が，これらの変数の命名に対してベースとして使用されます．

   以下のリストでは，名前"maude"をプログラムやライブラリを示すものとし
て使用しています．`Makefile.am'で，これをプログラムの標準的な名前
に置換してください．このリストは，"maude"をプログラムを示すものとし
ていますが，一般的に同じルールを，スタティックライブラリやダイナミック
ライブラリに適用します．以下の文章では，プログラムとライブラリで異なる
状況をコメントしています．

`maude_SOURCES'
     存在する場合，この変数は，プログラムをビルドするためにコンパイルされる，
     すべてのソースファイルをリストアップします．プログラムをビルドしている
     とき，Automakeはそれぞれのソースファイルを単一の`.o'ファイル(や
     libtoolを使用しているときは`.lo')にコンパイルさせます．通常これら
     のオブジェクトファイルはソースファイルの後に命名されますが，他の要因で
     変更することが可能です．`_SOURCES'変数のファイルに認識できない拡
     張子がある場合，Automakeは二つのうちの一つを実行します．認識できない拡
     張子を持つファイルを`.o'に変換するためのサフィックスルールが存在
     する場合，automakeはこのファイルを，その他の(言語の)ソースファイルとし
     て扱います(*note Support for Other
     Languages::)．それ以外では，ファイ
     ルがヘッダファイルと考えて無視されます．

     接頭辞の`dist_'と`nodist_'で，`_SOURCES'にリストアップ
     されているファイルを配布するかどうか制御するために使用することが可能で
     す．ソースはデフォルトで配布されるので，`dist_'は冗長ですが，必要
     があれば明確にするために指定可能です．

     `_SOURCES'変数に与えるものとして`dist_'と`nodist_'の両
     方を一度に用いることが可能です．これによって，配布するファイルとしない
     ものに簡単に分類することができ，例えば以下のようにします．

          nodist_maude_SOURCES = nodist.c
          dist_maude_SOURCES = dist-me.c

     デフォルトで，出力ファイル(Unixシステム上では`.o'ファイル)は，現
     在のビルドディレクトリに書き込まれます．しかし，現在のディレクトリに対
     してオプションの`subdir-objects'の影響がある場合，`.o'ファイ
     ルはソースファイルの後で指名されるサブディレクトリに書き込まれます．例
     えば，`subdir-objects'が利用可能な場合，`sub/dir/file.c'は
     `sub/dir/file.o'にコンパイルされます．この処理モードを好む人もい
     ます．`subdir-objects'を`AUTOMAKE_OPTIONS'で指定することが可
     能です(*note Options::)． 

`EXTRA_maude_SOURCES'
     Automakeは，コンパイルしたいファイルのリストを_静的に_知っている
     必要があります．一つには，該当する`Makefile.in'が要求する言語のサ
     ポートの種類をAutomakeが知るための唯一の方法だということがあげられます．
     (1)例えばこれには，`@my_sources@'のようなconfigureの置換
     式を`_SOURCES'に書き込むことができないという意味があります．ソー
     スファイルの条件コンパイルを行ない，例えば`_LDADD'(以下を参照して
     ください)のオブジェクト名を適切に置換するために`configure'を使用
     したい場合，対応するソースファイルを`EXTRA_'にリストアップした方
     が良いでしょう．

     この変数は，例えば`nodist_EXTRA_maude_SOURCES'のように，
     `dist_'と`nodist_'もサポートします．

`maude_AR'
     スタティックライブラリは，デフォルトで，`$(AR) $(ARFLAGS)'にライ
     ブラリ名とライブラリに書き込むオブジェクトを続けて呼び出すことで作成さ
     れます．`_AR'変数でこれに優先することが可能です．これは，通常C++
     で使用されます．C++コンパイラには，ライブラリに組み込むすべてのテンプ
     レートを生成するために，特殊な呼び出しが必要なものもあります．例えば，
     SGI C++コンパイラは，この変数を以下のように設定します．
          libmaude_a_AR = $(CXX) -ar -o

`maude_LIBADD'
     `_LIBADD'変数を使用することで，追加のオブジェクトを_ライブラ
     リ_に加えることが可能です．例えばこれは，`configure'で決定される
     オブジェクトに対して使用すべきです(*note A Library::)．

`maude_LDADD'
     `_LDADD'変数に追加のオブジェクトをリストアップすることで，
     _プログラム_に加えることが可能です．例えばこれは，
     `configure'で決定されるオブジェクトに対して使用すべきです (*note
     Linking::)．

     (`-l'，`-L'，`-dlopen'，そして`-dlpreopen'以外の)
     プログラム特有のリンカフラグを渡すために`_LDADD'と`_LIBADD'
     を使用することは不適切です．この目的に対しては，`_LDFLAGS'変数を
     使用してください．

     例えば，`configure.ac'で`AC_PATH_XTRA'を使用している場合，X
     のライブラリに対してプログラムをリンクするため，以下のようにすることが
     可能でしょう．

          maude_LDADD = $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)

`maude_LDFLAGS'
     これは，プログラムや共有ライブラリのリンク段階に特別なフラグを渡すため
     に使用する変数です．

`maude_DEPENDENCIES'
     実際には，プログラムの一部にはならない他のターゲットに依存するプログラ
     ムがあることが，役に立つ場合もあります．これは，`_DEPENDENCIES'変
     数を使用することで可能になります．それぞれのプログラムは，その変数の内
     容に依存しますが，それ以上に解釈されません．

     `_DEPENDENCIES'が提供されていない場合，それはAutomakeが考慮します．
     自動的に割り当てられる値は`_LDADD'や`_LIBADD'の内容で，ほと
     んどのconfigure置換式，`-l'，`-L'，`-dlopen'，
     `-dlpreopen'，そして`-dlpreopen'オプションは削除されています．
     残っているconfigureの置換式は，`$(LIBOBJS)'と`$(ALLOCA)'です．
     これらは，生成される`_DEPENDENCIES'に対して無効な値を生成しないこ
     とが分かっているので残されます．

`maude_LINK'
     プログラムごとを基本として，(デフォルトの)リンカに優先することが可能で
     す．デフォルトで，プログラムで使用されている言語によってリンカは選択さ
     れます．例えば，C++のソースコードを含むプログラムでは，C++コンパイラが
     リンクに使用されます．`_LINK'変数は，すべての`.o'ファイル名
     を引数として渡すことが可能なコマンドの名前を含んでいる必要があります．
     基礎となるプログラム名は，`_LINK'に渡され_ない_ことに注意し
     てください．通常は`$@'を使用します．

          maude_LINK = $(CCLD) -magic -o $@

`maude_CCASFLAGS'
`maude_CFLAGS'
`maude_CPPFLAGS'
`maude_CXXFLAGS'
`maude_FFLAGS'
`maude_GCJFLAGS'
`maude_LFLAGS'
`maude_OBJCFLAGS'
`maude_RFLAGS'
`maude_YFLAGS'
     Automakeでは，プログラムごと(またはライブラリごと)を基本として，コンパ
     イルフラグを設定することが可能です．単一のソースファイルを複数のプログ
     ラムに含めることが可能で，それぞれのプログラムに対して異なるフラグでコ
     ンパイルされる可能性もあります．これは，あらゆる言語に対し，直接
     Automakeがサポートすることで動作します．これらの"ターゲットごとの
     コンパイルフラグ(per-target compilation flags)"は，`_CCASFLAGS'，
     `_CFLAGS'，`_CPPFLAGS'，`_CXXFLAGS'，`_FFLAGS'，
     `_GCJFLAGS'，`_LFLAGS'，`_OBJCFLAGS'，`_RFLAGS'，
     そして`_YFLAGS'です．

     ターゲットごとのコンパイルフラグを使用するとき，Automakeは，中間的なオ
     ブジェクトファイルに対して異なる名前を選択します．通常，
     `sample.c'のようなファイルは，コンパイルされて`sample.o'が生
     成されます．しかし，プログラムの`_CFLAGS'変数を設定した場合，オブ
     ジェクトファイルは，例えば`maude-sample.o'のように命名されます．
     (*Note renamed objects::も参照して下さい．)

     ターゲットごとにフラグを用いてコンパイルする際は，通常の`AM_'形式
     のフラグ変数は自動的にコンパイルに組み込まれ_ません_(しかし，ユー
     ザ形式の変数は組み込まれ_ます_)．そのため，例えば，
     `AM_CFLAGS'の変数も使用して`maude'のコンパイルを行なうと仮定
     すると，以下のように書く必要があります．

          maude_CFLAGS = ... your flags ... $(AM_CFLAGS)

`maude_SHORTNAME'
     利用可能なファイル名が非常に短いプラットフォームもあります．これらのシ
     ステムと，ターゲットごとのコンパイルフラグを同時にサポートするために，
     Automakeでは，中間的なオブジェクトファイルの命名方法に影響する"短い名
     前"を設定することが可能です．例えば，以下の例のようにします．

          bin_PROGRAMS = maude
          maude_CPPFLAGS = -DSOMEFLAG
          maude_SHORTNAME = m
          maude_SOURCES = sample.c ...

     オブジェクトファイルは`maude-sample.o'ではなく`m-sample.o'と
     命名されます．

     この機能は，実行上滅多に必要になりませんし，要求されていることが分かる
     まで使用を避けることを推奨します．

   ---------- Footnotes ----------

   (1) それ以外にも，この制限に対してあまり知られていない理由も存在
します．


File: automake-ja.info,  Node: Default _SOURCES,  Next: LIBOBJS,  Prev: Program and Library Variables,  Up: Programs

7.5 デフォルトの`_SOURCES'
==========================

`_SOURCES'変数は，プログラム(*note A Program::)，ライブラリ (*note A
Library::)，そしてLibtoolライブラリ(*note A Shared Library::)
のソースファイルを指定するために使用します．

そのような変数がターゲットに対して指定されていない場合，Automakeは独自
に定義します．デフォルトは，コンパイルする単一のCファイルで，その名前
はターゲット自身の名前を元にしていて，拡張子を`.c'に置換したもの
です．(Cのデフォルトは危険ですが，我々は歴史的な理由で身動きがとれなく
なっています．)

   例えば，以下のような`Makefile.am'があって，対応する
`libfoo_a_SOURCES'が無い場合を考えます．

     lib_LIBRARIES = libfoo.a sub/libc++.a

`libfoo.a'はデフォルトのソースファイル名`libfoo.c'を使用して
ビルドされ，`sub/libc++.a'は`sub/libc++.c'からビルドされます．
(より古いバージョンでは，`sub/libc++.a'は`sub_libc___a.c'か
ら，すなわちデフォルトのソースはターゲットの標準的な名前に`.c'を
追加したものでした．我々は，新しい動作はより賢明だと信じていますが，後
方互換性として，その名前のファイルやルールが存在する場合，automakeは古
い名前を使用します．)

デフォルトのソースは，たくさんのテストプログラムをそれぞれ単一のソース
からビルドする，テストスイートで主に役に立ちます．例えば以下のようにし
ます．

     check_PROGRAMS = test1 test2 test3

`test1'，`test2'，そして`test3'は，それぞれ
`test1.c'，`test2.c'，そして`test3.c'からビルドされます．

   これが便利になるもう一つの状況は，独自のファイル(`moduleN.c')で定
義されている多くのLibtoolモジュール(`moduleN.la')をビルドするとき です．

     AM_LDFLAGS = -module
     lib_LTLIBRARIES = module1.la module2.la module3.la

おしまいに，このデフォルトのソースを求めることを避ける必要がある状況が
一つあります．ターゲットがソースからビルドされないときです．我々は
*Note true::でそのような例を見てきました．これは，ターゲットのすべての構
成要素が既にコンパイルされていて，単に`_LDADD'変数を使用して結合
する必要があるときに生じます．そして，automakeがデフォルトを求めないよ
うに空の`_SOURCES'変数を定義する必要があります．

     bin_PROGRAMS = target
     target_SOURCES =
     target_LDADD = libmain.a libmisc.a


File: automake-ja.info,  Node: LIBOBJS,  Next: Program variables,  Prev: Default _SOURCES,  Up: Programs

7.6 LIBOBJSとALLOCAに対する特別扱い
===================================

Automakeは，`$(LIBOBJS)'と`$(ALLOCA)'を使用していることを明
示的に認識し，そしてこの情報を使用し，配布物に適切なソースファイルを自
動的に含めるため(*note Dist::)，`configure.ac'から派生される
`LIBOBJS'ファイルのリストに追加します．これらのソースファイルは，
依存性追跡でも自動的に処理されます．*Note Dependencies::.

   `$(LIBOBJS)'と`$(ALLOCA)'は，あらゆる`_LDADD'や
`_LIBADD'で特別に認識されます．


File: automake-ja.info,  Node: Program variables,  Next: Yacc and Lex,  Prev: LIBOBJS,  Up: Programs

7.7 プログラムビルド時に使用される変数
======================================

Automakeがコンパイルに使用する`Makefile'変数を知ることが役に立ち
つこともあります．例えば，特別な状況では，自分でコンパイルをする必要が
あるかもしれません．

   Autoconfから継承される変数もあります．これらは`CC'，`CFLAGS'，
`CPPFLAGS'，`DEFS'，`LDFLAGS'，そして`LIBS'です． 

   Automake自身が定義する追加の変数もあります．

`AM_CPPFLAGS'
     この変数の内容は，Cプリプロセッサを呼び出すコンパイルで毎回渡されます．
     それはプリプロセッサへの引数リストです．例えば，`-I'と`-D'オ
     プションは，ここにリストアップすべきです．

     Automakeは，すでに`-I'オプションを自動的に提供しています．特に，
     `-I$(srcdir)'，`-I.'，そして(`AC_CONFIG_HEADERS'や
     `AM_CONFIG_HEADER'を使用している場合は)`config.h'があるディ
     レクトリを示す`-I'を生成します．`nostdinc'オプションを使用す
     ることで，デフォルトの`-I'オプションを利用不可能にすることが可能
     です．

     実行形式ごと(またはライブラリごと)に`_CPPFLAGS'変数が定義されてい
     る場合，それを優先するので，`AM_CPPFLAGS'は無視されます．

`INCLUDES'
     これは，`AM_CPPFLAGS'と同じ仕事をします(または，ターゲットごとに
     `_CPPFLAGS'が使用されている場合と同じです)．それは同じ機能に対す
     る古い名前です．この変数の使用には反対します．我々は，代わりに
     `AM_CPPFLAGS'とターゲットごとの`_CPPFLAGS'の使用を勧めます．

`AM_CFLAGS'
     これは，`Makefile.am'の著者が，追加のCコンパイラフラグを渡すため
     に使用することが可能な変数です．その完全な説明はどこかにあるでしょう．
     状況によっては，実行形式ごと(またはライブラリごと)の`_CFLAGS'が優
     先され，これは使用されません．

`COMPILE'
     これはCソースファイルをコンパイルするために実際に使用されるコマンドで
     す．完全なコマンドラインを構成するために，ファイル名が追加されます．

`AM_LDFLAGS'
     これは，`Makefile.am'の著者が，追加のリンカフラグを渡すために使用
     することが可能な変数です．状況によっては，実行形式ごと(またはライブラ
     リごと)の`_LDFLAGS'が優先され，これは使用されません．

`LINK'
     これはCプログラムをリンクするために実際に使用されるコマンドです．それ
     にはすでに，`-o $@'と通常参照される変数(例えば，`CFLAGS')が
     含まれています．それは，リンクされるオブジェクトファイルとライブラリの
     名前を"引数"として受けとります．


File: automake-ja.info,  Node: Yacc and Lex,  Next: C++ Support,  Prev: Program variables,  Up: Programs

7.8 YaccとLexのサポート
=======================

AutomakeはYaccとLexに対して幾分特異なサポートを行ないます．

   Automakeは，`yacc'(あるいは`lex')によって生成された`.c'
ファイルが，入力ファイルのベース名を使用して命名されていると仮定します．
すなわち，yaccソースファイル`foo.y'に対して，Automakeは中間ファイ
ルを(より伝統的な`y.tab.c'ではなく)`foo.c'と命名します．

   yaccソースファイルの拡張子は，結果として生じる`C'あるいは `C++'
ファイルの拡張子を決定するために使用されます．ファイルの拡
張子が`.y'の場合は`.c'になります．同様に`.yy'は
`.cc'に，`.y++'は`c++'に，そして`.yxx'は `.cxx'になります．

   同様に，lexソースファイルは，`C'や`C++'を生成するために使用
することが可能です．拡張子の`.l'，`.ll'，`.l++'，そして
`.lxx'が認識されます．

   あらゆる`SOURCES'変数に，(`C'や`C++'の)中間的なファイル
を明示的に書いてはいけません．ソースファイルだけをリストアップします．

   `yacc'(あるいは`lex')によって生成さる中間的なファイルは，作
成されるすべての配布物に含められます．そのためユーザが`yacc'や
`lex'を持っている必要がありません．

   `yacc'ソースファイルが見つかった場合，`configure.ac'で変数
`YACC'を定義する必要があります．これは，マクロ`AC_PROG_YACC'
を呼び出すことで最も容易に行なえます(*note Particular Program Checks:
(autoconf)Particular Programs.)．

   `yacc'が呼び出された時，`YFLAGS'と`AM_YFLAGS'フラグが渡
されます．前者はユーザ変数で，後者は`Makefile.am'の著者のためのも
のです．

   `AM_YFLAGS'は通常，`-d'オプションを`yacc'に渡すとき使用
されます．Automakeはこれが意味するところを知っていて，`yacc -d'で
ビルドされるヘッダファイルの更新と配布のルールを，自動的に調整します．
しかし，Automakeが分からないものは，このヘッダが使用される場所です．ヘッ
ダが最初に使用される前にヘッダをビルドしておくことはあなたの責任です．
通常これは，ヘッダが他のファイルからインクルードされているとき，依存性
の追跡が動作するために必要となります．一般的な解決策は，ヘッダファイル
を以下のように`BUILT_SOURCES' (*note Sources::)にリストアップする
ことです．

     BUILT_SOURCES = parser.h
     AM_YFLAGS = -d
     bin_PROGRAMS = foo
     foo_SOURCES = ... parser.y ...

   同様に，`lex'ソースファイルがある場合，`configure.ac'で変数
`LEX'を定義する必要があります．こうするために`AC_PROG_LEX'を
使用することが可能ですが(*note Particular Program Checks:
(autoconf)Particular Programs.)，`AM_PROG_LEX'マ クロ(*note
Macros::)の使用を推奨します．

   `lex'が呼び出されたとき，`LFLAGS'と`AM_LFLAGS'フラグが
渡されます．前者はユーザ変数で，後者は`Makefile.am'の著者のための
ものです．

   Automakeで，一つのプログラムに複数の`yacc'(または`lex')ソー
スファイルを含めることが可能になります．ディレクトリに一つ以上の異なる
`yacc'(または`lex')のソースファイルがあるとき，Automakeは，
サブディレクトリで`yacc'(または`lex')を実行するために，
`ylwrap'と呼ばれる小さいプログラムを使用します．これが必要になる
のは，yaccの出力ファイル名が固定されていて，並列的なmakeで`yacc'
の一つ以上のインスタンスを同時に呼び出す可能性があるためです．
`ylwrap'プログラムは，Automakeと一緒に配布されます．それは
`AC_CONFIG_AUX_DIR'が指定するディレクトリ (*note Finding `configure'
Input: (autoconf)Input.)，または，そ
のマクロが`configure.ac'で使用されていない場合はカレントディレク
トリにあります．

   `yacc'に対しては，簡単なロックでの管理は不十分です．`yacc'の
出力は，内部で常に同じシンボル名を使うので，同じ実行形式の中に二つの
`yacc'パーサーをリンクするは不可能です．

   `gdb'では，使用する名前を以下のように変更してください．
     #define	yymaxdepth c_maxdepth
     #define	yyparse	c_parse
     #define	yylex	c_lex
     #define	yyerror	c_error
     #define	yylval	c_lval
     #define	yychar	c_char
     #define	yydebug	c_debug
     #define	yypact	c_pact
     #define	yyr1	c_r1
     #define	yyr2	c_r2
     #define	yydef	c_def
     #define	yychk	c_chk
     #define	yypgo	c_pgo
     #define	yyact	c_act
     #define	yyexca	c_exca
     #define yyerrflag c_errflag
     #define yynerrs	c_nerrs
     #define	yyps	c_ps
     #define	yypv	c_pv
     #define	yys	c_s
     #define	yy_yys	c_yys
     #define	yystate	c_state
     #define	yytmp	c_tmp
     #define	yyv	c_v
     #define	yy_yyv	c_yyv
     #define	yyval	c_val
     #define	yylloc	c_lloc
     #define yyreds	c_reds
     #define yytoks	c_toks
     #define yylhs	c_yylhs
     #define yylen	c_yylen
     #define yydefred c_yydefred
     #define yydgoto	c_yydgoto
     #define yysindex c_yysindex
     #define yyrindex c_yyrindex
     #define yygindex c_yygindex
     #define yytable	 c_yytable
     #define yycheck	 c_yycheck
     #define yyname   c_yyname
     #define yyrule   c_yyrule

   それぞれの定義に対して，`c_'接頭辞は好みのものに置き換えて下さい．
これらは，`bison'，`byacc'，そして伝統的な`yacc'に対す
る動作を定義します．パーサジェネレータが，ここでカバーされていないシン
ボルを使用していることが分かった場合，リストに加えることができるように，
新しい名前を報告してください．


File: automake-ja.info,  Node: C++ Support,  Next: Assembly Support,  Prev: Yacc and Lex,  Up: Programs

7.9 C++のサポート
=================

Automakeには，C++に対する完全なサポートが含まれています．

   C++コードを含んでいるすべてのパッケージでは，`configure.ac'で出力
変数`CXX'を定義する必要があります．これを行う最も単純な方法は，
`AC_PROG_CXX'マクロを使用することです(*note Particular Program Checks:
(autoconf)Particular Programs.)．

   C++ソースファイルがあるとき，少しだけ追加変数が定義されます．

`CXX'
     C++コンパイラの名前です．

`CXXFLAGS'
     C++コンパイラに渡すすべてのフラグです．

`AM_CXXFLAGS'
     管理者のための`CXXFLAGS'です．

`CXXCOMPILE'
     C++ソースファイルを実際にコンパイルするために使用されるコマンドです．
     完全なコマンドラインを構成するためにファイル名が追加されます．

`CXXLINK'
     実際にC++プログラムをリンクするコマンドです．


File: automake-ja.info,  Node: Assembly Support,  Next: Fortran 77 Support,  Prev: C++ Support,  Up: Programs

7.10 アセンブラのサポート
=========================

Automakeは，アセンブラコードに対するサポートも含んでいます．

   変数`CCAS'には，アセンブラコードをビルドするために使用するコンパ
イラ名が保持されています．このコンパイラは，Cコンパイラにちょっと似て
いる動作をする必要があります．特に，それは`-c'と`-o'を受け入
れる必要があります．`CCASFLAGS'の値はコンパイラに渡されます． 

   `configure.ac'で`CCAS'と`CCASFLAGS'を設定する必要があり
ます．autoconfマクロの`AM_PROG_AS'でこれを行ないます．前もって設
定されていない場合は，`CCAS'をCコンパイラに， `CCASFLAGS'をC
コンパイラフラグに，単純に設定します．

   接尾子の`.s'と`.S'だけがアセンブリコードを含んでいるファイル
だと`automake'で認識されます．


File: automake-ja.info,  Node: Fortran 77 Support,  Next: Fortran 9x Support,  Prev: Assembly Support,  Up: Programs

7.11 Fortran 77のサポート
=========================

Automakeには，Fortran 77に対する完全なサポートが含まれています．

   Fortran 77コードを含むパッケージでは，`configure.ac'で出力変数
`F77'を定義する必要があります．こうするための最も簡単な方法は
`AC_PROG_F77'マクロを使用することです(*note Particular Program Checks:
(autoconf)Particular Programs.)．

   Fortran
77ソースファイルが見つかるとき，追加変数がいくつか定義されます．

`F77'
     Fortran 77コンパイラの名前です．

`FFLAGS'
     Fortran 77コンパイラに渡す，すべてのフラグです．

`AM_FFLAGS'
     管理者のための`FFLAGS'です．

`RFLAGS'
     Ratforコンパイラに渡す，すべてのフラグです．

`AM_RFLAGS'
     管理者のための`RFLAGS'です．

`F77COMPILE'
     実際にFortran
     77ソースファイルをコンパイルするコマンドです．完全なコマ
     ンドラインを構成するために，ファイル名が追加されます．

`FLINK'
     実際に純粋なFortran
     77プログラムあるいは共有ライブラリをリンクするコマ ンドです．


   さらにAutomakeは，コンパイルするためにFortran
77とRatforソースファイル のプリプロセス処理を行なうことが可能です(1)．
Automake には，Fortran 77と他の言葉が混合しているプログラムと共有ライ
ブラリを作成するためのサポートも含まれています(*note Mixing Fortran 77
With C and C++::)．

   これらの問題は次のセクションで述べます．

* Menu:

* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources
* Compiling Fortran 77 Files::  Compiling Fortran 77 sources
* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++

   ---------- Footnotes ----------

   (1) 以下のセクションにあ るFortran
77プログラムのプリプロセスに関する情報について，大部分ではあ
りませんが，多くのものを*Note Catalogue of Rules: (make)Catalogue of
Rules.からほとんどそのまま持ってきています．


File: automake-ja.info,  Node: Preprocessing Fortran 77,  Next: Compiling Fortran 77 Files,  Up: Fortran 77 Support

7.11.1 Fortran 77のプリプロセス
-------------------------------

`N.f'は自動的に`N.F'あるいは`N.r'から作成されます．この
ルールは，プリプロセス可能なFortran 77やRatforソースファイルを，厳密な
Fortran 77ソースファイルに変換するためだけにプリプロセッサを走らせます．
使用される正確なコマンドは以下のようになります．

`.F'
     `$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'



File: automake-ja.info,  Node: Compiling Fortran 77 Files,  Next: Mixing Fortran 77 With C and C++,  Prev: Preprocessing Fortran 77,  Up: Fortran 77 Support

7.11.2 Fortran 77ファイルのコンパイル
-------------------------------------

`N.o'は，Fortran 77を実行することによって`N.f'，`N.F'，
または`N.r'から自動的に作成されます．使用される正確なコマンドは以
下のようになります．

`.f'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS)'

`.F'
     `$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'



File: automake-ja.info,  Node: Mixing Fortran 77 With C and C++,  Prev: Compiling Fortran 77 Files,  Up: Fortran 77 Support

7.11.3 CとC++と，Fortran 77の混在
---------------------------------

Automakeは現在，Fortran 77とCそして/またはC++が混在しているプログラム
と共有ライブラリを作成するため，_限定された_サポートを提供してい
ます．しかし，(現在は)Automakeによって処理され_ません_が，他のパッ
ケージ(1)で処理される，Fortran 77と他の言
葉との混在に関連して，多くの問題が発生しています．

   Automakeは二つの方法でそれを助けることが可能です．

  1. ソースコードの組み合わせに依存したリンカの自動的な選択．

  2. 適切なFortran
     77のイントリンシックとランタイムライブラリにリンクするた
     めに，自動的に選択されたリンカに渡す適切なリンカフラグ(例えば`-L'
     と`-l')の自動的な選択．

     これらの追加されたFortran
     77リンカフラグは，Autoconf(Autoconfバージョ
     ン2.13やそれ以降)の新しいバージョンで供給された，
     `AC_F77_LIBRARY_LDFLAGS'というAutoconfマクロでの出力変数
     `FLIBS'で提供されます．*Note Fortran 77 Compiler Characteristics:
     (autoconf)Fortran 77 Compiler Characteristics.

   (`_PROGRAMS'や`_LTLIBRARIES'プライマリで記述されているような)
プログラムや共有ライブラリが，Fortran 77と，Cそして/またはC++が混合す
るソースコードを含んでいることをAutomakeが検出した場合，
`AC_F77_LIBRARY_LDFLAGS'マクロを`configure.ac'で呼び出し，
`$(FLIBS)'が，適切な(プログラムに対する)`_LDADD'や，(共有ラ
イブラリに対する)`_LIBADD'変数のいずれかで書かれていることを要求
します．`$(FLIBS)'が適切な`_LDADD'や`_LIBADD'変数に書か
れていることを確かめるのは，`Makefile.am'を書いている人の責任です．

   例えば，以下の`Makefile.am'を考えます．

     bin_PROGRAMS = foo
     foo_SOURCES  = main.cc foo.f
     foo_LDADD    = libfoo.la $(FLIBS)

     pkglib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES  = bar.f baz.c zardoz.cc
     libfoo_la_LIBADD   = $(FLIBS)

   この状況では，Automakeは，`AC_F77_LIBRARY_LDFLAGS'が
`configure.ac'で記述されることを強く要求します．また，
`$(FLIBS)'が`foo_LDADD'と`libfoo_la_LIBADD'で記述されて
いない場合も，Automakeは警告を出します．

* Menu:

* How the Linker is Chosen::    Automatic linker selection

   ---------- Footnotes ----------

   (1) 例えば， the cfortran package
(http://www-zeus.desy.de/~burow/cfortran/)
は，これらすべての言語間の問題を扱い，ほとんどすべてのプラットホームの，
ほとんどすべてのFortran 77，C，そしてC++コンパイラで動作します．しかし
ながら，`cfortran'はまだフリーソフトウェアではありませんが，次の
メジャーリリースでそうなるでしょう．


File: automake-ja.info,  Node: How the Linker is Chosen,  Up: Mixing Fortran 77 With C and C++

7.11.3.1 リンカの選択方法
.........................

Automakeによって特定のリンカが選択される条件を以下の図で明示します．

   例えば，Fortran
77，C，そしてC++ソースコードがプログラムにコンパイルさ
れる場合，C++リンカが使用されます．この場合，CあるいはFortran 77リンカ
が，C++リンカに含まれていない特別なライブラリを必要とした場合，
`Makefile.am'を書いているユーザが，`_LDADD'や`_LIBADD'
変数を手作業で付け加える必要があります．

                          \              Linker
               source      \
                code        \     C        C++     Fortran
          -----------------  +---------+---------+---------+
                             |         |         |         |
          C                  |    x    |         |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
                    Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C +       Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+


File: automake-ja.info,  Node: Fortran 9x Support,  Next: Java Support,  Prev: Fortran 77 Support,  Up: Programs

7.12 Fortran 9xのサポート
=========================

Automakeには，Fortran 9xに対する完全なサポートが含まれています．

   Fortran 9xコードを含むパッケージでは，`configure.ac'で出力変数
`FC'を定義する必要があります．こうするための最も簡単な方法は
`AC_PROG_FC'マクロを使用することです(*note Particular Program Checks:
(autoconf)Particular Programs.)．

   Fortran
9xソースファイルが見つかるとき，追加変数がいくつか定義されます．

`FC'
     Fortran 9xコンパイラの名前です．

`FCFLAGS'
     Fortran 9xコンパイラに渡す，すべてのフラグです．

`AM_FCFLAGS'
     管理者のための`FCLAGS'です．

`FCCOMPILE'
     実際にFortran
     9xソースファイルをコンパイルするコマンドです．完全なコマ
     ンドラインを構成するために，ファイル名が追加されます．

`FCLINK'
     実際に純粋なFortran
     9xプログラムあるいは共有ライブラリをリンクするコマ ンドです．


* Menu:

* Compiling Fortran 9x Files::  Compiling Fortran 9x sources


File: automake-ja.info,  Node: Compiling Fortran 9x Files,  Up: Fortran 9x Support

7.12.1 Fortran 9xファイルのコンパイル
-------------------------------------

`N.o'は，Fortran 9xを実行することによって`N.f90'または
`N.F95'から自動的に作成されます．使用される正確なコマンドは以下の
ようになります．

`.f9x'
     `$(FC) -c $(AM_FCFLAGS) $(FCFLAGS)'



File: automake-ja.info,  Node: Java Support,  Next: Support for Other Languages,  Prev: Fortran 9x Support,  Up: Programs

7.13 Javaのサポート
===================

Automakeには，GNU Compiler CollectionのJavaフロントエンドである
`gcj'を使用してコンパイルされるJavaに対するサポートも含まれていま す．

   Javaコードを含んでいるパッケージのコンパイルには，`configure.ac'
で出力変数`GCJ'を定義する必要があります．変数`GCJFLAGS'も，
(`configure.ac'や`Makefile.am'で)なんとかして定義する必要が
あります．こうするための最も簡単な方法は，`AM_PROG_GCJ'マクロを使
用することです．

   デフォルトで，Javaソースファイルを含んでいるプログラムは，`gcj'で
リンクされます．

   通常どおり，`AM_GCJFLAGS'の内容は，`gcj'が呼び出されるコンパ
イルごとに渡されます(コンパイル前でのその役割を果たすもの --
`.class'ファイルを作成するためにそれを呼び出すとき，
`AM_JAVACFLAGS'が代わりに使用されます)．`Makefile.am'から
`gcj'にオプションを渡す必要がある場合，この変数とユーザ変数でない
`GCJFLAGS'を使用すべきでしょう．

   `gcj'は，`.java'，`.class'，`.zip'，または
`.jar'ファイルをコンパイルするために使用することが可能です．

   リンク時に，`gcj'はメインクラスが`--main='オプションを使用し
て指定されていることを要求します．こうするための最も簡単な方法は，プロ
グラムで`_LDFLAGS'変数を使用することです．


File: automake-ja.info,  Node: Support for Other Languages,  Next: ANSI,  Prev: Java Support,  Up: Programs

7.14 他の言語のサポート
=======================

Automakeには現在，C，C++(*note C++ Support::)，Fortran 77(*note Fortran
77 Support::)，Fortran 9x (*note Fortran 9x
Support::)，そしてJava(*note Java Support::)のみの完全なサポートが含ま
れています．他の言葉に対しては，基本的なサポートとユーザの需要に基づい
て改善されるサポートしかありません．

独自の言語を加えるため幾分制限されているサポートは，サフィックスルール
の処理によって利用可能になっています．*Note
Suffixes::を参照してください．


File: automake-ja.info,  Node: ANSI,  Next: Dependencies,  Prev: Support for Other Languages,  Up: Programs

7.15 自動的なde-ANSI-fication
=============================

GNU standardsはANSI Cの使用を許可していますが，これはもっと古いコンパ
イラ(特にSunOS C コンパイラ)へのパッケージの移植性を制限することになる
はずです．

   実際にコンパイルされる前に"de-ANSI-fyng"したそれぞれのファイルによっ
て，Automakeではそのようなマシン上でのこの問題を解決することが可能にな
ります．

   `Makefile.am'の変数`AUTOMAKE_OPTIONS'(*note Options::)がオプ
ション`ansi2knr'を含んでいる場合，de-ANSI-ficationを処理するため
のコードが生成された`Makefile.in'に挿入されます．

   これによって，ディレクトリ内のそれぞれのCソースファイルをANSI Cとして
扱います．ANSI Cコンパイラが利用可能な場合，それが使用されます．ANSI C
コンパイラが利用可能でない場合，`ansi2knr'プログラムがソースファ
イルをK&R Cに変換するために使用され，そしてコンパイルされます．

   `ansi2knr'プログラムは単純です．それはソースコードが特定の方法で
書式化されると仮定します．詳細は`ansi2knr'のmanページを参照してく
ださい．

   de-ANSI-ficationに対するサポートでは，ソースファイル`ansi2knr.c'
と`ansi2knr.1'がANSI Cソースと同じパッケージにある必要があります．
これらのファイルはAutomakeと一緒に配布されます．また，パッケージ
`configure.ac'では，`AM_C_PROTOTYPES'マクロを呼び出す必要も
あります(*note Macros::)． 

   Automakeは，現在のパッケージの他のディレクトリで`ansi2knr'サポー
トファイルを見つけることもできます．これは，`ansi2knr'オプション
へ適切なディレクトリへの相対的なパスを前置することで行なわれます．例え
ば，パッケージの`src'と`lib'サブディレクトリにANSI Cコードが
あると仮定します．ファイル`ansi2knr.c'と`ansi2knr.1'は
`lib'にあります．この場合，`src/Makefile.am'は以下のように書
くことが可能でしょう．

     AUTOMAKE_OPTIONS = ../lib/ansi2knr

ディレクトリの接頭辞が与えられてない場合，ファイルはカレントディレクト
リにあると仮定されます．

自動的なde-ANSI-ficationは，パッケージが異なるホストアーキテクチャに対
するビルドでは動作しないことに注意してください．それは，ビルドマシンに
対して`ansi2knr'をビルドする方法が，現在のautomakeには無いためで す．

   ソースのde-ANSI-ficationで`LIBOBJS'を使用すると，`configure'
の`LIBOBJS'のbasenameに`$U'を手動で追加する必要がありました．
現在ではそうではありません．バージョン2.54から，Autoconfは
`LIBOBJS'と`LTLIBOBJS'を注意深く書き換えています． (*note `AC_LIBOBJ'
vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs LIBOBJS.)


File: automake-ja.info,  Node: Dependencies,  Next: EXEEXT,  Prev: ANSI,  Up: Programs

7.16 自動的な依存性追跡
=======================

プロジェクトで，インクルードファイルの依存性が変化するときはいつでも，
絶えず`Makefile.in'を更新することは開発者として辛いことも多いもの
です．Automakeは自動的に依存性の変更を追跡する方法を提供しています．

Automakeは常に，システムヘッダを含むコンパイルに対する完全な依存性を使
用します．Automakeのモデルは，依存性の評価がビルドの副作用になるという
ものです．つまり依存性は，`depcomp'と呼ばれる特別なラッパプログラ
ムを通じてすべてのコンパイルを実行することで求められます．
`depcomp'は，多くの異なるCとC++コンパイラで，それが要求する書式で
依存情報の生成させるように上手に扱う方法を理解してます．`automake
-a'で，`depcomp'をソースツリーにインストールします．
`depcomp'がコンパイラの正しい呼び出し方が分からない場合，依存性の
追跡はビルドで利用不可能になるだけです．

これまでのバージョンのAutomakeの経験上(1)，configureが非常に多くなるにつれ，管理者のシステムでのみ生
成される依存性が信頼できないことを我々に教えてくれました．そのため，
Automake はビルド時に依存性を追跡することをその代わりに実装しました．

   自動的な依存性の追跡で，変数`AUTOMAKE_OPTIONS'に
`no-dependencies'を書くことや，`AM_INIT_AUTOMAKE'への引数と
して`no-dependencies'を渡すこと(これは推奨されるべき方法です)が無
くなるはずです．そうしない場合は，`automake'を`-i'オプション
を用いて呼び出してください．依存性の追跡はデフォルトで利用可能です．

   パッケージを構築している人々も，`--disable-dependency-tracking'を
用いてconfigureすることで，依存性の追跡を利用不可能にすることを選択す
ることが可能です．

   ---------- Footnotes ----------

   (1) Automakeでの自動的な依
存性の追跡に関する歴史と経験についての情報は，
`http://sources.redhat.com/automake/dependencies.html'を参照して
ください．


File: automake-ja.info,  Node: EXEEXT,  Prev: Dependencies,  Up: Programs

7.17 実行形式の拡張子のサポート
===============================

プラットフォームによっては，Windowsのように実行形式が`.exe'のよう
な拡張子を持つことを期待するものもあります．これらのプラットフォームで
は，(GCCを含む)コンパイラは，`foo'を生成するように依頼されるとき，
自動的に`foo.exe'を生成します．

Automakeは，これに対するほとんどの変換でサポートを提供します．残念なが
ら_ほとんど_とは完全ではないということです．英語の辞書では反対に
なりますが，パッケージをこれらのプラットフォームでサポートされるように
したい場合，Automakeを補助する必要があります．

気付いていると思われることの一つは，Automakeが以下のような内容に内部で
書き直すことです．

     bin_PROGRAMS = liver

   これを以下のようにします．

     bin_PROGRAMS = liver$(EXEEXT)

   Automakeが生成するターゲットは，`$(EXEEXT)'拡張子が与えられたもの
になります．`EXEEXT'

   しかし，Automakeがこの書き換えを`configure'の置換式に適用すること
は不可能です．そのような置換式を使用しているプログラムを条件付きでビル
ドしている場合，出力変数を作成しているときに`configure.ac'に
`$(EXEEXT)'を注意して加えるようにする必要があるということを，これ
は意味します．

   Autoconf 2.13とそれ以前のものを用いると，このサポートを得るために，明
示的に`AC_EXEEXT'を使用する必要があります．Autoconf 2.50を用いる
と，コンパイラをconfigureする際に(すなわち`AC_PROG_CC'を通じて)，
`AC_EXEEXT'が自動的に実行されます．

それらのプログラムに対し，管理者が明示的にリンクルールを書きたいときも
あります．実行形式の拡張子サポートを用いなければ，これは簡単です --
ターゲットをプログラム名にしたルールを書くだけです．しかし，実行形式の
拡張子のサポートが利用可能な時は，代わりに`$(EXEEXT)'接尾辞を加え
る必要があります．

   残念ながら，Autoconf 2.50の変更のため，常にこの拡張子を加える必要があ
ることを，これは意味しています．しかし，パッケージが実行形式の拡張子を
持つプラットフォームで実行されるはずがないことを知っている管理者にとっ
て，このことは問題になります．これらの管理者に対しては，
`no-exeext'オプション(*note Options::)でこの機能が利用不可能にな
ります．これは，かなり醜い方法で動作します．`no-exeext'が見つかっ
た場合，`Makefile.am'の`foo'という名前のターゲットに対するルー
ルが存在すると，automekeが生成する`foo$(EXEEXT)'に対するルールで
上書きされます．`no-exeext'オプションが用いなければ，これでエラー
が生じます．


File: automake-ja.info,  Node: Other objects,  Next: Other GNU Tools,  Prev: Programs,  Up: Top

8 その他の派生されるオブジェクト
********************************

AutomakeはCプログラムではない派生されるオブジェクトを扱うことが可能で
す．このようなオブジェクトを実際にビルドするサポートを明示的に供給する
必要があることもありますが，Automakeは自動的にインストールと配布物を扱
います．

* Menu:

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources


File: automake-ja.info,  Node: Scripts,  Next: Headers,  Up: Other objects

8.1 実行可能なスクリプト
========================

スクリプトのプログラムを定義しインストールすることが可能です．そのよう
なプログラムは，`SCRIPTS'プライマリを使用してリストアップします．
Automakeは，スクリプトに対する依存性の定義を全く行ないません．
`Makefile.am'に適切なルールを含ませるべきでしょう． 

Automakeはスクリプトがオブジェクトからの派生物であると想定しません．そ
のようなオブジェクトは手動で削除する必要があります(*note Clean::)．

   `automake'プログラム自身は，`automake.in'から生成されるPerl
スクリプトです．これを処理する方法は以下のようになります．

     bin_SCRIPTS = automake
     CLEANFILES = $(bin_SCRIPTS)

     do_subst = sed -e 's,[@]datadir[@],$(datadir),g' \
                 -e 's,[@]PERL[@],$(PERL),g' \
                 -e 's,[@]PACKAGE[@],$(PACKAGE),g' \
                 -e 's,[@]VERSION[@],$(VERSION),g' \
                 ...

     automake: automake.in Makefile
             $(do_subst) < $(srcdir)/automake.in > automake
             chmod +x automake

   御覧のように -- スクリプトはビルド可能なので，デフォルトでは配布され
ません．配布されるべきスクリプトは，他のプライマリとして`dist_'プ
レフィクスを使用して指定することが可能です．例えば，以下の
`Makefile.am'では，`my_script'を配布し`$(sbindir)'にイ
ンストールするように宣言されています．

     dist_sbin_SCRIPTS = my_script

   スクリプトオブジェクトは`bindir'，`sbindir'，
`libexecdir'，または`pkgdatadir'にインストールすることが可能 です．

   インストールする必要が無いスクリプトは`noinst_SCRIPTS'にリストアッ
プすることが可能で，その中で`make check'だけで必要なものは
`check_SCRIPTS'に書くべきです．


File: automake-ja.info,  Node: Headers,  Next: Data,  Prev: Scripts,  Up: Other objects

8.2 ヘッダファイル
==================

インストールする必要があるヘッダファイルは，`HEADERS'等の変数で指
定します．ヘッダは`includedir'，`oldincludedir'，
`pkgincludedir'，または，その他の定義済みのディレクトリにインストー
ルすることが可能です(*note Uniform::)．例えば以下のようにします．

     include_HEADERS = foo.h bar/bar.h

これで，二つのファイルは`$(includedir)/foo.h'と
`$(includedir)/bar.h'としてインストールされます．

   `nobase_'接頭辞もサポートしています．

     nobase_include_HEADERS = foo.h bar/bar.h

これで，二つのファイルは`$(includedir)/foo.h'と
`$(includedir)/bar/bar.h'としてインストールされます (*note
Alternative::)．

通常，インストールされているライブラリが必要とするヘッダファイルだけが
インストールされます．プログラムやコンビニエンスライブラリが使用するヘッ
ダはインストールされません．しかし，ヘッダが実際に一つのコンビニエンス
ライブラリやプログラムに属しているとき，我々は，`noinst_HEADERS'
の代わりに，プログラムやライブラリの`_SOURCES'変数でリストアップ
することを推奨します．これで`Makefile.am'を読んでいる人がより分か
りやすくなります．`noinst_HEADERS'は，ヘッダのみが含まれているディ
レクトリで，関連するライブラリやプログラムがないときに使用してこそ正し
い変数です．

   すべてのヘッダファイルは，どこかにリストアップする必要があります．
`_SOURCES'変数や`_HEADERS'変数にします．行方不明のものは配布
物に含まれません．

   ビルドはされますが，配布する必要がないヘッダファイルに対して，
`nodist_include_HEADERS'や`nodist_prog_SOURCES'のように
`nodist_'接頭辞を使用して下さい．これらの生成されるヘッダがビルド
時に必要な場合，それらが使用される前に存在することを確実にする必要もあ
ります．*Note Sources::.


File: automake-ja.info,  Node: Data,  Next: Sources,  Prev: Headers,  Up: Other objects

8.3 アーキテクチャ非依存のデータファイル
========================================

Automakeは，`DATA'等の変数を使用して様々なデータファイルのインス
トールをサポートします． 

   そのようなデータは，ディレクトリ`datadir'，`sysconfdir'，
`sharedstatedir'，`localstatedir'，または`pkgdatadir'に
インストールすること可能です．

   デフォルトで，データファイルは配布物に含まれ_ません_．もちろん，
`dist_'接頭辞を使用することで，変数ごとにこの(デフォルト動作)を変
更することが可能です．

   Automakeでその補助データファイルを宣言する方法は，以下のとおりです．

     dist_pkgdata_DATA = clean-kr.am clean.am ...


File: automake-ja.info,  Node: Sources,  Prev: Data,  Up: Other objects

8.4 ビルドされているソース
==========================

Automakeの自動的な依存性追跡は，コンパイルの副作用として働くので (*note
Dependencies::)，ブートストラップで問題があります．ターゲットは，
依存性が作成されるまでコンパイルされるべきではありませんが，これらの依
存性は最初にコンパイルされるまで知ることができません．

通常，依存性は配布されているソースにあるので，これは問題になりません．
それらは既に存在し，ビルドする必要はありません．`foo.c'が
`foo.h'をインクルードしていると仮定します．最初に`foo.o'にコ
ンパイルするとき，`make'は`foo.o'が`foo.c'に依存する
ことを知っています．このコンパイルの副作用として，それ以降の
`make'の呼び出しで尊重されるように，`depcomp'が
`foo.h'の依存性を記録します．この条件では，問題がないことが明らか
です．つまり，`foo.o'が存在せずビルドされていない(依存性には影響
されない)，または，正確な依存性が存在し`foo.o'をリビルドすべきか
どうかを決定するために使用することが可能であるという，いずれかの状態に
なっています．

   最初に`make'を実行するとき`foo.h'が存在しない場合は，別の
話になります．例えば，`foo.h'をビルドするルールがあると仮定します．
このとき，コンパイラが`foo.h'を見つけることができないので，
`file.o'のビルドは失敗します．`make'は，依存性の情報が足
りないため，最初に`foo.h'をビルドするルールを開始することができま せん．

   `BUILT_SOURCES'変数でこの問題を回避します．`BUILT_SOURCES'で
リストアップされているファイルは，他のターゲットを処理する前に， `make
all'や`make check'(または，`make install'でも)作
成されます．しかし，そのようなソースファイルは，明示的に他の
`_SOURCES'で記述し，要求していない限り_コンパイル_されません．

   このため，導入する例を決定するため，`make all'や`make check'
で(`foo.o'を含む)他のターゲットをビルドする前に`foo.h'を確実
に入手できるよう，`BUILT_SOURCES = foo.h'を使用します．

ビルドプロセスの初期に作成する必要があるファイルは，この変数でリストアッ
プすることが可能なので，`BUILT_SOURCES'は実際にはちょっと誤った名
称です．さらに，ビルドされたすべてのソースを，`BUILT_SOURCES'にリ
ストアップする必要はありません．例えば，生成される`.c'ファイルは，
関連するオブジェクトへの依存性を知っているので，(他のソースからインク
ルードされない限り)`BUILT_SOURCES'に書く必要はありません．

   `BUILT_SOURCES'は`make all'，`make check'，そして `make
install'だけを尊重するということを強調しておくのが重要かも
しれません．これは，指定したターゲット(例えば，`make foo')が，ビ
ルドソースで依存されていない場合，クリーンなツリーではビルドできないこ
とを意味します．しかし，その前に`make all'を実行している場合，依
存性が既に利用可能なように求まっているので，成功します．

次のセクションでは，ビルドされているソースを処理する簡単な例を説明し，
議論していきます．

* Menu:

* Built sources example::       Several ways to handle built sources.


File: automake-ja.info,  Node: Built sources example,  Up: Sources

8.4.1 ビルドされているべきソースの例
------------------------------------

インストールに依存していて，配布には依存していない`bindir.h'をイ
ンクルードしている`foo.c'を仮定します．それはビルドで要求されます．
ここで，`bindir.h'は，(`configure'から継承される)
`make'変数`bindir'の値をもつプリプロセッサマクロ
`bindir'を定義しています，

我々は以下の実装を提案します．ビルドされているソースを処理するすべての
方法のリストを網羅していませんが，この問題に遭遇した場合，ちょっとした
アイデアにはなるでしょう．

最初の試み
----------

最初の実装は，前のセクションのブートストラップの問題を説明します (*note
Sources::)．

   以下は，試験的な`Makefile.am'です．

     # This won't work.
     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     nodist_foo_SOURCES = bindir.h
     CLEANFILES = bindir.h
     bindir.h: Makefile
             echo '#define bindir "$(bindir)"' >$@

   Automakeは，`foo.c'が`bindir.h'をインクルードすることを知ら
ないので，この設定では動作しません．自動的な依存性の追跡はコンパイルの
副作用として動作するので，`foo.o'の依存性は，`foo.o'がコンパ
イルされた後になって判明すること(*note Dependencies::)を覚えておいて下
さい．症状は以下のようになります．

     % make
     source='foo.c' object='foo.o' libtool=no \
     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
     depmode=gcc /bin/sh ./depcomp \
     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
     foo.c:2: bindir.h: No such file or directory
     make: *** [foo.o] Error 1

   この例では，`bindir.h'は，配布もインストールもされず，一度もビル
ドされません．`nodist_foo_SOURCES = bindir.h'行が全く利用されてい
ないことを不思議に思うかもしれません．この`bindir.h'が`foo'
のソースだという単純な行は，例えば，tagを生成している間に検査されるべ
きなので存在します(*note Tags::)．言い替えると，ここでの問題には役に立
たず，それが無くても同じようにビルドは失敗します．

`BUILT_SOURCES'の使用
---------------------

解決方法は，他のものをビルドする前に`bindir.h'をビルドすることを
要求することです．これこそが，`BUILT_SOURCES'が意味することです (*note
Sources::)．

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     nodist_foo_SOURCES = bindir.h
     BUILT_SOURCES = bindir.h
     CLEANFILES = bindir.h
     bindir.h: Makefile
             echo '#define bindir "$(bindir)"' >$@

   `bindir.h'が最初にビルドされる様子を見て下さい．

     % make
     echo '#define bindir "/usr/local/bin"' >bindir.h
     make  all-am
     make[1]: Entering directory `/home/adl/tmp'
     source='foo.c' object='foo.o' libtool=no \
     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
     depmode=gcc /bin/sh ./depcomp \
     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
     gcc  -g -O2   -o foo  foo.o
     make[1]: Leaving directory `/home/adl/tmp'

   しかし，以前にいったように，`BUILT_SOURCES'は`all'，
`check'，そして`install'ターゲットだけにしか適用されません．
これでは，`make foo'を明示的に実行すると失敗します．

     % make clean
     test -z "bindir.h" || rm -f bindir.h
     test -z "foo" || rm -f foo
     rm -f *.o
     % : > .deps/foo.Po # Suppress previously recorded dependencies
     % make foo
     source='foo.c' object='foo.o' libtool=no \
     depfile='.deps/foo.Po' tmpdepfile='.deps/foo.TPo' \
     depmode=gcc /bin/sh ./depcomp \
     gcc -I. -I. -g -O2 -c `test -f 'foo.c' || echo './'`foo.c
     foo.c:2: bindir.h: No such file or directory
     make: *** [foo.o] Error 1

依存性の手動保存
----------------

通常，`make all'の前に`make foo'にようにターゲットをビルドす
ることはないので，前回の例のように`BUILT_SOURCES'で十分幸せになれ
ます．しかし，これで問題がある場合，`BUILT_SOURCES'を避け，
`Makefile.am'に明示的にそのような依存性を記録することが可能です．

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     nodist_foo_SOURCES = bindir.h
     foo.$(OBJEXT): bindir.h
     CLEANFILES = bindir.h
     bindir.h: Makefile
             echo '#define bindir "$(bindir)"' >$@

   `foo.o'の_すべての_依存性をリストアップする必要はなく，ビル
ドに必要なものだけをリストアップします．依存性が既に存在する場合，最初
のコンパイルは邪魔をせず，通常の依存性の追跡コードが記録されます．(こ
の最初のコンパイルの後の依存性の追跡コードも，`foo.o'と
`bindir.h'の間に記録されることに注意して下さい．そのため，明示的
な依存性は最初のビルドだけで実際に役に立ちます．)

このような明示的な依存性を追加することで，十分に注意しておかないとちょっ
と危険なことになります．これはAutomakeがルールを上書きしようとしないこ
とに由来します(おそらく，より良いものを知っているでしょう)．
`foo.$(OBJEXT): bindir.h'で，`foo.$(OBJEXT)'をビルドするため
に出力しようとするAutomakeのルールを置き換えます．この状況では，
Automakeは`foo.$(OBJEXT):'ターゲットを出力する必要がないので偶然
動作します．それは，代わりにサフィックスルールに関連します(すなわち
`.c.$(OBJEXT):')．こうする場合は，常に生成される
`Makefile.in'を調査して下さい．

`configure'から`bindir.h'をビルド
---------------------------------

プリプロセッサマクロを`configure'から， `config.h'(*note Defining
Directories: (autoconf)Defining
Directories.)，または`AC_CONFIG_FILES'を使用し て`bindir.h.in'で(*note
Configuration Actions: (autoconf)Configuration
Actions.)定義することも可能です．

   この時点で，`configure'から`bindir.h'がビルドされることが明
確になり，この例はうまく動作します．`bindir.h'はターゲットをビル
ドする前に存在しているので，依存性の問題は生じません．

   Makefileは以下のように短くなります．`bindir.h'を記述する必要さえ
ありません．

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c

   しかし，`configure'からソースをビルドすることが常に可能だというわ
けではなく，特に，これらのソースが最初にビルドされるツールから生成され
るときがそうなります....

`bindir.h'ではなく`bindir.c'をビルド
------------------------------------

もう一つの魅力的な考えは，`bindir'を`bindir.o'からエクスポー
トする変数や関数として定義し，`bindir.h'の代わりに`bindir.c'
をビルドする方法です．

     noinst_PROGRAMS = foo
     foo_SOURCES = foo.c bindir.h
     nodist_foo_SOURCES = bindir.c
     CLEANFILES = bindir.c
     bindir.c: Makefile
             echo 'const char bindir[] = "$(bindir)";' >$

   `bindir.h'には，宣言された変数だけが含まれていて，ビルドする必要
がないため，問題になることはありません．`bindir.o'は，常に
`bindir.c'に依存するので，`bindir.c'は最初にビルドされます．

最善の方法は？
--------------

もちろん万能薬はありません．それぞれの解決方法には長所と短所があります．

   クリーンなツリーで`make foo'を実行する能力が重要な場合，
`BUILT_SOURCES'を使用することは不可能です．

Automakeのルールを間違ってオーバーライドしないように用心している場合，
明示的に依存性を追加しないでしょう．

   `./configure'からファイルをビルドしたり，`.h'ファイルを
`.c'ファイルに変換することは，常に可能だというわけではありません．


File: automake-ja.info,  Node: Other GNU Tools,  Next: Documentation,  Prev: Other objects,  Up: Top

9 その他のGNUツール
*******************

Automakeは，GNUプログラムで使用する`Makefile.in'を生成することを
主目的にしているので，他のGNUツールとの相互作用を試みます．

* Menu:

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Libtool::                     Libtool
* Java::                        Java
* Python::                      Python


File: automake-ja.info,  Node: Emacs Lisp,  Next: gettext,  Up: Other GNU Tools

9.1 Emacs Lisp
==============

Automakeは，Emacs Lispに対するサポートも供給します．`LISP'プライ
マリは`.el'ファイルのリストを保持するために使用されます．このプラ
イマリに対して利用可能な接頭辞は`lisp_'と`noinst_'です．
`lisp_LISP'が定義されている場合，`configure.ac'で
`AM_PATH_LISPDIR'を実行する必要があります(*note Macros::)．

   AutomakeはすべてのEmacs Lispソースファイルを`AM_PATH_LISPDIR'で見
つかった場合はそのEmacsを使用してバイトコンパイルします．

   バイトコンパイルされたEmacs Lispファイルは，すべてのEmacsのバージョン
の間で移植性があるわけではないので，一種類以上のEmacsバージョンをイン
ストールしているサイトがあることが予想される場合，これを止めることに意
味があります．さらに，実際にはバイトコンパイルの利点がないパッケージも
多くあります．しかし，我々はEmacs Lispソースをバイトコンパイルすること
を推奨します．恐らく，他の全員がインストールしなくてすむことより，それ
ぞれに対して対処するためにそれぞれ設定した方が良いでしょう．

バイトコンパイルを避ける方法は二つあります．歴史的に，我々は以下の内容
を推奨していました．
     lisp_LISP = file1.el file2.el
     ELCFILES =
   `ELCFILES'はAutomakeの内部変数で，通常はバイトコンパイルする必要
があるすべての`.elc'ファイルをリストアップしています．Automakeは
`lisp_LISP'から`ELCFILES'を自動的に定義します．この変数を明
示的に空にしておくことで，バイトコンパイルを妨げます．

   Automake 1.8からは，我々は代わりに`lisp_DATA'を使用することを推奨
しています．以下のようにします．
     lisp_DATA = file1.el file2.el

   これら二つの内容が等価ではないことに注意して下さい．Emacsがインストー
ルされていない場合，`_LISP'ではそのファイルはインストールされませ
んが，`_DATA'ではそのファイルは常にインストールされます．


File: automake-ja.info,  Node: gettext,  Next: Libtool,  Prev: Emacs Lisp,  Up: Other GNU Tools

9.2 Gettext
===========

`AM_GNU_GETTEXT'が`configure.ac'にある場合，Automakeは，国際
化のためのメッセージカタログシステム，GNU gettextに対するサポートを開
始します(*note GNU Gettext: (gettext)GNU Gettext.)．

   Automakeでの`gettext'サポートには，パッケージに`intl'と
`po'の二つのサブディレクトリの追加が必要です．Automakeは，これら
のディレクトリが存在して`SUBDIRS'に書かれていることを保証します．

Lispソースはデフォルトで配布されません．これらのファイルを配布すること
を示すため，`dist_lisp_LISP'や`dist_noinst_LISP'のように，
`LISP'プライマリに`dist_'を前置することが可能です．


File: automake-ja.info,  Node: Libtool,  Next: Java,  Prev: gettext,  Up: Other GNU Tools

9.3 Libtool
===========

Automakeは，`LTLIBRARIES'プライマリを用いることで，GNU Libtool(*note
Introduction: (libtool)Top.)に対 するサポートを提供します．*Note A
Shared Library::.


File: automake-ja.info,  Node: Java,  Next: Python,  Prev: Libtool,  Up: Other GNU Tools

9.4 Java
========

Automakeは`JAVA'プライマリを用いることで，Javaコンパイルに対する
最低限のサポートも提供します．

   `_JAVA'変数でリストアップされているすべての`.java'ファイルは，
ビルド時に`JAVAC'でコンパイルされます．デフォルトで， `.class'
ファイルは配布物に含められません．

   現在のAutomakeには，`_JAVA'プライマリを`Makefile.am'で一つだ
けしか使用できないという制限があります．この制限の理由は，どの
`.java'ファイルからどの`.class'ファイルが生成されるのかが通
常は分からないためです - そのため，どこにどのファイルをインストールす
るのか分かりません．例えば，`.java'ファイルで複数のクラスを定義す
ることが可能です．結果として得られる`.class'ファイル名は，
`.java'ファイルをパースしない限り特定不可能です．

   Javaソースをコンパイルする時に使用される変数がいくつかあります．

`JAVAC'
     Javaコンパイラの名前です．デフォルトは，`javac'です．

`JAVACFLAGS'
     コンパイラに渡すフラグです．これは，ユーザ変数として考慮されます
     (*note User Variables::)．

`AM_JAVACFLAGS'
     Javaコンパイラに渡す追加フラグです．`JAVACFLAGS'とは異なり，
     `Makefile.am'にJavaコンパイラフラグを書く必要があるとき，これを使
     用すべきではありません．

`JAVAROOT'
     この変数の値は，`javac'に渡す`-d'オプションです．デフォルト
     は，`$(top_builddir)'です．

`CLASSPATH_ENV'
     この変数は，`javac'コマンドラインで`CLASSPATH'環境変数に設定
     するために使用される`sh'式です．(将来，クラスパスの設定を異なる方
     法で扱うようにする予定です．)


File: automake-ja.info,  Node: Python,  Prev: Java,  Up: Other GNU Tools

9.5 Python
==========

Automakeは，`PYTHON'プライマリを用いることで，Pythonのコンパイル
に対するサポートを提供します．

   `_PYTHON'変数でリストアップされているすべてのファイルは，インストー
ル時に`py-compile'でバイトコンパイルされます．`py-compile'は，
実際にはソースファイルの標準的なバージョン(`.pyc')とバイトコンパ
イルされたバージョン(`.pyo')の両方を作成します．バイトコンパイル
はインストール時に行なわれるので，`noinst_PYTHON'にリストアップさ
れているファイルはコンパイルされないことに注意してください．Pythonのソー
スファイルは，デフォルトで配布物に含められます．

Automakeは，Pythonに関連するディレクトリ変数(以下を参照してください)を
決定する`AM_PATH_PYTHON'と呼ばれるAutoconfとともに出荷されていま
す．`configure.ac'で`AM_PATH_PYTHON'が呼び出す場合，Pythonソー
スファイルをリストアップするために以下の変数を変数内に使用してもかまい
ません．`python_PYTHON'，`pkgpython_PYTHON'，
`pyexecdir_PYTHON'，`pkgpyexecdir_PYTHON'はファイルをインス
トールしたい場所に依存します．

   `AM_PATH_PYTHON([VERSION], [ACTION-IF-FOUND],
[ACTION-IF-NOT-FOUND])'は三つのオプション引数を受け取ります．そ
れはPythonのインタプリタをシステムで探します．最初の引数が存在する場合，
それはパッケージが要求するPythonの最小バージョンです．
`AM_PATH_PYTHON'は，VERSIONより古いPythonのインタプリタをス
キップします．インタプリタが見つかりVERSIONを満たしている場合，
ACTION-IF-FOUNDが実行されます．それ以外では
ACTION-IF-NOT-FOUNDが実行されます．

   ACTION-IF-NOT-FOUNDが指定されていない場合，デフォルトはconfigure
の中止です．これは，Pythonがパッケージに対する必須条件のときは良いもの
です．このため，Python >= 2.2がパッケージに対して_オプション_の場
合，`AM_PATH_PYTHON'を以下のように呼び出すことができます．

       AM_PATH_PYTHON(2.2,, :)

   `AM_PATH_PYTHON'は，configureで分かったPythonのインストール状況を
基に，いくつかの出力変数を生成します．

`PYTHON'
     Pythonの実行形式の名前，または適切なインタプリタが見つからない場合は
     `:'です．

     ACTION-IF-NOT-FOUNDが使用されていると仮定すると(それ以外では
     Pythonが無い場合，`./configure'が中止されます)，`PYTHON'の値
     は，以下のようにビルドに関連する部分を利用不可能にするため，条件設定で
     使用することが可能です．

            AM_PATH_PYTHON(,, :)
            AM_CONDITIONAL([HAVE_PYTHON], [test "$PYTHON" != :])

     ACTION-IF-NOT-FOUNDが使用されている場合，それが実行されます．

`PYTHON_VERSION'
     MAJOR.MINOR形式(例えば，`1.5')の，Pythonのバージョン
     ナンバーです．これは，現在`sys.version[:3]'の値です．

`PYTHON_PREFIX'
     文字列`${prefix}'です．この単語は，Pythonの`sys.prefix'の
     内容が必要となる将来の動作で使用されるかもしれませんが，一般的な同意事
     項として`configure'からの値が常に使用されます．

`PYTHON_EXEC_PREFIX'
     文字列`${exec_prefix}'です．この単語は，Pythonの
     `sys.exec_prefix'の内容が必要となる将来の動作で使用されるかもしれ
     ませんが，一般的な同意事項として`configure'からの値が常に使用され
     ます．

`PYTHON_PLATFORM'
     Pythonがオペレーティングシステムを記述するために使用する標準的な名前で，
     `sys.platform'で与えられます．この値は，Pythonの拡張をビルドする
     時，必要となるときもあります．

`pythondir'
     標準的にPythonがインストールされるツリーの，`site-packages'サブディ
     レクトリのディレクトリの名前です．

`pkgpythondir'
     これは，パッケージの後で命名される`pythondir'以下のディレクトリで
     す．すなわち，それは`$(pythondir)/$(PACKAGE)'です．それは便宜上提
     供されます．

`pyexecdir'
     これは，Pythonの拡張モジュール(共有ライブラリ)がインストールされるディ
     レクトリです．

`pkgpyexecdir'
     これは，`$(pyexecdir)/$(PACKAGE)'として定義されている，便宜上の変
     数です．

   これらすべてのディレクトリ変数は，展開されていない`${prefix}'ま
たは`${exec_prefix}'のいずれかで開始される値になります．これは
`Makefile'でうまく動作しますが，これらの変数を`configure'で
使用することは難しくなります．これはGNUコーディング標準に従っているの
で，ユーザは`make prefix=/foo install'を実行することが可能です．
Autoconfのマニュアルには，このトピックの詳細が書かれたセクションがあり
ます(*note Installation Directory Variables: (autoconf)Installation
Directory Variables.)．


File: automake-ja.info,  Node: Documentation,  Next: Install,  Prev: Other GNU Tools,  Up: Top

10 ドキュメントのビルド
***********************

現在Automakeは，Texinfoとman pageに対するサポートを提供します．

* Menu:

* Texinfo::                     Texinfo
* Man pages::                   Man pages


File: automake-ja.info,  Node: Texinfo,  Next: Man pages,  Up: Documentation

10.1 Texinfo
============

カレントディレクトリにTexinfoソースを含んでいる場合，`TEXINFOS'プ
ライマリでそれを宣言する必要があります．通常，Texinfoファイルはinfoに
変換されるので，`info_TEXINFOS'変数が最も一般的に使用されます．す
べてのTexinfoソースファイルは，`.texi'，`.txi'，または
`.texinfo'の拡張子で終える必要があります．新しいマニュアルには，
`.texi'を推奨します． 

   Automakeは，`.info'，`.dvi'，`.ps'，`.pdf'，そして
`.html'ファイルを，Texinfoソースからビルドするルールを生成します．
`.info'ファイルは`make all'でビルドされ，`make install'
でインストールされます(`no-installinfo'を使用していない場合に限り
ます．以下を参照してください)．それ以外のファイルは，`make dvi'， `make
ps'，`make pdf'，そして`make html'でビルドを要求 することが可能です．

   `.texi'ファイルが`version.texi'を`@include'している場
合，そのファイルが自動的に生成されます．ファイル`version.texi'は，
四つのTexinfoのフラグを定義し，それは`@value{EDITION}'，
`@value{VERSION}'，`@value{UPDATED}'，そして
`@value{UPDATED-MONTH}'を使用することで参照可能です．

`EDITION'
`VERSION'
     これらのフラグは両方とも，プログラムのバージョンナンバーです．それらは
     明確さのために別々にしています．

`UPDATED'
     これは，主要な`.texi'ファイルが最後に修正された日付を保持します．

`UPDATED-MONTH'
     これは，主要な`.texi'ファイルが最後に修正された月名を保持します．

   `version.texi'サポートには，`mdate-sh'プログラムが必要です．
このプログラムはAutomakeと一緒に供給されていて，`automake'が
`--add-missing'オプションで呼び出されるとき，自動的に含められます．

   複数のTexinfoファイルがあり，`version.texi'の機能を使用したい場合，
それぞれのTexinfoファイルに対し個別のバージョンファイルを持たせる必要
があります．Automakeは`vers*.texi'に一致したTexinfoファイル内に含
まれるものを，単純に自動的に生成されたバージョンファイルとして扱います．

   infoファイルが，実際には一つ以上の`.texi'ファイルに依存する場合も
あります．例えば，GNU Helloでは，`hello.texi'は`gpl.texi'ファ
イルを含んでいます．`TEXI_TEXINFOS'変数を使用することでこれ
らの依存性をAutomakeに伝えることが可能です．GNU Helloで用いた方法は，
以下のようになっています． 

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   デフォルトでAutomakeは，ファイル`texinfo.tex'がTexinfoソースと同
じディレクトリに存在することを要求します(これは，`TEXINFO_TEX'変
数で変更することが可能です．以下を参照して下さい)．しかし，
`configure.ac'で`AC_CONFIG_AUX_DIR'を使用した場合 (*note Finding
`configure' Input:
(autoconf)Input.)，`texinfo.tex'はそこで探されます．Automakeは，
`--add-missing'が与えられている場合，`texinfo.tex'を供給しま す．

   オプション`no-texinfo.tex'を，`texinfo.tex'を要求することを
止めるために使用することが可能です．しかし，変数`TEXINFO_TEX'の使
用は望ましく，それは`dvi'，`ps'，そして`pdf'ターゲット
を動作させることが可能だからです．

   Automakeは`install-info'ルールを生成します．これを明示的に使用す
る人もいます．デフォルトで，infoページは`make install'でインストー
ルされます．これは`no-installinfo'オプションによって止めることが
可能です．

   以下の変数はTexinfoのビルドルールで使用されます．

`MAKEINFO'
     `.info'ファイルをビルドするために呼び出されるプログラム名です．こ
     の変数はAutomakeが定義します．`makeinfo'プログラムがシステムで見
     つかった場合，デフォルトで使用されます．それ以外では`missing'が代
     わりに使用されます．

`MAKEINFOHTML'
     `.html'ファイルをビルドするために呼び出されるコマンドです．
     Automakeはこれを`$(MAKEINFO) --html'と定義します．

`MAKEINFOFLAGS'
     `$(MAKEINFO)'と`$(MAKEINFOHTML)'のそれぞれの呼び出しに渡すユー
     ザフラグです．このユーザ変数(*note User Variables::)は`Makefile'
     で定義していることを期待していません．それはユーザが必要に応じて追加フ
     ラグを渡すことで使用することが可能です．

`AM_MAKEINFOFLAGS'
`AM_MAKEINFOHTMLFLAGS'
     それぞれの`makeinfo'の呼び出しで管理者が渡すフラグです．これらは
     `Makefile.am'で優先することが可能な管理者用の変数です．
     `$(AM_MAKEINFOFLAGS)'は`.info'ファイルをビルドするとき
     `makeinfo'に渡されます．そして，`$(AM_MAKEINFOHTMLFLAGS)'は
     `.html'ファイルをビルドするとき`makeinfo'に使用されます．

     例えば以下の設定で，一つのマニュアルに付き，ノードで分離されていない単
     一の`.html'ファイルを入手するために使用することが可能です．
          AM_MAKEINFOHTMLFLAGS = --no-headers --no-split

     デフォルトで，`$(AM_MAKEINFOHTMLFLAGS)'は
     `$(AM_MAKEINFOFLAGS)'に設定されます．これは，
     `$(AM_MAKEINFOHTMLFLAGS)'を定義せずに`$(AM_MAKEINFOFLAGS)'を
     定義すると`.info'と`.html'の両方のファイルが暗黙にビルドされ
     ることを意味します．

`TEXI2DVI'
     `.texi'ファイルを`.dvi'ファイルに変換するコマンドの名前です．
     このデフォルトは`texi2dvi'で，Texinfoパッケージとともに配布されて
     います．

`TEXI2PDF'
     `.texi'ファイルを`.pdf'ファイルに変換するコマンドの名前です．
     デフォルトは`$(TEXI2DVI) --pdf --batch'です．

`DVIPS'
     `.dvi'ファイルから`.ps'ファイルをビルドするコマンドの名前で
     す．デフォルトは`dvips'です．

`TEXINFO_TEX'
     多くのディレクトリにTexinfoファイルがあるパッケージの場合，Automakeに
     パッケージに対して標準的な`texinfo.tex'が見つかる場所を伝える変数
     `TEXINFO_TEX'を使用することが可能です．この変数の値は，現在の
     `Makefile.am'から`texinfo.tex'への相対的なパスにすべきです．

          TEXINFO_TEX = ../doc/texinfo.tex


File: automake-ja.info,  Node: Man pages,  Prev: Texinfo,  Up: Documentation

10.2 manページ
==============

パッケージにmanページを含めることも可能です(しかし，この件に関しては，
*Note Man Pages: (standards)Man Pages.を参照してくだ
さい)．manページは`MANS'プライマリを使用して宣言します．一般に
`man_MANS'変数を使用します．manページは，`mandir'の正しいサ
ブディレクトリに，ファイル拡張子に基づいて自動的にインストールされます． 

   `.1c'のようなファイルの拡張子は，有効な拡張子を探すために処理され，
`mandir'の正しいサブディレクトリを決定するために使用されます．有
効なセクション名は，10進数の`0'から`9'と，文字の`l'と `n'です．

   開発者によっては，ソースファイルで`foo.man'のようなファイル名で
manページを命名し，ファイルをインストールするときに，例えば
`foo.1'のような正しい接尾子を持つものに名前を変更したい時もありま
す．Automakeはこのモードもサポートします．有効なセクションに命名された
SECTIONに対して，`manSECTIONdir'と命名されている対応
するディレクトリと，対応する`_MANS'変数があります．そのような変数
でリストアップされているファイルは，示されているセクションにインストー
ルされます．ファイルに有効な接尾子が既についている場合，それはそのまま
インストールされます．それ以外の場合，ファイルの接尾子はセクションに一
致するように変更されます．

   例えば，以下のような例を考えます．
     man1_MANS = rename.man thesame.1 alsothesame.1c

   この場合は，`rename.man'はインストールする時に`rename.1'に名
前を変更され，他のファイルはその名前のままになります．

   デフォルトで，manページは`make install'でインストールされます．し
かし，GNUプロジェクトはmanページを必要としないので，多くの管理者はman
ページを最新にしておきません．この場合，`no-installman'オプション でman
ページをデフォルトでインストールしないようにします．ユーザは `make
install-man'によって，明示的にそれらをインストールすること ができます． 

   (Texinfoドキュメントとmanページの両方を含んでいる)GNU`cpio'では，
ドキュメントを以下のようにして処理しています．

     man_MANS = cpio.1 mt.1
     EXTRA_DIST = $(man_MANS)

現在，manページはソースであると考慮されておらず，その理由はmanページが
自動的に生成されることが珍しくないからです．このため，それらは自動的に
配布物に含められません．しかし，これは`dist_'接頭辞を使用すること
で変更可能です．

   `nobase_'接頭辞はmanページに対しては意味が無く利用できません．


File: automake-ja.info,  Node: Install,  Next: Clean,  Prev: Documentation,  Up: Top

11 インストールされるもの
*************************

11.1 基本的なインストール
=========================

当然，Automakeは，一旦ビルドされたプログラムを実際のインストールの細部
までの処理を行ないます．様々なプライマリで指名されているすべてのファイ
ルは，ユーザが`make install'を実行する時に，適切な場所に自動的に
インストールされます．

プライマリで指名されているファイルは，ビルドされたファイルを適切なディ
レクトリにコピーすることでインストールされます．ファイルのベース名はイ
ンストール時に使用されます．

     bin_PROGRAMS = hello subdir/goodbye

   この例では，`hello'と`goodbye'の両方が`$(bindir)'にイン
ストールされます．

インストール時にベース名のステップを避けた方が役に立つこともあるでしょ
う．例えば，ソースツリーのサブディレクトリに，インストール時にインストー
ルしたい方法で正確に配置したいヘッダファイルがいくつかあるかもしれませ
ん．この場合，ベース名のステップを停止するために，`nobase_'接頭辞
を使用することが可能です．例えば以下のようにします．

     nobase_include_HEADERS = stdio.h sys/types.h

   これで，`stdio.h'は`$(includedir)'に，そして`types.h'は
`$(includedir)/sys'にインストールされます．

11.2 インストールの二つの部分
=============================

インストーラーが共有ディレクトリ構造を持っている複数のマシンにインストー
ルする場合，Automakeは`install-data'と`install-exec'ルールを
分けて生成します -- これらのターゲットで，マシンに依存しない部分を一
度にインストールすることが可能になります．`install-exec'はプラッ
トフォームに依存するファイルをインストールし，`install-data'はプ
ラットフォームに依存しないファイルをインストールします．`install'
ターゲットはこれらのターゲットの両方に依存します．Automakeは，オブジェ
クトを正しいカテゴリに自動的に区別するよう試みますが，
`Makefile.am'の作者は，これが正しく行なわれていることを確かめる責
任があります． 

   `data'，`info'，`man'，`include'，
`oldinclude'，`pkgdata'，または`pkginclude'(例えば
`data_DATA')といった標準ディレクトリの接頭辞を使用している変数は，
`install-data'でインストールされます．

   `bin'，`sbin'，`libexec'，`sysconf'，
`localstate'，`lib'，または`pkglib'(例えば
`bin_PROGRAMS')といった標準ディレクトリの接頭辞を使用している変数 は，
`install-exec'でインストールされます．

   ユーザが定義した名前で，名前に`exec'を含むディレクトリ接頭辞を使
用している変数は(例えば`myexecbin_PROGRAMS')，`install-exec'
でインストールされます．ユーザによって定義されたそれ以外のすべての接頭
辞は，`install-data'でインストールされます．

11.3 インストールの拡張
=======================

`install-exec-local'や`install-data-local'ルールを定義するこ
とで，このメカニズムを拡張することが可能です．これらのルールが存在する
場合，それらは`make install'時に実行されます．これらのルールでほ
とんどすべてのことが可能になります．注意が必要です． 

   Automakeは，`install-exec-hook'と`install-data-hook'の，二つ
のインストールのフックもサポートしています．これらのフックは，適切な形
式，execやdataといった，他のすべてのインストールルールが完了した後で実
行されます．そのため，例えば，インストールのフックを使用して，インストー
ル後の変更を実施することが可能です． 

11.4 インストールの実行
=======================

Automakeは，すべてのインストールルールで，`DESTDIR'変数に対するサ
ポートを生成します．`DESTDIR'は，インストールオブジェクトを実行領
域に再配置する`make install'の段階で使用されます．それぞれのオブ
ジェクトとパスは，インストール領域にコピーされる前に，`DESTDIR'の
値が前置されます．典型的な`DESTDIR'使用法の例は，以下のようになり ます．

     mkdir /tmp/staging &&
     make DESTDIR=/tmp/staging install

   `mkdir'コマンドは，攻撃者が`/tmp/staging'が文字通りの領域
にシンボリックリンクを作成する場合のセキュリティ問題を回避します．そし
て，`make'はインストールオブジェクトを`/tmp/staging'の下
に構築されているディレクトリツリーに配置します．`/gnu/bin/foo'と
`/gnu/share/aclocal/foo.m4'がインストールされる場合，上のコマンド
では，`/tmp/staging/gnu/bin/foo'と
`/tmp/staging/gnu/share/aclocal/foo.m4'にインストールされます．

この機能は，インストールイメージとパッケージをビルドするために，通常使
用されます．詳細は，*Note Makefile Conventions: (standards)Makefile
Conventions.を参照してください．

   `DESTDIR'に対するサポートは，インストールルールに直接コーディング
することで実装されています．`Makefile.am'でローカルインストール規
則(例えば，`install-exec-local')やインストールフックを使用してい
る場合，`DESTDIR'に対応するコードを書く必要があります．

11.5 ユーザのためのルール
=========================

Automakeは，ターゲット`uninstall'，`installdirs'，そして
`install-strip'に対するルールも生成します． 

   Automakeは，`uninstall-local'と`uninstall-hook'をサポートし
ています．これらの機能は，機能の追加のために提供されているわけでないの
で，"exec"と"data"に対してアンインストールを分ける必要はないでしょ う．

   `uninstall'には，実際のパッケージツールを置換する意味が無いことに
注意してください．


File: automake-ja.info,  Node: Clean,  Next: Dist,  Prev: Install,  Up: Top

12 クリーンされるもの
*********************

GNU Makefile Standardsは多くの異なったクリーンのルールを指定します．
*Note Standard Targets for Users: (standards)Standard Targets.

一般に，クリーンされるファイルはAutomakeが自動的に決定します．もちろん，
Automakeはクリーンするファイルを追加で指定するために定義することが可能
な変数も認識します．これらの変数は`MOSTLYCLEANFILES'，
`CLEANFILES'，`DISTCLEANFILES'，そして `MAINTAINERCLEANFILES'です． 

   ルールによって削除されるファイルは，GNU Standardsで常に明示されている
というわけではないので，我々は，Franc,ois Pinardが最初に公式化した
ものを信じて，発見的手法で適用してきました．

   * `make'がビルドするもので，通常それをリビルドしたいときがあるもの
     (例えば，`.o'ファイル)は`mostlyclean'でそれを削除します．

   * それ以外で，`make'でビルドされたものは`clean'で削除します．

   * `configure'でビルドされたものは，`distclean'で削除します．

   * 管理者がビルドするもの(例えば`.info'ファイル)は，
     `maintainer-clean'で削除します．しかし，`maintainer-clean'で
     は，`./configure && make'を実行するために必要なものを削除すべきで
     はありません．

   我々は，皆さんの`Makefile.am'で発見的に同じように設定するよう，こ
のことに従って欲しいと思っています．


File: automake-ja.info,  Node: Dist,  Next: Tests,  Prev: Clean,  Up: Top

13 配布物に含まれるもの
***********************

13.1 基本的な配布物
===================

`Makefile.in'で生成された`dist'ルールは，配布物に対してgzip
された`tar'ファイルやそれ以外の特色を持ったものを生成するために使
用することが可能です．ファイルは，`AM_INIT_AUTOMAKE' (*note
Macros::)で定義される`PACKAGE'と`VERSION'変数に基づい
て命名されます．より正確には，gzipされた`tar'ファイルは
`PACKAGE-VERSION.tar.gz'と命名されます． gzipを実行する方法を制御するために，`make'の`GZIP_ENV'変数を
使用することが可能です．デフォルト設定は`--best'です．

ほとんどの部分で，配布するファイルは自動的にAutomakeが見つけます．ソー
スファイルはすべて自動的に配布物に含まれ，すべての`Makefile.am'と
`Makefile.in'も同様に扱われます．Automakeには，カレントディレクト
リで(物理的にまたは`Makefile.am'ルールのターゲットとして)見つかる
場合に自動的にインクルードされる，一般的に使用されるファイルの組み込み
リストがあります．このリストは`automake --help'で出力されます．
`configure'で読み込まれるファイルも(すなわち，
`AC_CONFIG_FILES'とその仲間のような様々なAutoconfマクロで指定され
ているファイルに対応しているソースファイル)，自動的に配布されます．
(`include'を使用して)`Makefile.am'や，(`m4_include'を使
用して)`configure.ac'でインクルードされているファイルと， `automake
--add-missing'でインストールされるヘルパースクリプトも 配布されます． 

配布する必要がありながら自動的なルールでカバーされていないファイルがあ
ることも，まだあります．これらのファイルは，`EXTRA_DIST'変数でリ
ストアップします．`EXTRA_DIST'では，サブディレクトリのファイルを
記述することが可能です．

   `EXTRA_DIST'ではディレクトリを記述することも可能です．この場合は，
ディレクトリ全体が再帰的に配布物にコピーされます．これはディレクトリの
_すべてのもの_をコピーし，CVS/RCSのバージョンコントロールファイル
も含まれることに注意してください．我々は，この機能を使用しないことを推
奨します． 

   `SUBDIRS'を定義している場合，Automakeはサブディレクトリを再帰的に
配布物に含めます．`SUBDIRS'を条件付きで定義している場合 (*note
Conditionals::)，Automakeは通常，`SUBDIRS'にあるすべてのディ
レクトリをできる限り配布物に含めます．条件付きでディレクトリの組を指定
する必要がある場合，配布物に含めるサブディレクトリの正確なリストを変数
`DIST_SUBDIRS'に設定することで可能となります(*note Conditional
Subdirectories::)． 

13.2 きめ細かな配布物の制御
===========================

配布物に含め_ない_ものを細かく制御する必要があるときもあります．
例えば，生成されたソースファイルと配布したくないソースファイルがあると
仮定します．この場合は，Automakeは`dist'と`nodist'接頭辞を使
用したきめ細かな制御を提供します．すべてのプライマリや`_SOURCES'
変数は，リストアップされているファイルを配布物に追加するため，
`dist_'を前置することが可能です．同様に，ファイルを配布物から除去
するために，`nodist_'を使用することが可能です． 

例えば，配布するデータがあり配布しないソースコードもあるようにする方法
は，以下のようになります．

     dist_data_DATA = distribute-this
     bin_PROGRAMS = foo
     nodist_foo_SOURCES = do-not-distribute.c

13.3 distフック
===============

パッケージ化する前に，配布物の変更を可能にすことが有効な時もあります．
`dist-hook'ルールが存在する場合，配布ディレクトリが満たされた後で，
実際のtar(あるいはshar)ファイルが作成される前に，それが実行されます．
これを利用する方法の一つには，新しい`Makefile.am'を作るまでもない
サブディレクトリのファイルを配布するためにあります．

     dist-hook:
             mkdir $(distdir)/random
             cp -p $(srcdir)/random/a1 $(srcdir)/random/a2 $(distdir)/random

これを使用するもう一つの方法は，EXTRA_DISTでディレクトリを指定すること
で，再帰的にインクルードされる不必要なファイルを削除するために存在しま
す．

     EXTRA_DIST = doc

     dist-hook:
     	rm -rf `find $(distdir)/doc -name CVS`

   `dist-hook'ルールを書くとき便利な二つの変数は，`$(distdir)'
と`$(top_distdir)'です．

   `$(distdir)'は，`dist'ルールがtarballを作成する前に，ファイ
ルを現在のディレクトリからコピーする場所を示します．最上位のディレクト
リにいる場合，`distdir = $(PACKAGE)-$(VERSION)'になります．
`foo/'と言う名前のサブディレクトリで使用するときは`distdir =
../$(PACKAGE)-$(VERSION)/foo'になります．`$(distdir)'は絶対パスや
相対パスが可能で，形式の仮定は行なっていません．

   `$(top_distdir)'は，常に配布されるツリーのルートディレクトリを示
します．最上位では，それは`$(distdir)'と同じです．`foo/'サブ
ディレクトリでは，`top_distdir = ../$(PACKAGE)-$(VERSION)'になり
ます．`$(top_distdir)'も絶対パスや相対パスが可能です．

   パッケージが入れ子状の`AC_CONFIG_SUBDIRS'を使用しているとき (*note
Subpackages::)，`$(distdir)'と`$(top_distdir)'が，サ
ブパッケージの呼び出しではなく，`make dist'が実行されているパッケー
ジの場所から相対的なものになることに注意して下さい．

13.4 配布物の調査
=================

Automakeは，与えられた配布物が実際に動作することの保証に役立つ
`distcheck'ルールを生成します．`distcheck'は実際に配布物を作
成し，`VPATH'のビルドを試み，テストスイートを実行し，そして配布物
自身が含まれることを確認するため，最終的に別のtarファイルを作成します． 

   パッケージのビルドには，`./configure'の実行も含まれます．
`configure'に追加フラグを供給する必要がある場合は，最上位の
`Makefile.am'，または`make'の呼出時のコマンドラインで
`DISTCHECK_CONFIGURE_FLAGS'変数で定義する必要があります． 

   `distcheck-hook'ルールがトップレベルの`Makefile.am'で定義さ
れている場合，新しい配布物が展開された後，展開されたコピーがconfigure
されてビルドされる前に，`distcheck'で呼び出されます．いつも通りの
注意とアドバイスはありますが，`distcheck-hook'でほとんどすべての
ことが可能です．通常このフックは，配布物のエラーが標準的なメカニズムで
発生する可能性を調査するために使用されます．`distcheck-hook'は
`DISTCHECK_CONFIGURE_FLAGS'と同じように，サブパッケージの
`Makefile.am'では利用されませんが，
`DISTCHECK_CONFIGURE_FLAGS'はサブパッケージの`configure'スク
リプトには渡されることに注意して下さい．

   配布物エラーの可能性について述べると，`distcheck'では，
`distclean'ルールが実際に全てのビルドファイルも確実に削除するとい
うことです．これは，`VPATH'のビルドの終りに`make
distcleancheck'を実行することでなされます．デフォルトで，
`distcleancheck'は`distclean'を実行し，
`$(distcleancheck_listfiles)'を実行することでビルドツリーが空にな
ることを確かめます．通常この調査は，`DISTCLEANFILES'変数 (*note
Clean::)に追加し忘れた，生成されるファイルを検出します． 

   `distcleancheck'の動作は，ほとんどのパッケージでOKにすべきで，そ
うでない場合は，`distcleancheck'ルールや
`$(distcleancheck_listfiles)'変数の定義を優先している可能性があり
ます．`distcleancheck'が完全にできないものに対して，最上位の
`Makefile.am'に以下のルールを追加してください． 

     distcleancheck:
             @:

   配布物の一部にもなるためクリーンしたくないビルドされたファイルを
`distcleancheck'で無視したい場合，代わりに以下の定義を追加してく
ださい．

     distcleancheck_listfiles = \
       find -type f -exec sh -c 'test -f $(srcdir)/{} || echo {}' ';'

ユーザがパッケージをビルドするとき，Makefileが配布されたファイルをリビ
ルドするものがある場合，それは通常エラーとなるので，上記の定義はデフォ
ルトではありません．(ファイルをビルドするために必要なユーザに足りない
ツールを考えてみてください．または，要求されたツールがパッケージでビル
ドされる場合，実行不可能なクロスコンパイルの状況を考慮してください．)
これに関するFAQがあり(*note distcleancheck::)，
`distcleancheck_listfiles'を実行する前にそれをよく読んで下さい．

   `distcheck'は，`uninstall'ルールが，通常の場合と
`DESTDIR'でのビルドの両方で適切に動作するかどうかも調査します．そ
れは`make uninstall'の呼び出しで行ない，ファイルが残っていないか
どうかをインストールツリーを見て調査します．この調査で，
`uninstall'に関連するルールを正しくコーディングしていることを確認
します．

   デフォルトで，その調査は`distuninstallcheck'ルールで行なわれ，イ
ンストールツリーのファイルリストは，
`$(distuninstallcheck_listfiles)'で生成されます(これは，ファイル
リストを標準出力に出力するために実行するシェルコマンドを値に持つ変数で
す)．

   これらのいずれかで，`distcheck'の動作を変更するために優先させるこ
とが可能です．例えば，この調査を完全に無効にするため，以下のように書く
でしょう．

     distuninstallcheck:
             @:

13.5 配布物の形式
=================

Automakeは，様々なフォーマットでプロジェクトを配布するアーカイブを提供
するためのルールを生成します．ターゲットは以下のとおりです．

`dist-bzip2'
     配布物のbzip2されたtarアーカイブを生成します．bzip2アーカイブは，gzip
     されたアーカイブより小さくなることが多くなっています． 

`dist-gzip'
     gzipされたtarアーカイブを生成します． 

`dist-shar'
     配布物のsharアーカイブを生成します． 

`dist-zip'
     配布物のzipアーカイブを生成します． 

`dist-tarZ'
     配布物の圧縮されたtarアーカイブを生成します． 

   ルール`dist'(とその歴史的な同義語の`dist-all')は，利用可能な
すべてのフォーマットでアーカイブを作成します．*Note Options::を参照して
下さい．デフォルトでは，`dist-gzip'ターゲットだけが`dist'で
フックされます．


File: automake-ja.info,  Node: Tests,  Next: Rebuilding,  Prev: Dist,  Up: Top

14 テストスイートのサポート
***************************

Automakeは二つの形式のテストスイートをサポートします．

14.1 単純なテスト
=================

変数`TESTS'が定義されている場合，その値はテストを行なうために実行
するプログラムのリストになります．プログラムは，派生するオブジェクトあ
るいはソースオブジェクトです．生成されるルールは`srcdir'と
`.'の両方で探します．データファイルを必要としているプログラムは，
(環境変数とmake変数の両方の)`srcdir'でそれらを探すので，それらは，
別々のディレクトリでビルドするとき(*note Build Directories:
(autoconf)Build Directories.)，特に`distcheck'ルー
ルに対して動作します(*note Dist::)．

失敗の数は実行後に出力されます．所定のテストプログラムが77のステータス
で終了する場合，その結果は最終的なカウントで無視されます．この機能で，
非移植性のテストが意味をなさない環境で無視することができます．

   変数`TESTS_ENVIRONMENT'は，テストの実行に対して環境変数を設定する
ために使用することが可能です．環境変数`srcdir'は，ルール内に設定
されます．すべてのテストプログラムがスクリプトの場合，
`TESTS_ENVIRONMENT'をシェルの呼び出しに設定することが可能です(例
えば`$(SHELL) -x')．これはテストをデバッグするときに役立つはずで す． 

   変数`XFAIL_TESTS'を，失敗を期待するテストのリスト(通常は
`TESTS'のサブセット)に定義してもかまいません．これは，それらのテ
ストの結果を反転します． 

   Automakeは，`TESTS'でリストアップされているそれぞれのプログラムが，
テストを実行する前にビルドされることを確実にします．ソースと派生するプ
ログラムを`TESTS'にリストアップすることが可能です．例えば，テスト
としてCプログラムを実行したいかもしれません．こうするためには，その名
前を`TESTS'と`check_PROGRAMS'にもリストアップし，それを他の
プログラムとして指定します．

14.2 DejaGnuのテスト
====================

`dejagnu' (ftp://ftp.gnu.org/gnu/dejagnu/)が
`AUTOMAKE_OPTIONS'にある場合，`dejagnu'ベースのテストスイー
トが想定されます．変数`DEJATOOL'は，`runtest'の呼び出しに
`--tool'引数として，一度に渡される名前のリストです．それはパッケー
ジの名前をデフォルトとします．

   変数`RUNTESTDEFAULTFLAGS'は，デフォルトでdejagnuに渡される
`--tool'と`--srcdir'フラグを保持します．必要な場合は，これで
優先することが可能です． 

   変数`EXPECT'と`RUNTEST'で，プロジェクト特有の値を提供するた
めに優先することが可能です．例えば，コンパイラツールチェインをテストす
る場合，デフォルト値はホストとターゲットの名前を考慮しないので，こうす
る必要があります． 

   変数`RUNTESTFLAGS'の内容は，`runtest'の呼び出しに渡されます．
これは，"ユーザ変数"(*note User Variables::)として扱われます．
`Makefile.am'に`runtest'フラグを設定する必要がある場合，代わ
りに`AM_RUNTESTFLAGS'を使用することが可能です． 

   Automakeは，`./configure'で検出した様々な変数を定義するローカルな
`site.exp'ファイルを生成するためのルールを生成します．このファイ
ルは，自動的にDejaGnuで読み込まれます．パッケージユーザがテストスイー
トを調整するためにこのファイルを編集することは問題ありません．しかし，
テストスイートの著者が新しい変数を定義する場所ではありません．これは，
実際のテストスイートのコードのどこかでなされるべきです．特に，
`site.exp'を配布すべきではありません．

   DejaGnuのテストスイートに関する詳細は，*Note Top: (dejagnu)Top.

   どちらの状況でも，テストは`make check'で実行されます．

14.3 インストールテスト
=======================

`installcheck'ターゲットは，パッケージがインストールされた後でテ
ストを実行する方法をユーザが利用可能にします．
`installcheck-local'ルールを書くことで，これをテストに追加するこ
とが可能です．


File: automake-ja.info,  Node: Rebuilding,  Next: Options,  Prev: Tests,  Up: Top

15 Makefileのリビルド
*********************

Automakeは，`Makefile'，`configure'，そして
`Makefile.in'のようなその他の派生するファイルを，自動的にリビルド
するルールを生成します．

   `configure.ac'で`AM_MAINTAINER_MODE'を使用している場合，これ
らの自動的なリビルドのルールは，管理者モードでのみ利用可能になります．

   `.m4'ファイルを探す場所を伝えるために，`-I'のような引数を用
いて`aclocal'実行する必要があることもあります．`make'が自動
的に`aclocal'を実行するときもあるので，これらの引数を指定する方法
が必要になります．`ACLOCAL_AMFLAGS'を定義することで，こうすること
が可能になります．これは，`aclocal'に渡す引数をそのまま保持してい
ます．この変数は，最上位の`Makefile.am'でのみ役に立ちます．

   追加の依存性を用いて`configure'や`config.status'をリビルドす
るルールを補足すると便利なときもあります．変数
`CONFIGURE_DEPENDENCIES'と`CONFIG_STATUS_DEPENDENCIES'をこれ
らの追加の依存性をリストアップするために使用することが可能です．これら
の変数はツリー内のすべての`Makefile'で定義されるべきなので(これら
二つのリビルドルールはすべてのものに出力されるため)，
`configure.ac'で`AC_SUBST'するのが安全で簡単です．例えば以下
の文で，`version.sh'が変更されるたび`configure'が再実行され ます．
     AC_SUBST([CONFIG_STATUS_DEPENDENCIES], ['$(top_srcdir)/version.sh'])
   ファイル名に`$(top_srcdir)/'があることに注意して下さい．この変数
はすべての`Makefile'で使用されるので，その値はビルドの階層レベル
を知っておく必要があります．

   `CONFIG_STATUS_DEPENDENCIES'に対する`CONFIGURE_DEPENDENCIES'
を誤解しないように注意して下さい．

   `CONFIGURE_DEPENDENCIES'は`configure'ルールに依存性を追加し，
それは`autoconf'を実行することになります．`automake'は既に
`m4_include'されるファイルを追跡しているので，この変数は，滅多に
使用すべきではありません．しかし，`m4_esyscmd'やそれに似た副作用
のある推奨されていないマクロを用いたトリッキーなゲームを楽しんでいると
き役に立つはずです．

   `CONFIG_STATUS_DEPENDENCIES'は`config.status'ルールに依存性
を追加し，それは`configure'を実行することになります．このため，こ
の変数として，configureの実行に副作用として読み込まれる可能性がないよ
うに，標準的ではないソースを持ち込むべきで，例えば上記の例の
`version.sh'などです．

   `version.sh'スクリプトについて言わせてもらうと，我々は今日，それ
を推奨していません．それらは主に，パッケージのバージョンをスクリプトで
自動的に更新するとき使用されていました(例えば，毎日のビルド)．古い形式
の`configure.ac'は以下のようになっているものもありました．
     AC_INIT
     . $srcdir/version.sh
     AM_INIT_AUTOMAKE([name], $VERSION_NUMBER)
     ...
   ここで，`version.sh'はシェルの断片で，`VERSION_NUMBER'を設定
します．この例の問題は，`automake'が依存性を追跡できないことと
(`version.sh'を`CONFIG_STATUS_DEPENDENCIES'にリストアップし，
このファイルをユーザに配布する)，古い形式の`AC_INIT'と
`AM_INIT_AUTOMAKE'を使用していることです．新しい構文に更新するの
は，`AC_INIT'の引数でシェル変数が利用できないので，素直な方法では
ありません．我々は`version.sh'を`configure.ac'でインクルード
されるM4ファイルで置換することを推奨します．
     m4_include([version.m4])
     AC_INIT([name], VERSION_NUMBER)
     AM_INIT_AUTOMAKE
     ...
   ここで，`version.m4'には`m4_define([VERSION_NUMBER], [1.2])'
のようなものを含めることができます．この二番目の形式の利点は，
`automake'がリビルドルールを定義するとき依存性に注意し，ファイル
も自動的に配布されることです．不便な点は，バージョンナンバーが上昇する
たびに`autoconf'が再実行されることで，以前の設定では，
`configure'だけが再実行されていました．


File: automake-ja.info,  Node: Options,  Next: Miscellaneous,  Prev: Rebuilding,  Up: Top

16 Automakeの動作の変更
***********************

Automakeの様々な機能は，`Makefile.am'のオプションで制御可能です．
このようなオプションは，`AUTOMAKE_OPTIONS'という名前の特別な
`Makefile'変数にリストアップすることで，`Makefile'ごとを基本
に適用されます．`configure.ac'の`AM_INIT_AUTOMAKE'の最初の引
数にリストアップすることで，処理されるすべての`Makefiles'に大域的
に適用されます．現在理解されるオプションは以下のとおりです． 

`gnits'
`gnu'
`foreign'
`cygnus'
     適切に厳密さを設定します．`gnits'オプションは， `readme-alpha'
     と`check-news'も暗黙に指定します．

`ansi2knr'
`PATH/ansi2knr'
     自動的なde-ANSI-ficationを開始します．*Note ANSI::.
     パスが前置されてい
     る場合，生成される`Makefile.in'は，`ansi2knr'プログラムを見
     つけるために指定されたディレクトリを探します．パスは(Automakeは現在こ
     れを調査しませんが)，同じ配布物内の他のディレクトリへの相対的なパスに
     すべきです．

`check-news'
     現在のバージョンナンバーが`NEWS'ファイルの最初の数行に無い場合，
     `make dist'は失敗します．

`dejagnu'
     `dejagnu'特有のルールを生成します．*Note Tests::.

`dist-bzip2'
     `dist-bzip2'を`dist'にフックします． 

`dist-shar'
     `dist-shar'を`dist'にフックします． 

`dist-zip'
     `dist-zip'を`dist'にフックします． 

`dist-tarZ'
     `dist-tarZ'を`dist'にフックします． 

`filename-length-max=99'
     ファイル名が99文字以上のものを`make dist'中に見つけた場合，中止し
     ます．そのような長いファイル名は，一般的に移植性がないtarballだと考え
     られます．以下の`tar-v7'と`tar-ustar'オプションを参照して下
     さい．このオプションは，トップレベルの`Makefile.am'や
     `configure.ac'の`AM_INIT_AUTOMAKE'の引数で使用されるべきで，
     それ以外では無視されるでしょう．

`no-define'
     このオプションは，`AM_INIT_AUTOMAKE'への引数として渡すときだけ意
     味があります．それは`PACKAGE'と`VERSION'変数が
     `AC_DEFINE'されることを妨げます．

`no-dependencies'
     これは，コマンドラインで`--include-deps'を使用することに似ていま
     すが，自動的な依存追跡の仕事をするために必要なビットが無い状況で役に立
     ちます．*Note Dependencies::.
     この状況では，効率的な自動的な依存追跡に 障害を与えます．

`no-dist'
     `dist'ターゲットに関連するコードを生成しません．これは，パッケー
     ジに独自の配布物を作成する手法があるとき役に立ちます．

`no-dist-gzip'
     `dist-gzip'を`dist'にフックしません． 

`no-exeext'
     `Makefile.am'でターゲット`foo'に対するルールを定義している場
     合，`foo$(EXEEXT)'と指名されているターゲットに対するルールに優先
     します．`EXEEXT'が空のとき，これが必要です．しかし，デフォルトで，
     automakeではこれの使用に対してエラーを発生します．`no-exeext'オプ
     ションで，このエラーが発生しないようにします．これは，Windowsや実行形
     式の拡張子を使用しているそれ以外のすべてのオペレーティングシステムに移
     植する予定の無いパッケージだと分かっている場合のみ使用するものです．

`no-installinfo'
     生成された`Makefile.in'はデフォルトで，infoページをビルドしたりイ
     ンストールしたりしません．しかし，`info'と`install-info'ター
     ゲットは利用可能です．このオプションは`GNU'の厳密さでは拒絶されま
     す． 

`no-installman'
     生成された`Makefile.in'はデフォルトでman pageをインストールしませ
     ん．しかし，`install-man'ターゲットはオプショナルインストールで利
     用可能です．このオプションは`GNU'の厳密さで使用不可能です． 

`nostdinc'
     このオプションは，通常Automakeが自動的に供給する標準的な`-I'オプ
     ションを利用不可能にするために使用することが可能です．

`no-texinfo.tex'
     このディレクトリにTexinfoファイルがあっても，`texinfo.tex'を必要
     としません．

`readme-alpha'
     このリリースがアルファリリースで，ファイル`README-alpha'が存在す
     る場合，それは配布物に加えられます．このオプションが与えられている場合，
     バージョンナンバーは次の二つの形式のうちの一つだと期待されます．最初の
     形式は`MAJOR.MINOR.ALPHA'で，それぞれの要素が数
     字です．最後のピリオドと数字は非アルファのリリースのときに捨てられます．
     二番目の形式は`MAJOR.MINORALPHA'で，ALPHA
     は文字列です．それは非アルファのリリースのときに取り除かれます．

`std-options'
     `installcheck'ルールで，インストールされたスクリプトとプログラム
     が，`--help'と`--version'オプションをサポートしているかどう
     かを調査するようにします．これは，プログラムの実行時の依存性がインストー
     ル後にも満足しているという基本的な調査も提供します．

     状況によって，プログラム(またはスクリプト)でこのテストを免除させる必要
     があるかもしれません．例えば，(GNUのsh-utilsの)`false'は，
     `--help'や`--version'でさえ，決して成功しません．そのような
     プログラムは，変数`AM_INSTALLCHECK_STD_OPTIONS_EXEMPT'でリストアッ
     プすることが可能です．この変数にリストアップされているプログラム(スク
     リプトではない)は，Win32やOS/2に対して`$(EXEEXT)'で接尾子が付きま
     す．例えば，`false'をプログラムとして，`true.sh'をスクリプト
     としてビルドしようと仮定し，`--help'や`--version'をどちらも
     サポートしないものとします．

          AUTOMAKE_OPTIONS = std-options
          bin_PROGRAMS = false ...
          bin_SCRIPTS = true.sh ...
          AM_INSTALLCHECK_STD_OPTIONS_EXEMPT = false$(EXEEXT) true.sh

`subdir-objects'
     このオプションが指定されている場合，オブジェクトはソースファイルのサブ
     ディレクトリに対応する，ビルドディレクトリのサブディレクトリに配置され
     ます．例えば，ソースファイルが`subdir/file.cxx'の場合，出力ファイ
     ルは`subdir/file.o'になります．

`tar-v7'
`tar-ustar'
`tar-pax'
     これら三つの排他的なオプションで，`make dist'でtarballを生成する
     ときのtarのフォーマットを選択します．(作成されるtarファイルは，使用し
     ている`no-dist-gzip'，`dist-bzip2'，そして`dist-tarZ'オ
     プションの組合せによって圧縮されます．)

     これらのオプションは，実行すべき新たなコンフィグレーションの調査を引き
     起こすはずなので，`AM_INIT_AUTOMAKE'のオプションとして渡す必要が
     あります(*note Macros::)．`AUTOMAKE_OPTIONS'変数でそのようなオプ
     ションが見つかる場合，Automakeは文句を言います．

     `tar-v7'は，古いtarフォーマットを選択します．これは，歴史的なデフォ
     ルトです．この古くさいフォーマットは，すべてのtarの実装で解釈でき，99
     文字までのファイル名をサポートしています．与えられるファイル名がそれよ
     り長いとき，tarの実装によっては問題を調査しますが，壊れたtarballを生成
     したり，移植性の無い拡張子を使用したりするものもあります．さらに，V7
     フォーマットは，空のディレクトリを保持することが不可能です．このフォー
     マットを使用しているときは，あまりに長いファイル名を検出する
     `filename-length-max=99'オプションの使用を検討して下さい．

     `tar-ustar'は，POSIX 1003.1-1988で定義されているustarフォーマット
     を選択します．このフォーマットは，古いものに対して十分移植性があると信
     じられています．空のディレクトリも完全にサポートされています．256文字
     までのファイル名で保存可能で，ファイル名も，ディレクトリのセパレータで
     2つの部分に分割することも可能で，最初のものはほぼ155バイトまで対応して
     います．そのため，ほとんどの状況で，最大ファイル名の長さは256文字より
     小さくなります．しかし，99文字以上のファイル名の処理が壊れたtarの実装
     で実行する可能性もあります(このドキュメントを正確にするため
     <bug-automake@gnu.org>にレポートを報告して下さい)．

     `tar-pax'は，POSIX 1003.1-2001で定義されている，新しいpax交換フォー
     マットを選択します．それにはファイル名の長さの制限はありません．しかし，
     このフォーマットはまだ新しく，最近のプラットフォームをターゲットとした
     パッケージに限定されるでしょう．上位互換の方法としてpaxフォーマット移
     行しているので，このオプションは，将来，より新しいバージョンに関係しま
     す．

     tarフォーマットの詳細な議論は，*Note Controlling the Archive
     Format: (tar)Formats.

     `configure'でこれらのフォーマットの構成を知る方法はいくつかありま
     す．作業終了まで，ツールが分からない場合でも中止しませんが(パッケージ
     はビルド可能です)，`make dist'は失敗するでしょう．

VERSION
     バージョンナンバー(例えば`0.30')が指定可能です．Automakeが，指定
     されているバージョンより新しくない場合，`Makefile.in'の作成は行な
     われません．

`-WCATEGORY' or `--warnings=CATEGORY'
     これらのオプションは，コマンドラインに正確に対応するもののように動作し
     ます(*note Invoking
     Automake::)．これでファイルごとを基本に，警告のカ
     テゴリを有効にしたり無効にしたりすることが可能になります．プロジェクト
     全体に警告の設定を行なうことも可能です．例えば，`configure.ac'で
     `AM_INIT_AUTOMAKE([-Wall])'を試してください．


   認識できないオプションは`automake'が判断します．

   ツリーの全てのファイルにオプションを適用したい場合，
`configure.ac'の`AM_INIT_AUTOMAKE'を使用することが可能です． *Note
Macros::.


File: automake-ja.info,  Node: Miscellaneous,  Next: Include,  Prev: Options,  Up: Top

17 雑多なルール
***************

他のどこにも適さない少数のルールと変数があります．

* Menu:

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions
* Multilibs::                   Support for multilibs.


File: automake-ja.info,  Node: Tags,  Next: Suffixes,  Up: Miscellaneous

17.1 `etags'のインターフェース
==============================

Automakeは，GNU Emacsで使用する`TAGS'ファイルを生成するためのルー
ルを生成する場合もあります．

   C，C++，またはFortran 77のソースコードやヘッダが存在している場合，
`tags'と`TAGS'ルールがディレクトリに対して生成されます．
`_SOURCES'，`_HEADERS'，そして`_LISP'プライマリを使用し
てリストアップされているすべてのファイルは，タグを生成されます．配布さ
れることが無い生成されるソースファイルは，`nodist_noinst_HEADERS'
や`nodist_PROG_SOURCES'のような変数で宣言する必要があり，そ
うすることでそれらが無視されることに注意して下さい．

   複数のディレクトリがあるパッケージのトップディレクトリで，`tags'
ルールは実行時に出力され，それは実行時に，サブディレクトリにあるすべて
の`TAGS'ファイルの参照を含んでいる`TAGS'ファイルを生成します．

   変数`ETAGS_ARGS'が定義されている場合，`tags'ルールも生成され
ます．この変数は，`etags'が理解しないタグを使用しているソースを含
んでいるディレクトリでの使用を考慮しています．ユーザは`etags'に追
加のフラグを渡すために`ETAGSFLAGS'を使用することが可能です．
`Makefile.am'で`AM_ETAGSFLAGS'を利用することもできます． 

   ソースとTexinfoファイルのノードに対するタグをAutomakeで生成する方法は
以下のようになります．

     ETAGS_ARGS = automake.in --lang=none \
      --regex='/^@node[ \t]+\([^,]+\)/\1/' automake.texi

   `ETAGS_ARGS'にファイル名を加える場合，おそらく
`TAGS_DEPENDENCIES'も設定したいでしょう．この変数の中身は
`tags'ルール対する依存性に直接追加されます． 

   Automakeは，`vi'形式の`tags'ファイルのビルドで使用される，
`ctags'ルールを生成します．変数`CTAGS'は，呼び出されるプログ
ラムの名前です(デフォルトは`ctags')．`CTAGSFLAGS'は，ユーザ
が追加フラグを渡すために使用され，`AM_CTAGSFLAGS'は
`Makefile.am'で使用されます．

   Automakeは，`mkid'をソース上で実行する`ID'ルールも生成します．
これはディレクトリ単位に基づくサポートだけです． 

   AutomakeはGNU Global Tags program
(http://www.gnu.org/software/global/)もサポートします．`GTAGS'ルールは，自動的にGlobal
Tagを実
行し，結果をビルドディレクトリに書き込みます．変数`GTAGS_ARGS'は，
`gtags'に渡す引数を保持しています． 


File: automake-ja.info,  Node: Suffixes,  Next: Multilibs,  Prev: Tags,  Up: Miscellaneous

17.2 新しいファイル拡張子の取り扱い
===================================

Automakeが知らないファイル形式を処理するために，新しい暗黙のルールを導
入することが役に立つこともあります．

   例えば，`.foo'ファイルを`.o'ファイルにコンパイルするコンパイ
ラがあると仮定します．その言語に対する接尾子ルールを単純に定義するでしょ
う．

     .foo.o:
             foocc -c -o $@ $<

   そして，`_SOURCES'変数で`.foo'ファイルを直接使用し，正しい結
果が期待されるでしょう．

     bin_PROGRAMS = doit
     doit_SOURCES = doit.foo

これはより簡単で，より一般的な状況です．それ以外の状況では，定義してい
るサフィックスルールを，Automakeが理解する手助けが必要です．通常これは，
拡張子がドットで始まらないときに生じます．そのときにしなければならない
ことは，暗黙のルールを定義する*前に*，新しい接尾子のリストを `SUFFIXES'
変数に書き込むことです．

   例えば，以下の定義で，Automakeが誤解して，`.idlC.cpp:'で
`.idlC'を`.cpp'に変換する試行をしないようにします．

     SUFFIXES = .idl C.cpp
     .idlC.cpp:
             # whatever

   注意していると思いますが，`SUFFIXES'変数は`make'の
`.SUFFIXES'特殊ターゲットのように動作します．`.SUFFIXES'を独
自にいじくるべきではなく，その代わりに`SUFFIXES'を使用しAutomake
が`.SUFFIXES'に対する接尾子リストを生成するようにすべきです．与え
られた全ての`SUFFIXES'は生成された接尾子リストの最初に書かれ，
Automakeが生成するまだリストに無い接尾子が続きます．


File: automake-ja.info,  Node: Multilibs,  Prev: Suffixes,  Up: Miscellaneous

17.3 Multilibのサポート
=======================

Automakeには，multilibと呼ばれているあまり知られていない機能のサポート
があります．"multilib"は，一度に複数の異なるABIに対してビルドされ
るライブラリです．毎回，ライブラリが異なるターゲットフラグの組み合わせ
でビルドされます．これは，ライブラリがクロスコンパイルを目的としていて，
コンパイラがサポートしているライブラリに対して，ほとんど排他的に使用さ
れるときだけ役に立ちます．

multilibのサポートはまだ実験中です．multilibを理解していて，遭遇した問
題をデバッグすることが可能な場合のみ，それを使用してください．


File: automake-ja.info,  Node: Include,  Next: Conditionals,  Prev: Miscellaneous,  Up: Top

18 インクルード
***************

Automakeは，`automake'が実行されるときに，他の断片的な
`Makefile'をインクルードするために使用可能な，`include'指示
語をサポートします．これらの断片は，`make'ではなく`automake'
で読み込まれ解釈されることに注意してください．条件文同様，`make'
には`include'を使用する能力はありません．

   `include'には，二つの書式があります．

`include $(srcdir)/file'
     現在のソースディレクトリに相対的なところで見つかった断片をインクルード
     します．

`include $(top_srcdir)/file'
     トップソースディレクトリに相対的なところで見つかった断片をインクルード
     します．

断片が条件文を含んでいる場合，条件文は断片の内容全体に適用されることに
注意してください．

   `Makefile.in'をリビルドする必要があるので，この方法でインクルード
されるMakefileの断片は常に配布されます．


File: automake-ja.info,  Node: Conditionals,  Next: Gnits,  Prev: Include,  Up: Top

19 条件文
*********

Automakeは単純な形式の条件文をサポートします．

   条件文を使用する前に，`configure.ac'ファイルで
`AM_CONDITIONAL'を使用してそれを定義する必要があります (*note
Macros::)．

 -- Macro: AM_CONDITIONAL (CONDITIONAL, CONDITION)
     条件名CONDITIONALは，文字で始まり，文字，数字，そしてアンダース
     コアのみを含む単純な文字列です．Automakeが`TRUE'と`FALSE'の
     どちらを保持しているかで異なっているはずです．

     シェルのCONDITION(シェルの`if'文で使用されるのに適切なもの)
     は，`configure'が実行されるときに評価されます．_すべての_
     `AM_CONDITIONAL'が毎回`configure'の実行で呼び出されるように
     調整する必要があります - `AM_CONDITIONAL'が条件付き(例えば，シェ
     ルの`if'文)で実行される場合，結果としてautomakeが混乱します．

   条件文は一般的に，`configure'スクリプトでユーザが提供するオプショ
ンに依存します．ユーザが`--enable-debug'オプションを使用する場合，
真の条件を書く方法の例は以下のようになります．

     AC_ARG_ENABLE(debug,
     [  --enable-debug    Turn on debugging],
     [case "${enableval}" in
       yes) debug=true ;;
       no)  debug=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
     esac],[debug=false])
     AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

   `Makefile.am'でその条件文を使用する方法の例は以下のようになります．

     if DEBUG
     DBG = debug
     else
     DBG =
     endif
     noinst_PROGRAMS = $(DBG)

この簡単な例で，EXTRA_PROGRAMSを使用しているものを扱うことも可能でしょ
う(*note Conditional Programs::)．

   `if'文で，`!'を使用した否定も可能な，単一の変数のみを調査し
たいかもしれません．`else'文は省略可能です．条件文は任意の深さに
ネスト可能です．`else'に引数を指定することも可能ですが，いずれの
場合でも，現在の`if'に対して使用される条件の否定となっている必要
があります．同様に，`end'で閉じられた条件を指定することも可能です．

     if DEBUG
     DBG = debug
     else !DEBUG
     DBG =
     endif !DEBUG

対称性のないの条件文はエラーとなります．

   Automakeの条件文はGNU
Makeの条件文とは同じでないことに注意してください．
Automakeの条件文は，configure時に`configure'スクリプトでチェック
され，`Makefile.in'から`Makefile'への変換に影響を与えます．
それらは，`configure'に渡すオプションと，`configure'がホスト
システムについて発見した結果に基づきます．GNU Makeの条件文は，
`make'時に調査され，makeプログラムに渡された，あるいは
`Makefile'で定義された変数に基づいています．

   Automakeの条件文は，どんなmakeプログラムでも動作します．


File: automake-ja.info,  Node: Gnits,  Next: Cygnus,  Prev: Conditionals,  Up: Top

20 `--gnu'と`--gnits'の効果
***************************

`--gnu'オプション(あるいは`AUTOMAKE_OPTIONS'変数での
`gnu')で，`automake'は以下のことを調査します．

   * `INSTALL'，`NEWS'，`README'，`AUTHORS'，そして
     `ChangeLog'と，`COPYING.LIB'，`COPYING.LESSER'，または
     `COPYING'のいずれかもう一つのファイルがパッケージのトップディレク
     トリにあることが必要です．

   * `no-installman'と`no-installinfo'オプションは使用できません．

このオプションは，それ以上の調査を行なうため将来拡張されることでしょう．
GNU標準の正確な必要条件に精通することを勧めます．また，`--gnu'は，
様々な管理者専用のルールで使用するために存在する，特定のGNU非標準のプ
ログラムを要求するはずです．例えば将来は，`pathchk'が`make
dist'に対して要求されるかもしれません．

   `--gnits'オプションは，`--gnu'が行なうすべての調査に加え以下
のことも調査します．

   * `make installcheck'は，`--help'と`--version'が，それぞ
     れ本当に利用方法のメッセージとバージョン文字列を確実に出力することを調
     査します．これは，`std-options'オプションです(*note Options::)．

   * `make dist'を，`NEWS'ファイルが現在のバージョンに更新された
     ことを確認するために調査します．

   * `VERSION'は，その書式ががGnits standardに従っていることを確認する
     ために調査されます．

   * これがアルファリリースだということを`VERSION'が示していて，ファイ
     ル`README-alpha'がパッケージのトップディレクトリにある場合，それ
     は配布物に含められます．`--gnits'モードはバージョンナンバーの書式
     に制限がある唯一のものであり，そのためAutomakeが自動的に
     `README-alpha'を含めることを決定することが可能な唯一のモードなの
     で，これは`--gnits'モードではなされますが他ではなされません．

   * ファイル`THANKS'が必要です．


File: automake-ja.info,  Node: Cygnus,  Next: Not Enough,  Prev: Gnits,  Up: Top

21 `--cygnus'の効果
*******************

特にGNU GCCとGNU gdbのようなパッケージには，Cygnus Support(その後，
Cygnus Solutionsに名前が変更され，その後で Red Hatに買収されました)で
通常書かれているビルド環境変数があります．この系統のパッケージは，
"Cygnus"ツリーとして述べられるときもあります．

   Cygnusツリーには，`Makefile.in'を構築する方法に対して，わずかに異
なったルールがあります．`automake'へ`--cygnus'を渡すことで，
生成されるすべての`Makefile.in'はCygnus規則に従います．

   `--cygnus'の正確な効果は以下のようになっています．

   *
     Infoファイルは，ソースディレクトリでではなく，常にビルドディレクトリで
     作成されます．

   * `texinfo.tex'は，Texinfoソースファイルが指定されている場合でも，
     要求されません．ファイルは提供されているのですが，Automakeが見つけられ
     ない場所にあると仮定します．この仮定は，一般的にCygnusパッケージをバン
     ドルする方法として人工的に作られたものです．

   * `make dist'はサポートされておらず，そのルールは生成されません．
     Cygnus形式のツリーでは独自の配布メカニズムを使用します．

   * ユーザの`PATH'同様にビルドツリーでも特定のツールを捜します．これ
     らのツールは，`runtest'，`expect'，`makeinfo'，そして
     `texi2dvi'です．

   * `--foreign'を暗黙に指定します．

   * オプション`no-installinfo'と`no-dependencies'を暗黙に指定し ます．

   * マクロ`AM_MAINTAINER_MODE'と`AM_CYGWIN32'が要求されます．

   * `check'ターゲットは`all'に依存しません．

   GNU管理者は，特別なCygnusモードではなく`gnu'の厳密さを使用してく
ださい．いつかはおそらく，CygnusツリーとGNUツリーの間の差が(例えば，
GCCがより標準に準拠するように)なくなることでしょう．そのときは，特殊な
Cygnus モードは削除されるでしょう．


File: automake-ja.info,  Node: Not Enough,  Next: Distributing,  Prev: Cygnus,  Up: Top

22 Automakeが不十分なとき
*************************

状況によっては，Automakeだけで作業をまかなえず，手書きのルールや手書き
の`Makefile'といった手段を利用します．

* Menu:

* Extending::                   Adding new rules or overriding existing ones.
* Third-Party Makefiles::       Integrating Non-Automake `Makefile's.


File: automake-ja.info,  Node: Extending,  Next: Third-Party Makefiles,  Up: Not Enough

22.1 Automakeルールの拡張
=========================

(`_PROGRAMS'のような変数は`$(EXEEXT)'が追加されて書き直され
るといった)わずかな例外はありますが，`Makefile.am'の内容は
`Makefile.in'にそのままコピーされます．

   これらのコピーの意味は，単純にいくつかの`make'変数とルールを
`Makefile.am'に追加することで，多くの問題が解決可能だということを
意味します．Automakeはこれらの追加を無視します．

   `Makefile.in'は，三つの異なる場所(`Makefile.am'，
`configure.ac'，そして`automake'自身)からデータを集めてビ
ルドされるので，ルールや変数の定義が衝突する可能性があります．
`Makefile.in'をビルドするとき，ユーザが最後の単語を利用することを
保証するために，`automake'に関連する優先順位に従います．
`Makefile.am'でユーザが定義した変数は，`configure.ac'で
`AC_SUBST'した変数より優先され，`AC_SUBST'された変数は
`automake'が定義した変数より優先されます．同様にルールも関連し
て，ユーザ定義のルールは`automake'が定義した同じターゲットに対
するルールに優先されます．

これらのオーバーライドの意味は，Automakeのデフォルトの設定をうまく調整
したり，そのルールを置換することを可能にします．Automakeのルールをオー
バーライドすることはあまり勧められず，特にサブディレクトリがあるパッケー
ジの最上位のディレクトリではそうです．`-Woverride'オプション (*note
Invoking Automake::)で，オーバーライドしている定義が簡単に捕え
られます．

Automakeには，コマンドを用いたルールと依存性を指定するだけのルールに差
異がないことに注意して下さい．`automake'が定義したターゲットに，
ルール全体を定義することなく新しい依存性を追加することは不可能です．

   しかし，様々な有用なターゲットには，`Makefile.in'で指定可能な，
`-local'バージョンがあります．Automakeはこれらのユーザが提供する
ターゲットを用いて標準ターゲットを補足します．

   ローカルバージョンをサポートするターゲットは，`all'，`info'，
`dvi'，`ps'，`pdf'，`html'，`check'， `install-data'，
`install-exec'，`uninstall'，
`installdirs'，`installcheck'，そして様々な`clean'ター
ゲット(`mostlyclean'，`clean'，`distclean'，そして
`maintainer-clean')です．`uninstall-exec-local'や
`uninstall-data-local'ターゲットが無いことに注意してください．
`uninstall-local'だけを使用してください．データだけ，あるいは実行
可能プログラムだけをアンインストールすることには意味がありません．

   例えば，ファイルを`/etc'にインストールする一つの方法は，以下のよ
うになります．

     install-data-local:
             $(INSTALL_DATA) $(srcdir)/afile $(DESTDIR)/etc/afile

   ルールには，"hook"と呼ばれる，その仕事が終った後にもう一つのルール
を実行する方法もあります．フックは，主要なターゲットに`-hook' を
追加して命名します．フックが可能なターゲットは，`install-data'，
`install-exec'，`uninstall'，`dist'，そして `distcheck'です． 

例えば，インストールしたプログラムにハードリンクを作成する方法は，以下
のようになります．

     install-exec-hook:
             ln $(DESTDIR)$(bindir)/program$(EXEEXT) \
                $(DESTDIR)$(bindir)/proglink$(EXEEXT)

安っぽいけれど，シンボリックリンクより移植性の高いハードリンクは，どこ
ででも動作するわけではありません(例えば，OS/2には`ln'がありま
せん)．理想としては，`ln'が動作しないときは`cp -p'に逆戻りす
べきです．簡単な方法は，シンボリックリンクを受け入れる場合，
`configure.ac'に`AC_PROG_LN_S'を追加し(*note Particular Program Checks:
(autoconf)Particular Programs.)，
`Makefile.am'で`$(LN_S)'を使用して下さい．

   例えば，以下では，`$(LN_S)'を用いてプログラムのコピーバージョンの
インストールを可能にする方法です．

     install-exec-hook:
             cd $(DESTDIR)$(bindir) && \
               mv -f prog$(EXEEXT) prog-$(VERSION)$(EXEEXT) && \
               $(LN_S) prog-$(VERSION)$(EXEEXT) prog$(EXEEXT)

我々は，新しいバージョンがシンボリックリンクを削除し，本当のバイナリを
削除しないように，プログラムの名前を変更していることに注意して下さい．
また，我々は，相対リンクを作成するため，コピー先のディレクトリに
`cd'しています．


File: automake-ja.info,  Node: Third-Party Makefiles,  Prev: Extending,  Up: Not Enough

22.2 サードパーティーの`Makefile'
=================================

ほとんどのプロジェクトで，すべての`Makefile'はAutomakeで生成され
ます．しかし，状況によっては手書きの`Makefile'をサブディレクトリ
に配置する必要があるプロジェクトもあります．例えば，あるディレクトリは
独自のビルドシステムを用いたサードパーティーのプロジェクトで，それ以外
はAutomakeを使用していることもあるでしょう．

   以下の再帰的なターゲットをすべて認識する`Makefile'があるディレク
トリであれば，任意のディレクトリを`SUBDIRS'や`DIST_SUBDIRS'
にリストアップすることが可能です．

ユーザが以下のターゲットを実行したとき，ターゲットはすべてのサブディレ
クトリで再帰的に実行されます．これは，サードパーティーの
`Makefile'がそれらをサポートしていることが重要である理由です．

`all'
     パッケージを完全にコンパイルします．これは，Automakeが生成する
     `Makefile'ではデフォルトのターゲットですが，サードパーティーの
     `Makefile'ではデフォルトである必要はありません．

`distdir'
     tarballが構築される前に`$(distdir)'に配布すべきファイルをコピーし
     ます．もちろん，このターゲットも`no-dist'オプション (*note
     Options::が使用されている場合は不要です．

     変数`$(top_distdir)'と`$(distdir)'(*note Dist::)は，
     `distdir'ターゲットが呼び出されるとき，サブパッケージとなる外部パッ
     ケージから渡されます．これら二つの変数は，再帰的になっているディレクト
     リで調整されているので，すでに使用されています．

`install'
`install-data'
`install-exec'
`uninstall'
     ファイルをインストールしたりアンインストールしたりします (*note
     Install::)．

`install-info'
     Texinfoドキュメントだけをインストールします(*note Texinfo::)．

`installdirs'
     インストールディレクトリを作成しますが，ファイルはインストールしません．

`check'
`installcheck'
     パッケージを調査します(*note Tests::)．

`mostlyclean'
`clean'
`distclean'
`maintainer-clean'
     クリーンルールです(*note Clean::)．

`dvi'
`pdf'
`ps'
`info'
`html'
     さまざまな書式のドキュメントをビルドします(*note Texinfo::)．

`tags'
`ctags'
     `TAGS'と`CTAGS'をビルドします(*note Tags::)．

   プロジェクトでGettextを使用したことがある場合，これはサードパーティー
の`Makefile'がAutomakeが使用可能だという良い例になります．
`po/'と`intl/'にある`gettextize'された
`Makefile'は，これらすべてのターゲットを実装している手書きの
`Makefile'です．すなわち，Automakeパッケージの`SUBDIRS'に追
加することが可能です．

   `DIST_SUBDIRS'だけでリストアップされていて，`SUBDIRS'でリス
トアップされていないディレクトリは，`distclean'，
`maintainer-clean'，そして`distdir'ルールだけが必要です (*note
Conditional Subdirectories::)．

通常，これらのルールの多くは，サードパーティーのサブプロジェクトには無
関係ですが，パッケージ全体がうまく動作するために要求されます．何もしな
いルールもOKなので，ドキュメントもタグのサポートもないサードパーティー
のプロジェクトを統合する場合は，単純に`Makefile'にを追加すること
も可能でしょう．

     EMPTY_AUTOMAKE_TARGETS = dvi pdf ps info html tags ctags
     .PHONY: $(EMPTY_AUTOMAKE_TARGETS)
     $(EMPTY_AUTOMAKE_TARGETS):

   サードパーティーのビルドシステムとの統合のもう一つの側面は，それらが
VPATHのビルドをサポートしているかどうかによります．明らかに，サブパッ
ケージがVPATHのビルドをサポートしていない場合，パッケージ全体ではVPATH
のビルドをサポートしないことになります．言い替えると，`make
distcheck'はVPATHのビルドに依存するため動作しないことを意味します．こ
れを利用しないことも可能です(実際，Automakeユーザには`make
distcheck'を聞いたこともない人がたくさんいます)．それ以外の人々は，既
存の`Makefile'をVPATHをサポートするように改造するかもしれません．
そうすることの必要性をAutomakeが要求するわけではありませんが．Autoconf
だけは必要とします(*note Build Directories: (autoconf)Build
Directories.)．必要となる代入は，`Makefile'の処
理で`configure'で定義される`@scrdir@'，
`@top_srcdir@'，そして`@top_buildir@'で(*note Preset Output Variables:
(autoconf)Preset Output
Variables.)，それらは前述の`$(distdir)'と`$(top_distdir)'変数の
ようにMakefileで計算されません．

   サードパーティーの`Makefile'が上記で要求されるターゲットを導入す
るように編集するのは，不便なことも時々あります．例えば，新しいバージョ
ンに簡単に更新できるようサードパーティのソースをいじらないようにしたい
人もいるかもしれません．

   他にも二つの考えがあります．GNU
makeと仮定する場合，一つの方法として，
要求されるターゲットを追加しサードパーティの`Makefile'をインクルー
ドした`GNUmakefile'をサブディレクトリに追加することが可能です．
VPATHのビルドでこれを動作するため，`GNUmakefile'はディレクトリの
ビルドでだます必要があります．こうするための最も簡単な方法は，代わりに
これを`GNUmakefile.in'に書き，外部パッケージから
`AC_CONFIG_FILES'で処理させることです．例えば，`Makefile'で
ドキュメントのターゲット以外のすべてのターゲットを定義していると仮定し，
`check'ターゲットは実際には`test'で呼び出される場合，
`GNUmakefile'(または`GNUmakefile.in')を以下のように書くでしょ う．

     # First, include the real Makefile
     include Makefile
     # Then, define the other targets needed by Automake Makefiles.
     .PHONY: dvi pdf ps info html check
     dvi pdf ps info html:
     check: test

   `include'を使用しない同じような考えは，本物の`Makefile'にルー
ルを送る，代わりの`Makefile'を書くことで，`$(MAKE) -f Makefile.real
$(AM_MAKEFLAGS) target' (オリジナルの`Makefile'の名
前を変更できる場合)，または，`cd subdir && $(MAKE) $(AM_MAKEFLAGS)
target' (サブディレクトリのプロジェクトの階層をもう一
つ深くできる場合)のいずれかを用います．この代わりの`Makefile'を
Automakeで生成可能だというのは，良い知らせでしょう．ルールを送りつける
-local ターゲット(*note Extending::)だけが必要です．もちろん，それ以外
のAutomakeの機能も利用可能なので，Automakeに配布とインストールを実行さ
せることを決定することも可能でしょう．以下は，実行可能な
`Makefile.am'です．

     all-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) all
     check-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) test
     clean-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) clean

     # Assuming the package knows how to install itself
     install-data-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) install-data
     install-exec-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) install-exec
     uninstall-local:
             cd subdir && $(MAKE) $(AM_MAKEFLAGS) uninstall

     # Distribute files from here.
     EXTRA_DIST = subdir/Makefile subdir/program.c ...

このアイディアは最後の手段で，サブプロジェクトのビルドシステムを無視し，
すべてをこの代わりの`Makefile.am'で生成します．これは，VPATHのビ
ルドが必要でサブプロジェクトがそれをサポートしていない場合，非常に理に
かなったものに感じるでしょう．


File: automake-ja.info,  Node: Distributing,  Next: API versioning,  Prev: Not Enough,  Up: Top

23 `Makefile.in'の配布
**********************

Automakeは，結果として生じる`Makefile.in'の配布に制限を置きません．
我々は，ソフトウェアの著者にGPLのような用語の下でその仕事を流通させる
ことを奨励しますが，そうすることはAutomakeを使用することにで要求されま
せん．

   `--add-missing'スイッチによって自動的にインストールすることが可能
なファイルにはGPLに従うものもあります．しかし，選択したライセンスを気
にせず，パッケージとともに配布することができるよう，これらにも特別な例
外があります．


File: automake-ja.info,  Node: API versioning,  Next: Upgrading,  Prev: Distributing,  Up: Top

24 AutomakeのAPIのバージョン管理
********************************

通常，新しいAutomakeのリリースにはバグの修正と新しい機能が含まれていま
す．残念ながら，それらは新しいバグと非互換性ももたらす可能性があります．
このことは，パッケージがAutomakeの特定のバージョンを要求する可能性とな
る四つの理由になります．

   大きなツリーのパッケージを管理するとき，それぞれが異なるバージョンの
Automakeを要求することが問題になります．過去には，開発者(と時にはユー
ザが)異なるバージョンのAutomakeを異なる場所にインストールし，それぞれ
のパッケージに対して適切な`$PATH'に切替える必要があったという意味 です．

   バージョン1.6で開始していますが，Automakeはバージョン管理されたバイナ
リをインストールします．これは同じ`$prefix'で複数のバージョンの
Automakeをインストールすることが可能で，`$PATH'で誤魔化すこと無く
`automake-1.6'や`automake-1.7'を実行することで任意のバージョ
ンのAutomakeを選択することが可能だということを意味します．さらに，
Automake 1.6で生成された`Makefile'は，リビルドのルールで明示的に
`automake-1.6'を使用します．

   `automake-1.6'の`1.6'は，Automakeのバージョンではなく
AutomakeのAPIのバージョンです．バグの修正版が作成された場合，例えば
Automake 1.6.1になりますが，APIのバージョンは1.6のままです．これは，
Automake 1.6で動作するパッケージは1.6.1でも動作することを意味します．
結局，これは人々がバグの修正版に期待するものになります．

パッケージがリリースで導入された機能やバグの修正に依存している場合，古
いリリースを使用しないことを確実にするため，Automakeへのオプションとし
てこのバージョンを渡すことが可能です．例えば，`configure.ac'で以
下の内容を使用してください．

       AM_INIT_AUTOMAKE(1.6.1)    dnl Require Automake 1.6.1 or better.
   または特定の`Makefile.am'で以下の内容を使用してください．

       AUTOMAKE_OPTIONS = 1.6.1   # Require Automake 1.6.1 or better.
Automakeのバージョンが要求されたバージョンより古い場合，Automakeはエラー
メッセージを出力します．

APIの中身
=========

Automakeのプログラミングインターフェースは簡単に定義できません．基本的
に，全ての*ドキュメント化されている*変数と`Makefile.am'の
著者が利用可能なターゲットを少なくとも含めるべきで，動作はそれらに関連
していて(例えば，`-hook'が実行される場所)，`automake'と
`aclocal'のコマンドラインインターフェースがあって，...

APIには無いもの
===============

ドキュメント化されていない変数，ターゲット，またはコマンドラインオプショ
ンは全て，APIの一部ではありません．バージョンが変われば(バグの修正に役
立つ場合は，バグの修正版でも) 変更されるかもしれないので，それらを使用
することは避けるべきです．

そのようなドキュメント化されていない機能を使用する必要があると判明した
場合，<automake@gnu.org>でコンタクトを取り，ドキュメントを書き
テストスイートで試してみてください．


File: automake-ja.info,  Node: Upgrading,  Next: FAQ,  Prev: API versioning,  Up: Top

25 より新しいAutomakeのバージョンにパッケージを更新
***************************************************

Automakeは，パッケージの三種類のファイルを管理します．

   * `aclocal.m4'

   * `Makefile.in'

   * `install-sh'や`py-compile'のような追加ツール

   `aclocal.m4'は`aclocal'で生成され，それにはAutomakeが提供
するM4マクロが含まれています．補助的なツールは，必要なときは `automake
--add-missing'でインストールされます．
`Makefile.in'は，`automake'と，`aclocal.m4'に書かれ
ているM4マクロの定義，そして，インストールされた追加ツールの動作によっ
て，`Makefile.am'からビルドされます．

これらすべてのファイルは，密接に関わっているので，新しいAutomakeのリリー
スに更新したとき，それらすべてを再生成することが重要になります．通常は
以下のようにします．

     aclocal # with any option needed (such a -I m4)
     autoconf
     automake --add-missing --force-missing

さらに便利な以下もあります．

     autoreconf -vfi

   `--force-missing'を使用することで，追加ツールは確実に新しいバージョ
ンに上書きされます(*note Invoking Automake::)．

Automakeが更新されるたびに，バグフィックスのリリースであっても，これら
のファイルすべてを再生成することが重要です．例えば，バグフィクスで，
`Makefile.in'で生成されるルールと`aclocal.m4'にコピーされる
M4マクロのサポートの両方が必要になることもよくあることです．

   間もなく，`aclocal.m4'が別のバージョンの`aclocal'で生成さ
れた状況で，`automake'が状況診断することも可能になります．しか
し，追加のスクリプトが最新かどうかは決して調査しません．言い替えると，
`automake'は`aclocal'の再実行が必要だということを伝え
ますが，`--force-missing'が足りないことを決して診断しないというこ
とです．

   新たなメジャーリリースに更新する前に，`NEWS'ファイルを読むのは良
い考えです．このファイルには，リリース間のすべての変更点がリストアップ
されています．それらは，新しい機能，時代遅れの構成物，既知の非互換性，
そしてその回避方法です．


File: automake-ja.info,  Node: FAQ,  Next: Copying This Manual,  Prev: Upgrading,  Up: Top

26 Automakeに関するよくある質問と答え
*************************************

この章では，メーリングリストによく上がる質問をカバーします．

* Menu:

* CVS::                         CVS and generated files
* maintainer-mode::             missing and AM_MAINTAINER_MODE
* wildcards::                   Why doesn't Automake support wildcards?
* distcleancheck::              Files left in build directory after distclean
* renamed objects::             Why are object files sometimes renamed?
* Multiple Outputs::            Writing rules for tools with many output files


File: automake-ja.info,  Node: CVS,  Next: maintainer-mode,  Up: FAQ

26.1 CVSと生成されるファイル
============================

26.1.1 背景：生成されるファイルの配布
-------------------------------------

AutoconfとAutomakeを用いて作成したパッケージは，`configure'や
`Makefile.in'といった生成されるファイルとともに配布されます．これ
らのファイルは開発者のホストで生成され，それらをビルドするためにエンド
ユーザが管理用のツールをインストールする必要が無いように配布されます．
Lexスキャナー，Yaccパーサ，またInfoドキュメントのような，それ以外に生
成されるファイルは，同じ理由で通常配布されます．

   例えば，`configure.ac'が変更されたときは`configure'をリビル
ドするために`autoconf'を実行します．`configure'が対応する
`configure.ac'より古くないように，開発者が確実に行なえます．

   パッケージで配布されている，生成されたファイルは最新で，`tar'
でタイムスタンプを保存しているので，これらのリビルドのルールはユーザが
パッケージを展開しビルドするときも開始されません．

26.1.2 背景：CVSとタイムスタンプ
--------------------------------

CVSキーワードを使用していない限り(この状況ではコミット時にファイルを更
新する必要があります)，`cvs commit'と`cvs import -d'の処理中
にCVSが保持しているタイムスタンプは保持されます．

   `cvs checkout'を使用してファイルをチェックアウトしたとき，そのタ
イムスタンプは，チェックアウトしたリビジョンで設定されたタイムスタンプ
になります．

   しかし，`cvs update'したとき，ファイルの日付が更新されますが，
オリジナルのタイムスタンプはこのリビジョンになります．これは，
`make'でソースファイルが更新されたことに確実に気付くことを意味 します．

   このタイムスタンプの変更は，ソースと生成されたファイルの両方をCVSに保
持しているときは面倒です．CVSはアルファベット順にファイルを処理するの
で，`cvs update'で両方のファイルを更新した後は，チェックイン時
に`configure.ac'より`configure'のほうが新しい場合でも，
`configure'より`configure.ac'が古いものとして表されます．
`make'を呼び出すと，間違って`configure'のリビルドが開始され ます．

26.1.3 Autoconfを利用したプロジェクトにおけるCVSとの共存
--------------------------------------------------------

基本的に二種類の管理者がいます．生成されるファイルを含め，すべての配布
されるファイルをCVSの元に保持している人，そして，生成されたファイルを
CVSの_外部に_保持している人です．

すべてのファイルをCVSに入れる
.............................

   *
     CVSリポジトリはすべての配布されるファイルを含んでいるので，配布される
     ものが何かを正確に知っていて，前のバージョン全体をチェックアウトするこ
     とも可能です．

   *
     管理者は，生成されるファイルを展開する方法を知ることが可能です(例えば，
     Automakeを更新したとき，`Makefile.in'で生じたことを知り，大丈夫で
     あることを確認することが可能です)．

   *
     チェックアウトしたプロジェクトをビルドするために，ユーザはautotoolが不
     要で，リリースされたtarballと同様に動作します．

   * ユーザが，新しいものを取得するために`cvs checkout'する代わりに，
     コピーを更新するために`cvs update'を使用する場合，タイムスタン
     プは不正確になります．`autoconf'や`automake'のような管
     理者用のツールを，実行を開始したり試みたりするリビルドルールもあります．

     実際，そのようなツールの呼び出しは，後で議論する`missing'スク
     リプトで呼び出しにすべてラップされています(*note
     maintainer-mode::)．
     `missing'は，これらのツールがインストールされていないとき，ビ
     ルドが続けられるように，タイムスタンプを修正します．

   *
     配布されている開発物では，開発者はバージョンが異なる管理ツールをインス
     トールしていることもよくあります．この状況では，失われたタイムスタンプ
     によるリビルドの開始が，生成されるファイルを間違って変更します．この問
     題の解決方法はいくつかあります．

        *
          リビルドされるファイルがCVSのファイルと同じになるように，すべての開発
          者が同じバージョンを使用する．(作業しているプロジェクトが異なるバージョ
          ンを使用しているとき，こうすることは難しくなります．)

        *
          または，チェックアウト後にタイムスタンプを修正するスクリプトを使用する
          (GCCの人々は，そのようなスクリプトを所有しています)．

        *
          または，これらのリビルドルールすべてをデフォルトで利用不可能にするよう
          に，`configure.ac'で`AM_MAINTAINER_MODE'を使用します．これは，
          *Note maintainer-mode::で更に議論していきます．

   *
     我々は間違ったリビルドに注目していますが，反対のことも生じます．CVSの
     タイムスタンプの処理で，古いと思われるファイルが最新のものになってしま
     うこともあるはずです．

     例えば，開発者が編集された`Makefile.am'とリビルドされた
     `Makefile.in'を所有していて，両方のファイルを調査する直前に
     `Makefile.am'の変更を決定したと仮定します(変更に対応する
     `Makefile.in'をリビルドする前です)．

     この最後の`Makefile.am'の変更で，`Makefile.in'のコピーは古い
     ものになっています．CVSはファイルをアルファベット順に処理するので，他
     の開発者がツリー上で`cvs update'するとき，`Makefile.in'が
     `Makefile.am'より新しくなってしまいます．この開発者は，
     `Makefile.in'が古いことが分からないでしょう．


生成されるファイルをCVSに入れない
.................................

CVSと`make'を平和に動作させる一つの方法は，生成されるファイルを
CVSに保存しないことで，すなわち，`Makefile'のターゲット(_派
生_ファイルとも呼ばれます)をCVSの制御下におかないことです．

この方法では，開発者は生成されるファイルの変更で悩むことはありません．
全員が異なるバージョンを所有している場合は問題になります(もちろん互換
性があると仮定してもです)．結局，タイムスタンプは失われ，ソースファイ
ルへの変更は，これまでに議論してきた
`Makefile.am'/`Makefile.in'の例のように失われてしまうはずで す．

欠点は，配布されるものの正確なコピーがCVSリポジトリに無いことと，チェッ
クアウトしたものをビルド可能にする前に，様々な開発ツール(バージョンが
指定されるかもしれません)をユーザがインストールする必要があるというこ
とです．しかし，結局は，CVSの仕事はバージョン管理であり，配布ではあり
ません．

開発者が異なるバージョンのツールの使用を可能にすると，配布された開発物
のバグを隠すことにもなります．事実，開発者は，実際のリリースで生成され
るファイルの代わりに，(テストであっても)自分が生成したファイルを使用し
ます．tarballを準備している開発者は，使用しているツールのバージョンが
間違った出力を生成するものを使用している可能性があり(例えば，移植性の
ないCファイル)，他の開発者が，独自のバージョンのこのツールを使用してい
ない場合，注意されることになるでしょう．

26.1.4 サードパーティーのファイル
---------------------------------

(タイムスタンプの問題が無いので)ここでは議論しませんが，それ以外に分類
されるファイルとして，パッケージとともに配布されるけれども，どこでも管
理されていないファイルがあります．例えば，`gettextize'と
`autopoint'(Gettext由来)や，`libtoolize'(Libtool由来)
のようなツールは，パッケージにファイルをインストールしたり更新したりし
ます．

   これらのファイルは，CVSに保持しようが保持しまいが，開発者のツール間の
バージョンの違いについて，似たようなことが生じます．Gettextのマニュア
ルにはこれに関するセクションがあります．*Note CVS Issues: (gettext)CVS
Issues.を参照して下さい．


File: automake-ja.info,  Node: maintainer-mode,  Next: wildcards,  Prev: CVS,  Up: FAQ

26.2 `missing'と`AM_MAINTAINER_MODE'
====================================

26.2.1 `missing'
----------------

`missing'スクリプトは，いくつかの管理用ツールのラッパーで，要
求される管理用ツールを持っていないユーザのために設計されています．通常，
管理用ツールとは，`autoconf'，`automake'，
`bison'等です．これらのツールで生成されるファイルは，パッケー
ジのその他のファイルとともに配布されるので，ユーザがビルドしたり，それ
らがconfigureで調査されている間は，これらのツールは要求されません．

しかし，理由があってリビルドのルールが開始され，足りないツールが呼び出
される場合，`missing'はユーザに警告します．ツールが無いとき，
警告はされますが，ビルドの継続を可能にする方向で，`missing'は
タイムスタンプを修正を試みます．例えば，`autoconf'がインストー
ルされていない場合，`missing'は`configure'を
`touch'します．配布されるすべてのファイルがCVSに保持されている
場合，`missing'のこの機能で，ユーザは_管理用ツールが無く ても，_`cvs
update'で暗黙に指定されたタイムスタンプを回避して，
CVSからのパッケージをビルドすることが可能になります．

   要求されるツールがインストールされている場合，`missing'はそれ
を実行し，異常終了した後は継続しようとしません．これは開発時には正しい
もので，開発者は異常終了を修正したいものです．しかし，管理用ツールの違
うバージョンを持っているユーザは，リビルドルールが間違って開始されると
き，ビルドが終了しエラーになるかもしれません．ビルドの継続による異常終
了は，`AM_MAINTAINER_MODE'で主張している論点の一つです．

26.2.2 `AM_MAINTAINER_MODE'
---------------------------

`AM_MAINTAINER_MODE'は，"リビルドのルール"の呼び出しをデフォルト
で利用不可能にします．`configure.ac'に`AM_MAINTAINER_MODE'が
あって，`./configure && make'を実行する場合，`make'は
`configure'，`Makefile.in'，LexやYaccの出力などのリビルドを*
決して*試みません．すなわち，一般的に配布されるが，通常ユーザが更新す
る必要が無いファイルに対するビルドルールを利用不可能にします．

   `./configure --enable-maintainer-mode'を実行する場合，これらのリ
ビルドルールが利用されるようになります．

   ユーザ(や自分自身が)が失われたタイムスタンプ(*note CVS::)でうんざりし
たくないからとか，単純に，リビルドルールを使わないようにして管理用ツー
ルを明示的に実行したいから，といった理由で`AM_MAINTAINER_MODE'を
使用します．

   `AM_MAINTAINER_MODE'では，条件的なカスタムビルドのルールも利用不
可能にすることが可能になります．ユーザが利用不可能なおそれのある外部ツー
ルのルールを利用不可能にするため，この機能を使用する管理者もいます．

   数年前，Franc,ois Pinardは`AM_MAINTAINER_MODE'にいくつかの引数
を付けるよう指示しました．それらのほとんどは不安定になり得ます．依存性
を削除することで，非依存のビルドにすることができます．ソースファイルを
変更することで，生成されるファイルに影響がなくなり，このことで，注意さ
れないときでも非常に混乱するはずです．彼は，安定は管理者に限定すべきで
はなく(`--enable-maintainer-mode'で提案されたもの)，反対だと付け
加えました．ユーザが`Makefile.am'を編集すると，`Makefile.in'
を更新する，または警告を出力すべきですが(これがAutomakeで
`missing'を使用する理由です)，最終的に望むことは，何も起こらず，
ユーザは注意もされないことです(これは，`AM_MAINTAINER_MODE'でリビ
ルドのルールを利用不可能にすることです)．

   `AM_MAINTAINER_MODE'マクロを開発したJim Meyeringは，Franc,ois
との議論に動揺し，パッケージから`AM_MAINTAINER_MODE'を取り除きま した．

すべてのファイルをCVSに保持しているプロジェクトで作業する手助けとなり，
違うバージョンのツールを所有している場合は`missing'が十分では
ないので，今でも，`AM_MAINTAINER_MODE'を使用し続けている人はたく
さんいます．


File: automake-ja.info,  Node: wildcards,  Next: distcleancheck,  Prev: maintainer-mode,  Up: FAQ

26.3 なぜAutomakeはワイルドカードをサポートしないのですか？
===========================================================

開発者は怠けものです．ファイルの追加，削除，または名前の変更のたびに，
`Makefile.am'の更新を忘れないようにする必要がないよう，
`Makefile.am'でワイルドカードを使用したいときもよくあります．

   これにはいくつかの欠点があります．
   * CVS(やそれに似たもの)を使用している管理者は，`cvs add'や`cvs
     rm'を実行する必要があることを，とにかく覚えておく必要があります．とい
     うわけで，`Makefile.am'も反射的にすぐ行なうようになります．

     逆に，アプリケーションが完全ではない場合，`Makefile.am'にファイル
     を追加する必要があるので，それを`cvs add'することを覚えておく手助
     けになります．

   *
     ワイルドカードを使用することで，間違ってファイルを配布しやすくなります．
     例えば，開発者が(いわゆるテストケースで)調査するためのコードで，それは
     配布物の一部にすべきではありません．

   *
     ワイルドカードを使用すると，間違ってファイルを削除しやすくなります．例
     えば，ある開発者が新しいファイルを作成し，それをたくさんの場所で使用し
     ているが，これをコミットするのを忘れているとします．他の開発者は，不完
     全なプロジェクトをチェックアウトしても，ファイルが足りなくても，問題無
     く`make dist'を実行することが可能です．

   * ファイルをリストアップすると，配布するものを_正確に_制御できます．
     配布されるべきファイルがツリーに無い場合，`make dist'で文句を言わ
     れます．さらに，リストアップしている以上のファイルを配布することもあり
     ません．

   * おしまいに，ファイルを`Makefile.am'に追加し忘れることは滅多に無く，
     それは，追加していない場合，コンパイルもインストールもされず，テストす
     らできないでしょう．

それらすべてを却下するほとワイルドカードに十分な価値があるという反対意
見があるかもしれませんが，まだ哲学的な欠点もあります．Automakeにワイル
ドカードを伝えるためのパッチを書き始める前に，主な技術的な問題を見てい
きましょう．それは移植性です．

   `$(wildcard ...)'はGNU `make'で動作しますが，他の
`make'の実装では移植性がありません．

   Automakeで`$(wildcard ...)'をサポートする唯一の方法は，
`automake'の実行時に`$(wildcard ...)'を展開することで
す．結果として得られる`Makefile.in'には，`$(wildcard ...)'が
使用されておらず，すべてのファイルをリストアップしているので移植性があ
ります．しかしそれは，ファイルを追加，削除，または名前の変更をするたび
に，開発者が`automake'を実行する必要があるということを意味します．

   `Makefile.am'を編集するより，実際は若干勝っています．確かに， `emacs
Makefile.am; make'と入力するより`automake; make'と入
力する方が簡単で速いでしょう．しかし，この構文のサポートを追加するのに
十分なパッチを書くことを邪魔する人はいません．`Makefile.am'や個別
の`Makefile'の断片にファイルリストを生成するスクリプトを使う人も
います．

   移植性に気を付けていなくても，GNU
Makeだけをターゲットにしていて，なん とかして`$(wildcard
...)'を使用したい場合でも，処理されるファイル
をAutomakeが正確に知っている必要がある場所がたくさんあることを知ってお
くべきです．Automakeは`$(wildcard ...)'を展開する方法を知らないの
で，これらの場所で使用することは不可能です．`$(wildcard ...)'は，
Automakeが尊重する`AC_SUBST'されている変数と比べてブラックボック
スになります．

   `-Wportability'フラグを使用すると，`$(wildcard ...)'の構成物
は警告されるはずです．


File: automake-ja.info,  Node: distcleancheck,  Next: renamed objects,  Prev: wildcards,  Up: FAQ

26.4 distclean後にビルドディレクトリに残っているファイル
========================================================

これは(Files left in build directory after distclean)，`make
distcheck'時に遭遇する可能性がある診断結果です．

   *Note Dist::で説明したように，`make distcheck'では，このようなエラー
に対し，パッケージのビルドと調査を試みます．

   `make distcheck'は，パッケージの`VPATH'のビルドを実行し， `make
distclean'を呼び出します．`make distclean'が実行された
後で，ビルドディレクトリに残っているファイルは，このエラーの後でリスト
アップされます．

   この診断結果は，実際には二種類のエラーをカバーしています．

   * distcleanで忘れられているファイル．

   * 間違ってリビルドされる配布ファイル．

   残っている前者のファイルは配布されないので，クリーンするよう (*note
Clean::)印が付いているものを修正します．これは明白で，文句を言
われても仕方がありません．

後者のバグは，理解し修正するのが常に容易だというわけではないので，例を
用いて説明します．パッケージに`help2man'を使用してmanページを
ビルドしたいプログラムが含まれていると仮定します．GNU
`help2man'は，コマンドの`--help'と`--version'の出力
から簡単なマニュアルページを生成します(*note Overview:
(help2man)Top.)．`help2man'のインストールをユー
ザに強制したくないので，以下のような設定を使用して生成されたmanページ
を配布するように決めました．

     # This Makefile.am is bogus.
     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     dist_man_MANS = foo.1

     foo.1: foo$(EXEEXT)
     	help2man --output=foo.1 ./foo$(EXEEXT)

   これで，manページを効果的に配布します．しかし，`make distcheck'は
以下のように異常終了するでしょう．

     ERROR: files left in build directory after distclean:
     ./foo.1

   なぜ`foo.1'がリビルドされたのでしょうか？その理由は，配布はされな
いものの，`foo.1'は配布されないファイル`foo$(EXEEXT)'に依存
しているためです．`foo$(EXEEXT)'はユーザがビルドするので，それは
配布されている`foo.1'より常に新しいものになります．

   `make distcheck'はパッケージ内の矛盾をとらえます．ユーザが
`help2man'をインストールする必要が無いように，`foo.1'を配
布するのが目的でしたが，このルールで今ではファイルが常にリビルドされ，
ユーザは_どうしても_`help2man'が必要になります．
`foo.1'がユーザにリビルドされないことを確実にする，または
`foo.1'の配布を諦めるかのいずれかにすべきです．

より一般的には，配布されるファイルのルールには，配布されないビルドされ
るファイルに決して依存しないようにすべきです．生成されたものを配布する
場合，そのソースを配布してください．

   上記の例を修正する一つの方法として，配布される`foo.1'が
`foo$(EXEEXT)'に依存しないようにします．例えば，`foo --version'と`foo
--help'が，`foo.c'や`configure.ac'
が変更されない限り変更されない状況では，以下のような`Makefile.am'
を書くことが可能です．

     bin_PROGRAMS = foo
     foo_SOURCES = foo.c
     dist_man_MANS = foo.1

     foo.1: foo.c $(top_srcdir)/configure.ac
             $(MAKE) $(AM_MAKEFLAGS) foo$(EXEEXT)
     	help2man --output=foo.1 ./foo$(EXEEXT)

   この方法では，`foo.1'は`foo$(EXEEXT)'が変更されるたびにリビ
ルドされません．`make'は`help2man'の前に
`foo$(EXEEXT)'を確実に更新します．これを確実にするもう一つの方法
は，バイナリとmanページに対して別のディレクトリを使用し，
`SUBDIRS'をmanページがビルドされる前にバイナリがビルドされるよう
に設定することです．

   `foo.1'を配布しないように決定することも可能です．この状況では，
`foo.1'が`foo$(EXEEXT)'に依存するようにすると両方ともリビル
ドされるので優れています．しかし，`foo.1'のビルドで
`foo$(EXEEXT)'を_実行_するので，クロスコンパイルでパッケージ
をリビルドすることは不可能です．

そのようなエラーがあるもう一つの状況は，配布されるファイルがパッケージ
でビルドされるツールを用いてビルドされるときです．パターンは似ています．

     distributed-file: built-tools distributed-sources
             build-command

以下のように変更すべきです．

     distributed-file: distributed-sources
             $(MAKE) $(AM_MAKEFLAGS) built-tools
             build-command

または，クロスコンパイルで問題になる場合は`distributed-file'を配
布しないように選択することも可能です．

   これらの例に意味がある状況をまとめます．

   *
     配布されるファイルは，配布されないがビルドはされるファイルに決して依存
     すべきではない．

   * 配布されるファイルは，その依存性で配布されるべきである．

   * ファイルがユーザにリビルドされるよう_意図される_場合，それを配布
     する場所はない．

   絶望的な状況では，*Note Dist::で説明したように，
`distcleancheck_listfiles'を設定することで，この調査を利用不可能
にすることが可能です．こうする前に，`make distcheck'が文句を言う
理由を必ず理解して下さい．`distcleancheck_listfiles'は_エラー_
を隠す方法で，それを修正するものではありません．良いようにして下さい．


File: automake-ja.info,  Node: renamed objects,  Next: Multiple Outputs,  Prev: distcleancheck,  Up: FAQ

26.5 なぜオブジェクトファイルの名前を変更することがあるのですか？
=================================================================

これは，ターゲットごとにコンパイルフラグが使用されているとき発生します．
オブジェクトファイルは，同じソースから異なるフラグを用いてコンパイルさ
れるオブジェクトが互いに壊されないように，名前を変更する必要があります．
以下の例を考えて下さい．

     bin_PROGRAMS = true false
     true_SOURCES = generic.c
     true_CPPFLAGS = -DEXIT_CODE=0
     false_SOURCES = generic.c
     false_CPPFLAGS = -DEXIT_CODE=1
二つのプログラムが同じソースからコンパイルされ，同じオブジェクトが共有
される場合は問題になるのは明らかで，それは，`generic.o'は
`-DEXIT_CODE=0'_と_`-DEXIT_CODE=1'の両方を用いてコンパ
イルすることが不可能だからです．このため，`automake'は二つの異
なるオブジェクト，`true-generic.o'と`false-generic.o'をビル
ドするルールを出力します．

   `automake'は，オブジェクトファイルの名前を変更する必要があるか
どうかを決定するため，実際にはソースファイルが共有されているかどうかを
見ていません．ターゲットごとのコンパイルフラグを使用していることが判明
したときに，すべてのターゲットのオブジェクトの名前を変更するだけです．

ターゲットごとのコンパイルフラグが使用されていないときは，オブジェクト
ファイルを共有しても問題ありません．例えば以下の例のように，
`true'と`false'が両方とも`version.o'を使用しているとき です．

     AM_CPPFLAGS = -DVERSION=1.0
     bin_PROGRAMS = true false
     true_SOURCES = true.c version.c
     false_SOURCES = false.c version.c

   オブジェクトファイルの名前の変更は，`_SHORTNAME'変数にも影響され
ることに注意して下さい(*note Program and Library Variables::)．


File: automake-ja.info,  Node: Multiple Outputs,  Prev: renamed objects,  Up: FAQ

26.6 多くの出力を生成するツールを処理する
=========================================

このセクションでは，複数の出力ファイルを生成するときに使用可能な
`make'の特色を記述します．それはAutomake特有のものではありませ
んが，通常の`Makefile'で使用することが可能です．

   一つの`data.foo'というファイルを読み込み，二つの`data.c'と
`data.h'という名前のファイルを生成する，`foo'というプログ
ラムを想定します．我々は，以下の一つのものから二つのものへの依存をとら
える`Makefile'ルールを書こうとしています．

   そのままのルールは間違っています．

     # This is incorrect.
     data.c data.h: data.foo
             foo data.foo

上記のルールが実際に伝えているのは，`data.c'と`data.h'がそれ
ぞれ`data.foo'に依存していて，それぞれが`foo data.foo'の実行
でビルド可能であるということです．言い替えると，以下と等価です．

     # We do not want this.
     data.c: data.foo
             foo data.foo
     data.h: data.foo
             foo data.foo

これは，`foo'を二回実行するはずだということを意味します．
`make'の実装では，最初の一つがビルドされた後に二番目のファイル
の存在を調査するよう十分に賢いものなので，普通は二回実行されないでしょ
う．すなわち，すでに存在していることがわかっています．しかし，場合によっ
ては二回実行される可能性もあります．

   * 最も厄介な状況は，並行して`make'されるときです．`data.c'
     と`data.h'が並行してビルドされる場合，二回`foo data.foo'コマ
     ンドが同時に実行されます．これは有害です．

   * もう一つの状況は，依存性(ここでは`data.foo')が偽のターゲットであ
     る(またはそれに依存する)状況です．

   並列した`make'の動作を解決し，偽の依存性は解決できない方法とし
て以下のものがあります．

     data.c data.h: data.foo
             foo data.foo
     data.h: data.c

上記のルールは以下と等価です．

     data.c: data.foo
             foo data.foo
     data.h: data.foo data.c
             foo data.foo
   これで，並列した`make'は，`data.c'と`data.h'の連続し
たビルドになり，二番目は一回目で終っているので，もはや不要であることを
検出します．

このパターンを使用することで，おそらくほとんどの状況を十分満たすでしょ
う．しかし，出力ファイルが多くなるにつれ(この手法では，すべての出力ファ
イルを依存関係の完全な順番にする必要があり)難しくなるので，我々はより
複雑な解決方法を探りました．

   もう一つの考えは，以下のように書くことです．

     # There is still a problem with this one.
     data.c: data.foo
             foo data.foo
     data.h: data.c

この考えは，`foo data.foo'は`data.c'を更新する必要があるとき
だけ実行されますが，我々は，`data.h'が`data.c'に依存するとい
う一歩先の立場にいることになります．つまり，`data.h'が必要になり，
`data.foo'が古い場合，`data.c'の依存性によってビルドが開始さ
れるでしょう．

   これでほとんど完璧ですが，我々は，`data.h'と`data.c'をビルド
しておき，その後で`data.h'を削除することを提案します．そうするこ
とで，`make data.h'のとき`data.h'はリビルドされません．上記
のルールでは，`data.foo'に対応して`data.c'は更新する必要があ
りますが，既にそうなっています．

   我々が必要なものは，`data.h'がないときにリビルドを強制するルール
です．以下のようにします．

     data.c: data.foo
             foo data.foo
     data.h: data.c
             @if test -f $@; then :; else \
               rm -f data.c; \
               $(MAKE) $(AM_MAKEFLAGS) data.c; \
             fi

上記では，出力と入力が多くなっても簡単です．出力の一つは，コマンド実行
の証拠として提供されるために必要なものが分かり，それはすべての入力に依
存し，それ以外の出力ファイルもすべてそれに依存します．例えば，
`foo'に`data.bar'の読み込みを追加し，`data.w'と
`data.x'も出力させる場合，以下のように書くでしょう．

     data.c: data.foo data.bar
             foo data.foo data.bar
     data.h data.w data.x: data.c
             @if test -f $@; then :; else \
               rm -f data.c; \
               $(MAKE) $(AM_MAKEFLAGS) data.c; \
             fi

   この設定では，ちょっとした問題が残っています．`foo'の出力は四
つのファイルですが，これらのファイルが生成される順序が分かりません．
`data.h'が`data.c'の前に作成されると仮定します．そうなると奇
妙な状況に陥ります．次に`make'が実行されると，`data.h'は
`data.c'より古くなり，二番目のルールが開始され，シェルは
`if...fi'コマンドを実行しますが，実際には`then'の中だけが実
行され，すなわち何も起こりません．言い替えると，我々が選択した証拠は
`foo'が生成する最初のファイルではないので，`make'は実
行しても何もしないシェルを開始します．

   簡単な答えは，これが生じたときにタイムスタンプを修正することです．

     data.c: data.foo data.bar
             foo data.foo data.bar
     data.h data.w data.x: data.c
             @if test -f $@; then \
               touch $@; \
             else \
               rm -f data.c; \
               $(MAKE) $(AM_MAKEFLAGS) data.c; \
             fi

   もう一つの解決方法は，以前のものとは互換性がありませんが，
`foo'の出力するものではなく，別の専用ファイルを証拠として使用
することです．

     data.stamp: data.foo data.bar
             @rm -f data.tmp
             @touch data.tmp
             foo data.foo data.bar
             @mv -f data.tmp $@
     data.c data.h data.w data.x: data.stamp
             @if test -f $@; then \
               touch $@; \
             else \
               rm -f data.stamp; \
               $(MAKE) $(AM_MAKEFLAGS) data.stamp; \
             fi

   `foo'が実行される前に`data.tmp'が作成されるので，そのタイ
ムスタンプは`foo'が出力するファイルより古くなります．そして，
`foo'が失敗した場合は`data.stamp'を更新したくないので，
`data.stamp'を`foo'の実行後に名前を変更します．

このような専用の証拠を使用することで，出力ファイルのリストが前もって分
からないときも簡単に処理できます．例として，単一のコマンドで，たくさん
の`*.el'ファイルを`*.elc'にコンパイルする，以下のルールを考
えてください．`ELFILES'の定義方法は(それが空ではない限り)問題にな
りません(空のターゲットはPOSIXでは受け入れられません)．

     ELFILES = one.el two.el three.el ...
     ELCFILES = $(ELFILES:=c)

     elc-stamp: $(ELFILES)
             @rm -f elc-temp
             @touch elc-temp
             $(elisp_comp) $(ELFILES)
             @mv -f elc-temp $@

     $(ELCFILES): elc-stamp
             @if test -f $@; then \
               touch $@; \
             else \
               rm -f elc-stamp; \
               $(MAKE) $(AM_MAKEFLAGS) elc-stamp; \
             fi

   仕上げに，GNU `make'は，パターンルールを使用することで複数の出
力ファイルを用いたルールを表現することが可能です(*note Pattern Rule
Examples: (make)Pattern Examples.)．パター
ンルールは移植性がないので，我々はここで議論しませんが，GNU
`make'を想定したパッケージでは便利になるはずです．


File: automake-ja.info,  Node: Copying This Manual,  Next: Indices,  Prev: FAQ,  Up: Top

Appendix A このマニュアルのコピーについて
*****************************************

* Menu:

* GNU Free Documentation License::  License for copying this manual


File: automake-ja.info,  Node: GNU Free Documentation License,  Up: Copying This Manual

A.1 GNU Free Documentation License
==================================

                      Version 1.2, November 2002

     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warrany Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

A.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: automake-ja.info,  Node: Indices,  Prev: Copying This Manual,  Up: Top

Appendix B 索引
***************

* Menu:

* Macro and Variable Index::    Index of Autoconf macros and Automake variables
* General Index::               General index

