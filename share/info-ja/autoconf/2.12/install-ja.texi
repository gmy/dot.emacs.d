@c This file is included by autoconf.texi and is used to produce
@c the INSTALL file.

@ifclear autoconf

Copyright @copyright{} 1994, 1995, 1996, 1999, 2000, 2001, 2002 Free Software
Foundation, Inc.

@c This file is free documentation; the Free Software Foundation gives
@c unlimited permission to copy, distribute and modify it.
@c 
このファイルはフリーのドキュメントです．Free Software Foundationはそれを
無制限にコピーし，配布し，そして編集する許可を与えています．

@end ifclear

@node Basic Installation
@c @section Basic Installation
@section 基本的なインストール

@c These are generic installation instructions.
@c 
以下は一般的なインストールの説明書です．

@c The @command{configure} shell script attempts to guess correct values
@c for various system-dependent variables used during compilation.  It uses
@c those values to create a @file{Makefile} in each directory of the
@c package.  It may also create one or more @file{.h} files containing
@c system-dependent definitions.  Finally, it creates a shell script
@c @file{config.status} that you can run in the future to recreate the
@c current configuration, and a file @file{config.log} containing compiler
@c output (useful mainly for debugging @command{configure}).
@c 
@command{configure}シェルスクリプトは，コンパイル時に使用する様々なシ
ステム依存の変数の正しい値を推測します．パッケージのそれぞれのディレク
トリの@file{Makefile}を作成するために，これらの値が使用されます．シス
テム依存の定義を含んでいる，一つ以上の@file{.h}ファイルも作成します．
終りに，現在のコンフィグレーションを将来再生成するために実行可能なシェ
ルスクリプト@file{config.status}と，コンパイラの出力を含んでいるファイ
ル@file{config.log} (主に@command{configure}のデバッグで役立ちます)を
作成します．

@c It can also use an optional file (typically called @file{config.cache}
@c and enabled with @option{--cache-file=config.cache} or simply
@c @option{-C}) that saves the results of its tests to speed up
@c reconfiguring.  (Caching is disabled by default to prevent problems with
@c accidental use of stale cache files.)
@c 
再コンフィグレーションのスピードをあげるため，テストの結果を保存する追
加ファイルも使用することが可能です(通常，@file{config.cache}と呼ばれ，
@option{--cache-file=config.cache}や短い@option{-C}で利用可能になりま
す)．(古いキャッシュファイルを偶然使用することによる問題を避けるため，
キャッシュはデフォルトで利用不可能になっています．)

@c If you need to do unusual things to compile the package, please try to
@c figure out how @command{configure} could check whether to do them, and
@c mail diffs or instructions to the address given in the @file{README} so
@c they can be considered for the next release.  If you are using the
@c cache, and at some point @file{config.cache} contains results you don't
@c want to keep, you may remove or edit it.
@c 
パッケージをコンパイルするため，通常行なうこと以外のことをする必要があ
る場合，@command{configure}がどのように調査したのかを理解し，次のリリー
スに反映できるように，@file{README}にあるアドレスに差分や説明をメール
してください．キャッシュを使用していて，@file{config.cache}が含む結果
に保持したくないものがある場合，削除しても編集してもかまいません．

@c The file @file{configure.ac} (or @file{configure.in}) is used to create
@c @file{configure} by a program called @code{autoconf}.  You only need
@c @file{configure.ac} if you want to change it or regenerate
@c @file{configure} using a newer version of @code{autoconf}.
@c 
ファイル@file{configure.ac} (または@file{configure.in})は，
@code{autoconf}と呼ばれるプログラムで，@file{configure}を作成するため
に使用されます．それを変更したり，新しいバージョンの@code{autoconf}で
@file{configure}を再生成したい場合だけ，@file{configure.ac}が必要です．

@noindent
@c The simplest way to compile this package is:
@c 
このパッケージをコンパイルする最も単純な方法は，以下の通りです．

@enumerate
@item
@c @code{cd} to the directory containing the package's source code and type
@c @samp{./configure} to configure the package for your system.  If you're
@c using @code{csh} on an old version of System V, you might need to type
@c @samp{sh ./configure} instead to prevent @code{csh} from trying to
@c execute @command{configure} itself.
@c 
パッケージのソースコード含んでいるディレクトリに@code{cd}して，システ
ムに対するパッケージのコンフィグレーションを行なうために
@samp{./configure}と入力してください．System Vの古いバージョンの
@code{csh}を使用している場合，@code{csh}自身から@command{configure}を
実行しないようにするため，@samp{sh ./configure}と入力する必要があるか
もしれません．

@c Running @command{configure} takes awhile.  While running, it prints some
@c messages telling which features it is checking for.
@c 
@command{configure}の実行にはしばらくかかります．実行中，調査している
特徴を伝えるメッセージを出力します．

@item
@c Type @samp{make} to compile the package.
@c 
パッケージをコンパイルするために@samp{make}と入力してください．

@item
@c Optionally, type @samp{make check} to run any self-tests that come with
@c the package.
@c 
オプションとして，パッケージ付属の自己テストを実行するため，@samp{make
check}と入力してください．

@item
@c Type @samp{make install} to install the programs and any data files and
@c documentation.
@c 
プログラムと，全てのデータファイルと，ドキュメントをインストールするた
め，@samp{make install}と入力してください．

@item
@c You can remove the program binaries and object files from the source
@c code directory by typing @samp{make clean}.  To also remove the files
@c that @command{configure} created (so you can compile the package for a
@c different kind of computer), type @samp{make distclean}.  There is also
@c a @samp{make maintainer-clean} target, but that is intended mainly for
@c the package's developers.  If you use it, you may have to get all sorts
@c of other programs in order to regenerate files that came with the
@c distribution.
@c 
@samp{make clean}と入力することで，ソースコードディレクトリからプログ
ラムのバイナリやオブジェクトファイルを削除することが可能です．(異なる
種類のコンピュータに対するパッケージをコンパイルすることが可能になるよ
うに)@command{configure}が作成したファイルも削除するためには，
@samp{make distclean}と入力してください．@samp{make maintainer-clean} 
ターゲットもありますが，主にパッケージ開発者用です．それを使用する場合，
配布物の付属ファイルを再生成するため，いろいろな種類の他のプログラムを
入手する必要があるかもしれません．
@end enumerate

@node Compilers and Options
@c @section Compilers and Options
@section コンパイラとオプション

@c Some systems require unusual options for compilation or linking that the
@c @command{configure} script does not know about.  Run @samp{./configure
@c --help} for details on some of the pertinent environment variables.
@c 
@command{configure}スクリプトが知らない，通常は使用しないコンパイルや
リンクのオプションが必要なシステムもあります．妥当な環境変数の詳細を得
るために，@samp{./configure --help}を実行してください．

@c You can give @command{configure} initial values for configuration
@c parameters by setting variables in the command line or in the environment.
@c Here is an example:
@c 
コマンドラインや環境変数で変数を設定することで，コンフィグレーションパ
ラメータの初期値を@command{configure}に与えることが可能です．例えば以
下のようにします．

@example
./configure CC=c89 CFLAGS=-O2 LIBS=-lposix
@end example

@c @xref{Defining Variables}, for more details.
@c 
詳細は，@xref{Defining Variables}.


@node Multiple Architectures
@c @section Compiling For Multiple Architectures
@section 複数のアーキテクチャに対するコンパイル

@c You can compile the package for more than one kind of computer at the
@c same time, by placing the object files for each architecture in their
@c own directory.  To do this, you must use a version of @command{make}
@c that supports the @code{VPATH} variable, such as GNU @command{make}.
@c @command{cd} to the directory where you want the object files and
@c executables to go and run the @command{configure} script.
@c @command{configure} automatically checks for the source code in the
@c directory that @command{configure} is in and in @file{..}.
@c 
それぞれのアーキテクチャに対するオブジェクトファイルをそれ自身のディレ
クトリに置くことで，同時に一種類以上のコンピュータに対するパッケージを
コンパイルすることが可能です．こうするために，GNU @command{make}の様に， 
@code{VPATH}変数をサポートする@command{make}のバージョンを使用する必要
があります．オブジェクトファイルと実行可能なファイルを配置したいディレ
クトリに @command{cd}して，@command{configure}スクリプトを実行してくだ
さい．@command{configure}は，@command{configure}があるディレクトリと
@file{..}でソースコードを自動的に調査します．

@c If you have to use a @command{make} that does not support the
@c @code{VPATH} variable, you have to compile the package for one
@c architecture at a time in the source code directory.  After you have
@c installed the package for one architecture, use @samp{make distclean}
@c before reconfiguring for another architecture.
@c 
@code{VPATH}をサポートしない@command{make}を使用する必要がある場合，ソー
スコードディレクトリで，一度に一つのアーキテクチャに対してパッケージを
コンパイルする必要があります．一つのアーキテクチャのパッケージをインス
トールした後，他のアーキテクチャに対して再コンフィグレーションするため，
@samp{make distclean}を使用してください．

@node Installation Names
@c @section Installation Names
@section インストール名

@c By default, @samp{make install} will install the package's files in
@c @file{/usr/local/bin}, @file{/usr/local/man}, etc.  You can specify an
@c installation prefix other than @file{/usr/local} by giving
@c @command{configure} the option @option{--prefix=@var{path}}.
@c 
デフォルトで，@samp{make install}はパッケージファイルを，
@file{/usr/local/bin}や@file{/usr/local/man}等にインストールします．イ
ンストール先の接頭辞は，@option{--prefix=@var{path}}オプションを 
@command{configure}に与えることで指定することが可能です．

@c You can specify separate installation prefixes for architecture-specific
@c files and architecture-independent files.  If you give
@c @command{configure} the option @option{--exec-prefix=@var{path}}, the
@c package will use @var{path} as the prefix for installing programs and
@c libraries.  Documentation and other data files will still use the
@c regular prefix.
@c 
アーキテクチャ特有のファイルと，アーキテクチャ非依存のファイルを，別々
のインストール先の接頭辞に分けて指定することが可能です．
@command{configure}に@option{--exec-prefix=@var{path}}オプションを与え
た場合，パッケージはプログラムとライブラリをインストールする接頭辞とし
て，@var{path}を使用します．ドキュメントと他のデータファイルは通常の接
頭辞を使用します．

@c In addition, if you use an unusual directory layout you can give options
@c like @option{--bindir=@var{path}} to specify different values for
@c particular kinds of files.  Run @samp{configure --help} for a list of
@c the directories you can set and what kinds of files go in them.
@c 
さらに，一般的でないディレクトリへの配置を使用する場合，特定の種類のファ
イルに対し異なる値で指定するように，@option{--bindir=@var{path}}のよう
なオプションを与えることが可能です．設定可能なディレクトリリストと，そ
こに置きたいファイルの種類のリストを見るために，@samp{configure
--help}を実行してください．

@c If the package supports it, you can cause programs to be installed with
@c an extra prefix or suffix on their names by giving @command{configure}
@c the option @option{--program-prefix=@var{PREFIX}} or
@c @option{--program-suffix=@var{SUFFIX}}.
@c 
パッケージでサポートされている場合，@command{configure}にオプションの
@option{--program-prefix=@var{PREFIX}}や
@option{--program-suffix=@var{SUFFIX}}を与えることで，プログラムの名前
に余分な接頭辞や接尾子を付けてインストールすることが可能です．

@node Optional Features
@c @section Optional Features
@section オプションの機能

@c Some packages pay attention to @option{--enable-@var{feature}} options
@c to @command{configure}, where @var{feature} indicates an optional part
@c of the package.  They may also pay attention to
@c @option{--with-@var{package}} options, where @var{package} is something
@c like @samp{gnu-as} or @samp{x} (for the X Window System).  The
@c @file{README} should mention any @option{--enable-} and @option{--with-}
@c options that the package recognizes.
@c 
@command{configure}への@option{--enable-@var{feature}}オプションに注意
を払うパッケージもあり，そこでの@var{feature}はパッケージのオプション
の部分を示しています．@option{--with-@var{package}}オプションに注意を
払うパッケージもあり，そこでの@var{package}は@samp{gnu-as}や@samp{x}(X
Window System用)のようなものになります．@file{README}でパッケージが理
解する@option{--enable-}と@option{--with-}オプションについて述べている
でしょう．

@c For packages that use the X Window System, @command{configure} can
@c usually find the X include and library files automatically, but if it
@c doesn't, you can use the @command{configure} options
@c @option{--x-includes=@var{dir}} and @option{--x-libraries=@var{dir}} to
@c specify their locations.
@c 
X Window Systemを使用しているパッケージに対して，@command{configure}は
通常，Xのインクルードファイルやリンクファイルを自動的に見つけますが，
そうでない場合は，@command{configure}オプションの
@option{--x-includes=@var{dir}}と@option{--x-libraries=@var{dir}}を，
その場所を指定するために使用することが可能です．

@node System Type
@c @section Specifying the System Type
@section システムタイプの指定

@c There may be some features @command{configure} cannot figure out
@c automatically, but needs to determine by the type of machine the package
@c will run on.  Usually, assuming the package is built to be run on the
@c @emph{same} architectures, @command{configure} can figure that out, but
@c if it prints a message saying it cannot guess the machine type, give it
@c the @option{--build=@var{type}} option.  @var{type} can either be a
@c short name for the system type, such as @samp{sun4}, or a canonical name
@c which has the form:
@c 
@command{configure}が自動的に判定できない特徴もあるかもしれませんが，
パッケージを実行するマシンのタイプで定義する必要があるものもあります．
通常，パッケージは実行されるものと@emph{同じ}アーキテクチャでビルドさ
れていると仮定され，@command{configure}はそれを判定することが可能です
が，マシンのタイプが分からない旨のメッセージを出力した場合，
@option{--build=@var{type}}オプションで与えてください．@var{type}は，
@samp{sun4}の様なシステムタイプの短い名前や，以下のような様式の標準的
な名前にすることが可能です．

@example
@var{cpu}-@var{company}-@var{system}
@end example

@noindent
@c where @var{system} can have one of these forms:
@c 
@var{system}は，以下の形式の一つが可能です．

@example
@var{os} @var{kernel}-@var{os}
@end example

@c See the file @file{config.sub} for the possible values of each field.
@c If @file{config.sub} isn't included in this package, then this package
@c doesn't need to know the machine type.
@c 
それぞれのフィールドでの可能な値は，ファイル@file{config.sub}を参照し
てください．@file{config.sub}がパッケージに含まれていない場合，パッケー
ジはマシンのタイプを知る必要がありません．

@c If you are @emph{building} compiler tools for cross-compiling, you
@c should use the @option{--target=@var{type}} option to select the type of
@c system they will produce code for.
@c 
クロスコンパイルに対するコンパイラツールを@emph{ビルドしている}場合，
コードを生成しているシステムのタイプを選択するために，
@option{--target=@var{type}}オプションを使用すべきです．

@c If you want to @emph{use} a cross compiler, that generates code for a
@c platform different from the build platform, you should specify the
@c @dfn{host} platform (i.e., that on which the generated programs will
@c eventually be run) with @option{--host=@var{type}}.
@c 
プラットフォームに対して生成しているコードが，ビルドしているプラット
フォームと異なるクロスコンパイラを@emph{使用}したい場合，@dfn{host}プ
ラットフォーム(すなわち，生成されるプログラムが実行されるプラットフォー
ム)を@option{--host=@var{type}}で指定すべきです．

@node Sharing Defaults
@c @section Sharing Defaults
@section デフォルトの共有

@c If you want to set default values for @command{configure} scripts to
@c share, you can create a site shell script called @file{config.site} that
@c gives default values for variables like @code{CC}, @code{cache_file},
@c and @code{prefix}.  @command{configure} looks for
@c @file{@var{prefix}/share/config.site} if it exists, then
@c @file{@var{prefix}/etc/config.site} if it exists.  Or, you can set the
@c @code{CONFIG_SITE} environment variable to the location of the site
@c script.  A warning: not all @command{configure} scripts look for a site
@c script.
@c 
@command{configure}スクリプトを共有するため，デフォルト値を設定したい
場合，@code{CC}，@code{cache_file}，そして@code{prefix}の様な変数のデ
フォルト値を与える，@file{config.site}と呼ばれるサイトシェルスクリプト
を作成することが可能です．@command{configure}は，存在する場合は
@file{@var{prefix}/share/config.site}を探し，その後で，存在する場合は
@file{@var{prefix}/etc/config.site}を探します．また，
@code{CONFIG_SITE}環境変数をサイトスクリプトのある場所に設定することも
可能です．警告：全ての@command{configure}スクリプトがサイトスクリプト
を探すわけではありません．

@node Defining Variables
@c @section Defining Variables
@section 変数の定義

@c Variables not defined in a site shell script can be set in the
@c environment passed to @command{configure}.  However, some packages may
@c run configure again during the build, and the customized values of these
@c variables may be lost.  In order to avoid this problem, you should set
@c them in the @command{configure} command line, using @samp{VAR=value}.
@c For example:
@c 
サイトのシェルスクリプトで定義されていない変数は，@command{configure}
に渡す環境変数で設定することが可能です．しかし，パッケージによってはビ
ルドしているときに再び@command{configure}を実行し，カスタマイズされて
いるこれらの変数の値が消えてしまう可能性があります．この問題を避けるた
め，@samp{VAR=value}を使用して，それらを@command{configure}コマンドラ
インで設定すべきです．例えば，以下のようにします．

@example
./configure CC=/usr/local2/bin/gcc
@end example

@noindent
@c will cause the specified gcc to be used as the C compiler (unless it is
@c overridden in the site shell script).
@c 
これで，(サイトシェルスクリプトで優先されない限り)Cコンパイラとして
@code{gcc}を指定します．


@node configure Invocation
@c @section @command{configure} Invocation
@section @command{configure}の呼び出し

@c @command{configure} recognizes the following options to control how it
@c operates.
@c 
@command{configure}は，処理方法を制御する以下のオプションを理解します．

@table @option
@item --help
@itemx -h
@c Print a summary of the options to @command{configure}, and exit.
@c 
@command{configure}オプションの概要を出力して終了します．

@item --version
@itemx -V
@c Print the version of Autoconf used to generate the @command{configure}
@c script, and exit.
@c 
@command{configure}スクリプトの生成に使用したAutoconfのバージョンを出
力して終了します．

@item --cache-file=@var{file}
@cindex Cache, enabling
@c Enable the cache: use and save the results of the tests in @var{file},
@c traditionally @file{config.cache}.  @var{file} defaults to
@c @file{/dev/null} to disable caching.
@c 
キャッシュを可能にします．調査の結果を，通常は@file{config.cache}とい
う@var{file}に保存し，使用します．キャッシュを利用不可能にするため，
@var{file}はデフォルトで@file{/dev/null}です．

@item --config-cache
@itemx -C
@c Alias for @option{--cache-file=config.cache}.
@c 
@option{--cache-file=config.cache}の別名です．

@item --quiet
@itemx --silent
@itemx -q
@c Do not print messages saying which checks are being made.  To suppress
@c all normal output, redirect it to @file{/dev/null} (any error messages
@c will still be shown).
@c 
調査したり作成したりしているメッセージを出力しません．通常の出力も全て
省略するためには，(エラーメッセージは表示されますが)@file{/dev/null}に
ファイルをリダイレクトしてください．

@item --srcdir=@var{dir}
@c Look for the package's source code in directory @var{dir}.  Usually
@c @command{configure} can determine that directory automatically.
@c 
ディレクトリ@var{dir}でパッケージのソースコードを探します．通常， 
@command{configure}はディレクトリを自動的に決定することが可能です．
@end table

@noindent
@c @command{configure} also accepts some other, not widely useful, options.
@c Run @samp{configure --help} for more details.
@c 
@command{configure}は，広範囲では役に立たないかもしれませんが，その他
のオプションも受け入れます．詳細を知るために@samp{configure --help}を
実行してください．
