これは autoconf-ja.info、autoconf-ja.texi より makeinfo
バージョン 4.8 によって作成されました。

   This manual is for GNU Autoconf (version 2.59, 5 November 2003), a
package for creating scripts to configure source code packages using
templates and an M4 macro package.

   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
2002, 2003 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Autoconf(ja): (autoconf-ja).         Create source code configuration scripts.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* autoscan(ja): (autoconf-ja)autoscan Invocation.
                                Semi-automatic `configure.ac' writing
* ifnames(ja): (autoconf-ja)ifnames Invocation.
                                Listing conditionals in source.
* autoconf(ja): (autoconf-ja)autoconf Invocation.
                                How to create configuration scripts
* autoreconf(ja): (autoconf-ja)autoreconf Invocation.
                                Remaking multiple `configure' scripts
* autoheader(ja): (autoconf-ja)autoheader Invocation.
                                How to create configuration templates
* autom4te(ja): (autoconf-ja)autom4te Invocation.
                                The Autoconf executables backbone
* configure(ja): (autoconf-ja)configure Invocation.
                                Configuring a package.
* autoupdate(ja): (autoconf-ja)autoupdate Invocation.
                                Automatic update of `configure.ac'
* config.status(ja): (autoconf-ja)config.status Invocation.
                                Recreating configurations.
* testsuite(ja): (autoconf-ja)testsuite Invocation.
                                Running an Autotest test suite.
END-INFO-DIR-ENTRY


File: autoconf-ja.info,  Node: Coding Style,  Prev: Obsoleting Macros,  Up: Writing Autoconf Macros

9.6 コーディングスタイル
========================

Autoconfマクロはスクリプトコーディングスタイルに従います．以下のスタイル
に従うように推奨し，特に，Autoconf自身に寄稿したり，その他の目的で，マク
ロを配布する目的がある場合はそうしてください．

   最初に必要なことは，引用符に大きく注意を払うことです．詳細は， *Note
Autoconf Language::と*Note M4 Quotation::を参照してください．

新たなインターフェースの発明は試みないでください．定義しているマクロに似
ているAutoconfマクロが存在することはよくあります．この既存のインターフェー
スに従ってみてください(引数の順序，デフォルト値，等々)．我々は，これらの
インターフェースに完全でないものがあることは，意識_しています_．そ
れにもかかわらず，無害なときは，創造性より均質性が好まれるでしょう．

   M4シンボル間とシェル変数間の両方の衝突に注意してください．

   推奨されるM4命名規則(*note Macro
Names::)に従う場合，衝突が生じることは
あまりないでしょう．それにもかかわらず，特殊な値を設定する必要があるとき，
_通常のマクロ名を使用することを避けてください_．"信じられない"名
前を使用する代わりです．例えば，バージョン2.13までは，通常のマクロ名
`AC_SUBST_SYMBOL'を設定することで既に定義されている
SYMBOLを記憶するため，マクロ`AC_SUBST'を使用していました．し
かし，`AC_SUBST_FILE'と命名されているマクロが存在するので，
`AC_SUBST(FILE)'を使用することはできませんでした！この場合，
`AC_SUBST(SYMBOL)'や`_AC_SUBST(SYMBOL)'が使用され
るべきでした(そうです，カッコは使用します)...または，より良い方法と
して，`AC_EXPAND_ONCE'のようなハイレベルのマクロを使用すべきでした．

Autoconfマクロは，ユーザ変数の名前空間に入るべきではありません．すなわち，
実際のマクロの実行結果となる変数以外の，全てシェル変数は`ac_' で始
めるべきです．さらに，小さなマクロや他のマクロに埋め込まれるようなマクロ
は，明示的な名前を使用しないように注意すべきです．

   コメントを導入するために，`dnl'を使用しないでください．書こうとして
いるコメントのほとんどは，出力されないヘッダコメント，または，
`configure'に書かれるべきコメントです．特殊なM4の構成のコメントが欲
しい場合は例外があり，その場合は`dnl'が正しいのですが，あまりないこ
とだということを覚えておいてください．

M4は，引数に前置されるスペースを無視します．呼び出されているマクロの開カッ
コに，引数が整列するように字下げするために，この特徴を使用してください．
例えば，以下の代わりを考えます．

     AC_CACHE_CHECK(for EMX OS/2 environment,
     ac_cv_emxos2,
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(, [return __EMX__;])],
     [ac_cv_emxos2=yes], [ac_cv_emxos2=no])])

以下のように書いてください．

     AC_CACHE_CHECK([for EMX OS/2 environment], [ac_cv_emxos2],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [return __EMX__;])],
                        [ac_cv_emxos2=yes],
                        [ac_cv_emxos2=no])])

または，以下のようにしてください．

     AC_CACHE_CHECK([for EMX OS/2 environment],
                    [ac_cv_emxos2],
                    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
                                                        [return __EMX__;])],
                                       [ac_cv_emxos2=yes],
                                       [ac_cv_emxos2=no])])

   `AC_RUN_IFELSE'や，クロスコンパイルで動作不可能なマクロを使用してい
るとき，悲観的な値(通常は`no')を提供してください．

構文をハイライト表示するエディタのような，補助ツールが不適切に動作するこ
とを避けるため，様々な手段を自由に使用してください．例えば以下を考えます．

     m4_bpatsubst([$1], [$"])

以下を使用してください．

     m4_bpatsubst([$1], [$""])

それは，Emacsenが最初の引用符で終りのない"文字列"を開いたままにしない
ようにするためです．同じ理由から以下のようなことは避けてください．

     test $[#] != 0

以下を使用してください．

     test $[@%:@] != 0

そうしない場合，閉カッコは`#'コメント内に隠され，Emacsenのカッコ一
致のハイライト表示を破壊します．好ましいスタイルは，M4からエスケープされ
るように注意してください．`$[1]'，`$[@]'，等です．不必要なと
きにエスケープしないようにしてください．意味のない引用符の一般的な例は，
`[$]$1'(`$$1'と書いてください)，`[$]var'(`$var'を使
用してください)，等です．移植性の問題をこの状態に加える場合，
`"[$]@"'より`${1+"$[@]"}'にした方が良く，Autoconfをハッキ
ングするより何か他のことをした方が良いでしょう`:-)'．

   `sed'を使用しているとき，字下げの目的以外で`-e'を使用しな
いでください．`s'コマンドを用いた場合，`/'自身がコマンドで使用
されない限り，優先されるセパレータは`/'にし，コマンドで使用される場
合は`,'を使用すべきです．

   マクロ定義の方法の詳細は，*Note Macro Definitions::.  マクロで
`AC_REQUIRE'を使用しておらず，`AC_REQUIRE'ディレクティブのオブ
ジェクトがないことを期待する場合，`m4_define'を使用してください．疑
わしい場合は，`AC_DEFUN'を使用してください．全ての`AC_REQUIRE'
文は，`dnl'されているマクロの最初に書くべきです．

引数の数に依存すべきではありません．引数が足りないことを調査する代わりに，
空でないことをテストしてください．より簡単でより予測可能なインターフェー
スをユーザに提供し，余分な引数に対する余地を節約してください．

   マクロが短くない場合は，行の最初に`])'を残し，定義されているマクロ
の名前を繰り返すコメントを続けてください．これは，`configure'に
余分な改行を導入します．通常は問題ありませんが，削除したい場合は，行の最
後に`[]dnl'を使用することが可能です．同様に，マクロ呼び出しの後に，
改行を削除するため，`[]dnl'を使用することも可能です．M4が`dnl'
をテキストやマクロ出力の前に付けられているものとして解釈しないことを確実
にするため，`[]dnl'は`dnl'の代わりとして推奨されています．例え
ば以下の代わりを考えます．

     AC_DEFUN([AC_PATH_X],
     [AC_MSG_CHECKING([for X])
     AC_REQUIRE_CPP()
     # ...omitted...
       AC_MSG_RESULT([libraries $x_libraries, headers $x_includes])
     fi])

以下のように書くべきです．

     AC_DEFUN([AC_PATH_X],
     [AC_REQUIRE_CPP()[]dnl
     AC_MSG_CHECKING([for X])
     # ...omitted...
       AC_MSG_RESULT([libraries $x_libraries, headers $x_includes])
     fi[]dnl
     ])# AC_PATH_X

マクロが長い場合，論理的な塊に分けてみてください．通常マクロは，関数のバ
グを調査し，このセットアップを実行するための補助マクロがある
`AC_LIBOBJ'の置換を準備します．コードの要素に補助マクロを導入するこ
とをためらわないでください．

推奨されるコーディングスタイルを強調するために，古い手法で書かれているマ
クロを紹介します．

     dnl Check for EMX on OS/2.
     dnl _AC_EMXOS2
     AC_DEFUN(_AC_EMXOS2,
     [AC_CACHE_CHECK(for EMX OS/2 environment, ac_cv_emxos2,
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(, return __EMX__;)],
     ac_cv_emxos2=yes, ac_cv_emxos2=no)])
     test "$ac_cv_emxos2" = yes && EMXOS2=yes])

新しい方法は以下のようにします．

     # _AC_EMXOS2
     # ----------
     # Check for EMX on OS/2.
     m4_define([_AC_EMXOS2],
     [AC_CACHE_CHECK([for EMX OS/2 environment], [ac_cv_emxos2],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [return __EMX__;])],
                        [ac_cv_emxos2=yes],
                        [ac_cv_emxos2=no])])
     test "$ac_cv_emxos2" = yes && EMXOS2=yes[]dnl
     ])# _AC_EMXOS2


File: autoconf-ja.info,  Node: Portable Shell,  Next: Manual Configuration,  Prev: Writing Autoconf Macros,  Up: Top

10 移植性のあるシェルプログラミング
***********************************

独自の調査を書いているとき，コードを移植性の高いものにするため，使用を避
けるべきシェルスクリプトプログラムのテクニックもあります．Bourneシェルと，
BashとKornシェルのような上位互換性があるシェルは，何年もかけて進展しまし
たが，問題を避けるために，UNIXバージョン7の以降の1977年頃に加えられ
た機能を利用しないでください(*note Systemology::)．

シェル関数，エイリアス，無効な文字クラスや，Bourneシェル互換のものでは見
つからないすべての機能を使用するべきではありません．最小公倍数に制限され
てます．`unset'さえ，全てのシェルではサポートしていません！また，以
下のように，インタプリタ仕様として，感嘆符の後にスペースを含めてください．

     #! /usr/bin/perl

パスの前のスペースを省略する場合，(DYNIXのような)4.2BSDを基本
とするシステムは，`#! /'は4バイトのマジックナンバーとして解釈される
ので，その行を無視します．古いシステムでは，`#!'行の長さにも小さな
制限があり，例えばSunOS 4では，(改行を含めず)32バイトになります．

   `configure'スクリプトで実行すべき外部プログラムの設定は，かなり
小さくなっています．リストは，*Note Utilities in Makefiles:
(standards)Utilities in Makefiles.  この制限で，
ユーザは，かなり小さいプログラム設定から残りをビルドすることが可能になっ
ていて，パッケージ間の独立部分を多くし過ぎることを避けることができます．

これらの外部ユーティリティには，移植性の高い機能のサブセットがあります．
*Note Limitations of Usual Tools::を参照してください．

   シェルに関するドキュメントのソースは他にもあります．例えば， the
Shell FAQs(1)を参照し てください．

* Menu:

* Shellology::                  A zoology of shells
* Here-Documents::              Quirks and tricks
* File Descriptors::            FDs and redirections
* File System Conventions::     File- and pathnames
* Shell Substitutions::         Variable and command expansions
* Assignments::                 Varying side effects of assignments
* Parentheses::                 Parentheses in shell scripts
* Special Shell Variables::     Variables you should not change
* Limitations of Builtins::     Portable use of not so portable /bin/sh
* Limitations of Usual Tools::  Portable use of portable tools
* Limitations of Make::         Portable Makefiles

   ---------- Footnotes ----------

   (1) the Shell FAQs, `http://www.faqs.org/faqs/unix-faq/shell/'.


File: autoconf-ja.info,  Node: Shellology,  Next: Here-Documents,  Up: Portable Shell

10.1 シェル
===========

いくつかのシェルのファミリーがあり，最も重要なものは，Bourneファミリーと
Cシェルファミリーで，それらは全く互換性がありません．移植性の高いシェル
スクリプトを書きたい場合，Cシェルファミリーのメンバーは避けてください．
the Shell difference
FAQ(1)には，Unixシェルの小さな歴史と，それらの間の比較が
書かれています．

以下で，Bourneシェルファミリーのメンバーを，いくつか説明していきます．

Ash
     `ash'は，動作の軽いBourne互換シェルとしてGNU/Linuxと
     BSDシステムでよく使用されています．Ash 0.2には0.3.xシリーズで
     修正されているバグがいくつかありますが，バージョン0.2は多くの
     GNU/Linux 配布物で配布されているので，移植性の高いシェルスクリ
     プトではそれを回避すべきです．

     Ash 0.2での互換性のため以下のようにしてください．

        -
          空や設定されていない変数を展開した後で，`$?'を使用しないでください．

               foo=
               false
               $foo
               echo "Don't use it: $?"

        - 変数の展開でコマンドの代入を使用しないでください．

               cat ${FOO=`bar`}

        -
          単一の組み込みの代入は，その効果が現在のシェルに適用されるため，サブシェ
          ルで実行されないことに注意してください．アイテム"コマンドの代入"につい
          ては，*Note Shell Substitutions::.

Bash
     `bash'を実行しているかどうかを検出するために，
     `BASH_VERSION'が設定されているかどうかをテストしてください．その拡
     張を利用不可能にし，POSIX互換性を要求するため，`set -o posix'
     を実行してください．詳細は，*Note Bash POSIX Mode: (bash)Bash
     POSIX Mode.

Bash 2.05とそれ以降
     バージョン2.05とそれ以降の`bash'は，`set'組み込みコマン
     ドの出力に対して，その出力をより容易に評価できるように設計されているので，
     異なる書式を使用しています．しかし，この出力はそれ以前のバージョンの
     `bash'(や，おそらくそれ以外の多くのシェル)と互換性がありません．
     そのため，`bash' 2.05やそれ以上のものを`configure'の実行
     に使用している場合，それ以外のすべてのビルドの作業に対しても，同じように
     `bash' 2.05を使用する必要があるでしょう．

Ksh
     KornシェルはBourneファミリーと互換性があり，POSIXにほとんど準
     拠しています．一般的に`ksh88'と`ksh93'という二つの有名な変種が
     あり，最初のリリースの年で後から命名されました．それらは通常
     `ksh'と呼ばれていますが，Solarisシステムには三つの変種があります． `/usr/bin/ksh'は`ksh88'です． `/usr/xpg4/bin/sh'はPOSIX準拠の`ksh88'の類似物で
     す． `/usr/dt/bin/dtksh'は`ksh93'です．`/usr/bin/ksh'が
     Soralisの標準です．それ以外の類似物はオプションパッケージの一部です．こ
     れらのパッケージには追加の変更はありませんが．それらは最小限のOSのインス
     トールの一部ではないので，インストール状況によっては無いかもしれません． パブリックドメインの`pdksh'と呼ばれているKornシェルのクローンも広く
     利用可能になっています．それは，いくつか独自のものがありますが
     `ksh88'の機能のほとんどがあります．

Zsh
     `zsh'が実行されているかどうかを検出するために，
     `ZSH_VERSION'が設定されているかどうかをテストしてください．デフォル
     トで，`zsh'はBourneと互換性はあり_ません_．`emulate
     sh'を実行し，`NULLCMD'を`:'に設定する必要があります．詳細は，
     *Note Compatibility: (zsh)Compatibility.

     Zsh 3.0.8は，Mac OS X 10.0.3でのネイティブな`/bin/sh'です．

   Russ AllberyとRobert
Lipeの間でなされた，以下の議論は読む価値があります．

Russ Allbery:

     `/bin/sh'が唯一のシェルであるというGNU仮定では，永久に
     行き詰まってしまいます．ベンダーは，ユーザの既存のシェルスクリプトを壊し
     たくはありませんし，BourneシェルにはPOSIXシェルと完全に互換で
     はない部分もあります．このため，この方法を採用するベンダーは，_決し
     て_ (OK..."決して，決してとは言わないよ")Bourneシェルを
     (`/bin/sh'として)POSIXシェルで置き換えないでしょう．

Robert Lipe:

     これは本当に問題です．ほとんどのもの(少なくともほとんどのSystem
     V)はシェ
     ル関数を受け入れるBourneシェルがあるのですが，ほとんどのベンダーの
     `/bin/sh'はPOSIXシェルではありません．

     そのため，ほとんど現在のシステムはPOSIX標準に適合しているシェ
     ルが_どこかに_あるのですが，問題はそれを見つけることです．

   ---------- Footnotes ----------

   (1) the Shell difference FAQ,
`http://www.faqs.org/faqs/unix-faq/shell/shell-differences/'.


File: autoconf-ja.info,  Node: Here-Documents,  Next: File Descriptors,  Prev: Shellology,  Up: Portable Shell

10.2 ヒアドキュメント
=====================

`\'は，次のシンボルと一緒になって特別の意味を持たないので，維持され
る`\'に依存しないでください．OpenBSD 2.7のネイティブな
`/bin/sh'では，`\"'は`"'に展開され，ヒアドキュメントで
は引用符で囲まれていない分離子として用いられます．一般的な規則として，
`\\'が`\'に展開される場合，`\'を得るために`\\' を使 用してください．

   OpenBSD 2.7の`/bin/sh'では，以下のようになります．

     $ cat <<EOF
     > \" \\
     > EOF
     " \

そして，Bashでは以下のようになります．

     bash-2.04$ cat <<EOF
     > \" \\
     > EOF
     \" \

多くの古い(Bourneシェルを含む)シェルでは，ヒアドキュメントは非効率に実装
されています．大きなヒアドキュメントを間違って扱うシェルもあります．例え
ば，Solaris 8 `dtksh'は`ksh' M-12/28/93dで提供されていて，
ヒアドキュメントを1024バイトのバッファの境界で間違った変数の展開を生じま
す．ユーザは一般的に，より速くより信頼性の高いシェルを使用して，これらの
問題を修正することが可能で，例えば，そのまま`./configure'するのでは
なく，コマンド`bash ./configure'を使用します．

シェルによっては，単一の文の中にヒアドキュメントが多過ぎるとき，非常に非
効率になるものもあります．例えば，`configure.ac'に以下のようなもの
含めたとします．

     if <cross_compiling>; then
       assume this and that
     else
       check this
       check that
       check something else
       ...
       on and on forever
       ...
     fi

シェルは，その中のそれぞれのヒアドキュメントに対して一時ファイルを作成し
ながら，`if'/`fi'の文脈全体をパースします．`fork'ごとにそ
のようなヒアドキュメントに対してリンクを作成するシェルもあり，インストー
ルされた後のクリーンアップコードで正しく削除されます．それは，シェルが永
久に受け入れられるリンクを作成しているのです．

   `if'/`fi'の外部のテストを移動したり，複数の`if'/`fi'
の文脈を作成したりすることで，かなり動作が改善されるでしょう．とにかく，
こういった構成は，典型的なAutoconfの使用では正しくありません．実際，M4マ
クロは，シェルの条件文を見ることができないので，それは推奨されておらず，
条件分岐の前にそれが展開され，実行時に条件文が失敗だと分かるとき，マクロ
展開に失敗するかもしれず，マクロの実行を完全に終了できないでしょう．


File: autoconf-ja.info,  Node: File Descriptors,  Next: File System Conventions,  Prev: Here-Documents,  Up: Portable Shell

10.3 ファイルディスクリプタ
===========================

システムによっては，明らかに不可解なのですが，特殊な目的で使用しているた
め，ファイルディスクリプタには使用すべきではないものもあります．

     3 -- それを`/dev/tty'として開くシステムもあります．
     4 -- Kubota Titanで使用されています．

Ultrixでは異常終了だと告げられるので，同じファイルディスクリプタに複数回
同じファイルをリダイレクトしないでください．

     ULTRIX V4.4 (Rev. 69) System #31: Thu Aug 10 19:42:23 GMT 1995
     UWS V4.4 (Rev. 11)
     $ eval 'echo matter >fullness' >void
     illegal io
     $ eval '(echo matter >fullness)' >void
     illegal io
     $ (eval '(echo matter >fullness)') >void
     Ambiguous output redirect.

それぞれの場合で，期待される結果はもちろん，`matter'を含んでいる
`fullness'と，空の`void'です．

コマンドの代入のリダイレクトを標準エラー出力にしないでください．それは，
コマンドの代入の_内部で_行なう必要があります．エラーメッセージを削
除することを期待して`: `cd /zorglub` 2>/dev/null'を実行しているとき，
`: `cd /zorglub 2>/dev/null`'は正しく動作します．

(AshでもBashでもない)Zshが割当を可能にすることに注意する価値はあります．
`foo=`cd /zorglub` 2>/dev/null'．

ほとんどのシェルでは，(Bash，Zsh，Ashを含め)全てではありませんが，標準エ
ラー出力を，サブシェルに対しても追跡しています．内部コマンドの標準エラー
出力を得る目的がある場合，これでは結果が望まない内容になるかもしれません．

     $ ash -x -c '(eval "echo foo >&2") 2>stderr'
     $ cat stderr
     + eval echo foo >&2
     + echo foo
     foo
     $ bash -x -c '(eval "echo foo >&2") 2>stderr'
     $ cat stderr
     + eval 'echo foo >&2'
     ++ echo foo
     foo
     $ zsh -x -c '(eval "echo foo >&2") 2>stderr'
     # Traces on startup files deleted here.
     $ cat stderr
     +zsh:1> eval echo foo >&2
     +zsh:1> echo foo
     foo

様々なレベルの詳細が分かるでしょう....

一つの回避方法は，興味がない行をgrepで削除することで，良い行は削除しない
ことを期待しつつ....

   `exec >foo; mv foo bar'のように，開いているファイルの移動/削除の試
みはしないようにしてください．`mv'の詳細は，*Note Limitations of
Builtins::を参照してください．


File: autoconf-ja.info,  Node: File System Conventions,  Next: Shell Substitutions,  Prev: File Descriptors,  Up: Portable Shell

10.4 ファイルシステムの条件
===========================

`autoconf'とその仲間達は，通常様々なUnixで実行されますが，それは
その他のシステムでも使用され，最も顕著なものとしてはDOSの仲間
があげられます．このことは，ファイルとパス名に関する仮定に衝突します．

例えば，以下のようなコードを考えます．

     case $foo_dir in
       /*) # Absolute
          ;;
       *)
          foo_dir=$dots$foo_dir ;;
     esac

それらのシステムではドライブスペックを使用していて，通常はディレクトリの
分離子としてバックスラッシュを使用しているため，絶対パスを正しく検出する
ことに失敗するでしょう．絶対パスに対する調査の標準的な方法は以下のとおり
です．

     case $foo_dir in
       [\\/]* | ?:[\\/]* ) # Absolute
          ;;
       *)
          foo_dir=$dots$foo_dir ;;
     esac

適切な場合は角カッコの引用符で囲み，最初の文字としてのバックスラッシュを
保持していることを確認してください(*note Limitations of Builtins::)．

また，コロンがデバイス指定の一部として使用されているので，これらのシステ
ムではそれをパスの分離子として使用していません．パスを作成しているときや
パスにアクセスしているときは，代わりに`PATH_SEPARATOR'出力変数を使
用してください．`configure'は，開始時にこれを適切な値(`:'
または`;')に設定します．

   ファイル名にも余計な注意が必要になります．(DJGPPのような)
`autoconf'を十分に実行できるUnixのようなDOSベースの環
境では，通常長いファイル名を適切に扱うことが可能ですが，パッケージを壊し
てしまう深刻な制限も残っています．これらの問題のいくつかは， doschk(1)
パッ ケージで容易に検出することが可能です．

   以下は簡単な全体像です．問題には，適用を示すためSFN/LFNで印が
ついています．SFNは，Windows下のDOS窓ではなく，プレーンな
DOSにのみ関連する問題を意味し，一方LFNは，Windowsでも存在
する問題を意味しています．

複数のドットの禁止 (SFN)
     DOSはファイル名に複数のドットがあるものを扱うことが不可能です．
     これは，`autoconf'は`.in'をテンプレートファイルの接尾子に使
     用するので，移植性の高いconfigureスクリプトを構築しているときに覚えてお
     く必要がある，特に重要なことです．

     以下はUnix上では完全にOKです．

          AC_CONFIG_HEADERS([config.h])
          AC_CONFIG_FILES([source.c foo.bar])
          AC_OUTPUT

     しかし，それは`config.h.in'，`source.c.in'，そして
     `foo.bar.in'が必要になるので，DOSでは問題があります．パッ
     ケージをDOSベースの環境でより移植性を高くするため，その代わり
     に以下を使用すべきです．

          AC_CONFIG_HEADERS([config.h:config.hin])
          AC_CONFIG_FILES([source.c:source.cin foo.bar:foobar.in])
          AC_OUTPUT

ドットの前置の禁止 (SFN)
     DOSはドットで始まるファイル名を扱うことが不可能です．これは通
     常，`autoconf'に対してはあまり重要ではない問題です．

大文字小文字を区別しない (LFN)
     DOSは大文字小文字を区別しないので，例えば，`INSTALL'とい
     う名のファイルと`install'という名のディレクトリの両方を持つことがで
     きません．これは，`make'にも影響します．ディレクトリに
     `INSTALL'という名のファイルがある場合，`make install'は
     (`install'がPHONY として印がついていないとき)何もしません．

8+3の制限 (SFN)
     DOSファイルシステムでは，ファイル名の最初の8文字と最初の3文字
     の拡張子のみ保存され，それらはユニークである必要があります．それは，
     `foobar-part1.c'，`foobar-part2.c'，そして
     `foobar-prettybird.c'の全ては同じ名前(`FOOBAR-P.C')になります．
     `foo.bar'と`foo.bartender'も同じものになります．

     注意：これは通常，ファイル名をユニークにするために短いバージョンでは数字
     の後置を使用するので，Windowsでは問題になりません．しかし，レジストリの
     設定でこの動作を停止可能です．これで長いファイル名を含むファイルのツリー
     を，SFNとLFNの環境で共有することが可能になりますが，上記の問題
     は同様に存在します．

無効な文字
     DOSファイル名で無効な文字もあり，そのため避けた方が良いでしょ
     う．LFNの環境では，`/'，`\'，`?'，`*'，`:'，
     `<'，`>'，`|'，そして`"'です．SFN環境では，それ
     以外にも無効になります．これには，`+'，`,'，`['，そして
     `]'が含まれます．

   ---------- Footnotes ----------

   (1) doschk, `ftp://ftp.gnu.org/gnu/non-gnu/doschk/doschk-1.1.tar.gz'.


File: autoconf-ja.info,  Node: Shell Substitutions,  Next: Assignments,  Prev: File System Conventions,  Up: Portable Shell

10.5 シェルの代入
=================

persistent urban legendとは反対に，Bourneシェルは変数とバッククオートさ
れている式が整然と分かれておらず，特に右側の割り当てと`case'の引数
がそうです．例えば，以下のコードを考えます．

     case "$given_srcdir" in
     .)  top_srcdir="`echo "$dots" | sed 's,/$,,'`"
     *)  top_srcdir="$dots$given_srcdir" ;;
     esac

以下のように書くと，より読みやすくなります．

     case $given_srcdir in
     .)  top_srcdir=`echo "$dots" | sed 's,/$,,'`
     *)  top_srcdir=$dots$given_srcdir ;;
     esac

そして，実際それは_より_移植性が高くなります．最初の試みの最初の
caseで，全てのシェルが`"`..."..."...`"'を正しく解釈する
わけではないので，`top_srcdir'の計算結果は移植性が高くありません．
更に悪いことには，同様に`"`...\"...\"...`"'を全てのシェ
ルが解釈するわけではありません．二重引用符でバッククオートされている式の
内部で，二重引用符で囲まれた文字列を使用するための移植性を高める方法は全
くありません(pfew!)．

`$@'
     最も有名なシェルの移植性の問題の一つは，`"$@"'との関連です．位置に
     依存する引数が無いとき，POSIXでは`"$@"'を何もないことと
     等価になっていますが，オリジナルのUnixバージョン7のBourneシェルはその代
     わりに`""'として扱い，この動作はDigital Unix 5.0のようにそれ以降の
     実装でも提供されています．

     この移植性の問題を回避する伝統的な方法は，`${1+"$@"}'を使用する
     ことです．残念ながら，この手法はMac OS Xでも使用されている，Zsh
     (3.x と
     4.x)では動作しません．Bourneシェルをエミュレートしているとき，Zshは
     `${1+"$@"}'で単語の分離を実行します．

          zsh $ emulate sh
          zsh $ for i in "$@"; do echo $i; done
          Hello World
          !
          zsh $ for i in ${1+"$@"}; do echo $i; done
          Hello
          World
          !

     Zshは，プレーンの`"$@"'をおそらく処理しますが，上記の移植性の問題
     のため，プレーンの`"$@"'を使用することはできません．回避する方法の
     一つは，`${1+"$@"}'を`"$@"'に変換するZshの"global
     aliases"に依存します．

          test "${ZSH_VERSION+set}" = set && alias -g '${1+"$@"}'='"$@"'

     より保守的な回避方法は，位置に依存する引数を用いなくても良い限り，
     `"$@"'を避けることです．例えば，以下の代わりを考えます．

          cat conftest.c "$@"

     この代わりに以下を使用することが可能です．

          case $# in
          0) cat conftest.c;;
          *) cat conftest.c "$@";;
          esac

`${VAR:-VALUE}'
     Ultrix `sh'を含め，古いBSDシェルはシェルの代入に対してコ
     ロンを受け入れず，文句を言って終了します．

`${VAR=LITERAL}'
     引用符で囲まれていることを確かめてください．

          : ${var='Some words'}

     それ以外のDigital Unix V 5.0のようなシェルでは，"bad
     substitution"のた めに終了します．


     Solarisの`/bin/sh'にはこの解釈に恐ろしいバグがあります．変数を
     `}'を含む文字列に設定する必要があることを想像してください．この
     `}'文字で，影響ある変数が既に設定されているとき，Solarisの
     `/bin/sh'は混乱します．このバグは，以下のように実行することで作
     動されるはずです．

          $ unset foo
          $ foo=${foo='}'}
          $ echo $foo
          }
          $ foo=${foo='}'   # no error; this hints to what the bug is
          $ echo $foo
          }
          $ foo=${foo='}'}
          $ echo $foo
          }}
           ^ ugh!

     `}'は，シングル引用符で囲まれている場合でも，`${'に一致する
     ものとして解釈されているようです．二重引用符を使用すると問題は生じません．

`${VAR=EXPANDED-VALUE}'
     Ultrixで，以下を実行したとします．

          default="yu,yaa"
          : ${var="$default"}

     それはVARを`M-yM-uM-,M-yM-aM-a'に設定し，すなわち，全ての文字
     の八番目のビットがセットされるでしょう．`$var'を展開するとき，シェ
     ルが八番目のビットを明示的にリセットするので，単純に`echo $var'を使
     用している現象が分かりません．このシェルにその違反で混乱させる二つの方法
     は，以下のようになります．

          $ cat -v <<EOF
          $var
          EOF

     それと以下です．

          $ set | grep '^var=' | cat -v

     このバグの古典的で典型的なものの一つは以下のものです．

          default="a b c"
          : ${list="$default"}
          for c in $list; do
            echo $c
          done

     単一行に`a b c'を得るでしょう．なぜでしょうか？それは，`$list'
     にスペースが無いためです．`M- '，すなわち八ビット目を設定するスペー
     スがあるので，IFSによる分離が実行されないのです！！！

     良いニュースの一つは，Ultrixが`: ${list=$default}'で正確に動作す
     ることです．すなわち，引用符で囲ま_ない_場合です．悪いニュースとし
     ては，QNX 4.25は，LISTをDEFAULTの_最後の_項目 に設定することです！

     移植性の高い方法は，Ultrixで八番目のビットを二回切替えるために，二重(引
     用符による)代入を使用することです．

          list=${list="$default"}

     ...しかし，Solarisの`}'のバグ(上記を参照してください)には用心
     してください．安全にするには，以下を使用してください．

          test "${var+set}" = set || var={VALUE}

``COMMANDS`'
     一般的には意味がありませんが，Ash
     0.2では最適化のためコマンドを実行する
     ためサブシェルをforkしないので，副作用のある単一の組み込み物を代入しない
     でください．

     例えば，`cd'が何も出力しないことを調査したい場合，以下のことが生
     じるかもしれないので，`test -z "`cd /`"'を使用しないでください．

          $ pwd
          /tmp
          $ test -z "`cd /`" && pwd
          /

     `foo=`exit 1`'の結果は，読者への演習問題として残しておきます．

`$(COMMANDS)'
     この構成は，``COMMANDS`'を置換するという意味があります．それ
     らを入れ子状にすることは可能ですが，バッククオートを用いて移植することは
     不可能です．残念ながら，まだ全体的にサポートされていません．特に，現在の
     Solarisリリースでもサポートされていません．

          $ showrev -c /bin/sh | grep version
          Command version: SunOS 5.8 Generic 109324-02 February 2001
          $ echo $(echo blah)
          syntax error: `(' unexpected

     また，IRIX 6.5のBourneシェルもサポートされていません．
          $ uname -a
          IRIX firebird-image 6.5 07151432 IP22
          $ echo $(echo blah)
          $(echo blah)

     `$(COMMANDS)'を使用する場合，異なる表記方法
     `$((EXPRESSION))'は現在のシェルではコマンドではなく数式だと勘
     違いするので，コマンドがカッコで始まらないように確かめて下さい．この勘違
     いを避けるため，二つの開カッコの間にはスペースを挿入して下さい．



File: autoconf-ja.info,  Node: Assignments,  Next: Parentheses,  Prev: Shell Substitutions,  Up: Portable Shell

10.6 代入
=========

列にいくつかの変数を設定するとき，評価の順序が定義されていないことを覚え
ておいてください．例えば，`foo=1 foo=2; echo $foo'は，Solarisの
`sh'では`1'になりますが，Bashでは`2'になります．順序を強
制するために`;'を使用する必要があります．`foo=1; foo=2; echo
$foo'のようにします．

   `subdir/program'を見つけるために，以下に依存しないようにしてくださ
い．

     PATH=subdir$PATH_SEPARATOR$PATH program

これはZsh 3.0.6では動作しません．代わりに以下のようなものを使用してくだ
さい．

     (PATH=subdir$PATH_SEPARATOR$PATH; export PATH; exec program)

   代入の終了ステータスに依存しないようにしてください．Ash
0.2はステータス を変更せず，最後の文に伝搬します．

     $ false || foo=bar; echo $?
     1
     $ false || foo=`:`; echo $?
     0

そして，更に悪いことに，QNX 4.25はあらゆる場合で終了ステータス
を0に設定します．

     $ foo=`exit 1`; echo $?
     0

   デフォルト値を代入するために，以下のアルゴリズムを使用してください．

  1.
     デフォルト値がリテラルで閉じカッコを含まない場合は以下を使用してください．

          : ${var='my literal'}

  2.
     デフォルト値が閉じカッコを含まず，展開されず，初期化されている変数がIFS
     で分けられていない(すなわち，リストでない)場合，以下を使用してください．

          : ${var="$default"}

  3.
     デフォルト値が閉じカッコを含まず，展開されず，初期化されている変数がIFS
     で分けられる(すなわち，リストの)場合，以下を使用してください．

          var=${var="$default"}

  4. デフォルト値が閉じカッコを含む場合，以下を使用してください．

          test "${var+set}" = set || var='${indirection}'

   ほとんどの場合，`var=${var="$default"}'で良いのですが，駄目なとき
は後者を使用してください．正当性のための，
`${VAR:-VALUE}'と`${VAR=VALUE}' の 項目は，*Note Shell Substitutions::.


File: autoconf-ja.info,  Node: Parentheses,  Next: Special Shell Variables,  Prev: Assignments,  Up: Portable Shell

10.7 シェルスクリプト内のカッコ
===============================

一列にある二つの開カッコは，シェルの実装によっては間違って処理されること
を覚えておいて下さい．例えば，`pdksh' 5.2.14では以下のコードのパー
スを失敗します．

     if ((true) || false); then
       echo ok
     fi

この問題を回避するため，二つの開カッコの間にスペースを挿入して下さい．
`$(('に関する同様な問題と回避方法があります．*Note Shell
Substitutions::を参照して下さい．

   POSIXでは，以下のような開カッコを用いた`case'パターンのサ
ポートを要求しています．

     case $filename in
     (*.c) echo "C source code";;
     esac

しかし，この例の`('には古いBourneシェルの実装で移植性がないものもた
くさんあります．安全のため削除すべきでしょう．


File: autoconf-ja.info,  Node: Special Shell Variables,  Next: Limitations of Builtins,  Prev: Parentheses,  Up: Portable Shell

10.8 特殊なシェル変数
=====================

シェルの動作に深く影響するため，使用すべきではないシェル変数もあります．
シェルからまともな動作に戻るため，unsetすべき変数もありますが，
`unset'は移植性が無く(*note Limitations of Builtins::)，代替値が
必要になります．これらの変数を以下にリストアップします．

`CDPATH'
     この変数が設定されているとき，それは`cd'が相対的なファイル名で呼び
     出されるときに検索するディレクトリのリストを設定します．POSIX
     1003.1-2001では，`CDPATH'で空ではないディレクトリ名が正しく使用され
     ている場合，`cd'は絶対的なファイル名を結果として出力することになっ
     ています．残念ながらこの出力では，`abs'がパスを二回受けとるので，
     `abs=`cd src &&
     pwd`'のような慣用句が駄目になります．また，多くのシェ
     ルは，この部分のPOSIXに準拠していません．例えば，`zsh'
     は，`.'以外のディレクトリ名が`CDPATH'で選択されている場合以外，
     結果を出力しません．

     実際，この問題があるシェルは`unset'もサポートしているので，以下
     のようにしてその問題を回避することが可能です．

          (unset CDPATH) >/dev/null 2>&1 && unset CDPATH

     Autoconfが生成したスクリプトは自動的に`CDPATH'をunsetするので，これ
     らのスクリプトのこの問題を心配する必要はありません．

`IFS'
     `IFS'の最初の文字をバックスラッシュに設定しないでください．実際，
     `"$@"'で要素を加えるときは，Bourneシェルは最初の文字(バックスラッ
     シュ)を使用し，そして，バックスラッシュエスケープをもう一度解釈する(！)
     シェルもあり，そのため，バックスペースとその他の奇妙な文字で終ることが可
     能になっています．

     (splitを実行していないとき，標準的なコードの)`IFS'の適切な値は，
     `<SPC><TAB><RET>'です．`@*'の引数を連結するために
     使用するので，最初の文字は特に重要です．

`LANG'
`LC_ALL'
`LC_COLLATE'
`LC_CTYPE'
`LC_MESSAGES'
`LC_MONETARY'
`LC_NUMERIC'
`LC_TIME'
     あまりに多くのコンフィグレーションコードがCロケールを仮定していて，
     POSIXではCロケールが要求される場合はロケールの環境変数を
     `C'に設定する必要があるので，Autoconfが生成したスクリプトは通常，こ
     れらのすべての変数を`C'に設定します．しかし，非標準の古いシステム
     (特にSCO)では，ロケールの環境変数が`C'に設定されている場
     合は壊れてしまうので，これらのシステムでAutoconfが生成したスクリプトを実
     行するとき，代わりに変数を未設定(unset)にしてください．

`LANGUAGE'
     `LANGUAGE'はPOSIXで指定されていませんが，それは場合によっ
     ては`LC_ALL'に優先させるGNUの拡張なので，Autoconfが生成し
     たスクリプトはそれも設定します．

`LC_ADDRESS'
`LC_IDENTIFICATION'
`LC_MEASUREMENT'
`LC_NAME'
`LC_PAPER'
`LC_TELEPHONE'
     これらのロケール環境変数はGNUの拡張です．それらは，上記の
     POSIXの仲間(`LC_COLLATE'など)のように扱われます．

`LINENO'
     ほとんどの近代的なシェルは，現在の行番号を`LINENO'で提供しています．
     その値は，現在のコマンドの最初の行番号です．Autoconfは近代的なシェルで
     `configure'の実行を試みます．利用可能なそのようなシェルが無い場
     合，それぞれの文字列`$LINENO'(英数文字が続かない)をインスタンスを行
     番号で置換するために，Sedに前もって渡す手法を用いて，`LINENO'の実装
     を試みます．

     実行時の動作が異なるので，`eval'で`LINENO'に依存すべきでは
     ありません．また，Sedに前もって渡す手法を用いる可能性は，引用符で囲んで
     いるとき，ヒアドキュメントのとき，または行を跨るほど長いコマンドのとき，
     `$LINENO'に依存すべきではないことを意味しています．ただし，サブシェ
     ルは問題ありません．以下の例では，一行目，六行目，そして九行目は移植性が
     ありますが，それ以外の`LINENO'のインスタンスは移植性がありません．

          $ cat lineno
          echo 1. $LINENO
          cat <<EOF
          3. $LINENO
          4. $LINENO
          EOF
          ( echo 6. $LINENO )
          eval 'echo 7. $LINENO'
          echo 8. '$LINENO'
          echo 9. $LINENO '
          10.' $LINENO
          $ bash-2.05 lineno
          1. 1
          3. 2
          4. 2
          6. 6
          7. 1
          8. $LINENO
          9. 9
          10. 9
          $ zsh-3.0.6 lineno
          1. 1
          3. 2
          4. 2
          6. 6
          7. 7
          8. $LINENO
          9. 9
          10. 9
          $ pdksh-5.2.14 lineno
          1. 1
          3. 2
          4. 2
          6. 6
          7. 0
          8. $LINENO
          9. 9
          10. 9
          $ sed '=' <lineno |
          >   sed '
          >     N
          >     s,$,-,
          >     : loop
          >     s,^\([0-9]*\)\(.*\)[$]LINENO\([^a-zA-Z0-9_]\),\1\2\1\3,
          >     t loop
          >     s,-$,,
          >     s,^[0-9]*\n,,
          >   ' |
          >   sh
          1. 1
          3. 3
          4. 4
          6. 6
          7. 7
          8. 8
          9. 9
          10. 10

`NULLCMD'
     コマンド`>foo'を実行しているとき，`zsh'は`$NULLCMD
     >foo'を実行します．Bourneシェルは`NULLCMD'が`:'だと考えますが，
     `zsh'はBourneシェル互換モードでも，`NULLCMD'を`cat'に
     設定します．`NULLCMD'の設定を忘れた場合，スクリプトは標準入力からの
     データ待ちのためサスペンド状態になるかもしれません．

`ENV'
`MAIL'
`MAILPATH'
`PS1'
`PS2'
`PS4'
     これらの変数は，対話的なシェルに対してのみ影響すると考えられるので，シェ
     ルスクリプトに対して問題はありません．しかし，少なくとも一つのシェル
     (pre-3.0 UWIN `ksh')はそれが対話的かどうかを混同し，つまり
     (例えば)`PS1'の副作用として，`$?'を予期せず変更するはずです．こ
     のバグを回避するために，Autoconfが生成したスクリプトは以下のようなことを
     します．

          (unset ENV) >/dev/null 2>&1 && unset ENV MAIL MAILPATH
          PS1='$ '
          PS2='> '
          PS4='+ '

`PWD'
     POSIX 1003.1-2001は，`cd'と`pwd'が現在のディレ
     クトリの論理的なパスを示す`PWD'環境変数を必ず更新することを要求して
     いますが，伝統的なシェルはこれをサポートしていません．一つのシェルの実体
     が`PWD'を管理していて，サブディレクトリと別のシェルは`PWD'を知ら
     ずに`cd'を実行する場合，これで混乱するはずです．この状況では，
     `PWD'は間違ったディレクトリを示します．`$PWD'の代わりに
     ``pwd`'を使用してください．

`status'
     この変数は，`zsh'(少なくとも3.1.6)での`$?'へのエイリアスで，そ
     のため読み出し専用になっています．使用しないでください．

`PATH_SEPARATOR'
     設定されていない場合，`configure'はビルドシステムに対する適切な
     パスの分離子を検出し，`PATH_SEPARATOR'出力変数をそれに応じて設定し
     ます．

     DJGPPシステムでは，パス分離子を制御するために，`PATH_SEPARATOR'環境
     変数を`bash'が(`PATH'のような)特定の環境変数を設定するため
     に使用している`:'または`;'のいずれかに設定することが可能です．
     これは`bash'内部でのみ動作するので，パス分離子として`;'がサ
     ポートされていないファイル内で代入する方が安全だろうという理由から，
     `configure'で標準的なDOSのパス分離子(`;')を検出し
     たいことでしょう．そのため，この変数をunsetするか，`;'に設定してく
     ださい．

`RANDOM'
     `RANDOM'を提供するシェルも多くあり，その変数は使用するたびに異なる
     整数を返します．その値が使用されていないとき，変更さることはほとんどあり
     ませんが，IRIXQ 6.5では毎回値が変更されます．これは，`set'
     を使用して監視すべきです．


File: autoconf-ja.info,  Node: Limitations of Builtins,  Next: Limitations of Usual Tools,  Prev: Special Shell Variables,  Up: Portable Shell

10.9 シェル組み込みの制限
=========================

だめだよ全く，我々は本気なのに．制限のあるシェルもあるんです！ :)

全ての組み込みコマンドやコマンドは，オプションをサポートし，そのため，ダッ
シュで始まる引数を用いると，全く異なる動作をすることを覚えておくべきです．
例えば罪の無い`echo "$word"'でも，`word'がダッシュで始まるとき
は予期しない結果となるはずです．この問題は，パイプでは`x'を後で評価
するように，`echo "x$word"'を使用することで避けることが可能です．

`.'
     通常のファイル(`test -f'を使用してください)を用いるときだけ
     `.'コマンドを使用してください．例えば，Bash 2.03は， `.
     /dev/null'で固まります．また，引数にスラッシュを含まない場合は
     `.'は`PATH'を使用するので，現在のディレクトリのファイル
     `foo'で`.'を使用したい場合，`. ./foo'を使用する必要が
     あることを覚えておいてください．

`!'
     `!'を使用することは不可能です．コードを書き換える必要があります．

`break'
     `break 2'の使用などは安全です．

`cd'
     POSIX 1003.1-2001では，`cd'が`-L' ("論理的") と`-P'
     ("物理的")オプションをサポートし，`-L'がデフォル
     トであることを要求しています．しかし，伝統的なシェルはこれらのオプション
     をサポートしておらず，`cd'コマンドは`-P'のように動作しま す．

     移植性の高いスクリプトは，どちらのオプションもサポートしていると仮定すべ
     きではなく，どちらの動作もデフォルトと仮定すべきではありません．これは
     ちょっとトリッキーで，例えば，POSIXのデフォルトの動作では，現
     在の論理的なディレクトリがシンボリックリンクの場合，`ls ..'と `cd
     ..'では異なるディレクトリを参照している可能性があります．
     DIRに`..'の要素が無い場合，`cd DIR'を使用しても
     安全です．また，Autoconfが生成するスクリプトは，`ac_top_srcdir' の
     ような変数を計算するとき，この問題を調査するので(*note
     Configuration Actions::)，これらの変数で`cd'しても安全です．

     `pwd'コマンドの議論も参照してください．

`case'
     引数を引用符で囲む必要はありません．分離は実行されません．

     最後の`;;'は不要ですが，使用した方が良いでしょう．

     `fnmatch'のバグのため，`bash'はバックススラッシュを文字クラ
     スとして正しく処理することに失敗します．

          bash-2.02$ case /tmp in [/\\]*) echo OK;; esac
          bash-2.02$

     このコードをUNIXやMS-DOSの絶対パスとして使用したいとき，非常に
     残念なことになります．このバグを回避するために，常にバックスラッシュを最
     初に書いてください．

          bash-2.02$ case '\TMP' in [\\/]*) echo OK;; esac
          OK
          bash-2.02$ case /tmp in [\\/]*) echo OK;; esac
          OK

     Ash 0.3.8のように，シェルによっては空の`case'/`esac'で混乱する
     ものもあります．

          ash-0.3.8 $ case foo in esac;
          error-->Syntax error: ";" unexpected (expecting ")")

     多くのシェルでは，カッコで囲まれているケース文をサポートしておらず，それ
     は，対になっているカッコに依存しているツールを使用している我々のような人
     間にとっては残念なことです．例えば，Solaris
     8のBourneシェルがそうです．

          $ case foo in (foo) echo foo;; esac
          error-->syntax error: `(' unexpected

`echo'
     単純な`echo'ですが，移植性の問題の根源として最も驚くべきものかもし
     れません．移植性の高い`echo'を使用することは，オプションとエスケー
     プシーケンスを削除しない限り不可能です．移植性を目標とする新しいアプリケー
     ションでは，`echo'の代わりに`printf'を使用すべきです．

     オプションを期待しないでください．`ECHO_N'などの，`-c'をシミュ
     レーションする方法は，*Note Preset Output Variables::.

     引数へのバックスラッシュは，処理について同意がとれていないので使用しない
     でください．`echo '\n' | wc -l'を用いれば，Digital Unix 4.0と MIPS
     RISC/OS 4.52の`sh'では答えは2になりますが，
     Solarisの`sh'，Bash，そしてZsh(の`sh'エミュレーションモー
     ド)では答えは1になります．問題が本当に`echo'にあることに注意して
     ください．全てのシェルは，`'\n''をバックスラッシュと`n'の組み
     合わせであると解釈します．

     これらの問題のため，不定の文字を含む文字列を`echo'に渡さないでく
     ださい．例えば，FOOの値がバックスラッシュを含んでおらず，`-'
     で始まらないことを知っている場合，`echo "$foo"'は安全ですが，それ以
     外では以下のようなヒアドキュメントを使用すべきではありません．

          cat <<EOF
          $foo
          EOF

`exit'
     `exit'のデフォルト値は`$?'を想定しています．残念ながらBash
     2.04を移植したDJGPPのように，シェルによっては`exit 0'を実行します．

          bash-2.04$ foo=`exit 1` || echo fail
          fail
          bash-2.04$ foo=`(exit 1)` || echo fail
          fail
          bash-2.04$ foo=`(exit 1); exit` || echo fail
          bash-2.04$

     `exit $?'を使用すると期待される動作に復帰します．

     `autoconf'が生成するようなシェルスクリプトなどには，以前の終了状
     態をクリーンアップする仕掛けを使用しているものもあります．シェルの最後の
     コマンドがゼロではないステータスで終了した場合も，呼び出し側がエラーの発
     生を報告できるように，ゼロでないステータスで終了する仕掛けがあります．

     残念ながら，Solaris 8 `sh'のように，シェルによっては`exit'
     コマンドの引数を無視する仕掛けが存在するものもあります．これらのシェルで
     は，その仕掛けで呼び出しがプレーンの`exit'によるものなのか， `exit
     1'によるものなのか決定できません．`exit'を直接呼び出す代
     わりに，この問題を回避するために`AC_MSG_ERROR'を呼び出してください．

`export'
     組み込みの`export'は，シェル変数を"環境変数(environment
     variable)"に複製します．変数がエクスポートされて更新される度に，環境変数
     も更新されます．反対に，環境変数はがシェルから読み出される度に，開始時に
     エクスポートされたものとして印のついたシェル変数をインポートするべきです．

     ああ，Solaris 2.5，IRIX 6.3，IRIX 5.2，AIX 4.1.5，そ してDigital
     UNIX 4.0のような多くのシェルは，受けとった環境変数を
     `export'することを忘れています．結果として，二つの変数は共存して
     います．環境変数とシェル変数の二つです．以下のコードは，この失敗を説明す
     るものです．

          #! /bin/sh
          echo $FOO
          FOO=bar
          echo $FOO
          exec /bin/sh $0

     環境変数で`FOO=foo'として実行した場合，これらのシェルはそれぞれ
     `foo'と`bar'を交互に出力しますが，`foo'を出力した後に，続
     けて`bar'を出力します．

     このため，それぞれ更新した環境変数を再び`export'すべきです．

`false'
     `false'がステータス1で終了することを期待してはいけません． Solaris
     8のネイティブなBourneシェルは，ステータス255で終了します．

`for'
     位置の引数までループするため，以下のように使用したとします．

          for arg
          do
            echo "$arg"
          done

     シェルによっては，間違って解釈するので，`for'と同じ行に`do' を
     書いては_いけません_．

          for arg; do
            echo "$arg"
          done

     明示的に位置に依存する引数を参照したい場合，`$@'のバグがあるので，
     以下のように使用してください．

          for arg in ${1+"$@"}; do
            echo "$arg"
          done

     しかし，ZshはBourneシェルエミュレーションモードでも，`${1+"$@"}'
     で単語の分離を試みるのことを覚えておいてください．`$@'の詳細は，
     *Note Shell Substitutions::を参照してください．

`if'
     `!'の使用は移植性がありません．以下の例を考えます．

          if ! cmp -s file file.new; then
            mv file.new file
          fi

     その代わりに以下を使用してください．

          if cmp -s file file.new; then :; else
            mv file.new file
          fi

     `if'の終了ステータスをリセットしないシェルもあります．

          $ if (exit 42); then true; fi; echo $?
          42

     そこでは，適切なシェルなら`0'を出力すべきです．これは，異常終了とな
     るので，`Makefile'では特に問題です．これが，Automakeが生成するよう
     な適切に書かれている`Makefile'がごちゃごちゃした構成になっている理
     由です．

          if test -f "$file"; then
            install "$file" "$dest"
          else
            :
          fi

`printf'
     `-'で始まる書式化文字列は問題になります．`bash'(例えば
     2.05b)では，それをオプション文字と解釈しエラーとなるでしょう．オプション
     の終りの印となる`--'は，書式化文字列をそのまま受けとるNetBSD
     Almquist shell (例えば0.4.6)ではよいとは言えません．`-'を`%c'
     や`%s'に書くのが，間違いを避ける最も簡単な方法でしょう．

          printf %s -foo

`pwd'
     最近のシェルを用いると，`pwd'は"論理的な"ディレクトリ名を出力
     し，その構成要素にはシンボリックリンクがある可能性があります．これらのディ
     レクトリ名は，構成要素はすべてディレクトリとなっている"物理的な"
     ディ レクトリ名とは異なります．

     POSIX 1003.1-2001では，`pwd'は，`-L' ("論理的") と`-P'
     ("物理的")オプションをサポートし，`-L'がデフォル
     トになっている必要があります．しかし，伝統的なシェルはこれらのオプション
     をサポートしておらず，`pwd'コマンドは`-P'のように動作しま す．

     移植性の高いスクリプトでは，どちらのオプションもサポートしていると仮定す
     べきではなく，どちらの動作もデフォルトと仮定すべきではありません．また，
     多くのホストは`/bin/pwd'が`pwd -P'と同じですが， POSIX
     はこの動作を要求しておらず，移植性の高いシェルではそれに
     依存すべきではありません．

     通常，そのまま`pwd'を使用するのが最善でしょう．最近のホストでは，
     これで論理的なディレクトリ名を出力し，以下の利点があります．

        * 論理的な名前はユーザが指定するものです．

        *
          物理的な名前は，インストールしたホストと，それ以外のネットワークファイル
          システムとで移植性が無いかもしれません．

        * 最近のホストでは，親ディレクトリに許可が無いと`pwd
          -P'は失敗するか
          もしれませんが，`pwd'をそのまま使うと，この理由で失敗するはずは
          ありません．

     `cd'コマンドでの議論も参照してください．

`set'
     この組み込みコマンドは，一般的なダッシュで始まる引数の問題に直面します．
     BashやZshのような現在のシェルでは，オプションの終りを指定する
     `--'(`--'以降の全ての引数は，例えば`-x'であってもパラ
     メータです)を理解しますが，ほとんどのシェルは，オプションではない引数が
     見つかるとすぐにオプションの処理を単純に停止します．このため，オプション
     の処理を終了するために`dummy'や単純に`x'を使用し，それを取り出
     すために`shift'を使用してください．

          set x $my_list; shift

     すべてのオプションを認識しないこととは"反対"の問題(例えば，`set -e
     -x'で`-x'をコマンドラインに割り当てるといった問題)があるシェルもあ
     ります．以下のように省略した方が良いでしょう．

          set -ex

`shift'
     `shift'するものが無いとき，`shift'を使用することは悪い考
     え方であるだけでなく，移植性が無くなってしまいことも追加されてしまいます．
     MIPS RISC/OS 4.52のシェルは，それを廃棄してしまいます．

`source'
     POSIXが要求していないので，このコマンドは移植性がありません．
     代わりに`.'を使用してください．

`test'
     `test'プログラムは，多くのファイルと文字列のテストを実行する方法で
     す．それは別名の`['で呼び出されることも多いのですが，M4の引用符文字
     という問題から，Autoconfのコードではその名前を使用することが要求されてい
     ます．

     `test'を使用して複数の調査を行う必要がある場合，`test'の演算子
     の`-a'と`-o'の代わりに，シェル演算子の`&&'と`||' で
     組み合わせてください．System Vでは，`-a'と`-o'の優先順位は，単
     項演算子とは間違った関係になっています．従って，POSIXはそれら
     を指定しないので，それを使用すると移植性が無くなります．同じ文で
     `&&'と`||'を組み合わせる場合，同じ優先順位があることを覚えてお
     いてください．

     `test'で`!'を使用してもかまいませんが，`if'ではでき ません．`test
     ! -r foo || exit 1'．

`test' (files)
     `configure'スクリプトでクロスコンパイルのサポートを可能にするた
     め，ホストシステムの代わりに，ビルドシステムの特徴のテストは，何もすべき
     ではありません．しかし，任意のファイルの存在を調査する必要があることが判
     明するかもしれません．そうするために`test -f'や`test -r'を使用
     してください．4.3BSDには`test -x'が無いので使用しないでく
     ださい．また，Solaris 2.5には`test -e'が無いので使用しないでくださ
     い．システム上にシンボリックリンクがあることをテストするためには，
     `test -L'ではなく`test -h'を使用して下さい．いずれも POSIX
     1003.1-2001に準拠した様式ですが，Solaris 8の
     `/bin/sh'のような古いシェルでは，`-h'だけをサポートしていま す．

`test' (strings)
     `test'は引数をオプションとして解釈するので(例えば， `STRING =
     "-n"')，特にSTRINGがダッシュで始まる場合， `test
     "STRING"'を避けてください．

     一般に信じられていることとは反対に，`test -n STRING'と `test -z
     STRING'は，移植性が*あります*．それにもかかわ らず，(Solaris
     2.5，AIX 3.2，UNICOS 10.0.0.6，Digital UNIX
     4等の)多くのシェルには信じられない優先順位があり，STRING
     がオペレータのように見える場合は混乱するかもしれません．

          $ test -n =
          test: argument expected

     危険はありますが，代わりに`test "xSTRING" = x'や`test "xSTRING" !=
     x'を使用してください．

     以下のような慣用句はのバリエーションは普通に見つかります．

          test -n "`echo $ac_feature | sed 's/[-a-zA-Z0-9_]//g'`" &&
            ACTION

     与えられているパターンに一致するとき動作します．そのような構文は，常に使
     用を避けるべきです．

          echo "$ac_feature" | grep '[^-a-zA-Z0-9_]' >/dev/null 2>&1 &&
            ACTION

     シェルの組み込みコマンドなのでより速くなっているため，可能な場所では
     `case'を使用してください．

          case $ac_feature in
            *[!-a-zA-Z0-9_]*) ACTION;;
          esac

     ああ，POSIXの構文`[!...]'をサポートしていないシェルは
     知りませんが，文字クラスの否定は移植性が無いかもしれません(対話的モード
     では，`zsh'は`[!...]'の構文で混乱し，`!'のため，ヒ
     ストリ内のイベントを探します)．多くのシェルは，構文`[^...]' の
     代替物をサポートしていません(Solaris，Digital Unix等)．

     以下は解決方法の一つです．

          expr "$ac_feature" : '.*[^-a-zA-Z0-9_]' >/dev/null &&
            ACTION

     以下の方が良いかもしれません．

          expr "x$ac_feature" : '.*[^-a-zA-Z0-9_]' >/dev/null &&
            ACTION

     `FOO'がバックスラッシュを含んでいるとき問題を回避するので， `expr
     "XFOO" : "XBAR"'は，`echo "XFOO" | grep "^XBAR"'より堅牢です．

`trap'
     少なくとも，シグナルの1，2，13，そして15をトラップすることは安全です．ま
     た，0のトラップも可能で，すなわち，スクリプトが終るとき(明示的な
     `exit'やスクリプトの終り)に`trap'を実行するということで す．

     POSIXでは，この点は絶対的に明確ではありませんが，`$?'をト
     ラップするとき，トラップの前の最後に実行されたコマンドの終了ステータスが
     設定されるべきだということは，広く認められています．曖昧な部分は以下のよ
     うに要約可能です．"トラップが`exit'で開始されるとき，実行された
     _最後の_コマンドは何でしょう？`exit'の直前ですか？それとも
     `exit'自身ですか？"

     Bashは`exit'を最後のコマンドと考えますが，ZshとSolaris 8
     `sh'は，トラップが実行されたとき`exit'の処理_中_ な
     ので，トラップを受信する前の終了ステータスだと考えられます．

          $ cat trap.sh
          trap 'echo $?' 0
          (exit 42); exit 0
          $ zsh trap.sh
          42
          $ bash trap.sh
          0

     移植性の解決方法は簡単です．`exit 42'にしたいとき，`(exit 42);
     exit 42'を実行し，最初の`exit'はZshに対する42の終了ステータスを
     設定するために使用され，二番目は，トラップを誘発し，Bashに対して終了ステー
     タスとしての42を渡すためです．

     FreeBSD 4.0のシェルには，以下のバグがあります．コードが内部
     `trap'の場合，空行で`$?'が0にリセットされます．

          $ trap 'false

          echo $?' 0
          $ exit
          0

     幸運にもこのバグは`trap'のみに影響します．

`true'
     心配しないでください．我々が知っている限り`true'には移植性があり
     ます．それにもかかわらず，常に組み込みコマンドというわけではなく(例えば
     Bash 1.x)，移植性の高いシェルのコミュニティは，`:'の使用を好みが
     ちです．これには副作用があります．`false'が`true'より移
     植性が高いかどうか尋ねてみたときのAlexandre Oliva の回答です．

          それらが存在しない場合，シェルは，`false'に対しては正しく，
          `true'に対しては正しくない，異常終了のステータスを生成するので，
          ある意味ではそのとおりです．

`unset'
     `unset'のサポートを仮定することはできません．それにもかかわらず，
     `PS1'のような邪魔な変数を利用不可能にすることは非常に役立つので，存
     在をテストし，_提供されていれば_それを使用し，`unset'がサポー
     トされていないときは，無効にする値を与えてください．

          if (unset FOO) >/dev/null 2>&1; then
            unset=unset
          else
            unset=false
          fi
          $unset PS1 || PS1='$ '

     無効にする値については，*Note Special Shell Variables::.
     また，環境変数の caseについては`export'のドキュメント*Note
     Limitations of Builtins::も参照してください．


File: autoconf-ja.info,  Node: Limitations of Usual Tools,  Next: Limitations of Make,  Prev: Limitations of Builtins,  Up: Portable Shell

10.10 通常のツールの制限
========================

あらゆるマシンで見つかることが期待できる小さなツールセットには，知ってお
くべき制限がいくつか含まれているはずです．

`awk'
     ユーザ関数呼び出しで，カッコの前に空白を残さないでください． GNU
     awkはそれを拒絶します．

          $ gawk 'function die () { print "Aaaaarg!"  }
                  BEGIN { die () }'
          gawk: cmd. line:2:         BEGIN { die () }
          gawk: cmd. line:2:                      ^ parse error
          $ gawk 'function die () { print "Aaaaarg!"  }
                  BEGIN { die() }'
          Aaaaarg!

     プログラムを決定的にしたい場合，配列上の`for'に依存しないでください．

          $ cat for.awk
          END {
            arr["foo"] = 1
            arr["bar"] = 1
            for (i in arr)
              print i
          }
          $ gawk -f for.awk </dev/null
          foo
          bar
          $ nawk -f for.awk </dev/null
          bar
          foo

     HP-UX
     11.0のネイティブのAWKのように，内部アンカーに調子が悪い正規表現の
     エンジンがあるものもあります．

          $ echo xfoo | $AWK '/foo|^bar/ { print }'
          $ echo bar | $AWK '/foo|^bar/ { print }'
          bar
          $ echo xfoo | $AWK '/^bar|foo/ { print }'
          xfoo
          $ echo bar | $AWK '/^bar|foo/ { print }'
          bar

     そのようなパターンに依存したり(すなわち，`/^(.*foo|bar)/'を使用する)，
     そのようなAWKを拒絶する単純なテストを使用したりしないでください．

`cat'
     オプションに依存しないようにしてください．しかし，表示不可能な文字を表示
     するオプション`-v'は，移植性が_ありそうです_．

`cc'
     `cc foo.c -o foo'のようなコンパイルが失敗したとき，(Reliant
     UNIXのCDSのように)`foo.o'を残すコンパイラもあります．

     HP-UX `cc'は，プリプロセスとアセンブラを行なう`.S'ファイル
     を受け入れません．`cc -c foo.S'は成功したように見えますが，実際には
     何もしません．

     `cc foo.c'で生成されるデフォルトの実行形式は，以下のようになるはず
     です．

        * `a.out' -- 通常のUnixの慣習です．

        * `b.out' -- i960 コンパイラ(`gcc'を含む)．

        * `a.exe' -- `gcc'が移植されたDJGPP．

        * `a_out.exe' -- OpenVMS上のDEC Cに対するGNV `cc'ラッパー．

        * `foo.exe' -- 様々なMS-DOSのコンパイラ．

`cmp'
     `cmp'は，二つのファイルの生のデータの比較を実行しますが，
     `diff'は二つのテキストファイルを比較します．そのため，
     DOSのファイルを比較する場合，二つのファイルが異なっているかど
     うかを調査するだけの場合でも改行のエンコードの違いで見せかけの差が発生す
     ることを避けるため，`diff'を使用してください．

`cp'
     伝統的に，ファイルのタイムスタンプの分解能は一秒になっていて，`cp
     -p'ではタイムスタンプをそのままコピーします．しかし，最近のファイルシス
     テムには分解能が1ナノ秒のタイムスタンプになっているものもたくさんありま
     す．残念ながら，`cp -p'の実装ではファイルのコピー時にタイムスタンプ
     を切り詰めるので，このためコピーされたファイルが結果としてソースよりも古
     くなってしまいます．切り詰めの正確な量は`cp'が使用するシステムコー
     ルの分解能に依存します．伝統的に，これは`utime'で，それは分解能が1
     秒になっていますが，新しい`cp'の実装では`utimes'を使用して
     いて，それは分解能が1マイクロ秒になっています．これらの新しい実装には，
     GNU coreutils 5.0.91やそれ以降，そしてSolaris 8
     (sparc)のパッチ109933-02
     やそれ以降が含まれます．残念ながら，2003年9月の段階では，完全なナノ秒の
     分解能を持つタイムスタンプを設定するシステムコールはありません．

     SunOS `cp'は`-f'をサポートしていませんが，その
     `mv'はサポートしています．`mv'と`cp'が
     `-f'に関して異なっている理由については由来が推測できます．
     `mv'はデフォルトで，読み込み専用のファイルを上書きする前にプロン
     プトを表示します．`cp'はそうではありません．そのため，
     `mv'には`-f'オプションが必要ですが，`cp'には不要
     です．`mv'と`cp'は，読み込み専用のファイルに対して，動作
     が異なり，その理由は，最も簡単な`cp'の形式では，読み込み専用のファ
     イルを上書きできませんが，最も簡単な`mv'形式では，それが可能だと
     いうことです．この理由は，`cp'はターゲットを書き込みアクセスで開
     くのに対し，`mv'は単純に`link'(または，新しいシステムでは
     `rename')を呼び出すためです．

     Bob Proulxは，`cp -p'は常に所有権のコピーを_試みる_とメモして
     います．しかし，実際に所有権をコピーするかどうかは，カーネルで実装されて
     いるシステムポリシーの決定に依存します．カーネルが許可している場合はそう
     なります．カーネルが許可していない場合は，そうなりません．`cp'自
     身が制御しているものではありません．

     SysVでは，ユーザはファイルを別のユーザにchown可能で，SysVにはstickyでは
     ない`/tmp'もあります．それは疑い無く，敵意のあるユーザのいないビジ
     ネス環境のSysVの遺産に由来しています．BSDは，rootだけがファイ
     ルを`chown'可能にし，stickyな`/tmp'を使用して，これをより安
     全なモデルに変更しました．それは疑い無く，キャンパス環境のBSD
     の遺産に由来します．

     LinuxはデフォルトでBSDに準拠していますが，`chown'可能
     に設定することも可能です．別の例として，HP-UXはSysVに準拠していますが，
     最近のセキュリティモデルを使用するよう設定し，`chown'できなくす
     ることが可能です．それは管理者が設定可能なパラメータなので，動作を示すた
     めにカーネル名を使用することは不可能です．

`date'
     `date'のバージョンによっては，特殊な%による指示語を理解しないも
     のもあり，残念ながら警告をする代わりに，それをそのまま通過させ，正しく終
     了します．

          $ uname -a
          OSF1 medusa.sis.pasteur.fr V5.1 732 alpha
          $ date "+%s"
          %s

`diff'
     `-u'には移植性がありません．

     Tru64のように，実装によっては`/dev/null'の比較で失敗するものもあり
     ます．その代わりに空のファイルを使用してください．

`dirname'
     全てのホストに動作する`dirname'があるわけではなく，その代わりに
     `AS_DIRNAME'を使用すべきです(*note Programming in M4sh::)．例えば以
     下のようにします．

          dir=`dirname "$file"`       # This is not portable.
          dir=`AS_DIRNAME(["$file"])` # This is more portable.

     これは，POSIXで要求されている標準では，幾分微妙な扱いです．例
     えばUN*Xでは`//1'は`/'になるのでしょうか？以下はPaul Eggertの
     回答です．

          古いUnixライクのものではそうはならず，前置される`//'は特殊なパス名
          になります．それは"スーパールート"を参照し，他のマシンのファイルをアク
          セスするために使用されます．前置される`///'，`////'などは，
          `/'と等価です．しかし，前置される`//'は特殊です．この伝統的は
          Apollo
          Domain/OSで始まったと考えていて，古いホストではまだそのOS
          を使用 しています．

          POSIXでは可能ですが，`//'に対する特別扱いは要求されていま
          せん．そこでは，形式`//([^/]+/*)?'のパス名でのdirnameの動作は，実装
          で定義されると告げています．これらの場合，GNU
          `dirname'は`/'を返しますが，古いUnixライクのものでも動作す
          るように`//'を返した方が移植性が高いでしょう．

`egrep'
     POSIX 1003.1-2001では，もはや`egrep'を要求していません
     が，より古いホストの多くはまだPOSIXの`grep -E'での置換を
     サポートしていません．この問題を回避するため，`AC_PROG_EGREP' を呼
     び出し，`$EGREP'を使用してください．

     空の代入は移植性が無く，代わりに`?'を使用してください．例えば，
     Digital Unix v5.0では以下のようになります．

          > printf "foo\n|foo\n" | $EGREP '^(|foo|bar)$'
          |foo
          > printf "bar\nbar|\n" | $EGREP '^(foo|bar|)$'
          bar|
          > printf "foo\nfoo|\n|bar\nbar\n" | $EGREP '^(foo||bar)$'
          foo
          |bar

     `$EGREP'も`grep'の制限で苦しむことになります．

`expr'
     `x'で始まる`expr'キーワードはないので，`expr'が
     WORDを間違って解釈しないように，`expr x"WORD" :
     'xREGEX''を使用してください．

     `length'，`substr'，`match'，そして`index'は使用し ないでください．

`expr' (`|')
     `|'を使用することは可能です．POSIXでは，`expr ''' が
     空の文字列を返すことを必須としていませんが，空の文字列を用いて空の文字列
     (またはゼロ)とともに`|'を用いたときの結果は安全ではありません．例え
     ば以下を考えます．

          expr '' \| ''

     GNU/LinuxとPOSIX.2-1992では，この場合は空の文字列を
     返しますが，伝統的なUNIXでは`0'を返します(Solarisはそのような
     例の一つです)．最近のPOSIX.1-2001ドラフトでは，その指定は伝統
     的なUNIXの動作に一致するよう変更されています(信じられないことですが，
     これを修正するには時すでに遅しです)．同じ問題が，計算結果が空の文字列に
     なるときにも，以下の状態では発生します．

          expr bar : foo \| foo : bar

     空の文字列を避けることで，この移植性の問題を避けてください．

`expr' (`:')
     Solarisではサポートされていないので，パターン内に，`\?'，`\+'，
     そして`\|'を使用しないでください．

     POSIX標準では，`expr 'a' : '\(b\)''が`0'を出力するか
     空の文字列を出力するのかは明確ではありません．実際問題として，それはほと
     んどのプラットフォームで空の文字列を出力しますが，移植性の高いスクリプト
     では，これを仮定すべきではありません．例えば，QNX 4.25 ネイティ
     ブの`expr'は`0'を返します．

     均一な動作を得る手段として，デフォルト値として空の文字列を使用することに
     なっていると信じているかもしれません．

          expr a : '\(b\)' \| ''

     残念ながら，これは元の式として正確に動作します．詳細は， ``expr'
     (`:')'の項目を参照してください．

     古い`expr'の実装(例えば，SunOS 4の`expr'とSolaris 8の
     `/usr/ucb/expr')には，一致したサブ文字列が120バイトより長い場合，
     `expr'が異常終了するという，思慮の欠けた長さの制限があります．こ
     の状況では，`expr'が失敗した場合，`echo|sed'に頼りたいと思
     うかもしれません．

     残っているものはそれだけではありません！

     QNX 4.25の`expr'には，空の文字列ではなく`0'となる
     ことに加えて，終了ステータスでおかしな動作があります．それはカッコが使用
     されているときには，常に1になるということです！

          $ val=`expr 'a' : 'a'`; echo "$?: $val"
          0: 1
          $ val=`expr 'a' : 'b'`; echo "$?: $val"
          1: 0

          $ val=`expr 'a' : '\(a\)'`; echo "?: $val"
          1: a
          $ val=`expr 'a' : '\(b\)'`; echo "?: $val"
          1: 0

     実際に，(`sed'のような)他の手法で`expr'プログラムで異常
     終了を捕獲する準備がある場合，結果を二回得る可能性があるので，これは大き
     な問題となります．例えば以下を考えます．

          $ expr 'a' : '\(a\)' || echo 'a' | sed 's/^\(a\)$/\1/'

     ほとんどのホストでは`a'を出力しますが，QNX 4.25では
     `aa'になります．単純な回避方法として，`expr'でのテストを構
     成し，結果によって`expr'や`false'で変数を設定する方法を
     使用します．

`fgrep'
     POSIX 1003.1-2001では，もはや`fgrep'を要求していません
     が，より古いホストの多くはまだPOSIXの`grep -F'での置換を
     サポートしていません．この問題を回避するため，`AC_PROG_FGREP' を呼
     び出し，`$FGREP'を使用してください．

`find'
     オプション`-maxdepth'はGNU特有のようです．Tru64 v5.1， NetBSD
     1.5，そしてSolaris 2.5の`find'コマンドはそれを 理解しません．

     `{}'の置換は，引数が正確に_{}_の場合のみ保証され，それが引
     数の一部の場合は保証されません．例えば，DUとHP-UX 10.20とHP-UX
     11では保 証されません．

          $ touch foo
          $ find . -name foo -exec echo "{}-{}" \;
          {}-{}

     一方，GNU `find'は`./foo-./foo'を報告します．

`grep'
     System Vの`grep -s'はエラーメッセージのみ抑制し，出力を抑制しないの
     で，出力を抑制するために`grep -s'を使用しないでください．その代わり
     に(ファイルが存在しない場合) `grep'の標準出力と標準エラー出力を
     `/dev/null'へリダイレクトしてください．一致が見つかったかどうかを決
     定するために，`grep'の終了ステータスを調査してください．

     最後のパターンのみ尊重する`grep'(例えば，AIX 6.5とSolaris
     2.5.1)もあるので，`-e'で複数の正規表現を使用しないでください．ど
     ちらにしろ，Stardent Vistra SVR4の`grep'には`-e' がありませ ん....
     その代わりに拡張した正規表現と代入を使用してください．

     Irix 6.5.16mの`grep'は，それをサポートしていないので，
     `-w'に依存しないようにしてください．

`ln'
     `-f'オプションがある`ln'に依存しないようにしてください．
     古いシステムではシンボリックリンクは利用不可能です．移植性のある代替物
     `$(LN_S)'を使用してください．

     2.04以前のバージョンのDJGPPに対して，`ln'は実行形式へのソフトリ
     ンクを，実際のプログラムを呼び出すスタブを生成することでエミュレートしま
     す．この機能は，Unix独自の実行形式以外のファイルでも動作します．そのため，
     `ln -s file link'は`link.exe'を生成し，それは実行された場合に
     `file.exe'の呼び出しを試みます．しかしこの機能は実行形式に対しての
     み動作するので，このシステムでは`cp -p'が代わりに使用されます．
     DJGPPの2.04とそれ以降では完全なシンボリックリンクがサポートされています．

`ls'
     移植性のあるオプションは`-acdilrtu'です．最近では，`-l' で
     所有者とグループを出力しますが，伝統的な`ls'はグループを省略しま
     す．

     最近では，すべての診断結果は標準エラー出力に出てきますが，伝統的な
     `ls foo'は，`foo'が存在しない場合，メッセージ`foo not
     found'を標準出力に出力します．伝統的な`ls'では，`.c'ファイ
     ルが無い場合，`sources=`ls *.c 2>/dev/null`'は`sources="*.c not
     found"'と等価なので，そのようなシェルコマンドを書くときに注意してく
     ださい．

`mkdir'
     `mkdir'のオプションには移植性はありません．`mkdir -p
     FILENAME'の代わりに`AS_MKDIR_P(FILENAME)'を使用すべきで す(*note
     Programming in M4sh::)．

`mv'
     移植性のあるオプションは，`-f'と`-i'のみです．

     ファイルシステム間で個別にファイルを移動することは(V6では)移植性がありま
     すが，常に強力でははありません．`mv new existing'をするとき，
     `existing'の古いものも新しいものも実際には存在していないという危険
     な状態が存在します．

     ファイルを`/tmp'から移動することで，これらのファイルを作成していた
     としても，好ましくない(が，まったく有効な)警告を発生することがあることを
     覚えておいてください．システムによっては，`/tmp'にファイルを作成す
     ると，guidを自分が所属していない`wheel'に設定するものもあります．そ
     のためファイルがコピーされると，`chgrp'で失敗します．

          $ touch /tmp/foo
          $ mv /tmp/foo .
          error-->mv: ./foo: set owner/group (was: 3830/0): Operation not permitted
          $ echo $?
          0
          $ ls foo
          foo

     この動作は，POSIXに準拠しています．

          何らかの理由でファイル属性の複製に失敗する場合，`mv'は診断メッセー
          ジを標準エラー出力に書き出しますが，この異常終了で，`mv'は終了ス
          テータスを変更しません．

     マウントポイントをまたがってディレクトリを移動することは移植性が無いので，
     `cp'と`rm'を使用してください．

     開いているファイルの移動/削除は移植性がありません．以下の例はDOS/WIN32
     では実行不可能です．

          exec > foo
          mv foo bar

     以下も実行不可能です．

          exec > foo
          rm -f foo

`sed'
     文字クラスの一部の場合でも，パターンに(エスケープされていない)セパレータ
     を含めるべきではありません．POSIX準拠では，Crayの`sed'
     は`s/[^/]*$//'を拒絶します．`s,[^/]*$,,'を使用してください．

     sedのスクリプトは，八文字以上の分岐ラベルを使用すべきではなく，コメント
     を含めるべきでもありません．

     NetBSD 1.4.2では，二番目のものをコマンドとして解釈しようと試み
     るので，`sed'によっては，余分な`;'を含めてはなりません．

          $ echo a | sed 's/x/x/;;s/x/x/'
          sed: 1: "s/x/x/;;s/x/x/": invalid command code ;

     `sed'によっては，入力バッファに4000バイトの制限があるものもある
     ので，入力は妥当な長さの行にすべきです．

     `\|'の交換は一般的ですが，POSIXはそのサポートを要求してい
     ないので，移植性の高いスクリプトでは避けるべきです．Solaris 8の
     `sed'は交換をサポートしていません．例えば，`sed '/a\|b/d''
     は，リテラル文字列`a|b'を含んでいる行のみ検出します．

     グループ内のアンカー(`^'と`$')は移植性がありません．

     パターン内の入れ子状のカッコは，現在のホストでは完全に移植性あるものなの
     ですが，SVR3のように古い`sed'の実装ではサポートされていません．

     もちろんオプション`-e'には移植性がありますが，それは不要です．ダッ
     シュで始まる有効なsedプログラムは無いので，明確にする役には立ちません．
     唯一の有効性は，以下のように字下げを強制的に行なうときです．

          sed -e INSTRUCTION-1 \
              -e INSTRUCTION-2

     これは以下の代わりのものです．

          sed INSTRUCTION-1;INSTRUCTION-2

     もう一つの垢抜けた伝説として，"マッチしたもの"を意味する`s'コマン
     ドの一部を置換するとき，`&'を使用しても移植性はあるでしょう．すべて
     のベル研究所のV7 `sed'の子孫は(少なくとも，我々はそれより古い
     `sed'を経験したことはありません)サポートしています．

     POSIXでは，`!'とそれ以降のコマンドの間に空白があってはい
     けません．アドレスと`!'の間の空白はOKです．例えば，Solaris 8では以
     下のようになります．

          $ echo "foo" | sed -n '/bar/ ! p'
          error-->Unrecognized command: /bar/ ! p
          $ echo "foo" | sed -n '/bar/! p'
          error-->Unrecognized command: /bar/! p
          $ echo "foo" | sed -n '/bar/ !p'
          foo

`sed' (`t')
     古いシステムには，新しいサイクルと開始するとき，その`t'フラグをリセッ
     トすることを"忘れる" `sed'があるシステムもあります．例えば， MIPS
     RISC/OSとIRIX 5.3で，以下の`sed'スクリプトを
     実行した場合を考えます(行番号は，実際にはテキストの一部ではありません)．

          s/keep me/kept/g  # a
          t end             # b
          s/.*/deleted/g    # c
          : end             # d

     ファイルの内容は以下を考えます．

          delete me         # 1
          delete me         # 2
          keep me           # 3
          delete me         # 4

     以下のようになります．

          deleted
          delete me
          kept
          deleted

     以下のようにはなりません．

          deleted
          deleted
          kept
          deleted

     なぜでしょう？一行目を処理しているとき，マッチするのでtフラグがセットさ
     れ，b行からd行まで移動し，出力が生成されます．二行目を処理しているとき，
     tフラグはセットされたままです(これはバグです)．しかし，a行はマッチに失敗
     しますが，置換が失敗するとき，`sed'はtフラグをクリアすることをサ
     ポートしていません．そのため，フラグがセットされているように見えるb行は，
     それをクリアし，dへ移動し，その結果，`deleted'の代わりに `delete
     me'になります．三行目を処理しているとき，マッチを示すt がク
     リアされるため，フラグがセットされ，その結果，b行はフラグをクリアし移動
     します．最終的にフラグはクリアになっているので，四行目は正しく処理されま
     す．

     `sed'の`t'について覚えておくべきことは二つあります．最初に，
     成功した置換に_よっては_，置換の直前だけでなく`t'ジャンプする
     ことを覚えておいてください．そのため，tフラグを実際にリセットするために，
     ごまかしの`t clear; : clear'を使用してください．

     二番目は，それぞれの新しいサイクルでフラグをクリアするのを`sed'
     に依頼することはできません．

     上記のスクリプトの移植性の高い実装の一つは，以下のようになります．

          t clear
          : clear
          s/keep me/kept/g
          t end
          s/.*/deleted/g
          : end

`touch'
     要求されるタイムスタンプ(例えば`-r'オプション)を指定する場合，
     `touch'は通常，`utime'や`utimes'システムコールを使用し，
     結果として，`cp -p'に存在するタイムスタンプの切り詰めの問題と同様の
     結果になるはずです．

     古いBSDシステムには，空のファイルに対する`touch'のよう
     なコマンドで，タイムスタンプを更新しない結果となるものもあるので，回避す
     るために，`echo'のようなコマンドを使用してください．

     GNU `touch' 3.16r(とそれ以前の全て)は，空のファイルが
     NFSでマウントされている4.2のボリュームのとき，SunOS 4.1.3 での
     動作で異常終了します．



File: autoconf-ja.info,  Node: Limitations of Make,  Prev: Limitations of Usual Tools,  Up: Portable Shell

10.11 Makeの制限
================

`make'自身には非常に多くの制限があるので苦労します，ここではわず
かですが紹介します．とにかく，シェルによってコマンドが実行されるので，そ
の弱い部分の全てが継承されていくということを覚えておいてください ....

`$<'
     POSIXでは，`makefile'の構成物の`$<'は推測される規則
     と`.DEFAULT'ルールのみで使用可能だと告げています．通常のルールでの
     その意味は明記されていません．例えば，Solaris 8の`make'はそれを
     引数で置換します．

マクロ名へのアンダースコアの前置
     NEWS-OS
     4.2Rのように，マクロ名にアンダースコアを前置することをサポートし
     ていない`make'もあります．

          $ cat Makefile
          _am_include = #
          _am_quote =
          all:; @echo this is test
          $ make
          Make: Must be a separator on rules line 2.  Stop.
          $ cat Makefile2
          am_include = #
          am_quote =
          all:; @echo this is test
          $ make -f Makefile2
          this is test

マクロへのバックスラッシュの後置
     HP-UXのバージョンによっては，`make'には，バックスラッシュ以降の
     複数の改行を，空ではない行も含めて読み込むものもあります．例えば以下のよ
     うにします．

          FOO = one \

          BAR = two

          test:
                  : FOO is "$(FOO)"
                  : BAR is "$(BAR)"

     `FOO'は`one BAR = two'と等価です．それ以外の`make'では，
     バックスラッシュは直後の行だけを含みます．

コメント内のエスケープされた改行
     POSIXによると，`Makefile'のコメントは`#'ではじまり，
     エスケープされていない改行まで続きます．

          % cat Makefile
          # A = foo \
                bar \
                baz

          all:
                  @echo ok
          % make   # GNU make
          ok

     しかし現実では，これは常にそうではありません．実装によっては，`#'
     から行末までを廃棄し，後置されるバックスラッシュを無視するものもあります．

          % pmake  # BSD make
          "Makefile", line 3: Need an operator
          Fatal errors encountered -- cannot continue

     このため，複数行の定義をコメントアウトしたい場合，最初の行だけでなく，そ
     れぞれの行に`#' を前置してください．

          # A = foo \
          #     bar \
          #     baz

`make macro=value'とサブ呼び出しの`make'
     コマンドライン変数の`foo=bar'のような定義は，`Makefile'の
     `foo'の定義に優先します．(GNU `make'のような)
     `make'の実装によっては，この優先はサブ呼び出しの`make'
     に伝搬します．古い実装によっては，それ以下の`make'に代入を渡さな
     いものもあります．

          % cat Makefile
          foo = foo
          one:
                  @echo $(foo)
                  $(MAKE) two
          two:
                  @echo $(foo)
          % make foo=bar            # GNU make 3.79.1
          bar
          make two
          make[1]: Entering directory `/home/adl'
          bar
          make[1]: Leaving directory `/home/adl'
          % pmake foo=bar           # BSD make
          bar
          pmake two
          foo

     サブ呼び出しの`make'に`foo=bar'の優先を伝搬したい場合，移植
     性を持たせる方法が無いわけではありません．その一つは，すべての環境変数を
     `Makefile'マクロ定義に優先させる`-e'オプションを使用し，
     FOOを環境変数として定義する方法です．

          % env foo=bar make -e

     `-e'オプションは，自動的にサブ呼び出しの`make'に伝搬し，環
     境変数は`make'の呼び出し間で継承されるので，`foo'マクロはサ
     ブ呼び出しの`make'で期待したように優先されます．

     この構文(`foo=bar make -e')は，`Makefile'の外で使用するときだ
     け，例えば，スクリプトやコマンドラインのときだけ移植性があります．
     `make'ルール内で実行するとき，GNU `make' 3.80とそれ以前
     のバージョンは，それ以下での`make'に`-e'オプションを伝搬さ
     せることを忘れています．

     更に`-e'を使用することで，`Makefile'で通常定義されるその他のマ
     クロが環境変数に含まれている場合，予期しない副作用があるかもしれません．
     (以下の`make -e'と`SHELL'の注意も参照してください．)

     サブ呼び出しの`make'に優先物を伝搬させるもう一つの方法は，
     `Makefile'に手動で行なうことです．

          foo = foo
          one:
                  @echo $(foo)
                  $(MAKE) foo=$(foo) two
          two:
                  @echo $(foo)

     そうする場合，ユーザが優先したいと思われるすべてのマクロを予測する必要が
     あります．

`SHELL'マクロ
     POSIX準拠の`make'では，シェルプロセスを起動したり，
     `Makefile'ルールを実行するために，内部で`$(SHELL)'マクロを使用
     します．これは`make'で提供される組み込みマクロですが，
     `Makefile'やコマンドライン引数で変更することが可能です．

     すべての`make'が，この`SHELL'マクロを定義するわけではありま
     せん．例えば，OSF/Tru64 `make'がそうです．この実装では，常に
     `/bin/sh'を使用します．そのため，`Makefile'で常に`SHELL'
     を定義するのは良い考えです．Autoconfを使用している場合，以下のようにして
     ください．

          SHELL = @SHELL@

     POSIX準拠の`make'では，`make -e'が使用されている
     場合でも，環境変数から$(SHELL)の値を入手してはなりません(そうでない場合，
     `SHELL=/bin/tcsh'の状況でルールによって何が起こるのか考えてみてくだ
     さい)．

     しかし，すべての`make'がこのような例外を実装しているわけではあり
     ません．例えば，OSF/Tru64 `make'は`SHELL'を使用しないので，
     保護していなくても不思議ではありません．

          % cat Makefile
          SHELL = /bin/sh
          FOO = foo
          all:
                  @echo $(SHELL)
                  @echo $(FOO)
          % env SHELL=/bin/tcsh FOO=bar make -e   # OSF1 V4.0 Make
          /bin/tcsh
          bar
          % env SHELL=/bin/tcsh FOO=bar gmake -e  # GNU make
          /bin/sh
          bar

ルール内のコメント
     コメントをルールに書き込まないでください．

     タブで始まるものは，タブの直後に`#'が続いていても，すべて現在のルー
     ルのコマンドとして扱う`make'もあります．Tru64 Unix V5.1の
     `make'はその一つです．以下の`Makefile'で，シェルで`#
     foo'を実行します．

          all:
                  # foo

`obj/'サブディレクトリ
     びっくりしたくなければ，サブディレクトリを`obj/'と命名しないでくだ
     さい．

     `obj/'ディレクトリが存在する場合，BSD `make'は
     `Makefile'を読み込む前に，そのなかに入ります．このため，現在のディ
     レクトリの`Makefile'は読み込まれません．

          % cat Makefile
          all:
                  echo Hello
          % cat obj/Makefile
          all:
                  echo World
          % make      # GNU make
          echo Hello
          Hello
          % pmake     # BSD make
          echo World
          World

`make -k'
     `make -k'の終了ステータスに依存しないようにしてください．終了ステー
     タスがエラーかどうかを反映する実装もあります．それ以外の実装では，常に成
     功します．

          % cat Makefile
          all:
                  false
          % make -k; echo exit status: $?    # GNU make
          false
          make: *** [all] Error 1
          exit status: 2
          % pmake -k; echo exit status: $?   # BSD make
          false
          *** Error code 1 (continuing)
          exit status: 0

`VPATH'
     POSIXでは，`VPATH'サポートを指定していません．多くの
     `make'は`VPATH'サポートの形式がありますが，その実装は，
     `make'間で一貫していません．

     `VPATH'機能を必要としている人々への最高の提案は，`make'の実
     装を選択しそれに固執するようにと言うことかもしれません．`Makefile'
     の結果は常に移植性があるとは限らないので，移植性の高い`make'を選
     択するのが良いでしょう(ヒント，ヒント)．

     `VPATH'の実装の既知の問題には以下のものがあります．

    `VPATH'と二重のコロンのルール
          `VPATH'への代入で，Sunの`make'は最初の二重コロンのルールの
          組だけを実行します．(このコメントは，1994年からで，現在は無くなっていま
          す．SunOS
          4では移植性があります．これが再生成された場合，それを説明する
          テストケースを送ってください．)

    明示的なルールで`$<'がサポートされていない
          他でも述べたように，明示的なルールで`$<'を使用するのは移植性があり
          ません．必要条件のファイルは，ルール内で明示的な名前にすべきです．
          `VPATH'の検索で必要条件を見つけたい場合，手動でコード全体を書く必要
          があります．例えば，以下のようなパターンを使用します．

               VPATH = ../src
               foo.o: foo.c
                       cc -c `test -f foo.c || echo ../src/`foo.c -o foo.o

    自動的なルールの再書き込み
          SunOS `make'のように，`VPATH'で必要条件を探し，出現するたび
          に適切なルールにを再書き込みする`make'の実装もあります．

          例えば，以下を考えます．

               VPATH = ../src
               foo.o: foo.c
                       cc -c foo.c -o foo.o

          `foo.c'が`../src'で見つかった場合，`cc -c ../src/foo.c -o
          foo.o'を実行します．素晴らしいと思います．

          しかし，それ以外の`make'の実装では，これに依存することは不可能で，
          `VPATH'を手動で検索する必要があります．

               VPATH = ../src
               foo.o: foo.c
                       cc -c `test -f foo.c || echo ../src/`foo.c -o foo.o

          しかし"必要条件の再書き込み"はこれに適用されます．そのため，
          `../src'に`foo.c'がある場合，SunOSの`make'は以下を実行
          します．

               `cc -c `test -f ../src/foo.c || echo ../src/`foo.c -o foo.o'

          以下を生成します．

               cc -c foo.c -o foo.o

          そしてこのために失敗します．あぁ．

          回避策の一つは，ルールのなかに`foo.c'をそのまま書いていないことを確
          かめることです．例えば，以下の三つのルールは安全です．

               VPATH = ../src
               foo.o: foo.c
                       cc -c `test -f ./foo.c || echo ../src/`foo.c -o foo.o
               foo2.o: foo2.c
                       cc -c `test -f 'foo2.c' || echo ../src/`foo2.c -o foo2.o
               foo3.o: foo3.c
                       cc -c `test -f "foo3.c" || echo ../src/`foo3.c -o foo3.o

          必要条件がマクロ内にあるとき，事態はより悪くなります．

               VPATH = ../src
               HEADERS = foo.h foo2.h foo3.h
               install-HEADERS: $(HEADERS)
                       for i in $(HEADERS); do \
                         $(INSTALL) -m 644 `test -f $$i || echo ../src/`$$i \
                           $(DESTDIR)$(includedir)/$$i; \
                       done

          上記の`install-HEADERS'ルールは，`for i in $(HEADERS);'は
          `for i in foo.h foo2.h foo3.h;'に展開され，`foo.h'と
          `foo2.h'はそのまま単語となり，このためサブジェクトは`VPATH' に
          調整されるので，SunOSでは信頼できません．

          三つのファイルが`../src'にある場合，このルールは以下のように実行さ
          れます．

               for i in ../src/foo.h ../src/foo2.h foo3.h; do \
                 install -m 644 `test -f $i || echo ../src/`$i \
                    /usr/local/include/$i; \
               done

          最初の二つの`install'の呼び出しは失敗します．例えば，
          `foo.h'をインストールする事を考えます．

               install -m 644 `test -f ../src/foo.h || echo ../src/`../src/foo.h \
                 /usr/local/include/../src/foo.h;
          以下を生成します．

               install -m 644 ../src/foo.h /usr/local/include/../src/foo.h;

          手動の`VPATH'の検索には問題が無いことに注意してください．しかし，こ
          のコマンドは，間違ったディレクトリに`foo.h'をインストールします．

          ここまで，いくつかの`Makefile'で`foo.c'に対して行なってきた，
          `$(HEADERS)'をどうにかして引用符で囲むことは役に立ちません．

               install-HEADERS: $(HEADERS)
                       headers='$(HEADERS)'; for i in $$headers; do \
                         $(INSTALL) -m 644 `test -f $$i || echo ../src/`$$i \
                           $(DESTDIR)$(includedir)/$$i; \
                       done

          実際，`headers='$(HEADERS)''は`headers='foo.h foo2.h foo3.h''
          に展開され，`foo2.h'はそのまま単語になります．(一方，
          `headers='$(HEADERS)'; for i in $$headers;'の慣用句は，`for i
          in;'で構文エラーになるシェルもあるので，`$(HEADERS)'が空の場合は良
          い考えです．)

          回避方法の一つは，不要な`../src/'の接頭辞を手動で削除する事です．
               VPATH = ../src
               HEADERS = foo.h foo2.h foo3.h
               install-HEADERS: $(HEADERS)
                       headers='$(HEADERS)'; for i in $$headers; do \
                         i=`expr "$$i" : '../src/\(.*\)'`;
                         $(INSTALL) -m 644 `test -f $$i || echo ../src/`$$i \
                           $(DESTDIR)$(includedir)/$$i; \
                       done

          Automakeも同様なことを行ないます．

    OSF/Tru64 `make'の`make'は，不思議なディレクトリの必要条件を作成する
          必要条件が`VPATH'のサブディレクトリにある場合，Tru64 `make'
          はそれを現在のディレクトリに作成します．

               % mkdir -p foo/bar build
               % cd build
               % cat >Makefile <<END
               VPATH = ..
               all: foo/bar
               END
               % make
               mkdir foo
               mkdir foo/bar

          ルールは，前に存在している手動の`VPATH'検索を使用するので，これは予
          想外の結果になるはずです．

               VPATH = ..
               all : foo/bar
                       command `test -d foo/bar || echo ../`foo/bar

          上記の`command'は，現在のディレクトリに作成された，空の
          `foo/bar'ディレクトリで実行されます．

    ターゲットの探索
          GNU `make'は，`VPATH'で見つかったファイルを使用す
          べきとき決定するアルゴリズムは幾分複雑です．*Note How
          Directory Searches are Performed: (make)Search Algorithm.

          ターゲットのリビルドが必要な場合，GNU `make'は，このター
          ゲットを`VPATH'で検索している間に見つかったファイル名を廃棄し，
          `Makefile'で与えられたファイル名を使用して，ローカルなファイルをビ
          ルドします．ターゲットをリビルドする必要が無い場合は，GNU
          `make'は`VPATH'で検索している間に見つかったファイル名を使用
          します．

          NetBSD `make'のような，その他の`make'の実装は，より簡単
          に記述できます．`VPATH'で検索している間に見つかったファイル名は，ター
          ゲットがリビルドを必要としているかどうかにかかわらず使用されます．このた
          め＜新しいファイルはローカルに作成されますが，`VPATH'に位置する既存
          のファイルは更新されます．

          しかし，OpenBSDとFreeBSDの`make'は，明示的なルールを持つ依存性を
          探すために`VPATH'を実行しません．これは非常にイライラします．

          `VPATH'で，autoconfパッケージのビルドを試みるとき(例えば，
          `mkdir build && cd build && ../configure')，GNU `make'
          `make'は`build'ディレクトリですべてのローカ
          ルにビルドしますが，BSD `make'はローカルな新しいファイ
          ルをビルドし，ソースディレクトリの既存のファイルを更新する事を意味します．

               % cat Makefile
               VPATH = ..
               all: foo.x bar.x
               foo.x bar.x: newer.x
                       @echo Building $@
               % touch ../bar.x
               % touch ../newer.x
               % make        # GNU make
               Building foo.x
               Building bar.x
               % pmake       # NetBSD make
               Building foo.x
               Building ../bar.x
               % fmake       # FreeBSD make, OpenBSD make
               Building foo.x
               Building bar.x
               % tmake       # Tru64 make
               Building foo.x
               Building bar.x
               % touch ../bar.x
               % make        # GNU make
               Building foo.x
               % pmake       # NetBSD make
               Building foo.x
               % fmake       # FreeBSD make, OpenBSD make
               Building foo.x
               Building bar.x
               % tmake       # Tru64 make
               Building foo.x
               Building bar.x

          NetBSDの`make'が`../bar.x'をVPATHのある場所で更新し，
          FreeBSD，OpenBSD，そしてTru64の`make'は，`../bar.x'が最新の
          ときでも，常に`bar.x'を更新することに注意して下さい．

          言及する価値のあるもう一つの点は，GNU `make'が一度
          `VPATH'のファイル名を無視する事に決めると(例えば，上記の例の
          `../bar.x'を無視する)，ターゲットが他のルールの必要条件になったとき，
          それを無視し続けます．

          以下の例では，`bar.x: newer.x'のルールを実行している間に
          `bar.x' の`VPATH'の結果を無視するので，`.x.y'のルールを実
          行する前に，GNU `make'は`VPATH'の`bar.x'を探
          さない事を示しています．

               % cat Makefile
               VPATH = ..
               all: bar.y
               bar.x: newer.x
                       @echo Building $@
               .SUFFIXES: .x .y
               .x.y:
                       cp $< $@
               % touch ../bar.x
               % touch ../newer.x
               % make        # GNU make
               Building bar.x
               cp bar.x bar.y
               cp: cannot stat `bar.x': No such file or directory
               make: *** [bar.y] Error 1
               % pmake       # NetBSD make
               Building ../bar.x
               cp ../bar.x bar.y
               % rm bar.y
               % fmake       # FreeBSD make, OpenBSD make
               echo Building bar.x
               cp bar.x bar.y
               cp: cannot stat `bar.x': No such file or directory
               *** Error code 1
               % tmake       # Tru64 make
               Building bar.x
               cp: bar.x: No such file or directory
               *** Exit 1

          `bar.x: newer.x'ルールからコマンドを削除した場合，GNU
          `make'では手品のように動作し始める事に注意してください．それは，
          `bar.x'が更新されていない事を知っているので，`VPATH'
          (`../bar.x')の結果がうまく使用できるという結果を廃棄しません．Tru64
          でも動作しますが，FreeBSDとOpenBSDではまだそうではありません．

               % cat Makefile
               VPATH = ..
               all: bar.y
               bar.x: newer.x
               .SUFFIXES: .x .y
               .x.y:
                       cp $< $@
               % touch ../bar.x
               % touch ../newer.x
               % make        # GNU make
               cp ../bar.x bar.y
               % rm bar.y
               % pmake       # NetBSD make
               cp ../bar.x bar.y
               % rm bar.y
               % fmake       # FreeBSD make, OpenBSD make
               cp bar.x bar.y
               cp: cannot stat `bar.x': No such file or directory
               *** Error code 1
               % tmake       # True64 make
               cp ../bar.x bar.y

          すべての`make'の実装が`VPATH'によるダーゲットの検索に依存し
          ないようにお願いするのが，唯一の解決方法だと思います．言い替えると，
          `VPATH'はビルドされていないソースへの予約にすべきです．


単一のサフィックスルールと分離された依存性
     "単一のサフィックスルール(Single Suffix Rule)"は，基本的に(推測され
     る)通常のサフィックスルール(`.from.to:')ですが，_ディスティネー
     ション(destination)_サフィックスは空(`.from:')です．

     "分離された依存性(Separated
     dependencies)"は，ルールを定義すること無
     く，ターゲットの必要条件のリストを単純に参照します．通常，一方ではルール
     を，もう一方で依存性をリストアップすることが可能です．

     Solarisの`make'は，単一のサフィックスルールで定義されたターゲッ
     トに対する，分離された依存性をサポートしていません．

          $ cat Makefile
          .SUFFIXES: .in
          foo: foo.in
          .in:
                  cp $< $ $ touch foo.in
          $ make
          $ ls
          Makefile  foo.in

     一方GNU Makeはサポートしています．

          $ gmake
          cp foo.in foo
          $ ls
          Makefile  foo       foo.in

     それは`foo: foo.in'の依存性無しで動作することに注意してください．

          $ cat Makefile
          .SUFFIXES: .in
          .in:
                  cp $< $ $ make foo
          cp foo.in foo

     そして，それは二重のサフィックスの継承ルールで動作することにも注意してく
     ださい．

          $ cat Makefile
          foo.out: foo.in
          .SUFFIXES: .in .out
          .in.out:
                  cp $< $ $ make
          cp foo.in foo.out

     結果として，そのような状況では，ターゲットルールを書く必要があります．

タイムスタンプの分解能
     伝統的に，ファイルのタイムスタンプの分解能は1秒になっていて，
     `make'はファイルがそれ以外のものより新しいかどうかを決定するため
     これらのタイムスタンプを使用していました．しかし，最近のファイルシステム
     には分解能が1ナノ秒のタイムスタンプになっているものもたくさんあります．
     `make'の実装には，タイムスタンプ全体を見るものもあります．それ以
     外では，分数部分を無視し，結果として間違ったものとなるはずです．通常，こ
     れは問題ありませんが，非常に稀な状況では，タイムスタンプの切り詰めのバグ
     を回避するため，`sleep 1'のような手法を使用する必要があるかもしれま
     せん．

     `cp -p'と `touch -r'のようなコマンドでは，通常はファイルのタイ
     ムスタンプを完全な分解能でコピーしません(*note Limitations of
     Usual Tools::)．このため，以下のようなルールは気を付けるべきです．

          dest: src
                  cp -p src dest

     それは，タイムスタンプの切り詰め後では，`src'よりも`dest'が古
     くなり，このため`make'は次回も不必要な仕事を再び行なうはずです．
     この問題を回避するため，タイムスタンプファイルを使用することが可能です．
     例えば以下のようにします．

          dest-stamp: src
                  cp -p src dest
                  date >dest-stamp



File: autoconf-ja.info,  Node: Manual Configuration,  Next: Site Configuration,  Prev: Portable Shell,  Up: Top

11 手動のコンフィグレーション
*****************************

数種類の特徴については，テストプログラムを実行するだけでは自動的に推測で
きません．例えば，オブジェクトファイルのフォーマットの詳細や，コンパイラ
やリンカに渡す必要がある特別なオプションもあります．そのように，
`configure'に`uname'プログラムの出力を調査させたり，特定の
システムの特有のライブラリを探すといった，特別な手法を使用して特徴を調査
することが可能です．しかし，Autoconfは，推測できない特徴を扱うための一様
な形式の手法を提供しています．

* Menu:

* Specifying Names::            Specifying the system type
* Canonicalizing::              Getting the canonical system type
* Using System Type::           What to do with the system type


File: autoconf-ja.info,  Node: Specifying Names,  Next: Canonicalizing,  Up: Manual Configuration

11.1 システムタイプの指定
=========================

他のGNU `configure'スクリプトのように，Autoconfが生成 した
`configure'スクリプトでは，システムタイプの標準名に基づいて
決定することが可能で，それは以下のような形式になります．
`CPU-VENDOR-OS'で，OSは， `SYSTEM'や`KERNEL-SYSTEM'が可能です．

   `configure'は，通常，実行しているシステムタイプの標準名を推測す
ることが可能です．そうするために，`config.guess'と呼ばれるスクリ
プトを呼び出し，それは，`uname'コマンドや，Cプリプロセッサが前もっ
て定義したシンボルを使用して推測します．

   その代わりとして，ユーザは`configure'へのコマンドライン引数で，
システムタイプを指定可能です．それはクロスコンパイル時に必要です．クロス
コンパイルで最も複雑な場合，三つのシステムタイプが呼び出されます．指定す
るオプションは以下の通りです．

`--build=BUILD-TYPE'
     パッケージがコンフィグレーションされコンパイルされるシステムのタイプです．
     デフォルトは，`config.guess'の実行結果になります．

`--host=HOST-TYPE'
     パッケージが実行されるシステムタイプです．デフォルトで，それはビルドマシ
     ンと同じになります．それを指定することでクロスコンパイルモードが使用可能
     になります．

`--target=TARGET-TYPE'
     コードを生成するパッケージ中のコンパイラツールに対するシステムのタイプで
     す(必要になることは滅多にありません)．デフォルトはホストと同じです．

   `config.guess'の結果に優先することを意図した場合，
`--host'はクロスコンパイルを利用可能にするものなので，
`--host'ではなく`--build'を使用してください．歴史的な理由
から，`--host'を渡してもビルド形式を変更します．そのため，
`--host'を指定するときは常に`--build'も確実に指定してください．
これは将来，修正されるでしょう．

     ./configure --build=i686-pc-linux-gnu --host=m68k-coff

上記でクロスコンパイルモードになりますが，以下のようなコンフィグレーショ
ンでは，指定されているコンパイラで生成されるコートが実行不可能なので，
`configure'は失敗するでしょう．

     ./configure CC=m68k-coff-gcc

   `configure'は，多くのシステムタイプに対する短い別名を認識します．
例えば，`decstation'は`mips-dec-ultrix4.2'の代わりに使用するこ
とが可能です． `configure'は，システムタイプの別名を標準化するた
めに`config.sub'と呼ばれるスクリプトを実行します．

このセクションでは，故意に時代遅れのインターフェースの記述を省略してきま
した．*Note Hosts and Cross-Compilation::を参照してください．


File: autoconf-ja.info,  Node: Canonicalizing,  Next: Using System Type,  Prev: Specifying Names,  Up: Manual Configuration

11.2 標準的なシステムタイプの取得
=================================

以下のマクロで，システムタイプが`configure'スクリプトで利用可能
になります．

   変数`build_alias'，`host_alias'，そして`target_alias'は，
常に厳密な`--build'，`--host'，そして`--target'への
引数となります．特に，対応する`AC_CANONICAL'マクロが実行されていて
も，ユーザが使用していない場合は空のままになります．すべてのconfigureス
クリプトは，これらの変数をどこででも使用可能です．これらは，ユーザとの対
話処理で使用されるべき変数です．

システムタイプを元にした特殊な環境を認識する必要がある場合，標準的なシス
テム名を取得するために以下のマクロを実行してください．これらの変数はマク
ロ呼び出しの前で設定されません．

   これらのマクロを使用する場合，ソースコードと一緒に`config.guess'
と`config.sub'を配布する必要があります．`configure'がこ
れらのスクリプトを探すディレクトリを制御するために使用可能な
`AC_CONFIG_AUX_DIR'マクロに関する情報は，*Note Output::.

 -- Macro: AC_CANONICAL_BUILD
     標準的なビルドシステムタイプの変数の`build'と，それを識別する三つの
     部分`build_cpu'，`build_vendor'，そして`build_os'を求めま す．

     `--build'が指定されている場合，`build'は`build_alias'
     の`config.sub'で標準化されたものになり，それ以外では，シェルスク
     リプト`config.guess'で決定されます．

 -- Macro: AC_CANONICAL_HOST
     標準的なホストシステムタイプ変数の`host'と，それを識別する三つの部
     分`host_cpu'，`host_vendor'，そして`host_os'を求めます．

     `--host'が指定されている場合，`host'は`host_alias'の
     `config.sub'で標準化されたものになり，それ以外では，シェルスクリ
     プト`config.guess'で決定されます．

 -- Macro: AC_CANONICAL_TARGET
     標準的なターゲットシステムタイプ変数の`target'，それを識別する三つ
     の部分`target_cpu'，`target_vendor'，そして`target_os' を
     求めます．

     `--target'が指定されている場合，`target'は
     `target_alias'の`config.sub'で標準化されたものになり，それ
     以外では，デフォルトで`host'になります．

下位互換性のコードのため，人為的なものがあることに注意してください．詳細
は，*Note Hosts and Cross-Compilation::.


File: autoconf-ja.info,  Node: Using System Type,  Prev: Canonicalizing,  Up: Manual Configuration

11.3 システムタイプを使用する
=============================

どのようにして標準的なシステムタイプを使用するのでしょう？通常，システム
特有のCファイルを選択するために`configure.ac'で，一つ以上の
`case'文を使用します．`AC_CONFIG_LINKS'を使用し，システム名に
基づくこれらのファイルを，`host.h'や`target.c'のような一般的な
名前にリンクしてください(*note Configuration Links::)．`case' 文の
パターンでは，以下の断片部分のように，複数の状態を分類するためシェルのワ
イルドカードを使用することが可能です．

     case $target in
     i386-*-mach* | i386-*-gnu*)
                  obj_format=aout emulation=mach bfd_gas=yes ;;
     i960-*-bout) obj_format=bout ;;
     esac

そして，その後で`configure.ac'では以下のように使用します．

     AC_CONFIG_LINKS(host.h:config/$machine.h
                     object.h:config/$obj_format.h)

   上記の例では，いくつかのアーキテクチャ(`$build')でビルドされ，別の
もの(`$host')で実行することが可能なツールから持ってこられているため，
`$target'を使用していて，第三のアーキテクチャ(`$target')に対す
るデータを扱っていることにに注意してください．そのようなツールは，通常コ
ンパイラスイートの一部で，それは特殊な`$target'に対するコードを生成
します．

   しかし，`$target'はほとんどのパッケージで意味が無いようにすべきです．
プログラムを実行するシステムを決定の基本にしたい場合，以下の抜粋部分のよ
うに，`$host'変数を使用していることを確かめてください．

     case $host in
       *-*-msdos* | *-*-go32* | *-*-mingw32* | *-*-cygwin* | *-*-windows*)
         MUMBLE_INIT="mumble.ini"
         ;;
       *)
         MUMBLE_INIT=".mumbleinit"
         ;;
     esac
     AC_SUBST([MUMBLE_INIT])

クロスコンパイルツールを探すため，ホストシステムタイプを使用することも可
能です．そうするための`AC_CHECK_TOOL'マクロの情報は，*Note Generic
Programs::.


File: autoconf-ja.info,  Node: Site Configuration,  Next: Running configure Scripts,  Prev: Manual Configuration,  Up: Top

12 サイトのコンフィグレーション
*******************************

`configure'スクリプトは，何種類かのローカルコンフィグレーション
の宣言をサポートします．ユーザが外部ソフトウェアパッケージの場所を指定し
たり，追加の特徴を含めたり排除したり，編集された名前でプログラムをインス
トールしたり，`configure'オプションに対してデフォルト値を設定し
たりする方法があります．

* Menu:

* External Software::           Working with other optional software
* Package Options::             Selecting optional features
* Pretty Help Strings::         Formatting help string
* Site Details::                Configuring site details
* Transforming Names::          Changing program names when installing
* Site Defaults::               Giving `configure' local defaults


File: autoconf-ja.info,  Node: External Software,  Next: Package Options,  Up: Site Configuration

12.1 外部ソフトウェアとともに動作する
=====================================

既にインストールしてある他のソフトウェアパッケージを要求したり，追加で使
用していたりしているパッケージもあります．ユーザは，使用するそのような外
部ソフトの指定するために，`configure'のコマンドラインオプション
を与えることが可能です．オプションは以下の形式うちの一つです．

     --with-PACKAGE[=ARG]
     --without-PACKAGE

   例えば，`--with-gnu-ld'は，他のリンカの代わりにGNUリン
カで動作することを意味します．`--with-x'はX Window Systemで動作す
ることを意味します．

   ユーザはパッケージ名に続く引数を，`='とその引数で与えることが可能で
す．`no'引数を与えるとパッケージはデフォルトを使用します．つまり，
パッケージを使用し_ません_．`yes'も`no'もない引数は，この
プログラムで動作すると予想される他のパッケージをより正確に指定するために，
他のパッケージの名前やバージョンナンバーを含ることが可能です．引数が与え
られていない場合，デフォルトは`yes'です．
`--without-PACKAGE'は，`--with-PACKAGE=no'と同 じです．

   `configure'スクリプトは，サポートしていない
`--with-PACKAGE'オプションに文句を言いません．これにより，
複数のパッケージを含むソースツリーにおいて，パッケージが異なるオプション
をサポートするとき，パッケージによってはサポートするものもあるオプション
で深刻なエラーメッセージを出力すること無く，トップレベルの
`configure'スクリプトでのコンフィグレーションが可能になります．
残念な副作用として，オプションのスペルエラーは診断されません．この問題の
より良い手法はまだ提案されていません．

   使用される可能性のあるそれぞれの外部ソフトウェアパッケージに対して，
`configure'のユーザがそれの使用を依頼したかどうかを検出するため，
`configure.ac'で`AC_ARG_WITH'を呼び出すべきです．それぞれのパッ
ケージでデフォルトで使用するかどうかと，有効な引数については，好きにして
ください．

 -- Macro: AC_ARG_WITH (PACKAGE, HELP-STRING, [ACTION-IF-GIVEN],
          [ACTION-IF-NOT-GIVEN])
     ユーザが`configure'に，オプション`--with-PACKAGE'
     や`--without-PACKAGE'を与えた場合，シェルコマンド
     ACTION-IF-GIVENを実行します．どちらも与えられていない場合は，シェ
     ルコマンドACTION-IF-NOT-GIVENを実行します．名前PACKAGEは，こ
     のプログラムとともに動作する，他のソフトウェアパッケージを示します．それ
     は，英数字とダッシュだけから構成されるべきです．

     オプションの引数は，`-'文字を`_'に変更したシェル変数
     `with_PACKAGE'の実際の値となる，シェル変数`withval'内の
     シェルコマンドACTION-IF-GIVENが利用可能です．望むなら，変わりにそ
     の値を使用してもかまいません．

     引数HELP-STRINGは以下のような，オプションの説明です．
            --with-readline         support fancy command line editing

     詳細が必要な場合，HELP-STRINGは一行以上でもかまいません．
     `configure --help'で行が整列していることを確認してください．ヘルプ
     文字列でのタブの使用は避けてください．前置するスペースを生成するため，ヘ
     ルプ文字列を`['と`]'で囲む必要があるでしょう．

     HELP-STRINGは，マクロ`AS_HELP_STRING'で書式化すべきです (*note
     Pretty Help Strings::)．

 -- Macro: AC_WITH (PACKAGE, ACTION-IF-GIVEN, [ACTION-IF-NOT-GIVEN])
     これはヘルプ文字列の提供をサポートしていない，`AC_ARG_WITH'の時代遅
     れのバージョンです．


File: autoconf-ja.info,  Node: Package Options,  Next: Pretty Help Strings,  Prev: External Software,  Up: Site Configuration

12.2 パッケージオプションの選択
===============================

ソフトウェアパッケージに追加のコンパイル時の特徴がある場合，それらをコン
パイルするかどうか指定するため，ユーザは`configure'コマンドライ
ンオプションを与えることが可能です．オプションは以下の書式の一つになりま
す．

     --enable-FEATURE[=ARG]
     --disable-FEATURE

これらのオプションで，ビルドしインストールする追加の機能を，ユーザが選択
することが可能になります．`--enable-FEATURE'オプションで，
ある機能に異なる動作をさせたり，ある機能を他の機能で置換させたりするべき
ではありません．それらは，プログラムの部分をビルドする，または削除するた
めだけにすべきです．

   ユーザは，機能の名前に続く引数を`='とその引数で与えることが可能です．
`no'引数を与えるとその機能は利用でき_ません_．機能とは，
`--enable-debug=stabs'のような引数です．引数が与えられていない場
合は，デフォルトで`yes'です．`--disable-FEATURE'は，
`--enable-FEATURE=no'と同じです．

   `configure'スクリプトは，サポートしていない
`--enable-FEATURE'オプションに文句を言いません．これにより，
複数のパッケージを含むソースツリーにおいて，パッケージが異なるオプション
をサポートするとき，パッケージによってはサポートするものもあるオプション
で深刻なエラーメッセージを出力すること無く，トップレベルの `configure'
スクリプトでのコンフィグレーションが可能になります．
残念な副作用として，オプションのスペルエラーは診断されません．この問題の
より良い手法はまだ提案されていません．

   使用される可能性のあるそれぞれの追加の機能に対して，`configure'
のユーザがそれを含めることを依頼したかどうかを検出するため，
`configure.ac'で`AC_ARG_ENABLE'を呼び出すべきです．それぞれの
機能をデフォルトで使用するかどうかと，有効な引数については，好きにしてく
ださい．

 -- Macro: AC_ARG_ENABLE (FEATURE, HELP-STRING, [ACTION-IF-GIVEN],
          [ACTION-IF-NOT-GIVEN])
     ユーザが，`configure'にオプション`--enable-FEATURE'
     や`--disable-FEATURE'を与えた場合，シェルコマンド
     ACTION-IF-GIVENを実行します．どちらも与えられない場合は，シェルコ
     マンドACTION-IF-NOT-GIVENを実行します．名前FEATUREはオプショ
     ンのユーザレベルの機能を示します．それは，英数字とダッシュだけで構成すべ
     きです．

     オプションの引数は，`-'文字を`_'に変更したシェル変数
     `enable_PACKAGE'の実際の値となる，シェル変数`enableval'
     内のシェルコマンドACTION-IF-GIVENが利用可能です．望むなら，変わり
     にその値を使用してもかまいません．HELP-STRING引数は，
     `AC_ARG_WITH'と同様にしてください(*note External Software::)．

     HELP-STRINGは，マクロ`AS_HELP_STRING'で書式化すべきです (*note
     Pretty Help Strings::)．

 -- Macro: AC_ENABLE (FEATURE, ACTION-IF-GIVEN,
          [ACTION-IF-NOT-GIVEN])
     これはヘルプ文字列の供給をサポートしない`AC_ARG_ENABLE'の時代遅れの
     バージョンです．


File: autoconf-ja.info,  Node: Pretty Help Strings,  Next: Site Details,  Prev: Package Options,  Up: Site Configuration

12.3 ヘルプ文字列を小奇麗にする
===============================

`AC_ARG_WITH' (*note External Software::)と`AC_ARG_ENABLE' (*note
Package Options::)で使用する`help strings'を正しく書式化する
ことに挑戦してみましょう．具体的には，独自の`help strings'を，標準
的なAutoconfの`help strings'のように，`configure --help' で列
に適切に並ぶようにしたいと思うでしょう．`AS_HELP_STRING'マクロの目
的はここにあります．

 -- Macro: AS_HELP_STRING (LEFT-HAND-SIDE, RIGHT-HAND-SIDE)
     ユーザが`configure --help'を実行したとき，小奇麗なヘルプ文字列に展
     開します．通常は，`AC_ARG_WITH' (*note External Software::)や
     `AC_ARG_ENABLE' (*note Package Options::)で使用します．以下の例でよ
     り分かり易くなるでしょう．

          AC_DEFUN([TEST_MACRO],
          [AC_ARG_WITH([foo],
                       AS_HELP_STRING([--with-foo],
                                      [use foo (default is NO)]),
                       [ac_cv_use_foo=$withval], [ac_cv_use_foo=no])
          AC_CACHE_CHECK([whether to use foo],
                         [ac_cv_use_foo], [ac_cv_use_foo=no])])

     `AS_HELP_STRING'の呼び出しは*引用符で囲まない*ことに注意して
     ください．`configure --help'の最後の数行に，以下のような行が現れま
     す．

          --enable and --with options recognized:
            --with-foo              use foo (default is NO)

     `AS_HELP_STRING'マクロは，以下の例のように，LEFT-HAND-SIDE そ
     して/またはRIGHT-HAND-SIDEがマクロ引数で構成される時，特に役に立ち
     ます．

          AC_DEFUN(MY_ARG_WITH,
          [AC_ARG_WITH([$1],
                       AS_HELP_STRING([--with-$1], [use $1 (default is $2)]),
                       ac_cv_use_$1=$withval, ac_cv_use_$1=no),
          AC_CACHE_CHECK(whether to use $1, ac_cv_use_$1, ac_cv_use_$1=$2)])


File: autoconf-ja.info,  Node: Site Details,  Next: Transforming Names,  Prev: Pretty Help Strings,  Up: Site Configuration

12.4 サイトのコンフィグレーションの詳細
=======================================

複雑なサイト指定の情報が必要となるソフトウェアパッケージもあります．例え
ば，特定のサービスで使用する，ホスト名，会社名，そして連絡先の電子メール
アドレスがあげられます．Metaconfigが生成したコンフィグレーションスクリプ
トには，そのような情報を対話的に尋ねるものもあるので，Autoconfが生成した
対話的でないコンフィグレーションスクリプトが，どうやってその情報を得るの
かと不思議に思うこともあるでしょう．

   そのようなサイトコンフィギュレーション情報は，プログラムではなく_ユー
ザだけ_が編集するファイルに書き込むべきです．ファイルの場所は，
`prefix'変数に基づくところか，ユーザのホームディレクトリのような，
標準的な場所が可能です．それは環境変数で指定するべきでしょう．プログラム
では，コンパイル時ではなく実行時にファイルを調査するべきです．実行時のコ
ンフィグレーションはユーザにとって便利で，コンフィグレーション時に情報を
得るよりコンフィグレーション処理が簡単になります．データファイルを書き込
む場所の詳細は，*Note Variables for Installation Directories:
(standards)Directory Variables.


File: autoconf-ja.info,  Node: Transforming Names,  Next: Site Defaults,  Prev: Site Details,  Up: Site Configuration

12.5 インストール時のプログラム名の変換
=======================================

Autoconfは，インストール時にプログラム名を変更することをサポートします．
これらの変換を使用するため，`configure.ac'でマクロ
`AC_ARG_PROGRAM'を呼び出す必要があります．

 -- Macro: AC_ARG_PROGRAM
     出力変数`program_transform_name'に，インストールするプログラムの名
     前を変更するため，`sed'コマンドのシーケンスを配置します．

     下記のオプションのいずれかが`configure'に与えれらている場合，プ
     ログラム名は適宜変換されます．それ以外では，`AC_CANONICAL_SYSTEM'
     が呼び出されて，`--target'の値が与えられている場合，ダッシュが続い
     ているターゲットタイプがプレフィクスとして使用されます．それ以外ではプロ
     グラム名は変換されません．

* Menu:

* Transformation Options::      `configure' options to transform names
* Transformation Examples::     Sample uses of transforming names
* Transformation Rules::        `Makefile' uses of transforming names


File: autoconf-ja.info,  Node: Transformation Options,  Next: Transformation Examples,  Up: Transforming Names

12.5.1 変換オプション
---------------------

`configure'に以下のコマンドラインオプションを与えることで，名前
変換を指定することが可能です．

`--program-prefix=PREFIX'
     PREFIXを名前に前置します．

`--program-suffix=SUFFIX'
     SUFFIXを名前に後置します．

`--program-transform-name=EXPRESSION'
     `sed'のEXPRESSIONで名前への代入を実行します．


File: autoconf-ja.info,  Node: Transformation Examples,  Next: Transformation Rules,  Prev: Transformation Options,  Up: Transforming Names

12.5.2 変換例
-------------

これらの変換は，クロスコンパイル開発環境の一部となるプログラムで役に立ち
ます．例えば，`--target=i960-vxworks'オプションでコンフィグレーショ
ンされたSun 4でクロスアセンブラの実行では，通常，`as'ではなく
`i960-vxworks-as'がインストールされるので，ネイティブのSun 4アセン
ブラと混在できます．

   GNUプログラムを，他のプログラムを隠してしまうような同じ名前で
システムにインストールしたくない場合，プログラム名を`g'から始めるこ
とができます．例えば，GNU `diff'を
`--program-prefix=g'でコンフィグレーションする場合，`make
install'時に`/usr/local/bin/gdiff'としてインストールされます．

   より洗練された例として，以下を使用することができます．

     --program-transform-name='s/^/g/; s/^gg/g/; s/^gless/less/'
   これは，ソースツリーで，`g'をほとんどのプログラム名に前置し，
`gdb'のように既に持っているものと，`less'と`lesskey'のよ
うにGNUプログラムでないものは例外とすることができます．(この機
能を使用するために，セットアップされたプログラムを含むソースツリーを持っ
ていることが仮定されます．)

同時にいくつかのプログラムの複数のバージョンをインストールする方法の一つ
として，一つあるいは両方の名前にバージョンナンバーを追加することです．例
えば，しばらくの間Autoconfバージョン1を保持したい場合，Autoconfバージョ
ン2を，`/usr/local/bin/autoconf2'や
`/usr/local/bin/autoheader2'等としてプログラムをインストールするた
め，`--program-suffix=2'を使用してコンフィグレーションすることが
可能です．それにもかかわらず，バイナリのみ名前が変更されることに注意して
ください．そのため，オーバーラップする可能性のあるライブラリファイルは問
題になるでしょう．


File: autoconf-ja.info,  Node: Transformation Rules,  Prev: Transformation Examples,  Up: Transforming Names

12.5.3 変換規則
---------------

`Makefile.in'で変数`program_transform_name'を使用する方法は以
下のようになります．

     PROGRAMS = cp ls rm
     transform = @program_transform_name@
     install:
             for p in $(PROGRAMS); do \
               $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p | \
                                                   sed '$(transform)'`; \
             done

     uninstall:
             for p in $(PROGRAMS); do \
               rm -f $(DESTDIR)$(bindir)/`echo $$p | sed '$(transform)'`; \
             done

   `program_transform_name'が空ではなく，無意味なセパレータがないこと
が保証されます．そのため，`;'使用している`sed'プログラムに
`program_transform_name'を安全に埋め込むことができます．

     transform = @program_transform_name@
     transform_exe = s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/

   ドキュメントファイル(Texinfoや`man')で変換するどうかは，慎重を要す
る質問です．名前を変える理由がいくつかあるため，完全な答えがあるとは思わ
れません．ドキュメントは通常，特定のアーキテクチャ特有のものではなく，
Texinfoファイルはシステムドキュメントと衝突しません．しかし，それらは同
じファイルの前のバージョンと衝突したり，`man'ページはシステムドキュ
メントと衝突することがあるかもしれません．妥協案として，`man'ページ
は名前を変換してTexinfoマニュアルは変換しないのがおそらく最善でしょう．


File: autoconf-ja.info,  Node: Site Defaults,  Prev: Transforming Names,  Up: Site Configuration

12.6 サイトのデフォルトの設定
=============================

Autoconfが生成した`configure'スクリプトで，コンフィグレーション
の値に対して，サイトのデフォルト値を供給できるものもあります．これは，サ
イト全体と システム全体の初期化ファイルを作成することで可能となります．

   環境変数`CONFIG_SITE'が設定されている場合，`configure'は，
その値を読み込むシェルスクリプトの名前として使用します．それ以外では，シェ
ルスクリプト`PREFIX/share/config.site'があればそれを読み込み，
次に`PREFIX/etc/config.site'があればそれを読み込みます．この
ため，それらが衝突する状況では，マシン特有のファイルでの設定がマシン非依
存の設定に優先します．

サイトファイルは任意のシェルスクリプトが可能ですが，本来なら特定の種類の
コードだけがその中にあるのが適切です．`configure'はサイトファイ
ルを読み込んだ後でキャッシュファイルを読み込むので，サイトファイルは，そ
のシステムで実行されるAutoconfが生成した全ての`configure'スクリ
プト間で，デフォルトのキャッシュファイルを共有することが可能になっていま
す(*note Cache Files::)．キャッシュファイルは特定のコンパイラに対しての
みで有効ですが，システムの多くは複数の利用可能なコンパイラがあるので，デ
フォルトのキャッシュファイルをサイトファイルに設定した場合，サイトファイ
ルで出力変数`CC'を設定するのは良い考えです．

   `configure'へのコマンドラインオプションで，サイトファイルで設定
された値を調査したり優先したりすることが可能です．オプションは，ダッシュ
をアンダースコアに変更した，オプションと同じ名前のシェル変数を設定します．
例外は，`--without-'と`--disable-'オプションが，対応する
`--with-'や`--enable-'オプションに値`no'を与えたものに似
ていることです．このため，`--cache-file=localcache'は，変数
`cache_file'を値`localcache'に設定し，
`--enable-warnings=no'や`--disable-warnings'は，変数
`enable_warnings'を値`no'に設定しします．
`--prefix=/usr'は，変数`prefix'を値`/usr'に設定します．
といったようになっています．

   デフォルトでない値を与える必要がある場合，サイトファイルは`CFLAGS'
のような他の出力変数に対しデフォルト値を設定するための良い場所です．通常
コマンドラインで繰り返し行っていることならなんでもできます．PREFIX
やEXEC_PREFIXに対してデフォルト値ではないものを使用したい場合(サイ
トファイルの場所がどこであれ)，`CONFIG_SITE' を用いて指定すると，サ
イトファイルで設定できます．

サイトファイル自身でキャッシュ値を設定することもできます．こうすることで，
テストプログラムの実行が必要な特徴の調査が不可能なクロスコンパイルで役に
立ちます．システムに対して`PREFIX/etc/config.site' でこれらの
値を正しく設定することで，"キャッシュの用意"が可能です．設定する必要が
あるキャッシュ変数名を見つけるため，影響を受けた`configure'スク
リプトやこれらのマクロに対するAutoconf M4ソースコードで，名前に
`_cv_'を伴うシェル変数を探してください．

キャッシュファイルは，サイトファイルで設定した変数を無効にしないよう注意
深く実行します．また，サイトファイルでコマンドラインオプションを無効にす
るべきではありません．コードでは，`prefix'と`cache_file' のよ
うな変数を変更する前に，(`configure'の最初の方で設定される) デフォ
ルト値をがあるかどうかを調査するべきです．

   サンプルファイル`/usr/share/local/gnu/share/config.site'が以下のよ
うになります．コマンド`configure --prefix=/usr/share/local/gnu' は，
(`CONFIG_SITE'で異なるファイルを設定していない場合)このファイルを読
み込みます．

     # config.site for configure
     #
     # Change some defaults.
     test "$prefix" = NONE && prefix=/usr/share/local/gnu
     test "$exec_prefix" = NONE && exec_prefix=/usr/local/gnu
     test "$sharedstatedir" = '$prefix/com' && sharedstatedir=/var
     test "$localstatedir" = '$prefix/var' && localstatedir=/var

     # Give Autoconf 2.x generated configure scripts a shared default
     # cache file for feature test results, architecture-specific.
     if test "$cache_file" = /dev/null; then
       cache_file="$prefix/var/config.cache"
       # A cache file is only valid for one C compiler.
       CC=gcc
     fi


File: autoconf-ja.info,  Node: Running configure Scripts,  Next: config.status Invocation,  Prev: Site Configuration,  Up: Top

13 `configure'スクリプトの実行
******************************

以下は，`configure'スクリプトを使用したパッケージのコンフィグレー
ション方法の説明書で，パッケージの`INSTALL'ファイルに含めるのに適切
なものです．使用可能なプレーンテキストバージョンの`INSTALL' は，
Autoconfに付属しています．

* Menu:

* Basic Installation::          Instructions for typical cases
* Compilers and Options::       Selecting compilers and optimization
* Multiple Architectures::      Compiling for multiple architectures at once
* Installation Names::          Installing in different directories
* Optional Features::           Selecting optional features
* System Type::                 Specifying the system type
* Sharing Defaults::            Setting site-wide defaults for `configure'
* Defining Variables::          Specifying the compiler etc.
* configure Invocation::        Changing how `configure' runs


File: autoconf-ja.info,  Node: Basic Installation,  Next: Compilers and Options,  Up: Running configure Scripts

13.1 基本的なインストール
=========================

以下は一般的なインストールの説明書です．

   `configure'シェルスクリプトは，コンパイル時に使用する様々なシ
ステム依存の変数の正しい値を推測します．パッケージのそれぞれのディレク
トリの`Makefile'を作成するために，これらの値が使用されます．シス
テム依存の定義を含んでいる，一つ以上の`.h'ファイルも作成します．
終りに，現在のコンフィグレーションを将来再生成するために実行可能なシェ
ルスクリプト`config.status'と，コンパイラの出力を含んでいるファイ
ル`config.log' (主に`configure'のデバッグで役立ちます)を 作成します．

再コンフィグレーションのスピードをあげるため，テストの結果を保存する追
加ファイルも使用することが可能です(通常，`config.cache'と呼ばれ，
`--cache-file=config.cache'や短い`-C'で利用可能になりま
す)．(古いキャッシュファイルを偶然使用することによる問題を避けるため，
キャッシュはデフォルトで利用不可能になっています．)

パッケージをコンパイルするため，通常行なうこと以外のことをする必要があ
る場合，`configure'がどのように調査したのかを理解し，次のリリー
スに反映できるように，`README'にあるアドレスに差分や説明をメール
してください．キャッシュを使用していて，`config.cache'が含む結果
に保持したくないものがある場合，削除しても編集してもかまいません．

   ファイル`configure.ac' (または`configure.in')は，
`autoconf'と呼ばれるプログラムで，`configure'を作成するため
に使用されます．それを変更したり，新しいバージョンの`autoconf'で
`configure'を再生成したい場合だけ，`configure.ac'が必要です．

このパッケージをコンパイルする最も単純な方法は，以下の通りです．

  1. パッケージのソースコード含んでいるディレクトリに`cd'して，システ
     ムに対するパッケージのコンフィグレーションを行なうために
     `./configure'と入力してください．System Vの古いバージョンの
     `csh'を使用している場合，`csh'自身から`configure'を
     実行しないようにするため，`sh ./configure'と入力する必要があるか
     もしれません．

     `configure'の実行にはしばらくかかります．実行中，調査している
     特徴を伝えるメッセージを出力します．

  2. パッケージをコンパイルするために`make'と入力してください．

  3. オプションとして，パッケージ付属の自己テストを実行するため，`make
     check'と入力してください．

  4.
     プログラムと，全てのデータファイルと，ドキュメントをインストールするた
     め，`make install'と入力してください．

  5. `make clean'と入力することで，ソースコードディレクトリからプログ
     ラムのバイナリやオブジェクトファイルを削除することが可能です．(異なる
     種類のコンピュータに対するパッケージをコンパイルすることが可能になるよ
     うに)`configure'が作成したファイルも削除するためには， `make
     distclean'と入力してください．`make maintainer-clean'
     ターゲットもありますが，主にパッケージ開発者用です．それを使用する場合，
     配布物の付属ファイルを再生成するため，いろいろな種類の他のプログラムを
     入手する必要があるかもしれません．


File: autoconf-ja.info,  Node: Compilers and Options,  Next: Multiple Architectures,  Prev: Basic Installation,  Up: Running configure Scripts

13.2 コンパイラとオプション
===========================

`configure'スクリプトが知らない，通常は使用しないコンパイルや
リンクのオプションが必要なシステムもあります．妥当な環境変数の詳細を得
るために，`./configure --help'を実行してください．

コマンドラインや環境変数で変数を設定することで，コンフィグレーションパ
ラメータの初期値を`configure'に与えることが可能です．例えば以
下のようにします．

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   詳細は，*Note Defining Variables::.


File: autoconf-ja.info,  Node: Multiple Architectures,  Next: Installation Names,  Prev: Compilers and Options,  Up: Running configure Scripts

13.3 複数のアーキテクチャに対するコンパイル
===========================================

それぞれのアーキテクチャに対するオブジェクトファイルをそれ自身のディレ
クトリに置くことで，同時に一種類以上のコンピュータに対するパッケージを
コンパイルすることが可能です．こうするために，GNU `make'の様に，
`VPATH'変数をサポートする`make'のバージョンを使用する必要
があります．オブジェクトファイルと実行可能なファイルを配置したいディレ
クトリに `cd'して，`configure'スクリプトを実行してくだ
さい．`configure'は，`configure'があるディレクトリと
`..'でソースコードを自動的に調査します．

   `VPATH'をサポートしない`make'を使用する必要がある場合，ソー
スコードディレクトリで，一度に一つのアーキテクチャに対してパッケージを
コンパイルする必要があります．一つのアーキテクチャのパッケージをインス
トールした後，他のアーキテクチャに対して再コンフィグレーションするため，
`make distclean'を使用してください．


File: autoconf-ja.info,  Node: Installation Names,  Next: Optional Features,  Prev: Multiple Architectures,  Up: Running configure Scripts

13.4 インストール名
===================

デフォルトで，`make install'はパッケージファイルを，
`/usr/local/bin'や`/usr/local/man'等にインストールします．イ
ンストール先の接頭辞は，`--prefix=PATH'オプションを
`configure'に与えることで指定することが可能です．

アーキテクチャ特有のファイルと，アーキテクチャ非依存のファイルを，別々
のインストール先の接頭辞に分けて指定することが可能です．
`configure'に`--exec-prefix=PATH'オプションを与え
た場合，パッケージはプログラムとライブラリをインストールする接頭辞とし
て，PATHを使用します．ドキュメントと他のデータファイルは通常の接
頭辞を使用します．

さらに，一般的でないディレクトリへの配置を使用する場合，特定の種類のファ
イルに対し異なる値で指定するように，`--bindir=PATH'のよう
なオプションを与えることが可能です．設定可能なディレクトリリストと，そ
こに置きたいファイルの種類のリストを見るために，`configure
--help'を実行してください．

   パッケージでサポートされている場合，`configure'にオプションの
`--program-prefix=PREFIX'や
`--program-suffix=SUFFIX'を与えることで，プログラムの名前
に余分な接頭辞や接尾子を付けてインストールすることが可能です．


File: autoconf-ja.info,  Node: Optional Features,  Next: System Type,  Prev: Installation Names,  Up: Running configure Scripts

13.5 オプションの機能
=====================

`configure'への`--enable-FEATURE'オプションに注意
を払うパッケージもあり，そこでのFEATUREはパッケージのオプション
の部分を示しています．`--with-PACKAGE'オプションに注意を
払うパッケージもあり，そこでのPACKAGEは`gnu-as'や`x'(X Window
System用)のようなものになります．`README'でパッケージが理
解する`--enable-'と`--with-'オプションについて述べている でしょう．

   X Window Systemを使用しているパッケージに対して，`configure'は
通常，Xのインクルードファイルやリンクファイルを自動的に見つけますが，
そうでない場合は，`configure'オプションの
`--x-includes=DIR'と`--x-libraries=DIR'を，
その場所を指定するために使用することが可能です．


File: autoconf-ja.info,  Node: System Type,  Next: Sharing Defaults,  Prev: Optional Features,  Up: Running configure Scripts

13.6 システムタイプの指定
=========================

`configure'が自動的に判定できない特徴もあるかもしれませんが，
パッケージを実行するマシンのタイプで定義する必要があるものもあります．
通常，パッケージは実行されるものと_同じ_アーキテクチャでビルドさ
れていると仮定され，`configure'はそれを判定することが可能です
が，マシンのタイプが分からない旨のメッセージを出力した場合，
`--build=TYPE'オプションで与えてください．TYPEは，
`sun4'の様なシステムタイプの短い名前や，以下のような様式の標準的
な名前にすることが可能です．

     CPU-COMPANY-SYSTEM

SYSTEMは，以下の形式の一つが可能です．

     OS KERNEL-OS

   それぞれのフィールドでの可能な値は，ファイル`config.sub'を参照し
てください．`config.sub'がパッケージに含まれていない場合，パッケー
ジはマシンのタイプを知る必要がありません．

   クロスコンパイルに対するコンパイラツールを_ビルドしている_場合，
コードを生成しているシステムのタイプを選択するために，
`--target=TYPE'オプションを使用すべきです．

   プラットフォームに対して生成しているコードが，ビルドしているプラット
フォームと異なるクロスコンパイラを_使用_したい場合，"host"プ
ラットフォーム(すなわち，生成されるプログラムが実行されるプラットフォー
ム)を`--host=TYPE'で指定すべきです．


File: autoconf-ja.info,  Node: Sharing Defaults,  Next: Defining Variables,  Prev: System Type,  Up: Running configure Scripts

13.7 デフォルトの共有
=====================

`configure'スクリプトを共有するため，デフォルト値を設定したい
場合，`CC'，`cache_file'，そして`prefix'の様な変数のデ
フォルト値を与える，`config.site'と呼ばれるサイトシェルスクリプト
を作成することが可能です．`configure'は，存在する場合は
`PREFIX/share/config.site'を探し，その後で，存在する場合は
`PREFIX/etc/config.site'を探します．また，
`CONFIG_SITE'環境変数をサイトスクリプトのある場所に設定することも
可能です．警告：全ての`configure'スクリプトがサイトスクリプト
を探すわけではありません．


File: autoconf-ja.info,  Node: Defining Variables,  Next: configure Invocation,  Prev: Sharing Defaults,  Up: Running configure Scripts

13.8 変数の定義
===============

サイトのシェルスクリプトで定義されていない変数は，`configure'
に渡す環境変数で設定することが可能です．しかし，パッケージによってはビ
ルドしているときに再び`configure'を実行し，カスタマイズされて
いるこれらの変数の値が消えてしまう可能性があります．この問題を避けるた
め，`VAR=value'を使用して，それらを`configure'コマンドラ
インで設定すべきです．例えば，以下のようにします．

     ./configure CC=/usr/local2/bin/gcc

これで，(サイトシェルスクリプトで優先されない限り)Cコンパイラとして
`gcc'を指定します．


File: autoconf-ja.info,  Node: configure Invocation,  Prev: Defining Variables,  Up: Running configure Scripts

13.9 `configure'の呼び出し
==========================

`configure'は，処理方法を制御する以下のオプションを理解します．

`--help'
`-h'
     `configure'オプションの概要を出力して終了します．

`--version'
`-V'
     `configure'スクリプトの生成に使用したAutoconfのバージョンを出
     力して終了します．

`--cache-file=FILE'
     キャッシュを可能にします．調査の結果を，通常は`config.cache'とい
     うFILEに保存し，使用します．キャッシュを利用不可能にするため，
     FILEはデフォルトで`/dev/null'です．

`--config-cache'
`-C'
     `--cache-file=config.cache'の別名です．

`--quiet'
`--silent'
`-q'
     調査したり作成したりしているメッセージを出力しません．通常の出力も全て
     省略するためには，(エラーメッセージは表示されますが)`/dev/null'に
     ファイルをリダイレクトしてください．

`--srcdir=DIR'
     ディレクトリDIRでパッケージのソースコードを探します．通常，
     `configure'はディレクトリを自動的に決定することが可能です．

`configure'は，広範囲では役に立たないかもしれませんが，その他
のオプションも受け入れます．詳細を知るために`configure --help'を
実行してください．


File: autoconf-ja.info,  Node: config.status Invocation,  Next: Obsolete Constructs,  Prev: Running configure Scripts,  Up: Top

14 コンフィグレーションの再生成
*******************************

`configure'スクリプトは，実際にコンフィグレーションを行なう
"実際に作成されるもの(instantiates)"のテンプレートファイルとなる
`config.status'という名前のファイルを作成します．それは，再コンフィ
グレーションが必要な状況でパッケージが前回コンフィグレーションされたとき
に指定されたコンフィグレーションオプションも記録しています．

   概要です．
     ./config.status OPTION... [FILE...]

   FILESをコンフィグレーションします．何も指定されていない場合は全て
のテンプレートの実体が作成されます．ファイルは，依存性無しで指定する必要
があり，以下のようにします．

     ./config.status foobar

以下のようにはしません．

     ./config.status foobar:foo.in:bar.in

   サポートされているOPTIONは以下のとおりです．

`--help'
`-h'
     コマンドラインオプションの概要とテンプレートファイルのリストを出力し，終
     了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力し終了します．

`--silent'
`--quiet'
`-q'
     処理中のメッセージを出力しません．

`--debug'
`-d'
     一時ファイルを削除しません．

`--file=FILE[:TEMPLATE]'
     `AC_CONFIG_FILES(FILE:TEMPLATE)'が使用されているかのよ
     うに，実際に作成されるファイルを要求します．FILEとTEMPLATEは
     どちらも`-'が可能で，それぞれ標準出力そして/または標準入力が使用さ
     れます．TEMPLATEファイル名が相対的な場合，最初にビルドツリーで検索
     され，次にソースツリーで検索されます．詳細は，*Note Configuration
     Actions::.

     このオプションと以下のものは，個別に配布されているパッケージで
     `configure'が計算した値を共有する方法を提供します．そうすること
     は，複数のパッケージがそれらのスーパーセット，おそらく共通のライブラリを
     必要とする場合に役に立つはずです．これらのオプションで，
     `config.status' ファイルが`configure.ac'で指定しているもの以外
     のファイルも作成可能になるので，異なるパッケージで使用可能になります．

`--header=FILE[:TEMPLATE]'
     `--file'と同じですが，`AC_CONFIG_HEADERS'を使用します．

`--recheck'
     `config.status'にそれ自身を更新するかどうか尋ねて終了します(実際に
     作成しません)．いくつかのテストの結果が前回のもの異なる可能性があるので，
     このオプションは`configure'を変更した場合に役に立ちます．
     `--recheck'では，前回使用したものと同じ引数に加え，
     `configure'が`config.status'を実行したり`Makefile'とそ
     の他のファイルを作成したりしないようにする`--no-create'オプション
     と，`configure'がサブディレクトリでその他の`configure'ス
     クリプトを実行しないようにする`--no-recursion'を用いて再実行しま
     す．(`config.status'が変更された時に，他の`Makefile'のルールで
     実行可能なようにするため，これは存在しています．例は，*note
     Automatic Remaking::)．

   `config.status'は，その動作を変更するいくつかのオプションの環境変数
を調査します．

 -- Variable: CONFIG_SHELL
     `--recheck'オプションで`configure'が実行されるシェルです．
     Bourne互換にする必要があります．デフォルトは，利用可能な場合は
     `LINENO'をサポートするシェルで，それ以外では`/bin/sh'になります．

 -- Variable: CONFIG_STATUS
     コンフィグレーションを記録するシェルスクリプトのファイル名です．デフォル
     トは`./config.status'です．この変数は，他のパッケージの一部を使用し
     たり，`configure'スクリプトが別々に管理されていて，マージされて
     いないとき役に立ちます．

   Makefileで`./config.status'を使用することも可能です．例えば，上記
(*note Automatic Remaking::)のような依存がある状況では，
`configure.ac'が変更された時，`config.status'は2回実行されます．
それがうるさい場合，以下のようなルールで，ファイルを再生成するためだけに
それぞれ実行させることが可能です．
     config.h: stamp-h
     stamp-h: config.h.in config.status
             ./config.status config.h
             echo > stamp-h

     Makefile: Makefile.in config.status
             ./config.status Makefile

   `config.status'の呼び出しの慣習は変更されました．詳細は， *Note
Obsolete config.status Use::を参照してください．


File: autoconf-ja.info,  Node: Obsolete Constructs,  Next: Using Autotest,  Prev: config.status Invocation,  Up: Top

15 時代遅れの構成物
*******************

Autoconfは変化し，歳月を経て時代遅れになった構成物もあります．変更のほと
んどはマクロの呼び出しですが，状況によっては，ツール自身やそのコンセプト
さえも，今では時代遅れと考えられるものもあります．

新しいAutoconfを使用する場合は，この章を完全に飛ばしてもかまいません．こ
こでの目的は主に，より新しい構成物に変更する方法を理解することで，パッケー
ジを更新している管理者を助けることです．

* Menu:

* Obsolete config.status Use::  Different calling convention
* acconfig.h::                  Additional entries in `config.h.in'
* autoupdate Invocation::       Automatic update of `configure.ac'
* Obsolete Macros::             Backward compatibility macros
* Autoconf 1::                  Tips for upgrading your files
* Autoconf 2.13::               Some fresher tips


File: autoconf-ja.info,  Node: Obsolete config.status Use,  Next: acconfig.h,  Up: Obsolete Constructs

15.1 時代遅れの`config.status'の呼び出し
========================================

`config.status'は現在，実際に作成されるファイルを指定するための引数
をサポートしています．詳細は，*Note config.status
Invocation::を参照してく ださい．以前は環境変数の使用が必要でした．

 -- Variable: CONFIG_COMMANDS
     実行するコマンドのタグです．デフォルトは，`configure.ac'内の
     `AC_OUTPUT'と`AC_CONFIG_COMMANDS'に与える引数です．

 -- Variable: CONFIG_FILES
     `@VARIABLE@'の置換を実行するファイルです．デフォルトは，
     `configure.ac'内の`AC_OUTPUT'と`AC_CONFIG_COMMANDS'に与え
     る引数です．

 -- Variable: CONFIG_HEADERS
     Cの`#define'文の置換を行なうファイルです．デフォルトは
     `AC_CONFIG_HEADERS'に与える引数です．そのマクロが呼び出されていない
     場合，`config.status'はこの値を無視します．

 -- Variable: CONFIG_LINKS
     作成されるシンボリックリンクです．デフォルトは，`AC_CONFIG_LINKS'
     に与える引数です．そのマクロが呼び出されていない場合，
     `config.status'はこの値を無視します．

   *Note config.status
Invocation::で古いインターフェースを使用する例は，以下
のようになります．

     config.h: stamp-h
     stamp-h: config.h.in config.status
             CONFIG_COMMANDS= CONFIG_LINKS= CONFIG_FILES= \
               CONFIG_HEADERS=config.h ./config.status
             echo > stamp-h

     Makefile: Makefile.in config.status
             CONFIG_COMMANDS= CONFIG_LINKS= CONFIG_HEADERS= \
               CONFIG_FILES=Makefile ./config.status

(`configure.ac'で`AC_CONFIG_HEADERS'を呼び出さない場合，
`make'ルールに`CONFIG_HEADERS'を設定する必要はありません．
`CONFIG_COMMANDS'等に対しても同様です．)


File: autoconf-ja.info,  Node: acconfig.h,  Next: autoupdate Invocation,  Prev: Obsolete config.status Use,  Up: Obsolete Constructs

15.2 `acconfig.h'
=================

`config.h.in'を生成するため，`autoheader'はそれぞれのシンボ
ルに対するテンプレートを構築したり探したりする必要がありました．現在の
Autoconfのリリースでは，`AH_VERBATIM'と`AH_TEMPLATE'を使用しま
すが(*note Autoheader Macros::)，古いリリースでは，ファイル
`acconfig.h'に必要なテンプレートのリストを含めていました．
`autoheader'は，コメントと`#define'と`#undef'の文を， `acconfig.h'
がカレントディレクトリに存在する場合はそこからコピーし
ます．追加のシンボルを`AC_DEFINE'する場合，このファイルを使用する必
要がありました．

   `config.h.in'に情報を前置/後置したい場合，現在のAutoconfのリリース
でも，`AH_TOP'と`AH_BOTTOM'を提供しています．昔のバージョンの
Autoconfにはよく似た機能がありました．`./acconfig.h'に文字列
`@TOP@'が含まれている場合，`autoheader'は`@TOP@'
が含まれている行の前の行を生成するファイルの先頭にコピーします．同様に，
`./acconfig.h'に文字列`@BOTTOM@'が含まれている場合，
`autoheader'はその行の後の行を生成するファイルの末尾にコピーしま
す．これらの文字列のいずれかまたは両方とも省略できます．古いバージョンの
Autoconfで同じ効果を生成するための，さらに古い代替方法は，カレントディレ
クトリにファイル`FILE.top'(通常は`config.h.top') や
`FILE.bot'を作成することです．それらが存在する場合，
`autoheader'はその出力の最初と終りに，それぞれその内容をコピーし ます．

以前のバージョンのAutoconfでは，配布するソフトウエアパッケージの準備で使
用するファイルは以下のようになっています．
     configure.ac --.   .------> autoconf* -----> configure
                    +---+
     [aclocal.m4] --+   `---.
     [acsite.m4] ---'       |
                            +--> [autoheader*] -> [config.h.in]
     [acconfig.h] ----.     |
                      +-----'
     [config.h.top] --+
     [config.h.bot] --'

   `AH_'マクロだけを使用する際は，`configure.ac'は自己内蔵型にす
べきで，そして，`acconfig.h'等に依存すべきではありません．


File: autoconf-ja.info,  Node: autoupdate Invocation,  Next: Obsolete Macros,  Prev: acconfig.h,  Up: Obsolete Constructs

15.3 `configure.ac'を現代風にするために`autoupdate'を使用する
=============================================================

`autoupdate'プログラムは，Autoconfマクロを古い名前で呼び出してい
る`configure.ac'ファイルを，現在のマクロ名に更新します．バージョン2
のAutoconfでは，ほとんどのマクロが，より一様で記述的な命名法で名前が変更
されています．新しい方法の記述は*Note Macro Names::.
古い名前も動作します
が(古いマクロとそれに対応する新しいマクロのリストは*note Obsolete
Macros::)，新しいマクロ名を使用するために更新した場合，
`configure.ac'はより可読性の高いものになり，現在のAutoconfマクロを
使用することがより簡単になります．

   引数が与えられていない場合，`autoupdate'は`configure.ac' を
更新し，元のバージョンを接尾子`~'でバックアップします(または，環境
変数`SIMPLE_BACKUP_SUFFIX'が設定されている場合はその値になります)．
`autoupdate'に引数を与えた場合，`configure.ac'の代わりにそ
のファイルを読み込み，更新されたファイルを標準出力に出力します．

`autoupdate'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．

`--verbose'
`-v'
     処理している段階を報告します．

`--debug'
`-d'
     一時的なファイルを削除しません．

`--force'
`-f'
     ファイルが変更されていない場合でも強制的に更新します．キャッシュは無視さ
     れます．

`--include=DIR'
`-I DIR'
     入力ファイルをDIRでも探します．複数回の呼び出しは累積されます．ディ
     レクトリは最後のものから最初のものという順序で見ていきます．


File: autoconf-ja.info,  Node: Obsolete Macros,  Next: Autoconf 1,  Prev: autoupdate Invocation,  Up: Obsolete Constructs

15.4 時代遅れのマクロ
=====================

様々な理由で(通常適切に引用婦で囲むことに失敗していて以前の配布物が拡張
できないなどの理由です)，いくつかのマクロがAutoconfで時代遅れになってい
ます．それらはサポートされていますが，使用を止めるようお願いします．それ
らの使用は避けた方が良いでしょう．

Autoconfのバージョン1からバージョン2へ移行している間，より一般的でより記
述的な命名法を使用するために，ほとんどのマクロの名前が変更されましたが，
そのシグニチャは変更されていません．以下で，これらのマクロの古い名前と新
しい名前の対応付けがあるものは，署名と記述に対する新しいマクロの定義へ参
照するよう読者を招待します．

 -- Macro: AC_ALLOCA
     `AC_FUNC_ALLOCA'

 -- Macro: AC_ARG_ARRAY
     有用性の制限のため削除．

 -- Macro: AC_C_CROSS
     このマクロは時代遅れです．何もしません．

 -- Macro: AC_CANONICAL_SYSTEM
     システムタイプを決定し，出力変数を標準的なシステムタイプ名に設定します．
     このマクロが設定する変数の詳細は*Note Canonicalizing::.

     ユーザは必要なものに依存して，`AC_CANONICAL_BUILD'または
     `AC_CANONICAL_HOST'のいずれか，または`AC_CANONICAL_TARGET'を使
     用することを推奨します．`AC_CANONICAL_TARGET'を実行することで，必ず
     それ以外の二つのマクロが実行されます．

 -- Macro: AC_CHAR_UNSIGNED
     `AC_C_CHAR_UNSIGNED'

 -- Macro: AC_CHECK_TYPE (TYPE, DEFAULT)
     2.13までのAutoconfでは，このバージョンの`AC_CHECK_TYPE'を提供するた
     めに使用されていましたが，問題があり反対されていました．第一に，それは
     `CHECK'一族のメンバーですが，単一のファミリーに過ぎず，調査以上のこ
     とを行なっていました．次に，足りない型は`typedef'されず，それらは
     `#define'されるので，ポインタ型の場合は互換性がなくなってしまうはず
     です．

     この`AC_CHECK_TYPE'の使用は時代遅れで推奨できません．現在のマクロの
     記述は，*Note Generic Types::を参照してください．

     型TYPEが定義されていない場合，それはC(またはC++)の組み込みの型
     DEFAULTに定義されます．例えば，`short'や`unsigned'です．

     このマクロは以下と等価です．

          AC_CHECK_TYPE([TYPE],,
                        [AC_DEFINE_UNQUOTED([TYPE], [DEFAULT],
                                            [Define to `DEFAULT' if
                                             <sys/types.h> does not define.])])

     下位互換性のため，二つのバージョンの`AC_CHECK_TYPE'が実装されていて，
     単純な発見的手法で選択されます．

       1. 引数が三つまたは四つある場合，現在のバージョンが使用されます．

       2.
          二番目の引数にCやC++の型がある場合，時代遅れのバージョンが使用されます．
          引数がCやC++に_組み込まれている_型，または`_t'で終るC識別子で，
          さらに一つの`[(* 'が続き，その後にゼロ以上の`[]()* _a-zA-Z0-9'
          以外の文字列が続く場合はこうなります．

       3.
          二番目の引数が有効なCとC++のアルファベットで綴られている型の場合，ユーザ
          は警告され，現在のバージョンが使用されます．

       4. それ以外では，現在のバージョンが使用されます．

     有効な組み込みの型を使用する，または，同じ現在のコード(上記参照)を使用す
     る，もしくはそれより良いものとして，`AC_CHECK_TYPES'とともに使用す
     ることをお勧めします．

          #if !HAVE_LOFF_T
          typedef loff_t off_t;
          #endif

 -- Macro: AC_CHECKING (FEATURE-DESCRIPTION)
     `AC_MSG_NOTICE([checking FEATURE-DESCRIPTION...]'と同じで す．

 -- Macro: AC_COMPILE_CHECK (ECHO-TEXT, INCLUDES, FUNCTION-BODY,
          ACTION-IF-FOUND, [ACTION-IF-NOT-FOUND])
     これは，`AC_TRY_COMPILE'の時代遅れのバージョンで，それ自身も
     `AC_COMPILE_IFELSE'で置換され(*note Running the Compiler::)，それは
     ECHO-TEXTが空ではない場合，`checking for ECHO-TEXT' を
     標準出力の最初に追加出力します．メッセージを出力するためには，代わりに
     `AC_MSG_CHECKING'と`AC_MSG_RESULT'を使用してください (*note
     Printing Messages::)．

 -- Macro: AC_CONST
     `AC_C_CONST'

 -- Macro: AC_CROSS_CHECK
     `AC_C_CROSS'と同じで，さらにそれも時代遅れになっていて，何もしませ
     ん`:-)'．

 -- Macro: AC_CYGWIN
     Cygwin環境を調査し，その状況ではシェル変数`CYGWIN'を`yes'に設
     定します．このマクロを使用せず，権威のあるホストの調査手法
     `AC_CANONICAL_HOST'が使用されています．実際問題として，このマクロは
     以下のように定義されています．

          AC_REQUIRE([AC_CANONICAL_HOST])[]dnl
          case $host_os in
            *cygwin* ) CYGWIN=yes;;
                   * ) CYGWIN=no;;
          esac

     変数`CYGWIN'には，CygWin32を実行しているときは非常に特殊な意味があ
     ることに注意し，変更すべきではありません．それはこのマクロを使用しないも
     う一つの理由です．

 -- Macro: AC_DECL_SYS_SIGLIST
     以下と同じです．

          AC_CHECK_DECLS([sys_siglist],,,
          [#include <signal.h>
          /* NetBSD declares sys_siglist in unistd.h.  */
          #if HAVE_UNISTD_H
          # include <unistd.h>
          #endif
          ])

 -- Macro: AC_DECL_YYTEXT
     何もせず，現在は`AC_PROG_LEX'に統合されています．

 -- Macro: AC_DIR_HEADER
     `AC_FUNC_CLOSEDIR_VOID'と`AC_HEADER_DIRENT'の呼び出しに似てい
     ますが，ヘッダファイルが見つかったことを示すため，異なるCプリプロセッサ
     マクロの組を定義します．

     ヘッダ         古いシンボル 新しいシンボル
     `dirent.h'     `DIRENT'     `HAVE_DIRENT_H'
     `sys/ndir.h'   `SYSNDIR'    `HAVE_SYS_NDIR_H'
     `sys/dir.h'    `SYSDIR'     `HAVE_SYS_DIR_H'
     `ndir.h'       `NDIR'       `HAVE_NDIR_H'

 -- Macro: AC_DYNIX_SEQ
     DYNIX/ptxの場合，出力変数`LIBS'に`-lseq' を追加します．この
     マクロは以下のように定義されるように使用されていました．

          AC_CHECK_LIB(seq, getmntent, LIBS="-lseq $LIBS")

     現在では，`AC_FUNC_GETMNTENT'で行ないます．

 -- Macro: AC_EXEEXT
     コンパイラの出力を元に出力変数`EXEEXT'を定義し，それは現在では自動
     的に行なわれます．通常，Unixでは空の文字列で，Win32やOS/2では`.exe'
     に設定します．

 -- Macro: AC_EMXOS2
     `AC_CYGWIN'に似ていますが，OS/2のEMX環境変数を調査し`EMXOS2'
     を設定します．

 -- Macro: AC_ERROR
     `AC_MSG_ERROR'

 -- Macro: AC_FIND_X
     `AC_PATH_X'

 -- Macro: AC_FIND_XTRA
     `AC_PATH_XTRA'

 -- Macro: AC_FUNC_CHECK
     `AC_CHECK_FUNC'

 -- Macro: AC_FUNC_WAIT3
     `wait3'が見つかり，第三引数(`struct rusage *')の内容が満たされ
     ている場合，HP-UXは違いますが，`HAVE_WAIT3'を定義します．

     現在では，`wait3'はOpen Groupの標準から削除されていて，次のリビジョ
     ンのPOSIXでは無くなるので，移植性の高いプログラムでは
     `wait3'ではなく`waitpid'を使用すべきです．

 -- Macro: AC_GCC_TRADITIONAL
     `AC_PROG_GCC_TRADITIONAL'

 -- Macro: AC_GETGROUPS_T
     `AC_TYPE_GETGROUPS'

 -- Macro: AC_GETLOADAVG
     `AC_FUNC_GETLOADAVG'

 -- Macro: AC_HAVE_FUNCS
     `AC_CHECK_FUNCS'

 -- Macro: AC_HAVE_HEADERS
     `AC_CHECK_HEADERS'

 -- Macro: AC_HAVE_LIBRARY (LIBRARY, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])
     このマクロは，FUNCTION引数を`main'にした`AC_CHECK_LIB'
     の呼び出しと同じです．さらに，LIBRARYは，`foo'，
     `-lfoo'，または`libfoo.a'のいずれで書くことも可能です．これ
     ら全ての状況で，コンパイラに`-lfoo'が渡されます．しかし，
     LIBRARYをシェル変数することは不可能です．リテラル名にする必要があ
     ります．

 -- Macro: AC_HAVE_POUNDBANG
     `AC_SYS_INTERPRETER' (呼び出し規則が異なります)

 -- Macro: AC_HEADER_CHECK
     `AC_CHECK_HEADER'

 -- Macro: AC_HEADER_EGREP
     `AC_EGREP_HEADER'

 -- Macro: AC_HELP_STRING
     `AS_HELP_STRING'

 -- Macro: AC_INIT (UNIQUE-FILE-IN-SOURCE-DIR)
     以前の`AC_INIT'は単一の引数のみで使用され，それは以下と同じです．

          AC_INIT
          AC_CONFIG_SRCDIR(UNIQUE-FILE-IN-SOURCE-DIR)

 -- Macro: AC_INLINE
     `AC_C_INLINE'

 -- Macro: AC_INT_16_BITS
     Cの型`int'が16ビット幅の場合，`INT_16_BITS'を定義します．代わ
     りに`AC_CHECK_SIZEOF(int)'を使用してください．

 -- Macro: AC_IRIX_SUN
     AIX (Silicon Graphics UNIX)の場合，出力変数`LIBS' に
     `-lsun'を追加します．`getmntent'を取得するためにそれを使用し
     ている場合，その代わりに`AC_FUNC_GETMNTENT'を使用してください．NIS
     バージョンのパスワードとグループ関数のためにそれを使用している場合．
     `AC_CHECK_LIB(sun, getpwnam)'を使用してください．Autoconf 2.13まで
     は，以下のように使用されていました．

          AC_CHECK_LIB(sun, getmntent, LIBS="-lsun $LIBS")

     現在ではそれは以下のように定義されます．

          AC_FUNC_GETMNTENT
          AC_CHECK_LIB(sun, getpwnam)

 -- Macro: AC_LANG_C
     `AC_LANG(C)'と同じです．

 -- Macro: AC_LANG_CPLUSPLUS
     `AC_LANG(C++)'と同じです．

 -- Macro: AC_LANG_FORTRAN77
     `AC_LANG(Fortran 77)'と同じです．

 -- Macro: AC_LANG_RESTORE
     `AC_LANG_SAVE'で設定されるように，スタックのトップに保存される
     LANGUAGEを選択し，スタックから削除し，
     `AC_LANG(LANGUAGE)'を呼び出します．

 -- Macro: AC_LANG_SAVE
     現在の言語を(`AC_LANG'で設定されるように)スタックに記憶します．現在
     の言語は変更されません．`AC_LANG_PUSH'が好まれます．

 -- Macro: AC_LINK_FILES (SOURCE..., DEST...)
     これは，`AC_CONFIG_LINKS'の時代遅れのバージョンです．以下を更新した
     バージョンにします．

          AC_LINK_FILES(config/$machine.h config/$obj_format.h,
                        host.h            object.h)

     それは，以下のようになります．

          AC_CONFIG_LINKS(host.h:config/$machine.h
                          object.h:config/$obj_format.h)

 -- Macro: AC_LN_S
     `AC_PROG_LN_S'

 -- Macro: AC_LONG_64_BITS
     Cの型`long int'が64ビット幅の場合，`LONG_64_BITS'を定義します．
     その代わりに，一般的なマクロ`AC_CHECK_SIZEOF([long int])'を使用して
     ください．

 -- Macro: AC_LONG_DOUBLE
     `AC_C_LONG_DOUBLE'

 -- Macro: AC_LONG_FILE_NAMES
     `AC_SYS_LONG_FILE_NAMES'

 -- Macro: AC_MAJOR_HEADER
     `AC_HEADER_MAJOR'

 -- Macro: AC_MEMORY_H
     `mem'関数が`memory.h'で定義されている場合に
     `NEED_MEMORY_H'を定義するために使用されます．現在は，
     `AC_CHECK_HEADERS(memory.h)'と同じです．コードを
     `NEED_MEMORY_H'ではなく`HAVE_MEMORY_H'に依存するように調整して
     ください．*Note Standard Symbols::.

 -- Macro: AC_MINGW32
     `AC_CYGWIN'に似ていますが，それはMingW32コンパイラの環境を調査し
     `MINGW32'を設定します．

 -- Macro: AC_MINUS_C_MINUS_O
     `AC_PROG_CC_C_O'

 -- Macro: AC_MMAP
     `AC_FUNC_MMAP'

 -- Macro: AC_MODE_T
     `AC_TYPE_MODE_T'

 -- Macro: AC_OBJEXT
     `.c'ファイルが除外された後，コンパイラの出力に基づいて，出力変数
     `OBJEXT'を定義します．通常，Unixでは`o'で，Win32では
     `obj'に設定します．現在はコンパイラの調査マクロがこれを自動的に処理
     します．

 -- Macro: AC_OBSOLETE (THIS-MACRO-NAME, [SUGGESTION])
     M4が標準エラー出力に，THIS-MACRO-NAMEが時代遅れだというメッセージ
     をそれが呼び出されているファイルと行とともに出力します．
     THIS-MACRO-NAMEは，`AC_OBSOLETE'が呼び出しているマクロ名にす
     べきです．SUGGESTIONが与えられている場合，それは警告メッセージの終
     りに出力されます．例えば，THIS-MACRO-NAMEの代わりに使用するものを
     提案することが可能になります．

     例えば以下のようにします．

          AC_OBSOLETE([$0], [; use AC_CHECK_HEADERS(unistd.h) instead])dnl

     ユーザに対するより良いサービスとなるので，代わりに`AU_DEFUN'を使用
     することを推奨します．

 -- Macro: AC_OFF_T
     `AC_TYPE_OFF_T'

 -- Macro: AC_OUTPUT ([FILE]..., [EXTRA-CMDS], [INIT-CMDS])
     引数を用いた`AC_OUTPUT'の使用は反対されます．これは以下と同じものの
     時代遅れのインターフェースです．

          AC_CONFIG_FILES(FILE...)
          AC_CONFIG_COMMANDS([default],
                             EXTRA-CMDS, INIT-CMDS)
          AC_OUTPUT

 -- Macro: AC_OUTPUT_COMMANDS (EXTRA-CMDS, [INIT-CMDS])
     `config.status'の終りに実行する追加のシェルコマンドと，
     `configure'で変数を初期化するためのシェルコマンドをを指定します．
     このマクロは複数回呼び出し可能です．それは時代遅れで，
     `AC_CONFIG_COMMANDS'で置換されました．

     以下は現実的ではない例です．

          fubar=27
          AC_OUTPUT_COMMANDS([echo this is extra $fubar, and so on.],
                             [fubar=$fubar])
          AC_OUTPUT_COMMANDS([echo this is another, extra, bit],
                             [echo init bit])

     `AC_CONFIG_COMMANDS'が追加のキーを要求する事実以外，重要な差は
     `AC_OUTPUT_COMMANDS'が引数を二回引用符で囲んでいますが
     `AC_CONFIG_COMMANDS'はそうではないということです．これは，
     `AC_CONFIG_COMMANDS'では引数を用いてマクロを安全に呼び出すことが可
     能だということを意味します．

          AC_CONFIG_COMMANDS(foo, [my_FOO()])

     反対に，1レベルの引用符が`AC_OUTPUT_COMMANDS'でのリテラル文字列に対
     して十分なところでは，`AC_CONFIG_COMMANDS'が二回必要になります．以
     下の行は等価です．

          AC_OUTPUT_COMMANDS([echo "Square brackets: []"])
          AC_CONFIG_COMMANDS([default], [[echo "Square brackets: []"]])

 -- Macro: AC_PID_T
     `AC_TYPE_PID_T'

 -- Macro: AC_PREFIX
     `AC_PREFIX_PROGRAM'

 -- Macro: AC_PROG_CC_STDC
     このマクロは，`AC_PROG_CC'に統合されました．

 -- Macro: AC_PROGRAMS_CHECK
     `AC_CHECK_PROGS'

 -- Macro: AC_PROGRAMS_PATH
     `AC_PATH_PROGS'

 -- Macro: AC_PROGRAM_CHECK
     `AC_CHECK_PROG'

 -- Macro: AC_PROGRAM_EGREP
     `AC_EGREP_CPP'

 -- Macro: AC_PROGRAM_PATH
     `AC_PATH_PROG'

 -- Macro: AC_REMOTE_TAPE
     有用性の制限のため削除されました．

 -- Macro: AC_RESTARTABLE_SYSCALLS
     `AC_SYS_RESTARTABLE_SYSCALLS'

 -- Macro: AC_RETSIGTYPE
     `AC_TYPE_SIGNAL'

 -- Macro: AC_RSH
     有用性の制限のため削除されました．

 -- Macro: AC_SCO_INTL
     SCO UNIXの場合，出力変数`LIBS'に`-lintl'を加えます．このマク
     ロは以下を使用していました．

          AC_CHECK_LIB(intl, strftime, LIBS="-lintl $LIBS")

     現在は，代わりに`AC_FUNC_STRFTIME'を呼び出します．

 -- Macro: AC_SETVBUF_REVERSED
     `AC_FUNC_SETVBUF_REVERSED'

 -- Macro: AC_SET_MAKE
     `AC_PROG_MAKE_SET'

 -- Macro: AC_SIZEOF_TYPE
     `AC_CHECK_SIZEOF'

 -- Macro: AC_SIZE_T
     `AC_TYPE_SIZE_T'

 -- Macro: AC_STAT_MACROS_BROKEN
     `AC_HEADER_STAT'

 -- Macro: AC_STDC_HEADERS
     `AC_HEADER_STDC'

 -- Macro: AC_STRCOLL
     `AC_FUNC_STRCOLL'

 -- Macro: AC_ST_BLKSIZE
     `AC_CHECK_MEMBERS'

 -- Macro: AC_ST_BLOCKS
     `AC_STRUCT_ST_BLOCKS'

 -- Macro: AC_ST_RDEV
     `AC_CHECK_MEMBERS'

 -- Macro: AC_SYS_RESTARTABLE_SYSCALLS
     システムが自動的にシグナルで中断されたシステムコールを再スタートする場合，
     `HAVE_RESTARTABLE_SYSCALLS'を定義します．このマクロは，システムが一
     般的に再スタートするかどうかを調査しません - それは，(`sigaction'
     ではなく)`signal'でインストールされているシグナルハンドラが再スター
     トするためのシステムコールを呼び出すかどうかをテストします．ハンドラの無
     いシグナルで中断されたときにシステムコールが再スタートされる場合，テスト
     しません．

     今日の移植性の高いプログラムでは，システムコールを再スタートしたい場合，
     `SA_RESTART'を用いて`sigaction'を使用すべきです．現在では，シ
     ステムコールが再スタート可能かどうかは，コンフィグレーション時の問題では
     なく動的な問題なので，`HAVE_RESTARTABLE_SYSCALLS'に依存すべきではあ
     りません．

 -- Macro: AC_SYS_SIGLIST_DECLARED
     `AC_DECL_SYS_SIGLIST'

 -- Macro: AC_TEST_CPP
     `AC_TRY_CPP'になり，それも`AC_PREPROC_IFELSE'で置き換えられま
     した．

 -- Macro: AC_TEST_PROGRAM
     `AC_TRY_RUN'になり，それも`AC_RUN_IFELSE'で置き換えられました．

 -- Macro: AC_TIMEZONE
     `AC_STRUCT_TIMEZONE'

 -- Macro: AC_TIME_WITH_SYS_TIME
     `AC_HEADER_TIME'

 -- Macro: AC_TRY_COMPILE (INCLUDES, FUNCTION-BODY,
          [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
     `AC_COMPILE_IFELSE([AC_LANG_SOURCE([[INCLUDES]],
     [[FUNCTION-BODY]])], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE])'と同じです(*note Running the Compiler::)．

     このマクロは，INCLUDESとFUNCTION-BODYの両方を二重に引用符で
     囲みます．

     CとC++に対して，INCLUDESはFUNCTION-BODYにあるコードが必要と
     するすべての`#include'文です(現在選択されている言語がFortranや
     Fortran 77 の場合，INCLUDESは無視されます)．コンパイラやコンパイル
     フラグは，現在の言語(*note Language Choice::)によって決定されます．

 -- Macro: AC_TRY_CPP (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
     `AC_PREPROC_IFELSE([AC_LANG_SOURCE([[INPUT]])], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE])'と同じです (*note Running the Preprocessor::)．

     このマクロはINPUTを二重に引用符で囲みます．

 -- Macro: AC_TRY_LINK (INCLUDES, FUNCTION-BODY, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     `AC_LINK_IFELSE([AC_LANG_SOURCE([[INCLUDES]], [[FUNCTION-BODY]])],
     [ACTION-IF-TRUE], [ACTION-IF-FALSE])'と同じです(*note Running the
     Compiler::)．

     このマクロは，INCLUDESとFUNCTION-BODYの両方を二重に引用符で
     囲みます．

     現在の言語に依存して(*note Language Choice::)，FUNCTION-BODYの中身
     にある関数をコンパイルしリンクすることが可能かどうかを調べるテストプログ
     ラムを作成します．ファイルのコンパイルとリンクが成功する場合，シェルコマ
     ンドACTION-IF-FOUNDを実行し，それ以外ではACTION-IF-NOT-FOUND
     を実行します．

     このマクロは，INCLUDESとFUNCTION-BODYの両方を二重に引用符で
     囲みます．

     CとC++に対して，INCLUDESはFUNCTION-BODYにあるコードが必要と
     するすべての`#include'文です(現在選択されている言語がFortran 77 の
     場合，INCLUDESは無視されます)．コンパイラとコンパイルフラグは現在
     の言語(*note Language Choice::)で決定され，リンクでは`LDFLAGS'と
     `LIBS'が追加で使用されます．

 -- Macro: AC_TRY_LINK_FUNC (FUNCTION, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     このマクロは，`AC_LINK_IFELSE([AC_LANG_CALL([[INCLUDES]],
     [[FUNCTION-BODY]])], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE])'と同じです．

 -- Macro: AC_TRY_RUN (PROGRAM, [ACTION-IF-TRUE],
          [ACTION-IF-FALSE], [ACTION-IF-CROSS-COMPILING])
     `AC_RUN_IFELSE([AC_LANG_SOURCE([[PROGRAM]], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE], [ACTION-IF-CROSS-COMPILING])'と同じです(*note
     Run Time::)．

 -- Macro: AC_UID_T
     `AC_TYPE_UID_T'

 -- Macro: AC_UNISTD_H
     `AC_CHECK_HEADERS(unistd.h)'と同じです．

 -- Macro: AC_USG
     BSD文字列関数が`strings.h'で定義されている場合，
     `USG'を定義します．これからは`USG'ではなく`HAVE_STRING_H'
     に依存するようにすべきです．*Note Standard Symbols::.

 -- Macro: AC_UTIME_NULL
     `AC_FUNC_UTIME_NULL'

 -- Macro: AC_VALIDATE_CACHED_SYSTEM_TUPLE ([CMD])
     キャッシュファイルが現在のホスト，ターゲット，そしてビルドシステムのタイ
     プで矛盾がある場合，CMDを実行したりデフォルトのエラーメッセージを
     出力したりするために使用されていました．これは現在デフォルトで処理されま
     す．

 -- Macro: AC_VERBOSE (RESULT-DESCRIPTION)
     `AC_MSG_RESULT'.

 -- Macro: AC_VFORK
     `AC_FUNC_VFORK'

 -- Macro: AC_VPRINTF
     `AC_FUNC_VPRINTF'

 -- Macro: AC_WAIT3
     `AC_FUNC_WAIT3'

 -- Macro: AC_WARN
     `AC_MSG_WARN'

 -- Macro: AC_WORDS_BIGENDIAN
     `AC_C_BIGENDIAN'

 -- Macro: AC_XENIX_DIR
     このマクロは，Xenixの場合に出力変数`LIBS'に`-lx'を追加するた
     めに使用されていました．また，`dirent.h'が調査され，`LIBS' を
     `-ldir'に追加していました．現在では，`AC_HEADER_DIRENT' の代
     わりの別名となっていることも滅多に無く，依存すべきではありませんが，
     XENIXで実行されているかどうかを検出するコートが追加されています．

          AC_MSG_CHECKING([for Xenix])
          AC_EGREP_CPP(yes,
          [#if defined M_XENIX && !defined M_UNIX
            yes
          #endif],
                       [AC_MSG_RESULT([yes]); XENIX=yes],
                       [AC_MSG_RESULT([no]); XENIX=])

 -- Macro: AC_YYTEXT_POINTER
     `AC_DECL_YYTEXT'


File: autoconf-ja.info,  Node: Autoconf 1,  Next: Autoconf 2.13,  Prev: Obsolete Macros,  Up: Obsolete Constructs

15.5 バージョン1からの更新
==========================

Autoconfバージョン2は，バージョン1とほとんど下位互換性があります．しかし，
何かをするときにより良くなる方法も導入していますし，バージョン1の醜いも
のにはサポートしなくなったものもあります．そのため，`configure.ac'
の洗練具合に依存して，バージョン2に更新するための手作業が必要になります．
この章は，更新時に見るべき問題点も示します．また，`configure'ス
クリプトは，バージョン2の新しい機能でより良くなります．変更点は，
Autoconf配布物のファイル`NEWS'に概要が書かれています．

* Menu:

* Changed File Names::          Files you might rename
* Changed Makefiles::           New things to put in `Makefile.in'
* Changed Macros::              Macro calls you might replace
* Changed Results::             Changes in how to check test results
* Changed Macro Writing::       Better ways to write your own macros


File: autoconf-ja.info,  Node: Changed File Names,  Next: Changed Makefiles,  Up: Autoconf 1

15.5.1 ファイル名の変更
-----------------------

Autoconfでインストールされた`aclocal.m4'がある場合，(特定のパッケー
ジのソースディレクトリと対立するので)，それを`acsite.m4'に名前を変
更する必要があります．*Note autoconf Invocation::.

   パッケージで`install.sh'を配布する場合，`make'組み込みルールが，
`install'と呼ばれる意図しないファイルを作成するので，
`install-sh'に名前を変更してください．`AC_PROG_INSTALL'は両方
の名前でスクリプトを探しますが，新しい名前を使用するのが最善です．

   `config.h.top'，`config.h.bot'，または`acconfig.h'を使用
している場合，そのまま使用することは可能ですが，`AH_'マクロを使用す
るとバラバラになりません．*Note Autoheader Macros::.


File: autoconf-ja.info,  Node: Changed Makefiles,  Next: Changed Macros,  Prev: Changed File Names,  Up: Autoconf 1

15.5.2 Makefileの変更
---------------------

`Makefile.in'ファイルに`@CFLAGS@'，`@CPPFLAGS@'，そし
て`@LDFLAGS@'を，`configure'実行時に，環境変数としてこれ
らの変数の値を利用できるので，それらを加えてください．必要ではありません
が，ユーザにとって便利です．

   出力ファイルに，`configure'で生成されたというコメントを含めるた
めに，`AC_OUTPUT'に対する`Makefile'以外の入力ファイルのそれそ
れのコメントに，`@configure_input@'を加えてください．
`AC_OUTPUT'で呼び出す全ての種類のファイルに対し，自動的に正しいコメ
ント文を選択するには，作業が非常に多くなります．

   `distclean'ターゲットで削除するファイルリストに， `config.log'
と`config.cache'を加えてください．

   以下のような`Makefile.in'がある場合を考えます．

     prefix = /usr/local
     exec_prefix = $(prefix)

以下のように変更する必要があります．

     prefix = @prefix@
     exec_prefix = @exec_prefix@

周りに`@'が無い変数の置換をする古い動作は削除されました．


File: autoconf-ja.info,  Node: Changed Macros,  Next: Changed Results,  Prev: Changed Makefiles,  Up: Autoconf 1

15.5.3 変更されたマクロ
-----------------------

Autoconfバージョン2でマクロの多くは名前が変更されました．まだ古い名前を
使用することも可能ですが，新しいものはより明確で，それらのドキュメントは
簡単に見つかります．古いマクロに対する新しい名前の表は，*Note Obsolete
Macros::.  新しいマクロを使用するように`configure.ac'を変換するため，
`autoupdate'プログラムを使用してください．*Note autoupdate Invocation::.

マクロには，より良い仕事をする似たものに置き換えられたものもありますが，
呼び出しに互換性がありません．`autoconf'実行中に，時代遅れのマク
ロの呼び出しに関する警告がある場合，無視しても大丈夫ですが，時代遅れのマ
クロの置換に関して出力されるアドバイスに従う場合，`configure'ス
クリプトはより良い仕事をします．特に，テストの結果を報告するメカニズムが
変化しました．(おそらく`AC_COMPILE_CHECK' によって)`echo'や
`AC_VERBOSE'を使用していた場合，`configure'スクリプトの出力
は，`AC_MSG_CHECKING'と`AC_MSG_RESULT'に変えた方が良く見えるで
しょう．*Note Printing Messages::.
これらのマクロは，キャッシュ変数に関連 して最高の仕事をします．*Note
Caching Results::.


File: autoconf-ja.info,  Node: Changed Results,  Next: Changed Macro Writing,  Prev: Changed Macros,  Up: Autoconf 1

15.5.4 変更された結果
---------------------

シェル変数の`DEFS'を調査することで，前のテストの結果を調査していた
場合，それらのテストに対するキャッシュ変数の値を調査することに切り替える
必要があります．`DEFS'は`configure'実行中にも存在しません．
それは出力ファイルを生成するときのみ作成されます．バージョン1からのこの
違いは，正確にその変数を引用符で囲むことが，あまりに厄介で，
`AC_DEFINE'を毎回呼び出すことは，非効率だと分かったためです． *Note
Cache Variable Names::.

   例えば，Autoconfバージョン1に対して書かれた，`configure.ac'の一部は
以下のようになります．

     AC_HAVE_FUNCS(syslog)
     case "$DEFS" in
     *-DHAVE_SYSLOG*) ;;
     *) # syslog is not in the default libraries.  See if it's in some other.
       saved_LIBS="$LIBS"
       for lib in bsd socket inet; do
         AC_CHECKING(for syslog in -l$lib)
         LIBS="$saved_LIBS -l$lib"
         AC_HAVE_FUNCS(syslog)
         case "$DEFS" in
         *-DHAVE_SYSLOG*) break ;;
         *) ;;
         esac
         LIBS="$saved_LIBS"
       done ;;
     esac

   バージョン2に対する書き方は以下のようになります．

     AC_CHECK_FUNCS(syslog)
     if test $ac_cv_func_syslog = no; then
       # syslog is not in the default libraries.  See if it's in some other.
       for lib in bsd socket inet; do
         AC_CHECK_LIB($lib, syslog, [AC_DEFINE(HAVE_SYSLOG)
           LIBS="$LIBS -l$lib"; break])
       done
     fi

   引用符の前にバックスラッシュを加えることで，`AC_DEFINE_UNQUOTED' で
バグが生じる場合，それを削除する必要があります．今は予想通りに動作し，
(バックスラッシュ以外の)引用符を特別扱いしません．*Note Setting Output
Variables::.

現在，Autoconfマクロが設定した真偽値のシェル変数のすべては，真の値に対し
て`yes'が使用され．偽に対してはほとんど`no'を使用しますが，下
位互換性のため，代わりに空の文字列を使用するものもあります．真に対して1
や`t'にシェル変数が設定されることを期待する場合，テストを変更する必
要があります．


File: autoconf-ja.info,  Node: Changed Macro Writing,  Prev: Changed Results,  Up: Autoconf 1

15.5.5 マクロの書き方の変更
---------------------------

独自のマクロを定義するとき，現在は`define'の代わりに`AC_DEFUN'
を使用すべきです．`AC_DEFUN'は`AC_PROVIDE'を自動的に呼び出し，
`AC_REQUIRE'のために呼び出されるマクロが，画面上で入れ子状になって
いる`checking...'メッセージを妨げないように，他のマクロを中断し
ていないことを確かめます．古い方法を使用し続けても実際に害はありませんが，
便利さと美しさが現象します．*Note Macro Definitions::.

恐らく，Autoconfと共にやってくるマクロを，何かをする方法のガイドとして見
ることになるでしょう．新しいバージョンのものを見ることは，スタイルが改善
されているものもあり，新しい機能も利用しているので，よい考えでしょう．

文書化されていないAutoconfの内部(マクロ，変数，変換)を使用して，トリッキー
なことをしていた場合，なされた変更を考慮するため，変更する必要があるかど
うか調査してください．恐らくkludeする代わりに，バージョン2で公式にサポー
トされたテクニックを使用することができます．そうしなければダメでしょう．

ローカルで書かれた特徴のテストを高速化するため，キャッシュを加えてくださ
い．共有可能なマクロをカプセル化するため，テストが一般的に十分役に立つこ
とを確かめてください．


File: autoconf-ja.info,  Node: Autoconf 2.13,  Prev: Autoconf 1,  Up: Obsolete Constructs

15.6 バージョン2.13からの更新
=============================

前のセクション(*note Autoconf 1::)の導入は，このセクションにも全く適して
いるなあ....

     Autoconfバージョン2.50は，バージョン2.13とほとんど下位互換性があります．
     しかし，何かをするときより良くする方法も導入し，バージョン2.13の醜いもの
     にはサポートしなくなったものもあります．そのため，`configure.ac'の
     洗練具合に依存して，バージョン2.50に更新するための手作業が必要になります．
     この章は，更新時に見るべき問題点も示します．また，`configure'ス
     クリプトは，バージョン2.50の新しい機能でより良くなります．変更点は，
     Autoconf 配布物のファイル`NEWS'に概要が書かれています．

* Menu:

* Changed Quotation::           Broken code which used to work
* New Macros::                  Interaction with foreign macros
* Hosts and Cross-Compilation::  Bugward compatibility kludges
* AC_LIBOBJ vs LIBOBJS::        LIBOBJS is a forbidden token
* AC_FOO_IFELSE vs AC_TRY_FOO::  A more generic scheme for testing sources


File: autoconf-ja.info,  Node: Changed Quotation,  Next: New Macros,  Up: Autoconf 2.13

15.6.1 引用符で囲むことの変更
-----------------------------

紹介すべき最も重要な変更です．ほとんどのマクロの実装は完全に変更されまし
た．コードの分解，エラーメッセージの改善，ユーザインターフェースの一貫性
などが，このことで可能になりました．残念ながら副作用として，これまで(奇
跡的に)動作していた構成物には，Autoconf 2.50でおかしくなり始めるものもあ
ります．

   例えば，以下の例では，メッセージが適切に引用符で囲まれていません．

     AC_INIT
     AC_CHECK_HEADERS(foo.h,,
     AC_MSG_ERROR(cannot find foo.h, bailing out))
     AC_OUTPUT

Autoconf 2.13は，単純にそれを無視していました．

     $ autoconf-2.13; ./configure --silent
     creating cache ./config.cache
     configure: error: cannot find foo.h
     $

しかしAutoconf 2.50では，壊れた`configure'を生成します．

     $ autoconf-2.50; ./configure --silent
     configure: error: cannot find foo.h
     ./configure: exit: bad non-numeric arg `bailing'
     ./configure: exit: bad non-numeric arg `bailing'
     $

   メッセージは引用符で囲む必要があり，`AC_MSG_ERROR'の呼び出しもそう
です！

     AC_INIT
     AC_CHECK_HEADERS(foo.h,,
                      [AC_MSG_ERROR([cannot find foo.h, bailing out])])
     AC_OUTPUT

   多くの多くの(いくらでも続けたい)Autoconfマクロには...少なくとも
`AC_DEFUN'自身も含めて，適切な引用符がありませんでした！

     $ cat configure.in
     AC_DEFUN([AC_PROG_INSTALL],
     [# My own much better version
     ])
     AC_INIT
     AC_PROG_INSTALL
     AC_OUTPUT
     $ autoconf-2.13
     autoconf: Undefined macros:
     ***BUG in Autoconf--please report*** AC_FD_MSG
     ***BUG in Autoconf--please report*** AC_EPI
     configure.in:1:AC_DEFUN([AC_PROG_INSTALL],
     configure.in:5:AC_PROG_INSTALL
     $ autoconf-2.50
     $


File: autoconf-ja.info,  Node: New Macros,  Next: Hosts and Cross-Compilation,  Prev: Changed Quotation,  Up: Autoconf 2.13

15.6.2 新しいマクロ
-------------------

Autoconfは何年も休止中だったので，その間AutomakeがAutoconfのようなマクロ
を提供していました．現在は，Autoconf 2.50がこれらのマクロのより良いバー
ジョンを提供していて，`AM_'ではなく`AC_'の名前空間で統合されて
います．しかし，`autoupdate'で容易に更新できるように，そのような
`AM_'マクロも結合されて提供されています．

残念ながら，Automakeはこれらのマクロ名を引用符で囲んでいませんでした．そ
のため，`m4'が`AC_DEFUN(AM_TYPE_PTRDIFF_T, ...)'のよう
なマクロを`aclocal.m4'で見つけたとき，`AM_TYPE_PTRDIFF_T'は展
開され，そのAutoconfの定義で置換されていました．

   幸い，Autoconfは前置される`AC_INIT'の展開を受けて，それが所有する単
語で文句をいいます．

     $ cat configure.in
     AC_INIT
     AM_TYPE_PTRDIFF_T
     $ aclocal-1.4
     $ autoconf
     ./aclocal.m4:17: error: m4_defn: undefined macro: _m4_divert_diversion
     actypes.m4:289: AM_TYPE_PTRDIFF_T is expanded from...
     ./aclocal.m4:17: the top level
     $

将来のAutomakeのバージョンは，単純にこれらのマクロをこれ以上定義せず，お
そらく残りのマクロ名を引用符で囲むでしょう．しかし，全てがうまくいくまで
じっと待っている必要はありません．(単独で要求されるものもありますが)マク
ロを提供するための仕事は単純ではないので，Automakeのマクロに依存しないで
ください．

     $ cat configure.in
     AC_INIT
     AM_TYPE_PTRDIFF_T
     $ rm aclocal.m4
     $ autoupdate
     autoupdate: `configure.in' is updated
     $ cat configure.in
     AC_INIT
     AC_CHECK_TYPES([ptrdiff_t])
     $ aclocal-1.4
     $ autoconf
     $


File: autoconf-ja.info,  Node: Hosts and Cross-Compilation,  Next: AC_LIBOBJ vs LIBOBJS,  Prev: New Macros,  Up: Autoconf 2.13

15.6.3 ホストとクロスコンパイル
-------------------------------

コンパイラ作者の経験とそれ以降の長期にわたる公開討論を基にして，一連のク
ロスコンパイルの多くの面が変更されました．

   -
     ビルド，ホスト，そしてターゲットアーキテクチャタイプの違いに関連すること．

   - `configure'でそれらを指定するコマンドラインインターフェース．

   - `configure'で定義される変数．

   - クロスコンパイルモードを利用可能にすること．


ビルド，ホスト，そしてターゲットアーキテクチャタイプの違いに関連すること
は解決しています．一連のデフォルトは，現在は単純です．ターゲットのデフォ
ルトはホスト，ホストはビルド，そしてビルドは`config.guess' の結
果となっています．それにもかかわらず，2.13から2.50へ容易に変換するために，
以下の変換手法が実装されています．それは，リリースの組を完全に利用不可能
にすることはできないので，_それに依存しないでください_ (直すより問
題が生じることが多いので，我々はそれを維持することは不可能です)．

   `--build'または`--host'で指定しない限り，すべてのデフォル
トは`config.guess'の実行結果になります．指定する場合は，デフォル
トは指定したシステムタイプになります．両方を指定していて異なっている場合，
テストと要求された実行物をの実行しないように，`configure'はクロ
スコンパイルモードになります．

   ヒント：`config.guess'の結果に優先させたい場合は，
`--host'ではなく`--build'の方が好ましくなっています．将来
は，`--host'でビルドシステムタイプを優先しなくなるでしょう．
`--host'を指定する場合も，確実に`--build'も指定してください．


   下位互換性のため，`configure'はシステムタイプ自身をオプションと
して受け入れます．そのようなオプションは，ビルド，ホスト，そしてターゲッ
トのシステムタイプのデフォルトに優先されます．以下のコンフィグレーション
命令では，NetBSD/alphaで実行するのですが，ビルドプラットフォー
ムにもなるGNU Hurd/sparcのコードを生成する一連のクロスツールが
コンフィグレーションされます．

     ./configure --host=alpha-netbsd sparc-gnu


   Autoconf 2.13とそれ以前では，変数`build'，`host'，そして
`target'は，`AC_CANONICAL_BUILD'の呼び出しの前後で異なる意味を
持っていました．現在は，`--build'の引数を指定することで，それは厳
密な意味で`build_alias'にコピーされ，それ以外では空のままになります．
`AC_CANONICAL_BUILD'の後で，`build'は標準的なビルドタイプに設
定されます．変換を容易にするため，以前の内容は，`build_alias'と同じ
です．この壊れた機能に依存_しないように_ してください．

   下位互換性を考慮した手法は上のようになり，`--host'が指定されてい
て，`--build'指定されていないときは，ビルドシステムは
`--host'と同じだと仮定され，`build_alias'がその値として設定
されます．最終的には，この歴史的に間違っている動作はなくなるでしょう．


クロスコンパイルを利用可能にするための前者の方法はあまり良くなく，特に，
それが安易に使用されると，通常のエンドユーザが不可解なエラーメッセージを
前にして困ってしまいます．コンパイラが汎用的でないときだけのために，
`configure'はクロスコンパイルモードに入ることが可能です．これは
主に，ユーザからの明示的なフラグを待つ代わりに，`configure' をク
ロスコンパイルの検出を試みるために使用されるためです．

   現在は，`--host'が渡されている場合，そしてその状況でだけ，
`configure'はクロスコンパイルモードに入ります．

以下は，短いドキュメントです．2.13とその後のものの間で簡単に変換するため，
より複雑な手法が実行されています．以下は将来削除されるので，_以下の
内容に依存しないでください_．

   `--host'を指定していて`--build'を指定していない場合，
`configure'が最初のコンパイルテストを実行するときに，コンパイラ
で実行形式が生成されることを実行することで調査してみます．実行が失敗する
場合，クロスコンパイルモードに入ります．これは壊れやすいものです．さらに，
コンパイラテストを実行する頃には，ビルドシステムのタイプを修正するには遅
過ぎるかもしれません．そのため，`--host'を指定するときには，確実に
`--build'も指定してください．

     ./configure --build=i686-pc-linux-gnu --host=m68k-coff

これでクロスコンパイルモードに入ります．コンパイラに`configure'
の情報を渡すことなくクロスコンパイルする設定から成り立っている前者のイン
ターフェースは時代遅れです．例えば，以下のようなコンフィグレーションを行
なっていて，指定されたコンパイラで生成されたコードが実行できない場合，
`configure'は失敗します．

     ./configure CC=m68k-coff-gcc


File: autoconf-ja.info,  Node: AC_LIBOBJ vs LIBOBJS,  Next: AC_FOO_IFELSE vs AC_TRY_FOO,  Prev: Hosts and Cross-Compilation,  Up: Autoconf 2.13

15.6.4 `AC_LIBOBJ'対`LIBOBJS'
-----------------------------

Autoconf 2.13までは，関数の置換は変数`LIBOBJS'で開始されていました．
Autoconf 2.50からは，マクロ`AC_LIBOBJ'を代わりに使用すべきです (*note
Generic Functions::)．Autoconf 2.53からは，`LIBOBJS'の使用は
エラーになります．

   この変更は，GNUビルドシステムの構成要素から要求されました．特
に，`configure.ac'のパースで使用される様々な壊れやすいテクニックは，
すべてトレースを使用することで置換されます．結果として，すべての動作をト
レース可能にする必要があり，それでクリティカルな変数の代入は時代遅れにな
ります．幸運にも`LIBOBJS'だけが問題となっていて，それは美しく処理す
ることが可能です("何も変更する必要はない"ということです)．

   典型的な`LIBOBJS'の使用方法は二つありました．関数の置換を依頼するこ
とと，Automakeそして/またはLibtoolに対する`LIBOBJS'を調整することで す．


   関数の置換に対しては，修正はすぐにできます．`AC_LIBOBJ'を使用してく
ださい．例えば，以下を考えます．

     LIBOBJS="$LIBOBJS fnmatch.o"
     LIBOBJS="$LIBOBJS malloc.$ac_objext"

以下で置換すべきです．

     AC_LIBOBJ([fnmatch])
     AC_LIBOBJ([malloc])


   自動的なde-ANSI-ficationが依頼されたとき，Automakeは，`$U'をベース
ファイル名に追加するために`LIBOBJS'されたファイル名が必要です．
Libtoolは，接尾子が`.lo'になっている`LTLIBOBJS'の定義が必要で
す．人々は，以下のような断片を実行していました．

     # This is necessary so that .o files in LIBOBJS are also built via
     # the ANSI2KNR-filtering rules.
     LIBOBJS=`echo "$LIBOBJS" | sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`
     LTLIBOBJS=`echo "$LIBOBJS" | sed 's/\.o/\.lo/g'`
     AC_SUBST(LTLIBOBJS)

`.o'が拡張子ではない可能性があるので，このコードが_間違ってい
る_ことに注意してください(1)！ 以下のように読み換えてください．

     # This is necessary so that .o files in LIBOBJS are also built via
     # the ANSI2KNR-filtering rules.
     LIB@&t@OBJS=`echo "$LIB@&t@OBJS" |
                  sed 's,\.[[^.]]* ,$U&,g;s,\.[[^.]]*$,$U&,'`
     LTLIBOBJS=`echo "$LIB@&t@OBJS" |
                sed 's,\.[[^.]]* ,.lo ,g;s,\.[[^.]]*$,.lo,'`
     AC_SUBST(LTLIBOBJS)


   もやはこれを使用する必要がありません．`AC_OUTPUT'は`LIBOBJS'
と`LTLIBOBJS'を正規化します(そのため，あらゆるバージョンのAutomake
とLibtoolで動作します)．この行を削除してください(これはマクロではないの
で，`autoupdate'でこの作業を行なうことは不可能です)．

   `U'を`Makefile'で使用する必要はありません．

   ---------- Footnotes ----------

   (1) もう一つの理由として，`LIBOBJS'を直接代入するのは反対です．


File: autoconf-ja.info,  Node: AC_FOO_IFELSE vs AC_TRY_FOO,  Prev: AC_LIBOBJ vs LIBOBJS,  Up: Autoconf 2.13

15.6.5 `AC_FOO_IFELSE'対`AC_TRY_FOO'
------------------------------------

Autoconf 2.50以来，内部コードでは，一方では`AC_PREPROC_IFELSE'，
`AC_COMPILE_IFELSE'，`AC_LINK_IFELSE'，そして
`AC_RUN_IFELSE'を使用し，もう一方では反対されている
`AC_TRY_CPP'，`AC_TRY_COMPILE'，`AC_TRY_LINK'，そして
`AC_TRY_RUN'の代わりに`AC_LANG_SOURCES'と
`AC_LANG_PROGRAM'を使用しています．その動機は以下にあります．
   - より矛盾のないインターフェース．`AC_TRY_COMPILE'などは，その引数を
     二重の引用符で囲みます．

   -
     一方ではソースを生成し，もう一方ではプログラムを実行するように，組合せが
     増加しても分解することで解決します．

   -
     この手法はプレーンのCとC++より多くの言語をサポートする助けとなります．

構文の変更だけでなく，哲学的な変更もなされました．正確さの代償として速度
を用いたことを強調しておきますが，今日のAutoconfは，テスティングフレーム
ワークの正確さを進展させていて，う〜ん...速度の代償になっています．

   なされては_いない_完全な例として，ヘッダファイルが，型，構造体，構
造体のメンバー，または関数といった特定の宣言を含んでいるかどうかを調べる
方法が以下にあります．ヘッダファイルで直接`grep'を実行する代わりに，
`AC_EGREP_HEADER'を使用してください．調査している`#include' 以
外のヘッダファイルでシンボルを定義しているシステムもあるでしょう．

(悪い)例として，シンボルが，ヘッダファイルで定義されているか，またはC プ
リプロセッサで定義されているかを，Cプリプロセッサを調査すべきではない理
由がは以下にあります．

     AC_EGREP_CPP(yes,
     [#ifdef _AIX
       yes
     #endif
     ], is_aix=yes, is_aix=no)

   上記の例では，適切に書かれている(i)`AC_LANG_PROGRAM'を使用し，(ii)
コンパイラを実行すべきです．

     AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
     [[#if !defined _AIX
     # error _AIX not defined
     #endif
     ]])],
                        [is_aix=yes],
                        [is_aix=no])


File: autoconf-ja.info,  Node: Using Autotest,  Next: FAQ,  Prev: Obsolete Constructs,  Up: Top

16 Autotestで一般的なテストスイートを生成する
*********************************************

     *厳重注意：このセクションでは，この次のリリースのAutoconfの一部と
     なっている，実験的な機能を記述しています．我々はAutotestが安定しているこ
     とを信じていますが，このドキュメントでは将来変更される可能性があるインター
     フェースを記述しています．Autoconfのメーリングリストを購読しないまま
     Autotestに依存することはやめてください．*

移植性の高いプロジェクトで，テストスイートを実行するために移植性のないツー
ルに依存していることは，矛盾しています．Autoconf自身がこの問題の典型です．
2.13までは完全な移植性を目的としていましたが，そのテストスイートは
DejaGNUを使用していて，それは高品質で複雑なテストフレームワー
クですが，Unixシステムの標準からかけ離れていました．悪いことに，ほとんど
の壊れやすいプラットフォームが無いことがよくあり，そのプラットフォームが
Autoconfを苦しめ，欠陥を提示していることがほとんどでした．

この問題を回避するために，パッケージ管理者の多くは，その出力が終了ステー
タスとなる，つまりテストが成功するまたは失敗するといった，単純なシェルス
クリプトをベースに，独自のテストフレームワークを開発してきました．さらに，
これらのテストのほとんどは，共通のパターン，重複している大量のコードの結
果，退屈な管理などを共有しています．

以下はAutoconfが生まれた理由と全く同じですが，Autotestは，M4マクロを基本
として移植性の高いシェルスクリプトを構築するテストスイートを生成するフレー
ムワークを提供しています．スイート自身は，バグの報告で中断することを限り
なく少なくし，自動的なログ生成と追跡機能を備えていて，単純なタイミングで
バグは報告されます．

Autoconf自身はAutotestを何年も使用していて，テストスイートとバグの報告の
強さをかなり改善している"attest"を実行しています．Autotestの生成物を
使用していることが知られている，Bison，Free Recode，Free Wdiff， GNU
Tar といったそれ以外のプロジェクトでは，それぞれ異なるニー
ズがあり，一般的なテストフレームワークとしてのAutotestにのんびりと磨きを
かけていました．

   それにもかかわらず，DejaGNUと比較して，Autotestは対話的なテス
トツールとしては不十分で，それがおそらく主な制限事項となっています．

* Menu:

* Using an Autotest Test Suite::  Autotest and the user
* Writing testsuite.at::        Autotest macros
* testsuite Invocation::        Running `testsuite' scripts
* Making testsuite Scripts::    Using autom4te to create `testsuite'


File: autoconf-ja.info,  Node: Using an Autotest Test Suite,  Next: Writing testsuite.at,  Up: Using Autotest

16.1 Autotestテストスイートを使用する
=====================================

* Menu:

* testsuite Scripts::           The concepts of Autotest
* Autotest Logs::               Their contents


File: autoconf-ja.info,  Node: testsuite Scripts,  Next: Autotest Logs,  Up: Using an Autotest Test Suite

16.1.1 `testsuite'スクリプト
----------------------------

Autotestを使用してテストスイートや評価スイートを生成することは簡単です．
評価スイート全体は，`autom4te'で処理されるファイルに保持されてい
て，それ自身は配布物から得られるスタンドアローンのBourneシェルスクリプト
を生成するために，GNU M4の環境下で使用されます． `autom4te'もGNU
M4もインストールしているエンドユーザは 不要です．

   評価スイートのそれぞれのテストは，テストグループの一部にすべきです．
"テストグループ(test group)"は，通常はグループのテストの一つがデータ
ファイルを作成し，それ以降のテストで同じグループのテストがそれを読み込む
ために，お互いに実行される必要がある混合テストの，連続した手続きになって
います．テストグループごとの数個のテストのみを維持する方がより良く，テス
トグループごとに一つのテストのみを維持することが可能な場合，それは理想的
です．

   最も単純なパッケージ以外のすべてのものに対して，`testsuite.at'のよ
うなファイルは，別々のファイルにした方が管理しやすいことも多いので，すべ
てのテストのソースを完全に保持しているわけではありません．これらの個別の
ファイルのそれぞれは，単一のテストグループや，パッケージの共通の機能をす
べて提示しているテストグループの連続したものを維持しています．そのような
場合は，ファイル`testsuite.at'は評価スイート全体の初期化のみを行な
い，他のすべてのテストファイルに対して含める文をリストアップする前に，要
素が健全かどうかを調査するときもあります．特殊なファイル
`package.m4'はパッケージの識別子を含んでいて，見つかった場合は自動
的にインクルードされます．

   便利な代替品は，すべての大域的な呼び出しをファイル`local.at'に移動
し(ローカルなAutotestマクロは基本的な状態を調査し，`AT_INIT'を呼び
出します)，`testsuite.at'をサブテストスイートを`m4_include'す
る単純なリストにすることです．そのような状況では，テストスイート全体また
は一部を生成すると，`autom4te'コマンドライン引数の選択が問題にな
ります．

   Autotestが生成する評価スクリプトは，慣習で`testsuite'から呼び出
されます．実行時には，`testsuite'はそれぞれのテストグループを順
番に実行し，テストごとにその特定のテストが成功したか失敗したかを告げる概
要を表示する一行を生成します．すべてのテストの終りに，数を集約して出力し
ます．デバッグディレクトリには，それぞれのテストのグループで失敗したもの
があれば，それが残ります．そのようなディレクトリは
`testsuite.dir/NN'と命名され，NNはテストグループの順番
になり，以下のものが含まれています．

   * デバッグスクリプトは`run'と命名され，"デバッグモード(debug
     mode)"でテストの結果を返します(*note testsuite
     Invocation::)．自動的に生
     成されるデバッグスクリプトは，バグの調査を簡単にする目的があります．

   * すべてのファイルは`AT_DATA'で生成されます．

   * 実行時のログは，`testsuite.log'と命名されます．

理想的な状況では，失敗するテストがなく，結果として有効なものが残っている
デバッグディレクトリはありません．

評価スイートの個別のテストがコンフィグレーションスクリプトからの情報を入
手する必要が生じることも，実験段階ではよくあります．すべての評価スイート
で共通なこの情報が，`AC_CONFIG_TESTDIR'で自動的に生成されるファイル
`atconfig'で提供されることもあります．テスト環境で特別に必要となる
コンフィグレーションの情報に対し，`AC_CONFIG_FILES'で実際に作成され
るように，`atlocal.in'という名前の追加ファイルを準備してもかまいま
せん．コンフィグレーションのプロセスで，`atconfig'と`atlocal'
は二つの入力ファイルから作成され，これら二つの生成されたファイルは，自動
的に`testsuite'スクリプトで読み込まれます．

   ファイル間の関係を表示する図は以下のようになります．

配布するソフトウェアパッケージの準備に使用されるファイルです．

                     [package.m4] -->.
                                      \
     subfile-1.at ->.  [local.at] ---->+
         ...         \                  \
     subfile-i.at ---->-- testsuite.at -->-- autom4te* -->testsuite
         ...         /
     subfile-n.at ->'

ソフトウェアパッケージのコンフィグレーションで使用されるファイルです．

                                          .--> atconfig
                                         /
     [atlocal.in] -->  config.status* --<
                                         \
                                          `--> [atlocal]

テストスイートを実行中に作成されるファイルです．

     atconfig -->.                    .--> testsuite.log
                  \                  /
                   >-- testsuite* --<
                  /                  \
     [atlocal] ->'                    `--> [testsuite.dir]


File: autoconf-ja.info,  Node: Autotest Logs,  Prev: testsuite Scripts,  Up: Using an Autotest Test Suite

16.1.2 Autotestのログ
---------------------

実行時に，テストスイートはそれ自身の名前に`.log'が後置されているロ
グファイルを作成し，例えば，`testsuite'という名前のテストスイー
トは`testsuite.log'を作成します．それには多くの情報が含まれ，通常は
管理者が実際に必要とするもの以上ですが，そのためほとんどの場合で必要とさ
れるすべてのものが含まれます．

コマンドライン引数
     残念なことに広く広がっているUnixの非常に悪い習慣は，
     `CC=my-home-grown-cc ./testsuite'のように，コマンドの前に環境変数を
     設定することです．この結果テストスイートは変更を知ることが無く，そのため，
     (i)それを報告することが不可能で，(ii)連続する実行に対し`CC' の値を
     保存することができません．Autoconfは全く同じ問題に直面していて，コマンド
     ライン引数での変数定義を渡すようユーザに依頼することで解決しました．
     Autotestでもこの規則が要求されますが，強制する意味はありません．ログには
     ユーザが変更した変数の追跡が含まれています．

`ChangeLog'の抜粋
     ソースの階層で見つかるすべての`ChangeLog'の先頭の行です．バグがパッ
     ケージの開発バージョンで報告されるとき，バージョン文字列はユーザがコンパ
     イルしたソースの正確な状態を知るための情報としては十分ではないので，これ
     は特に役に立ちます．もちろんこれは`ChangeLog'の使用方法に依存します．

ビルドマシン
     クロスコンパイル環境でテストスイートを実行するということは，テストスイー
     トはマシンBUILDで実行されますがプログラムはマシンHOSTで実行
     されるという意味があり，簡単な作業ではありません．テストスイートとプログ
     ラムの両方をHOSTで実行するのはより簡単ですが，テストスイートの観点
     からすると，単一の環境変数HOST = BUILDは残ります．ログにはビ
     ルドマシンに関連する情報が含まれていて，それには重要な環境変数も含まれて
     います．

テストされたプログラム
     テストされたプログラムの絶対バスと`--version'の答えです (*Note
     Writing testsuite.at::，`AT_TESTED'を参照してください)．

コンフィグレーションのログ
     `configure'で生成される`config.log'の内容が後置されます．そ
     れにはコンフィグレーションフラグとコンフィグレーション自身の詳細な報告が
     含まれます．


File: autoconf-ja.info,  Node: Writing testsuite.at,  Next: testsuite Invocation,  Prev: Using an Autotest Test Suite,  Up: Using Autotest

16.2 `testsuite.at'を書く
=========================

`testsuite.at'はBourneシェルスクリプトで，特殊なAutotest M4マクロを
使用して作成します．それは，最初の方で`AT_INIT'の呼び出しを含んでい
て，それにテストのためのソースファイルごとに`m4_include'の呼び出し
が続きます．それぞれのインクルードファイルや，インクルードファイルが使用
されていない場合は`testsuite.at'の残りは，テストグループの連続した
手続きが含まれています．それぞれのテストグループは`AT_SETUP'の呼び
出しで始まり，それは任意の数のシェルコマンドや`AT_CHECK'の呼び出し
が含まれていて，`AT_CLEANUP'の呼び出しで完結します．

 -- Macro: AT_INIT ([NAME])
     Autotestを初期化します．パッケージに複数のテストスイートを含める場合，テ
     ストスイートにNAMEを与えることが推奨されます．すべての状況で，テス
     トスイートは常にパッケージ名とバージョンを表示します．それはパッケージの
     バグを報告する(メール)アドレスも継承します．

 -- Macro: AT_TESTED (EXECUTABLES)
     それぞれのプログラムのパスと`--version'の答を，スペースで分離され
     ているリストEXECUTABLESにログをとります．複数回呼び出されると新し
     い実行が登録され，言い替えると，一つのプログラムの複数回の登録を危惧する
     必要はありません．

   Autotestテストスイートは，テストされるプログラムを見つける際に
`PATH'に依存します．これは様々なツールの絶対パスから生成されるもの
から保存され，インストールされているプログラムのテストを可能にします．そ
のため，動作しているプログラムを知ることは，テストスイート自身やその偶発
的な誤使用の問題を理解するために重要です．互換性の問題を簡単に診断するた
めに，依存している外部のプログラムを登録することも重要です．


 -- Macro: AT_SETUP (TEST-GROUP-NAME)
     このマクロは関連するテストのグループがすべて同じサブシェルで実行されるよ
     うに開始します．それは，開始されるテストグループの目的を手短に記述した数
     語の単語(30から40文字以下)を保持している，単一の引数を受け入れます．

 -- Macro: AT_KEYWORDS (KEYWORDS)
     まとまっているテストグループに関連する，スペースで分離されている
     KEYWORDSのリストです．これでテストスイートの"slices"を実行するこ
     とが可能になります．例えばテストグループの`foo'の機能を行使している
     場合，`AT_KEYWORDS(foo)'を使用することで，これらのテストグループを
     排他的に実行するために`./testsuite -k
     foo'を実行します．テストグルー
     プのTITLEは，`AT_KEYWORDS'に自動的に保存されます．

     テストグループ内で複数回呼び出すことで新しいキーワードを累積します．言い
     替えると，テストグループで同じキーワードを複数回登録することを危惧する必
     要はありません．

 -- Macro: AT_XFAIL_IF (SHELL-CONDITION)
     テストが，既知のバグで期待されたように失敗するかどうかを決定します(サポー
     トされていない機能に対してはテストを省略するべきです)．
     SHELL-CONDITIONは`test'コマンドのようなシェルの式です．同じテ
     ストグループから，このマクロを何回でも利用することが可能で，テストが期待
     した異常終了になるには，条件の一つで十分でしょう．

 -- Macro: AT_CLEANUP
     現在のテストグループを終了します．


 -- Macro: AT_DATA (FILE, CONTENTS)
     入力データのFILEを，与えられたCONTENTSで初期化します．もちろ
     ん，カンマが含まれていることや，見せかけのM4の展開から保護するために，
     CONTENTSは適切に角カッコで囲む必要があります．内容は行末(EOF)で終
     える必要があります．

 -- Macro: AT_CHECK (COMMANDS, [STATUS = ``0''], [STDOUT = ``''],
          [STDERR = ``''], [RUN-IF-FAIL], [RUN-IF-PASS])
     与えられたシェルコマンドCOMMANDSを実行することでテストを実行します．
     これらのコマンドは，期待されるSTDOUTとSTDERRの内容を生成しな
     がら，通常のSTATUSで終えるべきです．COMMANDSが77のステータス
     で終了する場合，テストグループ全体が省略されます．それ以外で，このテスト
     が失敗する場合はシェルコマンドRUN-IF-FAILを実行し，このテストがパ
     スした場合はシェルコマンドRUN-IF-PASSを実行します．

     COMMANDSを標準出力にも標準エラー出力にもリダイレクトしては_い
     けません_．

     STATUS，またはSTDOUT，またはSTDERRが`ignore'の場
     合，対応する値は調査されません．

     STDOUTに対する特殊な値`expout'は，COMMANDSの出力がファ
     イル`expout'の内容であることを期待するという意味があります．
     STDOUTが`stdout'の場合，COMMANDSの標準出力はファイル
     `stdout'のテスト以外でも利用可能です．`expout'と`stderr'
     を用いているSTDERRも同様です．


File: autoconf-ja.info,  Node: testsuite Invocation,  Next: Making testsuite Scripts,  Prev: Writing testsuite.at,  Up: Using Autotest

16.3 `testsuite'スクリプトの実行
================================

Autotestテストスイートは以下の引数をサポートしています．

`--help'
`-h'
     オプションのリストを表示し，正しく終了します．

`--version'
`-V'
     テストスイートのバージョンを表示し，正しく終了します．

`--clean'
`-c'
     テストスイートが生成したすべてのファイルを削除し終了します．Makefileター
     ゲットの`clean'を意味します．

`--list'
`-l'
     すべてのテスト(またはセクションのみ)を，可能なキーワードを含めてリストアッ
     プします．


デフォルトで，すべてのテストはデフォルトの環境変数で，最初は静かに，その
後で冗長に実行され(または`--list'で記述され)ますが，テストの組の
環境変数と冗長さの度合は調整可能です．

`VARIABLE=VALUE'
     環境変数VARIABLEをVALUEに設定します．デバッグスクリプトとし
     て`FOO=foo ./testsuite'を実行して，その後で異なる環境変数で実行しな
     いでください．

     変数`AUTOTEST_PATH'は`PATH'に前置するためにテストするパスを指
     定します．それは特別に相対パス(`/'で始まらない)を処理します．それら
     は，ビルドしているパッケージのトップレベルから相対的なものと考えられます．
     すべてのディレクトリは絶対的になり，最初は_ビルド_ツリーのトップレ
     ベルで開始され，その後で_ソース_ツリーで開始されます．例えば，
     `/tmp/foo'でビルドされている`/src/foo-1.0'のソースパッケージの
     `./testsuite AUTOTEST_PATH=tests:bin'は，結果として
     `/tmp/foo/tests:/tmp/foo/bin'になり，そして
     `/src/foo-1.0/tests:/src/foo-1.0/bin'が`PATH'に追加されます．

`NUMBER'
`NUMBER-NUMBER'
`NUMBER-'
`-NUMBER'
     明確な意味を持ち一致するテストグループを選択肢に追加します．

`--keywords=KEYWORDS'
`-k KEYWORDS'
     (`AT_SETUP'や`AT_KEYWORDS'への引数となる)タイトルやキーワード
     が_すべての_カンマで分けられたリストKEYWORDSのキーワードにマッ
     チするテストグループの選択に追加します．

     `./testsuite -k autoupdate,FUNC'を実行すると，(`AC_CHECK_FUNC'
     や`AC_FUNC_FNMATCH'などで) `autoupdate'_および_
     `FUNC'でタグ付けされているすべてのテストを選択しますが，
     `./testsuite -k autoupdate -k FUNC'は`autoupdate'_あるい
     は_`FUNC'でタグ付けされているすべてのテストを選択します．

`--errexit'
`-e'
     テストが失敗した場合，すぐにテストを中断します．それは`--debug'
     を暗黙に指定します．過去のテストグループをクリーンアップし，デバッグスク
     リプトを生成し，ログは停止されます．このオプションは，すべてのテストスイー
     トに対して意味があり，それは生成されるデバッグスクリプトに対しては実際に
     は意味がありません．

`--verbose'
`-v'
     行なっているものの詳細な出力でより冗長なものにします．これはデバッグスク
     リプトに対してデフォルトです．

`--debug'
`-d'
     テストグループを実行した後でファイルを削除しません --
     しかし，それらは
     実行前には削除され，そのためこのオプションの使用は，複数のテストグループ
     を実行するとき問題ありません．デバッグスクリプトを作成しません．ログは行
     なわれません(おそらく存在している既存の完全なログファイルを保持するため
     です)．これはデバッグスクリプトに対してデフォルトですが，それはテストス
     イート自身のデバッグでも役に立つはずです．

`--trace'
`-x'
     テストグループのシェルの追跡を開始します．


File: autoconf-ja.info,  Node: Making testsuite Scripts,  Prev: testsuite Invocation,  Up: Using Autotest

16.4 `testsuite'スクリプトの作成
================================

Autotestを動作に入れるため，コンフィグレーションと`Makefile'のから
くりで必要になるものもあります．少なくともパッケージで深いまたは浅い階層
を使用している場合，すべてのテストとその`Makefile'を格納するディレ
クトリの名前として，`tests/'を使用することを推奨します．行なうこと
の調査リストは以下のようになります．

   - パッケージ固有の定義を行なうファイル`package.m4'を必ず作成してくだ
     さい．それは，パッケージの完全な署名となる`AT_PACKAGE_STRING'と，バ
     グレポートを送るアドレス`AT_PACKAGE_BUGREPORT'を定義する必要があり
     ます．完全性の目的で，`AT_PACKAGE_NAME'，`AT_PACKAGE_TARNAME'，
     そして`AT_PACKAGE_VERSION'を定義することも提案します．これらの変数
     の記述は*Note Initializing configure::.
     我々は以下のようなMakefileの断片 を提案します．

          $(srcdir)/package.m4: $(top_srcdir)/configure.ac
                  {                                      \
                    echo '# Signature of the current package.'; \
                    echo 'm4_define([AT_PACKAGE_NAME],      [@PACKAGE_NAME@])'; \
                    echo 'm4_define([AT_PACKAGE_TARNAME],   [@PACKAGE_TARNAME@])'; \
                    echo 'm4_define([AT_PACKAGE_VERSION],   [@PACKAGE_VERSION@])'; \
                    echo 'm4_define([AT_PACKAGE_STRING],    [@PACKAGE_STRING@])'; \
                    echo 'm4_define([AT_PACKAGE_BUGREPORT], [@PACKAGE_BUGREPORT@])'; \
                  } >$(srcdir)/package.m4

     `package.m4'を配布していることと，それをソースの階層に書いているこ
     とを確かめてください．テストスイートは配布する必要があります！

   - `AC_CONFIG_TESTDIR'の呼び出し．

      -- Macro: AC_CONFIG_TESTDIR (DIRECTORY, [TEST-PATH =
               `DIRECTORY'])
          Autotestテストスイートは，DIRECTORYでコンフィグレーションされます．
          このマクロは，`DIRECTORY/atconfig.in'からの
          `DIRECTORY/atconfig'の実体を必要とし，デフォルトの
          `AUTOTEST_PATH'をTEST-PATHに設定します(*note testsuite
          Invocation::)．

   - しかし，`configure.ac'に，`AC_CONFIG_FILES'コマンドが
     `tests/atlocal'での代入を確実に含むよう，適切に`configure.ac'
     に書いてください．

   - `make check'でパッケージの評価を開始するように，
     `tests/Makefile.in'を修正すべきです．例は以下で提供しています．

   Automakeを用いると，評価スイートで`make check'をリンクする方法の最
小限の例は以下のようになります．

     EXTRA_DIST = testsuite.at testsuite
     TESTSUITE = $(srcdir)/testsuite
     check-local: atconfig atlocal $(TESTSUITE)
             $(SHELL) $(TESTSUITE)

     AUTOTEST = $(AUTOM4TE) --language=autotest
     $(TESTSUITE): $(srcdir)/testsuite.at
             $(AUTOTEST) -I $(srcdir) $@.at -o $@.tmp
             mv $@.tmp $@

   依存性，すなわち`testsuite.at'を含んでいるファイルのリストを，明示
的にリストアップしたいかもしれません．

厳密にAutoconfを用いると，以下のような行を追加する必要があるかもしれま
せん．

     subdir = tests

     atconfig: $(top_builddir)/config.status
             cd $(top_builddir) && \
                $(SHELL) ./config.status $(subdir)/$@

     atlocal: $(srcdir)/atlocal.in $(top_builddir)/config.status
             cd $(top_builddir) && \
                $(SHELL) ./config.status $(subdir)/$@

そして，`atconfig.in'と`$(EXTRA_DIST)'を配布物されるように管理
する必要があるかもしれません．


File: autoconf-ja.info,  Node: FAQ,  Next: History,  Prev: Using Autotest,  Up: Top

17 Autoconfのよくある質問と答え
*******************************

Autoconfに関するいくつかの質問が，時々発生します．ここではそれらを扱いま
す．

* Menu:

* Distributing::                Distributing `configure' scripts
* Why GNU m4::                  Why not use the standard M4?
* Bootstrapping::               Autoconf and GNU M4 require each other?
* Why Not Imake::               Why GNU uses `configure' instead of Imake
* Defining Directories::        Passing `datadir' to program
* autom4te.cache::              What is it?  Can I remove it?
* Present But Cannot Be Compiled::  Compiler and Preprocessor Disagree


File: autoconf-ja.info,  Node: Distributing,  Next: Why GNU m4,  Up: FAQ

17.1 `configure'スクリプトの配布
================================

     Autoconfが生成した`configure'スクリプトの配布の際，制限はありま
     すか？それは，それを利用する私のプログラムに影響しますか？

Autoconfが生成するコンフィギュレーションスクリプトを，配布したり使用した
りすることに制限はありません．Autoconfバージョン1では，GNU General
Public Licenseでカバーされていました．我々はソフトウェア著者に，
GPLのような規則で成果を配布することを奨励していましたが，Autoconfを使用
するためにそうすることは要求していません．

   `configure'と一緒に使用するファイルの`config.h.in'は，
`configure.ac'に対して使用した著作権に従います．`config.sub'
と`config.guess'は，Autoconfが生成する`configure'スクリプト
と一緒に使用するとき，GPLの例外とされ，他のパッケージと同じ規則で配布で
きます．`install-sh'はXコンソーシアムからのもので，著作権保護はあり
ません．


File: autoconf-ja.info,  Node: Why GNU m4,  Next: Bootstrapping,  Prev: Distributing,  Up: FAQ

17.2 なぜGNU M4が必要なのですか？
=================================

     なぜAutoconfはGNU M4を必要とするのですか？

M4の実装の多くは，マクロのサイズと数にハードコードされた制限があり，マク
ロ数はAutoconfの方が多くなっています．それらは，Autoconfのような洗練され
たアプリケーション無しでは難しい，以下を含むいくつかの組み込みマクロが足
りません．

     m4_builtin
     m4_indir
     m4_bpatsubst
     __file__
     __line__

   固まった状態のファイルを使用するので，AutoconfではGNU M4のバー
ジョン1.4以上を要求します．

   ソフトウェア管理者はAutoconfを使用する必要があり，GNU M4はコン
フィグレーションとインストールが簡単なので，GNU M4のインストー
ルの要求も妥当だと思われます．GNUと他のフリーソフトウェアの管
理者の多くは，GNUユーティリティが好きなので，既にインストール
しています．


File: autoconf-ja.info,  Node: Bootstrapping,  Next: Why Not Imake,  Prev: Why GNU m4,  Up: FAQ

17.3 ブートストラップはどうするのですか？
=========================================

     AutoconfがGNU M4を要求し，GNU M4にAutoconfの
     `configure'スクリプトがある場合，どうやってブートストラップすれ
     ばよいのでしょうか？鶏と卵の問題みたいですね！

   これは誤解です．GNU M4は，Autoconfが生成した
`configure'スクリプトと共に配布されていますが，Autoconfは，スク
リプトを実行するためにGNU M4をインストールすることを要求しませ
ん．AutoconfはM4の`configure'スクリプトを変更したいときだけ必要
で，(主に管理者以外) ほとんどの人が必要ありません．


File: autoconf-ja.info,  Node: Why Not Imake,  Next: Defining Directories,  Prev: Bootstrapping,  Up: FAQ

17.4 なぜImakeではないのですか？
================================

     なぜ`configure'スクリプトの代わりにImakeを使用しないのですか？

何人かがこの質問を扱って書いてきたので，私はここでそれらの説明に脚色しま
す．

   以下の答えは，Richard Pixleyが書いたものに基づきます．

     Autoconfが生成したスクリプトは，処理するために一度もセットアップされたこ
     とがないマシンでも動作することがよくあります．すなわち，新しいシステムに
     対するコンフィグレーションの推測によってきちんと動作します．Imake
     ではこ れは不可能です．

     Imakeは，ホスト特定のデータの共通のデータベースを使用します．データベー
     スを制御している一つの中央の権威によって，配布物はツールのコレクションと
     して作成されるので，X11に対してはこれは意味があります．

     GNUツールはこの方法でリリースされません．それぞれの
     GNUツールには管理者がいて，管理者は世界中に散らばっています．
     共通のデータベースを使用することは，管理するときの悪夢となります．
     Autoconfはこの種のデータベースのように見えますが，実際はそうではありませ
     ん．ホストの依存性をリストアップする代わりに，プログラムが要求することを
     リストアップします．

     GNUスイートをネイティブのツールのコレクションだと見なす場合，
     問題は似ています．しかし，GNU開発ツールは，ほとんどのホスト+
     ターゲットで，クロスツールとしてコンフィグレーション可能です．これらのコ
     ンフィグレーションは，同時にインストールも可能です．それらは，ホスト間で
     共有するホスト非依存ファイルもコンフィグレーション可能です．Imake
     はこれ らの問題を扱いません．

     Imakeテンプレートは標準化の形式です．GNU coding standardsは，
     同じ制限を必然的に課さずに，同じ問題を扱います．

   以下はPer Bothnerによって書かれたそれ以上の説明です．

     Imakeの利点の一つは，`cpp'の`#include'とマクロのメカニズムを使
     用した，大きなMakefilesを簡単に生成することです．しかし，`cpp' はプ
     ログラム不可能です．それは限定されたファシリティと，ループがないという制
     限があります．そして`cpp'ではその環境を検査できません．

     これらすべての問題は，`cpp'の代わりに`sh'を使用することで解決
     されます．シェルは完全にプログラム可能で，マクロの代入や，他のシェルスク
     リプトを実行する(あるいは他のもののソースとなる)ことが可能で，環境変数を
     も検査可能です．

   Paul Eggertはより多く詳述しています．

     Autoconfの場合，インストーラは，Imake自身がインストールされていて，うま
     く動作していることを想定する必要がありません．これは，Imakeに慣れている
     人にとっては，あまり利点とは思わないかもしれません．しかし，多くのホスト
     でImakeはインストールされておらず，デフォルトのインストールではうまく動
     作せず，Imakeにパッケージのインストールを要求すると，それらのホストでパッ
     ケージの受け入れを妨げます．例えば，Imakeテンプレートとコンフィグレーショ
     ンファイルは，正確にホストにインストールされていなかったり，Imakeのビル
     ドの手続きは，全てのソースファイルが大きなディレクトリにあると誤解したり，
     Imakeのコンフィグレーションは，一つのコンパイラを想定しているのに，パッ
     ケージやインストーラが他のものを必要としたり，パッケージが期待するImake
     と，ホストがサポートするImakeのバージョンが異なったりする場合があります．
     これらの問題は，Autoconfの方がはるかに稀で，それぞれのパッケージは，独自
     の独立したコンフィグレーションプロセッサを持ってきます．

     また，Imakeは，`make'とインストーラのCプリプロセッサの間の予期せぬ
     干渉にもしばしば苦しみます．ここでの基本的な問題は，Cプリプロセッサが，
     `Makefile'ではなく，Cプログラムのプリプロセスのためにデザインされて
     いるということです．これは，Autoconfではほとんど問題にならず，それは汎用
     のプリプロセッサM4を使用し，そこでは(インストールする人ではなく)
     パッケー ジの著作者が標準的な方法でプリプロセスを行います．

   最後はMark Eichinのメモです．

     Imakeは，それほど拡張可能でもありません．Imakeに新しい特徴を加えるために，
     独自のプロジェクトテンプレートを供給して，既存の特徴の大部分を繰り返す必
     要があります．洗練されたプロジェクトに対してベンダーが供給したImakeテン
     プレートを使用することは，効力の供給に失敗することを意味します．その理由
     は，(たとえX11プログラムを使用していなくても)
     独自のプロジェクトが必要と
     するものを全くサポートしていないからです．

     しかし，他の面では．

     一つの利点として，Imakeは`configure'以上のものを持っています．
     `Imakefile'は，`Makefile.in'より(同じか，かなり)短い傾向にあり
     ます．これは修正されています．--しかし，少なくともKerberos
     V5のツリーに 対し，共通の`post.in'と`pre.in'を呼び出すため，
     `Makefile'の一部をツリー全体で修正しました．これは，多くの共通のも
     のが，通常の`configure'セットアップにあるものさえ，繰りさえされ
     ることを意味します．


File: autoconf-ja.info,  Node: Defining Directories,  Next: autom4te.cache,  Prev: Why Not Imake,  Up: FAQ

17.5 インストールディレクトリを`#define'で定義する方法は？
==========================================================

     プログラムは，`datadir'やそれに似た場所にインストールされているライ
     ブラリファイルが必要です．以下を使用した場合です．
          AC_DEFINE_UNQUOTED([DATADIR], [$datadir],
                             [Define to the read-only architecture-independent
                              data directory.])

     以下のようになりました．
          #define DATADIR "${prefix}/share"

既に説明しているので，この動作は目的通りで，GNU Coding
Standardsでも強制されています．*Note Installation Directory Variables::
を
参照してください．同様の目的を達成するため，いくつかの手段があります．

   - `AC_DEFINE'を使用せず，コンパイルフラグで`datadir'の実際の値を
     渡す`Makefile'を使用してください．詳細は，*Note Installation
     Directory Variables::を参照してください．

   - プログラムのコンパイル時では，この解決方法は単純になります．
     `CPPFLAGS'を拡張してもかまいません．

          CPPFLAGS = -DDATADIR=\"$(datadir)\" @CPPFLAGS@

     または，そのためのヘッダファイルを作成します．

          DISTCLEANFILES = datadir.h
          datadir.h: Makefile
                  echo '#define DATADIR "$(datadir)"' >$@

   - `AC_DEFINE'を使用しますが，`configure'に`datadir'とそ
     の他のリテラル値を計算させます．多くの人々は，ラッパーマクロでこの作業を
     自動的に実行させています．例えば， Autoconf Macro Archive(1)
     のマクロ`AC_DEFINE_DIR'です．

     この解決方法は，GNU Coding Standardsに準拠していません．

   -
     これまでのすべての解決方法は，これらのディレクトリの絶対パスが，実行形式
     に強く結び付いていて，あまり良くないことに注意してください．
     `prefix'からの相対パスを計算し，実行時に`prefix'を見つけてもよ
     く，こうするとパッケージが移動可能になります．この問題を解決するために既
     に利用可能なマクロもあります． Autoconf Macro Archive(2)
     の`adl_COMPUTE_RELATIVE_PATHS'と
     `adl_COMPUTE_STANDARD_RELATIVE_PATHS'を参照してください．

   ---------- Footnotes ----------

   (1) Autoconf Macro Archive,
`http://www.gnu.org/software/ac-archive/'.

   (2) Autoconf Macro Archive,
`http://www.gnu.org/software/ac-archive/'.


File: autoconf-ja.info,  Node: autom4te.cache,  Next: Present But Cannot Be Compiled,  Prev: Defining Directories,  Up: FAQ

17.6 `autom4te.cache'はなんですか？
===================================

     このディレクトリ`autom4te.cache'は何ですか？削除しても大丈夫ですか？

   GNUビルドシステムでは，`configure.ac'が中心的な役割を果た
し，多くのツールから読み込まれます．`autoconf'は`configure'
を作成するため，`autoheader'は`config.h.in'を作成するため，
`automake'は`Makefile.in'を作成するため，`autoscan'
は`configure.ac'が完全であるかを調査するため，`autoreconf'
はそれらを利用するGNUビルドシステムの構成物を調査するために読
み込みます．"`configure.ac'を読み込む"本当の意味は，それをM4 でコ
ンパイルするということで，複雑な`configure.ac'では，それは非常に長
い処理になり得ます．

   これが，直接M4を実行する代わりに，これらすべてのツールが `autom4te'
(*note autom4te Invocation::)を呼び出す理由で，特別な
要求に答えている間，将来実行するために`autom4te.cache'に追加情報を
保存しています．例えば，`autoconf'を実行する場合，その影では
`autoheader'や`automake'などを呼び出すとき，
`configure.ac'を再び処理する必要が無いように，`autom4te' は
それ以外のツールのための情報を保存しています．速度の向上は30倍ぐらいで，
`configure.ac'の大きさにより更に大きくなります．

   しかし，それは単純なキャッシュです．削除しても問題ありません．


     永久に削除することは可能ですか？

   このキャッシュの生成は，`~/.autom4te.cfg'で利用不可能にすることが可
能で，詳細は*Note Customizing
autom4te::を参照してください．キャッシュを利
用不可能にするとAutoconfのテストスイートが40%遅くなることを覚えておいて
ください．それ以外のGNUビルドシステムの構成物を使用している場
合，キャッシュはより役に立ちます．例えば，Coreutilsで`autoreconf
-f'を実行すると，_たとえ`--force'を暗黙に指定していてもキャッ
シュを完全に利用することができないので_キャッシュが無ければ二倍遅くなり，
`--force'がなければ八倍遅くなります．


File: autoconf-ja.info,  Node: Present But Cannot Be Compiled,  Prev: autom4te.cache,  Up: FAQ

17.7 ヘッダが存在するのにコンパイルされません
=============================================

機能の調査時に覚えておくべき最も重要なガイドラインは，使いたいものをでき
るだけ真似てみるということです．残念ながら，古いバージョンの
`AC_CHECK_HEADER'と`AC_CHECK_HEADERS'はこの考えに従うと失敗し，
そして，ヘッダの調査のためコンパイラの代わりにプリプロセッサを呼び出しま
す．結果として，ヘッダ間での非互換性はコンフィグレーション時に注目されず，
管理者は結局，この問題を別の場所で処理する必要があります．

   Autoconf
2.56では両方の調査を実行するので，コンパイラとプリプロセッサが
受け入れない場合，`configure'派手に文句を言います．プリプロセッサの
結果を利用するときは，`configure.ac'を修正する時間が管理者に与えら
れます．しかし，将来はコンパイラだけ考慮されるでしょう．

   以下の例を考えて下さい．

     $ cat number.h
     typedef int number;
     $ cat pi.h
     const number pi = 3;
     $ cat configure.ac
     AC_INIT
     AC_CHECK_HEADERS(pi.h)
     $ autoconf -Wall
     $ ./configure
     checking for gcc... gcc
     checking for C compiler default output... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ANSI C... none needed
     checking how to run the C preprocessor... gcc -E
     checking for egrep... grep -E
     checking for ANSI C header files... yes
     checking for sys/types.h... yes
     checking for sys/stat.h... yes
     checking for stdlib.h... yes
     checking for string.h... yes
     checking for memory.h... yes
     checking for strings.h... yes
     checking for inttypes.h... yes
     checking for stdint.h... yes
     checking for unistd.h... yes
     checking pi.h usability... no
     checking pi.h presence... yes
     configure: WARNING: pi.h: present but cannot be compiled
     configure: WARNING: pi.h: check for missing prerequisite headers?
     configure: WARNING: pi.h: proceeding with the preprocessor's result
     configure: WARNING:     ## ------------------------------------ ##
     configure: WARNING:     ## Report this to bug-autoconf@gnu.org. ##
     configure: WARNING:     ## ------------------------------------ ##
     checking for pi.h... yes

この状況での正しい方法は，四番目の引数を使用することです(*note Generic
Headers::)．

     $ cat configure.ac
     AC_INIT
     AC_CHECK_HEADERS(number.h pi.h,,,
     [[#if HAVE_NUMBER_H
     # include <number.h>
     #endif
     ]])
     $ autoconf -Wall
     $ ./configure
     checking for gcc... gcc
     checking for C compiler default output... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ANSI C... none needed
     checking for number.h... yes
     checking for pi.h... yes

   必要条件となるヘッダのリストは*Note Particular Headers::．


File: autoconf-ja.info,  Node: History,  Next: Copying This Manual,  Prev: FAQ,  Up: Top

18 Autoconfの歴史
*****************

以下のことを不思議に思うかもしれません．なぜAutoconfは元々書かれたのです
か？どのようにして現在の形式になったのですか？(なぜそれはゴリラの唾によ
く似ているのですか？)不思議に思っていない場合，この章は有用な情報を含ん
でいないので，飛ばした方が良いでしょう．不思議に思って_いる_ 場合，
軽くながしてください....

* Menu:

* Genesis::                     Prehistory and naming of `configure'
* Exodus::                      The plagues of M4 and Perl
* Leviticus::                   The priestly code of portability arrives
* Numbers::                     Growth and contributors
* Deuteronomy::                 Approaching the promises of easy configuration


File: autoconf-ja.info,  Node: Genesis,  Next: Exodus,  Up: History

18.1 Genesis
============

1991年6月，私はFree Software FoundationのGNUユーティリティの多
くを保守していました．それらは，より多くのプラットホームに移植され，より
多くのプログラムが追加されたので，ユーザは，`Makefile'で多くの
`-D'オプション(およそ20)を選択する必要があり厄介になりました．特に
私がそうでした--私は異なるシステムでそれぞれの新しいリリースをテストす
る必要がありました．そして，私はfileutilsパッケージに対する正しい設定を
見つけるため小さなシェルスクリプトを書き，fileutils
2.0の一部としてリリー
スしました．その`configure'は，翌月，いくつかの他のGNU
ユーティリティパッケージに対する`configure' スクリプトを作成する
ため，(手作業で)改造するとうまく動作しました．Brian Berlinerも，私のスク
リプトを，CVSリビジョンコントロールシステム用に改造しました．

   その夏の後，私はRichard StallmanとRichard Pixleyが，GNUコンパ
イラツールで使用する，類似のスクリプトを開発していたことを知りました．そ
れで私は，`configure'スクリプトが発展するインタフェースをサポー
トするように改造しました．テンプレートとして，`Makefile.in'という名
前のファイルを使用し，(たくさんの中から)最初のオプション`+srcdir'を
追加し， `config.status'ファイルを作成しました．


File: autoconf-ja.info,  Node: Exodus,  Next: Leviticus,  Prev: Genesis,  Up: History

18.2 Exodus
===========

ユーザからのフィードバックを得るにつれ，私は，検索と置換，カットアンドペー
スト，それぞれのスクリプトの良く似た変更でEmacsを使用し，多くの改良点を
組み入れました．私が，GNUユーティリティパッケージに，
`configure'スクリプトを使用するため改造するにつれ，手作業での更
新は，現実的なものではなくなりました．GNUグラフィックユーティ
リティの管理者Rich Murpheyは，`configure'スクリプトは素晴らしい
というメールを送ってくれ，それらを生成するツールを持っているなら送って欲
しいという依頼がありました．持ってはいませんでしたが，そうするべきだと思
いました！それで，私はそれらを生成する仕事を始めました．手書きの
`configure'スクリプトの奴隷から，Autoconfで簡単に始める裕福で簡
単な旅が始まりました．

   Cygnus `configure'は，そのころには開発されていて，表を基に動作し
ていました．それは，主に推測しにくい(オブジェクトファイルのフォーマット
の詳細のような)特徴を，小さな数字を使用して，システムタイプを不連続な数
字で，扱う手法を主に用いていました．Brian Foxが，Bashのために開発してい
た自動的なコンフィグレーションシステムは，類似のアプローチをとっています．
一般的に使用するため，それぞれのオペレーティングシステムが持つそれぞれ異
なる特徴の最新のデータベースを管理しようとすることは，望みがないように思
われました．その場その場でほとんどの機能を調査するため，より容易でより信
頼性が高いものが必要です -- 特に，人々がローカルでハックしたり，ベンダー
がインストールしたパッチがある，ハイブリッドなシステムではそうなります．

   私は Cygnus `configure'に類似のアーキテクチャを使おうと考え，そ
れは実行時に`configure.in'の一部を読み込む一つの
`configure'スクリプトです．しかし，全てのパッケージで全ての特徴
を配布する必要は望まなかったので，プロセッサーによってそれぞれの
`configure.in'から異なる`configure'を作成する処理にしました．
そのアプローチは，多くの制御と柔軟性をもたらしました．

   私は，Larry Wall，Harlan Stennと，Raphael
Manfrediによる，Metaconfigを使
用してみようとしましたが，いくつかの理由でやめました．それが生成する
`configure'スクリプトは対話的で，それが非常に不都合だと分かりま
した．私は，それが行う(ライブラリ関数のような)特徴の調査方法が，好きであ
りませんでした．さらに，いまだ管理されているかどうか分かりませんでした．
`configure'スクリプトは，(System V R4とNeXTのような)近代的なシス
テムでは動作しないように思えました．特徴の有無の反応で，できることがあま
り柔軟ではありませんでした．学ぶことが難しいと思いました．そして，必要以
上にあまりに大きく複雑でした(私は，そのとき，Autoconfが結局どれくらい成
長するのか，理解していませんでした)．

   私は，`configure'スクリプトの私のスタイルを生成するため，Perl を
使用することを考えましたが，簡単なテキスト代入の仕事により適しているM4に
決めました．出力が暗黙で決まっているので，より小さい手法になると思いまし
た．さらに，みんなは既にそれを所有しています．(最初は，私はGNU
が拡張したM4に依存しませんでした．)また，Maryland大学の私の友達は最近，
M4を`tvtwm'を含むいくつかのプログラムのフロントエンドとして位置付け
ていて，私は新しい言語への挑戦に興味が湧きました．


File: autoconf-ja.info,  Node: Leviticus,  Next: Numbers,  Prev: Exodus,  Up: History

18.3 Leviticus
==============

私の`configure'スクリプトは，ユーザの対話的な干渉無しでシステム
の能力を自動的に決定するので，それを生成するプログラムをAutoconfigと呼ぶ
ことに決定しました．しかし，バージョンナンバーを付けると，UNIXファ
イルシステムとしてはあまりに長い名前なので，短くしてAutoconfとしました．

1991年秋，私は，M4マクロの手書きのスクリプトの部品をカプセル化し，調査時
に使用する特徴と技術の改善を加えることを続けるにつれて，フィードバックし
てもらうため，移植性の聖杯にちなんだ探求者たちのグループ(つまり，アルファ
テスター)を呼びました．テスターの間で著明な人は，以下の通りです．M4を実
行し，未解決のマクロの呼び出しの調査するAautoconfシェルスクリプトを作成
するアイディアをもたらしたFranc,ois Pinard，インクルードファイルやシ
ンボルを探すためファイルシステムを探す代わりに，より正確な結果を求るため
コンパイラの実行を提案したRichard Pixley．Autoconfに，TeXコンフィグレー
ションを与え，ドキュメントにマクロインデクッスを加えたKarl
Berry．そして，
`-D'オプションを`Makefile'に書き込む代わりに，Cヘッダファイル
を作成するサポートを加え，UUCPパッケージでAutoconfが使えるよう
にしたIan Taylor．アルファテスターは，リリースごとに変化するAutoconfマク
ロの名前と呼び出し方法に対して，何度も何度もファイルを機嫌良く調整してく
れました．彼らは皆，多くの特定の調査，偉大なアイディア，そしてバグフィク
スを提供してくれました．


File: autoconf-ja.info,  Node: Numbers,  Next: Deuteronomy,  Prev: Leviticus,  Up: History

18.4 Numbers
============

1992年7月，何カ月ものアルファテストの後で，私は Autoconf
1.0をリリースし，
それを使用して多くのGNUパッケージを改造しました．私は，それら
に対するあまりに肯定的な反応に驚きました．私が追跡記録可能な人以上の多く
の人々がそれを使用し始め，それには，GNUプロジェクトの一部では
ない(TCL，FSP とKerberos V5のような)ソフトウェアで仕事をしている人も含ま
れています．Autoconfは，`configure'を使用している多くの人が遭遇
した問題を報告してくれるので，急速に改善され続けました．

   Autoconfは，M4実行の良い耐久テストだということが分かりました．UNIX
M4は，Autoconfが定義するマクロの長さでコアダンプを吐き始め，いくつかのバ
グがGNU M4でも同様に明らかになりました．結局，私達は GNU
M4のみが持つ機能が必要だと認識しました．4.3BSD
M4は，特に組み込みマクロの設定が足りず，System Vバージョンはましですが，
私達が必要とするもの全てをいまだに供給してくれません．

人々が，Autoconfをより強い圧力の下(そして，私が予想していなかった使用方
法の下)で利用するにつれ，更なる開発事項が生じました．Karl BerryはX11 に
対する調査を加えました．david zuhnはC++サポートを寄付してくれました．
Franc,ois Pinardは，無効な引数を診断させるようにしました．Jim Blandy は
勇敢にも，後の改良のためのワークグランドとなるよう，GNU Emacs
のコンフィグレーションに強要しました．Roland McGrathは，GNU C
ライブラリのコンフィグレーションに使用し，Cヘッダテンプレートファイルを
自動的に作成する，`autoheader'スクリプトを書き，
`configure'に，`--verbose'オプションを加えました．Noah
Friedmanは，`--macrodir'オプションと `AC_MACRODIR'環境変数を加
えました．(彼は，"ソフトウェアパッケージを，Autoconfを使用するものに改
造してください"と言うことを意味する "autoconfiscate"という言葉も作
り出しました．)RolandとNoahは，`AC_DEFINE'での引用の保護を改善し，
特に私が1993年の2月から6月まで移植性の問題にうんざりしているときに多くの
バグを直しました．


File: autoconf-ja.info,  Node: Deuteronomy,  Prev: Numbers,  Up: History

18.5 Deuteronomy
================

長い間望まれていた主な特徴のリストが蓄積され，様々な人々のパッチの数年間
の効果は，残りのcruftを残したままでした．1994年4月のCygnus Supportに対す
る仕事中に，私はautoconfの主な修正を始めました．Cygnus
`configure'が関連した部分がほとんどですが，david zuhnとKen
Raeburnの助けで，Autoconfに欠けているCygnus `configure'のほとん
どの機能を追加しました．これらの機能は，`config.sub'，
`config.guess'，`--host'と`--target'を使用するサポート，
ファイルをリンクさせること，サブディレクトリで`configure'を実行
することを含みます．これらの機能に加え，Autoconfを使用するように，Kenは
GNU `as'を対応し，Rob Savoye はDejaGNUを対応し ました．

   私は，他の人々の要求に答えより多くの機能を加えました．多くの人々は，
`configure'スクリプトが実行時の調査結果を共有できるよう求め，そ
れは(特に，Cygnusのような，大きなソースツリーのコンフィグレーション時に)
イライラする程遅かったためです．Mike Haertelは，サイト特定の初期化スクリ
プトを加えることを提案しました．MS-DOSでアンパックが必要なものを配布して
いる人々は，生成されるファイル名が`config.h.in'のように二つのドット
を含むので，ファイル名の`.in'拡張子に優先するよう求めました．Jim Avera
は，`AC_DEFINE'と`AC_SUBST'の引用を使用する問題の拡張試
験を行い，彼の洞察は重要な改良につながりました．Richard Stallmanは，
Emacsの`configure'スクリプトをデバッグする人々を助けるため，
`/dev/null'の代わりに`config.log'にコンパイラ出力を送るよう頼 みました．

プログラム品質に不満があり，その他の変更をしました．メッセージに曖昧でな
い調査結果が表示されるようにし，常に結果を出力するようにしました．マクロ
の名前を組織化し，コーディングスタイルの矛盾をきれいにしました．Autoconf
を使用するソースコードパッケージの改造を助けるため開発した，追加のユーティ
リティを加えました．Franc,ois Pinardの助けで，マクロがお互いのメッセー
ジに干渉しないようにしました．(その機能は，GNU M4のパフォーマ
ンスのボトルネックを明らかにし，彼はすぐに修正しました！) 人々が解決を望
むドキュメント周りの問題を再編成しました．そして，経験から，Autoconfを変
更したとき，明らかに退化する傾向が分かっているので，テストスイートを始め
ました．

再び，貴重なフィードバックをくれたアルファテスターです．特に，Franc,ois
Pinard，Jim Meyering，Karl Berry，Rob Savoye，Ken Raeburnと，Mark Eichin
です．

最終的に，バージョン2.0が用意できました．そしてたくさんの喜びがありまし
た．(そして私は再び自由な時間を持ちます．私は考えます．これは正当な権利
だ．)


File: autoconf-ja.info,  Node: Copying This Manual,  Next: Indices,  Prev: History,  Up: Top

Appendix A このマニュアルのコピー条件
*************************************

* Menu:

* GNU Free Documentation License::  License for copying this manual


File: autoconf-ja.info,  Node: GNU Free Documentation License,  Up: Copying This Manual

A.1 GNU Free Documentation License
==================================

                      Version 1.2, November 2002

     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warrany Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

A.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: autoconf-ja.info,  Node: Indices,  Prev: Copying This Manual,  Up: Top

Appendix B 索引
***************

* Menu:

* Environment Variable Index::  Index of environment variables used
* Output Variable Index::       Index of variables set in output files
* Preprocessor Symbol Index::   Index of C preprocessor symbols defined
* Autoconf Macro Index::        Index of Autoconf macros
* M4 Macro Index::              Index of M4, M4sugar, and M4sh macros
* Autotest Macro Index::        Index of Autotest macros
* Program & Function Index::    Index of those with portability problems
* Concept Index::               General index


File: autoconf-ja.info,  Node: Environment Variable Index,  Next: Output Variable Index,  Up: Indices

B.1 環境変数の索引
==================

以下は，Autoconfが調査する環境変数のアルファベット順のリストです．

 [index ]
* Menu:

* CDPATH:                                Special Shell Variables.
                                                              (line  12)
* CONFIG_COMMANDS:                       Obsolete config.status Use.
                                                              (line  11)
* CONFIG_FILES:                          Obsolete config.status Use.
                                                              (line  15)
* CONFIG_HEADERS:                        Obsolete config.status Use.
                                                              (line  20)
* CONFIG_LINKS:                          Obsolete config.status Use.
                                                              (line  25)
* CONFIG_SHELL:                          config.status Invocation.
                                                              (line  80)
* CONFIG_SITE:                           Site Defaults.       (line  10)
* CONFIG_STATUS:                         config.status Invocation.
                                                              (line  85)
* ENV:                                   Special Shell Variables.
                                                              (line 158)
* IFS:                                   Special Shell Variables.
                                                              (line  32)
* LANG:                                  Special Shell Variables.
                                                              (line  50)
* LANGUAGE:                              Special Shell Variables.
                                                              (line  59)
* LC_ADDRESS:                            Special Shell Variables.
                                                              (line  69)
* LC_ALL:                                Special Shell Variables.
                                                              (line  50)
* LC_COLLATE:                            Special Shell Variables.
                                                              (line  50)
* LC_CTYPE:                              Special Shell Variables.
                                                              (line  50)
* LC_IDENTIFICATION:                     Special Shell Variables.
                                                              (line  69)
* LC_MEASUREMENT:                        Special Shell Variables.
                                                              (line  69)
* LC_MESSAGES:                           Special Shell Variables.
                                                              (line  50)
* LC_MONETARY:                           Special Shell Variables.
                                                              (line  50)
* LC_NAME:                               Special Shell Variables.
                                                              (line  69)
* LC_NUMERIC:                            Special Shell Variables.
                                                              (line  50)
* LC_PAPER:                              Special Shell Variables.
                                                              (line  69)
* LC_TELEPHONE:                          Special Shell Variables.
                                                              (line  69)
* LC_TIME:                               Special Shell Variables.
                                                              (line  50)
* LINENO:                                Special Shell Variables.
                                                              (line  73)
* MAIL:                                  Special Shell Variables.
                                                              (line 158)
* MAILPATH:                              Special Shell Variables.
                                                              (line 158)
* NULLCMD:                               Special Shell Variables.
                                                              (line 146)
* PATH_SEPARATOR:                        Special Shell Variables.
                                                              (line 184)
* PS1:                                   Special Shell Variables.
                                                              (line 158)
* PS2:                                   Special Shell Variables.
                                                              (line 158)
* PS4:                                   Special Shell Variables.
                                                              (line 158)
* PWD:                                   Special Shell Variables.
                                                              (line 171)
* RANDOM:                                Special Shell Variables.
                                                              (line 198)
* SIMPLE_BACKUP_SUFFIX:                  autoupdate Invocation.
                                                              (line  16)
* status:                                Special Shell Variables.
                                                              (line 180)
* WARNINGS <1>:                          autom4te Invocation. (line  58)
* WARNINGS <2>:                          autoheader Invocation.
                                                              (line  79)
* WARNINGS <3>:                          autoreconf Invocation.
                                                              (line  88)
* WARNINGS:                              autoconf Invocation. (line  65)


File: autoconf-ja.info,  Node: Output Variable Index,  Next: Preprocessor Symbol Index,  Prev: Environment Variable Index,  Up: Indices

B.2 出力変数の索引
==================

以下は，Autoconfが作成するファイルに，通常は一つ以上の`Makefile' に
代入する変数のアルファベット順のリストです．こうする方法の詳細は，
*Note Setting Output Variables::.

 [index ]
* Menu:

* abs_builddir:                          Preset Output Variables.
                                                              (line 102)
* abs_srcdir:                            Preset Output Variables.
                                                              (line 116)
* abs_top_builddir:                      Preset Output Variables.
                                                              (line 109)
* abs_top_srcdir:                        Preset Output Variables.
                                                              (line 123)
* ALLOCA:                                Particular Functions.
                                                              (line  10)
* AWK:                                   Particular Programs. (line  10)
* bindir:                                Installation Directory Variables.
                                                              (line  13)
* build:                                 Canonicalizing.      (line  26)
* build_alias:                           Canonicalizing.      (line   9)
* build_cpu:                             Canonicalizing.      (line  26)
* build_os:                              Canonicalizing.      (line  26)
* build_vendor:                          Canonicalizing.      (line  26)
* builddir:                              Preset Output Variables.
                                                              (line  99)
* CC <1>:                                System Services.     (line  44)
* CC:                                    C Compiler.          (line  55)
* CFLAGS <1>:                            Preset Output Variables.
                                                              (line  14)
* CFLAGS:                                C Compiler.          (line  55)
* configure_input:                       Preset Output Variables.
                                                              (line  21)
* CPP:                                   C Compiler.          (line 107)
* CPPFLAGS:                              Preset Output Variables.
                                                              (line  34)
* cross_compiling:                       Specifying Names.    (line  26)
* CXX:                                   C++ Compiler.        (line   7)
* CXXCPP:                                C++ Compiler.        (line  31)
* CXXFLAGS <1>:                          Preset Output Variables.
                                                              (line  41)
* CXXFLAGS:                              C++ Compiler.        (line   7)
* datadir:                               Installation Directory Variables.
                                                              (line  16)
* DEFS:                                  Preset Output Variables.
                                                              (line  48)
* ECHO_C:                                Preset Output Variables.
                                                              (line  58)
* ECHO_N:                                Preset Output Variables.
                                                              (line  58)
* ECHO_T:                                Preset Output Variables.
                                                              (line  58)
* EGREP:                                 Particular Programs. (line  15)
* exec_prefix:                           Installation Directory Variables.
                                                              (line  20)
* EXEEXT <1>:                            Obsolete Macros.     (line 153)
* EXEEXT:                                Compilers and Preprocessors.
                                                              (line   6)
* F77:                                   Fortran Compiler.    (line  18)
* FC:                                    Fortran Compiler.    (line  39)
* FCFLAGS <1>:                           Fortran Compiler.    (line  39)
* FCFLAGS:                               Preset Output Variables.
                                                              (line  70)
* FCLIBS:                                Fortran Compiler.    (line  78)
* FFLAGS <1>:                            Fortran Compiler.    (line  18)
* FFLAGS:                                Preset Output Variables.
                                                              (line  77)
* FGREP:                                 Particular Programs. (line  19)
* FLIBS:                                 Fortran Compiler.    (line  78)
* GETGROUPS_LIBS:                        Particular Functions.
                                                              (line 112)
* GETLOADAVG_LIBS:                       Particular Functions.
                                                              (line 118)
* host:                                  Canonicalizing.      (line  34)
* host_alias:                            Canonicalizing.      (line   9)
* host_cpu:                              Canonicalizing.      (line  34)
* host_os:                               Canonicalizing.      (line  34)
* host_vendor:                           Canonicalizing.      (line  34)
* includedir:                            Installation Directory Variables.
                                                              (line  27)
* infodir:                               Installation Directory Variables.
                                                              (line  30)
* INSTALL:                               Particular Programs. (line  23)
* INSTALL_DATA:                          Particular Programs. (line  23)
* INSTALL_PROGRAM:                       Particular Programs. (line  23)
* INSTALL_SCRIPT:                        Particular Programs. (line  23)
* KMEM_GROUP:                            Particular Functions.
                                                              (line 118)
* LDFLAGS:                               Preset Output Variables.
                                                              (line  84)
* LEX:                                   Particular Programs. (line  54)
* LEX_OUTPUT_ROOT:                       Particular Programs. (line  54)
* LEXLIB:                                Particular Programs. (line  54)
* libdir:                                Installation Directory Variables.
                                                              (line  33)
* libexecdir:                            Installation Directory Variables.
                                                              (line  36)
* LIBOBJS <1>:                           Generic Functions.   (line  40)
* LIBOBJS <2>:                           Particular Functions.
                                                              (line 227)
* LIBOBJS <3>:                           Generic Functions.   (line  97)
* LIBOBJS <4>:                           Particular Functions.
                                                              (line 118)
* LIBOBJS:                               Particular Structures.
                                                              (line  17)
* LIBS <1>:                              Preset Output Variables.
                                                              (line  91)
* LIBS <2>:                              Obsolete Macros.     (line 574)
* LIBS:                                  UNIX Variants.       (line  22)
* LN_S:                                  Particular Programs. (line  88)
* localstatedir:                         Installation Directory Variables.
                                                              (line  40)
* mandir:                                Installation Directory Variables.
                                                              (line  43)
* NEED_SETGID:                           Particular Functions.
                                                              (line 118)
* OBJEXT <1>:                            Compilers and Preprocessors.
                                                              (line  11)
* OBJEXT:                                Obsolete Macros.     (line 313)
* oldincludedir:                         Installation Directory Variables.
                                                              (line  46)
* PACKAGE_BUGREPORT:                     Initializing configure.
                                                              (line  42)
* PACKAGE_NAME:                          Initializing configure.
                                                              (line  30)
* PACKAGE_STRING:                        Initializing configure.
                                                              (line  39)
* PACKAGE_TARNAME:                       Initializing configure.
                                                              (line  33)
* PACKAGE_VERSION:                       Initializing configure.
                                                              (line  36)
* POW_LIB:                               Particular Functions.
                                                              (line 285)
* prefix:                                Installation Directory Variables.
                                                              (line  50)
* program_transform_name:                Transforming Names.  (line  11)
* RANLIB:                                Particular Programs. (line 108)
* sbindir:                               Installation Directory Variables.
                                                              (line  55)
* SET_MAKE:                              Output.              (line  47)
* sharedstatedir:                        Installation Directory Variables.
                                                              (line  58)
* srcdir:                                Preset Output Variables.
                                                              (line 112)
* subdirs:                               Subdirectories.      (line  13)
* sysconfdir:                            Installation Directory Variables.
                                                              (line  62)
* target:                                Canonicalizing.      (line  42)
* target_alias:                          Canonicalizing.      (line   9)
* target_cpu:                            Canonicalizing.      (line  42)
* target_os:                             Canonicalizing.      (line  42)
* target_vendor:                         Canonicalizing.      (line  42)
* top_builddir:                          Preset Output Variables.
                                                              (line 105)
* top_srcdir:                            Preset Output Variables.
                                                              (line 119)
* U:                                     AC_LIBOBJ vs LIBOBJS.
                                                              (line  34)
* X_CFLAGS:                              System Services.     (line  25)
* X_EXTRA_LIBS:                          System Services.     (line  25)
* X_LIBS:                                System Services.     (line  25)
* X_PRE_LIBS:                            System Services.     (line  25)
* YACC:                                  Particular Programs. (line 112)


File: autoconf-ja.info,  Node: Preprocessor Symbol Index,  Next: Autoconf Macro Index,  Prev: Output Variable Index,  Up: Indices

B.3 プリプロセッサシンボルの索引
================================

以下は，Autoconfマクロが定義するCプリプロセッサシンボルのアルファベット
順のリストです．Autoconfと共に動作するため，Cソースコードでは，
`#if'ディレクティブにこれらの名前を使用する必要があります．

 [index ]
* Menu:

* __CHAR_UNSIGNED__:                     C Compiler.          (line 199)
* __PROTOTYPES:                          C Compiler.          (line 214)
* _ALL_SOURCE:                           UNIX Variants.       (line  12)
* _FILE_OFFSET_BITS:                     System Services.     (line  44)
* _GNU_SOURCE:                           UNIX Variants.       (line  17)
* _LARGE_FILES:                          System Services.     (line  44)
* _LARGEFILE_SOURCE:                     Particular Functions.
                                                              (line 103)
* _MINIX:                                UNIX Variants.       (line  30)
* _POSIX_1_SOURCE:                       UNIX Variants.       (line  30)
* _POSIX_SOURCE:                         UNIX Variants.       (line  30)
* _POSIX_VERSION:                        Particular Headers.  (line 157)
* C_ALLOCA:                              Particular Functions.
                                                              (line  10)
* C_GETLOADAVG:                          Particular Functions.
                                                              (line 118)
* CLOSEDIR_VOID:                         Particular Functions.
                                                              (line  58)
* const:                                 C Compiler.          (line 139)
* DGUX:                                  Particular Functions.
                                                              (line 118)
* DIRENT:                                Obsolete Macros.     (line 134)
* F77_DUMMY_MAIN:                        Fortran Compiler.    (line 107)
* F77_FUNC:                              Fortran Compiler.    (line 167)
* F77_FUNC_:                             Fortran Compiler.    (line 167)
* F77_MAIN:                              Fortran Compiler.    (line 150)
* F77_NO_MINUS_C_MINUS_O:                Fortran Compiler.    (line  65)
* FC_FUNC:                               Fortran Compiler.    (line 167)
* FC_FUNC_:                              Fortran Compiler.    (line 167)
* FC_MAIN:                               Fortran Compiler.    (line 150)
* FC_NO_MINUS_C_MINUS_O:                 Fortran Compiler.    (line  65)
* GETGROUPS_T:                           Particular Types.    (line  10)
* GETLODAVG_PRIVILEGED:                  Particular Functions.
                                                              (line 118)
* GETPGRP_VOID:                          Particular Functions.
                                                              (line 155)
* gid_t:                                 Particular Types.    (line  44)
* GWINSZ_IN_SYS_IOCTL:                   Particular Headers.  (line 197)
* HAVE__BOOL:                            Particular Headers.  (line  60)
* HAVE_ALLOCA_H:                         Particular Functions.
                                                              (line  10)
* HAVE_CONFIG_H:                         Configuration Headers.
                                                              (line  26)
* HAVE_DECL_STRERROR_R:                  Particular Functions.
                                                              (line 291)
* HAVE_DECL_SYMBOL:                      Generic Declarations.
                                                              (line  22)
* HAVE_DIRENT_H:                         Particular Headers.  (line  11)
* HAVE_DOPRNT:                           Particular Functions.
                                                              (line 313)
* HAVE_FUNCTION:                         Generic Functions.   (line  24)
* HAVE_GETMNTENT:                        Particular Functions.
                                                              (line 150)
* HAVE_HEADER:                           Generic Headers.     (line  22)
* HAVE_LONG_DOUBLE:                      C Compiler.          (line 203)
* HAVE_LONG_FILE_NAMES:                  System Services.     (line  66)
* HAVE_LSTAT_EMPTY_STRING_BUG:           Particular Functions.
                                                              (line 267)
* HAVE_MALLOC:                           Particular Functions.
                                                              (line 184)
* HAVE_MBRTOWC:                          Particular Functions.
                                                              (line 223)
* HAVE_MMAP:                             Particular Functions.
                                                              (line 233)
* HAVE_NDIR_H:                           Particular Headers.  (line  11)
* HAVE_NLIST_H:                          Particular Functions.
                                                              (line 118)
* HAVE_OBSTACK:                          Particular Functions.
                                                              (line 238)
* HAVE_REALLOC:                          Particular Functions.
                                                              (line 242)
* HAVE_RESTARTABLE_SYSCALLS:             Obsolete Macros.     (line 449)
* HAVE_ST_BLKSIZE:                       Particular Structures.
                                                              (line   9)
* HAVE_ST_BLOCKS:                        Particular Structures.
                                                              (line  17)
* HAVE_ST_RDEV:                          Particular Structures.
                                                              (line  23)
* HAVE_STAT_EMPTY_STRING_BUG:            Particular Functions.
                                                              (line 267)
* HAVE_STDBOOL_H:                        Particular Headers.  (line  60)
* HAVE_STRCOLL:                          Particular Functions.
                                                              (line 280)
* HAVE_STRERROR_R:                       Particular Functions.
                                                              (line 291)
* HAVE_STRFTIME:                         Particular Functions.
                                                              (line 301)
* HAVE_STRINGIZE:                        C Compiler.          (line 207)
* HAVE_STRNLEN:                          Particular Functions.
                                                              (line 305)
* HAVE_STRUCT_STAT_ST_BLKSIZE:           Particular Structures.
                                                              (line   9)
* HAVE_STRUCT_STAT_ST_BLOCKS:            Particular Structures.
                                                              (line  17)
* HAVE_STRUCT_STAT_ST_RDEV:              Particular Structures.
                                                              (line  23)
* HAVE_SYS_DIR_H:                        Particular Headers.  (line  11)
* HAVE_SYS_NDIR_H:                       Particular Headers.  (line  11)
* HAVE_SYS_WAIT_H:                       Particular Headers.  (line 138)
* HAVE_TM_ZONE:                          Particular Structures.
                                                              (line  35)
* HAVE_TZNAME:                           Particular Structures.
                                                              (line  35)
* HAVE_UTIME_NULL:                       Particular Functions.
                                                              (line 309)
* HAVE_VFORK_H:                          Particular Functions.
                                                              (line  82)
* HAVE_VPRINTF:                          Particular Functions.
                                                              (line 313)
* HAVE_WAIT3:                            Obsolete Macros.     (line 174)
* HAVE_WORKING_FORK:                     Particular Functions.
                                                              (line  82)
* HAVE_WORKING_VFORK:                    Particular Functions.
                                                              (line  82)
* inline:                                C Compiler.          (line 194)
* INT_16_BITS:                           Obsolete Macros.     (line 227)
* LONG_64_BITS:                          Obsolete Macros.     (line 279)
* LSTAT_FOLLOWS_SLASHED_SYMLINK:         Particular Functions.
                                                              (line 171)
* MAJOR_IN_MKDEV:                        Particular Headers.  (line  47)
* MAJOR_IN_SYSMACROS:                    Particular Headers.  (line  47)
* malloc:                                Particular Functions.
                                                              (line 184)
* mbstate_t:                             Particular Types.    (line  14)
* mode_t:                                Particular Types.    (line  19)
* NDIR:                                  Obsolete Macros.     (line 134)
* NEED_MEMORY_H:                         Obsolete Macros.     (line 293)
* NEED_SETGID:                           Particular Functions.
                                                              (line 118)
* NLIST_NAME_UNION:                      Particular Functions.
                                                              (line 118)
* NO_MINUS_C_MINUS_O:                    C Compiler.          (line  87)
* off_t:                                 Particular Types.    (line  22)
* PACKAGE_BUGREPORT:                     Initializing configure.
                                                              (line  42)
* PACKAGE_NAME:                          Initializing configure.
                                                              (line  30)
* PACKAGE_STRING:                        Initializing configure.
                                                              (line  39)
* PACKAGE_TARNAME:                       Initializing configure.
                                                              (line  33)
* PACKAGE_VERSION:                       Initializing configure.
                                                              (line  36)
* PARAMS:                                C Compiler.          (line 214)
* pid_t:                                 Particular Types.    (line  25)
* PROTOTYPES:                            C Compiler.          (line 214)
* realloc:                               Particular Functions.
                                                              (line 242)
* restrict:                              C Compiler.          (line 164)
* RETSIGTYPE:                            Particular Types.    (line  28)
* SELECT_TYPE_ARG1:                      Particular Functions.
                                                              (line 251)
* SELECT_TYPE_ARG234:                    Particular Functions.
                                                              (line 251)
* SELECT_TYPE_ARG5:                      Particular Functions.
                                                              (line 251)
* SETPGRP_VOID:                          Particular Functions.
                                                              (line 259)
* SETVBUF_REVERSED:                      Particular Functions.
                                                              (line 276)
* size_t:                                Particular Types.    (line  41)
* STDC_HEADERS:                          Particular Headers.  (line  83)
* STRERROR_R_CHAR_P:                     Particular Functions.
                                                              (line 291)
* SVR4:                                  Particular Functions.
                                                              (line 118)
* SYS_SIGLIST_DECLARED:                  Obsolete Macros.     (line 120)
* SYSDIR:                                Obsolete Macros.     (line 134)
* SYSNDIR:                               Obsolete Macros.     (line 134)
* TIME_WITH_SYS_TIME:                    Particular Headers.  (line 175)
* TM_IN_SYS_TIME:                        Particular Structures.
                                                              (line  30)
* uid_t:                                 Particular Types.    (line  44)
* UMAX:                                  Particular Functions.
                                                              (line 118)
* UMAX4_3:                               Particular Functions.
                                                              (line 118)
* USG:                                   Obsolete Macros.     (line 542)
* vfork:                                 Particular Functions.
                                                              (line  82)
* volatile:                              C Compiler.          (line 177)
* WORDS_BIGENDIAN:                       C Compiler.          (line 123)
* X_DISPLAY_MISSING:                     System Services.     (line  25)
* YYTEXT_POINTER:                        Particular Programs. (line  54)

