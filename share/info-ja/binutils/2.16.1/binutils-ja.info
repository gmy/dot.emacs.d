-*- coding: utf-8 -*-
START-INFO-DIR-ENTRY
* Binutils(ja): (binutils-ja).         The GNU binary utilities.
* ar(ja): (binutils-ja)ar.               Create, modify, and extract from archives
* nm(ja): (binutils-ja)nm.               List symbols from object files
* objcopy(ja): (binutils-ja)objcopy.      Copy and translate object files
* objdump(ja): (binutils-ja)objdump.     Display information from object files
* ranlib(ja): (binutils-ja)ranlib.       Generate index to archive contents
* readelf(ja): (binutils-ja)readelf.      Display the contents of ELF format files.
* size(ja): (binutils-ja)size.           List section sizes and total size
* strings(ja): (binutils-ja)strings.     List printable strings from files
* strip(ja): (binutils-ja)strip.         Discard symbols
* c++filt(ja): (binutils-ja)c++filt.      Filter to demangle encoded C++ symbols* cxxfilt(ja): (binutils-ja)c++filt.     MS-DOS name for c++filt
* addr2line(ja): (binutils-ja)addr2line. Convert addresses to file and line
* nlmconv(ja): (binutils-ja)nlmconv.     Converts object code into an NLM
* windres(ja): (binutils-ja)windres.      Manipulate Windows resources
* dlltool(ja): (binutils-ja)dlltool.      Create files needed to build and use DLLs
END-INFO-DIR-ENTRY

   Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: binutils-ja.info,  Node: Top,  Next: ar,  Up: (dir)

はじめに
********

この短いマニュアルは，GNUバイナリユーティリティ(バージョン
2.16.1全体)に対する文章が含まれています．

   この文章はGNU Free Documentation
Licenseの条件の下で配布されます．ライ センスのコピーは，"GNU Free
Documentation License"と名付けられたセクショ ンに含まれています．

* Menu:

* ar::                          Create, modify, and extract from archives
* nm::                          List symbols from object files
* objcopy::			Copy and translate object files
* objdump::                     Display information from object files
* ranlib::                      Generate index to archive contents
* readelf::			Display the contents of ELF format files.
* size::                        List section sizes and total size
* strings::                     List printable strings from files
* strip::                       Discard symbols
* c++filt::			Filter to demangle encoded C++ symbols
* cxxfilt: c++filt.             MS-DOS name for c++filt
* addr2line::			Convert addresses to file and line
* nlmconv::                     Converts object code into an NLM
* windres::			Manipulate Windows resources
* dlltool::			Create files needed to build and use DLLs
* Selecting The Target System:: How these utilities determine the target.
* Reporting Bugs::              Reporting Bugs
* GNU Free Documentation License::  GNU Free Documentation License
* Index::                       Index


File: binutils-ja.info,  Node: ar,  Next: nm,  Prev: Top,  Up: Top

1 ar
****

     ar [-]P[MOD [RELPOS] [COUNT]] ARCHIVE [MEMBER...]
     ar -M [ <mri-script ]

   GNU `ar'は，アーカイブの作成，変更，そして，それからの抽出
を行います．"アーカイブ(archive)"とは，(アーカイブの"メンバー
(members)"と呼ばれる)元となる個々のファイルを取り出すことが可能な構造の
ファイル中に，他のファイルの集合を保持している単一のファイルです．

元のファイルの内容，モード(許可)，タイムスタンプ，所有者，そしてグルー
プは，アーカイブに保存されていて，抽出時に復元することが可能です．

   GNU `ar'は，任意の長さのメンバー名のアーカイブを管理するこ
とが可能です．しかし，`ar'がシステムでコンフィグレーションされ
た方法に依存し，他のツールで管理されるアーカイブのフォーマットの互換性
のため，メンバー名の長さは制限される可能性があります．それが存在する場
合，制限は15文字(a.out に関連するフォーマットの典型)や16文字(coffに関連
するフォーマットの典型)のことが多いでしょう．

   この種のアーカイブは，一般に必要なサブルーチンを保持する"ライブラリ
(libraries)"として最もよく使用されるので，`ar'は，バイナリユー
ティリティと考えられます．

   `ar'は，修飾子`s'を指定したとき，アーカイブの再配置可能な
オブジェクトモジュールに定義されているシンボルに索引を作成します．一度
作成されると，(`q'更新コマンドでの保存で)`ar'がその内容を
変更したときは，アーカイブ内で毎回この索引が更新されます．そのような索
引をもつアーカイブは，ライブラリとのリンク速度を上げ，ライブラリのルー
チンがアーカイブ内の位置に関わらず，お互いの呼び出しを可能にします．

   この索引テーブルをリストアップするため，`nm -s'や`nm
--print-armap'を使用してもかまいません．アーカイブに表が無い場合，
`ranlib'と呼ばれる`ar'の別の形式を，表に加えるために使
用することが可能です．

   GNU `ar'は，二つの異なる機能を用いて互換性があるように設計
されています．Unixシステム上の様々な形態の`ar'のように，コマン
ドラインオプションを使用してその作業を制御することが可能です．また，単
一のコマンドラインオプション`-M'を指定した場合，MRI
"librarian"プログラムのように，標準入力を通じて供給されるスクリプトを
用いて，それを制御することが可能です．

* Menu:

* ar cmdline::                  Controlling `ar' on the command line
* ar scripts::                  Controlling `ar' with a script


File: binutils-ja.info,  Node: ar cmdline,  Next: ar scripts,  Up: ar

1.1 コマンドラインでの`ar'の制御
================================

     ar [`-X32_64'] [`-']P[MOD [RELPOS] [COUNT]] ARCHIVE [MEMBER...]

   Unix形式で`ar'を使用するとき，`ar'は少なくとも二つの引
数を実行時に要求します．_operation_を指定するキー文字
(_modifiers_を指定するその他のキー文字がオプションで付きます)と，
動作対象のアーカイブ名です．

   ほとんどの処理は，それ以外にMEMBER引数を受け入れ，それは処理の対
象となる特定のファイル名を指定します．

   GNU `ar'では，最初のコマンドライン引数内で，処理コード
Pと修飾フラグMODを，任意の順序で混ぜることが可能です．

好みにより，最初のコマンドライン引数をダッシュで始めてもかまいません．

   Pキー文字は，実行する処理を指定します．それは以下のいずれでもかま
いませんが，その中の一つだけを指定する必要があります．

`d'
     アーカイブからモジュールを_削除_します．削除するモジュール名は，
     MEMBER...として指定してください．削除するファイルを指定してい
     ない場合，アーカイブはそのままです．

     `v'修飾子を指定した場合，`ar'は削除するそれぞれのモジュー
     ルをリストアップします．

`m'
     アーカイブ内でメンバーを_移動_するためにこの処理を使用してください．

     シンボルが一つ以上のメンバーで定義されている場合，アーカイブ内のメンバー
     の順序で，ライブラリを使用してプログラムがリンクされる方法に差異が発生
     するはずです．

     修飾子を使用しないで`m'を使用する場合，MEMBER引数で指名した
     すべてのメンバーは，アーカイブの_終り_に移動されます．そうする代わ
     りに，指定した位置にそれらを移動するために，`a'，`b'，または
     `i'修飾子を使用することが可能です．

`p'
     アーカイブの指定されたメンバーを標準出力ファイルに_出力_します．
     `v'修飾子が指定されている場合，その内容のコピーの前にメンバー名を
     標準出力に表示します．

     MEMBER引数を指定していない場合，アーカイブのすべてのファイルが出
     力されます．

`q'
     _すばやく追加_します．歴史的に，ファイルMEMBER...を
     ARCHIVEの終りに，置換に関する調査をせずに追加します．

     修飾子`a'，`b'，そして`i'は，このオプションに効果は
     _ありません_．新しいメンバーは常にアーカイブの終りに配置されます．

     修飾子`v'で，`ar'は追加されるそれぞれのファイルをリストアッ
     プします．

     この処理の要点は速度なので，アーカイブのシンボル表の索引が存在している
     場合でも更新されません．シンボル表の索引を更新するために，`ar s'
     または`ranlib'を明示的に使用することが可能です．

     しかし，あまりに多くの様々なシステムで，高速追加が索引を再構築すること
     を仮定されていので，GNU `ar'は，`q'を`r'の同義語
     として実装されています．

`r'
     ファイルMEMBER...をARCHIVEに挿入します(_置換_を用
     います)．この処理は，追加されるものと名前が一致した場合，既存のメンバー
     が削除される点で，`q'とは異なります．

     MEMBER...で指名されたファイルが一つでも存在しない場合，
     `ar'はエラーメッセージを表示し，名前がアーカイブと一致する既存
     のメンバーはそのままになります．

     デフォルトで，新しいメンバーはファイルの終りに追加されます．しかし，既
     存のメンバーとの相対位置を要求するため，修飾子`a'，`b'，また
     は`i'の一つを使用してもかまいません．

     この処理で修飾子`v'を使用すると，挿入されたそれぞれのファイルを出
     力の一行に書き出し，ファイルが追加された(古いメンバーが削除されていな
     い)のか，置換されたのかを示す文字`a'または`r'のどちらかを追加
     します．

`t'
     ARCHIVEの内容をリストアップしている_表_，または，アーカイブ
     に存在するMEMBER...にリストアップされているファイルの
     _表_を表示します．通常，メンバー名だけが表示されます．モード(許可)，
     タイムスタンプ，所有者，そして大きさも見たい場合，`v'修飾子を指定
     して要求することも可能です．

     MEMBERを指定しない場合は，アーカイブ内のすべてのファイルがリスト
     アップされます．

     同じ名前の(`fie'という名の)ファイルが，(`b.a'をいう名の)アー
     カイブに一つ以上ある場合，`ar t b.a fie'は最初のインスタンスのみリ
     ストアップします．すべてを見るために，完全なリストを要求する必要があり
     ます -- この例では`ar t b.a'です．

`x'
     (MEMBERという名の)メンバーをアーカイブから_抽出_します．
     `ar'が抽出しているそれぞれの名前をリストアップするように，この
     処理で`v'修飾子を使用することが可能です．

     MEMBERを指定しない場合，アーカイブのすべてのファイルが抽出されま
     す．


   処理の動作の変更を指定するため，いくつかの修飾子(MOD)をPキー
文字の直後に続けてもかまいません．

`a'
     新しいファイルを，アーカイブの既存のメンバーの_後_に追加します．修
     飾子`a'を使用した場合，ARCHIVE指定の前に，既存のアーカイブメ
     ンバー名がRELPOS引数にある必要があります．

`b'
     新しいファイルをアーカイブの既存のメンバーの_前_に加えます．修飾子
     `b'を使用した場合，ARCHIVE指定の前に，既存のアーカイブメンバー
     名がRELPOS引数にある必要があります．(`i'と同じです)．

`c'
     アーカイブを_作成_します．更新の要求をしたとき，指定された
     ARCHIVEが存在する場合でも，それは常に作成されます．しかし，この修
     飾子を使用して，作成することを期待するということを前もって指定しない場
     合，警告が生じます．

`f'
     アーカイブで名前を切り詰めます．GNU `ar'は，通常は任意の長
     さのファイル名を許可します．これは，いくつかのシステムのネイティブ
     `ar'プログラムと互換性のないアーカイブを作成します．これが懸念
     される場合，アーカイブに配置するときファイル名を切り詰めるために，
     `f'修飾子を使用してもかまいません．

`i'
     新しいファイルをアーカイブの既存のメンバーの_前に_挿入します．修飾
     子`i'を使用する場合，ARCHIVE指定の前に，既存のアーカイブメン
     バー名前がRELPOS引数にある必要があります．(`b'と同じです)．

`l'
     この修飾子は受け入れられますが，使用されません．

`N'
     COUNTパラメータを使用します．これは，同じ名前のアーカイブに，複数
     のエントリーがある場合に使用されます．アーカイブから，該当する名前のイ
     ンスタンスをCOUNT個，抽出または削除します．

`o'
     メンバーが既存のとき，その_オリジナルの_日付を保持します．この修飾
     子を指定しない場合，アーカイブから抽出されるファイルは，抽出した時間で
     タイムスタンプがつきます．

`P'
     アーカイブの名前の一致にフルパス名を使用します．GNU `ar'
     はフルパス名を持つアーカイブ(そのようなアーカイブは，POSIXで問題ない)
     を作成することは不可能ですが，アーカイブを作成するものには，そうするこ
     とが可能なものもあります．このオプションで，GNU `ar'はフル
     パス名を使用しているファイル名にマッチし，それは，他のツールで作成され
     たアーカイブから単一のファイルを抽出するとき便利でしょう．

`s'
     他の変更がアーカイブに対してなされない場合でも，オブジェクトファイルの
     索引をアーカイブに書き出したり，既存のものを更新したりします．この修飾
     子フラグは，任意のオプションとともに，または単独で使用してもかまいませ
     ん．アーカイブで`ar s'を実行することは，`ranlib'の実行と等価 です．

`S'
     アーカイブシンボル表を生成しません．これで何段階か使用する大きなライブ
     ラリの構築を高速にすることが可能です．結果として出力されるアーカイブは，
     リンカで使用することは不可能です．シンボルテーブルを構築するために，
     `ar'の最後の実行で`S'修飾子を省略したり，アーカイブで
     `ranlib'を実行する必要があります．

`u'
     通常，`ar r'...でリストアップされているすべてのファイルをアー
     カイブに挿入します．リストアップしたもので，同じ名前の既存のメンバーよ
     り新しいファイル_のみ_挿入したい場合，この修飾子を使用してください．
     `u'修飾子は，処理`r'(置換)に対してのみ可能です．特に，タイム
     スタンプの調査が処理`q'での速度の利点を損なうため，`qu' と組
     み合わせることはできません．

`v'
     この修飾子は，処理の_冗長_バージョンを要求します．多くの処理は，修
     飾子`v'が追加されているとき，処理しているファイル名のような追加の
     情報を表示します．

`V'
     この修飾子は`ar'のバージョンナンバーを表示します．

   `ar'は，AIXに対する互換性のため，`-X32_64'と綴られた最初の
オプションを無視します．このオプションによって引き起こされる動作は，
GNU `ar'のデフォルトです．`ar'は，その他の
`-X'オプションを全くサポートしません．特に，AIX `ar'ではデ
フォルトとなる`-X32'はサポートしません．


File: binutils-ja.info,  Node: ar scripts,  Prev: ar cmdline,  Up: ar

1.2 スクリプトを用いた`ar'の制御
================================

     ar -M [ <SCRIPT ]

   単一のコマンドラインオプション`-M'を`ar'で用いた場合，基
礎的なコマンド言語でその処理を制御することが可能です．`ar'のこ
の形式は，標準入力が端末から直接来ている場合，対話的に処理します．対話
的に使用している間，`ar'は入力を促し(プロンプトは`AR >')，
エラー後も実行を続けます．標準入力をスクリプトファイルにリダイレクトし
ている場合，プロンプトは表示されず，`ar'はエラーが発生すると(ゼ
ロでない終了コードで)実行を終了します．

   `ar'コマンド言語は，コマンドラインオプションと等価に設計されて
_いません_．実際，それはアーカイブ上の制御が若干少なくなっています．
コマンド言語の目的は，MRI "librarian"プログラムに対して書かれたスクリ
プトを既に所有している開発者が，GNU `ar'への変換をより簡単
にすることです．

   `ar'コマンド言語の構文は簡単です．
   * コマンドは大文字も小文字も認識します．例えば，`LIST'は`list'
     と同じです．以下の記述では，明確さのためにコマンドは大文字で表示します．

   *
     単一のコマンドは，個別の行に配置してもかまいません．それは，行の最初の
     単語となります．

   * 空行が可能で，それは効果がありません．

   * コメントが可能です．文字`*'または`;'以降のテキストは無視され ます．

   * `ar'コマンドの引数の一部として名前のリストを使用するときは，カ
     ンマまたは空白で，それぞれの名前を分けることが可能です．明確さのため，
     以下の説明はカンマで表現されます．

   * 行の連結文字として`+'が使用されます．`+'が行末に現れた場合，
     それに続く行のテキストは，現在のコマンドの一部と考えられます．

   以下のものは，`ar'で使用することが可能な，または，`ar'
を対話的に使用しているときのコマンドです．そのうちの三つは特別な意味を
持ちます．

   `OPEN'や`CREATE'は"現在のアーカイブ(current archive)"を指
定し，それはそれ以外のほとんどのコマンドが要求する一時的なファイルです．

   `SAVE'は，スクリプトでこれまでに指定された変更をコミットします．
`SAVE'の前のコマンドは，現在のアーカイブの一時的なコピーに対しての
み効果があります．

`ADDLIB ARCHIVE'
`ADDLIB ARCHIVE (MODULE, MODULE, ... MODULE)'
     ARCHIVEのすべての内容(または，指定されている場合，アーカイブのそ
     れぞれの指名されたMODULE)を，現在のアーカイブに追加します．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`ADDMOD MEMBER, MEMBER, ... MEMBER'
     それぞれの指名されたMEMBERを，モジュールとして，現在のアーカイブ
     に追加します．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`CLEAR'
     現在のアーカイブの内容を削除し，最後に`SAVE'されてからのあらゆる処
     理の効果を無効にします．現在のアーカイブが指定されていない場合でも実行
     可能です(効果はありません)．

`CREATE ARCHIVE'
     アーカイブを作成し，それを現在のアーカイブにします(その他，多くのコマン
     ドに対して必要になります)．新しいアーカイブは，一時的な名前で作成されま
     す．それは，`SAVE'を使用するまで，ARCHIVEとして実際に保存さ
     れません．既存のアーカイブに優先可能です．同様に，指名されている既存の
     ARCHIVEファイルの内容は，`SAVE'まで破壊されません．

`DELETE MODULE, MODULE, ... MODULE'
     リストアップされているそれぞれのMODULEを，現在のアーカイブから削
     除します．`ar -d ARCHIVE MODULE ... MODULE' と同じです．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`DIRECTORY ARCHIVE (MODULE, ... MODULE)'
`DIRECTORY ARCHIVE (MODULE, ... MODULE) OUTPUTFILE'
     ARCHIVEに存在している指名されたそれぞれMODULEをリストアップ
     します．別のコマンド`VERBOSE'で，出力形式を指定します．冗長出力が
     オフのとき，出力は`ar -t ARCHIVE MODULE...'のよう
     になります．冗長出力がオンのとき，リストは`ar -tv ARCHIVE
     MODULE...'のようになります．

     出力は通常，標準出力に流れていきます．しかし，OUTPUTFILEを最後の
     引数として指定した場合，`ar'はそのファイルに出力を変更します．

`END'
     `ar'を，正しく完了したことを示す終了コード`0'で終了します．
     このコマンドは出力ファイルを保存しません．最後の`SAVE'コマンド以降
     に現在のアーカイブを変更した場合．これらの変更は失われます．

`EXTRACT MODULE, MODULE, ... MODULE'
     指名されたそれぞれのMODULEを現在のアーカイブから抽出し，それらを
     現在のディレクトリに個別のファイルとして書き出します．`ar -x
     ARCHIVE MODULE...'と同じです．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`LIST'
     現在のアーカイブのすべての内容を，`VERBOSE'の状態に関わらず，
     "verbose"形式で表示します．効果は`ar tv ARCHIVE'に似ていま
     す．(この単独コマンドはGNU `ar'拡張で，MRI互換に提供されて
     いるものではありません)．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`OPEN ARCHIVE'
     現在のアーカイブとして使用するために，既存のアーカイブを開きます(他の多
     くのコマンドに対し必要です)．それに続くコマンドの結果からのあらゆる変更
     は，次に`SAVE'が使用されるまで，ARCHIVEに対し実際に効果はあ
     りません．

`REPLACE MODULE, MODULE, ... MODULE'
     現在のアーカイブで，それぞれの(`REPLACE'の引数で指名された)既存の
     MODULEを，現在のワーキングディレクトリのファイルで置換します．エ
     ラー無くこのコマンドを実行するために，ファイルと現在のアーカイブのモ
     ジュールの両方が存在する必要があります．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`VERBOSE'
     `DIRECTORY'からの出力を管理している内部フラグを切り替えます．フラ
     グがオンのとき，`DIRECTORY'出力は，`ar -tv '...からの出力
     に一致します．

`SAVE'
     現在のアーカイブへの変更をコミットし，それを，最後の`CREATE'や
     `OPEN'コマンドで指定された名前のファイルに，実際に保存します．

     `OPEN'や`CREATE'を前もって使用することが要求されます．



File: binutils-ja.info,  Node: nm,  Next: objcopy,  Prev: ar,  Up: Top

2 nm
****

     nm [`-a'|`--debug-syms'] [`-g'|`--extern-only']
        [`-B'] [`-C'|`--demangle'[=STYLE]] [`-D'|`--dynamic']
        [`-S'|`--print-size'] [`-s'|`--print-armap']
        [`-A'|`-o'|`--print-file-name'][`--special-syms']
        [`-n'|`-v'|`--numeric-sort'] [`-p'|`--no-sort']
        [`-r'|`--reverse-sort'] [`--size-sort'] [`-u'|`--undefined-only']
        [`-t' RADIX|`--radix='RADIX] [`-P'|`--portability']
        [`--target='BFDNAME] [`-f'FORMAT|`--format='FORMAT]
        [`--defined-only'] [`-l'|`--line-numbers'] [`--no-demangle']
        [`-V'|`--version'] [`-X 32_64'] [`--help']  [OBJFILE...]

   GNU `nm'は，オブジェクトファイルOBJFILE...のシン
ボルをリストアップします．オブジェクトファイルが引数として与えられてい
ない場合，`nm'はファイルを`a.out'と仮定します．

   それぞれのシンボルに対し，`nm'は以下を表示します．

   *
     シンボル値で，オプションで指定されている基数(以下を参照)，または，デフォ
     ルトの16進数になります．

   *
     シンボル形式です．少なくとも以下の形式が使用されます．それ以外は，同様
     にオブジェクトファイルのフォーマットに依存します．小文字の場合，シンボ
     ルはローカルです．大文字の場合，シンボルはグローバル(外部参照可能)です．

    `A'
          シンボルの値は絶対値で，更なるリンクで変更されません．

    `B'
          シンボルは初期化されていないデータセクションにあります(BSSとして知られ
          ています)．

    `C'
          シンボルは共通です．共通シンボルは初期化されていないデータです．リンク
          時，複数の共通シンボルは，同じ名前のものが存在してもかまいません．シン
          ボルがどこかで定義されている場合，共通のシンボルは未定義の参照として扱
          われます． 共通シンボルの詳細は，*Note Linker options:
          (ld.info)Options.の`--warn-common'の記述を参照してください．

    `D'
          シンボルは，初期化されているデータセクションにあります．

    `G'
          シンボルは，小さいオブジェクトに対して初期化されているデータセクション
          にあります．いくつかのオブジェクトファイルのフォーマットは，グローバル
          な配列に対するグローバルな整数型変数のような，小さなデータオブジェクト
          に対するより効果的なアクセスを可能とします．

    `I'
          シンボルは他のシンボルへの間接参照です．これは，滅多に使用されない
          `a.out'オブジェクトファイル形式に対するGNU拡張です．

    `N'
          シンボルはデバッグシンボルです．

    `R'
          シンボルは読み込み専用データセクションにあります．

    `S'
          シンボルは小さなオブジェクトに対する初期化されていないデータセクション
          にあります．

    `T'
          シンボルはテキスト(code)セクションにあります．

    `U'
          シンボルは定義されていません．

    `V'
          シンボルはweakオブジェクトです．定義されているweakシンボルが，通常通り
          に定義されているシンボルとリンクされるとき，通常通りに定義されているシ
          ンボルがエラー無く使用されます．weakな未定義のシンボルがリンクされ，シ
          ンボルが定義されていないとき，weakシンボルの値はエラー無くゼロになりま
          す．

    `W'
          シンボルは，weakオブジェクトシンボルとして特殊なタグを持たないweakシン
          ボルです．定義されているweakシンボルが，通常通りに定義されているシンボ
          ルとリンクされるとき，通常通りに定義されているシンボルがエラー無く使用
          されます．weakな未定義のシンボルがリンクされ，シンボルが定義されていな
          いとき，シンボルの値はエラー無くシンボル特有の方法で決定されます．シス
          テムによっては，デフォルト値が指定されている大文字で示します．

    `-'
          シンボルは，`a.out'オブジェクトファイルのスタブシンボルです．この
          場合，次に出力される値は，スタブのその他のフィールド，スタブのdescフィー
          ルド，そして，スタブの形式になります．スタブシンボルは，デバッグ情報を
          保つために使用されます． 詳細は，*Note Stabs:
          (stabs.info)Top.を参照してください．

    `?'
          シンボル形式が分からない，または独特のフォーマットのオブジェクトファイ
          ルです．

   * シンボル名です．

   以下で交互に表示している，オプションの長い形式と短い形式は等価です．

`-A'
`-o'
`--print-file-name'
     入力ファイルの識別をそのすべてのシンボルの前に一度だけ前置するのではな
     く，シンボルが見つかった入力ファイル(またはアーカイブメンバー)の名前を
     それぞれのシンボルに前置します．

`-a'
`--debug-syms'
     すべてのシンボルを表示し，デバッグ専用のシンボルさえも表示します．通常
     はリストアップされません．

`-B'
     (MIPS `nm'との互換性のための)`--format=bsd'と同じです．

`-C'
`--demangle[=STYLE]'
     低レベルのシンボル名をユーザレベルの名前に復号("demangle")します．
     システムが前置する，最初のあらゆるアンダースコアを削除するだけでなく，
     これでC++関数名が読みやすくなります．別々のコンパイラでは，mangle形式が
     異なります．追加のdemangle形式の引数は，コンパイラに対する適切な
     demangle形式を選択するために使用することが可能です．demangleの情報は，
     *Note c++filt::.

`--no-demangle'
     低レベルのシンボル名をdemangleしません．これはデフォルトです．

`-D'
`--dynamic'
     通常のシンボルではなく，動的シンボルを表示します．これは，共有ライブラ
     リの特定の形式のような，動的オブジェクトに対してのみ意味があります．

`-f FORMAT'
`--format=FORMAT'
     出力書式FORMATを使用し，書式は`bsd'，`sysv'，または
     `posix'が可能です．デフォルトは`bsd'です．FORMATの最初
     の文字のみ識別されます．それは大文字または小文字が可能です．

`-g'
`--extern-only'
     外部シンボルのみ表示します．

`-l'
`--line-numbers'
     それぞれのシンボルに対し，ファイル名と行番号を見つけることを試みるため，
     デバッグ情報を使用します．定義済シンボルに対し，シンボルのアドレスの行
     番号を探します．未定義のシンボルに対し，シンボルを参照する再配置エント
     リーの行番号を探します．行番号の情報が見つかる場合，それを他のシンボル
     情報の後に出力します．

`-n'
`-v'
`--numeric-sort'
     シンボルを，名前のアルファベット順ではなく，そのアドレスで数値的に並べ
     替えます．

`-p'
`--no-sort'
     シンボルの並べ替えを全く行いません．それらを見つかった順番で出力します．

`-P'
`--portability'
     デフォルトの書式の代わりに，POSIX.2標準出力形式を使用します． `-f
     posix'と同じです．

`-S'
`--print-size'
     `bsd'出力書式で，定義されているシンボルの，値ではなく大きさを出力
     します．

`-s'
`--print-armap'
     アーカイブメンバーからシンボルをリストアップするとき，索引を含めます．
     名前に対する定義を含むモジュールの(`ar'や`ranlib'でアー
     カイブに保存されている)マップです．

`-r'
`--reverse-sort'
     並べ替えの順序を(数値的またはアルファベット順によらず)逆にします．最後
     のものを最初にします．

`--size-sort'
     シンボルを大きさで並べ替えます．大きさは，そのシンボル値と，次に現れる
     より大きい値を持つシンボル値の差として計算されます．シンボル値ではなく，
     その大きさが出力されます．シンボルの値ではなく大きさを出力するために，
     `bsd'の出力書式が使用されている場合，大きさと値の両方を出力するた
     めに`-S'も使用する必要があります．

`--special-syms'
     ターゲット固有の特殊な意味を持つシンボルを表示します．これらのシンボル
     は，一般的に特殊な処理を行うターゲットで使用され，通常のシンボルリスト
     に含めても通常は役に立ちません．例えば，ARMターゲットではこのオプション
     によって，ARMコード，THUMBコード，そしてデータ間の変わり目を示すために
     使用されている，マップ用シンボルをスキップします．

`-t RADIX'
`--radix=RADIX'
     RADIXをシンボル値を出力する基数として使用します．それは，10進数の
     `d'，8進数の`o'，または16進数の`x'にする必要があります．

`--target=BFDNAME'
     システムのデフォルトフォーマット以外のオブジェクトコードを指定します．
     詳細は，*Note Target Selection::.

`-u'
`--undefined-only'
     未定義のシンボルのみ表示します(それらはそれぞれのオブジェクトファイルの
     外部にあります)．

`--defined-only'
     それぞれのオブジェクトファイルの定義済シンボルのみ表示します．

`-V'
`--version'
     `nm'のバージョンナンバーを表示し終了します．

`-X'
     このオプションは，AIXバージョンの`nm'への互換性のため無視されま
     す．それは，`32_64'とする必要がある，一つのパラメータを持ちます．
     AIX `nm'のデフォルトモードは`-X 32'に対応し，それは GNU
     `nm'ではサポートされていません．

`--help'
     `nm'のオプションの概要を表示し終了します．


File: binutils-ja.info,  Node: objcopy,  Next: objdump,  Prev: nm,  Up: Top

3 objcopy
*********

     objcopy [`-F' BFDNAME|`--target='BFDNAME]
             [`-I' BFDNAME|`--input-target='BFDNAME]
             [`-O' BFDNAME|`--output-target='BFDNAME]
             [`-B' BFDARCH|`--binary-architecture='BFDARCH]
             [`-S'|`--strip-all']
             [`-g'|`--strip-debug']
             [`-K' SYMBOLNAME|`--keep-symbol='SYMBOLNAME]
             [`-N' SYMBOLNAME|`--strip-symbol='SYMBOLNAME]
             [`--strip-unneeded-symbol='SYMBOLNAME]
             [`-G' SYMBOLNAME|`--keep-global-symbol='SYMBOLNAME]
             [`-L' SYMBOLNAME|`--localize-symbol='SYMBOLNAME]
             [`-W' SYMBOLNAME|`--weaken-symbol='SYMBOLNAME]
             [`-w'|`--wildcard']
             [`-x'|`--discard-all']
             [`-X'|`--discard-locals']
             [`-b' BYTE|`--byte='BYTE]
             [`-i' INTERLEAVE|`--interleave='INTERLEAVE]
             [`-j' SECTIONNAME|`--only-section='SECTIONNAME]
             [`-R' SECTIONNAME|`--remove-section='SECTIONNAME]
             [`-p'|`--preserve-dates']
             [`--debugging']
             [`--gap-fill='VAL]
             [`--pad-to='ADDRESS]
             [`--set-start='VAL]
             [`--adjust-start='INCR]
             [`--change-addresses='INCR]
             [`--change-section-address' SECTION{=,+,-}VAL]
             [`--change-section-lma' SECTION{=,+,-}VAL]
             [`--change-section-vma' SECTION{=,+,-}VAL]
             [`--change-warnings'] [`--no-change-warnings']
             [`--set-section-flags' SECTION=FLAGS]
             [`--add-section' SECTIONNAME=FILENAME]
             [`--rename-section' OLDNAME=NEWNAME[,FLAGS]]
             [`--change-leading-char'] [`--remove-leading-char']
             [`--srec-len='IVAL] [`--srec-forceS3']
             [`--redefine-sym' OLD=NEW]
             [`--redefine-syms='FILENAME]
             [`--weaken']
             [`--keep-symbols='FILENAME]
             [`--strip-symbols='FILENAME]
             [`--strip-unneeded-symbols='FILENAME]
             [`--keep-global-symbols='FILENAME]
             [`--localize-symbols='FILENAME]
             [`--weaken-symbols='FILENAME]
             [`--alt-machine-code='INDEX]
             [`--prefix-symbols='STRING]
             [`--prefix-sections='STRING]
             [`--prefix-alloc-sections='STRING]
             [`--add-gnu-debuglink='PATH-TO-FILE]
             [`--only-keep-debug']
             [`--writable-text']
             [`--readonly-text']
             [`--pure']
             [`--impure']
             [`-v'|`--verbose']
             [`-V'|`--version']
             [`--help'] [`--info']
             INFILE [OUTFILE]

   GNU `objcopy'ユーティリティは，オブジェクトファイルの内容
を別のファイルにコピーします．`objcopy'はオブジェクトファイルの
読み書きにGNU BFDを使用します．コピー先のオブジェクトファイル
に，コピー元のオブジェクトファイルとは異なるフォーマットで書き出すこと
が可能です．`objcopy'の正確な動作は，コマンドラインオプションで
制御されます．`objcopy'は，完全にリンクされているファイルを，二
つの書式間でコピー可能であるべきだということに注意してください．しかし，
再配置可能なオブジェクトファイルを二つのフォーマットの間でコピーするこ
とは，期待したようには動作しません．

   `objcopy'は，その変換を行うために一時ファイルを作成し，その後で
それを削除します．`objcopy'は，そのすべての変換作業でBFDを
使用します．それは，BFDで記述されているすべてのフォーマットにアク
セスするので，明示的に伝えること無く，ほとんどのフォーマットを認識する
ことが可能です．*Note BFD: (ld.info)BFD.

   `objcopy'は，`srec'出力ターゲットを使用することで，
S-recordを生成するために使用することが可能です(例えば，`-O
srec'を使用してください)．

   `objcopy'は，`binary'の出力ターゲットを使用することで，生
のバイナリファイルを生成するために使用することが可能です(例えば， `-O
binary'を使用してください)．`objcopy'が生のバイナリ
ファイルを生成するとき，それは本質的に，入力オブジェクトファイルの内容
のメモリダンプを生成します．すべてのシンボルと再配置の情報は削除されま
す．メモリダンプは，出力ファイルにコピーされる最抵位のセクションのロー
ドアドレスから開始します．

S-recordや生のバイナリファイルを生成するとき，デバッグ情報を含むセクショ
ンを削除するため，`-S'を使用すると便利かもしれません．場合によっ
ては，バイナリファイルに必要のない情報を含むセクションを削除するため，
`-R'が役に立つでしょう．

   注意--`objcopy'は，入力ファイルのエンディアンを変更することが
できません．入力フォーマットにエンディアンがある場合，(持たないフォーマッ
トもあります)，`objcopy'は，入力ファイルを同じエンディアンを持
つ，またはエンディアンを持たないフォーマットのファイル(例えば
`srec')だけにコピーすることが可能です．

`INFILE'
`OUTFILE'
     それぞれ入力と出力のファイルです．OUTFILEを指定しない場合，
     `objcopy'は結果的に破壊される一時ファイルを作成し，
     INFILEに名前を変更します．

`-I BFDNAME'
`--input-target=BFDNAME'
     ソースファイルのオブジェクトのフォーマットを，それを導き出すのではなく，
     BFDNAMEと考えます．詳細は，*Note Target Selection::.

`-O BFDNAME'
`--output-target=BFDNAME'
     出力ファイルを，オブジェクトファイルのフォーマットBFDNAMEを用いて
     書き出します．詳細は，*Note Target Selection::.

`-F BFDNAME'
`--target=BFDNAME'
     入出力両方のファイルに対し，オブジェクトのフォーマットとして
     BFDNAMEを使用します．すなわち，単純に元ファイルからコピー先のファ
     イルに，変換せずにデータを転送します．詳細は，*Note Target
     Selection::.

`-B BFDARCH'
`--binary-architecture=BFDARCH'
     生の入力ファイルをオブジェクトファイルに変換するとき役に立ちます．この
     状況では，出力先のアーキテクチャはBFDARCHに設定されるはずです．入
     力ファイルに既知のBFDARCHがある場合，このオプションは無視されます．
     変換処理で作成される特殊なシンボルを参照することで，このバイナリデータ
     をプログラム内部でアクセスすることが可能です．これらのシンボルは，
     `_binary_OBJFILE_start'，`_binary_OBJFILE_end'，
     そして`_binary_OBJFILE_size'という名前です．例えば，画像ファ
     イルをオブジェクトファイルに変換した後，これらのシンボルを使用してコー
     ド内でアクセスすることが可能です．

`-j SECTIONNAME'
`--only-section=SECTIONNAME'
     指名されたセクションのみ，入力ファイルから出力ファイルへコピーします．
     このオプションは，一回以上与えてもかまいません．このオプションを不適切
     に使用すると，出力ファイルが使用不可能になることに注意してください．

`-R SECTIONNAME'
`--remove-section=SECTIONNAME'
     指名されている，あらゆるSECTIONNAMEセクションを出力ファイルから削
     除します．このオプションは，一回以上与えてもかまいません．このオプショ
     ンを不適切に使用すると，出力ファイルが使用不可能になることに注意してく
     ださい．

`-S'
`--strip-all'
     再配置の情報ととシンボルの情報を，ソースファイルからコピーしません．

`-g'
`--strip-debug'
     デバッグのシンボルやセクションをソースファイルからコピーしません．

`--strip-unneeded'
     再配置の処理に不要な，すべてのシンボルを削除します．

`-K SYMBOLNAME'
`--keep-symbol=SYMBOLNAME'
     ソースファイルからシンボルSYMBOLNAMEのみコピーします．このオプショ
     ンは，一回以上与えてもかまいません．

`-N SYMBOLNAME'
`--strip-symbol=SYMBOLNAME'
     ソースファイルからシンボルSYMBOLNAMEをコピーしません．このオプショ
     ンは，一回以上与えてもかまいません．

`--strip-unneeded-symbol=SYMBOLNAME'
     再配置で必要でない限り，シンボルSYMBOLNAMEを，ソースファイルから
     コピーしません．このオプションは，一回以上与えてもかまいません．

`-G SYMBOLNAME'
`--keep-global-symbol=SYMBOLNAME'
     グローバルなSYMBOLNAMEシンボルのみ保持します．すべての他のシンボ
     ルをそれらが外部から見えないようにファイルローカルにします．このオプショ
     ンは一回以上与えてもかまいません．

`-L SYMBOLNAME'
`--localize-symbol=SYMBOLNAME'
     外部から見えないようにするため，シンボルSYMBOLNAMEをファイルでロー
     カルにします．このオプションは，一回以上与えてもかまいません．

`-W SYMBOLNAME'
`--weaken-symbol=SYMBOLNAME'
     シンボルSYMBOLNAMEをweakにします．このオプションは，一回以上与え
     てもかまいません．

`-w'
`--wildcard'
     コマンドラインオプションで使用するため，SYMBOLNAMEでの正規表現を
     許可します．疑問符(?)，アスタリスク(*)，バックスラッシュ(\)，そして角括
     弧([])オペレータを，シンボル名の任意の場所に使用することが可能です．シ
     ンボル名の最初の文字が感嘆符(!)の場合，シンボルに対するスイッチの意味を
     反対にします．例えば，以下を考えます．

            -w -W !foo -W fo*

     これで，`objcopy'は，シンボル"foo"以外の，"fo"で始まるすべ
     てのシンボルをweakにします．

`-x'
`--discard-all'
     ソースファイルからグローバルでないシンボルをコピーしません．

`-X'
`--discard-locals'
     コンパイラが生成したローカルなシンボルをコピーしません．(これらは通常，
     `L'または`.'ではじまります．)

`-b BYTE'
`--byte=BYTE'
     入力ファイルのBYTEバイトごとのバイトのみ保持します(ヘッダデータは
     影響されません)．BYTEは，0からINTERLEAVE-1までの範囲が可能
     で，INTERLEAVEは，`-i'や`--interleave'オプションで
     与えられる，またはデフォルトの4になります．このオプションは，プログラマ
     ブルROMにファイルを作成するとき便利です．それは特に，`srec'出
     力ターゲットとともに使用されます．

`-i INTERLEAVE'
`--interleave=INTERLEAVE'
     INTERLEAVEバイトごとに一つだけコピーします．`-b'や
     `--byte'オプションを用いてそのバイトを選択してください．デフォル
     トは4です．`objcopy'は，`-b'や`--byte'を指定して
     いない場合，このオプションを無視します．

`-p'
`--preserve-dates'
     出力ファイルのアクセスと編集の日付を入力ファイルと同じに設定します．

`--debugging'
     可能な場合，デバッグ情報を変換します．特定のデバッグフォーマットのみサ
     ポートされていて，そして，変換処理は時間がかかるため，これはデフォルト
     ではありません．

`--gap-fill VAL'
     VALを用いてセクション間のギャップを補充します．このオプションはセ
     クションの_load address_ (LMA)に適用されます．それは，lower
     addressでセクションの大きさを増加し，そして，VALを用いて作成され
     る余分な空間で補充することで動作します．

`--pad-to ADDRESS'
     出力ファイルをload address ADDRESSまでパディングします．これは，
     最後のセクションの大きさを増加することで動作します．余分な空間は，
     `--gap-fill'で指定された値(デフォルトはゼロ)で補充されます．

`--set-start VAL'
     新しいファイルの開始アドレスをVALに設定します．すべてのオブジェク
     トファイルのフォーマットが，開始アドレスの設定をサポートするわけではあ
     りません．

`--change-start INCR'
`--adjust-start INCR'
     開始アドレスをINCRを加えることで変更します．すべてのオブジェクト
     ファイルのフォーマットが，開始アドレスの設定をサポートするわけではあり
     ません．

`--change-addresses INCR'
`--adjust-vma INCR'
     開始アドレスのように，INCRを加えることで，VMAとLMAアドレスを変更
     します．オブジェクトファイルのフォーマットによっては，セクションアドレ
     スを任意に変更できないものもあります．これはセクションを再配置しないこ
     とに注意してください．セクションが特定のアドレスにロードされていること
     をプログラムが期待し，セクションが異なるアドレスにロードされるように変
     更するために，このオプションが使用された場合，プログラムは失敗するかも
     しれません．

`--change-section-address SECTION{=,+,-}VAL'
`--adjust-section-vma SECTION{=,+,-}VAL'
     SECTIONで指名されたVMAアドレスとLMAアドレスの両方を設定または変更
     します．`='が使用された場合，セクションのアドレスは，VAL に
     設定されます．それ以外の場合，VALは，セクションアドレスに加えられ
     る，またはそれから引かれます．上記の`--change-addresses'以下のコ
     メントを参照してください．入力ファイルにSECTIONが存在しない場合，
     `--no-change-warnings'が使用されていない限り，警告が発せられます．

`--change-section-lma SECTION{=,+,-}VAL'
     指名されたSECTIONのLMAアドレスを設定または変更します．LMAアドレス
     は，プログラムロード時にセクションがメモリにロードされるアドレスです．
     通常これはVMAと同じで，それは，プログラムの実行時のセクションのアドレス
     ですが，システムによっては，特にプログラムがROMに保存されるものでは，二
     つが異なる可能性があります．`='が使用されている場合，セクションの
     アドレスは，VALに設定されます．それ以外の場合，VALはセクショ
     ンアドレスに加えられる，またはそれから引かれます．上記の
     `--change-addresses'以下のコメントを参照してください．
     SECTIONが入力ファイルに存在しない場合，
     `--no-change-warnings'が使用されていない限り，警告が発せられます．

`--change-section-vma SECTION{=,+,-}VAL'
     指名されたSECTIONのVMAアドレスを設定または変更します．VMAアドレス
     は，プログラムの実行を開始したときにセクションが位置するアドレスです．
     通常これはLMAと同じで，それは，セクションがメモリにロードされるアドレス
     ですが，システムによっては，特にプログラムがROMに保存されるものでは，二
     つのアドレスが異なる可能性があります．`='が使用されている場合，セ
     クションのアドレスは，VALに設定されます．それ以外の場合，
     VALはセクションアドレスに加えられる，またはそれから引かれます．上
     記の`--change-addresses'以下のコメントを参照してください．
     SECTIONが入力ファイルに存在しない場合，
     `--no-change-warnings'が使用されていない限り，警告が発せられます．

`--change-warnings'
`--adjust-warnings'
     `--change-section-address'や`--change-section-lma'や
     `--change-section-vma'が使用されていて，指名されたセクションが存
     在しない場合，警告を発します．これはデフォルトです．

`--no-change-warnings'
`--no-adjust-warnings'
     `--change-section-address'や`--change-section-lma'や
     `--change-section-vma'が使用されていて，指名されたセクションが存
     在しない場合でも警告を発しません．

`--set-section-flags SECTION=FLAGS'
     指名したセクションのフラグを設定します．FLAGS引数は，カンマで分け
     られたフラグ名の文字列です．認識される名前は，`alloc'，
     `contents'，`load'，`noload'，`readonly'，
     `code'，`data'，`rom'，`share'，そして`debug'
     です．`contents'フラグを内容のないセクションに対し設定可能ですが，
     内容のあるセクションの`contents'フラグとしての意味がありません--
     その代わりにセクションを削除します．すべてのフラグがすべてのオブジェク
     トファイルのフォーマットに意味があるわけではありません．

`--add-section SECTIONNAME=FILENAME'
     ファイルをコピーしている間に，指名されたSECTIONNAMEの新しいセクショ
     ンを追加します．新しいセクションの内容はファイルFILENAMEからもた
     らされます．セクションの大きさは，ファイルの大きさになります．このオプ
     ションは，任意の名前を持つセクションをサポート可能なファイルのフォーマッ
     トでのみ動作します．

`--rename-section OLDNAME=NEWNAME[,FLAGS]'
     セクションの名前をOLDNAMEからNEWNAMEに変更し，オプションで
     セクションのフラグをFLAGSに，処理中に変更します．名前の変更を実行
     するためにリンカスクリプトを使用すると，オブジェクトファイルとして出力
     が抑制されリンクされた実行形式にはならないので，これには利点があります．

     このオプションは，`.data'いう名前のセクションを常に作成するので，
     入力フォーマットがバイナリのとき，特に役に立ちます．例えば，バイナリデー
     タを含んでいる`.rodata'いう名前のセクションを作成したい場合，それ
     を達成するために以下のコマンドラインを使用することが可能でしょう．

            objcopy -I binary -O <output_format> -B <architecture> \
             --rename-section .data=.rodata,alloc,load,readonly,data,contents \
             <input_binary_file> <output_object_file>

`--change-leading-char'
     オブジェクトファイルのフォーマットには，シンボルの開始時に特別な文字を
     使用するものもあります．そのような文字で最もよくあるのはアンダースコア
     で，それはコンパイラがすべてのシンボルの前によく追加するものです．この
     オプションは，`objcopy'に，オブジェクトファイルのフォーマットを
     変換している間にすべてのシンボルに前置される文字を変更するよう伝えます．
     オブジェクトファイルのフォーマットが同じ前置文字を使用している場合，こ
     のオプションは効果がありません．それ以外の場合，それは適切に，文字を加
     えたり，文字を削除したり，文字を変更したりします．

`--remove-leading-char'
     グローバルシンボルの最初の文字が，オブジェクトファイルのフォーマットで
     使用されているシンボルに前置される特殊な文字の場合，その文字を削除しま
     す．そのような文字で最もよくあるのはアンダースコアです．このオプション
     は，すべてのグローバルシンボルから前置されるアンダースコアを削除します．
     シンボル名に対して異なる規則を持つ，異なるファイルフォーマットのオブジェ
     クト同士をリンクしたい場合，これは役に立つはずです．これは
     `--change-leading-char'とは異なり，出力ファイルのオブジェクトファ
     イルのフォーマットに依存せず，それは適切なときは常にシンボル名を変更し
     ます．

`--srec-len=IVAL'
     srec出力でのみ意味があります．生成されているSrecordの最大長を
     IVALに設定します．この長さは，両方のアドレス，データ，そしてcrc
     フィールドをカバーします．

`--srec-forceS3'
     srec出力でのみ意味があります．S1/S2レコードの生成を避け，S3のみのレコー
     ドのフォーマットを作成します．

`--redefine-sym OLD=NEW'
     シンボル名をOLDからNEWに変更します．ソースを持っていない二
     つのものを一緒にリンクしようとし，名前の衝突があるとき便利です．

`--redefine-syms=FILENAME'
     ファイルFILENAMEにリストアップされているそれぞれのシンボル対 "OLD
     NEW"に，`--redefine-sym'を適用します．
     FILENAMEは単純なフラットファイルで，一行ごとに一つのシンボルの組
     を書きます．行コメントはハッシュ文字(#)で始めることが可能です．このオプ
     ションは，一回以上与えてもかまいません．

`--weaken'
     ファイルのすべてのグローバルシンボルをweakにします．リンカに対し
     `-R'オプションを使用している他のオブジェクトに対してリンクするオ
     ブジェクトを構築するとき，これは便利です．このオプションは，weakなシン
     ボルをサポートしているオブジェクトファイルを使用しているときだけ効果が
     あります．

`--keep-symbols=FILENAME'
     `--keep-symbol'オプションを，ファイルFILENAMEにリストアッ
     プされているそれぞれのシンボルに適用します．FILENAMEは単なるフラッ
     トなファイルで，一行に一つのシンボル名があります．行のコメントはハッシュ
     文字(#)で始めることが可能です．このオプションは一回以上与えてもかまいま
     せん．

`--strip-symbols=FILENAME'
     `--strip-symbol'オプションを，ファイルFILENAMEにリストアッ
     プされているそれぞれのシンボルに適用します．FILENAMEは単なるフラッ
     トなファイルで，一行に一つのシンボル名があります．行のコメントはハッシュ
     文字(#)で始めることが可能です．このオプションは一回以上与えてもかまいま
     せん．

`--strip-unneeded-symbols=FILENAME'
     ファイルFILENAMEにリストアップされているそれぞれのシンボルに，に
     `--strip-unneeded-symbol'を適用します．FILENAMEは単純なフ
     ラットファイルで，一行ごとに一つのシンボルを書きます．行コメントはハッ
     シュ文字(#)で始めることが可能です．このオプションは一回以上与えてもかま
     いません．

`--keep-global-symbols=FILENAME'
     `--keep-global-symbol'オプションを，ファイルFILENAMEにリス
     トアップされているそれぞれのシンボルに適用します．FILENAMEは単な
     るフラットなファイルで，一行に一つのシンボル名があります．行のコメント
     はハッシュ文字(#)で始めることが可能です．このオプションは一回以上与えて
     もかまいません．

`--localize-symbols=FILENAME'
     `--localize-symbol'オプションを，ファイルFILENAMEにリスト
     アップされているそれぞれのシンボルに適用します．FILENAMEは単なる
     フラットなファイルで，一行に一つのシンボル名があります．行のコメントは
     ハッシュ文字(#)で始めることが可能です．このオプションは一回以上与えても
     かまいません．

`--weaken-symbols=FILENAME'
     `--weaken-symbol'オプションを，ファイルFILENAMEにリストアッ
     プされているそれぞれのシンボルに適用します．FILENAMEは単なるフラッ
     トなファイルで，一行に一つのシンボル名があります．行のコメントはハッシュ
     文字(#)で始めることが可能です．このオプションは一回以上与えてもかまいま
     せん．

`--alt-machine-code=INDEX'
     出力アーキテクチャに代替のマシンコードがある場合，デフォルトのものの代
     わりにINDEX番目のコードを使用します．マシンに公式のコードが割り当
     てられていて，ツールチェーンが新しいコードに適用するのですが，他のアプ
     リケーションはまだ使用されているオリジナルのコードに依存している状況で
     は，これは役に立ちます．

`--writable-text'
     出力テキストを書き込み可能で印をつけます．このオプションは，すべてのオ
     ブジェクトファイルのフォーマットで意味があるわけではありません．

`--readonly-text'
     出力テキストを書き込み禁止で印をつけます．このオプションは，すべてのオ
     ブジェクトファイルのフォーマットで意味があるわけではありません．

`--pure'
     出力ファイルを必須ページとして印をつけます．このオプションは，すべての
     オブジェクトファイルのフォーマットで意味があるわけではありません．

`--impure'
     出力ファイルをimpure(不純)として印をつけます．このオプションは，すべて
     のオブジェクトファイルのフォーマットで意味があるわけではありません．

`--prefix-symbols=STRING'
     出力ファイルのすべてのシンボルにSTRINGを前置します．

`--prefix-sections=STRING'
     出力ファイルのすべてのセクション名にSTRINGを前置します．

`--prefix-alloc-sections=STRING'
     出力ファイルのすべてのアロケートされたセクション名にSTRINGを前置
     します．

`--add-gnu-debuglink=PATH-TO-FILE'
     PATH-TO-FILEへの参照を含み，それを出力ファイルに追加す
     る，.gnu_debuglinkセクションを作成します．

`--only-keep-debug'
     `--strip-debug'でstripされるセクションを削除し，デバッグセクショ
     ンを残しながら，ファイルをstripします．

     このオプションの目的は，二つの部分の実行形式を作成するために
     `--add-gnu-debuglink'を組み合わせで使用します．一つは，RAMと配布
     物にスペースが無い場合のstripされたバイナリで，二番目のデバッグ情報ファ
     イルは，デバッグ能力が要求される場合だけ必要になります．これらのファイ
     ルを作成するための推奨手順は以下の通りです．

       1. 通常の実行形式のリンク．`foo'と仮定します．

       2. デバッグ情報を含んでいるファイルを作成するために`objcopy
          --only-keep-debug foo foo.dbg'の実行．

       3. stripされた実行形式を作成するために`objcopy --strip-debug
          foo'の実 行．

       4.
          stripされた実行形式にデバッグ情報を追加リンクするために`objcopy
          --add-gnu-debuglink=foo.dbg foo'を実行．

     注意 - デバッグ情報ファイルに対する拡張として，`.dbg'の選択は任意
     です．また，`--only-keep-debug'の段階はオプションです．代わりに以
     下のようにすることも可能です．

       1. 通常の実行形式のリンク．

       2. `foo'を`foo.full'へコピー．

       3. `strip --strip-debug foo'の実行．

       4. `objcopy --add-gnu-debuglink=foo.full foo'の実行．

     つまり，`--add-gnu-debuglink'で示されるファイルは，完全な実行形
     式です．`--only-keep-debug'スイッチファイルを生成する必要はあり
     ません．

`-V'
`--version'
     `objcopy'のバージョンナンバーを表示します．

`-v'
`--verbose'
     冗長な出力です．修正されたすべてのオブジェクトファイルをリストアップし
     ます．アーカイブの場合，`objcopy
     -v'は，アーカイブのすべてのメンバー をリストアップします．

`--help'
     `objcopy'へのオプションの概要を表示します．

`--info'
     すべてのアーキテクチャと利用可能なオブジェクトのフォーマットを示すリス
     トを表示します．


File: binutils-ja.info,  Node: objdump,  Next: ranlib,  Prev: objcopy,  Up: Top

4 objdump
*********

     objdump [`-a'|`--archive-headers']
             [`-b' BFDNAME|`--target=BFDNAME']
             [`-C'|`--demangle'[=STYLE] ]
             [`-d'|`--disassemble']
             [`-D'|`--disassemble-all']
             [`-z'|`--disassemble-zeroes']
             [`-EB'|`-EL'|`--endian='{big | little }]
             [`-f'|`--file-headers']
             [`--file-start-context']
             [`-g'|`--debugging']
             [`-e'|`--debugging-tags']
             [`-h'|`--section-headers'|`--headers']
             [`-i'|`--info']
             [`-j' SECTION|`--section='SECTION]
             [`-l'|`--line-numbers']
             [`-S'|`--source']
             [`-m' MACHINE|`--architecture='MACHINE]
             [`-M' OPTIONS|`--disassembler-options='OPTIONS]
             [`-p'|`--private-headers']
             [`-r'|`--reloc']
             [`-R'|`--dynamic-reloc']
             [`-s'|`--full-contents']
             [`-G'|`--stabs']
             [`-t'|`--syms']
             [`-T'|`--dynamic-syms']
             [`-x'|`--all-headers']
             [`-w'|`--wide']
             [`--start-address='ADDRESS]
             [`--stop-address='ADDRESS]
             [`--prefix-addresses']
             [`--[no-]show-raw-insn']
             [`--adjust-vma='OFFSET]
             [`--special-syms']
             [`-V'|`--version']
             [`-H'|`--help']
             OBJFILE...

   `objdump'は，一つ以上のオブジェクトファイルに関する情報を表示し
ます．オプションで，表示する情報を制御します．この情報は，プログラムを
コンパイルして動作させたいだけのプログラマより，コンパイルツールに関す
る作業をしているプログラマに対し最も役に立ちます．

   OBJFILE...は，調査されるオブジェクトファイルです．アーカイブ
を指定したとき，`objdump'は，それぞれのメンバーオブジェクトファ
イルの情報を表示します．

ここに交互に表示しているオプションの長い形式と短い形式は等価です．リス
トの`-a,-d,-D,-e,-f,-g,-G,-h,-H,-p,-r,-R,-s,-S,-t,-T,-V,-x'から
少なくとも一つのオプションを与える必要があります．

`-a'
`--archive-header'
     OBJFILEファイルがすべてアーカイブの場合，アーカイブヘッダ情報を表
     示します(書式は`ls -l'に似ています)．`ar tv'を用いてリストアッ
     プ可能な情報に加え，`objdump -a'は，それぞれのアーカイブのメンバー
     のオブジェクトファイルのフォーマットを表示します．

`--adjust-vma=OFFSET'
     情報をダンプしているとき，最初に，すべてのセクションアドレスに
     OFFSETを加えます．これは，セクションアドレスがシンボルテーブルに
     対応していない場合便利で，それは，`a.out'のようなセクションアドレ
     スが存在しないフォーマットを使用しているとき，セクションを特定のアドレ
     スに配置するとき発生します．

`-b BFDNAME'
`--target=BFDNAME'
     オブジェクトファイルに対するオブジェクトコードのフォーマットを
     BFDNAMEに指定します．このオプションは不要かもしれません．
     OBJDUMPは，自動的に多くのフォーマットを認識することが可能です．

     例えば，以下のようにします．
          objdump -b oasys -m vax -h fu.o
     それは，`fu.o'のセクションヘッダ(`-h')からの情報の概要を表
     示し，それは特に，Oasysコンパイラで生成されるフォーマットのVAXオブジェ
     クトファイルとして認識(`-m')されます．`-i'オプションを用
     いて利用可能なフォーマットをリストアップすることが可能です．詳細は，
     *Note Target Selection::.

`-C'
`--demangle[=STYLE]'
     低レベルのシンボル名をユーザレベルの名前に復号("demangle")します．
     システムによって前置される，最初のすべてのアンダースコアを削除するだけ
     でなく．これはC++関数名を可読にします．別々のコンパイラでは，mangle形式
     が異なります．追加のdemangle形式の引数は，コンパイラに対する適切な
     demangle形式を選択するために使用することが可能です．demangleの情報は，
     *Note c++filt::.

`-g'
`--debugging'
     デバッグ情報を表示します．これは，ファイルに保存されているデバッグ情報
     の解析を試み，Cのような構文を使用してそれを出力します．デバッグ情報の特
     定の形式のみ実装されています．他の形式も，いくつかは`readelf
     -w'でサポートされています．*Note readelf::.

`-e'
`--debugging-tags'
     `-g'に似ていますが，情報は，ctagツール互換の書式で生成されます．

`-d'
`--disassemble'
     OBJFILEから，機械語命令に対するアセンブラニーモニックを表示します．
     このオプションは，命令を含むことを期待されるそれらのセクションを，逆ア
     センブルするだけです．

`-D'
`--disassemble-all'
     `-d'に似ていますが，命令を含むことを期待されるものだけでなく，す
     べてのセクションの内容を逆アセンブルします．

`--prefix-addresses'
     逆アセンブルしているとき，それぞれの行に絶対アドレスを出力します．これ
     はより古い逆アセンブルの書式です．

`-EB'
`-EL'
`--endian={big|little}'
     オブジェクトファイルのエンディアンを指定します．これは逆アセンブラにの
     み効果があります．これは，S-recordのような，エンディアン情報を記述して
     いないファイルフォーマットを逆アセンブルしているとき役に立つはずです．

`-f'
`--file-headers'
     それぞれのOBJFILEファイルのヘッダ全体からの情報の概要を表示します．

`--file-start-context'
     まだ表示されていない，内部にリストアップされているソースコード/ファイル
     から逆アセンブルされたもの(おそらく`-S')を表示しているとき，コン
     テクストをファイルの先頭まで拡張することを指定します．

`-h'
`--section-headers'
`--headers'
     オブジェクトファイルのセクションヘッダの情報の概要を表示します．

     ファイルのセグメントは，非標準のアドレスに再配置され，例えば，
     `-Ttext'，`-Tdata'，または`-Tbss'オプションが
     `ld'で使用されています．しかし，`a.out'のようなオブジェク
     トファイルのフォーマットによっては，ファイルセグメントの開始アドレスを
     保存しないものもあります．そのような状況では，`ld'がセクション
     を正しく再配置しますが，ファイルのセクションのヘッダのリストに
     `objdump
     -h'を使用しても，正しいアドレスを表示することは不可能です．
     その代わりに，それは通常のアドレスを表示し，それらはターゲットに対して
     暗黙のうちに行われます．

`-H'
`--help'
     `objdump'に対するオプションの概要を出力し，終了します．

`-i'
`--info'
     `-b'や`-m'を用いて指定可能な，すべてのアーキテクチャとオ
     ブジェクトのフォーマットを示すリストを表示します．

`-j NAME'
`--section=NAME'
     セクションNAMEに対する情報のみ表示します．

`-l'
`--line-numbers'
     (デバッグ情報を使用した)表示に，表示されているオブジェクトコードや再配
     置に一致しているファイル名とソースの行番号を用いてラベル付けします．
     `-d'，`-D'，または`-r'を用いた場合のみ有益です．

`-m MACHINE'
`--architecture=MACHINE'
     オブジェクトファイルの逆アセンブル時に，使用するアーキテクチャを指定し
     ます．これは，S-recordのような，アーキテクチャ情報が記述されていないオ
     ブジェクトファイルを逆アセンブルするとき役に立ちます．`-i'オプショ
     ンを用いて，利用可能なアーキテクチャをリストアップすることが可能です．

`-M OPTIONS'
`--disassembler-options=OPTIONS'
     ターゲット指定の情報を逆アセンブラに渡します．いくつかのターゲットだけ
     をサポートします．一つ以上の逆アセンブラオプションが必要な場合，複数の
     `-M'オプションを使用したり，カンマで分離したリストで一度に与える
     ことが可能です．

     ターゲットがARMアーキテクチャの場合，逆アセンブラが使用されている間に使
     用するレジスタ名のセットを選択するために，このスイッチを使用することが
     可能です．`-M reg-name-std' (デフォルト)を指定すると，ARMの命令
     セットのドキュメントで使用しているレジスタ名を選択し，'sp'と呼ばれるレ
     ジスタ13，'lr'と呼ばれるレジスタ14，そして'pc'と呼ばれるレジスタ15を使
     用します．`-M reg-names-apcs'を指定すると，ARM Procedure Call
     Standardで使用されている名前のセットを選択するのに対し，`-M
     reg-names-raw'を指定すると，`r'にレジスタ番号が続いたものを使用し
     ます．

     APCSレジスタ命名規則には二つの変形があり，`-M reg-names-atpcs'
     と`-M reg-names-special-atpcs'により利用可能で，それはARM/Thumb
     Procedure Call
     Standard命名規約を使用します．(通常のレジスタ名，または，
     特殊なレジスタ名のどちらかを使用します．)

     このオプションは，ARMアーキテクチャに対し，スイッチ
     `--disassembler-options=force-thumb'を使用して，すべての命令を
     Thumb命令として解釈するように逆アセンブラに強制するためにも使用すること
     が可能です．他のコンパイラで生成される thumb
     コードの逆アセンブラを試み るとき，これは役に立つはずです．

     x86に対して，オプションによっては`-m'のスイッチの機能を複製しま
     すが，よりきめ細かい制御が可能になります．以下の複数のセクションをカン
     マで分けられた文字列として指定してもかまいません．`x86-64'，
     `i386'，そして`i8086'は該当するアーキテクチャに対する逆ア
     センブルを選択します．`intel'と`att'は，インテルの構文の
     モードとAT&Tの構文のモードを選択します．`addr32'，
     `addr16'，`data32'，そして`data16'は，デフォルトの
     アドレスの大きさとオペランドの大きさを指定します．これらの四つのオプショ
     ンは，それ以降のオプション文字列に`x86-64'，`i386'，また
     は`i8086'が現れる場合は，そちらが優先されます．最後は
     `suffix'で，これはAT&Tモードのとき，サフィックスがオペランドで推
     測可能なときでさえ，逆アセンブラはニーモニックサフィックスを出力します．

     PPCに対し，`booke'，`booke32'，そして`booke64'は
     BookE命令の逆アセンブラを選択します．`32'と`64'は，それぞ
     れPowerPCとPowerPC64の逆アセンブラを選択します．

     MIPSに対して，このオプションは逆アセンブルした命令でのニーモニック名と
     レジスタ名の出力を制御します．以下を複数選択するため，カンマで分離した
     文字列で指定することが可能で，無効のオプションは無視されます．

    `no-aliases'
          偽の命令ニーモニックではなく，'raw'の命令ニーモニックを出力します．つま
          り，'move'の代わりに'daddu'や'or'を，'nop'の代わりに'sll'を出力する等の
          ようになります．

    `gpr-names=ABI'
          GPR(general-purpose
          register(汎用レジスタ))名を，指定されたABIに対して
          適切に出力します．デフォルトで，GPR名は，逆アセンブルされたバイナリの
          ABIに対応して選択されます．

    `fpr-names=ABI'
          FPR(floating-point
          register(浮動小数点レジスタ))名を，指定されたABIに対
          して適切に出力します．デフォルトで，FPR番号が，名前の代わりに出力されま
          す．

    `cp0-names=ARCH'
          CP0(system control coprocessor; coprocessor
          0(システム制御コプロセッサ;
          コプロセッサ0))レジスタ名を，CPUまたはARCHで指定されたアーキテク
          チャに対して適切に出力します．デフォルトで，CP0レジスタ名は，逆アセンブ
          ルされたバイナリのアーキテクチャとCPUに対応して選択されます．

    `hwr-names=ARCH'
          HWR(`rdhwr'命令で使用される，hardware
          register(ハードウェアレジス
          タ))名を，CPUまたはARCHで指定されたアーキテクチャに対して適切に出
          力します．デフォルトで，HWR名は，逆アセンブルされたバイナリのアーキテク
          チャとCPUに対応して選択されます．

    `reg-names=ABI'
          GPRとFPR名を選択されたABIに対して適切に出力します．

    `reg-names=ARCH'
          CPU特有のレジスタ名(CP0レジスタとHWRの名前)を，選択されたCPUやアーキテ
          クチャに対して適切に出力します．

     上記でリストアップされているすべてのオプションに対し，ABIや
     ARCHは，選択されているレジスタに対する名前ではなく，出力される番
     号となる`numeric'として指定します．`--help'を使用して，利用
     可能なABIとARCHの値をリストアップすることが可能です．

`-p'
`--private-headers'
     オブジェクトファイルのフォーマット特有の情報を出力します．出力される厳
     密な情報はオブジェクトファイルのフォーマットに依存します．オブジェクト
     ファイルのフォーマットによっては，追加情報は出力されません．

`-r'
`--reloc'
     ファイルの再配置エントリを出力します．`-d'や`-D'とともに
     使用される場合，再配置は逆アセンブルの中にバラバラに出力されます．

`-R'
`--dynamic-reloc'
     ファイルの動的な再配置エントリを出力します．これは，ある形式の共有ライ
     ブラリのような，動的オブジェクトのみで意味があります．

`-s'
`--full-contents'
     要求されたあらゆるセクションの，すべての内容を表示します．デフォルトで，
     すべての空ではないセクションが表示されます．

`-S'
`--source'
     可能な場合，逆アセンブラの中にソースコードを混ぜて表示します．
     `-d'が暗黙のうちに指定されます．

`--show-raw-insn'
     命令を逆アセンブルするとき，命令をシンボリック形式と同様に16進で出力し
     ます．`--prefix-addresses'が使用されているとき以外，これはデフォ
     ルトです．

`--no-show-raw-insn'
     命令を逆アセンブルするとき，命令バイトを出力しません．これは
     `--prefix-addresses'が使用されているときデフォルトです．

`-G'
`--stabs'
     要求されるすべてのセクションの内容を全部表示します．ELFファイルの.stab
     と .stab.indexと .stab.exclセクションの内容を表示します．これは，
     `.stab'デバッグシンボルテーブルのエントリーがELFのセクションに運び
     込まれる(Solaris
     2.0のような)システムでのみ役に立ちます．そのほかのほと
     んどのフォーマットでは，デバッグシンボルテーブルのエントリーは，リンク
     シンボルとともにバラバラに配置され，`--syms'の出力で見ることが可
     能となります．

     スタブシンボルの詳細は，*Note Stabs:
     (stabs.info)Top.を参照してください．

`--start-address=ADDRESS'
     データの表示を，指定したアドレスで開始します．これは`-d'，
     `-r'，そして`-s'オプションの出力に効果があります．

`--stop-address=ADDRESS'
     データの表示を，指定したアドレスで停止します．これは`-d'，
     `-r'，そして`-s'オプションの出力に効果があります．

`-t'
`--syms'
     ファイルのシンボルテーブルのエントリーを出力します．これは，`nm'
     プログラムで提供される情報に似ています．

`-T'
`--dynamic-syms'
     ファイルの動的シンボルテーブルのエントリーを表示します．これは，特定の
     形式の共有ライブラリのような，動的オブジェクトに対してのみ意味がありま
     す．これは，`-D' (`--dynamic')オプションが与えられている
     `nm'プログラムで提供される情報に似ています．

`--special-syms'
     表示するとき，なんらかの方法で，ターゲットが特殊なものだと考えたり，通
     常はユーザに興味が無いものを含めます．

`-V'
`--version'
     `objdump'のバージョンナンバーを出力し終了します．

`-x'
`--all-headers'
     利用可能なヘッダ情報をすべて表示し，それにはシンボルテーブルと，再配置
     エントリが含まれます．`-x'を用いると，`-a -f -h -p -r
     -t'をすべて指定したものと等価になります．

`-w'
`--wide'
     80列以上の出力デバイスに対し，数行で書式化します．また，表示するときに
     シンボル名を切り詰めません．

`-z'
`--disassemble-zeroes'
     通常，逆アセンブルの出力はゼロのブロックを省略します．このオプションは，
     これらのブロックを逆アセンブルするため，他のデータと同様，直接逆アセン
     ブルします．


File: binutils-ja.info,  Node: ranlib,  Next: readelf,  Prev: objdump,  Up: Top

5 ranlib
********

     ranlib [`-vV'] ARCHIVE

   `ranlib'は，アーカイブの内容の索引を生成し，それをアーカイブに
保存します．索引は，再配置可能なオブジェクトファイルであるアーカイブの
メンバーによって定義される，それぞれのシンボルをリストアップします．

   この索引をリストアップするために，`nm -s'や`nm
--print-armap'を使用してもかまいません．

そのような索引を持ったアーカイブは，ライブラリとのリンクで高速になり，
アーカイブ内での位置によらず，ライブラリ内でのお互いの呼び出し動作を可
能にします．

   GNU `ranlib'プログラムは，GNU `ar'のもう一つ
の形式です．`ranlib'を実行することは，`ar -s'を実行するこ
とと完全に等価です．*Note ar::.

`-v'
`-V'
`--version'
     `ranlib'のバージョンナンバーを表示します．


File: binutils-ja.info,  Node: size,  Next: strings,  Prev: readelf,  Up: Top

6 size
******

     size [`-A'|`-B'|`--format='COMPATIBILITY]
          [`--help']
          [`-d'|`-o'|`-x'|`--radix='NUMBER]
          [`-t'|`--totals']
          [`--target='BFDNAME] [`-V'|`--version']
          [OBJFILE...]

   GNU `size'ユーティリティは，その引数リスト内の，それぞれの
オブジェクトやアーカイブファイルOBJFILEに対し，セクションの大きさ --
と全体の大きさ -- をリストアップします．デフォルトで，それぞれのオ
ブジェクトファイルやそれぞれのアーカイブのモジュールに対し，一行の出力
が生成されます．

   OBJFILE... は，調査するオブジェクトファイルです．何も指定され
ない場合，ファイル`a.out'が使用されます．

   コマンドラインオプションには，以下の意味があります．

`-A'
`-B'
`--format=COMPATIBILITY'
     これらのオプションの一つを使用した場合，System V `size'
     (`-A'，または`--format=sysv'の使用)の出力に似ている GNU
     `size'の出力，または，Berkeley `size'
     (`-B'，または`--format=berkeley'の使用)のいずれかを選択す
     ることが可能です．デフォルトは，Berkeleyのものに似ている一行の書式です．

     以下は，Berkeley(デフォルト)書式の`size'の出力例です．
          $ size --format=Berkeley ranlib size
          text    data    bss     dec     hex     filename
          294880  81920   11592   388392  5ed28   ranlib
          294880  81920   11888   388688  5ee50   size

     これは同じデータですが，System Vの記法を選択して表示されています．

          $ size --format=SysV ranlib size
          ranlib  :
          section         size         addr
          .text         294880         8192
          .data          81920       303104
          .bss           11592       385024
          Total         388392


          size  :
          section         size         addr
          .text         294880         8192
          .data          81920       303104
          .bss           11888       385024
          Total         388688

`--help'
     受け入れ可能な引数とオプションの概要を表示します．

`-d'
`-o'
`-x'
`--radix=NUMBER'
     これらのオプションの一つを使用した場合，それぞれのセクションの大きさを，
     10進数(`-d'または`--radix=10')，8進数(`-o'または
     `--radix=8')，または16進数(`-x'または
     `--radix=16')で与えられるもののいづれかに制御可能です．
     `--radix=NUMBER' では，三つの値(8, 10, 16)のみサポートされ
     ます．全体の大きさは常に二つの基数で与えられます．それは，`-d'や
     `-x'に対する，10進数と16 進数，または`-o'を使用した場合，
     8進数と16進数になります．

`-t'
`--totals'
     リストアップされたすべてのオブジェクトの総数を表示します(Berkeleyの書式
     でのリストアップモードのみです)．

`--target=BFDNAME'
     OBJFILEに対するオブジェクトコードのフォーマットをBFDNAMEと
     して指定します．このオプションは不要かもしれません．`size'は自
     動的に多くのフォーマットを認識することが可能です．詳細は，*Note
     Target Selection::.

`-V'
`--version'
     `size'のバージョンナンバーを表示します．


File: binutils-ja.info,  Node: strings,  Next: strip,  Prev: size,  Up: Top

7 strings
*********

     strings [`-afov'] [`-'MIN-LEN]
             [`-n' MIN-LEN] [`--bytes='MIN-LEN]
             [`-t' RADIX] [`--radix='RADIX]
             [`-e' ENCODING] [`--encoding='ENCODING]
             [`-'] [`--all'] [`--print-file-name']
             [`--target='BFDNAME]
             [`--help'] [`--version'] FILE...

   それぞれの与えられたFILEに対し，GNU `strings'は，出
力可能な文字が最低四文字(または以下のオプションで与えられた数)並んでい
て，それに出力不可能な文字が続くものの，出力可能な文字を出力します．デ
フォルトで，オブジェクトファイルの，初期化されロードされるセクションか
ら，文字列のみ出力します．それ以外のファイルの形式では，ファイル全体か
ら文字列を出力します．

   `strings'は，テキストではないファイルの内容を判断することに，主
に役立ちます．

`-a'
`--all'
`-'
     オブジェクトファイルの初期化されロードされるセクションのみをスキャンす
     るのではありません．ファイル全体をスキャンします．

`-f'
`--print-file-name'
     それぞれの文字列の前にファイル名を出力します．

`--help'
     プログラムの使用方法の概要を標準出力に出力し終了します．

`-MIN-LEN'
`-n MIN-LEN'
`--bytes=MIN-LEN'
     デフォルトの四文字ではなく，少なくともMIN-LEN文字の長さの文字の列
     を出力します．

`-o'
     `-t o'に似ています．`strings'の他のバージョンには，代わ りに`-t
     d'のように`-o'を動作させるものもあります．我々は，
     両方の互換性を提供することができないので，単純にこちらを選択しただけで
     す．

`-t RADIX'
`--radix=RADIX'
     それぞれの文字列の前に，ファイル内部でのオフセットを出力します．単一文
     字の引数を指定した場合，オフセットの基数を指定します --
     8進数に対する
     `o'，16進数に対する`x'，または10進数に対する`d'になりま す．

`-e ENCODING'
`--encoding=ENCODING'
     見つかった文字列の文字のエンコードを選択します．ENCODINGに対して
     利用可能な値は以下のとおりです．`s' = シングル7ビットのバイト文字
     (ASCII，ISO 8859等，デフォルトです)，`S' = シングル8ビットのバイト
     文字，`b' = 16ビットビッグエンディアン，`l' = 16ビットリトル
     エンディアン，`B' = 32ビットビッグエンディアン，`L' = 32ビッ
     トリトルエンディアン．ワイド文字の文字列を見つけるとき役に立ちます．

`--target=BFDNAME'
     システムのデフォルトのフォーマット以外のオブジェクトコードのフォーマッ
     トを指定します．詳細は，*Note Target Selection::.

`-v'
`--version'
     プログラムのバージョンナンバーを標準出力に出力し終了します．


File: binutils-ja.info,  Node: strip,  Next: c++filt,  Prev: strings,  Up: Top

8 strip
*******

     strip [`-F' BFDNAME |`--target='BFDNAME]
           [`-I' BFDNAME |`--input-target='BFDNAME]
           [`-O' BFDNAME |`--output-target='BFDNAME]
           [`-s'|`--strip-all']
           [`-S'|`-g'|`-d'|`--strip-debug']
           [`-K' SYMBOLNAME |`--keep-symbol='SYMBOLNAME]
           [`-N' SYMBOLNAME |`--strip-symbol='SYMBOLNAME]
           [`-w'|`--wildcard']
           [`-x'|`--discard-all'] [`-X' |`--discard-locals']
           [`-R' SECTIONNAME |`--remove-section='SECTIONNAME]
           [`-o' FILE] [`-p'|`--preserve-dates']
           [`--only-keep-debug']
           [`-v' |`--verbose'] [`-V'|`--version']
           [`--help'] [`--info']
           OBJFILE...

   GNU `strip'は，オブジェクトファイルOBJFILEからシンボ
ルをすべて廃棄します．オブジェクトファイルのリストには，アーカイブを含
めてもかまいません．少なくとも一つのオブジェクトファイルを与える必要が
あります．

   `strip'は，別の名前に編集されたものを書き出すのではなく，その引
数で指名されたファイルを変更します．

`-F BFDNAME'
`--target=BFDNAME'
     オリジナルのOBJFILEを，オブジェクトコードのフォーマット
     BFDNAMEを用いたファイルとして扱い，同じフォーマットで再書き込みし
     ます．詳細は，*Note Target Selection::.

`--help'
     `strip'へのオプションの概要を表示し終了します．

`--info'
     すべてのアーキテクチャと利用可能なオブジェクトフォーマットを示すリスト
     を表示します．

`-I BFDNAME'
`--input-target=BFDNAME'
     オリジナルのOBJFILEを，オブジェクトコードのフォーマット
     BFDNAMEを用いたファイルとして扱います．詳細は，*Note Target
     Selection::.

`-O BFDNAME'
`--output-target=BFDNAME'
     OBJFILEを，出力フォーマットBFDNAMEのファイルで置換します．
     詳細は，*Note Target Selection::.

`-R SECTIONNAME'
`--remove-section=SECTIONNAME'
     SECTIONNAMEで指名されたすべてのセクションを，出力ファイルから削除
     します．このオプションは一回以上与えてもかまいません．このオプションを
     使用すると，不適切にも出力ファイルを利用不可能にする可能性があることに
     注意してください．

`-s'
`--strip-all'
     すべてのシンボルを削除します．

`-g'
`-S'
`-d'
`--strip-debug'
     デバッグシンボルのみ削除します．

`--strip-unneeded'
     再配置の処理に不要なすべてのシンボルを削除します．

`-K SYMBOLNAME'
`--keep-symbol=SYMBOLNAME'
     シンボルSYMBOLNAMEのみ，ソースファイルに保存します．このオプショ
     ンは一回以上与えてもかまいません．

`-N SYMBOLNAME'
`--strip-symbol=SYMBOLNAME'
     シンボルSYMBOLNAMEをソースファイルから削除します．このオプション
     は一回以上与えたり，`-K'以外の`strip'オプションと組み合
     わせたりしてもかまいません．

`-o FILE'
     既存のファイルを置換するのではなく，`strip'された出力を
     FILEに書き込みます．この引数が使用されたとき，一つの
     OBJFILE引数のみ指定することが可能です．

`-p'
`--preserve-dates'
     ファイルのアクセスと編集の日付を保持します．

`-w'
`--wildcard'
     他のコマンドラインオプションで使用するため，SYMBOLNAMEでの正規表
     現を許可します．疑問符(?)，アスタリスク(*)，バックスラッシュ(\)，そして
     角括弧([])オペレータを，シンボル名の任意の場所に使用することが可能です．
     シンボル名の最初の文字が感嘆符(!)の場合，シンボルに対するスイッチの意味
     を反対にします．例えば，以下を考えます．

            -w -W !foo -W fo*

     これで，`strip'は，シンボル"foo"以外の，"fo"で始まるすべて
     のシンボルを保時します．

`-x'
`--discard-all'
     グローバルでないシンボルを削除します．

`-X'
`--discard-locals'
     コンパイラが生成したローカルシンボルを削除します．(これらは通常，
     `L'または`.'で始まります．)

`--only-keep-debug'
     `--strip-debug'でstripされるセクションをすべて削除し，デバッグセ
     クションは残しながらファイルをstripします．

     このオプションの目的は，二つの部分の実行形式を作成するために
     `--add-gnu-debuglink'を組み合わせで使用します．一つは，RAMと配布
     物にスペースが無い場合のstripされたバイナリで，二番目のデバッグ情報ファ
     イルは，デバッグ能力が要求される場合だけ必要になります．これらのファイ
     ルを作成するための推奨手順は以下の通りです．

       1. 通常の実行形式のリンク．`foo'と仮定します．

       2. デバッグ情報を含んでいるファイルを作成するために`objcopy
          --only-keep-debug foo foo.dbg'の実行．

       3. stripされた実行形式を作成するために`objcopy --strip-debug
          foo'の実 行．

       4.
          stripされた実行形式にデバッグ情報を追加リンクするために`objcopy
          --add-gnu-debuglink=foo.dbg foo'を実行．

     注意 - デバッグ情報ファイルに対する拡張として，`.dbg'の選択は任意
     です．また，`--only-keep-debug'の段階はオプションです．代わりに以
     下のようにすることも可能です．

       1. 通常の実行形式のリンク．

       2. `foo'を`foo.full'へコピー．

       3. `strip --strip-debug foo'の実行．

       4. `objcopy --add-gnu-debuglink=foo.full foo'の実行．

     つまり，`--add-gnu-debuglink'で示されるファイルは，完全な実行形
     式です．`--only-keep-debug'スイッチファイルを生成する必要はあり
     ません．

`-V'
`--version'
     `strip'のバージョンナンバーを表示します．

`-v'
`--verbose'
     冗長な出力です．編集されたすべてのオブジェクトファイルをリストアップし
     ます．アーカイブの場合，`strip -v'はアーカイブのすべてのメンバーを
     リストアップします．


File: binutils-ja.info,  Node: c++filt,  Next: addr2line,  Prev: strip,  Up: Top

9 c++filt
*********

     c++filt [`-_'|`--strip-underscores']
             [`-j'|`--java']
             [`-n'|`--no-strip-underscores']
             [`-p'|`--no-params']
             [`-s' FORMAT|`--format='FORMAT]
             [`--help']  [`--version']  [SYMBOL...]

C++とJava言語は，関数のオーバーロードを提供し，それは(それぞれ異なる型
のパラメータの受け入れを提供する)同じ名前で複数の関数を書くことが可能だ
ということを意味します．すべてのC++とJavaの関数名は，低レベルのアセンブ
リラベルに符号化されます(この処理は"mangling"として知られています．)
`c++filt'(1)プログラムは，マッピングを反転します．それは，これらのオーバーロー
ドされた関数を破壊することから，リンカが守ることができるように，低レベ
ルの名前をユーザレベルの名前に復号("demangles")します．

入力にあるすべての英数単語(文字，数字，アンダースコア，ドル記号，または
ピリオド)は，ポテンシャルラベルと考えられます．ラベルをC++の名前に復号
する場合，C++の名前は出力で低レベルの名前に置換されます．

   個別のシンボルを解読するために`c++filt'を使用することが可能です．

     c++filt SYMBOL

   SYMBOL引数が与えられている場合，`c++filt'は，シンボル名を
標準入力から読み込み，demangleされた名前を標準出力に書き出します．すべ
ての結果は，標準出力に出力されます．

`-_'
`--strip-underscores'
     システムによっては，CとC++のコンパイラが，すべての名前の前にアンダース
     コアを書き込むものもあります．例えば，Cでの名前`foo'が，低レベルで
     は名前`_foo'になります．このオプションは，最初のアンダースコアを削
     除します．`c++filt'がデフォルトでアンダースコアを削除するかどう
     かはターゲットに依存します．

`-j'
`--java'
     demangleされた名前を，Javaの構文を用いて出力します．デフォルトは，C++
     の構文の使用です．

`-n'
`--no-strip-underscores'
     最初のアンダースコアを削除しません．

`-p'
`--no-params'
     関数名をdemanglするとき，関数のパラメータの形式を表示しません．

`-s FORMAT'
`--format=FORMAT'
     `c++filt'は，いろいろなコンパイラで使用されている，様々な
     mangleの手法を復号することが可能です．このオプションの引数は，使用する
     メソッドを選択します．

    `auto'
          実行形式を基にした自動選択(デフォルトの手法)．

    `gnu'
          GNU C++コンパイラで使用されるもの(g++)．

    `lucid'
          Lucidコンパイラで使用されるもの(lcc)．

    `arm'
          C++ Annotated Reference Manualで指定されるもの．

    `hp'
          HPコンパイラで使用されるもの(aCC)．

    `edg'
          EDGコンパイラで使用されるもの．

    `gnu-v3'
          V3 ABIを用いたGNU C++コンパイラで使用されるもの．

    `java'
          GNU Javaコンパイラで使用されるもの(gcj)．

    `gnat'
          GNU Adaコンパイラで使用されるもの(GNAT)．

`--help'
     `c++filt'のオプションの概要を出力し終了します．

`--version'
     `c++filt'のバージョンナンバーを出力し終了します．

     _警告:_ `c++filt'は，新しいユーティリティで，そのユーザイ
     ンターフェースの詳細は将来のリリースで変更されやすくなっています．特に，
     コマンドラインの引数として渡される名前を復号するためのコマンドラインオ
     プションが，将来要求されるかもしれません．言い換えると以下のようになる
     ということです．

          c++filt SYMBOL

     これが，将来のリリースでは，以下のようになるかもしれません．

          c++filt OPTION SYMBOL

   ---------- Footnotes ----------

   (1) MS-DOSは，ファイル名に`+'文字が使用でき
ないので，MS-DOS上でのこのプログラムは`CXXFILT'と命名されま す．


File: binutils-ja.info,  Node: addr2line,  Next: nlmconv,  Prev: c++filt,  Up: Top

10 addr2line
************

     addr2line [`-b' BFDNAME|`--target='BFDNAME]
               [`-C'|`--demangle'[=STYLE]]
               [`-e' FILENAME|`--exe='FILENAME]
               [`-f'|`--functions'] [`-s'|`--basename']
               [`-H'|`--help'] [`-V'|`--version']
               [addr addr ...]

   `addr2line'は，プログラムアドレスをファイル名と行番号に変換しま
す．アドレスと実行形式が与えられた場合，ファイル名と行番号が与えられた
アドレスに関連していることを判別するため，それは実行形式内のデバッグ情
報を使用します．

   使用する実行形式は，`-e'オプションで指定されます．デフォルトは，
ファイル`a.out'です．

   `addr2line'には，二つの処理モードがあります．

   最初のものは，16進のアドレスがコマンドラインで指定され，
`addr2line'は，それぞれのアドレスに対しファイル名と行番号を表示 します．

   二番目のものは，`addr2line'が16進のアドレスと標準入力から読み込
み，それぞれのアドレスに対し，ファイル名と行番号を標準出力に出力します．
このモードでは，`addr2line'は，動的に選択されたアドレスを変換す
るパイプとして使用することが可能です．

   出力の書式は，`FILENAME:LINENO'です．それぞれのアドレスに対するファ
イル名と行番号は，個別の行に出力されます．`-f'オプションが使用さ
れた場合，それぞれの`FILENAME:LINENO'行に，アドレスに含まれる関数
名`FUNCTIONNAME'が前置されます．

   ファイル名と関数名を決定することが不可能な場合，`addr2line'は二
つの疑問符をその場所に出力します．行番号を決定することが不可能な場合，
`addr2line'は，0を出力します．

   以下で交互に表示している，オプションの長い形式と短い形式は等価です．

`-b BFDNAME'
`--target=BFDNAME'
     オブジェクトファイルに対するオブジェクトコードをBFDNAMEとして指定
     します．

`-C'
`--demangle[=STYLE]'
     低レベルのシンボル名をユーザレベル名に復号("demangle")します．シス
     テムによって前置される，すべての最初のアンダースコアを削除する他に，こ
     れはC++関数名を可読にします．別々のコンパイラでは，mangle形式が異なりま
     す．追加のdemangle形式の引数は，コンパイラに対する適切なdemangle形式を
     選択するために使用することが可能です．demangleの情報は， *Note
     c++filt::.

`-e FILENAME'
`--exe=FILENAME'
     変換したいアドレスに対する実行形式の名前を指定します．デフォルトファイ
     ルは`a.out'です．

`-f'
`--functions'
     ファイルと行番号の情報と同様に，関数名も表示します．

`-s'
`--basenames'
     それぞれのファイル名のベースのみ表示します．


File: binutils-ja.info,  Node: nlmconv,  Next: windres,  Prev: addr2line,  Up: Top

11 nlmconv
**********

`nlmconv'は，再配置可能なオブジェクトファイルをNetWare Loadable
Moduleに変換します．

     _警告:_ `nlmconv'は，NLMターゲットに対してのみ役に立つので，
     常にバイナリユーティリティの一部としてビルドされるわけではありません．

     nlmconv [`-I' BFDNAME|`--input-target='BFDNAME]
             [`-O' BFDNAME|`--output-target='BFDNAME]
             [`-T' HEADERFILE|`--header-file='HEADERFILE]
             [`-d'|`--debug'] [`-l' LINKER|`--linker='LINKER]
             [`-h'|`--help'] [`-V'|`--version']
             INFILE OUTFILE

   `nlmconv'は，再配置可能な`i386'オブジェクトファイル INFILEをNetWare
Loadable Module OUTFILEに変換し，さらに， NLM
ヘッダ情報に対するHEADERFILEを読み込みます．ヘッダで使用され
ているNLMコマンドファイル言語を書くことに関する説明は， Novell, Inc.で
利用可能な，NLM Software Developer's Kit ("NLM SDK")の一部である， `NLM
Development and Tools Overview'の，`linkers'セクションの
特定の`NLMLINK'を参照してください．`nlmconv'は，
INFILEを読み込むために，GNU Binary File Descriptorライブラリ
を使用します．

   詳細は，*Note BFD: (ld.info)BFD,を参照してください．

   `nlmconv'はリンクステップを実行することが可能です．言い換えると，
(コマンドラインで一つの入力ファイルを単に指定するのではなく)定義ファイ
ルでリストアップした場合，入力に対して一つ以上のオブジェクトファイルを
リストアップすることが可能です．この場合，`nlmconv'はリンカを呼
び出します．

`-I BFDNAME'
`--input-target=BFDNAME'
     入力ファイルのオブジェクトフォーマットです．`nlmconv'は，通常与
     えられたファイルのフォーマットを決定することが可能です(そのためデフォル
     トは不要です)．詳細は，*Note Target Selection::.

`-O BFDNAME'
`--output-target=BFDNAME'
     出力ファイルのオブジェクトのフォーマットです．`nlmconv'は，出力
     のフォーマットを入力のフォーマットを元に推測し，例えば，`i386' 入
     力ファイルに対する出力のフォーマットは，`nlm32-i386'になります．詳
     細は，*Note Target Selection::.

`-T HEADERFILE'
`--header-file=HEADERFILE'
     NLMヘッダ情報のためにHEADERFILEを読み込みます．ヘッダファイルで使
     用されているNLMコマンドファイルの言語を書くときの命令については，
     Novell, Inc. で利用可能なNLM Software Developer's
     Kitの一部となっている， `NLM Development and Tools
     Overview'の`linkers'セクションを参 照してください．

`-d'
`--debug'
     `nlmconv'が使用しているリンカコマンドラインを(標準エラー出力に)
     表示します．

`-l LINKER'
`--linker=LINKER'
     すべてのリンクでLINKERを使用します．LINKERは，絶対パス名ま
     たは相対パス名が可能です．

`-h'
`--help'
     使用方法の概要を出力します．

`-V'
`--version'
     `nlmconv'のバージョンナンバーを出力します．


File: binutils-ja.info,  Node: windres,  Next: dlltool,  Prev: nlmconv,  Up: Top

12 windres
**********

`windres'は，Windowsのリソースを操作することに使用することが可 能です．

     _警告:_ `windres'は，Windowsターゲットに対してのみ役に立つ
     ので，常にバイナリユーティリティの一部としてビルドされるわけではありま
     せん．

     windres [options] [input-file] [output-file]

   `windres'はリソースを入力ファイルから読み込み，それを出力ファイ
ルにコピーします．ファイルは以下の三つの形式のいずれか一つが可能です．

`rc'
     リソースコンパイラで読み込むテキスト形式．

`res'
     リソースコンパイラが生成したバイナリ形式．

`coff'
     COFFオブジェクト，または，実行形式．

これらの形式の差異の正確な記述は，Microsoftのドキュメントで利用可能です．

   `windres'が`rc'形式から`res'形式に変換するとき，それ はWindows
Resource Compilerのように動作します．`windres'が
`res'形式から`coff'形式に変換するとき，それはWindows
`CVTRES'プログラムのように動作します．

   `windres'が`rc'ファイルを生成するとき，出力は似ていますが，
入力で期待される形式と同一ではありません．入力`rc'ファイルが外部の
ファイル名を参照するとき，出力`rc'ファイルは，その代わりにファイル
の内容を含めます．

   入力や出力の形式が指定されていない場合，`windres'はファイル名，
または，入力ファイルのファイルの内容を基に推測します．`.rc'の拡張
子を持つファイルは，`rc'ファイルとして扱われ，`.res'の拡張子
を持つファイルは，`res'ファイルとして扱われ，そして，`.o'や
`.exe'の拡張子を持つファイルは，`coff'ファイルとして扱われま す．

   出力ファイルが指定されない場合，`windres'は，`rc'形式内の
リソースを標準出力に出力します．

   `rc'を書き，COFFオブジェクトファイルに変換するために
`windres'を使用し，COFFファイルをアプリケーションにリンクするの
が通常の使用方法です．これは，`rc'ファイルのリソースの記述を，
Windowsで利用可能にします．

`-i FILENAME'
`--input FILENAME'
     入力ファイル名です．このオプションが使用されていない場合，
     `windres'は，最初の非オプションの引数を入力ファイル名として使用
     します．非オプションの引数がない場合，`windres'は，標準入力から
     読み込みます．`windres'は，COFFファイルを標準入力から読み込むこ
     とは不可能です．

`-o FILENAME'
`--output FILENAME'
     出力ファイル名です．このオプションが使用されない場合， `windres'
     は，入力ファイル名として使用した後の，最初の非オプショ
     ンの引数を出力ファイル名として使用します．非オプションの引数がない場合，
     `windres' は，標準出力に書き出します．`windres'は，
     COFFファイルを標準出力に書き出すことは不可能です．`rc'との互換
     性のため，オプション`-fo'も受け入れますが，その使用方法は推奨さ
     れていないことに注意して下さい．

`-J FORMAT'
`--input-format FORMAT'
     読み込む入力の形式です．FORMATは，`res'，`rc'，または
     `coff'が可能です．入力形式が指定されない場合，`windres'は，
     上記のように推測します．

`-O FORMAT'
`--output-format FORMAT'
     生成する出力の形式です．FORMATは，`res'，`rc'，または
     `coff'が可能です．出力形式が指定されない場合，`windres'は，
     上記のように推測します．

`-F TARGET'
`--target TARGET'
     入出力としてのCOFFに対して使用するBFDフォーマットを指定します．これは，
     BFDターゲット名です．サポートされているターゲットのリストを見るために，
     `--help'オプションが使用することが可能です．通常，
     `windres'はデフォルトのフォーマットを使用し，それは
     `--help'オプションでリストアップされる最初のものです．

     *Note Target Selection::.

`--preprocessor PROGRAM'
     `windres'が`rc'ファイルを読み込むとき，それは最初にCプリプ
     ロセッサを通じて実行されます．このオプションは，使用するプリプロセッサ
     を指定するために利用してもかまわず，それには引数を前置するものを含みま
     す．デフォルトのプリプロセッサ引数は，`gcc -E -xc-header
     -DRC_INVOKED' です．

`-I DIRECTORY'
`--include-dir DIRECTORY'
     `rc'ファイルを読み込むとき使用する，インクルードディレクトリを指定
     します．`windres'は，これを`-I'オプションとしてプリプロ
     セッサに渡します．`windres'は，`rc'ファイルで指名されてい
     るファイルを探すとき，このディレクトリの検索も行います．このコマンドに
     渡された引数が，(`-J'オプションで記述されている) サポートされる
     FORMATSにマッチする場合，推奨しない旨の警告を発し，`-J' オ
     プションのように動作します．新しいプログラムでは，この動作を使用すべき
     ではありません．ディレクトリがFORMATにマッチする場合，単純な接頭
     辞`./'を用いて下位互換性が無くなるようにして下さい．

`-D TARGET'
`--define SYM[=VAL]'
     `rc'ファイルを読み込むとき，プリプロセッサに渡す`-D'オプショ
     ンを指定します．

`-U TARGET'
`--undefine SYM'
     `rc'ファイルを読み込むとき，プリプロセッサに渡す`-U'オプショ
     ンを指定します．

`-r'
     `rc'との互換性のためで，無視されます．

`-v'
     冗長モードを可能にします．これは，プリプロセッサが指定されていない場合，
     そのプリプロセッサを報告します．

`-l VAL'

`--language VAL'
     `rc'ファイルを読み込むとき使用する，デフォルトの言語を指定します．
     VALは16進数の言語コードにする必要があります．下位8ビットは言語で，
     上位8ビットはサブ言語です．

`--use-temp-file'
     プリプロセッサの出力を読み込むためpopenを使用する代わりに，一時ファイル
     を使用します．popenの実装にバグの多いホストの場合，このオプションを使用
     してください(例えば，ある非英語バージョンのWindows95とWindows98は，出力
     がコンソールでないところでは，バグの多いpopenとなっていることが知られて
     います)．

`--no-use-temp-file'
     プリプロセッサの出力を読み込むため，一時ファイルではなくpopenを使用しま
     す．これはデフォルトの動作です．

`-h'

`--help'
     使用方法の概要を出力します．

`-V'

`--version'
     `windres'のバージョンナンバーを出力します．

`--yydebug'
     `windres'が`YYDEBUG'を`1'と定義してコンパイルされる場
     合，パーサデバッグを開始します．


File: binutils-ja.info,  Node: dlltool,  Next: Selecting The Target System,  Prev: windres,  Up: Top

13 dlltool
**********

WindowsのようなPEフォーマットイメージファイルを理解するシステムで，ダイ
ナミックリンクライブラリ(DLL)を作成するために必要なファイルを作成するた
めに，`dlltool'は使用されます．DLLには，参照元のプログラムが参
照先を実行時に解決するためにローダが必要とする情報を含んでいる，エクス
ポートテーブルが含まれます．

   エクスポートテーブルは，`.def'ファイルやを読み込んだり，DLL内の
`.a'と`.o'ファイルをスキャンすることで，このプログラムが生成
します．`.o'ファイルには，エクスポート情報がある特殊な
`.drectve'セクションを含めることが可能です．

     _Note:_ `dlltool'は，DLLをサポートするターゲットに対しての
     み役に立つので，常にバイナリユーティリティの一部としてビルドされるわけ
     ではありません．

     dlltool [`-d'|`--input-def' DEF-FILE-NAME]
             [`-b'|`--base-file' BASE-FILE-NAME]
             [`-e'|`--output-exp' EXPORTS-FILE-NAME]
             [`-z'|`--output-def' DEF-FILE-NAME]
             [`-l'|`--output-lib' LIBRARY-FILE-NAME]
             [`--export-all-symbols'] [`--no-export-all-symbols']
             [`--exclude-symbols' LIST]
             [`--no-default-excludes']
             [`-S'|`--as' PATH-TO-ASSEMBLER] [`-f'|`--as-flags' OPTIONS]
             [`-D'|`--dllname' NAME] [`-m'|`--machine' MACHINE]
             [`-a'|`--add-indirect'] [`-U'|`--add-underscore'] [`-k'|`--kill-at']
             [`-A'|`--add-stdcall-alias']
             [`-p'|`--ext-prefix-alias' PREFIX]
             [`-x'|`--no-idata4'] [`-c'|`--no-idata5'] [`-i'|`--interwork']
             [`-n'|`--nodelete'] [`-t'|`--temp-prefix' PREFIX]
             [`-v'|`--verbose']
             [`-h'|`--help'] [`-V'|`--version']
             [object-file ...]

   `dlltool'は，その入力を読み込み，それは，コマンドラインで指定さ
れたオブジェクトファイルと，`-d'と`-b'オプションから成り
立ちます．そして，これらの入力を処理し，`-e'オプションが指定され
ている場合はエクスポートファイルを作成します．`-l'オプションが指
定されている場合は，ライブラリファイルを作成し，`-z'オプションが
指定されている場合は，defファイルを作成します．`-e'，
`-l'，そして`-z'オプションのいずれか，またはすべてを， `dlltool'
の呼び出しに配置することが可能です．

DLLを作成しているとき，DLLのソースファイルとともに，それは三つの他のファ
イルが必要です．`dlltool'は，これらのファイルの作成を手助けする
ことが可能です．

最初のファイルは，DLLからエクスポートされる関数や，DLLがインポートする
関数等を指定する，`.def'ファイルです．これはテキストファイルで，手
動で作成したり，作成するために`dlltool'を`-z'オプション
を用いて使用したりすることが可能です．この場合，`dlltool'は，エ
クスポートされるように特別に印の付けられたこれらの関数を探しながら，コ
マンドラインで指定されたオブジェクトファイルを走査し，作成する
`.def'ファイルにそれらのエントリーを書き出します．

DLLからエクスポートされるように関数に印を付けるため，オブジェクトファイ
ルの`.drectve'セクションに，`-export:<name_of_function>' エ
ントリーが必要です．これは，Cでasm()演算子を使用することで可能となりま
す．

       asm (".section .drectve");
       asm (".ascii \"-export:my_func\"");

       int my_func (void) { ... }

DLLの作成に必要とされる二番目のファイルは，エクスポートファイルです．こ
のファイルは，DLL本体を作成し，DLLと外部世界の間のインターフェースを取
り扱うオブジェクトファイルとリンクされます．これはバイナリファイルで，
`dlltool'が`.def'ファイルの作成または読み込みをしていると
きに，それに`-e'オプションを与えると作成されます．

DLLの作成に必要とされる三番目のファイルは，DLL内の関数にアクセスするた
めにプログラムとリンクするライブラリファイルです．このファイルは，
`dlltool'が`.def'ファイルの作成または読み込みをしていると
きに，それに`-l'オプションを与えると作成されます．

   `dlltool'は，手動でライブラリファイルを構築しますが，それは，ア
センブラ宣言を含む一時ファイルを作成し，それをアセンブルすることで，エ
クスポートファイルを構築します．`-S'コマンドラインオプションは，
`dlltool'が使用するアセンブラへのパスを指定するため使用すること
が可能で，`-f'オプションは，そのアセンブラに特別なフラグを渡すた
めに使用することが可能です．`-n'は，`dlltool'がこれらの
一時的なアセンブラファイルを終了後に削除することを防ぐために使用するこ
とが可能で，`-n'が二回指定されている場合は，`dlltool'が
ライブラリを構築するために使用した，一時的なオブジェクトファイルが削除
されることを防ぎます．

   ソースファイル`dll.c'からDLLを作成し，そのDLLを使用しているプログ
ラムも(`program.o'という名前のオブジェクトファイルから)作成してい
る例は以下のようになります．

       gcc -c dll.c
       dlltool -e exports.o -l dll.lib dll.o
       gcc dll.o exports.o -o dll.dll
       gcc program.o dll.lib -o program

   コマンドラインオプションには以下の意味があります．

`-d FILENAME'
`--input-def FILENAME'
     読み込み，処理する`.def'ファイルの名前を指定します．

`-b FILENAME'
`--base-file FILENAME'
     読み込み，処理するベースファイルの名前を指定します．このファイルの内容
     に，`dlltool'で生成されるエクスポートファイルの，再配置のセクショ
     ンが追加されます．

`-e FILENAME'
`--output-exp FILENAME'
     `dlltool'で作成される，エクスポートファイルの名前を指定します．

`-z FILENAME'
`--output-def FILENAME'
     `dlltool'で作成される，`.def'ファイルの名前を指定します．

`-l FILENAME'
`--output-lib FILENAME'
     `dlltool'で作成される，ライブラリファイルの名前を指定します．

`--export-all-symbols'
     入力ファイル内のエクスポートされるシンボルとして見つかったものは，すべ
     て大域的にweakとして定義されているシンボルとして扱います．これらは，デ
     フォルトでエクスポートされないシンボルの小さなリストです．
     `--no-default-excludes'オプションを参照してください．
     `--exclude-symbols'オプションを使用して，エクスポートされないシ
     ンボルのリストを追加してもかまいません．

`--no-export-all-symbols'
     入力の`.def'ファイルや入力オブジェクトファイルの`.drectve'セ
     クションで，明示的にリストアップされているシンボルのみエクスポートしま
     す．`.drectve'は，ソースコード内の`dllexport'属性で作成されま す．

`--exclude-symbols LIST'
     LIST内のシンボルをエクスポートしません．これは，カンマまたはコロ
     ン文字で分けられた，シンボル名のリストです．シンボル名に，アンダースコ
     アの前置を含めることはできません．これは，
     `--export-all-symbols'が使用されているときのみ意味があります．

`--no-default-excludes'
     `--export-all-symbols'が使用されているとき，それはデフォルトで，
     ある特別なシンボルをエクスポートすることを避けます．現在のエクスポート
     を避けるリストは，`DllMain@12', `DllEntryPoint@0',
     `impure_ptr'です．これらの特別なシンボルを進んでエクスポートするた
     めに，`--no-default-excludes'オプションを使用してもかまいません．
     これは，`--export-all-symbols'が使用されているときのみ意味があり
     ます．

`-S PATH'
`--as PATH'
     エクスポートファイルを作成するために使用するアセンブラの，ファイル名を
     含む，パスを指定します．

`-f OPTIONS'
`--as-flags OPTIONS'
     エクスポートファイルを構築しているときアセンブラに渡す，あらゆる特別な
     コマンドラインオプションを指定します．このオプションは，`-S'が指
     定されていないかのように動作します．このオプションは一つの引数のみ渡し，
     コマンドラインに一回以上出現する場合，最後に出現したものを，前に出現し
     たものに優先させます．そのため，複数のオプションをアセンブラに渡す必要
     がある場合は，二重引用符で囲む必要があります．

`-D NAME'
`--dll-name NAME'
     `-e'オプションが使用されてるとき，DLLの名前として`.def'ファ
     イルに保存する名前を指定します．このオプションがない場合，`-e'
     オプションで与えられるファイル名は，DLLの名前として使用されます．

`-m MACHINE'
`-machine MACHINE'
     ライブラリファイルが構築されるマシンの形式を指定します．
     `dlltool'には，構築のされ方に依存するデフォルト形式がありますが，
     このオプションで，それに優先させることが可能です．これは通常，ARM
     プロ
     セッサに対するDLLを作成するときのみ役に立ち，DLLの内容は，実際にThumb命
     令を使用して符号化されます．

`-a'
`--add-indirect'
     `dlltool'がエクスポートファイルを作成しているとき，エクスポート
     関数がインポートライブラリを使用しないで参照できるように，セクションを
     加えることを指定します．たとえ，それが地獄を意味しようとも！

`-U'
`--add-underscore'
     `dlltool'エクスポートファイルを作成しているとき，エクスポート関
     数の名前にアンダースコアを前置することを指定します．

`-k'
`--kill-at'
     `dlltool'エクスポートファイルを作成しているとき，文字列 `@
     <number>'を追加しないことを指定します．これらの数字は，序数と
     呼ばれ，DLL
     では関数にアクセスする一つの方法を表示し，それ以外では名前
     で表示します．

`-A'
`--add-stdcall-alias'
     `dlltool'がエクスポートファイルを作成しているとき，シンボルに `@
     <number>'を追加したものを，`@ <number>'なしでstdcallシン
     ボルの別名を加えることを指定します．

`-p'
`--ext-prefix-alias PREFIX'
     `dlltool'で，すべてのDLLインポートに対して指定した接頭辞で外部
     へのエイリアスを作成します．エイリアスは外部とインポートの両方のシンボ
     ルを前置するアンダースコア無しで作成します．

`-x'
`--no-idata4'
     `dlltool'エクスポートファイルとライブラリファイルを作成している
     とき，`.idata4'セクションを削除することを指定します．これは，ある
     オペレーティングシステムとの互換性のためです．

`-c'
`--no-idata5'
     `dlltool'エクスポートファイルとライブラリファイルを作成している
     とき，`.idata5'セクションを削除することを指定します．これは，ある
     オペレーティングシステムとの互換性のためです．

`-i'
`--interwork'
     `dlltool'が，生成しているライブラリファイルとエクスポートファイ
     ル内のオブジェクトに，ARMとThumb間での相互動作をサポートするように印を
     付けることを指定します．

`-n'
`--nodelete'
     `dlltool'が，エクスポートファイルを作成するために使用した一時的
     なアセンブラファイルを保存するようにします．このオプションが繰り返され
     る場合，`dlltool'は，ライブラリを作成するために使用する一時的な
     オブジェクトファイルも保存します．

`-t PREFIX'
`--temp-prefix PREFIX'
     `dlltool'が，一時的なアセンブラとオブジェクトファイルの名前を構
     成するとき，PREFIXを使用するようにします．デフォルトで，一時的な
     ファイルの接頭辞はpidから生成されます．

`-v'
`--verbose'
     `dlltool'が，行っていることを記述します．

`-h'
`--help'
     コマンドラインオプションのリストを表示し終了します．

`-V'
`--version'
     `dlltool'のバージョンナンバーを表示し終了します．


* Menu:

* def file format::             The format of the dlltool `.def' file


File: binutils-ja.info,  Node: def file format,  Up: dlltool

13.1 `dlltool' `.def'ファイルのフォーマット
===========================================

`.def'ファイルには，任意の数の以下のコマンドが含まれています．

`NAME' NAME `[ ,' BASE `]'
     結果として，NAME`.exe'という名前になります．

`LIBRARY' NAME `[ ,' BASE `]'
     結果として，NAME`.dll'という名前になります．

`EXPORTS ( ( (' NAME1 `[ = ' NAME2 `] ) | ( ' NAME1 `=' MODULE-NAME `.' EXTERNAL-NAME `) )'

`[' INTEGER `] [ NONAME ] [ CONSTANT ] [ DATA ] [ PRIVATE ] ) *'
     NAME1をDLLのエクスポートシンボルとして序数INTEGERを追加して
     宣言し，また，DLL MODULE-NAMEの関数EXTERNAL-NAMEの(前出の)
     別名としてNAME1を宣言します．

`IMPORTS ( (' INTERNAL-NAME `=' MODULE-NAME `.' INTEGER `) | [' INTERNAL-NAME `= ]' MODULE-NAME `.' EXTERNAL-NAME `) ) *'
     序数がINTEGERのEXTERNAL-NAMEやエクスポートした関数が，ファ
     イルMODULE-NAMEからインポートされるものとして宣言します．
     INTERNAL-NAMEが指定されている場合，これは，DLLの本体にある，イン
     ポートされる関数が参照する名前になります．

`DESCRIPTION' STRING
     STRINGを出力される`.exp'ファイルの`.rdata'セクションに
     書き込みます．

`STACKSIZE' NUMBER-RESERVE `[, ' NUMBER-COMMIT `]'

`HEAPSIZE' NUMBER-RESERVE `[, ' NUMBER-COMMIT `]'
     `--stack'や`--heap'のNUMBER-RESERVEと
     NUMBER-COMMITを，出力の`.drectve'セクションに生成します．リ
     ンカはこれを見て，それに作用します．

`CODE' ATTR `+'

`DATA' ATTR `+'

`SECTIONS (' SECTION-NAME ATTR` + ) *'
     `--attr' SECTION-NAME ATTRを出力の`.drectve'セク
     ションに生成し，そこでのATTRは`READ'，`WRITE'，
     `EXECUTE'，または`SHARED'のいずれかになります．リンカはこれを
     見て，それに作用します．



File: binutils-ja.info,  Node: readelf,  Next: size,  Prev: ranlib,  Up: Top

14 readelf
**********

     readelf [`-a'|`--all']
             [`-h'|`--file-header']
             [`-l'|`--program-headers'|`--segments']
             [`-S'|`--section-headers'|`--sections']
             [`-g'|`--section-groups']
             [`-e'|`--headers']
             [`-s'|`--syms'|`--symbols']
             [`-n'|`--notes']
             [`-r'|`--relocs']
             [`-u'|`--unwind']
             [`-d'|`--dynamic']
             [`-V'|`--version-info']
             [`-A'|`--arch-specific']
             [`-D'|`--use-dynamic']
             [`-x' <number>|`--hex-dump='<number>]
             [`-w[liaprmfFsoR]'|
              `--debug-dump'[=line,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges]]
             [`-I'|`-histogram']
             [`-v'|`--version']
             [`-W'|`--wide']
             [`-H'|`--help']
             ELFFILE...

   `readelf'は，一つ以上のELFフォーマットのオブジェクトファイルの
情報を表示します．オプションで表示する特定の情報を制御します．

   ELFFILE...は調査するオブジェクトファイルです．32ビットと64ビッ
トELFファイルがサポートされていて，ELFファイルを含むアーカイブもサポー
トされています．

   このプログラムは，`objdump'の機能に似ていますが，より詳細に処理
し，BFDとは独立して存在しているので，BFDにバグがあった場合で
も`readelf'には影響がありません．

ここで交互に表示されている，オプションの長い形式と短い形式は等価です．
`-v'または`-H'の他に，少なくとも一つのオプションを与える
必要があります．

`-a'
`--all'
     `--file-header'，`--program-headers'，
     `--sections'，`--symbols'，`--relocs'，
     `--dynamic'，`--notes'，そして`--version-info'を指
     定することと等価です．

`-h'
`--file-header'
     ファイルの最初のELFヘッダ内に含まれる情報を表示します．

`-l'
`--program-headers'
`--segments'
     ファイルのセグメントヘッダ内に含まれる情報を，存在する場合は表示します．

`-S'
`--sections'
`--section-headers'
     ファイルのセクションヘッダ内に含まれる情報を，存在する場合は表示します．

`-g'
`--section-groups'
     ファイルのセクショングループに含まれている情報を，存在する場合は表示し
     ます．

`-s'
`--symbols'
`--syms'
     ファイルのシンボルテーブルセクション内のエントリーを，存在する場合は表
     示します．

`-e'
`--headers'
     ファイルのすべてのヘッダを表示します．`-h -l -S'と等価です．

`-n'
`--notes'
     NOTEセグメントとセクションの内容を，存在する場合は表示します．

`-r'
`--relocs'
     ファイルの再配置のセクションの内容を，存在する場合は表示します．

`-u'
`--unwind'
     ファイルのunwindセクションの内容が存在する場合は表示します．IA64
     ELFファ イルのunwindセクションのみ，現在はサポートされています．

`-d'
`--dynamic'
     ファイルの動的セクションの内容を，存在する場合は表示します．

`-V'
`--version-info'
     ファイルのバージョンセクションの内容を，存在する場合は表示します．

`-A'
`--arch-specific'
     ファイル内のアーキテクチャ固有の情報を，存在する場合は表示します．

`-D'
`--use-dynamic'
     シンボルを表示しているとき，`readelf'はこのオプションで，ファイ
     ルのシンボルセクションではなく，動的セクションのシンボルテーブルを使用
     します．

`-x <number>'
`--hex-dump=<number>'
     16進のダンプとして示されているセクションの内容を表示します．

`-w[liaprmfFsoR]'
`--debug-dump[=line,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges]'
     ファイルのデバッグセクションの内容を，存在する場合は表示します．オプショ
     ン文字や単語の一つがスイッチに続く場合，これらで指定されたセクションで
     見つかるデータのみダンプされます．

`-I'
`--histogram'
     シンボルテーブルの内容を表示するとき，バケットリスト長のヒストグラムを
     表示します．

`-v'
`--version'
     `readelf'のバージョンナンバーを表示します．

`-W'
`--wide'
     出力行を80列に揃えて改行しません．`readelf'はデフォルトで，64
     ビットのELFファイルに対し，セクションヘッダとセグメントを80列に揃うよう
     に改行します．このオプションで，`readelf'はそれぞれのセクション
     ヘッダを各々のセグメントを単一の行出力し，80列以上の幅の端末でより読み
     やすくなります．

`-H'
`--help'
     `readelf'が理解するコマンドラインオプションを表示します．



File: binutils-ja.info,  Node: Selecting The Target System,  Next: Reporting Bugs,  Prev: dlltool,  Up: Top

15 ターゲットシステムの選択
***************************

ターゲットシステムの二つの側面を，GNUバイナリファイルユーティリティ
に，それぞれ異なる方法で指定することが可能です．

   * ターゲット

   * アーキテクチャ

以下の概要では，変数を指定する方法のリストは，優先順位が下がる順序となっ
ています．方法は，最初のものがそれ以降のものに優先するようにリストアッ
プされています．

有効な値をリストアップするコマンドは，実行しているプログラムに設定され
ている値のみリストアップします．それらが`--enable-targets=all'
で設定されている場合，ほとんどの利用可能なコマンドはリストアップされま
すが，いくつかはそうなりません．ターゲットには"native"(ターゲットシ
ステムと同じ形式のホスト)に設定することしかできないものもあるので，すべ
てのものが一度に設定可能なわけではありません．

* Menu:

* Target Selection::
* Architecture Selection::


File: binutils-ja.info,  Node: Target Selection,  Next: Architecture Selection,  Up: Selecting The Target System

15.1 ターゲットの選択
=====================

"ターゲット(target)"とはオブジェクトファイルのフォーマットです．与
えられたターゲットは，複数のアーキテクチャでサポートされるかもしれませ
ん(*note Architecture Selection::)．ターゲットの選択は，オペレーティン
グシステムやアーキテクチャによっても，変化があるかもしれません．

   有効なターゲットの値をリストアップするコマンドは，`objdump -i'です
(出力の最初の列は，関連した情報を含みます)．

   サンプルの値として，例えば次ものがあります．`a.out-hp300bsd'，
`ecoff-littlemips'，`a.out-sunos-big'．

三項目の設定を使用してターゲットを指定することも可能です．これは，ター
ゲットを指定するために`configure'に渡す名前と同種です．三項目の設
定を引数として使用するとき，それを完全に標準のものにする必要があります．
ソースに含まれるシェルスクリプト`config.sub'を実行することで，三項
目の標準的なバージョンを知ることが可能です．

   サンプルの値は以下のとおりです．`m68k-hp-bsd'，
`mips-dec-ultrix'，`sparc-sun-sunos'．

`objdump'のターゲット
---------------------

指定方法：

  1. コマンドラインオプション：`-b'または`--target'

  2. 環境変数`GNUTARGET'

  3. 入力ファイルから推測

`objcopy'と`strip'の入力ターゲット
----------------------------------

指定方法：

  1. コマンドラインオプション：`-I'または`--input-target'，も
     しくは，`-F'または`--target'

  2. 環境変数`GNUTARGET'

  3. 入力ファイルから推測

`objcopy'と`strip'の出力ターゲット
----------------------------------

指定方法：

  1. コマンドラインオプション：`-O'または`--output-target'，も
     しくは，`-F'または`--target'

  2. 入力ターゲット(上記の"`objcopy'と`strip'の入力ターゲッ
     ト"を参照してください)

  3. 環境変数`GNUTARGET'

  4. 入力ファイルから推測

`nm'，`size'，そして`strings'のターゲット
-----------------------------------------

指定方法：

  1. コマンドラインオプション：`--target'

  2. 環境変数`GNUTARGET'

  3. 入力ファイルから推測


File: binutils-ja.info,  Node: Architecture Selection,  Prev: Target Selection,  Up: Selecting The Target System

15.2 アーキテクチャの選択
=========================

"アーキテクチャ(architecture)"は，オブジェクトファイルを実行する
CPUの型式です．その名前にはコロンを含めてもかまわず，それは特定の
CPUとプロセッサファミリーの名前を分けます．

   有効なアーキテクチャの値をリストアップするコマンドは，`objdump -i'
です(二番目のコロンは，関連する情報を含みます)．

   サンプルの値です．`m68k:68020'，`mips:3000'，`sparc'．

`objdump'のアーキテクチャ
-------------------------

指定方法：

  1. コマンドラインオプション：`-m'または`--architecture'

  2. 入力ファイルから推測

`objcopy'，`nm'，`size'，`strings'のアーキテクチャ
--------------------------------------------------

指定方法：

  1. 入力ファイルから推測


File: binutils-ja.info,  Node: Reporting Bugs,  Next: GNU Free Documentation License,  Prev: Selecting The Target System,  Up: Top

16 バグの報告
*************

バグの報告は，バイナリユーティリティを確実にする上で重要な役割を果たし
ます．

バグを報告することで，問題の解決をもたらすかもしれませんが，そうでない
かもしれません．しかし，いずれにせよ，バグの報告の主な機能は，バイナリ
ユーティリティの次のバージョンの仕事をより良くすることで，全てのコミュ
ニティに役立つことです．バグの報告は，管理者に対する貢献になります．

バグの報告を目的に役立つようにするため，バグの修正が可能となるような情
報を含める必要があります．

* Menu:

* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs


File: binutils-ja.info,  Node: Bug Criteria,  Next: Bug Reporting,  Up: Reporting Bugs

16.1 バグを見つけましたか？
===========================

バグを見つけたかどうか確実でない場合，ここに指針がいくつかあります．

   *
     バイナリユーティリティが，入力によらず，致命的なシグナルを得た場合，そ
     れはバグです．信頼できるユーティリティは決して壊れません．

   *
     バイナリユーティリティが有効な入力に対しエラーメッセージを生成した場合，
     それはバグです．

   *
     バイナリユーティリティの経験豊かなユーザの場合，改良のための提案はいつ
     でも歓迎します．


File: binutils-ja.info,  Node: Bug Reporting,  Prev: Bug Criteria,  Up: Reporting Bugs

16.2 バグの報告の方法
=====================

多くの企業と個人が，GNU製品に対してサポートを提供しています．サポー
ト組織からバイナリユーティリティを得ている場合，われわれは，その組織に
最初に連絡するように勧めます．

   GNU Emacs配布物のファイル`etc/SERVICE'で，サポートしている多
くの会社と個人へ連絡する情報を見つけることが可能です．

   いずれにせよ，我々は，バイナリユーティリティに対するバグの報告を
`bug-binutils@gnu.org'にも送ることを勧めます．

   バグの報告の有効な基本原理は以下のとおりです．*すべての事実を報
告する*．事実を述べるべきか削除すべきかよく分からない場合，それを述べて
ください！

人々はよく，問題を発生させるものを知っていて，重要でない詳細もあると思
うため，事実を省略します．このため，使用したファイル名は重要でないと考
えたとします．さて，おそらくそうでしょうが，確実ではありません．おそら
くバグは，パス名がメモリに保存されている場所から取り出すために生じる，
偶然のメモリ参照です．おそらく，パス名が異なっている場合，その場所の内
容は，バグにもかかわらず正しいことを行うユーティリティを馬鹿にするでしょ
う．安全に動作するようにし，特定の完全な例を与えてください．それは，最
も簡単に行うことができ，最も役に立ちます．

バグの報告の目的が，新しいものの場合は，バグの修正を可能にすることだと
いうことを覚えておいてください．そのため，以前にバグが報告されていない
ことを常に前提にして，バグの報告を書いてください．

   ときどき，概略だけのわずかな事実を与え，"これは報告すべきですか？
(Does this ring a bell?)"と尋ねる人がいます．これでは，我々のバグの修
正の助けにならないので，基本的には役に立ちません．我々は，調査すること
が可能になるように十分に詳細な内容を尋ねる返事を出します．またまた最初
から，問題を早急に送るはめになるでしょう．

   バグの修正を可能とするため，以下のすべてのものを含めるべきです．

   * ユーティリティのバージョン．それぞれのバージョンは，`--version'
     引数を用いて開始した場合，それを報告します．

     これがなければ，我々はバイナリユーティリティの現在のバージョンにバグを
     探す場所があるかどうか分かりません．

   * `BFD'ライブラリを作るために与えたパッチを含む，ソースに適用したあ
     らゆるパッチ．

   *
     使用しているマシンの形式と，オペレーティングシステム名とバージョンナン
     バー．

   * ユーティリティをコンパイルするとき使用したコンパイラ(とバージョン)
     -- 例えば，"`gcc-2.7'"．

   *
     バグを観測するためにユーティリティに与えたコマンド引数．重要なものを省
     略しないことを保証するため，すべてをリストアップしてください．
     Makefile(またはmakeの出力)のコピーで十分です．

     我々が引数を推測しようとした場合，おそらく間違ったものを推測し，バグに
     遭遇しない可能性があります．

   *
     完全な入力ファイルまたは入力ファイルの組で，実際のオブジェクトファイル
     を送ることは，最も役に立ち，バグがあればuuencodeしてください．ユーティ
     リティがオブジェクトファイルやファイルを読み込んでいる場合，それをメー
     ルシステムに通過させる場合必要です．`bug-binutils@gnu.org'はメー
     リングリストなので，非常に大きなファイルをそこに送ることは避けるよう注
     意してください．ファイルをanonymous FTPで利用可能にするとOKです．

     ソースファイルがGNUプログラム(例えば，`gcc'，
     `gas'，そして/または，GNU `ld')を使用して生成され
     たことが明らかな場合，オブジェクトファイルよりソースファイルを送ること
     でOKです．この場合，`gcc'や，それらオブジェクトファイルを生成す
     るために使用したあらゆるもののバージョンを正確に確実に伝えてください．
     `gcc'や，それらあらゆるもののコンフィグレーションの方法も伝えて
     ください．

   *
     適当でないと確信することになった動作の記述．例えば，"致命的なシグナル
     を得た"．

     もちろん，バグはユーティリティが致命的なシグナルを得た場合，我々はきっ
     とそこに注目します．しかし，バグが不適切な出力の場合，我々は，明らかに
     間違っていない限り注目しないかもしれません．我々が間違う機会を与えない
     方がよいでしょう．

     遭遇した問題が致命的なシグナルの場合でさえ，それを明確に伝えるべきです．
     ユーティリティのコピーが同期化されていない，または，システムのCライブラ
     リのバグに遭遇したといった，おそらく何か変なことが生じています．(それは
     発生したのです！)
     コピーは壊れていて，我々のはそうでないかもしれません．
     壊れることを期待していると我々に告げ，我々が壊すことに失敗した場合，我々
     にバグは発生しないことを知るでしょう．壊れることを期待していると我々に
     告げない場合，我々は自分達の観測から全く結論が得られないでしょう．

   * ソースの変更を提案したい場合，`-u'，`-c'，または
     `-p'オプションを用いた`diff'で生成したような，コンテクス
     トのdiffを我々に送ってください．古いファイルから新しいファイルへのdiff
     を，常に送ってください．`ld'のソースについて何か議論したい場合，
     行番号ではなくコンテクストで参照してください．

     我々の開発ソース内の行番号は，あなた方のソースと一致しないでしょう．行
     番号は我々に全く情報をもたらしません．

   不要なものは以下のものです．

   * バグの回りの説明．

     バグに遭遇した人は，バグを無くす入力ファイルへの変更と，効果がない変更
     を調査するのに多くの時間を費やすことが多いです．

     我々がバグを見つける方法は，単純な例をブレークポイントを用いたデバッガ
     で実行することで，それは一連の例から推測することではないので，これは役
     に立たないことが多いです．我々は，他のことをすることを勧めます．

     もちろん，報告するためのオリジナルの例_ではなく_，それより簡単な例
     が見つかった場合，それはとても役立ちます．出力ファイルのエラーは，見つ
     けるのがより簡単，デバッガの実行に余り時間がかからない，等々です．

     しかし，簡略化は重要ではありません．こうしたくない場合，いい加減にバグ
     を報告し，使用したテストケースを全て我々に送ってください．

   * バグに対するパッチ．

     バグに対するパッチは，それが良いものであれば我々は助かります．しかし，
     テストケースのような，我々全員がパッチを必要だと推測するのに必要な情報
     を省略しないでください．我々は，パッチに関する問題が分かり，別の方法で
     問題を修正することに決めるかもしれませんし，全く理解できないかもしれま
     せん．

     バイナリユーティリティと同じくらい複雑なプログラムを用いた場合，コード
     を通じて，プログラムに特定の手順をたどらせる例を構成することは，とても
     難しいことです．例を我々に送らない場合，我々はそれを構成することができ
     ないので，我々はバグが修正されたかどうか検証することができません．

     そして，あなたが修正しようとしたバグや，パッチの改良点を我々が理解でき
     ない場合や，我々はそれをインストールしないでしょう．テストケースは我々
     の理解を助けます．

   * バグやそれが依存するものに関する推測．

     そのような推測は，通常正しくありません．事実を見つけるために最初にデバッ
     ガを使用しなければ，我々でも正しく推測できません．


File: binutils-ja.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Reporting Bugs,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                        Version 1.1, March 2000

     Copyright (C) 2000, 2003  Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.


  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.


  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you."

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque."

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

     A. Use in the Title Page (and on the covers, if any) a title
     distinct    from that of the Document, and from those of previous
     versions    (which should, if there were any, be listed in the
     History section    of the Document).  You may use the same title
     as a previous version    if the original publisher of that version
     gives permission.
     B. List on the Title Page, as authors, one or more persons or
     entities    responsible for authorship of the modifications in the
     Modified    Version, together with at least five of the principal
     authors of the    Document (all of its principal authors, if it
     has less than five).
     C. State on the Title page the name of the publisher of the
     Modified Version, as the publisher.
     D. Preserve all the copyright notices of the Document.
     E. Add an appropriate copyright notice for your modifications
     adjacent to the other copyright notices.
     F. Include, immediately after the copyright notices, a license
     notice    giving the public permission to use the Modified Version
     under the    terms of this License, in the form shown in the
     Addendum below.
     G. Preserve in that license notice the full lists of Invariant
     Sections    and required Cover Texts given in the Document's
     license notice.
     H. Include an unaltered copy of this License.
     I. Preserve the section entitled "History", and its title, and add
     to    it an item stating at least the title, year, new authors, and
       publisher of the Modified Version as given on the Title Page.
     If    there is no section entitled "History" in the Document,
     create one    stating the title, year, authors, and publisher of
     the Document as    given on its Title Page, then add an item
     describing the Modified    Version as stated in the previous
     sentence.
     J. Preserve the network location, if any, given in the Document for
       public access to a Transparent copy of the Document, and
     likewise    the network locations given in the Document for
     previous versions    it was based on.  These may be placed in the
     "History" section.     You may omit a network location for a work
     that was published at    least four years before the Document
     itself, or if the original    publisher of the version it refers
     to gives permission.
     K. In any section entitled "Acknowledgements" or "Dedications",
     preserve the section's title, and preserve in the section all the
      substance and tone of each of the contributor acknowledgements
     and/or dedications given therein.
     L. Preserve all the Invariant Sections of the Document,
     unaltered in their text and in their titles.  Section numbers
     or the equivalent are not considered part of the section titles.
     M. Delete any section entitled "Endorsements."  Such a section
     may not be included in the Modified Version.
     N. Do not retitle any existing section as "Endorsements"    or to
     conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties-for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition
     of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgements", and any sections entitled "Dedications."  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     http://www.gnu.org/copyleft/.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

     Copyright (C)  YEAR  YOUR NAME.
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1
     or any later version published by the Free Software Foundation;
     with the Invariant Sections being LIST THEIR TITLES, with the
     Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
     A copy of the license is included in the section entitled "GNU
     Free Documentation License."

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: binutils-ja.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

索引
****

 [index ]
* Menu:

* .stab:                                 objdump.             (line 307)
* addr2line:                             addr2line.           (line   6)
* address to file name and line number:  addr2line.           (line   6)
* all header information, object file:   objdump.             (line 349)
* ar:                                    ar.                  (line   6)
* ar compatibility:                      ar.                  (line  40)
* architecture:                          objdump.             (line 172)
* architectures available:               objdump.             (line 157)
* archive contents:                      ranlib.              (line   6)
* archive headers:                       objdump.             (line  58)
* archives:                              ar.                  (line   6)
* base files:                            dlltool.             (line 110)
* bug criteria:                          Bug Criteria.        (line   6)
* bug reports:                           Bug Reporting.       (line   6)
* bugs:                                  Reporting Bugs.      (line   6)
* bugs, reporting:                       Bug Reporting.       (line   6)
* c++filt:                               c++filt.             (line   6)
* changing object addresses:             objcopy.             (line 264)
* changing section address:              objcopy.             (line 274)
* changing section LMA:                  objcopy.             (line 282)
* changing section VMA:                  objcopy.             (line 294)
* changing start address:                objcopy.             (line 258)
* collections of files:                  ar.                  (line   6)
* compatibility, ar:                     ar.                  (line  40)
* contents of archive:                   ar cmdline.          (line  89)
* crash:                                 Bug Criteria.        (line   8)
* creating archives:                     ar cmdline.          (line 126)
* cxxfilt:                               c++filt.             (line  13)
* dates in archive:                      ar cmdline.          (line 152)
* debug symbols:                         objdump.             (line 307)
* debugging symbols:                     nm.                  (line 114)
* deleting from archive:                 ar cmdline.          (line  25)
* demangling C++ symbols:                c++filt.             (line   6)
* demangling in nm:                      nm.                  (line 122)
* demangling in objdump <1>:             objdump.             (line  86)
* demangling in objdump:                 addr2line.           (line  49)
* disassembling object code:             objdump.             (line 106)
* disassembly architecture:              objdump.             (line 172)
* disassembly endianness:                objdump.             (line 122)
* disassembly, with source:              objdump.             (line 293)
* discarding symbols:                    strip.               (line   6)
* DLL:                                   dlltool.             (line   6)
* dlltool:                               dlltool.             (line   6)
* dynamic relocation entries, in object file: objdump.        (line 283)
* dynamic symbol table entries, printing: objdump.            (line 334)
* dynamic symbols:                       nm.                  (line 134)
* ELF dynamic section information:       readelf.             (line  95)
* ELF file header information:           readelf.             (line  53)
* ELF file information:                  readelf.             (line   6)
* ELF notes:                             readelf.             (line  82)
* ELF object file format:                objdump.             (line 307)
* ELF program header information:        readelf.             (line  58)
* ELF reloc information:                 readelf.             (line  86)
* ELF section group information:         readelf.             (line  67)
* ELF section information:               readelf.             (line  63)
* ELF segment information:               readelf.             (line  58)
* ELF symbol table information:          readelf.             (line  73)
* ELF version sections informations:     readelf.             (line  99)
* endianness:                            objdump.             (line 122)
* error on valid input:                  Bug Criteria.        (line  12)
* external symbols:                      nm.                  (line 145)
* extract from archive:                  ar cmdline.          (line 104)
* fatal signal:                          Bug Criteria.        (line   8)
* file name:                             nm.                  (line 108)
* header information, all:               objdump.             (line 349)
* input .def file:                       dlltool.             (line 106)
* input file name:                       nm.                  (line 108)
* libraries:                             ar.                  (line  24)
* listings strings:                      strings.             (line   6)
* machine instructions:                  objdump.             (line 106)
* moving in archive:                     ar cmdline.          (line  33)
* MRI compatibility, ar:                 ar scripts.          (line   8)
* name duplication in archive:           ar cmdline.          (line  98)
* name length:                           ar.                  (line  17)
* nm:                                    nm.                  (line   6)
* nm compatibility:                      nm.                  (line 118)
* nm format:                             nm.                  (line 118)
* not writing archive index:             ar cmdline.          (line 171)
* objdump:                               objdump.             (line   6)
* object code format <1>:                addr2line.           (line  44)
* object code format <2>:                nm.                  (line 206)
* object code format <3>:                size.                (line  79)
* object code format <4>:                objdump.             (line  72)
* object code format:                    strings.             (line  66)
* object file header:                    objdump.             (line 128)
* object file information:               objdump.             (line   6)
* object file sections:                  objdump.             (line 288)
* object formats available:              objdump.             (line 157)
* operations on archive:                 ar cmdline.          (line  21)
* printing from archive:                 ar cmdline.          (line  45)
* printing strings:                      strings.             (line   6)
* quick append to archive:               ar cmdline.          (line  53)
* radix for section sizes:               size.                (line  64)
* ranlib:                                ranlib.              (line   6)
* readelf:                               readelf.             (line   6)
* relative placement in archive:         ar cmdline.          (line 116)
* relocation entries, in object file:    objdump.             (line 278)
* removing symbols:                      strip.               (line   6)
* repeated names in archive:             ar cmdline.          (line  98)
* replacement in archive:                ar cmdline.          (line  71)
* reporting bugs:                        Reporting Bugs.      (line   6)
* scripts, ar:                           ar scripts.          (line   8)
* section addresses in objdump:          objdump.             (line  64)
* section headers:                       objdump.             (line 138)
* section information:                   objdump.             (line 162)
* section sizes:                         size.                (line   6)
* sections, full contents:               objdump.             (line 288)
* size:                                  size.                (line   6)
* size display format:                   size.                (line  27)
* size number format:                    size.                (line  64)
* sorting symbols:                       nm.                  (line 163)
* source code context:                   objdump.             (line 131)
* source disassembly:                    objdump.             (line 293)
* source file name:                      nm.                  (line 108)
* source filenames for object files:     objdump.             (line 166)
* stab:                                  objdump.             (line 307)
* start-address:                         objdump.             (line 320)
* stop-address:                          objdump.             (line 324)
* strings:                               strings.             (line   6)
* strings, printing:                     strings.             (line   6)
* strip:                                 strip.               (line   6)
* symbol index <1>:                      ranlib.              (line   6)
* symbol index:                          ar.                  (line  28)
* symbol index, listing:                 nm.                  (line 177)
* symbol line numbers:                   nm.                  (line 149)
* symbol table entries, printing:        objdump.             (line 329)
* symbols:                               nm.                  (line   6)
* symbols, discarding:                   strip.               (line   6)
* undefined symbols:                     nm.                  (line 211)
* Unix compatibility, ar:                ar cmdline.          (line   8)
* unwind information:                    readelf.             (line  90)
* updating an archive:                   ar cmdline.          (line 178)
* version:                               Top.                 (line   6)
* VMA in objdump:                        objdump.             (line  64)
* wide output, printing:                 objdump.             (line 355)
* writing archive index:                 ar cmdline.          (line 165)



Tag Table:
Node: Top1866
Node: ar3333
Node: ar cmdline5552
Node: ar scripts13474
Node: nm19024
Node: objcopy27242
Node: objdump50090
Node: ranlib64471
Node: size65267
Node: strings68227
Node: strip70678
Node: c++filt75933
Ref: c++filt-Footnote-179248
Node: addr2line79361
Node: nlmconv81786
Node: windres84506
Node: dlltool90196
Node: def file format100592
Node: readelf102293
Node: Selecting The Target System106466
Node: Target Selection107403
Node: Architecture Selection109388
Node: Reporting Bugs110205
Node: Bug Criteria110944
Node: Bug Reporting111517
Node: GNU Free Documentation License118149
Node: Index137879

End Tag Table
