Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: Oort Gnus, Next: No Gnus, Prev: Pterodactyl Gnus, Up: New Features

Oort Gnus
.........

Gnus 5.10 の新しい機能:

   * 領域が活性化されている場合に、`F' キー
     (`gnus-article-followup-with-original') および `R' キー
     (`gnus-article-reply-with-original') は、その領域にあるテキストだ
     けを yank します。

   * `gnus-group-read-ephemeral-group' を `G M' キーで対話的に呼ぶこと
     ができます。

   * ドラフト・グループで `e' キーが `gnus-draft-edit-message' コマンド
     に割り当てられました。`gnus-summary-edit-article' コマンドには、代
     わりに `B w' キーを使って下さい。

   * 改定された Gnus FAQ がマニュアルに含まれています。
     *Note Frequently Asked Questions::.

   * Oort を使ったことがある場合の、以前の (安定な) 版からのグレードアッ
     プ。

     Oort (このリリースに先立つ安定ではない Gnus の枝) を使ってみたもの
     の、安定版に戻してしまったならば、この版にグレードアップするときに
     注意して下さい。特に、おそらくすべての `.marks' (nnml) と `.mrk'
     (nnfolder) ファイルを消去する必要があるでしょう。その目的は、この
     版 (の Gnus) がフラグを格納する `.marks'/`.mrk' ファイルではなくて
     `.newsrc.eld' からフラグが読まれるようにするためです (訳注: 言い換
     えると、古い様式の `.marks'/`.mrk' ファイルを新しい Gnus が読んで
     はいけないということです。それらは新たに作成されます)。後述の項目
     で、印 (marks) に関するより多くの情報を読んで下さい。グレードを下
     げても一般には助けにならないことに注意して下さい。

   * 記事のボタン。

     URL、メールアドレス、Message-ID、Info へのリンク、man ページと Emacs ま
     たは Gnus に関連した参考文献のための、より多くのボタンが追加されました。
     *Note Article Buttons::. すべての記事のボタンの見栄えを制御するため
     に `gnus-button-*-level' 変数を使うことができます。
     *Note Article Button Levels::.

   * Dired の統合。

     `gnus-dired-minor-mode' (*Note Other modes:: 参照) は dired のバッ
     ファーで、添付ファイルを送信する、mailcap の適切な項目を使ってファ
     イルを開く、それに mailcap の項目を使ってファイルを印刷するための
     キーを割り当てます。

   * Gnus は RSS のニュース配送を、ニュースグループとして表示します。
     *Note RSS::.

   * 単一の yenc でエンコードされた添付パートをデコードすることができま
     す。

   * Picons

     Picon のコードが、GNU Emacs で動作させるために再実装されました。以
     前のいくつかのオプションが、削除または改名されています。

     Picon は、利用者、ドメイン、それにニュースグループを表現するための
     「個人的なアイコン (personal icons)」で、記事バッファーに表示する
     ことができます。*Note Picons::.

   * 新しいオプション `gnus-treat-body-boundary' を非-`nil' にすると、
     ヘッダーのおしまいに境界線が描かれます。

   * 憲章とコントロールメッセージの取得。

     二つの新しいコマンドで、ニュースグループの憲章を取り込む (`H c')
     ことと、コントロールメッセージを取得する (`H C') ことができます。

   * 遅延記事。

     Message バッファーにおける `C-c C-j' で、メッセージの送信を遅らせ
     ることができます。メッセージは指定された時刻に配送されます。これは
     あなた自信のための忘備録として役に立つでしょう。*Note Delayed
     Articles::.

   * `auto-compression-mode' が有効になっていると、添付ファイルを見ると
     きに自動で圧縮が解かれます。

   * 新しいオプション `nnml-use-compressed-files' を非-`nil' にすること
     によって、nnml が圧縮されたメッセージファイルを扱うことができるよ
     うになりました。

   * 署名された記事のヘッダー (X-PGP-Sig) を、`W p' で認証することがで
     きます。

   * 概略バッファーは fringe の中の矢印で現在の記事を示します。これを無
     効にするには `(setq gnus-summary-display-arrow nil)' を使って下さ
     い。

   * ニュースにメールで返信しようとしたら警告します。

     間違ってニュースにメールで返信しようとしてしまうことが、しょっちゅ
     うありませんか?  そんなあなたに新オプション
     `gnus-confirm-mail-reply-to-news'。

   * 新しいオプション `gnus-summary-display-while-building' を非-`nil'
     にすると、概略バッファーが作られていく様子が表示されます。

   * 新しい `recent' 印 `.' で、新規に届いたメッセージを (未読だけれど
     も古い記事とは区別して) 表示します。

   * 新しいオプション `gnus-gcc-mark-as-read' は、Gcc の記事に自動的に
     既読の印を付けます。

   * nndoc バックエンドは、mailman のまとめ送りと exim が弾いたメッセー
     ジをサポートするようになりました。

   * Gnus は RFC 2369 のメーリングリストのヘッダーをサポートします。ま
     た、メーリングリストのグループ用に数々のコマンドを用意しました。
     *Note Mailing List::.

   * 日付ヘッダーを、英語で発音できる形式で表示することができます。
     *Note Article Date::.

   * Sendmail を使うときのエンベロープ送信者 (envelope sender) のアドレ
     スが、カスタマイズできるようになりました。*Note メール変数:
     (message-ja)Mail Variables.

   * `mm-uu-diff-groups-regexp' に合致するグループでは、差分 (diffs) が
     自動的にハイライトされます。

   * TLS ラッパーが Gnus に同梱されました。

     TLS/SSL が、`tls.el' と GNUTLS を介して IMAP と NNTP でサポートさ
     れるようになりました。(サードパーティーの) `ssl.el' と OpenSSL に
     よる古い TLS/SSL は、まだ働きます。

   * MS ウィンドウズで Gnus をコンパイルしてインストールするための、新
     しい `make.bat'。

     MS ウィンドウズで Gnus をインストールするには `make.bat' を使って
     下さい。このバッチ・プログラムの第一引数はディレクトリーです。そこ
     で `xemacs.exe' と `emacs.exe' が順に捜し出されます。コンパイルし
     てから Gnus をインストールしたいときは、`make.bat' の第二引数に
     `/copy' を与えて下さい。

     `make.bat' はゼロから書き直されました。XEmacs と GNU Emacs を自動
     認識し、`gnus-load.el' を生成し、コンパイル中と info ファイルの生
     成中にエラーが起きたら構築処理の最後に報告します。`makeinfo' が利
     用可能であればそれを使い、さもなければ `infohack.el' に頼ります。
     今や `make.bat' は Gnus を動作させるために必要なすべてのファイルを
     インストールするはずで、大体において Unix システムにおける
     `configure; make; make install' サイクルの完全な置き換えになりまし
     た。

     新しい `make.bat' は `make-x.bat' を不要にしたので、それは削除され
     ました。

   * 非-ASCII ドメイン名のサポート。

     Message は From:, To: および Cc: にある非-ASCII ドメイン名をサポー
     トし、メッセージの送信をしようとしたときにエンコードするかどうかを
     尋ねます。`message-use-idna' 変数でこれを制御します。Gnus もまた、
     メッセージを見るときに From:, To: および Cc: にある非-ASCII ドメイ
     ン名をデコードします。これを制御するのは `gnus-use-idna' 変数です。

   * マイクロソフト引用様式のより良い取り扱い。

     いくつかのマイクロソフトのメイラーが、メッセージの残りの部分が引用
     であることを示すために使う台無しにされたヘッダーブロックを、たとえ
     それが引用符で囲まれていなくても、Gnus はとにかく認識しようとしま
     す。変数 `gnus-cite-unsightly-citation-regexp' は、それらの引用の
     先頭に合致します。

   * `gnus-article-skip-boring'

     `gnus-article-skip-boring' を `t' に設定すると、Gnus はうんざりす
     る文しか含んでいないページを見せるために、下方にスクロールしません。
     `gnus-article-boring-faces' を使って、何を読み飛ばしてしまっても良
     いかをカスタマイズすることができます。

     てっぺんに少しだけある新規な内容に、長くて刈り込まれていない引用が
     続いているたくさんの記事を読む場合に、これは特に役に立ちます。

   * ポイントの位置決めのための書法仕様 (format spec) である `%C' は、
     `%*' に変更されました。

   * 新しい変数 `gnus-parameters' を、グループパラメーターを設定するた
     めに使うことができます。

     これは初期には、パラメーターを `~/.newsrc.eld' に格納する `G p'
     (または `G c') でしか行なうことができませんでしたが、この変数によっ
     てカスタマイズの威力を堪能することができます。また、その変数は
     `~/.newsrc.eld' ではなくて `~/.gnus.el' で設定するので、バックアッ
     プが簡単になります。その変数は、グループ名に合致する正規表現を、以
     下のような流儀でグループパラメーターに割り当てます:
          (setq gnus-parameters
                '(("mail\\..*"
                   (gnus-show-threads nil)
                   (gnus-use-scoring nil))
                  ("^nnimap:\\(foo.bar\\)$"
                   (to-group . "\\1"))))

   * スマイリー (`:-)', `;-)' など) が Emacs でもアイコン化されるように
     なりました。

     これを働かないようにするには、`(setq gnus-treat-display-smileys
     nil)' を `~/.gnus.el' に置いて下さい。

   * Gnus は今では Sender: ヘッダーを自動では生成しません。

     初期のころ、それは利用者が設定できる email アドレスが、Gnus が想定
     した利用者のディフォルトのアドレスと違っていた場合に限って生成され
     ました。今日ではその想定アルゴリズムが正しいことはまれで、Sender:
     ヘッダーの唯一の (議論の的になる) 用途は、ニュースを
     cancel/supersede する資格があるかどうかを検査すること (これは代わ
     りに、他の章で述べられる Cancel Locks によって解決されました) なの
     で、そのヘッダーの生成はディフォルトで抑制されています。変数
     `message-required-headers'、`message-required-news-headers' および
     `message-required-mail-headers' を参照して下さい。

   * サードパーティーによる `message-utils.el' の機能が `message.el' に
     加えられました。

     Message は表題の行から `(was: <old subject>)' を削除するかどうかを
     尋ねるようになりました (`message-subject-trailing-was-query' 参照)。
     `C-c M-m' と `C-c M-f' は挿入されたテキストを示す印を挿入します。
     `C-c C-f a' は X-No-Archive: ヘッダーを付け加えます。`C-c C-f x'
     は、適切なヘッダーと、クロスポストとフォロー先についての注意書きを
     本文に挿入します (`message-cross-post-*' 変数群を見て下さい)。

   * 今や `message-generate-headers-first' が `nil' だったら、メッセー
     ジの作成を始めるときに References と X-Draft-From ヘッダーは生成さ
     れません。

   * 改良された spam 対抗機能。

     Gnus は非常に変化に富んだプログラムと濾過の規則を使って、メールや
     ニュースの奔流から spam を抜き取ってしまうことができるようになりま
     した。対応している方式は、RBL blocklists、bogofilter それにホワイ
     ト/ブラックリストです。また SpamAssassin や Hashcash のような外部
     パッケージを容易に使うための hook も新しくなりました。*Note
     Thwarting Email Spam::.

   * X-Faces ヘッダーの挿入が簡単になりました。

   * Face ヘッダーを扱えるようになりました。

   * 概略バッファーで、新しいコマンド `/ N' は新着メッセージを挿入し、
     `/ o' は古いメッセージを挿入します。

   * `W m' を押すと、Gnus はモールスでエンコードされたメッセージをデコー
     ドします。

   * nnimap のグループにおける未読の数が正確になりました。

     グループバッファーで表示される nnimap グループの未読記事の数の見積
     りが正確になったはずです。これは `gnus-setup-news-hook' (起動時に
     呼ばれる) と `gnus-after-getting-new-news-hook' (新しいメールを取
     得した直後に呼ばれる) から
     `nnimap-fixup-unread-after-getting-new-news' を呼ぶことによって成
     し遂げられます。これらの変数をディフォルトではない値に変えている場
     合は、重ねて `nnimap-fixup-unread-after-getting-new-news' を追加す
     る必要があるかもしれません。見積りに満足していて、新しいメールを取
     得するときにいくらかの (わずかな) 時間を節約したいのであれば、その
     関数を外して下さい。

   * グループカーボンコピー (GCC) を引用符で囲む。

     空白や他の変な文字を含むグループを扱えるようにするために、グループ
     は Gcc: header に置かれる前に引用符で囲まれます。これは、空白を含
     むグループが使えるようにするために、もはや
     `gnus-message-archive-group' のような変数に引用文字を含めるべきで
     はないことを意味します。さらに、文字列 `nnml:foo, nnml:bar' (二つ
     のグループに Gcc を格納することを示す) を使っているならば、
     `("nnml:foo" "nnml:bar")' というリストを返すように変更しなければな
     りません。さもないと、Gcc: 行は間違った囲まれ方をされてしまうでしょ
     う。初期のころに文字列 `nnml:foo, nnml:bar' を返すようにしたことが
     間違いだったことに着目して下さい。それは直接挿入されたので、まった
     く問題を生じませんでした。

   * `~/News/overview/' は不要。

     以下の変更の結果、もはや `~/News/overview/' ディレクトリーは要りま
     せん。すべての階層を安全に削除することができます。

   * `gnus-agent'

     Gnus エージェントは大規模な更新を経て、今やディフォルトで有効にな
     ります。そして `gnus-select-method' と
     `gnus-secondary-select-method' で指定されるすべての nntp と
     nnimap のサーバーが、ディフォルトでエージェント化されます。初期に
     おいては `gnus-select-method' のサーバーだけがディフォルトでエージェ
     ント化され、エージェントはディフォルトでは有効にされませんでした。
     エージェントが有効にされると、今では可能ならばバックエンドに代わっ
     てエージェントのキャッシュからヘッダーが取り寄せられます。初期には、
     これはオフライン (unplugged) の状態でのみ行なわれていました。サー
     バーバッファーで `J a' と `J r' を使うことによって、サーバーの登録
     と削除を行なうことができます。グループバッファーから `J u' か `J
     s' を使って命令しない限り、Gnus は記事をエージェントのキャッシュに
     ダウンロードしません。`(setq gnus-agent nil)' を設定することによっ
     て、エージェントが有効にされていなかった昔の振る舞いに戻すことがで
     きます。もはや `~/.gnus.el' に `(gnus-agentize)' を置いておく必要
     が無いことに注意して下さい。

   * `gnus-summary-line-format'

     ディフォルト値が `%U%R%z%I%(%[%4L: %-23,23f%]%) %s\n' に変わりまし
     た。さらに、受信者の名前か NNTP グループに投稿したグループ名で利用
     者名を置き換えるために、`gnus-extra-headers'、
     `nnmail-extra-headers' および `gnus-ignored-from-addresses' のデフォ
     ルト値が変わりました。

   * `deuglify.el' (`gnus-article-outlook-deuglify-article')

     いかれた Outlook (Express) の記事を醜くなくするための、Raymond Scholz
     <rscholz@zonix.de> によって新設されたファイルです。

   * `(require 'gnus-load)'

     単独で配布されている Gnus を使う場合には、
     `load-path' に Gnus の lisp ディレクトリーを追加してから、
     `~/.emacs' に `(require 'gnus-load)' を加えるのが良いです。

     `gnus-load.el' ファイルは、そのうちのいくつかは Emacsen の配布に入っ
     ていないかもしれない自動読み込み (autoload) コマンド、関数および変
     数を含んでいます。

   * `gnus-slave-unplugged'

     オフラインの Gnus をスレーブモードで起動する新しいコマンドです。

   * `message-insinuate-rmail'

     `(message-insinuate-rmail)' と `(setq mail-user-agent
     'gnus-user-agent)' を `~/.emacs' に加えることによって、
     `message-mode' でメッセージの作成、返信および転送を行なうように
     Rmail を説得することができます。そこでは MML の威力を堪能すること
     ができます。

   * `message-minibuffer-local-map'

     この下の行は、メッセージを再送するときに BBDB を使えるようにします:
          (define-key message-minibuffer-local-map [(tab)]
            'bbdb-complete-name)

   * 添付ファイルの切り離し (externalizing) と消去。

     `gnus-gcc-externalize-attachments' または
     `message-fcc-externalize-attachments' が非-`nil' になっていると、
     ローカルファイルを外部パートとして添付します。

     `gnus-mime-save-part-and-strip' コマンド (MIME ボタン上で `C-o' に
     割り当てられている) は、パートをセーブしてから外部のそれと置き換え
     ます。`gnus-mime-delete-part' (MIME ボタン上で `d' に割り当てられ
     ている) は、パートを削除します。これは編集をサポートしているバック
     エンドでだけ動作します。

   * `gnus-default-charset'

     デフォルト値は `iso-8859-1' に代わって
     `current-language-environment' 変数によって決定される値になります。
     また、`gnus-group-charset-alist' にあった `.*' の項目は削除されま
     した。

   * `gnus-posting-styles'

     このような合致の様式が加わりました。

          ((header "to" "larsi.*org")
           (Organization "Somewhere, Inc."))

     下記のような古い様式は時代遅れになりましたが、まだ受け入れられます。

          (header "to" "larsi.*org"
                  (Organization "Somewhere, Inc."))

   * `message-ignored-news-headers' と `message-ignored-mail-headers'

     `X-Draft-From' と `X-Gnus-Agent-Meta-Information' が、これら二つの
     変数に加えられています。それらをカスタマイズする場合に、もしかする
     とそれら二つのヘッダーも加える必要があります。

   * Gnus は plugged のときに、エージェントに NOV と記事を読み込みます。

     Plugged のときに記事を読む場合に、その記事がすでにエージェントにあ
     るならば、もう一度ダウンロードすることはありません。`(setq
     gnus-agent-cache nil)' は旧式の動作に戻します。

   * Gnus は“format=flowed”(RFC 2646) パラメーターをサポートします。
     メッセージを作成するときに、それは `use-hard-newlines' で活性化さ
     れます。format=flowed のデコードは以前からできましたが、初期の版で
     は説明の文書がありませんでした。

   * `mm-fill-flowed' オプションで“format=flowed”メッセージを流動テキ
     ストとして処理することをやめさせることができます。また、PGP 署名が
     埋め込まれたメッセージを送信するとき、流動テキストの処理は行なわれ
     ません。(Gnus 5.10.7 の新機能)

   * Gnus は RFC 2298 の開封確認要求の生成をサポートします。

     これはメッセージモードの `C-c M-n' キーで呼び出されます。

   * Gnus は Maildir グループをサポートします。

     Gnus は新バックエンドである `nnmaildir.el' を含んでいます。
     *Note Maildir::.

   * 印刷の性能が向上しました。

     Gnus はそれ自身が、概略と記事バッファーにおける `O P' で
     Muttprint をサポートします。さらに MIME ボタン上で `p' を使うこと
     によって、個々の MIME パートのそれぞれを印刷することができます。

   * Message は Importance: ヘッダー (RFC 2156) をサポートするようにな
     りました。

     メッセージバッファーで `C-c C-f C-i' か `C-c C-u' を使うと、可能な
     値が循環します。

   * Gnus はニュースの Cancel Locks をサポートします。

     投稿するニュース記事に `Cancel-Lock' ヘッダーが挿入されることです。
     これは、記事をあなたが書いたのかどうかを確かめるために使います (キャ
     ンセルと置き換えのとき)。最初に記事を投稿するときに、Gnus はランダ
     ムなパスワード文字列を生成し、カスタムの機構を使って `~/.emacs' に
     セーブします。その変数は `canlock-password' と呼ばれますが、機密を
     気にするデータではありません。ウェブ上で canlock を公開しても、以
     前から彼女にできなかった何かを、誰かができるようにするものではあり
     ません。`message-insert-canlock' をカスタマイズすることによって、
     振る舞いを変更するができます。

   * Gnus は Sieve を使ったサーバー側でのメールの濾過をサポートします。

     Sieve の規則はグループパラメーターとして加えることができ、グループ
     バッファーで `D g' を使うと完全な Sieve スクリプトが生成されます。
     そうしたら、生成された Sieve バッファーで `C-c C-l' を使って、サー
     バーにアップロードして下さい。*Note Sieve Commands::、それに新しい
     Sieve のマニュアル (*Note Top: (sieve-ja)Top.) を参照して下さい。

   * 拡張された書法仕様 (format specs)。

     書法仕様 `%&user-date;' が `gnus-summary-line-format-alist' に追加
     されました。それに、利用者定義による拡張されたフォーマットの仕様も
     サポートされています。拡張された書法仕様は `%u&foo;' のようなもの
     で、関数 `gnus-user-format-function-FOO' を起動します。`&' がエス
     ケープ文字に使われているので、古い利用者定義書法である `%u&' は今
     ではサポートされていません。

   * `/ *' (`gnus-summary-limit-include-cached') が書き直されました。

     これは `Y c' (`gnus-summary-insert-cached-articles') の別名でした
     (訳注: 以前は)。新しい関数は他の記事を濾過して除去します。

   * いくつかの制限命令は `C-u' 接頭引数で合致の否定を扱うことができま
     す。

     `C-u' を subject、author または extra ヘッダー、すなわち `/ s'、
     `/ a' および `/ x'
     (`gnus-summary-limit-to-{subject,author,extra}') で使うと、結果と
     してその表現に合致しないすべての記事が表示されます。

   * グループ名は、ディフォルトで UTF-8 であるものとして取り扱われます。

     これは USEFOR が移行しようとしていると想定されるものです。カスタマ
     イズするには `gnus-group-name-charset-group-alist' および
     `gnus-group-name-charset-method-alist' を参照して下さい。

   * nnml と nnfolder バックエンドは、グループ毎に印 (marks) を格納する
     ようになりました。

     これは nnml/nnfolder サーバー/グループ を `~/.newsrc.eld' と切り離
     して、しかし印は守りつつ、バックアップすることを可能にします。さら
     に、例えば研究室や職場などの組織内で、(`~/.newsrc.eld' ファイルを
     共有すること無しに) 利用者間で記事と印を共有することをも可能にしま
     す。これは、`~/.newsrc.eld' に格納される印を、グループ毎の
     `.marks' ファイル (nnml 用) と `GROUPNAME.mrk' ファイル
     (GROUPNAME の名前を持つ nnfolder 用) に格納することによって動作し
     ます。nnml/nnfolder を他のマシンに引っ越しても、Gnus は
     `~/.newsrc.eld' にある情報の代わりに、自動的に `.marks' か `.mrk'
     ファイルを使います。新しいサーバー変数である `nnml-marks-is-evil'
     と `nnfolder-marks-is-evil' が、この機能を抑制するために使うことが
     できます。

   * グループと概略バッファーのメニューバー項目の名前“Misc”は“Gnus”
     に改名されました。

   * Message mode で“MML”と名付けられたメニュー項目は“Attachments”
     に改名されました。このメニューは、署名と暗号化 (*Note セキュリ
     ティー: (message-ja)Security.) のような、セキュリティーに関連した
     ものも含んでいることに着目して下さい。

   * `gnus-group-charset-alist' と `gnus-group-ignored-charsets-alist'

     これらの変数に設定された正規表現は、完全な (full) グループ名と比較
     されます。Gnus 5.8 では実際の (real) グループ名が比較の対象でした。
     したがって、これらの変数をカスタマイズしている利用者は、正規表現を
     変更しなければなりません。例です:

          ("^han\\>" euc-kr) -> ("\\(^\\|:\\)han\\>" euc-kr)

   * Gnus は PGP (RFC 1991/2440)、PGP/MIME (RFC 2015/3156) および
     S/MIME (RFC 2630-2633) をサポートします。

     これには S/MIME と OpenPGP が実装されている必要があります。でも追
     加の Lisp ライブラリーは要りません。メッセージの作成時に、いくつか
     のメニューと `C-c RET' キーの割り当てが Attachments メニューに追加
     されます。これはまた、`gnus-article-hide-pgp-hook' を時代遅れにし
     ました。

   * Gnus は外部パート (message/external) をインライン表示します。

   * MML (Mime 作成) コマンドの接頭キーが、`M-m' から `C-c C-m' に変わ
     りました。

     この変更によって、標準キー割り当ての `back-to-indentation' との衝
     突が回避されました。このコマンドもまた、メッセージモードでは役に立
     つのです。

   * `message-forward-show-mml' のディフォルトが `best' というシンボル
     に変わりました。

     値 `best' の振る舞いは、それがふさわしい場合は MML を表示する (す
     なわち MIME に変換する) ことです。変換がディジタル署名を無効にして
     しまうので、署名された、または暗号化されたメッセージを転送するとき
     は MML は使われません。



File: gnus-ja.info, Node: No Gnus, Prev: Oort Gnus, Up: New Features

No Gnus
.......

No Gnus の新しい機能:

   * インストールに関する変更

        * No Gnus を使ったことがあるが、以前の (安定した) 版に戻してし
          まった人たちへの注意。

          No Gnus (このリリースにつながる不安定な Gnus の枝) を試してみ
          たものの、安定版に戻してしまっている場合、このバージョンへアッ
          プグレードするときには注意して下さい。特に、`~/News/marks' ディ
          レクトリーの内容を (もしかしたら注意深く選んで) 削除する必要
          があるでしょう。(訳注: 削除しないと、新しい No Gnus を初めて
          使ったときに、安定版を使っていなかった時期に更新されなかった
          marks ファイルが読み込まれて、`~/.newsrc.eld' ファイルの内容
          を上書きしてしまいます。) 削除することによって、このリリース
          で nntp のフラグを保存している marks ファイルからではなく
          `~/.newsrc.eld' からフラグを読むようになります (訳注: そして
          新しい marks ファイルが作られます)。nntp marks については、次
          の項目でさらに詳しい情報を得ることができます。一般にダウング
          レードすることは安全ではありません。

        * Lisp ファイルがディフォルトで `.../site-lisp/gnus/' にインス
          トールされるようになりました。以前は `.../site-lisp/' がディ
          フォルトでした。加えて、新しいインストーラーは他にインストー
          ルされている、新しい Gnus より優先される Gnus を検出して警告
          を発します。それらを手動で取り除いても良いし、`make
          remove-installed-shadows' を使って削除することもできます。

   * Gnus に含まれる新しいパッケージとライブラリー

        * Gnus は Emacs Lisp SASL ライブラリーを含むようになりました。

          これによって、Emacs の中から SASL の機構を利用するために、すっ
          きりした API を使うことができます。利用者の目に見える利点は、
          以前は無かった DIGEST-MD5 と NTLM がサポートされるようになっ
          たことです。*Note Emacs SASL: (sasl-ja)Top.

        * ManageSieve の接続に、ディフォルトで SASL ライブラリーを使う
          ようになりました。

          これによる主な変更点は、サーバーがサポートしている場合に
          DIGEST-MD5 と NTLM をサポートするようになったことです。

        * Gnus は password.el にパスワードをキャッシュする機構を含めました。

          パスワードキャッシュはディフォルトで有効です
          (`password-cache' を参照)。タイムアウトは 16秒と短いです
          (`password-cache-expiry' を参照)。PGG を PGP のバックエンドと
          して使う場合に、PGP のパスフレーズはこの機構で管理されます。
          ManageSieve 接続のパスワードは、利用者にそうするかどうかを尋
          ねてから、この機構が管理します。

   * 概略モードと記事モードの変更

        * 国際化ホスト名 (IDNA) を、`W i'
          (`gnus-summary-idna-message') を使うことによって、記事の本文
          中でデコードできるようになりました。この機能を使うには GNU
          Libidn (`http://www.gnu.org/software/libidn/') をインストール
          しておく必要があります。

        * Gnus は dns-mode を使って text/dns として送信された DNS マス
          ターファイルを表示します。

        * Gnus は概略バッファーで新しい制限コマンド `/ r'
          (`gnus-summary-limit-to-replied') と `/ R'
          (`gnus-summary-limit-to-recipient') をサポートします。
          *Note Limiting::.

        * Gnus は概略バッファーで新しい並べ替えコマンド `C-c C-s C-t'
          (`gnus-summary-sort-by-recipient') をサポートします。
          *Note Summary Sorting::.

        * S/MIME が LDAP の利用者証明書の検索に使えるようになりました。
          `smime-ldap-host-list' でサーバーを設定する必要があります。

        * OpenPGP ヘッダーにある URL をクリックすると、ヘッダーがダウン
          ロードされてあなたの PGP の鍵束に取り込まれます。

        * Picon はテキストの対象物の右側に表示できるようになりました。
          `gnus-picon-style' を見て下さい。*Note Picons::.

        * ANSI SGR 制御シーケンスを `W A' で変換することができます。

          中国語のニュース階層のグループにおいて、記事をハイライト表示
          するために ANSI シーケンスが使われます
          (`gnus-article-treat-ansi-sequences')。

        * Gnus は記事に“MIME-Version”ヘッダーがなくても記事を MIME デ
          コードします。このために `gnus-article-loose-mime' のディフォ
          ルト値が変更されました。

        * `gnus-decay-scores' をスコアファイルに合致する正規表現にでき
          ます。例えば `\\.ADAPT\\'' に設定すると、適応スコアファイルだ
          けが減衰されるようになります。*Note Score Decays::.

        * `gnus-ignored-from-addresses' を使う場合に、概略行におい
          て `To' と `Newsgroup' ヘッダーに相当する場所の最初に表示する
          文字列を、`gnus-summary-to-prefix' およ
          び `gnus-summary-newsgroup-prefix' でカスタマイズすることができます。
          *Note To From Newsgroups::.

        * MIME パートを外部にある本体で置き換えることができます。
          `gnus-mime-replace-part' と `gnus-article-replace-part' を見
          て下さい。*Note MIME Commands::, *Note Using MIME::.

        * `mm-fill-flowed' オプションで format=flowed なメッセージの取
          り扱いを無効にすることができます。また、PGP の署名が埋め込ま
          れたメッセージを送信するときに、flowed text は無効にされます。
          *Note 流動テキスト: (emacs-mime-ja)Flowed text.

   * Message モードの変更

        * Gnus は“hashcash”client puzzle anti-spam の機構をサポートします。
          `(setq message-generate-hashcash t)' で有効になります。
          *Note Hashcash::.

        * メッセージバッファに添付ファイルをドラッグ＆ドロップできます。
          `mml-dnd-protocol-alist' と `mml-dnd-attach-options' を見て下
          さい。*Note MIME: (message-ja)MIME.

        * `message-yank-empty-prefix' オプションで、引用文の空行にどん
          な引用符を付けるかを制御することができます。*Note 挿入するた
          めの変数: (message-ja)Insertion Variables.

        * Gnus はメッセージバッファーでヘッダーを隠すために、それら以外
          の部分だけが見えるようにバッファーを狭めます。`References' は
          ディフォルトで表示されません。すべてのヘッダーが見えるように
          するには `(setq message-hidden-headers nil)' として下さい。
          *Note メッセージヘッダー: (message-ja)Message Headers.

   * バックエンドの変更

        * nntp バックエンドは記事の印を `~/News/marks' に保管します

          そのディレクトリーは `nntp-marks-directory' という (カスタマ
          イズ可能な) 変数で変更することができます。また、nntp で印を使
          うことを `nntp-marks-is-evil' という変数 (バックエンド変数)
          で無効にすることができます。印を使うことの利点は、
          `~/News/marks' を別のホストにインストールされた Gnus にも
          (rsync, scp などを使って) コピーすることによって、どの記事を
          読んでどの記事に印を付けたかの情報を、そこでも維持できること
          です (訳注: 同じ nntp サーバーに接続する場合に限ります)。
          `~/News/marks' のデータは `~/.newsrc.eld' にある同じデータよ
          り優先されます。

        * RSS の購読情報を OPML のファイルから取り込み、または書き出す
          ことができるようになりました。*Note RSS::.

        * IMAP の identity (RFC 2971) をサポートします。

          ディフォルトでは Gnus はそれ自身に関する情報を送信しませんが、
          `nnimap-id' 変数を使ってそれをカスタマイズすることができます。

        * `nnrss' バックエンドは多言語テキストをサポートします。
          `nnrss' グループでは非-ASCII 文字列を使ったグループ名もサポー
          トされます。*Note RSS::.

        * POP3 によるメールの取得において、
          SSL/TLS と StartTLS をサポートするようになりました。

        * nnml バックエンドではメッセージを圧縮するために `gzip' 以外の
          プログラムも使うことができます。*Note Mail Spool::.

   * 外見

        * ツールバーが GNOME のアイコンを使うように更新されました。ツー
          ルバーをカスタマイズすることもできます。まだマニュアルで文書
          化されていませんが、`M-x customize-apropos RET -tool-bar$' で
          始めることができるはずです。(Emacs だけです。XEmacs は未対応。)

        * ツールバーのアイコンがグループバッファーで正しく活性化 (また
          は不活性化) されるようになりました。変数
          `gnus-group-update-tool-bar' を参照して下さい。そのディフォル
          ト値は Emacs の版に依存します。

        * Gnus のバッファーにおける XEmacs の toolbar の位置を変更でき
          るようになりました。`gnus-use-toolbar' と
          `message-use-toolbar' を見て下さい。

   * その他の変更

        * サーバーバッファーで外部グループのための select-method を変更
          すると、すぐにそのサーバーを使うグループの講読に反映されるよ
          うになりました。例えば `nntp-via-address' を
          `foo.example.com' から `bar.example.com' に変更すると、Gnus
          は次回から中間ホスト `bar.example.com' を経由してニュースサー
          バーに接続するようになります。

        * `W e' で `all.SCORE' ファイルをグループバッファーから編集する
          ことができます。




File: gnus-ja.info, Node: On Writing Manuals, Next: Terminology, Prev: The Manual, Up: Appendices

マニュアルを書く
================

おそらく、たいていのマニュアルは事後に書かれていると思います。つまり、
すでにあるプログラムを文書化しているということです。このマニュアルはそ
ういう方法で書かれていません。何かを実装するときは、何かをそのままマニュ
アルの一節に書きます。それから機能の説明が難しいことを発見して、それが
どのようにあるべきであるかを書き、次には実装を変更します。文書とコード
を書くことは協調して行なわれていきます。

もちろん、これはこのマニュアルには流れ構造がほとんど無いか、あっても少
しだということを意味します。Gnus の完全にすべてのことが説明されています
が、あなたが探している場所ではないということがよくあります。これはリファ
レンスマニュアルであって、Gnus を始めるための手引きではありません。

それはこのリファレンスマニュアルを元にして書かれた、まったく違った本に
なるでしょう。とても違ったものになるはずです。



File: gnus-ja.info, Node: Terminology, Next: Customization, Prev: On Writing Manuals, Up: Appendices

用語
====

"ニュース (news)"
     これは、あなたがそれを読むために使うことになっているもの、つまり、
     それというのがニュースです。ニュースは一般的には近くの NNTP サーバー
     から取得され、一般的にはすべての人が公に利用することができます。も
     しニュースを投稿すると、あなたがまさに書いたものを全世界の人たちが
     読むことになるでしょう。そして、みんながいたずらっぽくクスクス笑う
     でしょう。あなたの知らないところで。

"メール (mail)"
     あなたに個人的に配送されるすべてのものがメールです。いくつかのニュー
     ス/ メールリーダー (Gnus のような) はメールとニュースの区別を曖昧
     にしますが、違いがあります。メールは私的です。ニュースは公的です。
     メールを送信することは投稿ではなく、返信はフォローアップではありま
     せん。

"返信 (reply)"
     あなたが読んでいるものを書いた人にメールを送ることです。

"フォローアップ (follow up)"
     あなたが読んでいる記事に応答して、現在のニュースグループに記事を投
     稿することです。

"バックエンド (back end)"
     Gnus はメールとニュースがほとんど同じだとみなします。本当に。違い
     は実際の記事にどのようにアクセスするかだけです。メールメッセージは
     ローカルディスクのファイルから読めるのに対して、ニュース記事は一般
     に NNTP プロトコルで取得します。Gnus の内部構造は、それらのために
     「フロントエンド」と数々の「バックエンド」から成り立っています。内
     部的には、あなたがグループに入る (そう、RET をたたく) と、それによっ
     て Gnus のフロントエンドの機能を呼び出します。そうするとフロントエ
     ンドは、バックエンドに「foo グループの記事のリストをくれ」とか
     「4711 番の記事を見せてよ」と「話す」のです。

     そういうわけで、バックエンドは主にプロトコルか、ファイルの形式とディ
     レクトリーの配置のどちらかを定義します。前者は `nntp' バックエンド
     が NNTP でニュースにアクセスしたり、`nnimap' バックエンドが IMAP
     でメールにアクセスすることを指します。また、後者は `nnspool' バッ
     クエンドが共通の「スプールディレクトリー」形式にアクセスしたり、そ
     れととてもよく似たファイルの形式とディレクトリーの配置を介して
     `nnml' バックエンドがメールにアクセスすることを指します。

     Gnus は基礎的なメディアを扱いません。言わばこれは、すべてバックエ
     ンドによって行なわれるということです。バックエンドは記事にアクセス
     するための機能の集成です。

     しかし、「バックエンド」という用語は「サーバー」と言った方がふさわ
     しい場面でときどき使われます。そして同じことを指すことができる「選
     択方法」(select method) という用語があります。かように Gnus の用語
     はとても混乱しています。

"基本 (native)"
     Gnus はいつも一つの方法 (とバックエンド) を、ニュースを得るための
     「基本」もしくはディフォルトの手段として使います。

"外部 (foreign)"
     同時に任意の数の外部グループをアクセスできる状態にすることもできま
     す。これらはニュースを取得するための、基本ではなく、二次のでもない
     バックエンドを使うグループです。

"二次の (secondary)"
     二次のバックエンドは、基本と外部の間くらいに位置するバックエンドで
     すが、ほとんど基本と同じように動作するものです。

"記事 (article)"
     ニュースとして投稿されたメッセージです。

"メールメッセージ (mail message)"
     メールで送られたメッセージです。

"メッセージ"
     メールメッセージもしくはニュース記事です。

"ヘッド (head)"
     メッセージの最上部で、管理情報 (等) が入れられているところです。

"本文 (body)"
     記事の残りの部分です。ヘッドに無いものはすべて本文です。

"ヘッダー (header)"
     記事のヘッドの行です。

"ヘッダー群 (headers)"
     そのような行の集合もしくは、ヘッドの集合です。もしくは、NOV 行の集
     合です。

"NOV"
     グループに入ると、Gnus はグループのすべての未読記事のヘッダーをバッ
     クエンドに要求します。ほとんどのサーバーは News OverView 様式をサ
     ポートしています。それは標準の HEAD 様式よりコンパクトで、とても速
     く、読んで解析することができます。

"レベル (level)"
     それぞれのグループは何らかの「レベル」(1-9) で購読されています。低
     いレベルのものは高いレベルのものより「より」購読されています。実際
     のところ、レベル 1-5 のグループは「購読」; 6-7 は「未購読」; 8 は
     「ゾンビ」; 9 は「切られた」(killed) と見なされます。グループの一
     覧を表示したり、新しい記事を走査する命令は、すべて数値接頭引数を
     「動作レベル」として使います。

"切られたグループ (killed groups)"
     切られたグループの情報は保存されたり更新されたりしないので、切られ
     たグループを扱うのは購読されているグループよりも簡単です。

"ゾンビグループ (zombie groups)"
     ほとんど切られたグループと同じで、それより少し死んでいるだけです。

"アクティブファイル (active file)"
     ニュースサーバーは、どの記事を持っているかとどのグループが存在する
     かを記録しておかなければなりません。アクティブファイルに格納される
     すべてのこの情報は、あなたが推測するように比較的大きいです。

"偽グループ (bogus groups)"
     `.newsrc' ファイルに存在するけれどもサーバーが知らないグループ (す
     なわち、それはアクティブファイルにありません) は *偽グループ* です。
     おそらくそのグループは (もはや) 存在していないのでしょう。

"活性化 (activating)"
     サーバーにグループの情報を尋ねて未読記事の数を演算する行為は「グルー
     プを活性化 (activate) する」と呼ばれています。活性化されていないグ
     ループは、グループバッファーに `*' とともに一覧表示されます。

"スプール (spool)"
     ニュースサーバーは何らかのやり方で記事をローカルに保存します。ある
     古い流儀の保存方法は、単に記事毎に一つのファイルを持つことです。そ
     れは伝統的なスプール (traditional spool) と呼ばれます。

"サーバー (server)"
     接続して、ニュース (もしくはメール) を取得することができるマシンで
     す。

"選択方法 (select method)"
     バックエンドと、サーバーおよび仮想サーバーの設定を指定する構造です。

"仮想サーバー (virtual server)"
     名前が付けられていて、その名前で指定することができる選択方法です。
     選択方法は (物理的な) サーバーに関するすべてを定義するので、ものご
     とを全体として捉えるのは仮想サーバーになります。

"洗濯 (washing)"
     バッファーを持ってきて、何らかの種類のフィルターにかけることです。
     結果は (たいてい) 元のものよりもよりきれいで喜ばしいものになるでしょ
     う。

"一時グループ (ephemeral groups)"
     たいていのグループはどの記事を読んだかのデータを保存します。「一時」
     グループはデータが溜められないグループです--グループを出ると、それ
     は天空のかなたに消え去ります。

"固定グループ (solid groups)"
     これは一時グループの反対です。グループバッファーに一覧表示されてい
     るすべてのグループは固定グループです。

"まばら記事 (sparse articles)"
     `gnus-build-sparse-threads' が有効にされているときに、それらは概略
     バッファーに表示される (存在しない) 記事のための場所取りです。

"スレッド化 (threading)"
     応答の記事を、それが応答した元記事の直後に置くことです--階層的な流
     儀で。

"根 (root)"
     スレッドの最初の記事が根です。それはスレッドのすべての記事の祖先で
     す。

"親 (parent)"
     応答が得られた記事です。

"子 (child)"
     それとは別の記事、すなわち親に応答する記事です。

"まとめ送り (digest)"
     複数のメッセージを一つのファイルに集めたものです。最も一般的なまと
     め送りの様式は、RFC1153 で規定されています。

"分割 (splitting)"
     ある規則によってメールを区分けする行為です。ときどき間違ってメール
     の濾過 (filtering) と呼ばれます。



File: gnus-ja.info, Node: Customization, Next: Troubleshooting, Prev: Terminology, Up: Appendices

カスタマイズ
============

すべての変数は、このマニュアルのどこか他のところで適切に説明されていま
す。この章は、非常に良くある状況でどのように Gnus をカスタマイズすれば
良いかを調べるための、総合的な案内になるように作られています。

* Menu:

* Slow/Expensive Connection::   ローカルの Emacs で、どこかからニュースを得る
* Slow Terminal Connection::    遠くにあるホストの Emacs を実行する
* Little Disk Space::           大きな設定ファイルを持つことは良くない
* Slow Machine::                速いマシンを買いたい気がする



File: gnus-ja.info, Node: Slow/Expensive Connection, Next: Slow Terminal Connection, Prev: Customization, Up: Customization

遅くて高価な NNTP 接続
----------------------

Emacs をローカルのマシンで実行していて、非常に細いひもの向こうのマシン
からニュースを取り寄せているとしたら、Gnus が NNTP サーバーから取って来
なければならないデータの総量を減らしたくなるでしょうね。

`gnus-read-active-file'
     これを `nil' にして下さい。これは Gnus がサーバーにアクティブファ
     イル全体を要求することを禁止します。このファイルはしばしば非常に大
     きいです。さらに、Gnus が不意にアクティブファイルをとにかく取り寄
     せようと決意しないように、`gnus-check-new-newsgroups' および
     `gnus-check-bogus-newsgroups' も `nil' に設定する必要があります。

`gnus-nov-is-evil'
     これも `nil' にしていなければなりません。そうしておかないと、記事
     のヘッダーを NNTP サーバーから掴み取ってくるのが、あまり速くなりま
     せん。もっとも、すべての NNTP サーバーが XOVER をサポートしている
     わけではありません。そのことは Gnus が自分で検査します。



File: gnus-ja.info, Node: Slow Terminal Connection, Next: Little Disk Space, Prev: Slow/Expensive Connection, Up: Customization

遅いターミナル接続
------------------

Emacs と Gnus を実行しているシステムに、家のコンピューターをダイアルアッ
プで接続しているとしましょう。モデムが遅い場合は、電線を伝って送られて
いるデータの総量を (可能な限り) 減らしたくなるでしょう。

`gnus-auto-center-summary'
     Gnus が概略バッファーをリセンターする (訳注: 現在の記事が真ん中に
     表示されるようにする) するために、これを `nil' に設定して下さい。
     これが `vertical' だったら、垂直方向のリセンターだけをします。
     `nil' でも `vertical' でも無ければ、水平方向と垂直方向の両方でリセ
     ンターを行ないます。

`gnus-visible-headers'
     記事に含まれるヘッダーを最小限に減らします。実際のところ、それらが
     無くてもすべて間に合わせることができます--たいていの役に立つデータ
     は、とにかく概略バッファーにありますから。この変数を `^NEVVVVER'
     や `From:' や、何でも必要になりそうなものに設定して下さい。

     利用できるすべての「隠す」機能を有効にするために、以下を使って下さ
     い:

          (setq gnus-treat-hide-headers 'head
                gnus-treat-hide-signature t
                gnus-treat-hide-citation t)

`gnus-use-full-window'
     これを `nil' に設定することによって、すべてのウィンドウを小さくす
     ることができます。これは総じてそんなに減らしませんが、この記事は何
     が何でも読みたくなかったんだと決心する前に、それを少ししか見ないで
     済みます。

`gnus-thread-hide-subtree'
     これを `nil' ではない値にしておくと、すべての概略バッファーのスレッ
     ド (の親以外) は、初めは隠されているようになります。

`gnus-updated-mode-lines'
     これを `nil' にすると、Gnus はバッファーのモード行に情報を表示しな
     いので、いくらか時間を節約できるでしょう。



File: gnus-ja.info, Node: Little Disk Space, Next: Slow Machine, Prev: Slow Terminal Connection, Up: Customization

少ないディスク容量
------------------

起動ファイルはやや大きくなり得るので、空き容量が少なくなってきていると
きは、そのサイズを少し小さくする必要があるでしょう。

`gnus-save-newsrc-file'
     これを `nil' にすると、Gnus は決して `.newsrc' を保存しませ
     ん---`.newsrc.eld' だけを保存します。これは Gnus 以外のニュースリー
     ダーが使えなくなることを意味します。この変数はディフォルトで `t'
     です。

`gnus-read-newsrc-file'
     これが `nil' であれば、Gnus は `.newsrc' を決して読みませ
     ん---`.newsrc.eld' だけを読みます。これは Gnus 以外のニュースリー
     ダーが使えなくなることを意味します。この変数はディフォルトでは
     `t' です。

`gnus-save-killed-list'
     これが `nil' であると、Gnus は死んだグループのリストを保存しません。
     この変数を `nil' に設定したときは、`gnus-check-new-newsgroups' を
     `ask-server' に、`gnus-check-bogus-newsgroups' を `nil' に設定する
     べきでしょう。この変数はディフォルトで `t' です。



File: gnus-ja.info, Node: Slow Machine, Prev: Little Disk Space, Up: Customization

遅いマシン
----------

遅いマシンを持っているか、または本当は単に忍耐力が無いだけでも、Gnus を
速く走らせるためにできることが少しあります。

起動を速くするために `gnus-check-new-newsgroups' および
`gnus-check-bogus-newsgroups' を `nil' に設定して下さい。概略バッファー
に入ることと抜けることを速くするために、`gnus-show-threads' と
`gnus-use-cross-reference'、それに `gnus-nov-is-evil' を `nil' に設定し
て下さい。



File: gnus-ja.info, Node: Troubleshooting, Next: Gnus Reference Guide, Prev: Customization, Up: Appendices

問題解決
========

Gnus は箱から出してすぐに *非常に* よく動作します--どんな問題が起きるこ
とも想像できません、本当に。

オッホン。

  1. コンピューターの電源が入っていることを確かめて下さい。

  2. 現在通用している版の Gnus を本当に読み込んでいることを確認して下さ
     い。今まで GNUS を実行してきたのであれば、Gnus が動作するように一
     度 Emacs を終了して再起動する必要があります。

  3. `M-x gnus-version' を試して下さい。もし `Gnus v5.10.6' のようなも
     のが出てきたなら、正しいファイルが読み込まれています。そうならない
     のは古い `.el' ファイルが散らかっているせいでしょう。それらを消し
     て下さい。

  4. FAQ と入門書を読むために、ヘルプグループ (グループバッファーで `G
     h') を読んで下さい。

  5. Gnus は多くの再帰構造で動作しているので、何か極端な (そして非常に希
     な) 場合には、Gnus は再帰を「あまりに深く」降りすぎてしまい、Emacs があ
     なたにビープ音を鳴らすことがあります。もしこれが起こったなら、
     `max-lisp-eval-depth' を 500 かそこいらの値に設定して下さい。

もし他のすべてが失敗したなら、バグとして問題を報告して下さい。

もし Gnus のバグを見つけたなら、`M-x gnus-bug' 命令で報告することができ
ます。`M-x set-variable RET debug-on-error RET t RET' とタイプして、私
にバックトレースを送って下さい。私はバグを修正しようとしますが、あなた
がバグを再現させる方法を正確に書いてくれないと、それを修正することがで
きません。

バグ報告では、詳細すぎることは決してありません。バグ報告をするときは、
いつも `M-x gnus-bug' 命令を使って下さい。それを使うたびに 10KB のメー
ルができてしまっても、そしてあなたの環境のことを以前私に 500 回送ったこ
とがあったとしてもです。

私がどんなたぐいの記憶も持っていないことを、覚えておくことも重要です。
もしあなたがバグ報告を送ると、私は返答を送ります。その後で、あなたが
「いや、そうじゃない! このうすのろめっ!」とだけ送り返してきても、私はあ
なたが何について私を侮辱しているかがわかりません。常に、すべてを説明し
過ぎて下さい。それは私たちすべてにとって、もっとやり易くなります--もし
私が必要なすべての情報を得られなかったら、私はあなたにメールを送ってさ
らなる情報を求め、その結果すべてがより多くの時間を費やすことになります。

もしあなたの直面している問題が非常に視覚的で、それをうまく説明できない
場合は、Emacs のウィンドウをファイルにコピーして (例えば、`xwd' で)、そ
れをどこか手の届くどこかにおいて、その画像の URL をバグ報告に含めて下さ
い。

もしあなたがバグの修正や改善のためのパッチを寄稿して下さるのでしたら、
すみませんがそのパッチは `diff -u' で作って下さい。

問題を報告する前にもっとデバッグしたければ、あなた自身で問題を解決して
パッチを送るために edebug を使うことができるでしょう。Lisp コードのデバッ
グについては ELisp マニュアル (*Note Debugging Lisp Programs:
(elisp)Debugging.) に書かれています。edebug を始めるには、もし `c' を押
したときにある変な振舞いが発見されるならば、第一歩は `C-h k c' をタイプ
し、ドキュメンテーション・バッファー中でハイパーリンクをクリック
(Emacs のみ) して、その関数定義を参照することです。そしてその関数名の場
所で `M-x edebug-defun RET' をタイプして Gnus に戻り、そのコードを呼び
出すために `c' を押しで下さい。Lisp バッファーでは、`SPC' でシングルス
テップ動作、`M-:' で式を評価、`C-h v' で変数を検査、`q' で実行を中断、
あるいは `c' か `g' で実行を再開することができます。

ときどき、直接に elisp のエラーを起こさないものの、Gnus が非常に遅くな
るために明らかになる問題があります。そんな場合には `M-x
toggle-debug-on-quit' を使って、遅くなったときに `C-g' を押し、しかる後
にバックトレースを解析して下さい (その手続きを繰り返すことは、真の問題
領域を分離するのに役立ちます)。

より上等なやり方は elisp プロファイラー (訳注: プログラムの実行時の動き
を分析する道具) ELP を使うことです。プロファイラーについてはどこか他の
場所で完全に文書化されているはずですが、それを始めるために必要な手順を
少々書いておきましょう。第一に、プロファイルしてみたい Gnus の部分を計
測するための設定を、例えば `M-x elp-instrument-package RET gnus' や
`M-x elp-instrument-package RET message' で行なって下さい。そして、遅い
動作を行なわせてから `M-x elp-results' を押しましょう。すると、どの動作
が時間を食っているかを見て、それらをさらにまたデバッグすることができま
す。動作全体が、プロファイラーの出力の中で最も遅い関数で費やされた時間
よりはるかに長くかかるのは、たぶん Gnus の間違っている部分をプロファイ
ルしたせいでしょう。プロファイルの統計をリセットするには `M-x
elp-reset-all' を使って下さい。`M-x elp-restore-all' はプロファイルする
動作を取り除くことになっていますが、Gnus によって複雑にされかつ動的なコー
ド生成の影響を受けるため、それは必ずしも完全には動作しないかもしれませ
ん。

もし手助けが欲しいだけであれば、`gnu.emacs.gnus' で尋ねるのが良いでしょ
う。私はあまり役に立ちません。また、ding メーリングリス
ト---<ding@gnus.org> で尋ねることもできます。購読するには
<ding-request@gnus.org> にメールを送って下さい。



File: gnus-ja.info, Node: Gnus Reference Guide, Next: Emacs for Heathens, Prev: Troubleshooting, Up: Appendices

Gnus リファレンスガイド
=======================

誰かが Gnus でできる何か粋なものに知恵を働かせて、その粋なものを書いて
もくれることが私の願いです。それを促進するためには、Gnus の内部動作を説
明するのが良いだろうと思いました。それに、さほど内部ではない動作をいく
つかと、私が今やっていることも。

プログラムの内部の仕様が変更されることはない、などと思ってはいけません
が、Gnus とそのバックエンドの間のインターフェース (これは完全に記述され
ています) や、スコアファイルの形式 (同じく)、データ構造 (これは他のもの
ほどには変更されないでしょう)、それに一般的な操作のメソッドを、(細部に
わたって) 定義していきます。

* Menu:

* Gnus Utility Functions::      共通の関数と変数
* Back End Interface::          Gnus はどうやってサーバーと通信するのか
* Score File Syntax::           スコアファイル標準の BNF 定義
* Headers::                     Gnus はヘッダーを内部的にどのように格納するか
* Ranges::                      たくさんの数を格納する便利な形式
* Group Info::                  グループ情報の形式
* Extended Interactive::        シンボル接頭引数など
* Emacs/XEmacs Code::           Gnus はすべての最新の Emacsen で動作する
* Various File Formats::        Gnus が使用するファイルの形式



File: gnus-ja.info, Node: Gnus Utility Functions, Next: Back End Interface, Prev: Gnus Reference Guide, Up: Gnus Reference Guide

Gnus の有用な関数
-----------------

フックなどから実行される小さな関数を書くときは、Gnus の内部関数や変数に
アクセスすることが絶対に必要です。以下が最もよく使われるものの一覧です。

`gnus-newsgroup-name'
     この変数は現在のニュースグループの名前を持っています。

`gnus-find-method-for-group'
     GROUP の選択方法を返す関数です。

`gnus-group-real-name'
     正規の (接頭語付きの) Gnus グループ名を受け取って、接頭語が無い名
     前を返します。

`gnus-group-prefixed-name'
     接頭語が無いグループ名と選択方法を受け取って、正規の (接頭語付きの)
     Gnus グループ名を返します。

`gnus-get-info'
     GROUP のグループ情報のリストを返します。

`gnus-group-unread'
     GROUP の未読記事の数か、それが分からない場合は `t' を返します。

`gnus-active'
     GROUP に関するアクティブファイルの項目を返します。

`gnus-set-active'
     GROUP に関するアクティブファイルの項目を設定します。

`gnus-add-current-to-buffer-list'
     Gnus を終了するときに消去するバッファーのリストに、現在のバッファー
     を追加します。

`gnus-continuum-version'
     引数として Gnus のバージョン文字列を受け取って、浮動小数点の数値を
     返します。古いバージョンは必ず新しいバージョンよりも小さい数になり
     ます。

`gnus-group-read-only-p'
     GROUP が読み出し専用かどうかを示します。

`gnus-news-group-p'
     GROUP がニュースバックエンドかどうかを示します。

`gnus-ephemeral-group-p'
     GROUP が一時ニュースグループかどうかを示します。

`gnus-server-to-method'
     SERVER に対応している選択方法を返します。

`gnus-server-equal'
     二つの仮想サーバーが同一かどうかを示します。

`gnus-group-native-p'
     GROUP が基本グループかどうかを示します。

`gnus-group-secondary-p'
     GROUP が二次グループかどうかを示します。

`gnus-group-foreign-p'
     GROUP が外部グループかどうかを示します。

`gnus-group-find-parameter'
     GROUP のパラメーターのリストを返します。二つ目の引数を与えると、
     GROUP 用のそのパラメーターの値を返します。

`gnus-group-set-parameter'
     三つの引数 GROUP, PARAMETER, VALUE を与えて、パラメーターとして設
     定します。

`gnus-narrow-to-body'
     現在のバッファーを、記事の本文に狭めます。

`gnus-check-backend-function'
     二つの引数 FUNCTION と GROUP を取ります。GROUP のバックエンドが
     FUNCTION をサポートしているなら、`nil' ではない値を返します。

          (gnus-check-backend-function "request-scan" "nnml:misc")
          => t

`gnus-read-method'
     利用者に選択方法を入力してもらう関数です。



File: gnus-ja.info, Node: Back End Interface, Next: Score File Syntax, Prev: Gnus Utility Functions, Up: Gnus Reference Guide

バックエンドインターフェース
----------------------------

Gnus は NNTP やスプール、メール、仮想グループについては何も知りません。
ただ仮想サーバー "virtual servers" と対話する方法を知っているだけです。
仮想サーバーはバックエンド "back end" といくつかのバックエンド変数
back end variables" からなります。前者の例としては `nntp', `nnspool',
`nnmbox' などがあります。後者の例としては `nntp-port-number' や
`nnmbox-directory' があります。

Gnus がバックエンド--例えば `nntp'---に何かの情報を要求するとき、通常は
関数の引数として仮想サーバー名を含めます。(無い場合は、バックエンドは
「現在の」仮想サーバーを使うべきです。) 例えば `nntp-request-list' は、
その唯一の (省略可能な) 引数として仮想サーバーを使います。もしこの仮想
サーバーとの接続が開かれていないと、この関数の実行は失敗するはずです。

仮想サーバー名は、物理的なサーバー名とは何の関係も無いことに注意して下
さい。例を挙げましょう:

     (nntp "odd-one"
           (nntp-address "ifi.uio.no")
           (nntp-port-number 4324))

ここで物理サーバー名は `ifi.uio.no' であるのに対して、仮想サーバー名は
`odd-one' です。

バックエンドは複数の仮想サーバーを切り替えることができなければなりませ
ん。標準のバックエンドは、必要なときに仮想サーバーの環境を取り出し・押
し込みを行なう連想リストを保持することによって、これを実現しています。

インターフェース関数には二つのグループがあります。必ず存在しなければな
らない必須関数 "required functions" と、呼び出す前にそれが存在するかど
うかを常に Gnus が確認する任意関数 "optional functions" です。

これらすべての関数は、その戻り値のデータを `nntp-server-buffer'
(`*nntpd*') バッファーに返すことが求められます。これはちょっと不運な名
前付けですが、これで我慢しなければなりません。私が結果のデータ
resulting data" と言ったときは、そのバッファーの中のデータを指していま
す。戻り値 "return value" と言ったときは、関数呼び出しによって返される
関数の値のことを言っています。関数が失敗したときは、戻り値として `nil'
を返さなくてはいけません。

バックエンドにはサーバー型 "server-forming" のバックエンドと呼ばれるも
のがあり、またそう呼ばれないものもあります。後者は一般には、同時には一
つのグループだけしか操作しないバックエンドで、「サーバー」の概念があり
ません。このサーバーとは、グループを持ち、そのグループの情報を配送する
もので、それ以上のものではありません。

Gnus はグループ名と記事番号によって、それぞれのメッセージを特定します。
それら記事番号に関するちょっとした説明をすることは有益かもしれません。
まず第一に、その数値は正の整数です。第二に Gnus を混乱させることなく古
い記事番号を、後で「再使用」することは普通はできません。すなわち、もし
あるグループにかつて 42 番の記事があったとしたら、別の記事がその番号を
持つことができないか、または Gnus が激しく混乱してしまうということです。
(1) (*Note Back End Interface-Footnotes::) 第三に、記事番号はそのグルー
プでの到着順になっていなければならないことです。メッセージの日付も、必
ず到着順になっているわけではありませんが。

すでに前の節で、記事番号は一回使われただけで役目を終わらなければならな
い「厳しい」制限について説明しました。しかし、記事番号の並びに抜けがあ
ると Gnus はとても混乱してしまうので、連続した *通し* 番号を付けること
が有用なのかもしれません。ただし「再使用不可」の制限があるので、完全に
番号の抜けを回避できるとは限りません。また、可能な限り記事番号を 1 から
始めることは、番号を使い切ってしまうことを避けるために役立ちます。

慣例として、バックエンドは `nnなんたら' と名付けられますが、Gnus には
`nnheader.el'、`nnmail.el' および `nnoo.el' のように、いくつかのバック
エンドではない `nnかんたら' があることに注意して下さい。

ここでの例と定義では、想像上のバックエンド `nnchoke' を引き合いに出すこ
とにします。


* Menu:

* Required Back End Functions:: 実装しなければならない関数
* Optional Back End Functions:: 実装しなくてもよい関数
* Error Messaging::             メッセージを発したりエラーを報告する方法
* Writing New Back Ends::       古いバックエンドの拡張
* Hooking New Back Ends Into Gnus::  Gnus 側でしなければならないこと
* Mail-like Back Ends::         メール・バックエンドのための助言


File: gnus-ja.info  Node: Back End Interface-Footnotes, Up: Back End Interface

(1) `nnchoke-request-update-info' 関数の説明を見て下さい。
*Note Optional Back End Functions::.



File: gnus-ja.info, Node: Required Back End Functions, Next: Optional Back End Functions, Prev: Back End Interface, Up: Back End Interface

必須バックエンド関数
....................

`(nnchoke-retrieve-headers ARTICLES &optional GROUP SERVER FETCH-OLD)'

     ARTICLES は記事番号の範囲か、`Message-ID' のリストのどちらかです。
     現在のバックエンドは、どちらも完全にサポートしているわけではありま
     せん--記事番号のひと続き (リスト) だけで、多くのバックエンドは
     `Message-ID' による取得をサポートしていません。でも、それらは両方
     サポートすることに努めるべきです。

     結果のデータは HEADs か NOV 行のいずれかであるべきで、戻り値はこれ
     を反映した `headers' か `nov' のどちらかでなければなりません。これ
     は今後、HEADs と NOV 行が混在する `various' に拡張されるかもしれま
     せんが、現在の Gnus ではサポートされていません。

     FETCH-OLD が `nil' ではなかったら、ある意味での「余分なヘッダー」
     を取得しようとします。これは通常、`articles' の中の最小番号の記事
     よりも小さい番号を持っている (最大で) FETCH-OLD 個の記事と、
     `articles' の中で欠番になっている記事の、余分なヘッダーを取得しま
     す。もしバックエンドがこの要求に従うことを煩わしいと思った場合には、
     このパラメーターの存在は無視されることもあります。この値が `nil'
     でも数値でもなかったら、最大限の取得を行ないます。

     これが HEAD の例です:

          221 1056 Article retrieved.
          Path: ifi.uio.no!sturles
          From: sturles@ifi.uio.no (Sturle Sunde)
          Newsgroups: ifi.discussion
          Subject: Re: Something very droll
          Date: 27 Oct 1994 14:02:57 +0100
          Organization: Dept. of Informatics, University of Oslo, Norway
          Lines: 26
          Message-ID: <38o8e1$a0o@holmenkollen.ifi.uio.no>
          References: <38jdmq$4qu@visbur.ifi.uio.no>
          NNTP-Posting-Host: holmenkollen.ifi.uio.no
          .

     そういうわけで、`headers' という戻り値は、データバッファーにその要
     素数と同じ個数のヘッダーがあることを暗示します。

     これがそういうバッファーの BNF 定義です:

          headers        = *head
          head           = error / valid-head
          error-message  = [ "4" / "5" ] 2number " " <error message> eol
          valid-head     = valid-message *header "." eol
          valid-message  = "221 " <number> " Article retrieved." eol
          header         = <text> eol

     (ここで使った BNF の版は RFC822 で使われているものです。)

     戻り値が `nov' だった場合は、データバッファーには "network
     overview database" 行が含まれていなければなりません。これは基本的
     には複数の欄をタブで区切ったものです。

          nov-buffer = *nov-line
          nov-line   = field 7*8[ <TAB> field ] eol
          field      = <text except TAB>

     これらの欄に何が含まれるべきかをきちんと調べたいのならば、
     *Note Headers:: を参照して下さい。

`(nnchoke-open-server SERVER &optional DEFINITIONS)'

     ここでの SERVER は仮想サーバー名です。DEFINITIONS はこの仮想サーバー
     を定義する `(VARIABLE VALUE)' の組のリストです。

     サーバーと接続できなかった場合でも、エラーをシグナルして処理を中断
     してはいけません。バックエンドは、これ以後さらにこのサーバーに接続
     しようとする試みを、拒否することを選ぶことができます。実際、そうす
     べきです。

     すでにそのサーバーと接続されていた場合には、この関数は `nil' では
     ない値を返さなければなりません。このとき、返される結果のデータはあ
     りません。

`(nnchoke-close-server &optional SERVER)'

     SERVER との接続を閉じて、これに関連するすべてのリソースを開放しま
     す。もし何らかの理由でサーバーを閉じることができない場合は、
     `nil' を返します。

     返される結果のデータはありません。

`(nnchoke-request-close)'

     すべてのサーバーとの接続を閉じて、バックエンドが保有していたすべて
     のリソースを開放します。このバックエンドによって作られたすべてのバッ
     ファーを削除しなければなりません。(もっとも `nntp-server-buffer'
     は削除されませんが。) 普通この関数は Gnus が終了するときにのみ呼び
     出されます。

     返される結果のデータはありません。

`(nnchoke-server-opened &optional SERVER)'

     SERVER が現在の仮想サーバーで、かつその物理サーバーへの接続が生き
     ている場合、この関数は `nil' ではない値を返さなければなりません。
     どんな状況でも、この関数は接続が失われたサーバーへの再接続を試みて
     はいけません。

     返される結果のデータはありません。

`(nnchoke-status-message &optional SERVER)'

     この関数は SERVER からの最後のエラーメッセージを返します。

     返される結果のデータはありません。

`(nnchoke-request-article ARTICLE &optional GROUP SERVER TO-BUFFER)'

     この関数の結果のデータは、ARTICLE で指定された記事でなければなりま
     せん。`Message-ID' か番号のいずれかを指定することができます。
     `Message-ID' による記事の取得を実装するかどうかは任意ですが、それ
     が可能になっている方が良いでしょう。

     TO-BUFFER が `nil' ではなかったら、結果のデータは通常のデータバッ
     ファーの代わりに、このバッファーに返さなければなりません。Gnus は
     主に、記事バッファーに直接記事を挿入するように要求しますが、これに
     よって、多量のデータをあるバッファーから別のバッファーにコピーする
     のを避けることが可能になります。

     もし少しでも可能なら、この関数は cons セルを返すべきです。その
     `car' は取得した記事があるグループ名で、`cdr' は記事の番号です。こ
     れによって、`Message-ID' で記事を取得したときに、Gnus が本当のグルー
     プと記事番号を知ることができるようになるでしょう。これが不可能な場
     合は、記事の取得に成功したときに `t' を返さなければなりません。

`(nnchoke-request-group GROUP &optional SERVER FAST)'

     GROUP のデータを取得します。この関数には GROUP を現在のグループに
     するという副作用もあります。

     FAST が設定されたなら、有用なデータを返す面倒を行なわずに、単に
     GROUP を現在のグループにします。

     これが結果のデータの例と、定義それ自体です:

          211 56 1000 1059 ifi.discussion

     最初の数値は状態で、これは 211 でなくてはなりません。次はそのグルー
     プにある記事の総数、最小の記事番号、最大の記事番号、そして最後がグ
     ループ名です。しかし、いくつかの記事はキャンセルされているかもしれ
     ないので、記事の総数は、記事の最大・最小番号から単純に考えられる数
     よりも小さいかもしれないことに注意して下さい。Gnus は総数を単に捨
     ててしまうので、(それが問題であるときに) 正しい値を生成する面倒を
     負うべきかどうかは、読者への課題として残してあります。もしそのグルー
     プに記事が無かったら、最小記事番号は 1、最大は 0 として報告しなけ
     ればなりません。

          group-status = [ error / info ] eol
          error        = [ "4" / "5" ] 2<number> " " <Error message>
          info         = "211 " 3* [ <number> " " ] <string>

`(nnchoke-close-group GROUP &optional SERVER)'

     GROUP を閉じて、それに関連するすべてのリソースを開放します。ほとん
     どのバックエンドは何もすることが無いでしょう。

     返される結果のデータはありません。

`(nnchoke-request-list &optional SERVER)'

     SERVER 上で利用可能なすべてのグループのリストを返します。本当に *
     全部* という意味です。

     これは、たった二つしかグループを持っていないサーバーの場合の例です:

          ifi.test 0000002200 0000002000 y
          ifi.discussion 3324 3300 n

     各行にはグループ名、そのグループ内の最大の記事番号、最小の記事番号、
     そして最後にフラグがあります。もしそのグループに記事が無かったら、
     最小記事番号は 1、最大は 0 として報告しなければなりません。

          active-file = *active-line
          active-line = name " " <number> " " <number> " " flags eol
          name        = <string>
          flags       = "n" / "y" / "m" / "x" / "j" / "=" name

     フラグは、そのグループが読み出し専用 (`n') か、司会者付き (`m') な
     のか、死んでいる (`x') か、どこか他のグループの別名
     (`=other-group') なのか、それらのどれでもない (`y') のかを示します。

`(nnchoke-request-post &optional SERVER)'

     この関数は、現在のバッファーを投稿しなければなりません。投稿が成功
     したかどうかを返しても構いませんが、必須ではありません。例えば、投
     稿が非同期に行なわれる場合は、この関数が終了した時点では、投稿は普
     通完了していません。その場合この関数は、投稿を完了させることができ
     ないときに、それをはっきりと利用者に知らせる見張り (sentinel) のよ
     うなものを設定するべきでしょう。

     この関数から返される結果のデータはありません。



File: gnus-ja.info, Node: Optional Back End Functions, Next: Error Messaging, Prev: Required Back End Functions, Up: Back End Interface

任意バックエンド関数
....................

`(nnchoke-retrieve-groups GROUPS &optional SERVER)'

     GROUPS はグループのリストです。また、この関数はそれら全部のグルー
     プのデータを要求しなければなりません。どうやってそれを行なうかは
     Gnus の知ったことではありませんが、これをできるだけ迅速な方法で行
     なうことに挑まなければなりません。

     この関数の戻り値は `active' か `group' のどちらでも良く、それが結
     果のデータの形式が何であるかを示します。前者は
     `nnchoke-request-list' によるデータと同じ形式です。一方後者は
     `nnchoke-request-group' が返すものと同じ形式の、バッファーを埋める
     行です。

          group-buffer = *active-line / *group-status

`(nnchoke-request-update-info GROUP INFO &optional SERVER)'

     Gnus のグループ情報 (*Note Group Info::) が、バックエンドのそれを
     改変するために渡されます。これはバックエンドが (仮想グループや
     imap グループの場合のように)、本当にすべての情報を持っている場合に
     役に立ちます。この関数は、その要求に適合させる情報を破壊的に置き換
     えて、`nil' ではない値を返さなければなりません (例外的に
     `nntp-request-update-info' は、ネットワーク資源を浪費しないように
     常に `nil' を返します)。

     この関数が返す結果のデータはありません。

`(nnchoke-request-type GROUP &optional ARTICLE)'

     利用者が「ニュースを送信する」命令 (例えば、概略バッファーで `F')
     を実行したときに、Gnus は利用者がフォローアップしようとしている記
     事がニュースなのかメールなのかを知っている必要があります。この関数
     は GROUP の中の ARTICLE がニュースであれば `news' を、メールであれ
     ば `mail' を、その種別を判定できない場合は `unknown' を返さなけれ
     ばなりません。(ARTICLE 引数は、メールグループとニュースグループが
     ごちゃまぜになっているかもしれない `nnvirtual' において必要です。)
     GROUP と ARTICLE は両方とも `nil' であるかもしれません。

     この関数が返す結果のデータはありません。

`(nnchoke-request-set-mark GROUP ACTION &optional SERVER)'

     記事の印を設定/消去/追加します。通常 Gnus は記事の印 (既読、可視、
     期限切れ消去など) を内部で扱い、`~/.newsrc.eld' に保存します。しか
     し、いくつかのサーバー (例えば IMAP) は記事のすべての情報をサーバー
     で持っているので、Gnus が印の情報をサーバーに伝搬させる必要があり
     ます。

     ACTION は印を設定する要求のリストで、以下の様式を持ちます:

          (RANGE ACTION MARK)

     RANGE は印を付けたい記事の範囲です。ACTION は `add' または `del'
     で、印を追加したり消すために使われます (言及されていないすべての印
     は保存します)。MARK は印のリストです。それぞれの印はシンボルです。
     現在使われている印は `read', `tick', `reply', `expire', `killed',
     `dormant', `save', `download', `unsend', `forward' および
     `recent' ですが、あなたのバックエンドは、可能ならこれらを制限をす
     るべきではありません。

     矛盾する動作が指定された場合は、リストの最後の動作が効力を持つもの
     になるべきです。すなわち、ACTION が記事 1 に `可視' 印を追加する要
     求を含んでいて、リストのおしまいの方で、同じ記事から印を消去するこ
     とを要求していたならば、印は実際には消去されるべきです。

     ACTION リストの例です:

          (((5 12 30) 'del '(tick))
           ((10 . 90) 'add '(read expire))
           ((92 94) 'del '(read)))

     関数は印を設定できなかった記事の範囲を返さなければなりません (現在
     はどんな目的のためにも使われていません)。

     この関数が返す結果のデータはありません。

`(nnchoke-request-update-mark GROUP ARTICLE MARK)'

     バックエンドが嫌う印を利用者が設定しようとしたら、この関数がその印
     を変更することができます。この関数が返したどんなものでも、Gnus は
     ARTICLE への印として元の MARK の代わりに使います。バックエンドがそ
     れでも構わない場合には、元の MARK を返さなければなりません。`nil'
     やその他のゴミを返してはいけません。

     私が知っているこれのこれの利用法は、`nnvirtual' が行なっていること
     だけです--その仮想グループで既読の印を付けると、もし構成要素のグルー
     プが自動期限切れ消去可能ならば、結果としてその記事に期限切れ消去の
     印が付けられます。

     この関数が返す結果のデータはありません。

`(nnchoke-request-scan &optional GROUP SERVER)'

     バックエンドが新着記事を検査する要求を (Gnus か他の何かによって)
     行なうときはいつでも、あれやこれやとこの関数が呼び出されるでしょう。
     この関数が起動されると、一般にメールバックエンドはスプールファイル
     を読むか POP サーバーに問い合わせます。GROUP に留意する必要はあり
     ません--バックエンドが、一つのグループだけを走査するのが大変すぎる
     と判断した場合には、すべてのグループを総ががりで走査しても構いませ
     ん。ですが、その方が実用的ならば、局所に限定するのが良いでしょう。

     この関数が返す結果のデータはありません。

`(nnchoke-request-group-description GROUP &optional SERVER)'

     この関数が返す結果のデータは、GROUP の説明でなければなりません。

          description-line = name <TAB> description eol
          name             = <string>
          description      = <text>

`(nnchoke-request-list-newsgroups &optional SERVER)'

     この関数が返す結果のデータは、サーバー上で利用できるすべてのグルー
     プの説明でなければなりません。

          description-buffer = *description-line

`(nnchoke-request-newgroups DATE &optional SERVER)'

     この関数から返される結果のデータは、`date' 以降に作成されたすべて
     のグループでなければなりません。`date' は人間が読める普通の日付の
     形式 (すなわち、メールやニュースのヘッダーで使われる形式で、ディフォ
     ルトは関数 `message-make-date' が返すもの) です。データは active
     バッファーの形式でなければなりません。

     この関数が「多すぎる」グループを返すのはオッケーです。いくつかのバッ
     クエンドでは、新しいグループだけではなくて、すべてのグループのリス
     トを返す方が安上がりに済むことを見出すかもしれません。しかし、たく
     さんのグループがあるバックエンドで、これをしてはいけません。普通、
     利用者が自分で作ったグループならば多すぎることはないでしょうから、
     `nnml' とそれに類するものはたぶん心配ありません。しかし `nntp' の
     ようなバックエンドでは、グループはサーバーによって作られているので、
     いかにもたくさんのグループがありそうです。

`(nnchoke-request-create-group GROUP &optional SERVER)'

     この関数は GROUP という名前の空のグループを作成しなければなりませ
     ん。

     返されるデータはありません。

`(nnchoke-request-expire-articles ARTICLES &optional GROUP SERVER FORCE)'

     この関数は、ARTICLES の範囲のすべての記事に対して期限切れ消去の処
     理を行ないます (現在 ARTICLES は記事番号の単純なリストです)。記事
     がどれだけ古いかを、この関数で消去される前に判定することは、バック
     エンドに任されています。FORCE が `nil' ではない値だったら、それら
     がどんなに新しくても、すべての ARTICLES を消去しなければなりません。

     この関数は削除しなかった、あるいは削除することができなかった記事の
     リストを返さなければなりません。

     返される結果のデータはありません。

`(nnchoke-request-move-article ARTICLE GROUP SERVER ACCEPT-FORM &optional LAST)'

     この関数は GROUP にある記事 ARTICLE (番号) を、
     ACCEPT-FORM を呼び出すことによって移動しなければなりません。

     この関数は、当の記事を移動させるための準備として、それが記事に付加
     したどんなヘッダー行をも削除して、記事を大体において「きれい」にし
     ておく必要があります。そして「きれい」な記事があるバッファーで、
     ACCEPT-FORM を `eval' しなければなりません 。これは実際に複製を行
     ないます。もしこの `eval' が `nil' 以外の値を返したら、その記事を
     削除しなければなりません。

     もし LAST が `nil' だったら、それはこの直後にさらに要求が発行され
     る見込みが高いことを意味し、これによっていくらか最適化ができるよう
     になります (訳注: 例えば `nil' だったらサーバーとの接続を閉じない
     でおくとか)。

     この関数は、移動先のグループ名が `car' で、移動先の記事番号が
     `cdr' である cons セルを返さなければなりません。

     返されるデータはありません。

     訳注: 移動先のグループは ACCEPT-FORM の中で指定します。そこで使わ
     れるのが、次の `nnchoke-request-accept-article' です。

`(nnchoke-request-accept-article GROUP &optional SERVER LAST)'

     この関数は、現在のバッファーの中身を GROUP に挿入します。LAST が
     `nil' だったら、この関数へのさらなる呼び出しが直ちに行なわれるだろ
     うという意味です。

     この関数はグループ名が `car' で、移動先の記事番号が `cdr' である
     cons セルを返さなければなりません。

     そのグループは、記事を受け入れてもらうことをバックエンドが要求する
     前に存在しなければなりません。

     返されるデータはありません。

`(nnchoke-request-replace-article ARTICLE GROUP BUFFER)'

     この関数は GROUP から記事 ARTICLE (番号) を削除して、代わりに
     BUFFER の中身をそこに挿入しなければなりません。

     返されるデータはありません。

`(nnchoke-request-delete-group GROUP FORCE &optional SERVER)'

     この関数は GROUP を消去しなければなりません。もし FORCE が設定され
     ていたら、そのグループ内のすべての記事を本当に消去して、そしてその
     グループ自身を消去しなければなりません。(もし「グループ自身」とい
     うものがあれば。)

     返されるデータはありません。

`(nnchoke-request-rename-group GROUP NEW-NAME &optional SERVER)'

     この関数はグループ名を GROUP から NEW-NAME に変更しなければなりま
     せん。GROUP 内にあるすべての記事は、NEW-NAME に移動しなければなり
     ません。

     返されるデータはありません。



