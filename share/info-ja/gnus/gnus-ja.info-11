Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: Predicate Specifiers, Next: Moderation, Prev: Undo, Up: Various

述語指示子
==========

いくつかの Gnus の変数は「述語指示子」(predicate specifiers) です。これ
は、その多くをすべて記述する必要なしに、述語の仕様に融通を効かせること
ができる特別な形式です。

これらの指示子は関数、シンボルおよびリストからなるリストです。

例です:

     (or gnus-article-unseen-p
         gnus-article-unread-p)

利用できるシンボルは `or'、`and' および `not' です。関数はすべて一つの
パラメーターを受け取ります。

呼ぶことができる関数を作るために、Gnus はこれらの指示子について内部的に
`gnus-make-predicate' を使います。この関数へのこの入力パラメーターは、
述語指示子の中のすべての関数に渡されます。



File: gnus-ja.info, Node: Moderation, Next: Fetching a Group, Prev: Predicate Specifiers, Up: Various

司会役
======

もしあなたが司会者 (モデレーター) ならば、`gnus-mdrtn.el' パッケージを
使うことができます。これは標準の Gnus パッケージには含まれていません。
`larsi@gnus.org' に、どのグループの司会を行なうのかを述べたメールを書い
て下さい。そうすればコピーを手に入れることができます。

司会者用パッケージは概略バッファーのマイナーモードとして実装されていま
す。

     (add-hook 'gnus-summary-mode-hook 'gnus-moderate)

をあなたの `~/.gnus.el' ファイルに入れて下さい。

あなたが `rec.zoofle' の司会者だとすると、これは以下のように動作するよ
うになっています:

  1. 受信したメールを `Newsgroups:.*rec.zoofle' に合致させることによっ
     て分割します。これは投稿されようとしているすべての記事を、あるメー
     ルグループ--例えば `nnml:rec.zoofle' に入れます。

  2. あなたは時折このグループに入り、`e' (edit-and-post) あるいは `s'
     (just send unedited) 命令を使って記事を投稿します。

  3. `rec.zoofle' ニュースグループを読んでいる途中で、もしあなたが承認
     していない記事をたまたま見つけたとしたら、`c' 命令で取り消しできま
     す。

二つのグループで司会者モードを使うとすれば、こうなります:

     (setq gnus-moderated-list
           "^nnml:rec.zoofle$\\|^rec.zoofle$")



File: gnus-ja.info, Node: Fetching a Group, Next: Image Enhancements, Prev: Moderation, Up: Various

グループを取得する
==================

時々「Gnus が起動しているかどうかを気にしないでこのグループを読みたい。」
ということができれば便利なことがあります。これは、利用者よりもプログラ
ムのコードを書く人に便利な機能ですが、どちらにしろ `gnus-fetch-group'
コマンドはこの機能を提供します。それはグループの名前を引数としてとりま
す。



File: gnus-ja.info, Node: Image Enhancements, Next: Fuzzy Matching, Prev: Fetching a Group, Up: Various

画像の拡張
==========

XEmacs それに Emacs 21 (1) (*Note Image Enhancements-Footnotes::) は絵
やその種のものを表示することができるので、Gnus はこれを利用することにし
ました。

* Menu:

* X-Face::                      ファンキーでちっちゃな白黒の絵を表示する
* Face::                        よりファンキーでちっちゃなカラーの絵を表示する
* Smileys::                     幸せな顔をまさにそのように表示する
* Picons::                      あなたが読んでいるものの絵を表示する方法
* XVarious::                    XEmacs のための Gnus の変数


File: gnus-ja.info  Node: Image Enhancements-Footnotes, Up: Image Enhancements

(1) MS ウィンドウズの Emacs 21 はまだ画像をサポートしていません。



File: gnus-ja.info, Node: X-Face, Next: Face, Prev: Image Enhancements, Up: Image Enhancements

X-Face
------

`X-Face' ヘッダーは、メッセージの著者を表わすことになっている 48×48 画
素の白黒 (深さ 1 bit の) の絵を描きます。これは進化し続けるあまたのメー
ルとニュースリーダーによってサポートされるでしょう。

`X-Face' ヘッダーを見るには `compface' をサポートしている Emacs (ほとん
どの XEmacs の版がサポート) か、変換または表示のための適切なプログラム
をインストールしてあることが必要です。あなたの Emacs が自前で画像の表示
をサポートしているならば、ディフォルトで `From' ヘッダーの前に顔が表示
されます。Emacs が自前で `X-Face' をサポートしていない場合、Gnus は
`pbmplus' パッケージとその仲間の外部プログラムを使って `X-Face' ヘッダー
を変換しようとします。`X-Face' をサポートするようにコンパイルされている
XEmacs は速いです。画像をサポートしていない Emacs では、ディフォルトで
は表示のための処理を `display' というプログラムに委ねます。

GNU/Linux システムの場合、ImageMagick パッケージの `display' プログ
ラムを使います。外部プログラムとしては `netpbm'、
`libgr-progs' および `compface' のような名前のものを探します。

これを制御するのは `gnus-article-x-face-command' 変数です。この変数が文
字列ならば、この文字列がサブシェルで実行されます。関数ならば、この関数
が顔を引数として呼ばれます。もし `gnus-article-x-face-too-ugly' (これは
正規表現です) が `From' 欄に合致すれば、顔は表示されません。

(注: 変数/関数名には `xface' ではなく `x-face' が使われます。)

フェースと変数:

`gnus-x-face'
     X-Face を表示するためのフェース。このフェースの色が表示される
     X-Face の前景色と背景色として使われます。ディフォルトの色は黒と白
     です。

`gnus-face-properties-alist'
     Face (*Note Face::) と X-Face 画像に適用される、画像の形式とプロパ
     ティーの連想リストです。ディフォルト値は Emacs 用の
     `((pbm . (:face gnus-x-face)) (png . nil))' または XEmacs 用の
     `((xface . (:face gnus-x-face)))' です。例を挙げましょう:

          ;; From ヘッダーにおける Face と X-Face の高さを指定します。
          (setq gnus-face-properties-alist
                '((pbm . (:face gnus-x-face :ascent 80))
                  (png . (:ascent 80))))

          ;; Face と X-Face を凹んだボタンのように表示します。
          (setq gnus-face-properties-alist
                '((pbm . (:face gnus-x-face :relief -2))
                  (png . (:relief -2))))

     いろいろな画像の形式で利用可能なプロパティーについては *Note
     Image Descriptors: (elisp)Image Descriptors, を参照して下さい。今
     のところ Emacs では `pbm' が X-Face 画像に使われ、 `png' が Face
     画像に使われます。XEmacs では、それが `libcompface' ライブラリーと
     ともに構築されていれば、`xface' 画像形式に `:face' プロパティーだ
     けが効果を及ぼします。

投稿様式 (posting style) を使うのであれば、`gnus-posting-styles' に
`x-face-file' の項を加えれば良いでしょう (*Note Posting Styles::)。さも
なけば、外に出すメッセージに X-Face ヘッダーを簡単に挿入できるようにす
るために Gnus が提供する、いくつかの便利な関数と変数を利用することがで
きます。これらの機能のためには、前述の ImageMagick、netpbm または他の画
像を変換するパッケージ (何が必要かは、下記の変数群の値によります) も必
要です。

`gnus-random-x-face' は `gnus-x-face-directory' にあるすべての `pbm' ファ
イルをくまなく探してランダムに一つを選び取り、シェルコマンド
`gnus-convert-pbm-to-x-face-command' を使ってそれを X-Face の形式に変換
します。`pbm' ファイルは 48×48 画素の大きさでなければなりません。それ
は X-Face ヘッダーのデータを文字列で返します。

`gnus-insert-random-x-face-header' は `gnus-random-x-face' を呼んで、ラ
ンダムに生成されたデータによる X-Face ヘッダーを挿入します。

`gnus-x-face-from-file' はパラメーターとして GIF ファイルを受け取り、シェ
ルコマンド `gnus-convert-image-to-x-face-command' を使ってそのファイル
を X-Face の形式に変換します。

一番目の関数の一般的な使い方を示します。以下のようなものを
`~/.gnus.el' ファイルに書き込んで下さい:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(X-Face . gnus-random-x-face))))

最後の関数を使うのは、このようになるでしょう:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(X-Face . (lambda ()
                                     (gnus-x-face-from-file
                                      "~/My-face.gif"))))))



File: gnus-ja.info, Node: Face, Next: Smileys, Prev: X-Face, Up: Image Enhancements

Face
----

`Face' ヘッダーは、本質的に `X-Face' をよりファンキーに変形したものです。
それらは、メッセージを書いた人を象徴することになっている 48×48 画素の
カラー画像を描きます。

`Face' ヘッダーの内容は base64 でエンコードされた PNG の画像でなけ
ればなりません。正確な仕様について、
`http://quimby.gnus.org/circus/face/' を参照して下さい。

変数 `gnus-face-properties-alist' は表示される Face 画像の外観に影響し
ます。*Note X-Face::.

`Face' ヘッダーを見るには Emacs が PNG 画像を表示できる必要があります。

Gnus は外に出すメッセージに Face ヘッダーを簡単に挿入できるようにするた
めの、便利な関数と変数を少しばかり提供します。

`gnus-convert-png-to-face' は 726-byte 以下の 48×48 の PNG の画像を受
け取って、それを Face に変換します。

`gnus-face-from-file' は JPEG ファイルの名前をパラメーターとして受け取
り、シェルコマンド `gnus-convert-image-to-face-command' を使ってそのファ
イルを Face フォーマットに変換します。

この関数の代表的な使い方を挙げておきましょう。以下のようなものを
`~/.gnus.el' ファイルに入れて下さい:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(Face . (lambda ()
                                   (gnus-face-from-file "~/face.jpg"))))))



File: gnus-ja.info, Node: Smileys, Next: Picons, Prev: Face, Up: Image Enhancements

スマイリー
----------

スマイリー "smiley" は Gnus とは別のパッケージですが、スマイリーを使っ
ているパッケージは現在 Gnus だけなので、ここで説明します。

ひとことで言えば--Gnus でスマイリーを使うには、以下を `~/.gnus.el' ファ
イルに書き込んで下さい。

     (setq gnus-treat-display-smileys t)

スマイリーは、文字の顔マーク---`:-)', `8-)', `:-(' などといったもの--を
絵に割り当てて、文字の顔マークの代わりにその絵を表示します。この変換は
文字に合致する正規表現と、それに割り当てられたファイル名のリストで制御
されます。

使われる連想リストは、変数 `smiley-regexp-alist' で設定します。各要素の
最初の項目は合致する正規表現で、二番目の要素は絵で置き換えられる正規表
現のグループ番号、そして三番目の要素は表示されるファイルの名前です。

以下の変数は、スマイリーがこれらのファイルを探す場所をカスタマイズしま
す:

`smiley-data-directory'
     スマイリーが顔ファイルを探す場所です。

`gnus-smiley-file-types'
     スマイリーのファイル名として試してみる拡張子のリストです。



File: gnus-ja.info, Node: Picons, Next: XVarious, Prev: Smileys, Up: Image Enhancements

Picons
------

それで…、あなたはこのニュースリーダーをさらにもっと遅くしたいってわけ
ですね! これはそうするのにぴったりな方法です。さらにこれは、あなたが
ニュースを読んでいるんだということを、あなたの肩越しに見つめている人に
印象づけるための素晴らしい方法でもあります。

Picon とはなんでしょう? Picons ウェブサイトから直接引用しましょう。

     "Picon" とは「個人アイコン (personal icons)」の略です。これは、あ
     る電子メールアドレスのための適切な画像を見つけることができるように、
     無理矢理小さくしてデータベースにまとめられた画像たちで、ネット上の
     利用者やドメインを表現するために使われます。利用者とドメイン以外に、
     Usenet ニュースグループや天気予報のための picon データベースがあり
     ます。picon は白黒の `XBM' 形式、またはカラーの `XPM' 形式および
     `GIF' 形式のいずれでも構いません。

Picon データベースの入手とインストールの手順については、ウェブブラウザー
で `http://www.cs.indiana.edu/picons/ftp/index.html' を訪ねてみて下さい。

もし Debian GNU/Linux を使っているのなら、`apt-get install picons.*' と
言えば、Gnus が見つけることができる picon がインストールされます。

Picon の表示ができるようにするためには、picon データベースがあるディレ
クトリーが、ただ単に `gnus-picon-databases' に設定されているようにして
下さい。

変数 `gnus-picon-style' は picon をどのように表示するかを制御します。
`inline' だったらテキスト形式の表現が置き換えられます。
`right' だったら、テキスト形式の表現の右側に picon が加えられます。

ものごとの所在を管理するために、以下の変数を設けています。

`gnus-picon-databases'
     Picon データベースの場所です。これは `news', `domains', `users'
     (などなど) のサブディレクトリーが含まれているディレクトリーのリス
     トです。`("/usr/lib/picon" "/usr/local/faces")' がディフォルトです。

`gnus-picon-news-directories'
     `gnus-picon-databases' からニュースグループ用のフェースを探すため
     のサブディレクトリーのリストです。ディフォルトは `("news")' です。

`gnus-picon-user-directories'
     `gnus-picon-databases' から利用者のフェースを探すためのサブディレ
     クトリーのリストです。`("local" "users" "usenix" "misc")' がディフォ
     ルトです。

`gnus-picon-domain-directories'
     `gnus-picon-databases' からドメイン名のフェースを探すためのサブディ
     レクトリーのリストです。ディフォルトは `("domains")' です。このリ
     ストに `"unknown"' を追加しておきたくなる人もいるでしょう。

`gnus-picon-file-types'
     Picon のファイル名として試してみる順に並べられた拡張子のリストです。
     ディフォルトは `("xpm" "gif" "xbm")' から Emacs に組み込まれていな
     いものを除外したものです。



File: gnus-ja.info, Node: XVarious, Prev: Picons, Up: Image Enhancements

さまざまな XEmacs 変数
----------------------

`gnus-xmas-glyph-directory'
     これは Gnus が絵を探す場所です。Gnus は通常このディレクトリーを自
     動検出しますが、もし標準的でないディレクトリー構造を持っている場合
     は、これを手動で設定することができます。

`gnus-xmas-modeline-glyph'
     すべての Gnus のモード行で表示される画像。これはディフォルトではち
     いさなヌー (gnu) の頭です。


ツールバー
..........

`gnus-use-toolbar'
     この変数はツールバーを表示する位置を指定します。`nil' だったらツー
     ルバーを表示しません。非-`nil' の場合、それは `default', `top',
     `bottom', `right' または `left' の中の一つのシンボルでなければなり
     ません。`default' だったらディフォルトのツールバーを使い、他のもの
     だったらその名前が示す場所にツールバーを表示します。ディフォルトは
     `default' です。

`gnus-toolbar-thickness'
     高さと幅のコンス (cons) で、ツールバーの厚さを指定します。高さは上
     辺か下辺に表示するツールバーで使われ、幅は右端か左端に表示するツー
     ルバーで使われます。ディフォルトはディフォルトのツールバーの値です。

`gnus-group-toolbar'
     グループバッファー内のツールバーです。

`gnus-summary-toolbar'
     概略バッファー内のツールバーです。

`gnus-summary-mail-toolbar'
     メールグループの概略バッファー内のツールバーです。




File: gnus-ja.info, Node: Fuzzy Matching, Next: Thwarting Email Spam, Prev: Image Enhancements, Up: Various

ファジーな一致
==============

Gnus はスコア付け、スレッドの形成、およびスレッドの比較などを行なうとき
に、`Subject' 行のファジーな合致 "fuzzy matching" を提供します。

正規表現による合致とは違って、ファジーな合致はとってもファジーです。あ
まりにもファジーすぎて、何がファジーであるかという定義さえ無いし、実装
も何度も変更されています。

基本的に、これは比較の前に行から邪魔物を取り除こうとします。`Re: '、挿
入句の印、および空白文字等々が文字列から除去され、その結果を比較します。
これはほとんどの場合妥当な結果をもたらします--たとえニュースリーダーの
仮面をかぶった文字列切り刻み機で生成された文字列が差し出されても、です。



File: gnus-ja.info, Node: Thwarting Email Spam, Next: Other modes, Prev: Fuzzy Matching, Up: Various

spam メールの裏をかく
=====================

ここ最近の USENET では、宣伝のハゲタカどもが彼らの詐欺や製品を押し付け
るための電子メールアドレスを探そうとして、気違いのようにニュース上をう
ろついて grep しまくっています。これに対する反動として、多くの人々が無
意味なアドレスを `From' 行に入れはじめるようになってしまいました。私は
これは逆効果を招くと思います--あなたが書いたことに対する返信として人々
が正当なメールを送ることを面倒にさせるだけでなく、誰が書いたものなのか
を分かりづらくします。こんな書き換えは、結局は押し付け宣伝メールそれ自
身よりも大きな脅威となるかもしれません。

私にとっての spam メールの最大の問題は、嘘の口実で入ってくるからです。
私が `g' を押すと、Gnus は十通の新着メールがありますと陽気に私に教えて
くれます。私は「おおっ、わーい! 僕って幸せ!」と言ってメールグループを選
択します。しかしそこには、二つのネズミ講と、七つの広告 (「最新! 奇跡の
育毛トニック、ふさふさでつやつやの髪をあなたのつま先(※)に!」) と、悔い
改め神を信じよ、という一つのメールがあるだけなのです。

これは迷惑千万です。あなたがそれに関してできることがあります。

     訳注※: ホビット族用の育毛トニック。たぶん。

* Menu:

* The problem of spam::         背景、そして解決
* Anti-Spam Basics::            たくさんの spam を減らす簡単な方法
* SpamAssassin::                Spam 対策ツールの使い方
* Hashcash::                    CPU 時間を費やして spam 退治する
* Filtering Spam Using The Spam ELisp Package::
* Filtering Spam Using Statistics with spam-stat::



File: gnus-ja.info, Node: The problem of spam, Next: Anti-Spam Basics, Prev: Thwarting Email Spam, Up: Thwarting Email Spam

Spam の問題
-----------

初めに spam の背景から。

あなたが電子メールを使っているならば、spam (専門用語としては Unsolicited
Commercial E-mail--望まれない商用電子メール--の頭文
字 UCE) のことはよく知っているでしょう。簡単に言えばそれは紙の
メールに比べて電子メールの配送がとても安くつくために存在し、非常に小さな
割合の人々が UCE に応答するだけで広告主に利益をもたらすのです。皮肉なこ
とに最も一般的な spam の一つは、さらに spam を助長するための電子メールア
ドレスのデータベースを提供します。Spam の送信者はふつ
う *spammers* と呼ばれますが、*vermin*、*scum*、
*sociopaths* および *morons* のような用語もよく使われています。

Spam は種々さまざまな出どころからやって来ます。有用なメッセージを捨てず
にすべての spam を単に始末することは不可能です。良い例は TMDA (訳注: 送
信する度にユニークなアドレスを使う) システムで、それは、あなたが知らな
い送信者からの電子メールがあなたのもとに届くことができる前に、彼らに対
して彼ら自身が正当な送信者であることの確認を求めます。正当な出どころか
らの電子メールが、それらの出どころが TMDA システムを通して確認できない、
または行なわれない場合は捨てられてしまうかもしれないというマイナス面は、
TMDA の技術的な側面に立ち入らなくても明白です。もう一つの TMDA の問題は、
電子メールの配送と処理への基本的な理解を、利用者に求めていることです。

Spam の除去 (filtering) への最も単純な取り組みは、メールサーバーで、あ
るいは入ってきたメールを分類するときに濾過すること (filtering) です。毎
日 `random-address@vmadmin.com' から 200通の spam メッセージを受け取る
のならば、`vmadmin.com' を阻止すれば良いでしょう。「バイアグラ」に関す
るメッセージを 200通受け取るのならば、「バイアグラ」を含むすべてのメッ
セージを捨ててしまえば良いでしょう。例えばブルガリアからたくさんの
spam がやって来るのならば、ブルガリアの IP から来るすべてのメールを濾過
すれば良いでしょう。

これは、残念ながら正当な電子メールを捨てるためのすぐれた方法です。あな
たに連絡しようとする国 (ブルガリア、ノルウェー、ナイジェリア、中国、等)
全体、または大陸 (アジア、アフリカ、ヨーロッパ、等) さえも封じ込めてし
まう危険は明らかなので、あなたに選択権があるのならば、そんなことはしな
いで下さい。

もう一つの例として、とても示唆に富んで有益な RISKS ダイジェストは、それ
が spam メッセージと共通の語を *含んで* いるために、熱心すぎるメール濾
過器によって阻止されてしまいます。それでもなお孤立した環境では、注意深
く使うことによって直接の濾過は有益になり得ます。

もう一つの電子メール濾過への取り組みは分散型 spam 処理で、DCC (訳注:
Distributed Checksum
Clearinghouse---`http://www.rhyolite.com/anti-spam/dcc/') がそのような
システムを導入しています。本質的には、世界中の N 個のシステムが、ガーナ、
エストニアあるいはカリフォルニアにあるマシン X が spam 電子メールを送出
していることを認めたら、それら N 個のシステムは X または X からやって来
た spam メールをデータベースに記入します。Spam 検出の基準は一様ではあり
ません。それは送られたメッセージの数やメッセージの内容などであるかもし
れません。メッセージが spam かどうかを分散処理システムの利用者が知りた
い場合、彼はそれらの N 個のシステムのうちの一つを調べます。

分散型 spam 処理は一度にたくさんのメッセージを送る spammers と非常によ
く戦ってくれますが、それには利用者がかなり複雑なチェックを設定すること
が必要です。商用とフリーな分散型 spam 処理システムがあります。分散型
spam 処理は、それ自体の危険もはらんでいます。例えば、正当な送信者が
spam を送ったかどで非難され、彼らのウェブサイトやメーリングリストがその
事件のために暫くの間閉鎖されてしまう、とか。

Spam の濾過への統計的な取り組みもまた普及しています。それは過去の spam
メッセージの統計的な分析に基づいています。通常その分析は、おそらく単語
の対か三つの単語の組合せの合成による、単語の出現頻度の単純な計数です。
Spam の統計分析はほとんどの場合にとてもよく働くのですが、時として正当な
電子メールを spam として分類してしまうことがあります。分析には時間がか
かります。すべてのメッセージを分析しなければなりません。そして利用者は
spam を分析するためのデータベースを蓄えなければなりません。サーバーでの
統計分析は人気を得ています。これには、利用者は単にメールを読めば良いと
いう長所と、しかしサーバーにそれが過ってメールを分類したことを伝えるの
が困難だという短所があります。

余人の言を待たずとも、spam との戦いは楽ではありません。ママからの電子メー
ルとバイアグラ広告を区別する魔法のスイッチはありません。人々は非-spam
と spam を区別するのに手を焼いているというのに。それは、spammers が懸命
にそれらをママだと思わせようとしているのが本質だからです。Spamming は、
世界が彼らに恩義があると思っている人々の一団からの、腹立たしく、無責任
で、ばかげた行為です。以下の各章が spam なる疫病との戦いの助けになるこ
とを望みます。



File: gnus-ja.info, Node: Anti-Spam Basics, Next: SpamAssassin, Prev: The problem of spam, Up: Thwarting Email Spam

Spam 退治の基礎
---------------

Spam に対処する一つの方法は、Gnus にすべての spam を `spam' メールグルー
プに分離させてしまうことです (*Note Splitting Mail::)。

最初に、あなたに連絡することができる正しいメールアドレスを一つ選び、そ
れをすべてのあなたのニュース記事の `From' ヘッダーに入れましょう。(ここ
では `larsi@trym.ifi.uio.no' を選びましたが、`larsi+usenet@ifi.uio.no'
の形式のたくさんのアドレスの方が良い選択です。あなたのサイトの
sendmail の設定がメールアドレスのローカル部としてどんなキーワードを受け
付けるかは、あなたのサイトのシステム管理者に聞いて下さい。)

     (setq message-default-news-headers
           "From: Lars Magne Ingebrigtsen <larsi@trym.ifi.uio.no>\n")

そして `nnmail-split-fancy' に以下の分割規則を入て下さい (*Note Fancy
Mail Splitting::)。

     (...
      (to "larsi@trym.ifi.uio.no"
          (| ("subject" "re:.*" "misc")
             ("references" ".*@.*" "misc")
             "spam"))
      ...)

この意味は、このアドレスに届いたすべてのメールが疑わしいが、`Re:' で始
まる `Subject' が付いているか、`References' ヘッダーが付いていればおそ
らく OK だろう、ということです。残りはすべて `spam' グループに行きます。
(このアイデアはおそらく Tim Pierce 氏によるものです。)

これに加えて、多くのメール spam 屋は、あなたのところの SMTP サーバーと
直接話して、`To' ヘッダーにあなたのメールアドレスが明示されないようにし
ます。なんでそんなことをするのかはわかりませんが--もしかしたら、この裏
をかく機構の裏をかくためかな? どちらにしても、対処は簡単なことです--特
級分割規則を以下のように終端させることによって、あなた宛てでないものを
全部 `spam' グループに入れるだけです:

     (
      ...
      (to "larsi" "misc")
      "spam")

私の経験では、これで実質的にはすべてが正しいグループに分類されます。ま
あ、それでもときどき `spam' グループをチェックして、正しいメールがある
かチェックしなくてはいけませんけどね。あなたが自分が良いネットワーク市
民であると思っているなら、それぞれの押し付け宣伝メールの関係当局に苦情
を送り付けることさえもできます--暇なときにでもね。

これで私のところでは動いています。これでみんなは簡単な方法で私に連絡を
取ることができ (普通に `r' を押すだけでできる)、私は spam に煩わされる
ことはまったくありません。お互いに有利な状況です。私に言わせれば、
`From' ヘッダーを偽造して存在しないドメインに送らせるのはすごく良くない
です。

     訳注: 以上の文章は 1997年4月に書かれました。

この手法には注意して下さい。Spammers はそれに気付いています。



File: gnus-ja.info, Node: SpamAssassin, Next: Hashcash, Prev: Anti-Spam Basics, Up: Thwarting Email Spam

SpamAssassin, Vipul's Razor, DCC, etc
-------------------------------------

Spam を避けるための前章のヒントが十分だった日々は過ぎ去りました。今では
受け取ったたくさんの spam を減らすという触れ込みの多くの道具があります。
この章は、新しい道具が古いものに取って代わって行くにつれてすぐに時代遅
れになってしまうでしょうが、幸いなことにこれらのほとんどの道具は類似の
インターフェースを持っているようです。この章は例として SpamAssassin を
使っていますが、他のほとんどの道具にも簡単に適合するはずです。

この章は `spam.el' パッケージとは関係無いことに注意して下さい。それは次
の章で論じられます。すべての `spam.el' の機能に関心が無いのならば、これ
らの単純なレシピで間に合わせることができます。

もしあなたが使う道具がメールサーバーにインストールされていないならば、
あなた自身がそれを呼び出す必要があります。以下に `:postscript' メールソー
ス指示子 (*Note Mail Source Specifiers::) を使う場合の考え方を示します。

     (setq mail-sources
           '((file :prescript "formail -bs spamassassin < /var/mail/%u")
             (pop :user "jrl"
                  :server "pophost"
                  :postscript
                  "mv %t /tmp/foo; formail -bs spamc < /tmp/foo > %t")))

いったんメールを受けるスプールをどうにかして処理する、例えばそのメール
に spam であることを表示するヘッダーを含めるようにすれば、それをふるい
落とす準備は完了です。使うのは普通の分割方式 (*Note Splitting Mail::)
です:

     (setq nnmail-split-methods '(("spam"  "^X-Spam-Flag: YES")
                                  ...))

または特級分割方式 (*Note Fancy Mail Splitting::) です:

     (setq nnmail-split-methods 'nnmail-split-fancy
           nnmail-split-fancy '(| ("X-Spam-Flag" "YES" "spam")
                                  ...))

いくらかの人たちは `:prescript' を使ってメールをいろんなプログラムにパ
イプすることを嫌うかもしれません (もし何かのプログラムにバグがあったら、
すべてのメールを失ってしまうかもしれません)。あなたがそれらの一人ならば、
別の解は分割するときに外部の道具を呼ぶことです。特級分割方式の例です:

     (setq nnmail-split-fancy '(| (: kevin-spamassassin)
                                  ...))
     (defun kevin-spamassassin ()
       (save-excursion
         (widen)
         (if (eq 1 (call-process-region (point-min) (point-max)
                                        "spamc" nil nil nil "-c"))
             "spam")))

Nnimap バックエンドの場合、ディフォルトでは記事のボディーがダウンロード
されないことに注意して下さい。それをするためには
`nnimap-split-download-body' を `t' に設定する必要があります (*Note
Splitting in IMAP::)。

以上がこれに関することです。ある種の spam はどうしても素通りしてしまい
がちなので、spam を読むはめになったときに呼ぶための気の利いた関数が必要
でしょう。これがその気の利いた関数です:

     (defun my-gnus-raze-spam ()
       "SPAM の処理を Vipul の Razor に委ねてから、
     それに期限切れ消去可能の印を付けます。"
       (interactive)
       (gnus-summary-show-raw-article)
       (gnus-summary-save-in-pipe "razor-report -f -d")
       (gnus-summary-mark-as-expirable 1))



File: gnus-ja.info, Node: Hashcash, Next: Filtering Spam Using The Spam ELisp Package, Prev: SpamAssassin, Up: Thwarting Email Spam

Hashcash
--------

Spam と戦うための斬新な技法は、いくらか負担にはなるが明らかに独特なこと
を、送信するメッセージに対して送信者が行なうことを求めることです。これ
はインターネット標準の一部ではないので、世界中のすべての人がこの技法を
使うことは当てにできないという明らかな欠点がありますが、小規模な集団で
は役に立つでしょう。

前章の道具類は実際にうまく働きますが、それらは新しい形式の spam が現れ
るたびにしょっちゅう更新かつ整備されることによってのみ動作します。この
ことは、小さなパーセンテージの spam がいつも素通りしてしまうことを意味
します。それはまた、どこかでだれかがそれらの道具を更新するために、たく
さんの spam を読まなければならないことをも意味します。Hashcash はそれを
回避しますが、代わりにあなたが電子メールで連絡するすべての人たちに、な
るべくその仕組みをサポートしてもらいたいのです。あなたは実際的
(pragmatic) か独断的 (dogmatic) かの観点で、二つの取り組みを考えること
ができます。それらのやり方には、それら自体の利点もあれば不利な点もあり
ますが、現実の世の中ではしばしばあるように、それらを連係させたものはど
ちらか一方より強力です。

「いくらか負担にはなる」とは CPU 時間を消費することで、もっと具体的には
一定数のビットまでハッシュの衝突 (hash collision) を計算することです。
その結果としての hashcash クッキーは `X-Hashcash:' ヘッダーに挿入されま
す。もっと詳しいこと、そしてこの機能を使うためにインストールする必要が
ある外部アプリケーションの `hashcash' については
`http://www.hashcash.org/' を参照して下さい。さらなる情報が
`http://www.camram.org/' で見つかるでしょう。

送信するメッセージのそれぞれについて hashcash を生成させようと思うなら、
以下のように `message-generate-hashcash' (*Note メールヘッダー:
(message-ja)Mail Headers.) をカスタマイズして下さい:

     (setq message-generate-hashcash t)

いくつかの追加の変数の設定もしなければなりません:

`hashcash-default-payment'
     この変数はハッシュの衝突を成すディフォルトのビット数を示します。ディ
     フォルトは 20 です。提唱されている有効な値は 17 から 29 までの数で
     す。

`hashcash-payment-alist'
     何人かの受取人は、あなたにディフォルトより多くの CPU 時間を費やす
     ことを要求するかもしれません。この変数は `(ADDR AMOUNT)' の形式の
     要素のリストで、ADDR は受取人 (メールアドレスかニュースグループ)、
     AMOUNT は衝突で必要とされるビット数です。これはまた `(ADDR STRING
     AMOUNT)' の要素を持つことも可能で、STRING は文字列 (通常はメールア
     ドレスかニュースグループ名) として使われます。

`hashcash-path'
     `hashcash' バイナリーがインストールされている場所です。この変数は
     `executable-find' によって自動的に設定されるはずですが、それが
     `nil' だった (ありがちなのは `hashcash' バイナリーが実行 path 中に
     無い) 場合は、hashcash payments をチェックするときに警告され、
     hashcash payments を生成するときはエラーになるでしょう。

Gnus は hashcash クッキーを認証することができますが、手でカスタマイズし
たメール濾過スクリプトで行なうこともできます。メッセージ中の hashcash
クッキーを認証するには、`hashcash.el' ライブラリーの
`mail-check-payment' 関数を使って下さい。入ってきたメールの hashcash クッ
キーを確認し、それによってメールを濾過するために、`spam-use-hashcash'
バックエンドで `spam.el' を使うこともできます (*Note Anti-spam
Hashcash Payments::)。



File: gnus-ja.info, Node: Filtering Spam Using The Spam ELisp Package, Next: Filtering Spam Using Statistics with spam-stat, Prev: Hashcash, Up: Thwarting Email Spam

Spam ELisp パッケージを使った Spam の濾過
-----------------------------------------

`spam.el' が生まれた背景には、spam の検出と濾過のための官制センターを
Gnus の中に持つという目的がありました。そのために `spam.el' は二つのこ
とを行ないます: 新しいメールを濾過し、spam または ham として知られてい
るメールを分析することです。"Ham" は `spam.el' のいたる所で spam ではな
いメッセージを示すために使う名前です。

`spam.el' シーケンスのイベントの章をちゃんと読みましょう。
*Note Spam ELisp Package Sequence of Events:: を参照して下さい。

`spam.el' を使うには、`spam.el' を自動読み込み (autoload) して
`spam.el' の各フックをインストールするために、関数 `spam-initialize' を
*実行しなければなりません*。一つ例外があります: もし `spam-use-stat' の
設定を使う (*Note spam-stat spam filtering::) のであれば、それを
`spam-initialize' より前に on にしておかなければなりません:

     (setq spam-use-stat t) ;; 必要なら
     (spam-initialize)

では `spam.el' を読み込むと何が起きるでしょうか?

第一に `spam-initialize' によっていくつかのフックが動作するようになりま
す。`spam-stat' がそれらのデータベースをセーブできるようにするフックと、
グループに入るときと抜けるときに興味深いものごとを起こすフックがありま
す。シーケンスのイベントについての詳細は後述します (*Note Spam ELisp
Package Sequence of Events::)。

以下のキーボード命令が使えるようになります:

`M-d'
`M s x'
`S x'
     `gnus-summary-mark-as-spam'。

     現在の記事に spam として印を付け、それを `$' 印で表示します。Spam
     記事を見たときはいつでも、グループを抜ける前に必ず `M-d' でその概
     略行に印を付けるようにして下さい。これは *spam* グループの未読記事
     に対しては自動的に行なわれます。

`M s t'
`S t'
     `spam-bogofilter-score'。

     このコマンドがちゃんと働くためには Bogofilter をインストールしなけ
     ればなりません。*Note Bogofilter::.

また、`spam.el' を読み込むと、その変数群をカスタマイズすることができる
ようになります。`spam' 変数グループについて `customize-group' を試して
みて下さい。

* Menu:

* Spam ELisp Package Sequence of Events::
* Spam ELisp Package Filtering of Incoming Mail::
* Spam ELisp Package Global Variables::
* Spam ELisp Package Sorting and Score Display in Summary Buffer::
* Spam ELisp Package Configuration Examples::
* Blacklists and Whitelists::
* BBDB Whitelists::
* Gmane Spam Reporting::
* Anti-spam Hashcash Payments::
* Blackholes::
* Regular Expressions Header Matching::
* Bogofilter::
* SpamAssassin back end::
* ifile spam filtering::
* spam-stat spam filtering::
* SpamOracle::
* Extending the Spam ELisp package::



File: gnus-ja.info, Node: Spam ELisp Package Sequence of Events, Next: Spam ELisp Package Filtering of Incoming Mail, Prev: Filtering Spam Using The Spam ELisp Package, Up: Filtering Spam Using The Spam ELisp Package

Spam ELisp Package Sequence of Events
.....................................

どのように `spam.el' が働くかを理解するために、必ずこの章を読んで下さい。
読み飛ばし、速読、または斜め読みしてはいけません。

`spam.el' と Gnus の間には、言ってみるならば二つの *接点* があります。
新着メールが spam かどうかを検査するときと、グループを抜けるときです。

Gnus における新着メールの取得は、二つの方法の一方で行なわれます。新着メー
ルを分割するか、グループに入るときに新しい記事を ham と spam に分類する
かの、どちらでも可能です。

新着メールの分割は、`nnml' や `nnimap' のように、新しいメールが "Spool
File" と呼ばれる一つのファイルに取り込まれるバックエンドに、より適して
います。*Note Spam ELisp Package Filtering of Incoming Mail:: を参照し
て下さい。

`nntp' のようなバックエンドには新着メールのスプールが無いので、代わりの
機構を使わなければなりません。これは、サーバーが新着メールの分割を担当
していて、Gnus がさらにまた分割を行なわないバックエンドでも、(代わりの
機構が) 必要になるかもしれません。グループパラメーター
`spam-autodetect' と `spam-autodetect-methods' (普通通りに `G c' and
`G p' で操作できます)、そしてそれらに対応する変数
`gnus-spam-autodetect' および `gnus-spam-autodetect-methods' (`M-x
customize-variable' で操作できます) が役立ちます。

`spam-autodetect' が使われる場合 (それはグループ/トピックで使うために、
必要に応じて正規表現の合致により、または十把ひとからげに ON にすること
ができます)、それはグループに入るための (そのグループの概略バッファーに
移動するための) 処理において実行されます。したがって、まだ読まれたこと
が無い、または未読の記事があるグループに入ることは、新着メールの検査の
代わりになります。まだ読まれたことが無い記事だけ、またはすべての未読の
記事のどちらが処理されるかは、`spam-autodetect-recheck-messages' によっ
て決められます。`t' に設定されると、未読のメッセージが再検査されます。
おそらく、まだ読まれたことが無いメッセージのディフォルトの検査だけは、
着実に行なわなければならないでしょう。

`spam-autodetect' は、利用者が同時に spam の濾過を制御することを多少な
りとも認めます。利用者は各グループの spam 検出の手段を、より多く制御す
ることができるでしょう。したがって、例えば 「疑わしい」グループにおいて
`spam-use-blacklist' および `spam-use-bogofilter' の手段が有効になって
いても、`ding' グループは自動検出手段として `spam-use-BBDB' を持つこと
ができます。Spam として検出されるすべての記事には spam 印 `$' が付けら
れ、グループを抜けるときに通常の spam として処理されます。`spam-split'
で行なっても良いように、利用者は検査の *手順* を軽く制御するようにしま
す。

新たに分割されたメールがグループに入ったら、またはメッセージが ham また
は spam として自動検出されたら、後でさらに spam 処理を行なわせるために、
それらのグループを (必要なら入った後で) 抜け出なくてはなりません。
`spam-content' パラメーター (*Note Spam ELisp Package Global
Variables::) に基づいて、そのグループが ham または spam グループのどち
らだと見なされるか、あるいはは未分類グループだと見なされるかは重要です。
Spam グループは、そこに入ると、まだ読まれたことが無いか、または未読の記
事に spam の印が付けられる (変数 `spam-mark-only-unseen-as-spam' に依存
します) という付加的な特性を持ちます。このように、分割されて spam グルー
プに入れられた記事には、あなたがそのグループに入ったときに自動的に
spam の印が付けられます。

このように、グループ (の概略バッファー) を抜けると `spam-processors' が
(何であれ設定されていれば) 適用され、処理されたメールは記事の種別に基づ
いて `ham-process-destination' か `spam-process-destination' に移動させ
られます。`ham-process-destination' または `spam-process-destination'
のどちらがふさわしい (訳註: 移動先として) 場合でも、それらが `nil' だっ
たら、その記事は現在のグループに残されます。

どのグループででも spam が見つかったら (非-spam グループに限っては
`spam-move-spam-nonspam-groups-only' で変更することができます)、グルー
プを抜けるときに有効になっている `spam-processors' (*Note Spam ELisp
Package Global Variables::) で処理されます。さらに後でトレーニングまた
は削除するために、spam は `spam-process-destination' (*Note Spam ELisp
Package Global Variables::) に移動させられます。Spam が再三処理されるこ
とを望まないならば、`gnus-registry.el' パッケージを読み込んで、
`spam-log-to-registry' 変数を有効にしなければなりません。このように
spam はどこでも検出され処理されます。それが、ほとんどの人々がそうしたい
と思うことです。`spam-process-destination' が `nil' だった場合には、
spam には期限切れ消去の印が付けられます。普通それは正しい行ないです。

例えば NNTP のような読み込み専用バックエンドであるために spam を移動で
きない場合、それはコピーされます。

Ham グループにおいて `ham-marks' パラメーターによって決定される ham メー
ルが見つかったら、グループを抜けるときに有効になっている ham
`spam-processor' で処理されます。さらに、変数
`spam-process-ham-in-spam-groups' および
`spam-process-ham-in-nonham-groups' によって、どこで見つかった ham でも
処理できるように動作を変更することができます。Ham が再三処理されること
を望まないならば、`gnus-registry.el' パッケージを読み込み、
`spam-log-to-registry' 変数を有効にしなければなりません。このように
ham は必要な場合だけ検出され処理されます。それはほとんどの人々が、そう
したいと思うことです。これに関する詳細は *Note Spam ELisp Package
Configuration Examples:: にあります。

例えば NNTP のような読み込み専用バックエンドであるために ham を移動でき
ない場合、それはコピーされます。

これらのすべてがわけがわからなくても、心配は要りません (訳注: でも訳文
が正確ではないかもしれないので、変だと思ったら原文を見てね :-p)。すぐに
それは神経インターフェース上に Lisp で小話を書くように自然なことになり
ます... え゛ごめん、それにはまだ 50年早いですね。ただ私たちを信頼して下
さい。それは捨てたものではありません。



File: gnus-ja.info, Node: Spam ELisp Package Filtering of Incoming Mail, Next: Spam ELisp Package Global Variables, Prev: Spam ELisp Package Sequence of Events, Up: Filtering Spam Using The Spam ELisp Package

Spam ELisp Package Filtering of Incoming Mail
.............................................

入ってくるメールを濾過する目的で `spam.el' の機構を使うには、特級分割リ
スト `nnmail-split-fancy' または `nnimap-split-fancy' に以下のものを追
加しなければなりません:

     (: spam-split)

特級分割は、メールの取り込みに nnmail か nnimap のどちらのバックエンド
を使っているかに応じて、`nnmail-split-fancy' または
`nnimap-split-fancy' から呼ばれることに注意して下さい。

また、`spam-split' はいかなる方法によっても新着メールを改変しません。

`spam-split' 関数は入ってくるメールを処理して、spam と見なされたメール
を変数 `spam-split-group' で与えられる名前のグループに送ります。ディフォ
ルトではそのグループ名は `spam' ですが、`spam-split-group' でカスタマイ
ズすることが可能です。`spam-split-group' の内容は、必ず *相対的な* グルー
プ名 (訳注: `spam' のようなバックエンドとサーバーを特定しないグループ名)
にして下さい。これは、例えば `your-server' という `nnimap' サーバーにお
いて、`spam' という値が最終的に `nnimap+your-server:spam' になるという
ことです。従って `nnimap+server:spam' という値は間違いであって、それは
実際には `nnimap+your-server:nnimap+server:spam' というグループになり、
それが働くか働かないかは、あなたのサーバーが奇妙なグループ名に対して寛
容かどうかによるでしょう。

また、例えば `spam-use-regex-headers' または `"maybe-spam"' のようなパ
ラメーターを、`spam-split' に与えることもできます。なぜこれが有用なので
しょうか?

次の分割の規則を考えてみて下さい (`spam-use-regex-headers' と
`spam-use-blackholes' が設定されているものとします):

      nnimap-split-fancy '(|
                           (any "ding" "ding")
                           (: spam-split)
                           ;; ディフォルトのメールボックス。
                           "mail")

さて、問題は ding 宛てのメッセージをすべて ding フォルダーに入れようと
していることです。でもそれは、ding メーリングリスト宛てに送られた明らか
な spam (例えば SpamAssassin と `spam-use-regex-headers' によって検出さ
れる spam) を許してしまうでしょう。一方、いくつかの ding 宛てのメッセー
ジはブラックホールリストに載っているメールサーバーからやって来るので、
ding の規則より前に `spam-split' を発動することができません。

SpamAssassin ヘッダーで ding の規則を置き換えることはできますが、他のす
べての `spam-split' の規則 (第二の正規表現ヘッダー検査を含む) は ding
の規則の後になってしまうでしょう:

      nnimap-split-fancy '(|
     ;;; `spam-use-regex-headers' で検出された
     ;;; すべての spam は `regex-spam' へ。
                           (: spam-split "regex-spam" 'spam-use-regex-headers)
                           (any "ding" "ding")
     ;;; spam-split で検出された他のすべての spam は
     ;;; `spam-split-group' へ。
                           (: spam-split)
                           ;; ディフォルトのメールボックス。
                           "mail")

これは、あなたの特別な必要に応じた特定の `spam-split' 検査を起動し、そ
れらの検査の結果で特定の spam グループを指し示します。すべてのメールに
対して、すべての spam 検査を行なう必要はありません。これが良いもう一つ
の理由は、分割規則を設定してあるメーリングリスト宛てのメッセージに対し
て、資源集約的なブラックホール・チェックを実行する必要がないということ
です。さらに、nnmail の分割のために nnimap のものとは異なる spam 検査の
やり方を設定することもできるでしょう。気が狂うー。

あなたが検査で明確に `spam-split' を呼び出すようにしていたとしてもなお、
`spam-use-regex-headers' を `t' に設定することによって実行されるような
検査を行なっていなければなりません。なぜなら `spam.el' を読み込むときに、
あなたが設定している何らかの `spam-use-xyz' 変数に応じた、条件付きの読
み込みが行なわれるからです。

*IMAP 利用者への注意*

ヘッダーだけではなくメッセージ全体に基づいて分割を行ないたい場合は、ブー
ル変数 `nnimap-split-download-body' を設定する必要があります。ディフォ
ルトでは、nnimap バックエンドはメッセージヘッダーだけを取り込みます。例
えば `spam-check-bogofilter'、`spam-check-ifile' または
`spam-check-stat' (それらの分割器はメッセージの本文全体から情報を得るこ
とができます) のような *統計的な* 濾過器を使う場合には、この変数は自動
的に設定されます。それは IMAP の動作を遅くしてしまうので、統計的ではな
いバックエンドに対してディフォルトでは設定されていません。

*Note Splitting in IMAP::.



File: gnus-ja.info, Node: Spam ELisp Package Global Variables, Next: Spam ELisp Package Sorting and Score Display in Summary Buffer, Prev: Spam ELisp Package Filtering of Incoming Mail, Up: Filtering Spam Using The Spam ELisp Package

Spam ELisp Package Global Variables
...................................

Ham プロセッサーと spam プロセッサーの概念は非常に重要です。あるグルー
プの ham プロセッサーと spam プロセッサーは、`spam-process' グループパ
ラメーターか `gnus-spam-process-newsgroups' 変数で設定することができま
す。後で同様のメールを spam ではないと解釈できるようにするために、ham
プロセッサーは非 spam (*ham*) であることがわかっているメールを受け取っ
て、何らかの方法で処理します。Spam プロセッサーは、後で同様の spam が検
出されるように、spam であることがわかっているメールを受け取って処理しま
す。

Spam または ham プロセッサーを指定する形式を、かつてはシンボルで表して
いたのですが、現在は CONS セルになっています。詳しくは個々の spam プロ
セッサーの項を参照して下さい。

Gnus はあなたが受け取った spam から学びます。あなたは一つ以上の spam グ
ループに spam 記事を集めて、変数 `spam-junk-mailgroups' を適切に設定も
しくはカスタマイズしなければなりません。また、spam を含めるグループを、
そのグループパラメーター `spam-contents' を
`gnus-group-spam-classification-spam' に設定するか、またはそれに対応す
る変数 `gnus-spam-newsgroup-contents' をカスタマイズすることによって宣
言することができます。`spam-contents' グループパラメーターと
`gnus-spam-newsgroup-contents' 変数は、それらの種別を
`gnus-group-spam-classification-ham' に設定することによって、*ham* グルー
プであることを宣言するために使うこともできます。グループが
`spam-junk-mailgroups', `spam-contents' または
`gnus-spam-newsgroup-contents' であることを示す分類が行なわれていないと、
それらは *未分類* であると解釈されます。すべてのグループはディフォルト
では未分類です。

Spam グループでは、ディフォルトですべてのメッセージが spam であると解釈
されます: そのグループに入ると、それらに `$' 印 (`gnus-spam-mark') が付
きます。あるメッセージを見て、いったんそれに spam の印を付けても、後で
取り消せば、その後そのグループに入ったときに、それには spam 印は付きま
せん。`spam-mark-only-unseen-as-spam' パラメーターを `nil' にすれば、そ
ういう動作をやめさせる、つまりすべての未読メッセージに spam 印が付くよ
うにすることができます。そのグループの概略バッファーにいるときに、やっ
ぱり spam ではなかったとわかった記事があったら、それらのすべてから `$'
印を消さなければなりません。`$' 印を消すには `M-u' でその記事を「未読」
にするか、あるいは `d' を使って spam ではないものとして読んだことを宣言
すれば良いでしょう。グループを抜けるとき、すべての spam 印 (`$') が付い
た記事は spam プロセッサーに送られ、それらを spam の標本として学習しま
す。

メッセージは他のいろいろな方法によっても消去されるかもしれないし、
`ham-marks' グループパラメーターが無効にされなければ、`R' 印と `r' 印、
および `X' 印と `K' は、`Y' 印と同様に、すべて spam では無い記事に関連
付けられるものと解釈されます (それぞれ `R' はディフォルトの既読の印、
`r' 明示的な消去の印、`X' は自動的な削除の印、`K' は明示的な削除の印、
そして `Y' は低いスコアのため印です)。この仮定は、特に真性の spam を検
出するために消去 (kill) ファイルかスコアファイルを使っている場合は、間
違いかもしれません。そうであれば `ham-marks' グループパラメーターを調整
するべきです。

 -- Variable: ham-marks
     このグループまたはトピックパラメーターを ham であると解釈したい印
     のリストに設定することができます。ディフォルトでは、消去
     (deleted)、既読 (read)、削除 (killed)、kill ファイルにあるもの
     (kill-filed) および低いスコア (low-score、既読だけれども spam では
     ないと考える) 印のリストです。Ham 印のリストに可視 (tick) 印を含め
     ることが役立つこともあります。未読印を ham 印にすることは、通常そ
     れが分類されていないことを表すので、勧められません。しかし、あなた
     がそれを行なうことはできるし、私たちに不満はありません。

 -- Variable: spam-marks
     このグループまたはトピックパラメーターを spam であると解釈したい印
     のリストに設定することができます。ディフォルトでは spam 印だけを持
     つリストです。それを変更することは勧めませんが、本当にそうしたいの
     ならご勝手に。

グループを抜けるときに (そのグループが *何* であっても)、その
`spam-contents' の分類にかかわらず、spam 印が付いているすべての記事は
spam プロセッサーに送られ、それらを spam の標本として学習します。意図的
にたくさんの消去を行なうと、たまにそれは見ていない `K' 印が付いた記事群
で終わるかもしれません。そしてそれらは偶然に spam を含んでいるかもしれ
ません。最も良いのは、本当の spam に `$' が付いていて、他に何も印が無い
ことを確かめることです。

*Spam* グループを抜けるときに、spam 印が付いているすべての記事には
spam プロセッサーで処理した後で期限切れ消去の印が付けられます。これは
*未分類* または *ham* グループに対しては行なわれません。さらに spam グ
ループにあるどの *ham* 記事も、`ham-process-destination' グループパラメー
ターが示す場所か `gnus-ham-process-destinations' 変数の中で合致する場所
のどちらかに移されます。後者はグループ名に合致する正規表現のリストです
(`M-x customize-variable RET gnus-ham-process-destinations' によってこ
の変数をカスタマイズするのが最も簡単です)。変数を手でカスタマイズする方
が好きな人のために言っておくと、それぞれのグループ名のリストは普通の
Lisp の list です。`ham-process-destination' パラメーターが設定されてい
ないと、ham 記事は移動させられません。
`spam-mark-ham-unread-before-move-from-spam-group' パラメーターが設定さ
れていると、ham 記事には移動させられる前に未読の印が付けられます。

例えば NNTP のような読み込み専用バックエンドであるために ham が移動でき
ない場合、それはコピーされます。

グループごとに、または正規表現に合致するグループごとに、複数の移動先を
指定できることに注目して下さい!  これによって ham 記事を正規のメールグ
ループと *ham トレーニング* グループに送ることができます。

*Ham* グループを抜けるときに、ham 印が付いているすべての記事は ham プロ
セッサーに送られ、それらを spam ではない標本として学習します。

変数 `spam-process-ham-in-spam-groups' はディフォルトでは `nil' です。
Spam グループで見つかった ham がプロセッサーに送られるようにしたい場合
は `t' にして下さい。通常これは行なわれません。その代わり、あなたが自分
で ham 記事を ham グループに送って、そこで処理することが想定されていま
す。

変数 `spam-process-ham-in-nonham-groups' はディフォルトでは `nil' です。
Ham ではない (spam または未分類の) グループで見つかった ham がプロセッ
サーに送られるようにしたい場合は `t' にして下さい。通常これは行なわれま
せん。その代わり、あなたが自分で ham 記事を ham グループに送って、そこ
で処理することが想定されています。

*Ham* または *未分類* グループを抜けるときに、すべての *spam* 記事は、
`spam-process-destination' グループパラメーターが示す場所か
`gnus-spam-process-destinations' 変数の中で合致する場所のどちらかに移さ
れます。後者はグループ名に合致する正規表現のリストです (`M-x
customize-variable RET gnus-spam-process-destinations' によってこの変数
をカスタマイズするのが最も簡単です)。変数を手でカスタマイズする方が好き
な人のために言っておくと、それぞれのグループ名のリストは普通の Lisp の
list です。`spam-process-destination' パラメーターが設定されていないと、
spam 記事は単に期限切れ消去されます。グループ名は完全形であること、すな
わちグループバッファーでグループ名の前に `nntp:servername' のようなもの
が見える場合は、ここでもそれを使う必要があります。

例えば NNTP のような読み込み専用バックエンドであるために spam が移動で
きない場合、それはコピーされます。

グループごとに、または正規表現に合致するグループごとに、複数の移動先を
指定できることに注目して下さい!  これによって spam 記事を正規のメールグ
ループと *spam トレーニング* グループに送ることができます。

Ham と spam に関する問題は、Gnus がディフォルトではこの処理を追跡してく
れないことです。複数回にわたって処理することを回避するために、
`spam.el' が `gnus-registry.el' を使って処理された記事を追跡するように、
`spam-log-to-registry' 変数を有効にして下さい。`gnus-registry.el' が登
録する数を制限してしまうと、制限が無い場合のように動作しないことを覚え
ておいて下さい。

Spam グループにある、まだ読まれたことが無い記事だけに spam の印を付けた
い場合は、この変数をセットして下さい。ディフォルトではセットされていま
す。これを `nil' にすると、未読の記事にも spam 印が付けられます。

Ham が spam グループから移動される前に印を消したい場合は、この変数をセッ
トして下さい。これは ham に印を付けるために可視 (tick) 印 (`!') のよう
なものを使う場合に、とても役に立ちます。記事はあたかもそれがメールサー
バーから来たばかりのように、無印で `ham-process-destination' に置かれる
でしょう。

この変数は `spam.el' が spam の自動検出を行なう場合に、まだ読まれたこと
が無い記事だけか、またはすべての未読記事のどちらに対して spam 検査を行
なうかを指示します。これはそのままにしておくことを勧めます。



File: gnus-ja.info, Node: Spam ELisp Package Sorting and Score Display in Summary Buffer, Next: Spam ELisp Package Configuration Examples, Prev: Spam ELisp Package Global Variables, Up: Filtering Spam Using The Spam ELisp Package

Spam ELisp Package Sorting and Score Display in Summary Buffer
..............................................................

概略バッファーに spam のスコアを表示することができます。また、それらの
spam のスコアによって、記事を並べ替えることもできます。

最初に、どのバックエンドを使うかを決める必要があります。
`spam-use-spamassassin'、`spam-use-spamassassin-headers' または
`spam-use-regex-headers' バックエンドを使う場合、`X-Spam-Status' ヘッダー
が使われます。`spam-use-bogofilter' を使う場合は、`X-Bogosity' が使われ
ます。`spam-use-crm114' を使うのならば、CRM114 スコア・フォーマットに合
致する、どんなヘッダーもが使われます。`spam.el' をロードする *前* に、
適切なバックエンド変数を t に設定する限り、うまくいくでしょう。
`spam.el' は、Gnus が内部的に必要とするヘッダーのリストに、正しいヘッダー
を自動的に追加します。

概略バッファーに spam のスコアを表示させるには、この行を `~/.gnus.el'
ファイルに加えて下さい (注: `spam.el' はディフォルトではそれを行なわな
いので、あなたが持っているかもしれない、存在するどんな `S' フォーマット
よりも優先されません)。

     (defalias 'gnus-user-format-function-S 'spam-user-format-function-S)

では、概略バッファーの行書法仕様 (summary line format) が `%uS' を使う
ように設定しましょう。以下は spam のスコアを 5桁の文字枠に表示する例で
す:

     (setq gnus-summary-line-format
      "%U%R %10&user-date; $%5uS %6k  %B %(%4L: %*%-25,25a%) %s \n")

最後に、spam の状態による並べ替えを全グループで行なわせるようにしましょ
う:

     (setq
      gnus-show-threads nil
      gnus-article-sort-functions
       '(spam-article-sort-by-spam-status))

グループ毎に行なわせたい場合は *Note Sorting the Summary Buffer:: を参
照して下さい。



File: gnus-ja.info, Node: Spam ELisp Package Configuration Examples, Next: Blacklists and Whitelists, Prev: Spam ELisp Package Sorting and Score Display in Summary Buffer, Up: Filtering Spam Using The Spam ELisp Package

Spam ELisp Package Configuration Examples
.........................................


Ted の設定
..........

From Ted Zlatanov <tzz@lifelogs.com>.

     ;; `gnus-registry-split-fancy-with-parent' と spam の自動検出のため。
     ;; 詳細は `gnus-registry.el' を参照。
     (gnus-registry-initialize)
     (spam-initialize)

     ;; 私は spam 印を付けるのに C-s を好む。
     (define-key gnus-summary-mode-map "\C-s" 'gnus-summary-mark-as-spam)

     (setq
      spam-log-to-registry t ;; Spam の自動検出のため。
      spam-use-BBDB t
      spam-use-regex-headers t ;; X-Spam-Flag (SpamAssassin) を捕まえる。
      ;; 名前に `spam' を含むすべてのグループには spam 記事がある。
      gnus-spam-newsgroup-contents '(("spam"
                                      gnus-group-spam-classification-spam))
      ;; これらの docstring を参照。
      spam-move-spam-nonspam-groups-only nil
      spam-mark-only-unseen-as-spam t
      spam-mark-ham-unread-before-move-from-spam-group t
      nnimap-split-rule 'nnimap-split-fancy
      ;; あなたの設定に追加する前に、これが何をするか理解せよ!
      nnimap-split-fancy '(|
                           ;; References を親まで辿ってそれらのグループ
                           ;; を入れる。
                           (: gnus-registry-split-fancy-with-parent)
                           ;; これはサーバー側の SpamAssassin タグを捕ま
                           ;; える。
                           (: spam-split 'spam-use-regex-headers)
                           (any "ding" "ding")
                           ;; Spam 記事はディフォルトで `spam' に行く
                           ;; ことに注意。
                           (: spam-split)
                           ;; ディフォルトのメールボックス。
                           "mail"))

     ;; G p で設定した私のパラメーター。

     ;; すべての nnml グループと、`nnimap+mail.lifelogs.com:train' と
     ;; `nnimap+mail.lifelogs.com:spam' を除いたすべての nnimap グループ
     ;; のためのパラメーター:
     ;; それは手動で検出したはずなので、どの spam も nnimap のトレーニン
     ;; ググループに送り込む。

     ((spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; すべての NNTP グループのためのパラメーター:
     ;; Spam を blacklist で、ham を BBDB で自動検出。
     ((spam-autodetect-methods spam-use-blacklist spam-use-BBDB)
     ;; すべての spam をトレーニンググループに送る。
      (spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; 私が spam を自動検出させたい、ほんのいくつかの NNTP グループ
     ;; のためのパラメーター:
     ((spam-autodetect . t))

     ;; 私の nnimap `nnimap+mail.lifelogs.com:spam' グループ (これは
     ;; spam グループ) のためのパラメーター:

     ((spam-contents gnus-group-spam-classification-spam)

      ;; どんな spam も私が ham 印を付けなければ
      ;; `nnimap+mail.lifelogs.com:train' に送り込まれる。(前述の
      ;; `gnus-spam-newsgroup-contents' の設定により、すべての
      ;; まだ読まれたことが無いメッセージを読むとそうなる。)

      (spam-process-destination "nnimap+mail.lifelogs.com:train")

      ;; どんな ham も私の `nnimap+mail.lifelogs.com:mail' フォルダー
      ;; に送り込まれるが、私の `nnimap+mail.lifelogs.com:trainham'
      ;; フォルダーにもトレーニングのために送り込む。

      (ham-process-destination "nnimap+mail.lifelogs.com:mail"
                               "nnimap+mail.lifelogs.com:trainham")
      ;; このグループでは `!' 印が付いているものだけが ham。
      (ham-marks
       (gnus-ticked-mark))
      ;; グループを抜けるときに blacklist に送信者を覚えさせる--これは
      ;; 明らかに不要で、単に私の鬱憤を晴らすためにある。
      (spam-process (gnus-group-spam-exit-processor-blacklist)))

     ;; その後 IMAP サーバー上で、私は SpamAssassin が spam を
     ;; 認識するトレーニングのために `train' グループを、ham を
     ;; 認識するトレーニングのために `trainham' グループを使う。
     ;; でも Gnus はそういうことはやってくれない。


サーバー上の IMAP サーバーで、統計的な濾過器と `spam.el' を使う
...............................................................

From Reiner Steib <reiner.steib@gmx.de>.

私のプロバイダーは (IMAP) メールサーバー上で (DCC と連係した)
bogofilter を立ち上げました。認識された spam は `spam.detected' へ行き、
残りには通常の濾過規則が適用される、すなわち `some.folder' か `INBOX'
に行きます。誤検出と見逃しのトレーニングは、それぞれ `training.ham' ま
たは `training.spam' に記事をコピーするか移動させることによって行なわれ
ます。サーバー上の cron ジョブが、それらを適切な ham または spam オプショ
ンとともに bogofilter に与え、`training.ham' および `training.spam' フォ
ルダーからそれらを削除します。

以下の `gnus-parameters' の要素群によって、`spam.el' はほとんどの仕事を
私のためにこなします:

        ("nnimap:spam\\.detected"
         (gnus-article-sort-functions '(gnus-article-sort-by-chars))
         (ham-process-destination "nnimap:INBOX" "nnimap:training.ham")
         (spam-contents gnus-group-spam-classification-spam))
        ("nnimap:\\(INBOX\\|other-folders\\)"
         (spam-process-destination . "nnimap:training.spam")
         (spam-contents gnus-group-spam-classification-ham))

   * The Spam folder: `spam.detected' フォルダーにおいて、私は誤検出
     (すなわち bogofilter か DCC が spam であると誤って判定した正当なメー
     ル) のチェックをしなければなりません。

     `gnus-group-spam-classification-spam' の項のために、すべてのメッセー
     ジには spam の印 (`$') が付けられます。誤検出を見つけたら、私は記
     事にいくつかの他の ham 印 (`ham-marks', *Note Spam ELisp Package
     Global Variables::) を付けます。グループを出るとき、それらの記事は
     `INBOX' (私が記事を置いておきたいところ) と `training.ham'
     (bogofilter のトレーニング用) の両方のグループにコピーされ、
     `spam.detected' フォルダーから削除されます。

     `gnus-article-sort-by-chars' の項は、私の誤検出の発見を簡単にしま
     す。私は、すべて似たサイズの、たくさんのワーム (sweN, ...) を受け
     取ります。それらをサイズ (つまり文字数) でまとめると、他の誤検出を
     見つけやすくなるのです。(もちろん厳密にはワームは spam (UCE, UBE)
     ではありません。ともあれ、それらの要らないメールを濾過するのに
     bogofilter は私にとって優秀な道具です。)

   * Ham folders: 私の ham フォルダーで、認識されなかった spam メール
     (見逃し) を見つけたときはいつでも、私は単に `S x'
     (`gnus-summary-mark-as-spam') を叩きます。グループを出るとき、それ
     らのメッセージは `training.spam' に移されます。


`spam-report.el' で Gmane グループの spam を報告する
....................................................

From Reiner Steib <reiner.steib@gmx.de>.

以下の `gnus-parameters' に納めた要素によって、`S x'
(`gnus-summary-mark-as-spam') で `gmane.*' グループの spam 記事に印を付
け、グループを出るときに Gmane に報告します:

        ("^gmane\\."
         (spam-process (gnus-group-spam-exit-processor-report-gmane)))

加えて、私は news.gmane.org からではなくローカルニュースサーバー
(leafnode) を通して記事を読んでいるので、`(setq
spam-report-gmane-use-article-number nil)' を使っています。つまり、記事
番号が news.gmane.org におけるものと異なるので、正しい記事番号を見つけ
るために `spam-report.el' に `X-Report-Spam' ヘッダーを検査させなければ
なりません。



File: gnus-ja.info, Node: Blacklists and Whitelists, Next: BBDB Whitelists, Prev: Spam ELisp Package Configuration Examples, Up: Filtering Spam Using The Spam ELisp Package

ブラックリストとホワイトリスト
..............................

 -- Variable: spam-use-blacklist
     入ってくるメールを分割するときにブラックリストを使いたい場合は、こ
     の変数を `t' に設定して下さい。送信者がブラックリストに載っている
     メッセージは `spam-split-group' に送られます。これは、送信者が
     spammer であることが定義されているメールに対してだけ動作する、明示
     的な濾過器です。

 -- Variable: spam-use-whitelist
     入ってくるメールを分割するときにホワイトリストを使いたい場合は、こ
     の変数を `t' に設定して下さい。送信者がホワイトリストに載っていな
     いメッセージは、次の spam-split 規則 (による検査工程) に送られます。
     これは、ホワイトリストに載っていない誰かのメッセージは spam とも
     ham とも見なされないことを意味する、明示的な濾過器です。

 -- Variable: spam-use-whitelist-exclusive
     送信者がホワイトリストに載っていないすべてのメッセージが spam だと
     見なされることを意味する暗黙の濾過器としてホワイトリストを使いたい
     場合は、この変数を `t' にして下さい。注意して使って下さい。

 -- Variable: gnus-group-spam-exit-processor-blacklist
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、spam 印が付
     いた記事の送信者がブラックリストに追加されます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-blacklist' の代わりに
     `(spam spam-use-blacklist)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-whitelist
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、ham 印が付い
     た *ham* グループの記事の送信者がホワイトリストに追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-whitelist' の代わりに `(ham
     spam-use-whitelist)' を使うことを推奨します。すべて同等に動作する
     ことは保証されます。

ブラックリストは、あなたが spam の送信者だと考えるアドレスに合致する正
規表現のリストです。例えば `vmadmin.com' の誰からでも来るメールを阻止す
るには、あなたのブラックリストに `vmadmin.com' を入れて下さい。空のブラッ
クリストで始めましょう。ブラックリストの各項目は Emacs の正規表現の構文
を使います。

逆に、ホワイトリストは何のアドレスが正当だと考えられるかを告げます。ホ
ワイトリストにあるアドレスからやって来たすべてのメッセージは、非-spam
だと見なされます。*Note BBDB Whitelists:: も見て下さい。ホワイトリスト
の各項目は Emacs の正規表現の構文を使います。

ブラックリストとホワイトリストのファイルの所在は、`spam-directory' 変数
(ディフォルトは `~/News/spam') または直接 `spam-whitelist' と
`spam-blacklist' 変数でカスタマイズすることができます。ホワイトリストと
ブラックリストのファイルは、ディフォルトでは `spam-directory' のディレ
クトリーにあり、それぞれ `whitelist' と `blacklist' という名前が付けら
れます。



File: gnus-ja.info, Node: BBDB Whitelists, Next: Gmane Spam Reporting, Prev: Blacklists and Whitelists, Up: Filtering Spam Using The Spam ELisp Package

BBDB ホワイトリスト
...................

 -- Variable: spam-use-BBDB
     `spam-use-whitelist' (*Note Blacklists and Whitelists::) に似てい
     ますが、ホワイトリストのアドレスの源として BBDB を使います。正規表
     現はありません。`spam-use-BBDB' をちゃんと動作させるには BBDB を読
     み込まなければ (load しなければ) なりません。その送信者が BBDB に
     載っていないメッセージは、次の spam-split 規則 (による検査工程) に
     送られます。これは、BBDB に載っていない誰かのメッセージは spam と
     も ham とも見なされないことを意味する、明示的な濾過器です。

 -- Variable: spam-use-BBDB-exclusive
     送信者が BBDB に載っていないすべてのメッセージが spam だと見なされ
     ることを意味する暗黙の濾過器として BBDB を使いたい場合は、この変数
     を `t' にして下さい。注意して使って下さい。BBDB に載っている送信者
     だけが通行を許され、他のすべては spammers として分類されます。

     `spam.el' に関する限りは、`spam-use-BBDB' の別名として
     `spam-use-BBDB-exclusive' を使うことができますが、それは別のバック
     エンドではありません。`spam-use-BBDB-exclusive' を `t' に設定すれ
     ば、BBDB による分割はすべて排他的になります。

 -- Variable: gnus-group-ham-exit-processor-BBDB
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、ham 印が付い
     た *ham* グループの記事の送信者が BBDB に追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-BBDB' の代わりに、`(ham
     spam-use-BBDB)' を使うことを推奨します。すべて同等に動作することは
     保証されます。



File: gnus-ja.info, Node: Gmane Spam Reporting, Next: Anti-spam Hashcash Payments, Prev: BBDB Whitelists, Up: Filtering Spam Using The Spam ELisp Package

Gmane Spam 報告
...............

 -- Variable: gnus-group-spam-exit-processor-report-gmane
     グループパラメーターか変数 `gnus-spam-process-newsgroups' をカスタ
     マイズして、このシンボルをグループの `spam-process' パラメーターに
     加えて下さい。これが加えられると、spam 印が付いた記事のグループが
     HTTP 経由で Gmane の管理者に報告されます。

     Gmane は `http://gmane.org' で見つけることができます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-report-gmane' の代わりに
     `(spam spam-use-gmane)' を使うことを推奨します。すべて同等に動作す
     ることは保証されます。

 -- Variable: spam-report-gmane-use-article-number
     この変数はディフォルトで `t' です。例えばあなた自身がニュースサーバー
     を運営しているなどの理由によって、ローカルな記事番号が Gmane の記事番号
     と合わない場合は、`nil' に設定して下さい。
     `spam-report-gmane-use-article-number' が `nil' であると、
     `spam-report.el' はその番号を記事のヘッダーから取得します。

 -- Variable: spam-report-user-mail-address
     Gmane への spam の報告に付加される User-Agent に現れるメールアドレ
     スです。これは、誤った報告が行なわれたときに、Gmane の管理者があな
     たに連絡できるようにするためのものです。ディフォルトは
     `user-mail-address' です。



File: gnus-ja.info, Node: Anti-spam Hashcash Payments, Next: Blackholes, Prev: Gmane Spam Reporting, Up: Filtering Spam Using The Spam ELisp Package

非-spam Hashcash 印
...................

 -- Variable: spam-use-hashcash
     `spam-use-whitelist' (*Note Blacklists and Whitelists::) に似てい
     ますが、送信者のアドレスの代わりに、潔白なメッセージの証しとして
     hashcash の印 (tokens) を使います。Hashcash 印が無いメッセージは次
     の spam-分割 (spam-split) 規則 (による検査工程) に送られます。これ
     は hashcash 印が見当たらないメッセージは spam とも ham とも見なさ
     れないことを意味する、明示的な濾過器です。



File: gnus-ja.info, Node: Blackholes, Next: Regular Expressions Header Matching, Prev: Anti-spam Hashcash Payments, Up: Filtering Spam Using The Spam ELisp Package

ブラックホール
..............

 -- Variable: spam-use-blackholes
     このオプションはディフォルトで無効になっています。このオプションを
     セットすると、Gnus にブラックホール型の分散 spam 処理システム (例
     えば DCC) を調べさせることができます。変数
     `spam-blackhole-servers' は、Gnus が意見を求めるブラックホール・サー
     バーのリストを持ちます。現在のリストはかなり広範囲に渡っていますが、
     もし時代遅れなサーバーを含んでいたら必ず私たちに知らせるようにして
     下さい。

     ブラックホール・チェックは `dig.el' パッケージを使います。しかし
     `spam-use-dig' を `nil' に設定すれば、より良い性能のために
     `dns.el' を代わりに使うことを `spam.el' に指示することができます。
     現状では `spam-use-dig' を `nil' に設定することは、いく人かの利用
     者が使えないかもしれないので、それが可能な性能改善であるにもかかわ
     らず推奨されません。しかし、それが動くかどうかを確かめることはでき
     ます。

 -- Variable: spam-blackhole-servers
     ブラックホール・チェックのために意見を求めるサーバーのリストです。

 -- Variable: spam-blackhole-good-server-regex
     ブラックホール・サーバーのリストと照合されてはならない IP の正規表現です。
     `nil' に設定されると無効になります。

 -- Variable: spam-use-dig
     `dns.el' パッケージの代わりに `dig.el' パッケージを使います。ディ
     フォルトの設定である `t' が推奨されます。

ブラックホール・チェックは入って来るメールに対してだけ行なわれます。ブ
ラックホールに spam または ham プロセッサーはありません。



File: gnus-ja.info, Node: Regular Expressions Header Matching, Next: Bogofilter, Prev: Blackholes, Up: Filtering Spam Using The Spam ELisp Package

正規表現によるヘッダーの合致検査
................................

 -- Variable: spam-use-regex-headers
     このオプションはディフォルトで無効になっています。このオプションを
     セットすると、Gnus に正規表現のリストとメッセージヘッダーを照合さ
     せることができます。変数 `spam-regex-headers-spam' および
     `spam-regex-headers-ham' が正規表現のリストを持ちます。メッセージ
     が spam か ham かどうかをそれぞれの変数を使って決めるために、Gnus
     はメッセージヘッダーを検査します。

 -- Variable: spam-regex-headers-spam
     メッセージヘッダーの中で一致した時に、それが spam であることを断定
     するための正規表現のリストです。

 -- Variable: spam-regex-headers-ham
     メッセージヘッダーの中で一致した時に、それが ham であることを断定
     するための正規表現のリストです。

正規表現によるヘッダーの検査は、入ってきたメールに対してだけ行なわれま
す。正規表現のために特有な spam または ham プロセッサーはありません。



File: gnus-ja.info, Node: Bogofilter, Next: SpamAssassin back end, Prev: Regular Expressions Header Matching, Up: Filtering Spam Using The Spam ELisp Package

Bogofilter
..........

 -- Variable: spam-use-bogofilter
     Eric Raymond の迅速な Bogofilter を `spam-split' に使用したい場合
     は、この変数をセットして下さい。

     Spam 記事に `$' 印を関連付ける最小限度の世話だけで、Bogofilter ト
     レーニングはすべてかなり自動的になります。Spam とそうでないものそ
     れぞれの種類について数百通ずつの記事を入手するまで、これをやらなけ
     ればなりません。デバッグまたは好奇心のどちらかのために概略モードで
     `S t' コマンドを使うことによって、現在の記事の *spam 度*
     (spamicity) スコア (0.0〜1.0) を表示させることができます。

     Bogofilter はメッセージが spam かどうかを、ある明確な閾値に基づい
     て見極めます。閾値はカスタマイズできます。Bogofilter のドキュメン
     トを調べて下さい。

     Path に `bogofilter' の実行ファイルが無い場合、Bogofilter の処理は
     取り消されます。

     `spam-use-bogofilter-headers' を使う場合は、これを有効にしてはいけ
     ません。

 -- Variable: spam-use-bogofilter-headers
     メッセージヘッダーだけを調べるために Eric Raymond の迅速な
     Bogofilter を `spam-split' に使用したい場合は、この変数をセットし
     て下さい。これは `spam-use-bogofilter' と同じように動作しますが、
     あらかじめ `X-Bogosity' ヘッダーがメッセージに存在しなければなりま
     せん。通常これは procmail の技法か、何かそれに似たもので行なうこと
     になるでしょう。Bogofilter のインストールに関する文書を調べて下さ
     い。

     `spam-use-bogofilter' を使う場合は、これを有効にしてはいけません。

 -- Variable: gnus-group-spam-exit-processor-bogofilter
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、spam 印が付
     いた記事が bogofilter の spam データベースに加えらます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-bogofilter' の代わりに
     `(spam spam-use-bogofilter)' を使うことを推奨します。すべて同等に
     動作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-bogofilter
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、ham 印が付い
     た *ham* グループの記事が非-spam 記事用の Bogofilter データベース
     に追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-bogofilter' の代わりに
     `(ham spam-use-bogofilter)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

 -- Variable: spam-bogofilter-database-directory
     これは Bogofilter がそのデータベースを格納するディレクトリーです。
     ディフォルトでは設定されていないので、Bogofilter はそれ自身のディ
     フォルトのデータベース・ディレクトリーを使います。

Bogofilter のメール分類器は、意図と目的の点で `ifile' に似ています。
Ham および spam のプロセッサーが提供され、記事で Bogofilter が使われる
べきか、または既に使われたかを spam-split に示すための
`spam-use-bogofilter' 変数と `spam-use-bogofilter-headers' があります。
この機能を検査するために Bogofilter のバージョン 0.9.2.1 が使われました。



