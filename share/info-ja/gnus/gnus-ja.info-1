Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: Top, Next: Starting Up, Prev: (dir), Up: (dir)

The Gnus Newsreader
*******************

Gnus を使うことによって Emacs でニュースを (それにメールも) 読むことが
できます。ニュースは NNTP、ローカルスプール、mbox ファイルなどのあらゆ
る極悪な手段を駆使して手に入れることができます。運試しをしてみようと思
うならば、すべてを同時に用いることもできます。

この説明書は No Gnus v0.4 に対応します。

* Menu:

* Starting Up::              ニュースを見つけるのには苦労が伴うかもしれない
* Group Buffer::             グループを選択し、購読し、削除する
* Summary Buffer::           記事を読み、保存し、投稿する
* Article Buffer::           記事を表示し、扱う
* Composing Messages::       メールとニュースを送るための情報
* Select Methods::           Gnus はすべてのメッセージをいろいろな選択方法で読む
* Scoring::                  記事に値を付ける
* Various::                  一般的な設定
* The End::                  さらば、そしてさようなら
* Appendices::               用語、Emacs 入門、FAQ、歴史、内部構造
* Index::                    変数、関数、概念の索引
* Key Index::                キー索引

Other related manuals

* Message:(message-ja).      メッセージの作成
* Emacs-MIME:(emacs-mime-ja). メッセージの作成; MIME パート
* Sieve:(sieve-ja).          Emacs で Sieve スクリプトを管理する
* PGG:(pgg-ja).              Gnus で PGP/MIME を使う
* SASL:(sasl-ja).            Emacs で SASL の認証を行なう

 -- The Detailed Node Listing ---

Starting Gnus

* Finding the News::            ニュースを取得する方法を選ぶ
* The First Time::              最初に起動したときに Gnus は何をするか
* The Server is Down::          そんなとき、どうすればメールを読めるか
* Slave Gnusae::                同時に一つ以上の Gnus を作動させることができる
* Fetching a Group::            グループを読むためだけに Gnus を起動する
* New Groups::                  Gnus が新しいグループに対して何をするか
* Changing Servers::            あるサーバーから別のサーバーへ移る必要があるかもしれない
* Startup Files::               やっかいなスタートアップファイル---`.newsrc'
* Auto Save::                   クラッシュからの回復
* The Active File::             遅い回線からのファイルの取得には時間がかかる
* Startup Variables::           変更したいと思うかもしれない変数

New Groups

* Checking New Groups::         どのグループが新しいかを決定する
* Subscription Methods::        新しいグループに対して Gnus は何をすべきか
* Filtering New Groups::        Gnus に特定の新しいグループを無視させる

Group Buffer

* Group Buffer Format::         表示されている情報と変更の方法
* Group Maneuvering::           グループバッファーを移動するコマンド
* Selecting a Group::           実際にニュースを読む
* Subscription Commands::       購読、購読中止、消去
* Group Data::                  グループの情報を変更する
* Group Levels::                レベル? それって何?
* Group Score::                 あなたの好きなグループを見つけ出す方法
* Marking Groups::              グループに印を付けておいて、後で処理できる
* Foreign Groups::              グループの作成と修正
* Group Parameters::            グループ毎に違ったパラメーターを持たせられる
* Listing Groups::              Gnus はグループをいろいろな分け方で表示できる
* Sorting Groups::              グループの順番の配置替え
* Group Maintenance::           きれいな `.newsrc' の保ち方
* Browse Foreign Server::       サーバーを概観できる。何が読めるのか見てみよう
* Exiting Gnus::                ニュースを読むのをやめて、仕事をしよう
* Group Topics::                グループを切り混ぜて、トピックごとに分割する
* Misc Group Stuff::            他にできること

Group Buffer Format

* Group Line Specification::    グループバッファーの見え方を決める
* Group Mode Line Specification::  グループバッファーのモード行
* Group Highlighting::          グループバッファーにきれいに色を付ける

Group Topics

* Topic Commands::              超簡単対話型命令
* Topic Variables::             Lisp でトピックをカスタマイズする方法
* Topic Sorting::               トピック毎別々に並べ替える
* Topic Topology::              全世界の地図
* Topic Parameters::            あるトピックのすべてのグループに適用されるパラメーター

Misc Group Stuff

* Scanning New Messages::       Gnus に新しいメッセージが到着したかどうかを聞く
* Group Information::           グループと Gnus に関する情報とヘルプ
* Group Timestamp::             Gnus に最後にいつグループを読んだかを記録させる
* File Commands::               Gnus のファイルの読み書き
* Sieve Commands::              Sieve スクリプトの管理

Summary Buffer

* Summary Buffer Format::       概略バッファーの外観を決定する
* Summary Maneuvering::         概略バッファーを動き回る
* Choosing Articles::           記事を読む
* Paging the Article::          読んでいる記事をスクロールする
* Reply Followup and Post::     記事を投稿する
* Delayed Articles::            記事を後で送る
* Marking Articles::            記事に既読や期限切れ消去可能等の印を付ける
* Limiting::                    概略バッファーに制限を加えることができる
* Threading::                   スレッドがどのように作られるか
* Sorting the Summary Buffer::  スレッドと記事がどのように並びかえられるか
* Asynchronous Fetching::       Gnus は記事を先に取得することができる
* Article Caching::             キャッシュに記事を貯めておける
* Persistent Articles::         記事を期限切れ消去しなくさせる
* Article Backlog::             すでに読んだ記事を残しておく
* Saving Articles::             記事の保存をカスタマイズする方法
* Decoding Articles::           Gnus は一連の (uu)encode された記事を扱える
* Article Treatment::           記事バッファーはお望みどおりに目茶苦茶にできる
* MIME Commands::               記事の MIME のあれこれを操作する
* Charsets::                    文字セットのこと
* Article Commands::            記事バッファーでいろいろなことをする
* Summary Sorting::             いろいろな方法で概略バッファーを並べ替える
* Finding the Parent::          子記事が探せないって? 親記事を取得しなさい
* Alternative Approaches::      ディフォルトではない概略を使って読む
* Tree Display::                もっと視覚的なスレッドの表示
* Mail Group Commands::         いくつかの命令はメールグループだけで使うことができる
* Various Summary Stuff::       他のどの章にも納まらなかったもの
* Exiting the Summary Buffer::  グループバッファーに戻る、または現在のグループを再び選択する
* Crosspost Handling::          クロスポストされた記事がどのように扱われるか
* Duplicate Suppression::       クロスポストの扱いに失敗したときの代替手段
* Security::                    暗号のデコードと検証
* Mailing List::                メーリングリストマイナーモード

Summary Buffer Format

* Summary Buffer Lines::        概略バッファーがどのように見えるべきかを指定できる
* To From Newsgroups::          自分自身の名前を表示しない方法
* Summary Buffer Mode Line::    モード行の見え方を決められる
* Summary Highlighting::        概略バッファーをきれいで素敵にする

Choosing Articles

* Choosing Commands::           記事を選択するための命令
* Choosing Variables::          これらの命令に影響を及ぼす変数

Reply, Followup and Post

* Summary Mail Commands::       メールを送る
* Summary Post Commands::       ニュースを送る
* Summary Message Commands::    他のメッセージ関連の命令
* Canceling and Superseding::

Marking Articles

* Unread Articles::             未読記事への印
* Read Articles::               既読記事への印
* Other Marks::                 購読度に影響しない印
* Setting Marks::               印の付け方と消し方
* Generic Marking Commands::    印をどのようにカスタマイズするか
* Setting Process Marks::       後の実行のための記事の印の付け方

Threading

* Customizing Threading::       スレッドに影響を及ぼす変更可能な変数
* Thread Commands::             概略バッファーでのスレッドに基づいた命令

Customizing Threading

* Loose Threads::               Gnus が無束縛スレッドを集めて大きなスレッドにする方法
* Filling In Threads::          スレッドを埋める
* More Threading::              スレッドをいじくるさらに多くの変数
* Low-Level Threading::         これで終わったと思ったでしょう... でもあなたは間違っていた!

Decoding Articles

* Uuencoded Articles::          記事を uuencode する
* Shell Archives::              shar 記事を解凍する
* PostScript Files::            ポストスクリプトを分割する
* Other Files::                 普通の保存と binhex.
* Decoding Variables::          幸せなデコードのための変数
* Viewing Files::               デコードされた結果を見たい?

Decoding Variables

* Rule Variables::              ファイルがどのように表示されるかを決める変数
* Other Decode Variables::      他のデコードのための変数
* Uuencoding and Posting::      uuencode するのをカスタマイズする変数

Article Treatment

* Article Highlighting::        記事をフルーツサラダのようにしたい
* Article Fontisizing::         強調された文を素敵にする
* Article Hiding::              特定の情報は消し去りたいとも思う
* Article Washing::             人生をもっとよくするたくさんの気の利いた関数
* Article Header::              ヘッダーをいろいろ変形させる
* Article Buttons::             URL や Message-ID やアドレスなどをクリックする
* Article Button Levels::       ボタンの見え方を制御する
* Article Date::                ぐずぐず言うな、世界時だ!
* Article Display::             X-Face, Picons, Smileys を表示する
* Article Signature::           署名って何?
* Article Miscellanea::         他のいろいろなもの

Alternative Approaches

* Pick and Read::               まず、記事に印を付けて、それから読む
* Binary Groups::               すべての記事を自動デコードする

Various Summary Stuff

* Summary Group Information::   情報指向の命令
* Searching for Articles::      複数記事命令
* Summary Generation Commands::
* Really Various Summary Commands::  あのやっかいな思い通りにならない命令

Article Buffer

* Hiding Headers::              どのヘッダーを表示するかを決める
* Using MIME::                  読む前に記事を MIME に通す
* Customizing Articles::        記事の見栄えを仕立てる
* Article Keymap::              記事バッファーで使えるキー操作
* Misc Article::                その他

Composing Messages

* Mail::                        メールの送信と返答
* Posting Server::              どのサーバーで投稿またはメールを送信するべきか?
* POP before SMTP::             メールを読まないとメールを送信できない
* Mail and Post::               ニュースとメールを同時に送信する
* Archived Messages::           送ったメッセージを Gnus が貯めておくところ
* Posting Styles::              あなたが誰であるかを明らかにするより簡単な方法
* Drafts::                      メッセージの延期と拒否されたメッセージ
* Rejected Articles::           サーバーがあなたの記事を嫌いだと何が起こる?
* Signing and encrypting::      安全なメッセージを作るには?

Select Methods

* Server Buffer::               仮想サーバーを作って編集する
* Getting News::                USENET ニュースを Gnus で読む
* Getting Mail::                個人的なメールを Gnus で読む
* Browsing the Web::            大量のウェブの資源からメッセージを取得する
* IMAP::                        Gnus を IMAP のクライアントとして使う
* Other Sources::               ディレクトリー、ファイル、SOUP パケットを読む
* Combined Groups::             複数のグループを一つのグループに合併させる
* Email Based Diary::           日程をメールで管理する
* Gnus Unplugged::              ニュースとメールをオフラインで読む

Server Buffer

* Server Buffer Format::        このバッファーの外見をカスタマイズできる
* Server Commands::             サーバーを操る命令
* Example Methods::             サーバー指定の例
* Creating a Virtual Server::   セッションの例
* Server Variables::            どの変数を設定するか
* Servers and Methods::         サーバー名を選択方法として使うことができる
* Unavailable Servers::         接続しようとしたサーバーのいくつかは落ちているかもしれない

Getting News

* NNTP::                        NNTP サーバーからニュースを読む
* News Spool::                  ローカルスプールからニュースを読む

NNTP

* Direct Functions::            サーバーに直接接続する
* Indirect Functions::          サーバーに間接的に接続する
* Common Variables::            いくつかの接続用の関数が参照する変数
* NNTP marks::                  NNTP サーバー用の印の保存

Getting Mail

* Mail in a Newsreader::        ニュースリーダーでメール (大事な前置き)
* Getting Started Reading Mail::  簡単な料理本のような例
* Splitting Mail::              メールグループの作り方
* Mail Sources::                どこからメールを取ってくるかを Gnus に知らせる方法
* Mail Back End Variables::     メールの扱いをカスタマイズするための変数
* Fancy Mail Splitting::        Gnus は入って来たメールを、身の毛のよだつような分割をすることができる
* Group Mail Splitting::        グループをカスタマイズしてメールを分割する
* Incorporating Old Mail::      あなたが持っている古いメールをどうするか?
* Expiring Mail::               要らないメールを取り除く
* Washing Mail::                取得したメールからごみを取り除く
* Duplicates::                  重複したメールを処理する
* Not Reading Mail::            メールバックエンドで別のファイルを読む
* Choosing a Mail Back End::    Gnus は色々なメール様式を読むことができる

Mail Sources

* Mail Source Specifiers::      メールのソースがどこかを指定する
* Mail Source Customization::   ものごとに影響するいくつかの変数
* Fetching Mail::               メールソース指示子を使う

Choosing a Mail Back End

* Unix Mail Box::               (とても) 標準的な Un*x mbox を使う
* Rmail Babyl::                 Emacs のプログラムは Rmail の Babyl フォーマットを使う
* Mail Spool::                  あなたのメールを私的なスプールに溜める?
* MH Spool::                    mhspool のようなバックエンド
* Maildir::                     もう一つの１ファイル/１メッセージ形式
* Mail Folders::                それぞれのグループに対して一つのファイルを持つ
* Comparing Mail Back Ends::    得失の深い洞察

Browsing the Web

* Archiving Mail::
* Web Searches::                文字列に合致する記事からグループを作る
* Slashdot::                    Slashdot のコメントを読む
* Ultimate::                    Ultimate Bulletin Board システム
* Web Archive::                 ウェブに保管されたメーリングリストを読む
* RSS::                         RDF Site Summary を読む
* Customizing W3::              Gnus から Emacs/W3 を操作する

IMAP

* Splitting in IMAP::           nnimap でメールを分割する
* Expiring in IMAP::            nnimap によるメールの期限切れ消去
* Editing IMAP ACLs::           他の利用者のメールボックスへのアクセスを制限/許可する
* Expunging mailboxes::         「メールボックス圧縮」ボタンと等価なもの
* A note on namespaces::        Gnus で IMAP 名前空間を使う (使わない) 方法
* Debugging IMAP::              ものごとが働かないときにするべきこと

Other Sources

* Directory Groups::            ディレクトリーをニュースグループのように読む
* Anything Groups::             Dired?  誰が dired なんて使うの?
* Document Groups::             個別のファイル群はグループの素
* SOUP::                        SOUP パケットを「オフライン」で読む
* Mail-To-News Gateways::       メールからニュースへのゲートウェイを通して記事を投稿する

Document Groups

* Document Server Internals::   あなた独自の文書種別を追加する方法

SOUP

* SOUP Commands::               SOUP パケットを作って送り出す命令
* SOUP Groups::                 SOUP パケットを読むためのバックエンド
* SOUP Replies::                メールとニュースを `nnsoup' に引き継がせる方法

Combined Groups

* Virtual Groups::              たくさんのグループの記事を合併する
* Kibozed Groups::              ニューススプールの中からの記事を検索する

Email Based Diary

* The NNDiary Back End::        基本的な設定と使い方
* The Gnus Diary Library::      NNDiary の上位階層にある実用的なツールキット
* Sending or Not Sending::      日程メッセージを送るときに注意すること

The NNDiary Back End

* Diary Messages::              メッセージを NNDiary で使えるようにするには
* Running NNDiary::             NNDiary には二つの動作モードがある
* Customizing NNDiary::         ベルとホイッスル

The Gnus Diary Library

* Diary Summary Line Format::   より良い概略行仕様
* Diary Articles Sorting::      メッセージを並べ替える気の利いた方法
* Diary Headers Generation::    手作業でそれをしないで
* Diary Group Parameters::      手作業でそれらを扱わないで

Gnus Unplugged

* Agent Basics::                これらはどう動くのか
* Agent Categories::            何をダウンロードするかを Gnus エージェントに教える方法
* Agent Commands::              各バッファーでの新しい命令
* Agent Visuals::               概略バッファーが変化するかもしれないエージェントの所業
* Agent as Cache::              エージェントは大きなキャッシュでもある
* Agent Expiry::                古い記事を追い払う方法
* Agent Regeneration::          通信切断や他の事故から回復する方法
* Agent and flags::             エージェントはどうフラグを維持するのか
* Agent and IMAP::              エージェントを IMAP で使う方法
* Outgoing Messages::           ニュースやメールを出すときになにが起こるのか?
* Agent Variables::             カスタマイズは楽し
* Example Setup::               オフライン人間のための `~/.gnus.el' の例
* Batching Agents::             `cron' ジョブでニュースを取得する方法
* Agent Caveats::               あなたが予想することと、それが実際にすること

Agent Categories

* Category Syntax::             分類とはどんなものか
* Category Buffer::             分類を管理するバッファー
* Category Variables::          カスタマイザ"ら"ス

Agent Commands

* Group Agent Commands::        グループの設定とそれらの内容の取得
* Summary Agent Commands::      手動で選択した記事を取得する
* Server Agent Commands::       エージェントでサポートされるサーバーの選択

Scoring

* Summary Score Commands::      現在のグループのためのスコア・エントリーを追加する
* Group Score Commands::        一般的なスコア命令
* Score Variables::             あなたのスコアをカスタマイズする
* Score File Format::           スコアファイルには何が入っているか
* Score File Editing::          手でスコアファイルを編集することもできる
* Adaptive Scoring::            Big Sister Gnus はあなたが何を読んだか知っている
* Home Score File::             新しいスコア・エントリーがどこへ行くかを指示する方法
* Followups To Yourself::       人があなたに返答したときに Gnus に気付かせる
* Scoring On Other Headers::    標準ではないヘッダーにスコアを付ける
* Scoring Tips::                効果的にスコアを付ける方法
* Reverse Scoring::             歳をとった問題児は問題ではない
* Global Score Files::          地を覆い、耳を切り裂くスコアファイル
* Kill Files::                  それらはまだここにあるが、無視することができる
* Converting Kill Files::       消去ファイルをスコアファイルに翻訳する
* Advanced Scoring::            スコアの規則を作るために論理表現を使う
* Score Decays::                スコアを減衰させるのは役に立つこともある

Advanced Scoring

* Advanced Scoring Syntax::     定義
* Advanced Scoring Examples::   どのように見えるか
* Advanced Scoring Tips::       それを最大限に利用する

Various

* Process/Prefix::              多くの命令で使われる習慣
* Interactive::                 Gnus に多くの質問を尋ねさせる
* Symbolic Prefixes::           いくつかの Gnus の関数に選択権を提供する方法
* Formatting Variables::        バッファーの見栄えを指定することができる
* Window Layout::               Gnus の各バッファーのウィンドウを設定する
* Faces and Fonts::             フェースがどのように見えるかを変更する
* Compilation::                 Gnus を速くするには
* Mode Lines::                  モード行に情報を表示する
* Highlighting and Menus::      バッファーを素敵で心地よく見せる
* Buttons::                     たった十回たたいただけで腱鞘炎になる!
* Daemons::                     Gnus はあなたの裏で仕事をすることができる
* NoCeM::                       Spam や他の太りやすい食事を避ける方法
* Undo::                        いくつかの動作は元に戻すことができる
* Predicate Specifiers::        述語を設定する
* Moderation::                  あなたがモデレーターだったらどうするか
* Image Enhancements::          最新の Emacs/XEmacs は画像を表示できる
* Fuzzy Matching::              大きなひずんだ音 (big fuzz) って何?
* Thwarting Email Spam::        頼んでもいない広告メールを避ける方法
* Other modes::                 他のモードとの相互作用
* Various Various::             本当にいろいろなもの

Formatting Variables

* Formatting Basics::           書法仕様変数は基本的に書法指定文字列である
* Mode Line Formatting::        モード行の書法仕様変数に関するいくつかの規則
* Advanced Formatting::         色々な方法で出力を変化させる
* User-Defined Specs::          Gnus にあなた自身の関数を呼ばせる
* Formatting Fonts::            仕様を多彩で素敵に見せる
* Positioning Point::           操作の後でポイントを移動する
* Tabulation::                  出力の整列
* Wide Characters::             幅が広い文字を扱う

Image Enhancements

* X-Face::                      ファンキーなちっちゃな白黒の絵を表示する
* Face::                        よりファンキーでちっちゃなカラーの絵を表示する
* Smileys::                     幸せな顔をまさにそのように表示する
* Picons::                      あなたが読んでいるものの絵を表示する方法
* XVarious::                    XEmacs のための Gnus の変数

Thwarting Email Spam

* The problem of spam::         背景、そして解決
* Anti-Spam Basics::            たくさんの spam を減らす簡単な方法
* SpamAssassin::                Spam 対策ツールの使い方
* Hashcash::                    CPU 時間を費やして spam 退治する
* Filtering Spam Using The Spam ELisp Package::
* Filtering Spam Using Statistics with spam-stat::

Filtering Spam Using The Spam ELisp Package

* Spam ELisp Package Sequence of Events::
* Spam ELisp Package Filtering of Incoming Mail::
* Spam ELisp Package Global Variables::
* Spam ELisp Package Configuration Examples::
* Blacklists and Whitelists::
* BBDB Whitelists::
* Gmane Spam Reporting::
* Anti-spam Hashcash Payments::
* Blackholes::
* Regular Expressions Header Matching::
* Bogofilter::
* SpamAssassin back end::
* ifile spam filtering::
* spam-stat spam filtering::
* SpamOracle::
* Extending the Spam ELisp package::

Filtering Spam Using Statistics with spam-stat

* Creating a spam-stat dictionary::
* Splitting mail using spam-stat::
* Low-level interface to the spam-stat dictionary::

Appendices

* XEmacs::                      XEmacs でインストールするための要件
* History::                     どうやって Gnus が今日のようになったか
* On Writing Manuals::          なぜこれが初心者用の案内でないか
* Terminology::                 ここにあるような本当に難しい語を使う
* Customization::               あなたの要求に沿って Gnus を仕立てる
* Troubleshooting::             うまくいかないときに何を試すか
* Gnus Reference Guide::        色々な技術的なもの
* Emacs for Heathens::          Emacs の用語の手短かな紹介
* Frequently Asked Questions::  Gnus の FAQ

History

* Gnus Versions::               どんなバージョンの Gnus がリリースされているか
* Other Gnus Versions::         リリースされている他のバージョンの gnus
* Why?::                        Gnus の目的は何?
* Compatibility::               Gnus は GNUS とどれくらい互換性があるの?
* Conformity::                  Gnus はすべての標準を満たそうとする
* Emacsen::                     Gnus は少数の現代的な Emacs で実行できる
* Gnus Development::            Gnus が開発されている方法
* Contributors::                たくさんの人々
* New Features::                Gnus の新しいことに関する手がかり

New Features

* ding Gnus::                   最初の新しい Gnus である Gnus 5.0/5.1 の新しいこと
* September Gnus::              公式に Gnus 5.2/5.3 として知られているもの
* Red Gnus::                    三番目の最上のもの--Gnus 5.4/5.5
* Quassia Gnus::                2 かける 2 は 4、もしくは Gnus 5.6/5.7
* Pterodactyl Gnus::            神秘の数も P で始まるけれど。Gnus 5.8/5.9 の別名
* Oort Gnus::                   巨大な。遠く遥かな。Gnus 5.10/5.11。
* No Gnus::                     超やばい

Customization

* Slow/Expensive Connection::   ローカルの Emacs で、どこかからニュースを得る
* Slow Terminal Connection::    遠くにあるホストの Emacs を実行する
* Little Disk Space::           大きな設定ファイルを持つことは良くない
* Slow Machine::                速いマシンを買いたい気がする

Gnus Reference Guide

* Gnus Utility Functions::      共通の関数と変数
* Back End Interface::          Gnus はどうやってサーバーと通信するのか
* Score File Syntax::           スコアファイル標準の BNF 定義
* Headers::                     Gnus はヘッダーを内部的にどのように格納するか
* Ranges::                      たくさんの数を格納する便利な形式
* Group Info::                  グループ情報の形式
* Extended Interactive::        シンボル接頭引数など
* Emacs/XEmacs Code::           Gnus はすべての最新の Emacsen で動作する
* Various File Formats::        Gnus が使用するファイルの形式

Back End Interface

* Required Back End Functions:: 実装しなければならない関数
* Optional Back End Functions:: 実装しなくてもよい関数
* Error Messaging::             メッセージを発したりエラーを報告する方法
* Writing New Back Ends::       古いバックエンドの拡張
* Hooking New Back Ends Into Gnus::  Gnus 側でしなければならないこと
* Mail-like Back Ends::         メール風バックエンドのための助言

Various File Formats

* Active File Format::          使用可能な記事とグループの情報
* Newsgroups File Format::      グループの説明

Emacs for Heathens

* Keystrokes::                  文章を入力して命令を実行する
* Emacs Lisp::                  備え付けの Emacs プログラミング言語




File: gnus-ja.info, Node: Starting Up, Next: Group Buffer, Prev: Top, Up: Top

Gnus の起動
***********

システム管理者が適切な設定をしていたならば、Gnus を起動してニュースを読
むのは非常に簡単です。そう、Emacs で `M-x gnus' と打つだけです。

別のフレーム (frame) で Gnus を起動したいときは、
`M-x gnus-other-frame' 命令を使うことができます。

開始時に何かがうまくいかないときは `~/.gnus.el' ファイルの中で変数をい
くつかいじくりまわさなければならないでしょう。このファイルは
`~/.emacs' と似ていますが、こちらは Gnus が起動するときに読み込まれます。

この説明書でよくわからない用語がでてきたときは、用語の章 (*Note
Terminology::) を参照して下さい。

* Menu:

* Finding the News::      ニュースを取得する方法を選ぶ
* The First Time::        最初に起動したときに Gnus は何をするか
* The Server is Down::    そんなとき、どうすればメールを読めるか
* Slave Gnusae::          同時に一つ以上の Gnus を作動させることができる
* Fetching a Group::      グループを読むためだけに Gnus を起動する
* New Groups::            Gnus が新しいグループに対して何をするか
* Changing Servers::      あるサーバーから別のサーバーへ移る必要があるかもしれない
* Startup Files::         やっかいなスタートアップファイル---`.newsrc'
* Auto Save::             クラッシュからの回復
* The Active File::       遅い回線からのファイルの取得には時間がかかる
* Startup Variables::     変更したいと思うかもしれない変数



File: gnus-ja.info, Node: Finding the News, Next: The First Time, Prev: Starting Up, Up: Starting Up

ニュースを見つける
==================

変数 `gnus-select-method' は Gnus がどこでニュースを探すべきかを示しま
す。この変数ははじめの要素が「方法」、二番目の要素が「場所」を表すリス
トである必要があります。この方法はあなたの基本方法 (native method) にな
ります。この方法で取ってこないグループはすべて外部 (foreign) グループで
す。

例えば NNTP サーバー `news.somewhere.edu' から毎日 (薬のように) 一定の
量のニュースを摂取したいのであれば、

     (setq gnus-select-method '(nntp "news.somewhere.edu"))

のようにすることができます。

ローカル・スプールのディレクトリーを読み込みたい場合は、

     (setq gnus-select-method '(nnspool ""))

のようにできます。

ローカルのスプールを使えるのであれば、かなりの確率でその方がずっと速い
でしょうし、それを使うべきでしょう。でも、もしあなたのサーバーが
Leafnode (それは簡単な個人用のニュースサーバーです) であるならばローカ
ルスプールを使ってはいけません。この場合は `(nntp "localhost")' にしま
しょう。

もしこの変数が設定されていなければ、Gnus は `NNTPSERVER' 環境変数を読み
にいきます。もしその変数が設定されていなければ、Gnus は
`gnus-nntpserver-file' (設定されていない場合は `/etc/nntpserver') がこ
の件に関して何かを言っていないかを調べます。もしそれも失敗したなら、
Gnus は Emacs が動作しているサーバーを NNTP サーバーとして使おうとしま
す。随分な当て推量ですけどね。

`gnus-nntp-server' が設定されていると、この変数は `gnus-select-method'
よりも優先されます。ですから `gnus-nntp-server' は `nil' に設定するべき
で、それがディフォルトです。

Gnus に NNTP サーバーの名前を対話的に指定することもできます。`gnus' に
数値でない接頭引数を渡すと (例: `C-u M-x gnus')、Gnus は
`gnus-secondary-servers' リスト (もし存在するならば) からサーバーを選ぶ
ことができるようにします。ただ単に接続したいと思ったサーバーの名前を打
つこともできます。(これは `gnus-nntp-server' を設定し、これは後の
Emacs のセッションで `M-x gnus' とすると、Gnus は同じサーバーに接続しよ
うとするということです。)

しかし、普段日常的には一つの NNTP サーバーを使い、違ったサーバー
には興味のあるグループが少ししかない場合、グループバッファー
で `B' 命令を使うことの方が良いでしょう。それは、選択可能なグループ
を表示し、その中からどれでも好きなものを購読することができます。これ
は `.newsrc' の保持をずっとやりやすくします。
*Note 外部グループ: Foreign Groups.

外部グループに対する少し違ったやり方は、変数
`gnus-secondary-select-methods' を設定する方法です。この変数に表されて
いる選択方法は、多くの点で `gnus-select-method' サーバーの選択方法と同
じように扱われます。起動中にアクティブファイルを探しにいき (もし要求さ
れていれば)、これらのサーバー上にできた新しいニュースグループは元々のグ
ループと同じように購読されます (もしくは、されません)。

例えばメールを読むために `nnmbox' バックエンド (back end) を使いたいと
きは、普通この変数を、

     (setq gnus-secondary-select-methods '((nnmbox "")))

と設定します。

注: NNTP バックエンドは印ファイル (*Note NNTP marks::) に印を保存します。
この機能は Gnus がインストールされている複数のホスト間で印を共有するこ
とを容易にしますが、新着記事の取得をちょっと遅くするかもしれません。詳
細については *Note NNTP marks:: を参照して下さい。



File: gnus-ja.info, Node: The First Time, Next: The Server is Down, Prev: Finding the News, Up: Starting Up

一番初め
========

起動用ファイルが存在しないときは (*Note Startup Files::)、Gnus はどのグ
ループがディフォルトで購読されているべきかを決定しようとします。

変数 `gnus-default-subscribed-newsgroups' が設定されていると、Gnus はそ
のリストの中のグループを購読し、残りを削除します。システム管理者はこの
変数を何か役に立つものに設定しておくことが望まれます。

そうでないときは、Gnus は少数の適当なグループを購読します (例:
`*.newusers')。(「適当な」はここでは「あなたが読むべきであると Lars さ
んが考えるもの」というように定義されています)

また、たいていの共通の問題の解決の手助けになるよう、Gnus に関する文書の
グループも購読することになるでしょう。

`gnus-default-subscribed-newsgroups' が `t' のときは、Gnus は新しいグルー
プを扱うのに普通の関数を使い、特別なことは何もしません。



File: gnus-ja.info, Node: The Server is Down, Next: Slave Gnusae, Prev: The First Time, Up: Starting Up

サーバーが落ちている
====================

ディフォルトのサーバーが落ちているときは、当然 Gnus の起動にいくつかの
問題が発生します。しかし、ニュースグループの他にいくつかメールのグルー
プがあるのならば、それにもかかわらず Gnus を起動する必要があるかもしれ
ません。

信頼できるプログラムの一つである Gnus は、サーバーと接続できないときは
基本選択方法なしで続けるかどうかを尋ねます。これは実際にはサーバーが存
在しないとき (例えば、アドレスを間違えた場合) やサーバーが何らかの理由
で一時的に調子がおかしくなっているときに起こります。もしそのまま続行す
ることにして、外部グループが一つも無い場合、実はグループバッファーでは
ほとんど何もできないということに気が付くでしょう。でも、ねぇ、それはあ
なたの問題です。ブブーッ!

サーバーが完全に落ちているのを知っているか、サーバーでわずらうことなく
メールだけを読みたいときは、Gnus を起動するのに `gnus-no-server' 命令を
使うことができます。急いでいるときにもぴったりでしょう。この命令は本来
のサーバーには接続しません--その代わりに、レベル 1 と 2 にあるすべての
グループを活動状態にします (基本グループでないグループはその二つのレベ
ルにしておくのが望ましいでしょう)。*Note Group Levels:: も参照して下さ
い (訳注: `gnus-no-server' は `gnus-group-use-permanent-levels' 変数の
値を 2 に設定することに注意して下さい)。



File: gnus-ja.info, Node: Slave Gnusae, Next: New Groups, Prev: The Server is Down, Up: Starting Up

Gnus をスレーブにする
=====================

あなたには二つ以上の Gnus をそれぞれ別の Emacs 上で同時に動かす必要が生
じるかもしれません。違った `.newsrc' ファイルを使っているなら (例えば、
二つの違ったサーバーから読み込むために、二つの違った Gnus を動作させて
いる場合)、まったく問題はありません。それを行なえば良いだけです。

問題は、同じ `.newsrc' ファイルを使う二つの Gnus を動かそうとしたときに
起こります。

この問題に対処するために Gnus タワーのシンクタンクにいる私たちは、新し
い概念にたどりつきました。「マスター」と「スレーブ」です。(私たちはこの
概念に特許を申請しました。そして、その言葉の著作権を得ました。お互いに
関連してこれらの言葉を使いたいなら、一回使う毎に、私に $1 を送らなけれ
ばなりません。もっちろん「コンピューターアプリケーションのマスター/スレー
ブ関係」の使用料はもっと高くなります。)

とにかく、`M-x gnus' (もしくは、普段やっている方法) で Gnus を普通に起
動します。その後のスレーブ Gnus はそれぞれ `M-x gnus-slave' で起動しま
す。スレーブは普通の `.newsrc' は保存しませんが、代わりに「スレーブファ
イル」にスレーブの起動中にどのようなグループが読まれたかという情報だけ
を保存します。マスター Gnus が起動するとき、それはそれらのスレーブファ
イルを読み込み (そして消し)、それらからすべての情報を取り込みます。(ス
レーブファイルは、最終的な変更が優先されるようにそれらが作られた順番で
読まれます。)

もちろん、スレーブファイルからの情報は普通の (すなわち、マスターの)
`.newsrc' ファイルよりも優先されます。

スレーブを起動するときにもしマスターの `.newsrc*' ファイル群がセーブさ
れていなかったら、自動保存されたファイルを読むかどうかを尋ねられるかも
しれません。“yes”と答えると、マスターにセーブされていない変更はスレー
ブに反映されません。“no”と答えると、マスターで読まれたいくつかの記事
が、スレーブでは未読であると見なされるかもしれません。



File: gnus-ja.info, Node: New Groups, Next: Changing Servers, Prev: Slave Gnusae, Up: Starting Up

新しいグループ
==============

新しいニュースグループをまったく見なくても満足ならば、
`gnus-check-new-newsgroups' を `nil' に設定することができます。これを設
定した場合、起動にかかる時間が短くなります。この変数が `nil' に設定され
ていても、グループバッファーで `U' を押せばいつでも新しいグループを購読
することができます (*Note Group Maintenance::)。ディフォルトではこの変
数は `ask-server' です。この変数が `always' に設定されていると、`g' 命
令を実行したときでも Gnus はバックエンドに新しいグループを探すことを求
めます (*Note Scanning New Messages::)。

* Menu:

* Checking New Groups::         どのグループが新しいかを決定する
* Subscription Methods::        新しいグループに対して Gnus は何をすべきか
* Filtering New Groups::        Gnus に特定の新しいグループを無視させる



File: gnus-ja.info, Node: Checking New Groups, Next: Subscription Methods, Prev: New Groups, Up: New Groups

新しいグループを調べる
----------------------

Gnus は、普通はグループが新しいかどうかを、購読しているグループと削除さ
れているグループのリストとアクティブファイルを比較することにより判定し
ています。この方法は特に速いというわけではありません。
`gnus-check-new-newsgroups' が `ask-server' であると、Gnus はサーバーに、
最後に接続してから新しいグループができているかどうかを尋ねます。この方
法は速いし、安上がりです。これにより、削除されたグループのリストを保持
しておくことからから完全に開放されます。ですから、
`gnus-save-killed-list' を `nil' にすることができるでしょう。そうすれば、
起動、終了の両方、そして全体にわたって時間を節約できます。ディスク消費
量も少なくなります。それなら、どうしてこれがディフォルトではないのでしょ
う? 残念ながら、すべてのサーバーがこの命令を理解するわけではないのです。

私は今あなたが何を考えているかを当てられます。どうすればサーバーが
`ask-server' を理解するかがわかるのでしょう? え、違うのですか? あぁ、良
かった。というのは、確実な答は存在しないのです。私に言えることは、この
変数を `ask-server' に設定して、数日間新しいグループが現れるかどうかを
調べて下さい、ということだけです。もしいくつかのグループが現れたなら、
それで動作しています。一つも現れなければ、それは動作していません。私は、
Gnus にサーバーが `ask-server' を理解するかどうかを推量させる関数を書く
こともできますが、それは単に推量しているにすぎません。ですから、その関
数を書くことはないでしょう。他の方法としては、サーバーに `telnet' をし
て、`HELP' と打ち、サーバーが理解するコマンドの中に `NEWGROUPS' がある
かどうかを調べることもできます。もしあれば、おそらく動作するでしょう
(しかし、適切に機能を提供することなく `NEWGROUPS' をリストに含めるサー
バーもあります)。

この変数は、選択方法のリストであることもできます。そのときは、Gnus は
`ask-server' 命令をそれぞれの選択方法に対して実行し、普通の方法で購読し
ます (もしくは、しません)。これの副作用は、起動にかなり時間がかかるので、
待っている間に瞑想できることです。永久の幸福を達成するために、マントラ
“dingnusdingnusdingnus”を使って下さい。



File: gnus-ja.info, Node: Subscription Methods, Next: Filtering New Groups, Prev: Checking New Groups, Up: New Groups

購読方法
--------

新しいグループに遭遇したときに Gnus が何をするかは、変数
`gnus-subscribe-newsgroup-method' によって決定されます。

この変数は関数を含んでいる必要があります。この関数は新しいグループの名
前を唯一の引数として呼ばれます。

いくつかの手軽なプレハブ関数は、以下のようになっています。

`gnus-subscribe-zombies'
     すべての新しいグループをゾンビ (zombie) にします。これがディフォル
     トになっています。後でゾンビを (`A z' によって) 概観したり、(`S
     z' によって) 適切にすべてを削除したり、(`u' によって) 購読したりで
     きます。

`gnus-subscribe-randomly'
     任意の順番ですべての新しいグループを購読します。実際には、すべての
     新しいグループはグループバッファーの『一番上』に加えられます。

`gnus-subscribe-alphabetically'
     すべての新しいグループをアルファベット順に購読します。

`gnus-subscribe-hierarchically'
     すべての新しいグループを階層的に購読します。この関数と
     `gnus-subscribe-alphabetically' の違いは少ししかありません。
     `gnus-subscribe-alphabetically' は新しいグループを厳密にアルファベッ
     ト順にならべますが、この関数はグループをその階層の中に入れます。で
     すから、`rec' の階層を `comp' の階層の前に持ってきたい場合、この関
     数はその配置をぐちゃぐちゃにはしません。もしくは、そのようなもので
     す。

`gnus-subscribe-interactively'
     新しいグループを対話的に購読します。これは Gnus が *すべて* のグルー
     プに対して尋ねることを意味しています。購読するグループは階層的に購
     読されます。

`gnus-subscribe-killed'
     すべての新しいグループを削除します。

`gnus-subscribe-topics'
     グループを、それに合致する `subscribe' トピックパラメーターを持っ
     ているグループに入れます (*Note Topic Parameters::)。例えば、以下
     のような `subscribe' パラメーター

          "nnslashdot"

     は、その正規表現に合致するすべてのグループはそのトピックの下で購読
     されるということです。

     グループに合致するトピックが無い場合、グループは最上位のトピックで
     購読されます。

上の変数と密接に関係する変数は、
`gnus-subscribe-hierarchical-interactive' です。この変数が `nil' でない
と、Gnus は階層的な方法で新しいグループを購読するかどうかを尋ねます。
Gnus はそれぞれの階層で、それを下に降りるかどうかを尋ねます。

よくある間違いは、数段落前の (`gnus-subscribe-newsgroup-method') 変数を
`gnus-subscribe-herarchical-interactive' に設定することです。これは誤り
です。これは動作しません。これはおめでたい人のすることです。ですから、
絶対にしないで下さい。



File: gnus-ja.info, Node: Filtering New Groups, Prev: Subscription Methods, Up: New Groups

新しいグループを選別する
------------------------

どの新しいグループが購読 (もしくは、無視) されるべきかを管理する快適で
手軽な方法は、`.newsrc' ファイルの先頭に "options" 行を挿入することです。
次は、例です。

     options -n !alt.all !rec.all sci.all

この行は、明らかにまじめで理知的で科学的な人間 (あるいは彼女はどこにで
もいる単につまらない人かもしれないけれど) が書いたものです。なぜなら、
これは `alt' と `rec' で始まる名前を持つグループはすべて無視され、
`sci' で始まる名前を持つグループはすべて購読する、ということを表してい
るからです。Gnus はこれらのグループを購読するのに普通の購読方法を使いま
せん。代わりに `gnus-subscribe-options-newsgroup-method' が使われます。
この変数はディフォルトで `gnus-subscribe-alphabetically' になります。

`.newsrc' ファイルをいじりたくない場合は、`gnus-options-subscribe' と
`gnus-options-not-subscribe' の二つの変数だけを設定することもできます。
この二つの変数は `.newsrc' ファイルの `optinos -n' 行とまったく同じこと
をします。どちらの変数も正規表現で、新しいグループは前者に合致すれば無
条件に購読され、後者に合致すると無視されます。

さらにここでおせっかいをする変数は、`gnus-auto-subscribed-groups' です。
それは `gnus-options-subscribe' とまったく同じように動作するので、本当
は余分なものです。しかし、私はこの二つがあった方が良いと思いました。も
う一方の変数は利用者がいじくるのに使われるのに対して、この変数はいくつ
かの基本的な規則を設定するためのものです。ディフォルトではこの変数はメー
ルバックエンド (`nnml', `nnbabyl', `nnfolder', `nnmbox', `nnmh' および
`nnmaildir') からできるすべての新しいグループを購読するようになっていま
す。それが嫌であれば、この変数を `nil' に設定して下さい。

この正規表現に合致する新しいグループは
`gnus-subscribe-options-newsgroup-method' を使って購読されます。



File: gnus-ja.info, Node: Changing Servers, Next: Startup Files, Prev: New Groups, Up: Starting Up

サーバーを換える
================

ときどき、ある NNTP サーバーから別のサーバーへ移動しなければならないこ
とがあります。このようなことはめったにおきませんが、おそらくあなたが仕
事を変えたり、使っているサーバーがとても不安定で、別のものに乗り換えた
いというときに必要になるでしょう。

サーバーを変更するのはとても簡単ですよね? `gnus-select-method' を新しい
サーバーを指し示すように変更すればいいだけですね?

*違います!*

記事の番号は違った NNTP サーバーでも (どうにかして) 同じにしてあるとい
うことはありません。そして、Gnus がどの記事を読んだかを記録する唯一の方
法は、記事番号を記録することです。ですから `gnus-select-method' を変更
したときは、`.newsrc' ファイルは役に立たなくなります。

Gnus は `.newsrc' ファイルをあるサーバー用から別のサーバー用に変換する
関数を二、三用意しています。それらには一つ共通点があります--実行にな
がーーい時間がかかることです。おそらく、どうしても必要になったとき以外
にこの関数を使おうとは思わないでしょう。

もし両方のサーバーに接続できるなら、Gnus はあなたが読んだ記事すべてに対
してヘッダー (headers) を要求して、`Message-ID' を比較し、読んだ記事と
記事の印を新しく記録します。`M-x gnus-change-server' コマンドはこれをす
べての基本グループに対して行ないます。そのコマンドは移動先の方法 (the
method) を入力することを要求します。

個々のグループを `M-x gnus-group-move-group-to-server' 命令で移動するこ
ともできます。これはあるサーバーから別のサーバーへ一つの (外部) グルー
プを移動したいときに役に立ちます。

古いサーバーと新しいサーバーの両方に接続することができないとき、印と読
んだ範囲はすべて意味が無くなります。そのようなときは `M-x
gnus-group-clear-data-on-native-groups' コマンドを使って、基本グループ
に関するデータをすべて消去することができます。このコマンドは注意して使っ
て下さい。

`gnus-group-clear-data' コマンドは現在のグループのすべてのデータをクリ
アします--印と既読記事のリストを消し去ります。

サーバーを変更した後で、キャッシュ階層を移動させなければ *なりません*。
というのは、キャッシュ記事は間違った記事番号になっており、それは Gnus
がどの記事を読んだとみなすかに影響します。
`gnus-group-clear-data-on-native-groups' はそれを自動で行なってしまうか
どうかを尋ねます。`gnus-group-clear-data' では `M-x
gnus-cache-move-cache' が使えます (でも気を付けて、それはすべてのグルー
プのキャッシュを移動してしまいますから)。



File: gnus-ja.info, Node: Startup Files, Next: Auto Save, Prev: Changing Servers, Up: Starting Up

起動ファイル
============

最もありふれた Unix のニュースリーダーは、`.newsrc' と呼ばれる共用の起
動ファイルを使います。このファイルは、講読しているグループと、それらの
グループにおいてどの記事が読まれたかの、すべての情報を持っています。

GNUS ではものごとが少々複雑になっています。`.newsrc' ファイルを最新のも
のにするだけではなく、`.newsrc' ファイルには合わない情報を保存しておく
ために `.newsrc.el' と呼ばれるファイルを使います。(実際は `.newsrc' ファ
イルのすべての情報を複製して保持しています。) GNUS はこれらの中で一番最
後に保存されたものを使います。これをすることにより、GNUS と他のニュース
リーダーを切り替えて使うことができます。

これはちょっと間が抜けているので、Gnus はもっと良い方法を編み出しました。
`.newsrc' と `.newsrc.el' ファイルに加えて、Gnus は `.newsrc.eld' と呼
ばれるファイルも持っています。Gnus はこれらの中で一番新しいファイルを読
みますが、`.newsrc.el' ファイルに書き込むことはありません。
`.newsrc.eld' ファイルは絶対に消すべきではありません。---それは
`.newsrc' ファイルにはないたくさんの情報を保持しています。

`gnus-save-newsrc-file' を `nil' にすることによって `.newsrc' ファイル
に書き込むのを止めることができます。そうすれば、そのファイルを削除する
ことができ、ディスク容量を節約することができ、Gnus の終了が速くなります。
しかし、そうすると他のニュースリーダーを使えなくなります。でも、ちょっ
と、誰かそうしたい人がいるでしょうか。同じように
`gnus-read-newsrc-file' を `nil' にすることによって、Gnus は `.newsrc'
ファイルとすべての `.newsrc-SERVER' ファイルを無視するようになります。
そのことは、あなたが時々違うニュースリーダーを使ったり、利用可能なグルー
プの異なるサブセットをそれらのニュースリーダーで読みたい場合に、便利な
ことがあります。

`gnus-save-killed-list' (ディフォルトは `t') が `nil' であると、Gnus は
削除されたグループを起動ファイルに保存しません。これは (起動時と終了時
の) 時間と、(ディスクの) 容量を節約します。こうすると Gnus がどのグルー
プが新しいかの記録を持っていないことになるので、新しいグループの自動購
読方法は意味が無くなります。この変数を `nil' にしたときは、
`gnus-check-new-newsgroups' を常に `nil' か `ask-server' にしておくべき
でしょう (*Note New Groups::)。この変数は正規表現であることもできます。
そのような場合は、ファイルを保存する直前にその正規表現に合致しないすべ
てのグループを消去します。これは、すべてのサーバーが `ask-server' を理
解するわけではない、といったような、いくらかあいまいな状況のときに役に
立つでしょう。

変数 `gnus-startup-file' は起動ファイルがどこにあるかを指定します。ディ
フォルト値は `~/.newsrc' で、それがどのようなものであれ、末尾に `.eld'
を付けたものが Gnus (El Dingo) の起動ファイルになります。このファイルの
バージョン制御をしたいときは `gnus-backup-startup-file' をセットして下
さい。それは `version-control' 変数と同じ値を取ります。

`gnus-save-newsrc-hook' は各種の newsrc ファイルのどれかを保存する前に
実行されるのに対し、`gnus-save-quick-newsrc-hook' は `.newsrc.eld' ファ
イルを保存する前に実行され、`gnus-save-standard-newsrc-hook' は
`.newsrc' ファイルを保存する前に実行されます。後の二つは普通はバージョ
ン制御を on/off するのに使われます。ディフォルトでは、起動ファイルを保
存するときにバージョン制御が行なわれます。バックアップファイルの作成を
止めたいときは、次のようにして下さい。

     (defun turn-off-backup ()
       (set (make-local-variable 'backup-inhibited) t))

     (add-hook 'gnus-save-quick-newsrc-hook 'turn-off-backup)
     (add-hook 'gnus-save-standard-newsrc-hook 'turn-off-backup)

Gnus が起動すると、`gnus-site-init-file' (ディフォルトで
`.../site-lisp/gnus-init') と `gnus-init-file' (ディフォルトで
`~/.gnus') のファイルを読み込みます。これらは普通の Emacs Lisp ファイル
で、`~/.emacs' や `site-init' ファイルを Gnus 関係のもので乱雑にしない
ようにするために使うことができます。Gnus はこれらと同じ名前のファイルに、
接尾語 `.elc' と `.el' が付いているものも調べます。言い換えれば、
`gnus-init-file' を `~/.gnus' に設定すると、Gnus は `~/.gnus.elc',
`~/.gnus.el' を探し、最後に `~/.gnus' を (この順番に) 探します。`-q' ま
たは `--no-init-file' オプション (*Note Initial Options:
(emacs)Initial Options.) が指定されて Emacs が起動された場合、Gnus は
`gnus-init-file' を読み込みません。



File: gnus-ja.info, Node: Auto Save, Next: The Active File, Prev: Startup Files, Up: Starting Up

自動保存
========

何か Gnus のデータを変更すること (記事を読む、印を付ける、グループを削
除または購読する) をしたとき、変更は特別な「ドリブルバッファー」
(dribble buffer) に書き込まれます。このバッファーは Emacs が普通するよ
うに自動保存されます。`.newsrc' ファイルを保存する前に Emacs が落ちたと
きは、すべての変更をこのファイルから回復することができるでしょう。

起動時に Gnus がこのファイルの存在を発見すると、Gnus はそれを読み込むか
どうかを利用者に尋ねます。本当の起動ファイルが保存されれば、自動保存ファ
イルは削除されます。

`gnus-use-dribble-file' が `nil' であると、Gnus はドリブルバッファーを
作ったり、維持したりしません。ディフォルトは `t' です。

Gnus はドリブルファイルを `gnus-dribble-directory' に置きます。ディフォ
ルトではそのようになっていますが、この変数が `nil' であると、Gnus は
`.newsrc' ファイルの置かれているディレクトリー (これは普通は利用者のホー
ムディレクトリーです) に入っていってドリブルファイルを作ります。ドリブ
ルファイルは `.newsrc' と同じ許可属性を与えられます。

もし `gnus-always-read-dribble-file' が `nil' でなければ、Gnus は利用者
に尋ねること無く、ドリブルファイルを起動時に読み込みます。



File: gnus-ja.info, Node: The Active File, Next: Startup Variables, Prev: Auto Save, Up: Starting Up

アクティブファイル
==================

Gnus は起動したときや、実際に新しい記事が到着しているかを判定しようとす
るときに、アクティブファイルを読み込みます。これはとても大きなファイル
で、そのサーバーの活動中のグループと記事のすべてのリストが入っています。

アクティブファイルを検査する前に、Gnus は正規表現
`gnus-ignored-newsgroups' に合うすべての行を削除します。これは主に偽の
名前を持つグループを排除するために使われてきましたが、興味の無いグルー
プの階層を無視するために使うこともできます。しかし、これはお勧めできま
せん。本当のことを言うと、まったく賛成できません。代わりに、そのような
用途に用いられる変数の概略を知るために、*Note New Groups:: を参照して下
さい。

アクティブファイルは比較的大きくなる傾向があるので、遅い回線を使ってい
るときは、アクティブファイルを読み込まないように
`gnus-read-active-file' を `nil' に設定することができます。この変数はディ
フォルトでは `some' です。

そのような時は、Gnus は実際に購読されているグループに関する情報だけを得
てやっていこうとします。

気を付けてほしいのは、あなたが山ほどのたくさんのグループを購読している
ときにこの変数を `nil' に設定すると、Gnus は速くなるどころか遅くなって
しまうということです。現状では、ニュースを 2400bps 以上のモデムを通して
読んでいるのでない限り、Gnus の速度はかなり遅くなるでしょう。

この変数は `some' という値も取ることができます。その時は、Gnus は購読し
ているグループに関する情報をだけを得ようとします。いくつかのサーバー
(`LIST ACTIVE group' 命令を使うことのできる、最新鋭の INN サーバー) で
は、非常に早くなるでしょうが、他のサーバーでは速くはありません。どのよ
うにせよ、遅い回線では `some' は `nil' よりも速く、それはもちろん `t'
よりも速くなります。

いくつかのニュースサーバー (例えば古い Leafnode や古い INN) には `LIST
ACTIVE group' 命令がありません。そういうサーバーには `nil' をこの変数の
値に設定するのが、おそらくもっとも有効でしょう。

もしこの変数が `nil' であると、Gnus は完全にがんじがらめの方法でグルー
プの情報を得ようとします。そして、これはあまり速くありません。もしそれ
が `some' で NNTP サーバーを使っているときは、Gnus はできるだけ速く命令
を出し、一撃ですべての返答を読み込みます。この方が普通はより良い結果を
もたらしますが、サーバーが `LIST ACTIVE group' 命令を理解しないなら、サー
バーにとってはあまり良いとは言えません。

Gnus の起動にあまりに時間がかかると思ったなら、この変数にこれらの三つの
違った値を試してみて、どれが一番良いかを探して下さい。

`some' か `nil' を使うのであれば、どちらにしろ速度を上げるためにすべて
の興味の無いグループを必ず削除するべきでしょう。

この変数は二次 (secondary) 選択方法のアクティブファイル取得にも影響する
ことに気を付けて下さい。



File: gnus-ja.info, Node: Startup Variables, Prev: The Active File, Up: Starting Up

起動変数
========

`gnus-load-hook'
     Gnus (のプログラム) が読み込まれるときに実行されるフックです。何度
     Gnus を起動しても、Emacs が起動してから終了するまでに普通はこのフッ
     クは一回しか実行されないことに注意して下さい。

`gnus-before-startup-hook'
     Gnus の起動に成功した後に実行されるフックです。

`gnus-startup-hook'
     Gnus が起動された後に、一番最後に実行されるフックです。

`gnus-started-hook'
     Gnus の起動に成功した後に、一番最後に実行されるフックです。

`gnus-setup-news-hook'
     `.newsrc' ファイルを読み込んだ後で、グループバッファーを作成する前
     に実行されるフックです。

`gnus-check-bogus-newsgroups'
     もし `nil' でないと、Gnus は起動時にすべての偽グループを調べて削除
     します。「偽グループ」(bogus group) はあなたの `.newsrc' ファイル
     には存在するけれど、ニュースサーバーには実際には存在しない、という
     グループのことです。偽グループを調べるのにはかなり時間がかかるので、
     時間と資源を節約するために、この機能は使わないほうがいいでしょう。
     そして、代わりにグループバッファーで時々偽グループを調べるのが良い
     でしょう (*Note Group Maintenance::)。

`gnus-inhibit-startup-message'
     もし `nil' でないと、起動時のメッセージは表示されません。そのように
     すれば、仕事の代わりにニュースを読んでいるのを上司に気付かれにくくなるで
     しょう。この変数は `~/.gnus.el' がロードされる前に使われるので、
     `.emacs' に設定するべきである点を注意して下さい。

`gnus-no-groups-message'
     グループが一つも存在しないときに Gnus が表示するメッセージです。

`gnus-play-startup-jingle'
     もし `nil' でないと、起動時に Gnus の短い曲を演奏します。

`gnus-startup-jingle'
     上の変数が `nil' でないときに演奏される短い曲です。ディフォルトは
     `Tuxdemoon.Jingle4.au' です。



File: gnus-ja.info, Node: Group Buffer, Next: Summary Buffer, Prev: Starting Up, Up: Top

グループバッファー
******************

グループバッファー ("group buffer") は有効なグループを全部 (あるいは一
部を) 一覧表示します。これは Gnus を起動したときに最初に表示されるバッ
ファーで、Gnus が生きている限り決して消されることはありません。

* Menu:

* Group Buffer Format::         表示されている情報と変更の方法
* Group Maneuvering::           グループバッファーを移動するコマンド
* Selecting a Group::           実際にニュースを読む
* Subscription Commands::       購読、購読中止、消去
* Group Data::                  グループの情報を変更する
* Group Levels::                レベル? それって何?
* Group Score::                 あなたの好きなグループを見つけ出す方法
* Marking Groups::              グループに印を付けておいて、後で処理できる
* Foreign Groups::              グループの作成と修正
* Group Parameters::            グループ毎に違ったパラメーターを持たせられる
* Listing Groups::              Gnus はグループをいろいろな分け方で表示できる
* Sorting Groups::              グループの順番の配置替え
* Group Maintenance::           きれいな `.newsrc' の保ち方
* Browse Foreign Server::       サーバーを概観できる。何が読めるのか見てみよう
* Exiting Gnus::                ニュース読むのをやめて、仕事をしよう
* Group Topics::                グループを切り混ぜて、トピックごとに分割する
* Misc Group Stuff::            他にできること



File: gnus-ja.info, Node: Group Buffer Format, Next: Group Maneuvering, Prev: Group Buffer, Up: Group Buffer

グループバッファーの形式
========================

* Menu:

* Group Line Specification::    グループバッファーの見え方を決める
* Group Mode Line Specification::  グループバッファーのモード行
* Group Highlighting::          グループバッファーにきれいに色を付ける



File: gnus-ja.info, Node: Group Line Specification, Next: Group Mode Line Specification, Prev: Group Buffer Format, Up: Group Buffer Format

グループ行の仕様
----------------

グループバッファーのディフォルトの形式はきれいでつまんないけど、これは
君の好きなように、サイコーにダサくすることもできます。

これがグループ行の例です。

          25: news.announce.newusers
      *    0: alt.fan.andrea-dworkin

とっても簡単でしょ?

`news.announce.newusers' には 25 の未読記事があるのがわかります。
`alt.fan.andrea-dworkin' には未読記事はないけれども、印を付けた記事がい
くつかあります (行頭のちっちゃなアスタリスクが見える?)。

この形式は `gnus-group-line-format' 変数をいじることで、どんな風に
でも変えられます。この変数は `format' の仕様風に動作します。つま
り (あのクソ) C 言語を使う人たちのため、printf の仕様とほぼ同じです。
*Note Formatting Variables::.

上記の行を生成するのは `%M%S%5y:%B%(%g%)\n' という値です。

コロンは、この行の中に必ず無くてはいけません。カーソルは何かの操作をし
た後は常にコロンのところに移動するからです。*Note Positioning
Point::. 他には何も必要ではありません--グループ名さえもです。表示されて
いる文字はすべてただの画面の飾りであり、Gnus がそれを調べることはありま
せん。Gnus は必要とするすべての実情報を、テキスト属性を使って憶えていま
す。

(もし君が、すごくヘンな、素晴らしい、表計算風のレイアウトを作ったとした
ら、みんな、君は会計の仕事が忙しくって、ニュースを読んで時間を無駄使い
したりなんかしてない、って信じてくれるよ。)

以下が使用できるフォーマット文字のリストです。

`M'
     そのグループに印の付いた記事しか無いときは、アスタリスク文字。

`S'
     そのグループが購読されているかどうか。

`L'
     購読度のレベル。

`N'
     未読記事の数。

`I'
     保留記事の数。

`T'
     印付き記事の数。

`R'
     既読記事の数。

`U'
     まだ読まれたことが無い記事の数。

`t'
     推定全記事数 (これは実際は MAX-NUMBER - MIN-NUMBER + 1)。

     Gnus がこの推定を使うのは、NNTP プロトコルは能率の良い MAX-NUMBER
     と MIN-NUMBER へのアクセスを提供するものの、本当の未読記事の数を得
     るには必ずしも能率的ではないからです。ヒステリックなレーズン (訳注:
     歴史的な理由のモジりか?) により、メールバックエンドにおいても、限
     定された同じインターフェースを使って、本当の未読記事の数を能率的に
     得ることはできるかもしれません。この制限を Gnus から取り払うことは
     バックエンドのインターフェースを変更することを意味し、それは楽な仕
     事ではありません。あなたがこの仕事をやりたいならば、どうぞ Gnus メー
     リングリストに連絡して下さい。

`y'
     未読でも、印付きでも、保留でもない記事の数。

`i'
     印付き記事と保留記事の数。

`g'
     グループ名のフルネーム。

`G'
     グループ名。

`C'
     グループのためのコメント (*Note Group Parameters::)、またはグルー
     プパラメーターにコメントの要素が無い場合はグループ名。

`D'
     ニュースグループの説明。これらが現れる前に、グループの説明を読む必
     要があります。それには `gnus-read-active-file' を設定するか、グルー
     プバッファーで `M-d' コマンドを使って下さい。

`o'
     司会者付きの場合 `m'。

`O'
     司会者付きの場合 `(m)'。

`s'
     選択方法。

`B'
     そのグループの概略バッファーが開いているかどうか。

`n'
     どこからの選択か。(訳注: バックエンドのシンボル名)

`z'
     外部選択方法が使われている場合、`<%s:%n>' と同じ文字列。

`P'
     トピック (*Note Group Topics::) のレベルに応じた字下げ。

`c'
     短い (省略した) グループ名。`gnus-group-uncollapsed-levels' 変数は、
     どのレベルまでグループ名を全部残すかを示します。ディフォルトは 1
     です--この意味は、`gnu.emacs.gnus' のようなグループ名を
     `g.e.gnus' に短縮するということです。

`m'
     そのグループに最近新着メールが届いている場合は `%'
     (`gnus-new-mail-mark')。

`p'
     `#' (`gnus-process-mark') で、そのグループにプロセス印が付いている
     ことを示します。

`d'
     最後にいつこのグループを読んだかを示す文字列 (*Note Group
     Timestamp::)。

`F'
     キャッシュとエージェントの両方によって取得された記事がディスクに占
     める容量。値はカラム幅を最小にするために、自動的にバイト (B)、キロ
     バイト (K)、メガバイト (M)、またはギガバイト (G) に縮尺されます。
     固定幅カラム用には %7F の形式で足ります。

`u'
     利用者定義指定。フォーマット文字列中で、この次の文字はアルファベッ
     ト文字でなければいけません。Gnus は
     `gnus-user-format-function-'`X' 関数を呼び出します。ここで `X' は
     `%u' に続いている文字です。この関数は引数に一つのダミーパラメーター
     を渡されます。この関数は、他の各指定文字の情報と同様に、バッファー
     に挿入される文字列を返さなければなりません。

すべての「〜の数」の指定は、もしその情報が利用できない場合にはアスタリ
スク (`*') で埋められます--例えば、起動されていない外部グループや、不正
な基本グループの場合です。



File: gnus-ja.info, Node: Group Mode Line Specification, Next: Group Highlighting, Prev: Group Line Specification, Up: Group Buffer Format

グループモード行の仕様
----------------------

モード行は `gnus-group-mode-line-format' (*Note Mode Line
Formatting::) を設定することで変更できます。こいつは指定文字をあんまり
たくさん知っていません。

`S'
     基本ニュースサーバー。
`M'
     基本選択方法。



File: gnus-ja.info, Node: Group Highlighting, Prev: Group Mode Line Specification, Up: Group Buffer Format

グループのハイライト
--------------------

グループバッファーのハイライトは `gnus-group-highlight' 変数によって制
御されます。これは `(FORM . FACE)' のようなものを要素に持つ連想リストで
す。FORM が評価された結果が、`nil' 以外の何かになると、その行に対して
FACE が使用されます。

以下がこの変数の値の例です。これは背景が暗い設定ではきれいに見えるかも
しれません。

     (cond (window-system
            (setq custom-background-mode 'light)
            (defface my-group-face-1
              '((t (:foreground "Red" :bold t))) "First group face")
            (defface my-group-face-2
              '((t (:foreground "DarkSeaGreen4" :bold t))) "Second group face")
            (defface my-group-face-3
              '((t (:foreground "Green4" :bold t))) "Third group face")
            (defface my-group-face-4
              '((t (:foreground "SteelBlue" :bold t))) "Fourth group face")
            (defface my-group-face-5
              '((t (:foreground "Blue" :bold t))) "Fifth group face")))

     (setq gnus-group-highlight
           '(((> unread 200) . my-group-face-1)
             ((and (< level 3) (zerop unread)) . my-group-face-2)
             ((< level 3) . my-group-face-3)
             ((zerop unread) . my-group-face-4)
             (t . my-group-face-5)))

*Note Faces and Fonts:: も参照して下さい。

この form が評価されるときに動的に束縛されている変数には以下のものがあ
ります。

`group'
     グループ名。
`unread'
     そのグループの未読記事の数。
`method'
     選択方法。
`mailp'
     そのグループがメールのグループかどうか。
`level'
     そのグループのレベル。
`score'
     そのグループのスコア。
`ticked'
     そのグループ中の印の付いた記事の数。
`total'
     そのグループ中の全記事数。もっと正確に言うと、MAX-NUMBER マイナス
     MIN_NUMBER プラス 1。
`topic'
     トピックマイナーモードを使用している時、この変数は挿入されている現
     在のトピックに束縛されます。

この form が評価 (`eval') されるときは、ポイントは問題のグループの行頭
にあります。従って、通常の Gnus の関数のほとんどを使ってそのグループの
情報を取ってくることができます。

`gnus-group-update-hook' はグループ行が変更されたときに呼び出されます。
これは `gnus-visual' が `nil' のときは呼び出されません。このフックはディ
フォルトでは `gnus-group-highlight-line' を呼び出します。



File: gnus-ja.info, Node: Group Maneuvering, Next: Selecting a Group, Prev: Group Buffer Format, Up: Group Buffer

グループ操作
============

すべての移動コマンドは数値接頭引数を理解するので、期待する通りの動作を
します。たぶんね。

`n'
     次の未読記事のあるグループに移動します
     (`gnus-group-next-unread-group')。

`p'
`DEL'
     一つ前の未読記事のあるグループに移動します
     (`gnus-group-prev-unread-group')。

`N'
     次のグループに移動します (`gnus-group-next-group')。

`P'
     一つ前のグループに移動します (`gnus-group-prev-group')。

`M-n'
     一つ前の同じレベル (もしくはそれより小さいレベル) の未読グループに
     移動します (`gnus-group-prev-unread-group-same-level')。

`M-p'
     次の同じレベル (もしくはそれより小さいレベル) の未読グループに移動
     します (`gnus-group-next-unread-group-same-level')。

次の三つの命令はグループにジャンプするためのものです:

`j'
     グループにジャンプします (それが見えるようになっていなかったら見え
     るようにします) (`gnus-group-jump-to-group')。kill されているグルー
     プも、生きているグループと同様にジャンプできます。

`,'
     最も小さいレベルの未読グループにジャンプします
     (`gnus-group-best-unread-group')。

`.'
     最初の未読記事のあるグループにジャンプします
     (`gnus-group-first-unread-group')。

`gnus-group-goto-unread' を `nil' にすると、すべての移動コマンドは、次
の未読グループではなく次のグループに移動するようになります。そのコマン
ドが次の未読グループに移動すると言い張っていてもです。ディフォルトは
`t' です。



File: gnus-ja.info, Node: Selecting a Group, Next: Subscription Commands, Prev: Group Maneuvering, Up: Group Buffer

グループの選択
==============

`SPACE'
     現在のグループを選択し、概略バッファーに切り替えて最初の未読記事を
     表示します (`gnus-group-read-group')。もしそのグループに未読記事が
     無い、もしくはこの命令に数値以外の接頭引数を与えると、Gnus はサー
     バーからこのグループのすべての古い記事を取得しようとします。N の数
     値接頭引数を与えると、Gnus の取得する記事数は N になります。N が正
     の数であれば Gnus は新しい方から N 個の記事を取得し、N が負の数で
     あれば Gnus は古い方から `abs(N)' 個の記事を取得します。

     したがって、`SPC' では普通にグループに入り、`C-u SPC' では古い記
     事が現れます。`C-u 4 2 SPC' では 42 個の最新の記事を取得し、`C-u
     - 4 2 SPC' では 42 個の最も古い記事を取得します。

     グループにいる (概略バッファーにいる) ときは、`M-g' で新しい記事を
     取得できるし、`C-u M-g' では古い記事を表示することができます。

`RET'
     現在のグループを選択し、概略バッファーに切り替えます
     (`gnus-group-select-group')。`gnus-group-read-group' と同じ引数を
     取ります--唯一の違いは、グループに入ったときに最初の未読記事を表示
     しない、ということです。

`M-RET'
     これは上記のコマンドと同じ動作をしますが、「ゴタゴタ」は最低限にし
     ようとします (`gnus-group-quick-select-group')。スコア・kill の処
     理は行なわれず、ハイライトも記事消去もしません。これは、あなたが本
     当に急いでいて、どっかのやたらでっかいグループに入らなければいけな
     いときに役に立つかもしれません。また、接頭引数に 0 を与えれば (す
     なわち `0 M-RET')、Gnus は概略バッファーを作ろうとさえしません。こ
     れは概略バッファーを作る前にスレッド表示を切り替えたいとき役に立ち
     ます (*Note Summary Generation Commands::)。

`M-SPACE'
     これは `RET' コマンドと同じ動作をするさらにもう一つのコマンドです
     が、このコマンドは記事消去と保留記事を隠す処理を行ないません
     (`gnus-group-visible-select-group')。

`C-M-RET'
     最後にこのコマンドは、現在のグループを一度限り、その内容に一切の処
     理をすることのないように選択します
     (`gnus-group-select-group-ephemerally')。スレッド表示さえも行なわ
     れません。この方法で選択した後にこのグループに対して行なったことは
     すべて、その後に影響を与えることはありません。

`gnus-large-newsgroup' 変数は、何を大きなグループと考えるべきかを Gnus
に与えます。`nil' だったら、どのグループも大きいと考えません。ディフォ
ルト値は 200 です。グループに (未読と可視の) 記事がこの数以上あれば、
Gnus はそのグループに入る前に利用者に確認を求めます。利用者はサーバーか
らいくつの記事を取得するかを指定できます。もし利用者が負の数 (-N) を指
定すれば、古い方から N 個の記事を取得します。正の数であれば、新しく到着
した方から N 個の記事を取得します。

`gnus-large-ephemeral-newsgroup' は `gnus-large-newsgroup' と同じですが、
一時ニュースグループのためにだけ使われます。

もし `gnus-auto-select-first' が非-`nil' だったら、`SPACE' コマンドでグ
ループに入ったときに自動的に記事を選択します。どの記事が選択されるかは、
変数 `gnus-auto-select-subject' で制御されます。この変数に設定できる有
効な値は:

`unread'
     最初の未読記事の表題の行にポイントを移動させます。

`first'
     最初の記事の表題の行にポイントを移動させます。

`unseen'
     まだ読まれたことが無い最初の記事の表題の行にポイントを移動させます。

`unseen-or-unread'
     まだ読まれたことが無い最初の記事があれば、その記事の表題の行にポイ
     ントを移動させ、無かったら最初の未読記事の表題の行にポイントを移動
     させます。

`best'
     スコアが最も高い未読記事の表題の行にポイントを移動させます。

この変数は関数であることもできます。その場合、その関数は表題の行にポイ
ントを移動させるために呼ばれます。

もしあるグループで自動記事選択をやめたいのであれば (例えばでっかい記事
のあるバイナリーグループでは、とか)、グループが選択されたときに呼び出さ
れる `gnus-select-group-hook' の中で変数 `gnus-auto-select-first' を
`nil' に設定することができます。



