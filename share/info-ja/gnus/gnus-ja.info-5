Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: Finding the Parent, Next: Alternative Approaches, Prev: Summary Sorting, Up: Summary Buffer

親記事を探す
============

`^'
     現在の記事の親記事を読みたいのに、それが概略バッファーに表示されて
     いなくても、おそらくそれは可能でしょう。というのは、現在のグループ
     が NNTP で取得されていて、親がまだ期限切れ消去されていない上、現在
     の記事の `References' がぶち壊されていなければ、ただ `^' か `A r'
     を押せば良いだけですから (`gnus-summary-refer-parent-article')。す
     べてがうまくいけば、親記事を取得できるでしょう。もし親記事がすでに
     概略バッファーに表示されているのであれば、ポイントがその記事に移動
     するでしょう。

     正の数値接頭引数を与えられると、その数の祖先たちを遡って取得します。
     負の数値接頭引数が与えられた場合は、その数の世代だけ前の祖先の記事
     のみを取得します。ですから `3 ^' とすれば、Gnus は現在の記事の親と
     祖父母と曾祖父母を取得します。`-3 ^' とすれば、Gnus は現在の記事の
     曾祖父母だけを取得します。

`A R (概略)'
     記事の `References' 欄にあるすべての記事を取得します
     (`gnus-summary-refer-references')。

`A T (概略)'
     現在の記事があるスレッドの、全部の記事を表示します
     (`gnus-summary-refer-thread')。この命令は動作するために現在のグルー
     プのすべてのヘッダーを取得しなければならないので、普通は少し時間が
     かかります。これをしばしば行なうのであれば、
     `gnus-fetch-old-headers' を `invisible' に設定することを考えたほう
     が良いでしょう (*Note Filling In Threads::)。これは普通は視覚的な
     効果はありませんが、この命令の動作をかなり速くします。もちろんグルー
     プに入るのはいくらか遅くなりますが。

     変数 `gnus-refer-thread-limit' はこの命令を実行するときにどのくら
     い古い (すなわち、現在のグループで最初に表示されたものよりも前の記
     事の) ヘッダーを取得するかを指定します。ディフォルトは 200 です。
     もし `t' であれば、取得可能なすべてのヘッダーを取得します。`A T'
     命令に数値接頭引数を与えると、代わりにそれが使われます。

`M-^ (概略)'
     どのグループに属しているかに関わらず、任意の記事を Gnus に要求する
     ことができます。`M-^' (`gnus-summary-refer-article') は
     `Message-ID'、つまりあの長くてなかなか読むことのできない
     `<38o6up$6f2@hymir.ifi.uio.no>' のようなものをあなたに尋ねます。あ
     なたはすべてを正確に打ち込まなければなりません。残念ながら、あいま
     いな検索はできないのです。

     Gnus はすでに取得してあるヘッダーたちの中で `Message-ID' を探しま
     すが、見つからなかったら `gnus-refer-article-method' に設定されて
     いるすべての選択方法を試してもみます。

もしあなたの読んでいるグループが `Message-ID' での取得があまり良くでき
ないようなバックエンド (`nnspool' など) であるのなら、
`gnus-refer-article-method' を NNTP の選択方法に設定すれば良いでしょう。
おそらく、あなたが問い合わせる NNTP サーバーがあなたの読んでいるスプー
ルを更新していると最も良いでしょう。しかし、それはどうしても必要なわけ
ではありません。

それは選択方法のリストのみならず、現在の選択方法を意味する特別なシンボ
ル `current' であることもできます。Gnus は合うものを発見するまでそれら
すべての方法を試します。

これは現在の選択方法を試して、それが失敗した場合には Google に訊く設定
の例です:

     (setq gnus-refer-article-method
           '(current
             (nnweb "google" (nnweb-type google))))

ほとんどのメールバックエンドは `Message-ID' での取得が可能ですが、あま
り優雅な方法でやっているわけではありません。`nnmbox', `nnbabyl',
`nnmaildir' および `nnml' がどのグループからでも記事を捜索できるのに対
して、`nnfolder' と `nnimap' は現在のグループに投稿された記事しか探すこ
とができません。(その他のものは時間がかかりすぎます。) `nnmh' ではまっ
たく不可能です。



File: gnus-ja.info, Node: Alternative Approaches, Next: Tree Display, Prev: Finding the Parent, Up: Summary Buffer

代替手段
========

ニュースを読む方法の好みは人それぞれです。これは Gnus なのですから、概
略バッファーのためのマイナーモードに少しばかり選択肢を設けます。

* Menu:

* Pick and Read::               まず、記事に印を付けて、それから読む
* Binary Groups::               すべての記事を自動デコードする



File: gnus-ja.info, Node: Pick and Read, Next: Binary Groups, Prev: Alternative Approaches, Up: Alternative Approaches

選んで読む
----------

いくつかのニュースリーダー (`nn' や、ええと VM/CMS の `Netnews' など)
は二段階の講読インターフェースを使います。利用者はまず概略バッファーで
読みたい記事に印を付けます。それから、記事バッファーだけを表示して記事
を読みます。

Gnus はこれをするための概略バッファーマイナーモードを提供しま
す---`gnus-pick-mode' です。これは、基本的には簡単に印を付けられるよう
に少数のプロセス印命令を一個のキーだけで済む命令にして、概略バッファー
へ切り替えるための追加の命令を一つ提供します。

     訳注: Pick マイナーモードを有効にするには、以下のフックを使って下
     さい:

          (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

     そうせずに、概略バッファーに入ってから `M-x gnus-pick-mode' を実行
     しても、うまくいかないようです。

これらが pick mode で使うことができるキーです:

`.'
     現在の行の記事かスレッドを選択します
     (`gnus-pickd-article-or-thread')。変数 `gnus-thread-hide-subtree'
     が非-`nil' だったら、このキーがスレッドの最初の記事で使われるとス
     レッド全体を選択します。そうでなければ、その記事だけを選択します。
     もし数値接頭引数を与えられると、その番号のスレッドか記事に移動して、
     それを選択します。(普通は行番号が概略行の最初に表示されます。)

`SPACE'
     概略バッファーを一ページ次にスクロールします
     (`gnus-pick-next-page')。もしバッファーの最後であれば、選択した記
     事を読み始めます。

`u'
     スレッドか記事を未選択にします
     (`gnus-pick-unmark-article-or-thread')。変数
     `gnus-thread-hide-subtree' が非-`nil' だったら、このキーがスレッド
     の最初で使われるとそのスレッドを未選択にします。そうでなければ、そ
     の記事だけを未選択にします。その行にあるスレッドか記事を未選択にす
     るために、このキーに数値接頭引数を与えることができます。

`RET'
     選択された記事を読み始めます (`gnus-pick-start-reading')。接頭引数
     が与えられると、最初にすべての未選択記事に既読の印を付けます。
     `gnus-pick-display-summary' が `nil' でないと、概略バッファーは読
     んでいる間も表示されます。

すべての普通の概略モード命令は pick-mode でも使用可能ですが、`u' は例外
です。それでも、同じ関数 `gnus-summary-tick-article-forward' に割り当て
られている `!' を使うことができます。

これが良さそうだと思ったら、次のようにして下さい:

     (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

`gnus-pick-minor-mode-hook' は pick マイナーモードのバッファーで実行さ
れます。

`gnus-mark-unpicked-articles-as-read' が非-`nil' だったら、選択されなかっ
たすべての記事に既読の印を付けます。ディフォルトは `nil' です。

pick モードでの概略行の様式は標準の様式とは少し違います。それぞれの行の
最初に行数が表示されます。Pick モードの行の様式は変数
`gnus-summary-pick-line-format' で制御されます (*Note Formatting
Variables::)。これは `gnus-summary-line-format' と同じ様式指定を受け付
けます (*Note Summary Buffer Lines::)。



File: gnus-ja.info, Node: Binary Groups, Prev: Pick and Read, Up: Alternative Approaches

バイナリーグループ
------------------

多くの時間をバイナリーグループで過ごしているのなら、いつも `X u', `n',
`RET' を叩くのが嫌になっているでしょう。`M-x gnus-binary-mode' は、単に
記事を普通の方法で表示する代わりに、記事を選択するための普通の Gnus の
関数を、一連の記事を uudecode してその結果を表示するように変更する、概
略バッファーのためのマイナーモードです。

現実には、このモードにしたときに、実際に記事を見るための唯一の命令が
`g' です (`gnus-binary-show-article')。

`gnus-binary-mode-hook' がバイナリーマイナーモードのバッファーで呼ばれ
ます。



File: gnus-ja.info, Node: Tree Display, Next: Mail Group Commands, Prev: Alternative Approaches, Up: Summary Buffer

木表示
======

もし普通の Gnus の概略表示を好きでないならば、`gnus-use-trees' を `t'
に設定してみると良いかもしれません。これは (ディフォルトで) 追加の「木
バッファー」(tree buffer) を作成します。木バッファーではすべての概略モー
ド命令を実行することができます。

もちろん、木表示をカスタマイズする変数が少しあります:

`gnus-tree-mode-hook'
     すべての木モードのバッファーで実行されるフックです。

`gnus-tree-mode-line-format'
     木モードのバッファーにおけるモード行のためのフォーマット文字列です
     (*Note Mode Line Formatting::)。ディフォルトは `Gnus: %%b %S %Z'
     です。使用可能な指定は *Note Summary Buffer Mode Line:: を参照して
     下さい。

`gnus-selected-tree-face'
     木バッファーで選択された記事をハイライトするために使われるフェース
     です。ディフォルトでは `modeline' です。

`gnus-tree-line-format'
     木の節のためのフォーマット文字列です。でもこれは少し誤った名称で
     す--それは行ではなく、ただ節を定義するだけです。ディフォルトの値は
     `%(%[%3,3n%]%)' で、それは投稿者の名前の最初の三文字を表示します。
     すべての節が同じ長さであることが重要なので、`%4,4n' のような指定を
     *使わなければなりません*。

     有効な指定は:

     `n'
          投稿者の名前。
     `f'
          `From' 欄。
     `N'
          記事の番号。
     `['
          開き括弧。
     `]'
          閉じ括弧。
     `s'
          表題。

     *Note Formatting Variables::.

     表示に関連した変数は:

     `gnus-tree-brackets'
          これは『本当の』記事と『まばら』な記事に違いを付けるために使
          われます。様式は

               ((本当の開 . 本当の閉)
                (まばら開 . まばら閉)
                (偽の開 . 偽の閉))

          となっていて、ディフォルトは `((?[ . ?]) (?( . ?)) (?{ . ?})
          (?< . ?>))' です。

     `gnus-tree-parent-child-edges'
          これは親の節を子に接続するために使われる文字を含むリストです。
          ディフォルトは `(?- ?\\ ?|)' です。

`gnus-tree-minimize-window'
     もしこの変数が `nil' でないと、他の Gnus ウィンドウがもっと場所を
     取れるように Gnus は木バッファーをできるだけ小さくします。もしこの
     変数が数値であると、木バッファーの高さはその数値より大きくなること
     はありません。ディフォルトは `t' です。フレームでいくつかのウィン
     ドウが横に並んで表示されていて、木バッファーがそのうちの一つである
     場合、木ウィンドウを最小化することはその隣に表示されているすべての
     ウィンドウの大きさをも変更することに注意して下さい。

     以下のフックを追加して、いつでも木ウィンドウを最小化するようにして
     も良いでしょう。

          (add-hook 'gnus-configure-windows-hook
                    'gnus-tree-perhaps-minimize)

`gnus-generate-tree-function'
     実際にスレッドの木を作成する関数です。二つの定義済みの関数
     `gnus-generate-horizontal-tree' および
     `gnus-generate-vertical-tree' (これがディフォルトです) が利用可能
     です。

水平木バッファー (horizontal tree buffer) の例です:

     {***}-(***)-[odd]-[Gun]
          |      \[Jan]
          |      \[odd]-[Eri]
          |      \(***)-[Eri]
          |            \[odd]-[Paa]
          \[Bjo]
          \[Gun]
          \[Gun]-[Jor]

同じスレッドが垂直木バッファー (vertical tree buffer) で表示されたもの
です:

     {***}
       |--------------------------\-----\-----\
     (***)                         [Bjo] [Gun] [Gun]
       |--\-----\-----\                          |
     [odd] [Jan] [odd] (***)                   [Jor]
       |           |     |--\
     [Gun]       [Eri] [Eri] [odd]
                               |
                             [Paa]

もし水平木を使っているのなら、概略バッファーで木を隣り合わせで表示でき
れば嬉しいでしょう。次のようなものを `~/.gnus.el' ファイルに加えること
ができます:

     (setq gnus-use-trees t
           gnus-generate-tree-function 'gnus-generate-horizontal-tree
           gnus-tree-minimize-window nil)
     (gnus-add-configuration
      '(article
        (vertical 1.0
                  (horizontal 0.25
                              (summary 0.75 point)
                              (tree 1.0))
                  (article 1.0))))

*Note Window Layout::.



File: gnus-ja.info, Node: Mail Group Commands, Next: Various Summary Stuff, Prev: Tree Display, Up: Summary Buffer

メールグループ命令
==================

いくつかの命令はメールグループでのみ意味を持ちます。これらの命令が現在
のグループで有効でないなら、それらは大騒ぎをしてあなたに知らせるでしょ
う。

これらすべての命令は (期限切れ消去と編集命令は除く) プロセス/接頭引数の
習慣を使います (*Note Process/Prefix::)。

`B e'
     現在のグループのすべての期限切れ消去可能な記事について、期限切れ消
     去の処理 (`gnus-summary-expire-articles') を行ないます。これは、そ
     のグループにしばらく存在していた期限切れ消去可能なすべての記事を消
     去するということです。(*Note Expiring Mail::)。

`B C-M-e'
     グループのすべての期限切れ消去可能な記事を削除します
     (`gnus-summay-expire-articles-now')。これは、現在のグループにある
     *すべて* の期限切れ消去可能な記事が、永遠に空の大きな `/dev/null'
     へ消え去るということです。

`B DEL'
     メール記事を削除します。これは『あなたのディスクから永久に削除して
     二度と戻らない』の意味の『削除』です。注意して使って下さい
     (`gnus-summary-delete-article')。

`B m'
     あるメールグループから別のメールグループへ記事を移動します
     (`gnus-summary-move-article')。`gnus-preserve-marks' の値が `nil'
     でなければ (それがディフォルト)、印は保存されます。

`B c'
     あるグループ (メールグループや他のもの) からメールグループに記事を
     コピーします (`gnus-summary-copy-article')。`gnus-preserve-marks'
     の値が `nil' でなければ (それがディフォルト)、印は保存されます。

`B B'
     現在の記事を他のグループにクロスポストします
     (`gnus-summary-crosspost-article')。これは他のグループの記事の新し
     い複製を作成し、記事の Xref 欄も適切に更新されます。

`B i'
     任意のファイルを現在のメールグループに取り込みま
     す (`gnus-summary-import-article')。あなたはファイル名と、
     `From' 欄と `Subject' 欄の入力を促されます。

`B I'
     空の記事を現在のメールグループに作ります
     (`gnus-summary-create-article')。`From' ヘッダーと `Subject' ヘッ
     ダーの内容を尋ねられます。

`B r'
     メール記事をスプールし直します (`gnus-summary-move-article')。
     `gnus-summary-respool-default-method' が再スプールするときのディフォ
     ルトの選択方法として使用されます。この変数はディフォルトでは
     `nil' で、その場合は現在のグループの選択方法が代わりに使われます。
     `gnus-preserve-marks' の値が `nil' でなければ (それがディフォルト)、
     印は保存されます。

     訳注: 「スプールし直す」というのはメールの分割 (*Note Splitting
     Mail:: または *Note Fancy Mail Splitting::) の規則に基づいて、メー
     ルを適切なグループに入れ直すことです。そのグループに間違って入って
     しまったメールを、分割の規則を修正した後で、正しいグループに移動さ
     せる場合などに使います。この章の `B q' と `B t' も見て下さい。

`B w'
`e'
     現在の記事を編集します (`gnus-summary-edit-article')。編集を終了し
     て変更を固定するには `C-c C-c' (`gnus-summary-edit-article-done')
     を打ちます。もし `C-c C-c' 命令に接頭引数を与えると、Gnus は記事を
     再ハイライトしません。

     訳注: 変更しないで編集を終るには、`C-c C-k' をタイプして下さい。

`B q'
     記事を再スプールするときは、再スプールをする前にどのグループに記事
     が移るかを知りたいでしょう。この命令でそれがわかります
     (`gnus-summary-respool-query')。

`B t'
     同様に、この命令は再スプールするときに使われるすべての特級分割方式
     を、もしあれば表示します (`gnus-summary-respool-trace')。

`B p'
     一部の人たちには、あなたが投稿した記事にフォローアップするときに
     「親切な」複製を送る傾向があります。これらは普通はそこに
     `Newsgroups' ヘッダーが付いているのですが、いつもそうであるとは限
     りません。この命令 (`gnus-summary-article-posted-p') は現在の記事
     をあなたのニュースサーバーから (というよりは、むしろ
     `gnus-refer-article-method' や `gnus-select-method' から) 取得しよ
     うとして、記事を発見できたかどうかを報告します。それが記事を発見し
     なかったとしても、それはとにかく投稿されているかもしれません--メー
     ルの伝達はニュースの伝達よりもずっと速いので、ニュースの複製がまだ
     到着していないだけかもしれないのです。

     訳注: その「親切な」複製が、概略バッファーで独立した記事として見え
     ていないと検査することができないので、そうするために `A D' または
     `C-d' 命令 (*Note Really Various Summary Commands::) を使う必要が
     あるかもしれません。この命令はとにかくすべての選択方法を試すので、
     特にそれらに遅いものが含まれているときは、注意して使って下さい。

`K E'
     記事の本文を暗号化します (`gnus-article-encrypt-body')。本文は、変
     数 `gnus-article-encrypt-protocol' で指定されたプロトコルで暗号化
     されます。

いつも記事をどこかに移動 (もしくは複製) することを習慣にしているのなら
ば、記事をどこに入れれば良いかを Gnus に提案してもらいたいと思うでしょ
う。`gnus-move-split-methods' は `gnus-split-methods' と同じ構文を使う
変数です (*Note Saving Articles::)。あなたが妥当だと思うような提案をす
るようにその変数をカスタマイズすることができます。
(`gnus-split-methods' がファイル名を使うのに対して
`gnus-move-split-methods' はグループ名を使うことに注意して下さい。)

     (setq gnus-move-split-methods
           '(("^From:.*Lars Magne" "nnml:junk")
             ("^Subject:.*gnus" "nnfolder:important")
             (".*" "nnml:misc")))



File: gnus-ja.info, Node: Various Summary Stuff, Next: Exiting the Summary Buffer, Prev: Mail Group Commands, Up: Summary Buffer

概略のいろいろなもの
====================

* Menu:

* Summary Group Information::   情報指向の命令
* Searching for Articles::      複数記事命令
* Summary Generation Commands::
* Really Various Summary Commands::  あのやっかいな思い通りにならない命令

`gnus-summary-display-while-building'
     非-`nil' だったら、構築中の概略バッファーを更新しながら表示します。
     `t' だった場合は、行が挿入される度に毎回バッファーを更新します。値
     が整数 N であった場合は、N 行毎に表示を更新します。ディフォルトは
     `nil' です。

`gnus-summary-display-arrow'
     非-`nil' だったら、現在の記事を指し示すためにフリンジに矢印を表示
     します。(訳注: フリンジとは Emacs 21 以上でウィンドウの左右に現れ
     る余白のことです。)

`gnus-summary-mode-hook'
     概略モードのバッファーを作成するときにこのフックが呼ばれます。

`gnus-summary-generate-hook'
     これはスレッド作成と概略バッファー作成の前に実行する最後のものとし
     て呼ばれます。これはニュースグループの持っているデータに基づいてス
     レッドの変数をカスタマイズするのに非常に便利です。このフックはほと
     んどの概略バッファー変数が設定された後に概略バッファーから呼ばれま
     す。

`gnus-summary-prepare-hook'
     これは概略バッファーが作成された後に呼ばれます。例えば、これを何か
     しら神をも畏れぬ方法で行をハイライトしたり、バッファーの見え方を修
     正したりするのに使ったりするかもしれません。

`gnus-summary-prepared-hook'
     概略バッファーが作成された後で一番最後に呼ばれるフックです。

`gnus-summary-ignore-duplicates'
     Gnus が同じ `Message-ID' を持つ二つの記事を発見したときは、何か思
     い切ったことをしなければなりません。別の記事が同じ `Message-ID' を
     持つことは許されていませんが、それは何らかのソースからメールを読ん
     でいるときに起こるかもしれません。この変数によって Gnus が何をする
     かをカスタマイズできるようになっています。`nil' だったら (それがディ
     フォルトです)、Gnus は `Message-ID' を付け替えて (表示のためだけに)
     その記事を他の記事と同じように表示します。`t' にすると、それは記事
     を表示しません--最初から存在しなかったかのように。

`gnus-alter-articles-to-read-function'
     この変数に設定した関数で、選択する記事のリストを変更することができ
     ます。関数は二つの引数 (グループ名と選択する記事のリスト) を受け付
     けます。

     例えば以下の関数は、キャッシュされた記事のリストを、あるグループの
     リストだけに追加します。

          (defun my-add-cached-articles (group articles)
            (if (string= group "some.group")
                (append gnus-newsgroup-cached articles)
              articles))

`gnus-newsgroup-variables'
     ニュースグループ (その概略バッファーの) のローカル変数、または変数
     とそれらの評価されるディフォルトの表現 (ディフォルト値が `nil' で
     ない場合) の cons セルのリストで、その概略バッファーが活きている間
     はグローバル変数になります。(訳注: いわゆるバッファーローカル変数
     ではありません。)

     注: ディフォルトの表現は単にローカル変数に設定されるのではなく、そ
     の前に (`eval' 関数を使って) 評価されます。ディフォルトの表現が
     `global' というシンボルだった場合は評価されず、代わりにそのローカ
     ル変数のグローバル値が使われます。

     これらグループパラメーターの値が他のバッファーで行なわれる処理に影
     響するようになっていても、(訳注: その概略バッファーの) グループパ
     ラメーターを設定するために使うことができます。例です:

          (setq gnus-newsgroup-variables
               '(message-use-followup-to
                 (gnus-visible-headers .
                   "^From:\\|^Newsgroups:\\|^Subject:\\|^Date:\\|^To:")))

     *Note Group Parameters:: も参照して下さい。

     訳注: もっと良い例が必要です。`gnus-newsgroup-variables' および
     `gnus-parameters' (*Note Group Parameters::) の値を次のように設定
     したとしましょう:

          (setq gnus-newsgroup-variables '((VAR . FOO)))
          (setq gnus-parameters
                '(("^fj\\." (VAR . BAR))
                  ("^japan\\." (VAR . BAZ))))

     こうしておくと変数 VAR の値が、`fj' 階層のニュースグループ (の概略
     バッファー) に入ると BAR になり、`japan' 階層のグループに入ると
     BAZ になります。グループを抜けても変数 VAR の値は変化しませんが、
     `fj' または `japan' 階層以外のグループに入ると変数 VAR の値は FOO
     になります (正確には、FOO, BAR または BAZ の値は、本編で説明されて
     いるように `eval' した結果が使われます)。

     通常のグループパラメーターは、そのグループの概略バッファーでだけ値
     を知ることができるのに対して、`gnus-newsgroup-variables' で設定し
     た変数は、同じ Emacs のどのバッファーでも、現在選択されているグルー
     プ固有の値を持つ点が違います。異なる複数のグループの概略バッファー
     を使う場合には、注意する必要があります。

     特別な場合として FOO が `nil' で良い場合は、次のように記述すること
     ができます:

          (setq gnus-newsgroup-variables '(VAR))
          (setq gnus-parameters
                '(("^fj\\." (VAR . BAR))
                  ("^japan\\." (VAR . BAZ))))

     `gnus-newsgroup-variables' および `gnus-parameters' はどちらもリス
     トなので、`setq' よりはむしろ `add-to-list' や `push' などを使って、
     値を「追加」した方が便利かもしれません。



File: gnus-ja.info, Node: Summary Group Information, Next: Searching for Articles, Prev: Various Summary Stuff, Up: Various Summary Stuff

概略グループ情報
----------------

`H f'
     現在のグループの FAQ (frequently asked questions (頻繁にされる質問)
     のリスト) を取得しようとします (`gnus-summary-fetch-faq')。Gnus は
     `gnus-group-faq-directory' (通常これは遠隔マシンのディレクトリー)
     から FAQ を取得しようとします。この変数はディレクトリーのリストで
     あることもできます。その場合、この命令に接頭引数を与えることによっ
     ていろいろなサイトから選ぶことができます。おそらく `ange-ftp' もし
     くは `efs' がファイルの取得に使われるでしょう。

`H d'
     現在のグループの簡潔な説明を表示します
     (`gnus-summary-describe-group')。接頭引数が与えられると、サーバー
     から強制的に説明の再読み込みをします。

`H h'
     最も重要な概略コマンドの、非常に簡潔な説明を表示します
     (`gnus-summary-describe-briefly')。

`H i'
     Gnus の info の節 (node) に移動します (`gnus-info-find-node')。



File: gnus-ja.info, Node: Searching for Articles, Next: Summary Generation Commands, Prev: Summary Group Information, Up: Various Summary Stuff

記事を探す
----------

`M-s'
     それ以降のすべての (生の) 記事を正規表現で検索します
     (`gnus-summary-search-article-forward')。

`M-r'
     それ以前のすべての (生の) 記事を正規表現で検索します
     (`gnus-summary-search-article-backward')。

`&'
     この命令は、ヘッダー、そのヘッダーの内容に合致する正規表現、および
     合致したときに実行されるコマンドの入力を要求します
     (`gnus-summary-execute-command')。ヘッダーが空文字列だったら、記事
     全体で合致するものを探します。接頭引数を与えられると、代わりに後ろ
     向きに探します。

     例えば `& RET 何かの.*文字列 RET #' は、ヘッダーか本文に `何か
     の.*文字列' を持つすべての記事にプロセス印を付けます。

`M-&'
     この命令に続けて入力する命令を、プロセス印が付けられているすべての
     記事で実行します (`gnus-summary-universal-argument')。



File: gnus-ja.info, Node: Summary Generation Commands, Next: Really Various Summary Commands, Prev: Searching for Articles, Up: Various Summary Stuff

概略生成命令
------------

`Y g'
     現在の概略バッファーを再作成します (`gnus-summary-prepare')。

`Y c'
     (現在のグループのために) キャッシュされたすべての記事を概略バッ
     ファーに挿入します (`gnus-summary-insert-cached-articles')。

`Y d'
     (現在のグループのための) すべての保留記事を概略バッファーに挿入し
     ます (`gnus-summary-insert-dormant-articles')。



File: gnus-ja.info, Node: Really Various Summary Commands, Prev: Summary Generation Commands, Up: Various Summary Stuff

本当にいろいろな概略命令
------------------------

`A D'
`C-d'
     現在の記事が別の記事を寄せ集めたもの (例えばダイジェスト) であるな
     らば、それらの記事でできているグループに入るためにこの命令を使うこ
     とができます (`gnus-summary-enter-digest-group')。この命令に接頭引
     数を与えないと Gnus はどのような型の記事が現在表示されているかを推
     測しようとし、実際にはそれが『ダイジェスト』であるものとして強引に
     解釈します。基本的に、ある様式で寄せ集められた別のメッセージを見る
     ときはいつでも、`C-d' を使うことによって、もっと便利なやり方でそれ
     らのメッセージを読むことができます。

`C-M-d'
     この命令は上のものによく似ていますが、いくつかの文書を一つのおおー
     きなグループに集めます (`gnus-summary-read-read-document')。それを
     実現するために、この命令はそれぞれの文書のための `nndoc' グループ
     を開いてから、それら複数の `nndoc' グループのてっぺんで
     `nnvirtual' グループを開きます。この命令はプロセス/接頭引数の習慣
     を理解します (*Note Process/Prefix::)。

`C-t'
     長い概略行を切り詰めるかどうかを切り替えます
     (`gnus-summary-toggle-truncation')。これはおそらく概略バッファーで
     行を中央に表示する機能を混乱させるので、記事を読んでいるときに行の
     切り詰めを off にするのは良い考えではないでしょう。

`='
     概略バッファーのウィンドウを拡大します
     (`gnus-summary-expand-window')。接頭引数を与えられると、記事バッ
     ファーのためのウィンドウの配置の設定を強制します (訳注: ディフォル
     トでは記事バッファーのためのウィンドウの配置の設定には概略バッファー
     を表示することも含まれているので、普通に記事を読んでいるときと同じ
     になるでしょう)。

`C-M-e'
     現在のグループのグループパラメーター (*Note Group Parameters::) を
     編集します (`gnus-summary-edit-parameters')。

`C-M-a'
     現在のグループのグループパラメーター (*Note Group Parameters::) を
     カスタマイズします (`gnus-summary-customize-parameters')。



File: gnus-ja.info, Node: Exiting the Summary Buffer, Next: Crosspost Handling, Prev: Various Summary Stuff, Up: Summary Buffer

概略バッファーを抜ける
======================

概略バッファーから抜けると、普通はグループのすべての情報を更新してグルー
プバッファーに戻ります。

`Z Z'
`Z Q'
`q'
     現在のグループを出て、グループのすべての情報を更新します
     (`gnus-summary-exit')。抜け出るための多くの処理を行なう前に
     `gnus-summary-prepare-exit-hook' が呼ばれ、それはディフォルトで
     `gnus-summary-expire-articles' を呼びます。抜け出るための処理を終
     えた後で `gnus-summary-exit-hook' が呼ばれます。グループモードに戻
     るときに (未読の) グループが残っていなかったら
     `gnus-group-no-more-groups-hook' が実行されます。

`Z E'
`Q'
     グループのどんな情報も更新せずに現在のグループを抜け出ます
     (`gnus-summary-exit-no-update')。

`Z c'
`c'
     グループのすべての可視ではない (unticked) 記事に既読の印を付けてか
     ら抜けます (`gnus-summary-catchup-and-exit')。

`Z C'
     可視記事さえも含むすべての記事に既読の印を付けてから抜けます
     (`gnus-summary-catchup-all-and-exit')。

`Z n'
     すべての記事に既読の印を付けて次のグループへ移動します
     (`gnus-summary-catchup-and-goto-next-group')。

`Z p'
     すべての記事に既読の印を付けて前のグループへ移動します
     (`gnus-summary-catchup-and-goto-prev-group')。

`Z R'
`C-x C-s'
     現在のグループを出て、それから入り直します
     (`gnus-summary-reselect-current-group')。接頭引数が与えられると、
     既読と未読の両方のすべての記事を選択します。

`Z G'
`M-g'
     グループを抜け、そのグループの新しい記事を調べてから、再びそのグルー
     プを選択します (`gnus-summary-rescan-group')。接頭引数が与えられる
     と、既読と未読の両方のすべての記事を選択します。

`Z N'
     グループを抜けて、次のグループへ移動します
     (`gnus-summary-next-group')。

`Z P'
     グループを抜けて、前のグループへ移動します
     (`gnus-summary-prev-group')。

`Z s'
     現在の既読と印付き記事の数をドリブルバッファー (dribble buffer) に
     保存し、それからドリブルバッファーを保存します
     (`gnus-summary-save-newsrc')。接頭引数が与えられると `.newsrc' ファ
     イル (と `.newsrc.eld' ファイル) も保存します。この命令を使うと、
     更新なしで抜け出ること (`Q' 命令) は意味が無くなります。

グループのすべての情報を「更新」して現在のグループを抜けるときに
`gnus-exit-group-hook' が呼ばれます。例えば `Q' 命令
(`gnus-summary-exit-no-update') はこのフックを呼びません。

グループを抜けた後でそれを後悔する癖があるのなら、
`gnus-kill-summary-on-exit' を `nil' に設定と良いかもしれません。そうす
ると Gnus は抜け出るときに概略バッファーを削除しません。(何という驚き!)
代わりに、それはバッファーの名前を `*Dead Summary ... *' のようなものに
変更して、`gnus-dead-summary-mode' というマイナーモードを導入します。今
やそのバッファーに切り替えると、すべてのキーが関数
`gnus-summary-wake-up-the-dead' に割り当てられていることに気付くでしょ
う。死んだ概略バッファー (dead summary buffer) でどんなキーでも叩くと、
それは生きた普通の概略バッファーになります。

死んだ概略バッファーは同時に一つしか存在することはできません。

概略バッファーを抜け出ると、現在のグループのデータは更新されます (どの
記事を読んで、どの記事に返答したか、などなど。) もし変数
`gnus-use-cross-reference' が `t' であると (それがディフォルトです)、そ
のグループに相互参照された (cross referenced) 記事には、それがクロスポ
ストされた他の購読しているグループにあっても、既読の印が付きます。この
変数が `nil' でも `t' でもなければ、記事には購読しているグループと購読
していないグループの両方で既読の印が付きます (*Note Crosspost
Handling::)。



File: gnus-ja.info, Node: Crosspost Handling, Next: Duplicate Suppression, Prev: Exiting the Summary Buffer, Up: Summary Buffer

クロスポストの扱い
==================

クロスポストされた記事に既読の印を付けることによって、同じ記事を二回以
上読まないで済むことを保証します。もちろん、だれかがそれを複数のグルー
プに別々に投稿しない限りは。同じ記事を複数のグループに (クロスポストで
はではなく) 投稿することは "spamming" と呼ばれ、あなたはそのような憎む
べき犯罪を行なうものに対して、法律によって不快な記事を送ることが義務づ
けられています。spam を振い落すために、NoCeM で処理することを試してみる
必要があるかもしれません (*Note NoCeM::)。

覚えておいて下さい: クロスポストはまあ構いませんが、同じ記事を別々に複
数のグループに投稿するのは許されません。大量のクロスポスト ("velveeta"
として知られているもの) は何としても避けられるべきで、過剰なクロスポス
トに対して不満を言うために `gnus-summary-mail-crosspost-complaint' 命令
を使うことさえできます。

Gnus にクロスポストを正しく扱えなくさせる原因の一つは、XOVER (これは非
常に良いです、というのはそれは速度をとても速くするからです) をサポート
しているけれども NOV 行に `Xref' 欄を含めない NNTP サーバーを使っている
ことです。これは害悪です。でも、あぁ、悲しいかな、非常に良くあることな
のです。Gnus はあなたが読んだすべての記事に `Xref' 行を記録することによっ
て The Right Thing (正しいこと) をしようとしますが、記事を削除したり単
に読まないで既読の印を付けると、Gnus がこれらの記事の `Xref' 行をのぞき
まわる機会が無くなってしまうので、相互参照 (cross reference) の機構を使
えなくなってしまいます。

あなたの NNTP サーバーがその概観ファイル (overview file) に `Xref' 欄を
含めるかどうかを調べるには、`telnet your.nntp.server nntp' をタイプして、
`inn' サーバーでは `MODE READER' コマンドを与えてから、`LIST
overview.fmt' を試して下さい。これは動作しないかもしれません。しかし、
もし動作して、取得した最後の行が `Xref:full' でないならば (訳注: 最後の
行ではないかもしれません)、ニュースの管理者が概観ファイルに `Xref' 欄を
含めるようにしてくれるまで、彼女に向かって叫び、泣き付くべきでしょう。

Gnus にいつでも正しい `Xref' を取得するようにさせたいのであれば、
`gnus-nov-is-evil' を `t' にする必要があり、それは非常に速度を遅くしま
す。

ま、人生はそのようなものです。

代替手段に付いては *Note Duplicate Suppression:: を参照して下さい。



File: gnus-ja.info, Node: Duplicate Suppression, Next: Security, Prev: Crosspost Handling, Up: Summary Buffer

重複の抑制
==========

ディフォルトでは Gnus はクロスポスト機構を利用することによって、同じ記
事を二回以上読まないようにしようとします (*Note Crosspost Handling::)。
しかし、その単純で効果的な方法は、いろいろな理由により、満足する結果を
もたらさないかもしれません。

  1. NNTP サーバーは `Xref' 欄の生成に失敗するかもしれません。これは悪
     いことで、あまり起こりません。

  2. NNTP サーバーは `.overview' データベースに `Xref' 欄を含めるのに失
     敗するかもしれません。これは悪いことで、非常に良くあることです、あぁ
     悲しい。

  3. 同じグループ (もしくはいくつかの関連したグループ) を違った NNTP サー
     バーから読んでいるかもしれません。

  4. グループに投稿された記事と重複するメールを受け取ったかもしれません。

`Xref' の扱いに失敗する状況は確かに他にもありますが、これら四つが最も良
くある状況です。

もし、本当にもしも `Xref' の扱いに失敗したら、「重複抑制」に切り替える
ことを考慮する必要があるかもしれません。そうすれば、Gnus はあなたが読ん
だすべての記事、あるいは既読の印を付けたすべての記事の `Message-ID' を
記憶し、そしてまるで魔法のように、以後それらを読むときはいつでも既読の
印が付いているようにします---*すべて* のグループで。この機構を使うのは
何だかとても非効率になりそうですが、過度に非効率なわけではありません。
同じ記事を二回以上読むよりは、間違い無く望ましいです。

重複抑制はあまり精密な道具ではありません。どちらかというと大槌のような
ものです。それは非常に単純なやり方で動作しています--あなたが記事に既読
の印を付けると、その Message-ID をキャッシュに加えます。次にその
Message-ID に出会うと、`M' 印によって記事に既読の印を付けます。その記事
をどのグループで見たかは気にしません。

`gnus-suppress-duplicates'
     `nil' でなければ、重複抑制をします。

`gnus-save-duplicate-list'
     `nil' でなければ、重複のリストをファイルに保存します。これは起動と
     終了の時間を長くするので、ディフォルトは `nil' です。しかし、これ
     は Gnus を一回実行したときに読まれた重複記事だけが抑制されるという
     ことです。

`gnus-duplicate-list-length'
     この変数はどのくらい多くの `Message-ID' を重複抑制リストに保ってお
     くかを決定します。ディフォルトは 10000 です。

`gnus-duplicate-file'
     重複抑制のリストを格納しておくファイルの名前です。ディフォルトは
     `~/News/suppression' です。

何度も Gnus を終了して起動する傾向があるのであれば、おそらく
`gnus-save-duplicate-list' を `t' にするのは良い考えでしょう。もし
Gnus を続けて何週間も走らせておくのであれば、それを `nil' にした方が良
いかもしれません。一方、リストを保存することは起動と終了をずっと遅くす
るので、頻繁に Gnus を終了して起動するのであれば、
`gnus-save-duplicate-list' を `nil' に設定するべきです。うーむ。私はあ
なたがどうするかに任せようと思います。



File: gnus-ja.info, Node: Security, Next: Mailing List, Prev: Duplicate Suppression, Up: Summary Buffer

セキュリティー
==============

Gnus は署名されたメッセージを検証したり、暗号化されたメッセージをデコー
ドすることができます。PGP, PGP/MIME および S/MIME の形式をサポートしま
すが、それらを動作させるためには、いくつかの外部プログラムを必要としま
す:

  1. PGP と PGP/MIME のメッセージを扱うには、OpenPGP の実装である
     GnuPG のようなものをインストールしなければなりません。Gnus に含ま
     れている GnuPG へのインターフェースは PGG というもの (*Note PGG:
     (pgg-ja)Top.) ですが、Mailcrypt と gpg.el もサポートします。

  2. S/MIME のメッセージを扱うには、OpenSSL をインストールする必要があ
     ります。OpenSSL 0.9.6 か、それより新しいものがお勧めです。

以下は、メッセージを読む場合のセキュリティーの機能を制御するための変数
です:

`mm-verify-option'
     署名されたパートを検証するためのオプション。`never' は検証しない、
     `always' はいつも検証する、`known' は知られたプロトコルの場合だけ
     検証する、の意味です。それら以外の場合は、どうするかを利用者に尋ね
     ます。

`mm-decrypt-option'
     暗号化されたパートをデコードするためのオプション。`never' はデコー
     ドしない、`always' はいつもデコードする、`known' は知られたプロト
     コルの場合だけデコードする、の意味です。それら以外の場合は、どうす
     るかを利用者に尋ねます。

`mml1991-use'
     PGP のメッセージのための、OpenPGP の実装への elisp インターフェー
     スを示すシンボルです。ディフォルトは `pgg' ですが、反論があるもの
     の `mailcrypt' と `gpg' もサポートします。

`mml2015-use'
     PGP/MIME のメッセージのための、OpenPGP の実装への elisp インター
     フェースを示すシンボルです。ディフォルトは `pgg' ですが、反論があ
     るものの `mailcrypt' と `gpg' もサポートします。

ディフォルトではセキュリティーの情報を表示するボタンが現れません。それ
らは実際にメールを読む際に邪魔になるからです。 `K b' をタイプすれば、そ
の情報を表示することができますが。これを恒久的に行なわせるには、
`gnus-buttonized-mime-types' および `gnus-unbuttonized-mime-types' 変数
を使って下さい。これらの変数の詳細と、常にセキュリティーの情報を表示さ
せるためにカスタマイズする方法は、*Note MIME Commands:: を参照して下さ
い。

メニュー項目やコマンドから OpenPGP の鍵を取得 (snarf) する (すなわち、
記事から鍵を鍵束に輸入 (import) する) 機能は、明示的にはサポートされま
せん。というよりはむしろ、あなたが適切だと思うどんな動作をも通常の
MIME の機構を介して指定できるように、Gnus は `application/pgp-keys' と
して鍵を検出し、ラベルを付けます。MIME ボタンをクリック (*Note Using
MIME::) したときに、GNU Privacy Guard を使って鍵を輸入してくれるように
するには、以下のような行を `~/.mailcap' ファイル (*Note mailcap:
(emacs-mime-ja)mailcap.) に記入して下さい。

     application/pgp-keys; gpg --import --interactive --verbose; needsterminal

これは、たまたま `mailcap-mime-data' ですでに定義されている、ディフォル
トの動作でもあります。

送信するメッセージに署名したり暗号化するために、どうやって設定するかに
ついてのもっと詳しい情報が、message マニュアル (*Note セキュリティー:
(message-ja)Security.) で見つかるでしょう。



File: gnus-ja.info, Node: Mailing List, Prev: Security, Up: Summary Buffer

メーリングリスト
================

Gnus は RFC 2369 で規定された各種のメーリングリストで使われるフィールド
を理解します。これを有効にするには概略バッファーで `A M'
(`gnus-mailing-list-insinuate') を使うなどして、`to-list' グループパラ
メーター (*Note Group Parameters::) を追加して下さい。

これによって概略バッファーでの以下の命令が使えるようになります。

`C-c C-n h'
     List-Help フィールドがあったら、メーリングリストのヘルプを取り寄せ
     るためのメッセージを送信します。

`C-c C-n s'
     List-Subscribe フィールドがあったら、メーリングリストの講読を始め
     るためのメッセージを送信します。

`C-c C-n u'
     List-Unsubscribe フィールドがあったら、メーリングリストの講読をや
     めるためのメッセージを送信します。

`C-c C-n p'
     List-Post フィールドがあったら、メーリングリストに投稿します。

`C-c C-n o'
     List-Owner フィールドがあったら、メーリングリストの管理者宛てにメッ
     セージを送信します。

`C-c C-n a'
     List-Archive フィールドがあったら、メーリングリストのアーカイブを
     閲覧します。



File: gnus-ja.info, Node: Article Buffer, Next: Composing Messages, Prev: Summary Buffer, Up: Top

記事バッファー
**************

記事は一つしかない記事バッファーに表示されます。すべての概略バッファー
は (Gnus に指示しない限り) 同じ記事バッファーを共有します。

* Menu:

* Hiding Headers::              どのヘッダーを表示するかを決める
* Using MIME::                  読む前に記事を MIME に通す
* Customizing Articles::        記事の見栄えを仕立てる
* Article Keymap::              記事バッファーで使えるキー操作
* Misc Article::                その他



File: gnus-ja.info, Node: Hiding Headers, Next: Using MIME, Prev: Article Buffer, Up: Article Buffer

余分なヘッダーを隠す
====================

各記事の頭の部分はヘッダー ("head") と呼ばれます。(残りの部分はボディー
("body") です。すでにお気づきでしょうが。)

ヘッダーにはたくさんの有益な情報が含まれています。記事を書いた人の名前、
それが書かれた日付、および記事の表題です。これはとても良いのですが、ヘッ
ダーには大部分の人にとっては見たくもない情報--記事があなたのところに着
くまでにどんなシステムを経由してきたか、`Message-ID'、
`References' などなど…もううんざりするくらい--たくさん含まれてい
ます。たぶんあなたはこれらの行のいくつかは取り除いてしまいたいと思うでしょ
う。もしこれらの行をすべて記事バッファー内に残しておきたければ、
`gnus-show-all-headers' を `t' に設定して下さい。

Gnus はヘッダーを選り分けるために二つの変数を用意しています:

`gnus-visible-headers'
     この変数が `nil' 以外であれば、どのヘッダーを記事バッファーに残し
     たいかを指定する正規表現であるとみなされます。この変数に合致しない
     ヘッダーはすべて隠されます。

     例えば、記事を書いた人の名前と表題のみを見たければ、こう指定します:

          (setq gnus-visible-headers "^From:\\|^Subject:")

     この変数は、表示させたいヘッダーに合致する正規表現をリストで指定す
     ることもできます。

`gnus-ignored-headers'
     この変数は `gnus-visible-headers' の反対です。この変数が設定されて
     いれば (かつ `gnus-visible-headers' が `nil' であれば)、これは隠し
     たいヘッダー行すべてに合致する正規表現であるとみなされます。この変
     数に合致しないすべてのヘッダー行が表示されます。

     例えば、単に `References' 欄と `Xref' 欄のみを消し去りたければ、以
     下のようにします:

          (setq gnus-ignored-headers "^References:\\|^Xref:")

     この変数は消したいヘッダーに合致する正規表現のリストでも構いません。

     なお、`gnus-visible-headers' が `nil' 以外の場合は、この変数には効
     果が無いことに注意して下さい。

Gnus はヘッダーの並べ替え (sort) も行ないます (これはディフォルトで行な
われます)。この並べ替えは `gnus-sorted-header-list' 変数を設定すること
で制御することができます。これはヘッダーをどういう順序で表示するかを指
定する正規表現のリストです。

例えば、記事の著者名を最初に、次に表題を表示したければ、こんな風になる
でしょう。

     (setq gnus-sorted-header-list '("^From:" "^Subject:"))

表示するようになっているヘッダーでこの変数に指定されていないものは、こ
の変数に指定されているすべてのヘッダーの後に、適当な順序で表示されるで
しょう。

`gnus-treat-hide-boring-headers' を `head' に設定することによって、もっ
とつまらないヘッダーを隠すことができます。この関数が何をするかは
`gnus-boring-article-headers' 変数に依存します。この変数はリストですが、
このリストには実際のヘッダーの名前が入るのではありません。代わりに
Gnus がチェックして視界から消し去るためのさまざまな「つまらない条件」
("boring conditions") のリストを指定します。

この条件には以下のようなものがあります。

`empty'
     空のヘッダーをすべて消去します。
`followup-to'
     `Followup-To' 欄が `Newsgroups' 欄と同一である場合には消去します。
`reply-to'
     `Reply-To' 欄が `From' 欄と同じアドレスを示しているか、
     `broken-reply-to' グループパラメーターが設定されている場合には消去
     します。
`newsgroups'
     `Newsgroups' 欄が現在のグループ名しか含んでいない場合には消去します。
`to-address'
     `To' 欄が現在のグループの `to-address' パラメーターと同じものしか
     含んでいない場合には消去します。
`to-list'
     `To' 欄が現在のグループの `to-list' パラメーターと同じものしか含ん
     でいない場合には消去します。
`cc-list'
     `CC' 欄が現在のグループの `to-list' パラメーターと同じものしか含ん
     でいない場合には消去します。
`date'
     その記事が過去三日以内のものであれば、`Date' 欄を消去します。
`long-to'
     `To' 欄があまりにも長い場合には消去します。
`many-to'
     `To' 欄が一つよりも多ければ、それらをすべて消去します。

これらのうちの三つの要素を入れたければ、こんな風になります:

     (setq gnus-boring-article-headers
           '(empty followup-to reply-to))

これはこの変数のディフォルト値でもあります。



File: gnus-ja.info, Node: Using MIME, Next: Customizing Articles, Prev: Hiding Headers, Up: Article Buffer

MIME を使う
===========

パントマイム (mime) は、観客があくびをしながらぼんやりしているのにもか
かわらず、意味も無く空中で手を振るものの標準として広く知られています。

一方 MIME は、そのためにすべてのニュースリーダーが恐怖で死んでしまうの
にもかかわらず、意味も無く記事をエンコードする標準です。

MIME は記事がどんな文字セットを使うか、文字をどうエンコードするかを指定
することができ、さらには絵やその他のみだらなものを無邪気な格好の記事に
埋め込むことさえ可能にします。

Gnus は MIME パートを表示するために、`gnus-display-mime-function' によっ
て MIME 記事を処理します。これはディフォルトでは `gnus-display-mime' で、
MIME オブジェクトを表示し、セーブし、かつ操作するために使うことができる、
ひとかたまりのクリック可能なボタンを作成します。

MIME ボタンの上にポイントを置いたならば、以下のコマンドが利用できます:

`RET (記事)'
`BUTTON-2 (記事)'
     MIME オブジェクトの表示をトグルで切り替えます
     (`gnus-article-press-button')。そのオブジェクトを内蔵のビューワー
     で表示できないときは、Gnus は `mailcap' ファイルにある外部のビュー
     ワーに助けを求めます。ビューワーが `copiousoutput' 仕様になってい
     る場合は、オブジェクトはインラインで (訳注: Emacs の表示に埋め込ま
     れて) 表示されます。

`M-RET (記事)'
`v (記事)'
     手段を尋ね、その手段を使って MIME オブジェクトを表示します
     (`gnus-mime-view-part')。

`t (記事)'
     MIME オブジェクトを、異なる MIME メディア・タイプであるかのように
     表示します (`gnus-mime-view-part-as-type')。

`C (記事)'
     文字セットを尋ね、その文字セットを使って MIME オブジェクトを表示し
     ます (`gnus-mime-view-part-as-charset')。

`o (記事)'
     ファイル名を尋ねて MIME オブジェクトをセーブします
     (`gnus-mime-save-part')。

`C-o (記事)'
     ファイル名を尋ね、MIME オブジェクトをセーブして、それを記事から取
     り外します (記事を編集することによって行なわれます)。取り外された
     MIME オブジェクトは message/external-body MIME タイプとして参照さ
     れるようになります (`gnus-mime-save-part-and-strip')。

`r (記事)'
     ファイル名の入力を求めて、MIME オブジェクトを
     message/external-body 型の MIME 形式のファイルとして参照される外部
     にある本体で置き換えます。(`gnus-mime-replace-part')。

`d (記事)'
     記事から MIME オブジェクトを取り外し、取り外したことを表す告知で置
     き換えます (`gnus-mime-delete-part')。

`c (記事)'
     MIME オブジェクトを新たに作ったバッファーにコピーして、それを
     表示します (`gnus-mime-copy-part')。接頭引数が与えられると、デコー
     ドせずに生の内容物をコピーします。数値の接頭引数を与えると、文字セットに
     よるデコードを半手動で切り替えることができま
     す (*Note Paging the Article:: で述べられてい
     る `gnus-summary-show-article-charset-alist' を参照して下さい)。
     `auto-compression-mode' (*Note Accessing Compressed Files: (emacs)Compressed Files.) が設定されていると、
     `.gz' や `.bz2' のような圧縮されたファイルを自動的に解凍します。

`p (記事)'
     MIME オブジェクトを印刷します (`gnus-mime-print-part')。このコマン
     ドは `.mailcap' ファイルで定義された `print=' 仕様に従います。

`i (記事)'
     MIME オブジェクトの内容物を、その記事バッファーに text/plain とし
     て挿入します (`gnus-mime-inline-part')。接頭引数が与えられると、デ
     コードせずに生の内容物を挿入します。数値の接頭引数を与えると、文字
     セットによるデコードを半手動で切り替えることができます (*Note
     Paging the Article:: で述べられている
     `gnus-summary-show-article-charset-alist' を参照して下さい)。
     `auto-compression-mode' (*Note Accessing Compressed Files:
     (emacs)Compressed Files.) の設定とは無関係に、`.gz' や `.bz2' のよ
     うな圧縮されたファイルを `jka-compr' を使って自動的に解凍します。

`E (記事)'
     内部ビューワーで MIME オブジェクトを表示します。内部ビューワーが使
     えないときは、外部ビューワーを使います
     (`gnus-mime-view-part-internally')。

`e (記事)'
     外部ビューワーで MIME オブジェクトを表示します
     (`gnus-mime-view-part-externally')。

`| (記事)'
     MIME オブジェクトをプロセスに出力します (`gnus-mime-pipe-part')。

`. (記事)'
     MIME オブジェクトをどう処理するかを、対話的に決めて実行します
     (`gnus-mime-action-on-part')。

Gnus はいくつかの種類の MIME オブジェクトを自動的に表示します。どのパー
トに対してそうするかを Gnus が決めるやり方については、Emacs MIME マニュ
アルで述べられています。

不愉快なものでびっくりさせられるのを避けるには、トグルで切り替える関数
を使うのが最も良いでしょう。 (例えば、`alt.sing-a-long' グループに入る
と、あなたの気づかないうちに MIME は記事中のサウンドファイルをデコード
して、何やら怪しげな長い長い歌があなたのスピーカーから大音響で流れ出し、
あなたはボリュームボタンを見つけられず、というのはそんなものはもともと
付いていないからで、みんなはあなたの方を睨みはじめ、あなたはプログラム
を止めようとするけれどもできなくて、ボリュームを制御するプログラムも見
つけられなくて、そして部屋中の全員は突然あなたのことを軽蔑の眼差しで見
るようになってしまい、あなたはちょっと面白くない思いをする、とか)。

現実の出来事と実在の人物に類似しているかもしれませんが、これはすべてホ
ントのことです。げほげほ。

*Note MIME Commands:: も見て下さい。



File: gnus-ja.info, Node: Customizing Articles, Next: Article Keymap, Prev: Using MIME, Up: Article Buffer

記事のカスタマイズ
==================

記事をどのように見せるかをカスタマイズするためのたくさんの関数が存在し
ています。これらの関数を対話的に呼ぶこともできるし (*Note Article
Washing::)、記事を選択したときに自動的に選択することもできます。

自動的に呼ばれるようにするためには、対応するトリートメント変数を設定し
なければなりません。例えばヘッダーを隠すためには、
`gnus-treat-hide-headers' を設定します。以下は設定できる変数の一覧です
が、まずこれらの変数の取り得る値について話しましょう。

注意: いくつかの値は、有効な値であってもほとんど意味を無しません。実用
的な値は下の一覧を調べて下さい。

  1. `nil': このトリートメントをしません。

  2. `t': このトリートメントをすべての本文のパートで行ないます。

  3. `head': ヘッダーでそのトリートメントをします。

  4. `first': このトリートメントを最初の本文のパートで行ないます。

  5. `last': このトリートメントを最後の本文のパートで行ないます。

  6. 整数: このトリートメントをこの数値より短いすべての本文のパートで行
     ないます。

  7. 文字列のリスト: このリストに含まれている正規表現に合致する名前のグ
     ループで読まれた記事の、すべての本文のパートでこのトリートメントを
     行ないます。

  8. 最初の要素が文字列でないリストです:

     リストは再帰的に評価されます。リストの最初の要素は述語です。以下の
     述語が認識されます: `or', `and', `not', `typep'。例です:

          (or last
              (typep "text/x-vcard"))


ここで「パート」という語が使われていることに気付いたと思います。これは
メッセージには MIME マルチパート記事があり、いくつかのパートに分割され
ているかもしれないという事実に関連しています。マルチパートでない記事は
一つのパートのみであるとみなされます。

このトリートメントはすべてのマルチパートのパートたちに適用されるのでしょ
うか?  はい、そうしたければそうなります。ですが、ディフォルトでは
`text/plain' パートだけにトリートメントが施されます。これは
`gnus-article-treat-types' 変数で制御され、これはパートの型に合致する正
規表現のリストです。制御変数の値が、上で説明されているように述語のリス
トであるときは、この変数は無視されます。

以下のトリートメントのオプションが使用可能です。これをカスタマイズする
ための最も簡単な方法は `gnus-article-treat' カスタマイズグループを調査
することです。丸括弧の中の値は提案されている意味のある値です。他のもの
も可能ですが、ほとんどの人にとってはおそらくここに一覧表示されているも
ので十分でしょう。

`gnus-treat-buttonize (t, integer)'
`gnus-treat-buttonize-head (head)'

     *Note Article Buttons::.

`gnus-treat-capitalize-sentences (t, integer)'
`gnus-treat-overstrike (t, integer)'
`gnus-treat-strip-cr (t, integer)'
`gnus-treat-strip-headers-in-body (t, integer)'
`gnus-treat-strip-leading-blank-lines (t, first, integer)'
`gnus-treat-strip-multiple-blank-lines (t, integer)'
`gnus-treat-strip-pem (t, last, integer)'
`gnus-treat-strip-trailing-blank-lines (t, last, integer)'
`gnus-treat-unsplit-urls (t, integer)'
`gnus-treat-wash-html (t, integer)'

     *Note Article Washing::.

`gnus-treat-date-english (head)'
`gnus-treat-date-iso8601 (head)'
`gnus-treat-date-lapsed (head)'
`gnus-treat-date-local (head)'
`gnus-treat-date-original (head)'
`gnus-treat-date-user-defined (head)'
`gnus-treat-date-ut (head)'

     *Note Article Date::.

`gnus-treat-from-picon (head)'
`gnus-treat-mail-picon (head)'
`gnus-treat-newsgroups-picon (head)'

     *Note Picons::.

`gnus-treat-display-smileys (t, integer)'

`gnus-treat-body-boundary (head)'

     ヘッダーと本文の間に境界線を追加します。境界線には
     `gnus-body-boundary-delimiter' に設定された文字列が使われます。

     *Note Smileys::.

`gnus-treat-display-x-face (head)'

     *Note X-Face::.

`gnus-treat-display-face (head)'

     *Note Face::.

`gnus-treat-emphasize (t, head, integer)'
`gnus-treat-fill-article (t, integer)'
`gnus-treat-fill-long-lines (t, integer)'
`gnus-treat-hide-boring-headers (head)'
`gnus-treat-hide-citation (t, integer)'
`gnus-treat-hide-citation-maybe (t, integer)'
`gnus-treat-hide-headers (head)'
`gnus-treat-hide-signature (t, last)'
`gnus-treat-strip-banner (t, last)'
`gnus-treat-strip-list-identifiers (head)'

     *Note Article Hiding::.

`gnus-treat-highlight-citation (t, integer)'
`gnus-treat-highlight-headers (head)'
`gnus-treat-highlight-signature (t, last, integer)'

     *Note Article Highlighting::.

`gnus-treat-play-sounds'
`gnus-treat-translate'
`gnus-treat-ansi-sequences (t)'
`gnus-treat-x-pgp-sig (head)'

`gnus-treat-unfold-headers (head)'
`gnus-treat-fold-headers (head)'
`gnus-treat-fold-newsgroups (head)'
`gnus-treat-leading-whitespace (head)'

     *Note Article Header::.

もちろん、`gnus-part-display-hook' から呼ばれる自分用の関数を書くことも
できます。関数はそのパートに範囲が狭められた状態で呼ばれ、ほとんどなん
でも好きなことができます。バッファーに保存しておかなければならない情報
はありません--何でも変えることができます。



File: gnus-ja.info, Node: Article Keymap, Next: Misc Article, Prev: Customizing Articles, Up: Article Buffer

記事のキーマップ
================

概略バッファーにおけるキー操作のほとんどは記事バッファーでも使用できま
す。これらは概略バッファーでそれらを押したかのように動作するはずです。
つまり記事を読んでいる間、実際に概略バッファーを表示させておく必要があ
りません。すべての操作は記事バッファーから行なうことができるのです。

`v' キーはユーザー用に予約されています。そのまま何かの機能に割り当てて
も構いませんが、接頭キーとして使う方が良いでしょう。

他にもいくつかのキーが利用できます:

`SPACE'
     記事を一ページ先にスクロールします。(`gnus-article-next-page')。
     `h SPACE h' とまったく同じです。

`DEL'
     記事を一ページ前にスクロールします (`gnus-article-prev-page')。
     `h DEL h' とまったく同じです。

`C-c ^'
     カーソルが `Message-ID' の近辺にあるときに `C-c ^' を押すと、Gnus
     はサーバーからその記事を取ってこようとします
     (`gnus-article-refer-article')。

`C-c C-m'
     カーソルの近くにあるアドレスに返信を送ります
     (`gnus-article-mail')。接頭引数を与えると、そのメールを引用します。

`s'
     バッファーを再配置して、概略バッファーが見えるようにします
     (`gnus-article-show-summary')。

`?'
     利用できるキー操作のごく簡単な説明を出します
     (`gnus-article-describe-briefly')。

`TAB'
     次のボタンがあればそこに移動します (`gnus-article-next-button')。
     これは記事にボタンを付ける機能をオンにしているときのみ意味を持ちま
     す。

`M-TAB'
     一つ前のボタンがあればそこに移動します
     (`gnus-article-prev-button')。

`R'
     現在の記事に元記事を含んだ返答のメールを送ります
     (`gnus-article-reply-with-original')。接頭引数を与えると広い返答
     (wide reply) になります。もし領域が活性化されていたならば、その領
     域にあるテキストだけを yank します。

`F'
     現在の記事に元記事を含んでフォローアップをします
     (`gnus-article-followup-with-original')。接頭引数を与えると広い返
     答 (wide reply) になります。もし領域が活性化されていたならば、その
     領域にあるテキストだけを yank します。



File: gnus-ja.info, Node: Misc Article, Prev: Article Keymap, Up: Article Buffer

記事のその他
============

`gnus-single-article-buffer'
     `nil' 以外であれば、すべてのグループに対して同じ記事バッファーを使
     用します (これはディフォルトです)。`nil' であれば、各グループ毎の
     固有の記事バッファーを持つようになります。

`gnus-article-decode-hook'
     MIME 記事をデコードするときに使用されるフックです。ディフォルト値
     は `(article-decode-charset article-decode-encoded-words)' です。

`gnus-article-prepare-hook'
     このフックは記事が記事バッファーに挿入された直後に呼び出されます。
     これは主に、何か記事の内容に依存する処理をする関数のために用意され
     ています。記事バッファーの内容を変更するような目的で使うべきではな
     いでしょう。

`gnus-article-mode-hook'
     記事モードのバッファーで呼び出されるフックです。

`gnus-article-mode-syntax-table'
     記事バッファーで用いられる構文テーブル (syntax table) です。これは
     `text-mode-syntax-table' をもとに初期化されます。

`gnus-article-over-scroll'
     非-`nil' にすることによって、それ以上スクロールする新しいテキスト
     が無くても記事バッファーをスクロールできるようにします。ディフォル
     トは `nil' です。(訳注: 記事の最下行が見えているときに、`nil' だと
     `RET' キーでそれ以上スクロールしませんが、非-`nil' にすると記事が
     見えなくなるまでスクロールします。)

`gnus-article-mode-line-format'
     この変数は `gnus-summary-mode-line-format' と同じ仕様に沿った様式
     文字列です (*Note Summary Buffer Mode Line::)。これは、その変数と
     同じ様式指定および二つの拡張を受付けます。

     `w'
          記事の「洗濯状態」("wash status")。これは記事に対して行なわれ
          たであろう洗濯操作を、それぞれ一文字で示す短い文字列になりま
          す。文字とそれらの意味は次の通りです:

          `c'
               記事バッファーにおいて、引用された文が隠されているかもし
               れない場合に表示されます。

          `h'
               記事バッファーにおいて、ヘッダーが隠されている場合に表示
               されます。

          `p'
               記事が電子署名または暗号化されていて、Gnus がセキュリ
               ティーのためのヘッダーを隠していると表示されます。(注:
               署名が正しいか間違っているかを表すものではありません。)

          `s'
               記事バッファーにおいて、署名が隠されている場合に表示され
               ます。

          `o'
               記事バッファーにおいて、Gnus が重ね打ち文字のトリートメ
               ントを行なった場合に表示されます。

          `e'
               記事バッファーにおいて、Gnus が強調された文字のトリート
               メントを行なった場合に表示されます。

     `m'
          記事の MIME パートの数です。

`gnus-break-pages'
     改ページ ("page breaking") を行なうかどうかを制御します。この変数
     が `nil' 以外であれば、記事中にページ区切り文字が現れるごとにペー
     ジ分割をします。この変数が `nil' であればページ分けは行なわれませ
     ん。

`gnus-page-delimiter'
     これが上で触れた区切り文字です。ディフォルトでは `^L' (フォーム
     フィード) です。

`gnus-use-idna'
     この変数は `From:'、`To:' および `Cc:' ヘッダーにある国際化ドメイ
     ン名を、Gnus が IDNA デコードするかどうかを制御します。そのような
     メッセージの作り方については *Note 国際化ドメイン名:
     (message-ja)IDNA, を参照して下さい。これには GNU Libidn
     (http://www.gnu.org/software/libidn/) が必要で、この変数はそれをイ
     ンストールしてある場合だけ有効になります。



File: gnus-ja.info, Node: Composing Messages, Next: Select Methods, Prev: Article Buffer, Up: Top

メッセージの作成
****************

すべての投稿とメールを送るためのコマンドは、あなたをメッセージバッファー
に導きます。そこでは `C-c C-c' を押すことによって記事を送信する前に、記
事を好きなように編集することができます。*Note 概要: (message-ja)Top.
メッセージはあなたの設定に基づいて投稿またはメールとして送信されます
(*Note Posting Server::)。

* Menu:

* Mail::                        メールの送信と返答
* Posting Server::              どのサーバーで投稿またはメールを送信するべきか?
* POP before SMTP::             メールを読まないとメールを送信できない
* Mail and Post::               ニュースとメールを同時に送信する
* Archived Messages::           送ったメッセージを Gnus が貯めておくところ
* Posting Styles::              あなたが誰であるかを明らかにするより簡単な方法
* Drafts::                      メッセージの延期と拒否されたメッセージ
* Rejected Articles::           サーバーがあなたの記事を嫌いだと何が起こる?
* Signing and encrypting::      安全なメッセージを作るには?

投稿するべきでなかった記事を削除するための情報について *Note Canceling
and Superseding:: も参照して下さい。



File: gnus-ja.info, Node: Mail, Next: Posting Server, Prev: Composing Messages, Up: Composing Messages

メール
======

出て行くメールをカスタマイズする変数です:

`gnus-uu-digest-headers'
     要約メッセージ (digested message) に含まれるヘッダーに合致する正規
     表現のリストです。ヘッダーは合致した順に取り込まれます。`nil' だっ
     たら、すべてのヘッダーを含みます。

`gnus-add-to-list'
     `nil' でなければ、`a' を押したときに、`to-list' グループパラメーター
     をそれの無いメールグループに付け加えます。

`gnus-confirm-mail-reply-to-news'
     非-`nil' だったら、あなたがニュース記事への返答をメールでしようと
     すると Gnus は確認を求めます。`nil' ならば、あなたがやりたいことに
     何も口出ししません。これは関数か正規表現であることもできます。関数
     は唯一のパラメーターとしてグループ名を受け取り、確認する必要がある
     場合に非-`nil' を返します。これを正規表現にすると、それに合致する
     名前のグループで確認を求めます。

     メールで返信する気は無いのに時たまぞんざいに R を押してしまう癖が
     あるならば、この変数はそんなあなたのためにあります。

`gnus-confirm-treat-mail-like-news'
     非-`nil' だったら、Gnus はメールに返信する時にも
     `gnus-confirm-mail-reply-to-news' に基づいた確認を求めます。これは
     メーリングリストをニュースグループのように扱うのに便利です。



File: gnus-ja.info, Node: Posting Server, Next: POP before SMTP, Prev: Mail, Up: Composing Messages

投稿するサーバー
================

最新の (もちろん、非常に知的な) 記事を送り出すために、あの魔法のような
`C-c C-c' キーを押した時、それはどこにいくのでしょう?

尋ねてくれてありがとう。あなたを恨みます。

それは非常に複雑になり得ます。

ニュースを投稿するとき、通常 Message は `message-send-news' を呼び出し
ます (*Note ニュース変数: (message-ja)News Variables.)。普通は、Gnus は
講読用と同じ選択方法を使って投稿します (このことは、あなたがたくさんの
グループを異なったサーバーで講読している場合に、たぶん都合が良いのです)。
しかし、あなたが講読しているそのサーバーが投稿を許可せず、読むことのみ
を許可しているのならば、おそらくあなたの (非常に知的でとんでもなく興味
深い) 記事を投稿するために、他のサーバーを使いたいと思うでしょう。そう
ならば `gnus-post-method' を他の方法に設定することができます:

     (setq gnus-post-method '(nnspool ""))

さて、この設定をした後でサーバーがあなたの記事を拒否したり、サーバーが
落ちていたりしたら、どうしたらよいのでしょう? この変数よりも優先させる
ために `C-c C-c' 命令にゼロでない数の接頭引数を与えることによって、投稿
に“current”(現在の) サーバーを使わせること、すなわちディフォルトの動
作 (訳注: `gnus-post-method' のディフォルト値は `current') に戻すことが
できます。

もし、ゼロを接頭引数としてその命令に与えたなら (すなわち、`C-u 0 C-c
C-c')、Gnus は投稿にどの方法を使うかをあなたに尋ねます。

`gnus-post-method' を選択方法のリストにすることもできます。その場合は、
Gnus は常に投稿にどの方法を使うかをあなたに尋ねます。

最後に、あなたがいつでも基本の選択方法を使って投稿したいのならば、この
変数を `native' にして下さい。

メールを送信するときに、Message は `message-send-mail-function' を呼び
出します。ディフォルトの関数 `message-send-mail-with-sendmail' は記事を
順番待ちに入れ (queuing) たり送信するために、記事を `sendmail' コマンド
にパイプします。ローカルシステムが `sendmail' でメールを送信するように
設定されていなくても、あなたが遠隔 SMTP サーバーに接続する権利を持って
いるならば、`message-send-mail-function' を `smtpmail-send-it' に設定す
ることができます。`smtpmail' パッケージを使うために正しい設定がなされて
いるかどうか確認して下さい。例です:

     (setq message-send-mail-function 'smtpmail-send-it
           smtpmail-default-smtp-server "YOUR SMTP HOST")

これと似たものに `message-smtpmail-send-it' があります。ISP が
POP-before-SMTP の認証を要求している場合に有用です。*Note POP before
SMTP::.

他の可能な `message-send-mail-function' の選択肢には
`message-send-mail-with-mh', `message-send-mail-with-qmail' および
`feedmail-send-it' があります。



File: gnus-ja.info, Node: POP before SMTP, Next: Mail and Post, Prev: Posting Server, Up: Composing Messages

POP before SMTP
===============

あなたの ISP は POP-before-SMTP 認証を要求しますか? それは、メールを送
信する前の一定時間以内に POP メールサーバーに接続しなければならないかど
うかです。もしそうならば、便利な手があります。それには `~/.gnus.el' ファ
イルに以下の行を入れて下さい:

     (setq message-send-mail-function 'message-smtpmail-send-it)
     (add-hook 'message-send-mail-hook 'mail-source-touch-pop)

これは、メールを送信するときはいつでも Gnus に前もって POP メールサーバー
に接続させることを意味します。関数 `mail-source-touch-pop' は、メールを
送信する直前に、メールを取得せずに `mail-sources' の値に従って POP 認証
だけを行ないます。`smtpmail-send-it' ではなくて、
`message-send-mail-hook' を実行する `message-smtpmail-send-it' を使わな
ければならないことと、POP 接続のために `mail-sources' の値を正しく設定
しなければならないことに注意して下さい。*Note Mail Sources::.

もし `mail-sources' に二つ以上の POP メールサーバーを設定しているならば、
それらの一つを POP-before-SMTP 認証に使われる POP メールサーバーとして
`mail-source-primary-source' に設定する必要があるでしょう。それが第一
POP メールサーバーならば (すなわち、主にそのサーバーからメールを取得し
ているならば)、それを以下のように恒久的に設定することができます:

     (setq mail-source-primary-source
           '(pop :server "pop3.mail.server"
                 :password "secret"))

さもなければ、POP-before-SMTP 認証を行なうときだけ、それを以下のように
動的に束縛して下さい:

     (add-hook 'message-send-mail-hook
               (lambda ()
                 (let ((mail-source-primary-source
                        '(pop :server "pop3.mail.server"
                              :password "secret")))
                   (mail-source-touch-pop))))



File: gnus-ja.info, Node: Mail and Post, Next: Archived Messages, Prev: POP before SMTP, Up: Composing Messages

メールと投稿
============

これはメールの送信とニュースの投稿の両方に関連する変数のリストです:

`gnus-mailing-list-groups'
     あなたのニュースサーバーが、本当にメーリングリストの記事を NNTP サー
     バーに流し込むゲートウェイによって、それらがニュースグループの記事
     として見えるようにしているのであれば、それらのグループは問題なく読
     めるでしょう。しかしいくらか面倒なことを克服すること無しに、それら
     に投稿またはフォローアップすることはできません。一つの解決法は、グ
     ループパラメーター (*Note Group Parameters::) に `to-address' を加
     えることです。簡単にできるのは、`gnus-mailing-list-groups' を、本
     当はメーリングリストであるグループに合致する正規表現に設定すること
     です。そうすれば、少なくともメーリングリストへのフォローアップはた
     いていのときに行なうことができるでしょう。これらのグループに投稿す
     ること (`a') は、それでも苦痛を引き起こすでしょうけれど。

`gnus-user-agent'
     この変数は、どの情報が User-Agent ヘッダーに陳列されるかを制御しま
     す。それは次のシンボルまたは文字列のうちのどれかであることができま
     す: `gnus' (Gnus のバージョンのみ)、`emacs-gnus' (Emacs と Gnus の
     バージョンだけ)、`emacs-gnus-config' (`emacs-gnus' と同じ＋システ
     ム構成)、`emacs-gnus-type' (`emacs-gnus') と同じ＋システムタイプ)
     または好みの文字列。これを文字列にするときは、正しいフォーマットに
     なっていることを確かめて下さい (RFC2616 参照)。

あなたは自分が送るメッセージで、綴りをチェックしたいかもしれません。も
しくは手で綴りのチェックをしたくないのであれば、自動綴りチェックを
`ispell' パッケージを使うことによって付け加えることができます:

     (add-hook 'message-send-hook 'ispell-message)

`ispell' の辞書をグループに応じて切り替えたいならば、以下のようにすれば
良いでしょう。

     (add-hook 'gnus-select-group-hook
               (lambda ()
                 (cond
                  ((string-match
                    "^de\\." (gnus-group-real-name gnus-newsgroup-name))
                   (ispell-change-dictionary "deutsch"))
                  (t
                   (ispell-change-dictionary "english")))))

あなたの必要に応じて変更して下さい。



File: gnus-ja.info, Node: Archived Messages, Next: Posting Styles, Prev: Mail and Post, Up: Composing Messages

メッセージの保管
================

Gnus はあなたが送ったメールとニュースを貯めておくためのいくつかの違った
方法を提供します。ディフォルトの方法はメッセージを保存するために「アー
カイブ仮想サーバー」を使うことです。これを完全に禁止したいのであれば、
変数 `gnus-message-archive-group' を `nil' にしなければなりません。それ
がディフォルトです。

グループで読んだ興味のあるメッセージの保存については、`B c'
(`gnus-summary-copy-article') コマンドを参照して下さい (*Note Mail
Group Commands::)。

`gnus-message-archive-method' は、送ったメッセージを保存するためにどの
仮想サーバーを Gnus が使うかを指定します。ディフォルトは:

     (nnfolder "archive"
               (nnfolder-directory   "~/Mail/archive")
               (nnfolder-active-file "~/Mail/archive/active")
               (nnfolder-get-new-mail nil)
               (nnfolder-inhibit-expiry t))

しかし、どのメール選択方法でも使うことができます (`nnml', `nnmbox' など
など)。しかし `nnfolder' はこのようなことをするのにとても好ましい選択方
法です。ディフォルトで選択されるディレクトリーを好きでないならば、次の
ようにできます:

     (setq gnus-message-archive-method
           '(nnfolder "archive"
                      (nnfolder-inhibit-expiry t)
                      (nnfolder-active-file "~/News/sent-mail/active")
                      (nnfolder-directory "~/News/sent-mail/")))

訳注: 上記のような例は「意図した通りに動作しない」FAQ のネタになりつつ
あり、不具合の原因が特定できない事例が少なくありません。例えば、同じ
archive" という名前の仮想サーバーを過去に使ったことがあると、それが
`~/.newsrc.eld' ファイルの中で `gnus-server-alist' 変数に登録されている
かもしれません。それを削除するには `~/.newsrc.eld' ファイルを手作業で書
き換えなければなりませんが、かなり危険です。あるいは単に、同名の仮想サー
バーを現在も使っているかもしれません。そのような場合は、別の名前を使う
必要があります。

Gnus は外へ出て行くすべてのメッセージに、`gnus-message-archive-method'
で指定されたアーカイブ仮想サーバーにある (あるいはそれ以外のサーバーに
ある) 一つかそれ以上のグループに保存することを意図した `Gcc' 欄を挿入し
ます。どのグループを使うかは変数 `gnus-message-archive-group' によって
決まります。

この変数 (`gnus-message-archive-group') は次のようなことをするために使
うことができます:

文字列
     メッセージはそのグループに保存されます。

     グループ名に選択方法を含めることができますが、そうするとそのメッセー
     ジは `gnus-message-archive-method' で指定した選択方法ではなくて、
     代わりにグループ名の選択方法で保存されることに注意しましょう。
     `gnus-message-archive-method' は、上に示したようなディフォルト値を
     持つためものであると考えて下さい。ですから
     `gnus-message-archive-group' を `"foo"' にしておけば、外へ出て行く
     メッセージは `nnfolder+archive:foo' に保存されますが、
     `"nnml:foo"' という値を使うと、外へ出て行くメッセージは
     `nnml:foo' に保存されるでしょう。

文字列のリスト
     メッセージはそれらのすべてのグループに保存されます。

正規表現、関数、Lisp フォームの連想リスト
     キーが『合致』すると、その結果が使われます。

     訳注: 正確には以下の三種類です。
        * 正規表現とグループ名 (または複数のグループ名リスト) の連想リ
          スト。最初に正規表現が合致した要素のグループ名 (またはグルー
          プ名のリスト) が使われます。
        * 関数のリスト。それぞれの関数には現在のグループ名が引数として
          与えられ、最初に返ってきた `nil' 以外の値が使われます。
        * Lisp フォームのリスト。それぞれのフォームが評価され、最初に返っ
          てきた `nil' 以外の値が使われます。

`nil'
     メッセージの保存は行なわれません。これがディフォルトです。

例をあげてみましょう:

`MisK' という単一のグループに保存するだけならば:
     (setq gnus-message-archive-group "MisK")

二つのグループ、`MisK' と `safe' に保存するならば:
     (setq gnus-message-archive-group '("MisK" "safe"))

どのグループにいるかによって違ったグループに保存するなら:
     (setq gnus-message-archive-group
           '(("^alt" "sent-to-alt")
             ("mail" "sent-to-mail")
             (".*" "sent-to-misc")))

もっと複雑なもの:
     (setq gnus-message-archive-group
           '((if (message-news-p)
                 "misc-news"
               "misc-mail")))

すべてのニュースメッセージを一つのファイルに保存して、メールメッセージ
を一月につき一つのファイルに保存するというのはどうでしょう:

     (setq gnus-message-archive-group
           '((if (message-news-p)
                 "misc-news"
               (concat "mail." (format-time-string
                                "%Y-%m" (current-time))))))

さあ、メッセージを送ると適切なグループに保存されるようになりました。(も
し特定のメッセージを保存をしたくないのであれば、挿入された `Gcc' 欄を取
り除いて下さい。) 保管グループは次に Gnus を起動したときか、次にグルー
プバッファーで `F' を押したときにグループバッファーに現れます。他のグルー
プと同じように、そのグループに入って記事を読むことができます。そのグルー
プが本当に大きくて悩ましくなったら、なにか良いものにその名前を変更する
ことができます (グループバッファーで `G r' を使うことによっ
て)---`misc-mail-september-1995' その他何でも。新しいメッセージは古い
(今は空になった) グループに溜められます。

以上が送ったメッセージを保管するディフォルトの方法です。Gnus はディフォ
ルトの方法を好きではない人には違ったやり方を勧めています。そのような場
合は、`gnus-message-archive-group' を `nil' に設定するべきです。これは
保管をしないようにします。

`gnus-outgoing-message-group'
     すべての外にいくメッセージはこのグループに入れられます。もしすべて
     の外に行くメールと記事を `nnml:archive' グループに保管したいのであ
     れば、この変数をその値に設定して下さい。この変数はグループ名のリス
     トであることもできます。

     もしそれぞれのメッセージをどのグループに入れるかをもっと制御したい
     のであれば、この変数を現在のニュースグループ名を調べて、適切なグルー
     プ名 (もしくは名前のリスト) を返す関数に設定することができます。

     この変数は `gnus-message-archive-group' の代わりに使うことができま
     すが、後者の方が好ましい方法です。

     (訳注:「後者」とは `gnus-message-archive-group' のこと。前者より四ヶ
     月遅れて、1996年1月に新設されました。)

`gnus-gcc-mark-as-read'
     もし非-`nil' なら、`Gcc' の記事に既読の印を付けます。

`gnus-gcc-externalize-attachments'
     `nil' だったら、ファイルを通常のパートとして Gcc で保存する記事の
     コピーに添付します。それが正規表現で Gcc のグループ名に合致する場
     合は、外部パートとしてファイルを添付します。`all' だったらローカル
     ファイルを参照する外部パートとして添付します。それが別の非-`nil'
     だった場合の動作は `all' のときと同じですが、将来は変わるかもしれ
     ません。

     (訳注: 送信したメッセージと同じものを Gcc で保存する代わりに、添付
     ファイルをメッセージから切り離して、別にセーブするかどうかを制御す
     る変数です。)



