Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: Persistent Articles, Next: Article Backlog, Prev: Article Caching, Up: Summary Buffer

永続記事
========

記事のキャッシュと近い関係にあるものに「永続記事」があります。実際それ
はキャッシュを見るための別の方法で、私に言わせればはるかに役に立ちます。

例えば、ニュースグループを読んでいて、永久に秘蔵しておく価値のある宝石
に出会ったとしましょう。普通はそれをファイルに保存します (多くの保存命
令の一つを使って)。問題は、単にあの、嫌なだけです。理想的には、記事はグ
ループで見つけた場所に永遠に残っていることが好ましいでしょう。ニュース
サーバーにおける期限切れ消去には影響されないで。

これが「永続記事」です--記事は削除されません。それは普通のキャッシュ命
令を使って実装されていますが、永続記事の管理をするために二つの明示的な
命令を使います:

`*'
     現在の記事を永続にします (`gnus-cache-enter-article')。

`M-*'
     現在の記事を永続記事から取り除きます
     (`gnus-cache-remove-articles')。これは普通は記事を削除します。

これらの命令は両方ともプロセス/接頭引数の習慣を理解します。

永続記事にだけ興味があるのなら、可視記事 (やその他のもの) がキャッシュ
に入るのを避けるために、`gnus-use-cache' を `passive' に設定するのが良
いでしょう:

     (setq gnus-use-cache 'passive)



File: gnus-ja.info, Node: Article Backlog, Next: Saving Articles, Prev: Persistent Articles, Up: Summary Buffer

記事のバックログ
================

回線が遅いために、キャッシュを使うという発想があまり魅力的ではないとき
(実際そうなのですが)、「バックログ」に切り替えることによって状況を何と
かすることができます。これはすでに読んだ記事を再取得しなくても良いよう
に、すでに読んだ記事を Gnus が一時保存しておくところです。これはもちろ
ん、あなたに最近読んだ記事を再び選択する癖があるときだけ役立ちます。絶
対にそれをしない人にとっては、バックログを on にすることは Gnus を少し
遅くし、メモリーの使用量をいくらか増やすだけのことです。

`gnus-keep-backlog' を数値 N に設定すると、Gnus は最大で N 個の古い記事
を後の再取得のためにバッファーに溜めておきます。この変数が `nil' ではな
く、数値でもない場合、Gnus は *すべて* の既読記事を蓄えます。それは
Emacs が爆発するまで制限なく膨れ上がって、マシンがあなたもろとも落ちて
しまうということです。私はみなさんがいつも注意を怠らないようにするため
に、ここに書き加えました。

ディフォルト値は 20 です。



File: gnus-ja.info, Node: Saving Articles, Next: Decoding Articles, Prev: Article Backlog, Up: Summary Buffer

記事の保存
==========

Gnus はたくさんの方法で記事を保存することができます。以下のものは非常に
率直な方法 (すなわち記事が保存する前にほとんど何もなされない) で記事を
保存するための説明です。異なる手続き (uudecode, unshar) のためには
`gnus-uu' を使うのが良いでしょう (*Note Decoding Articles::)。

ここに列挙されているコマンドは対象がファイルです。グループに保存したい
場合は `B c' (`gnus-summary-copy-article') コマンドを参照して下さい
(*Note Mail Group Commands::)。

`gnus-save-all-headers' が `nil' でないと、Gnus は記事を保存する前に不
要なヘッダーを消去しません。

もし上記の変数が `nil' であると、正規表現 `gnus-saved-headers' に合致す
るすべてのヘッダーが残される一方、残りのものは保存する前に削除されます。

`O o'
`o'
     ディフォルトの記事を保存する手段を用いて現在の記事を保存します
     (`gnus-summary-save-article')。

`O m'
     現在の記事をメールの様式で保存します
     (`gnus-summary-save-article-mail')。

`O r'
     現在の記事を Rmail の様式で保存します
     (`gnus-summary-save-article-rmail')。

`O f'
     現在の記事を普通のファイル (plain file) 様式で保存します
     (`gnus-summary-save-article-file')。

`O F'
     現在の記事を普通のファイル様式で保存し、以前のファイルの内容を上書
     きします (`gnus-summary-write-article-file')。

`O b'
     現在の記事の本文を普通のファイル様式で保存します
     (`gnus-summary-save-article-body-file')。

`O h'
     現在の記事を mh のフォルダーの様式で保存します
     (`gnus-summary-save-article-folder')。

`O v'
     現在の記事を VM フォルダーに保存します
     (`gnus-summary-save-article-vm')。

`O p'
`|'
     現在の記事をパイプに保存します。うーんと、あのぉ、私が言おうとして
     いることは--現在の記事をプロセスにパイプするということです
     (`gnus-summary-pipe-output')。シンボル接頭引数 (*Note Symbolic
     Prefixes::) が与えられると、パイプへの出力に完全なヘッダーを含めま
     す。

`O P'
     現在の記事を muttprint に保存します。つまり、外部プログラム
     Muttprint (http://muttprint.sourceforge.net/) を使って記事を印刷す
     るということです。プログラム名と使用するオプションは、変数
     `gnus-summary-muttprint-program' で指定されます。
     (`gnus-summary-muttprint')。

すべてのこれらの命令はプロセス/接頭引数の習慣を使います (*Note
Process/Prefix::)。もしこれらの関数を使ってたくさんの記事を保存した場合、
それぞれのすべての記事に対してファイル名の入力を要求されることに飽き飽
きするでしょう。入力を求める動作は変数 `gnus-prompt-before-saving' によっ
て制御されます。これはディフォルトでは `always' で、あなたが嫌な思いを
味わっている、過剰な入力要求をします。代わりにこの変数を `t' に設定する
と、保存するそれぞれの一連の記事に対して一回だけ入力を要求します。本当
に Gnus にすべての判断を任せてしまいたいのであれば、この変数を `nil' に
することさえできます。そうすれば、記事を保存するためのファイルを促され
ることはありません。Gnus は単純にすべての記事をディフォルトのファイルに
保存します。

Gnus を思い通りに動作させるために、変数 `gnus-default-article-saver' を
カスタマイズすることができます。下の六つの既製の関数を使うことができる
し、自分自身の関数を作ることもできます。

`gnus-summary-save-in-rmail'
     これがディフォルトで、"Babyl" という様式です。変数
     `gnus-ramil-save-name' に設定されている関数を、記事を保存するファ
     イルの名前を取得するために使います。ディフォルトは
     `gnus-plain-save-name' です。

`gnus-summary-save-in-mail'
     Unix メール (mbox) ファイルに保存します。変数
     `gnus-mail-save-name' に設定されている関数を、記事を保存するファイ
     ルの名前を取得するために使います。ディフォルトは
     `gnus-plain-save-name' です。

`gnus-summary-save-in-file'
     記事を通常のファイルの後に追加します。変数 `gnus-file-save-name'
     に設定されている関数を、記事を保存するファイルの名前を取得するため
     に使います。ディフォルトは `gnus-numeric-save-name' です。

`gnus-summary-write-to-file'
     記事をストレートに通常のファイルに保存します。そのファイルが存在し
     ていたら上書きされます。変数 `gnus-file-save-name' に設定されてい
     る関数を、記事を保存するファイルの名前を取得するために使います。ディ
     フォルトは `gnus-numeric-save-name' です。

`gnus-summary-save-body-in-file'
     記事の本文を通常のファイルの後に追加します。変数
     `gnus-file-save-name' に設定されている関数を、記事を保存するファイ
     ルの名前を取得するために使います。ディフォルトは
     `gnus-numeric-save-name' です。

`gnus-summary-save-in-folder'
     MH ライブラリーの `rcvstore' を使って、記事を MH フォルダーに保存
     します。変数 `gnus-folder-save-name' に設定されている関数を、記事
     を保存するファイルの名前を取得するために使います。ディフォルトは
     `gnus-folder-save-name' ですが、`gnus-Folder-save-name' も使うこと
     ができて、こちらは先頭が大文字、残りが小文字になった名前を作ります。

`gnus-summary-save-in-vm'
     記事を VM フォルダーに保存します。この設定を使うためには VM メール
     リーダーが必要です。

これらのすべての関数は最後の一つを除いて、環境変数 `SAVEDIR' によって初
期化される `gnus-article-save-directory' に記事を保存します。これはディ
フォルトでは `~/News/' です。

上で述べたように、記事を保存するためのファイルの適切な名前を見つけるた
めに、それらは違った関数を用います。以下は名前を生成するために使うこと
ができる関数のリストです:

`gnus-Numeric-save-name'
     `~/News/Alt.andera-dworkin/45' のようなファイル名。

`gnus-numeric-save-name'
     `~/News/alt.andera-dworkin/45' のようなファイル名。

`gnus-Plain-save-name'
     `~/News/Alt.andera-dworkin' のようなファイル名。

`gnus-plain-save-name'
     `~/News/alt.andera-dworkin' のようなファイル名。

`gnus-sender-save-name'
     `~/News/larsi' のようなファイル名。

連想リスト `gnus-split-methods' に正規表現を放り込むことによって、Gnus
に記事を保存する場所をほのめかすことができます。例えば Gnus に関連する
記事を `gnus-stuff' ファイルに、VM に関連する記事を `vm-stuff' ファイル
に保存したければ、この変数を以下のようにすれば良いでしょう:

     (("^Subject:.*gnus\\|^Newsgroups:.*gnus" "gnus-stuff")
      ("^Subject:.*vm\\|^Xref:.*vm" "vm-stuff")
      (my-choosing-function "../other-dir/my-stuff")
      ((equal gnus-newsgroup-name "mail.misc") "mail-stuff"))

これはそれぞれの要素が、二つの要素---「合致」と「ファイル」を持つリスト
であるリストであるということがわかります。合致は文字列 (この場合は記事
のヘッダーに合致する正規表現として使われます)、シンボル (グループ名を引
数として、関数として呼ばれます) およびリスト (これは評価 (`eval') され
ます) のどれかであることができます。これらの動作の一つでも `nil' でない
結果を返すと、入力を求めるときのディフォルトとして「ファイル」が使われ
ます。加えて、呼ばれた関数か式が文字列か文字列のリストを返したときは、
演算の結果自体が使われます。

基本的には、現在の記事を保存するのに使われる可能性のあるファイル名のリ
ストを手に入れることになります。(すべての『合致』が使われます。) そして、
実際に名前として使いたいものの入力を促されますが、その際、この変数を適
用して得られた結果が、ファイル名を補完するときの候補になります。

この変数はディフォルトでは `((gnus-article-archive-name))' で、これは
Gnus が保存する記事の `Archive-name' 行を調べて、それをファイル名の候補
として使います。

これはファイル名を多少きれいにする関数の例です。`nnml:mail.whatever' の
ようなメールグループがたくさんあるとすると、保存するためのファイル名を
作る前にそれらのグループ名の最初の方を切り落とす必要があるかもしれませ
ん。次の物はまさにそれをします:

     (defun my-save-name (group)
       (when (string-match "^nnml:mail." group)
         (substring group (match-end 0))))

     (setq gnus-split-methods
           '((gnus-article-archive-name)
             (my-save-name)))

最後に、`gnus-use-long-file-name' という変数があります。これが `nil' で
あると、すべての上記の関数はグループ名のすべてのピリオド (`.') をスラッ
シュ (`/') で置き換えます--つまり、すべてのファイルを一番上のディレクト
リーに置くのではなく、それらの関数が階層的なディレクトリーを生成すると
いうことです (`~/News/alt.andrea-dworkin' ではなく
`~/News/alt/andrea-dworkin' のように)。たいていのシステムにおいて、この
変数のディフォルトは `t' です。しかし、歴史的な理由によって Xenix と
usg-unix-v マシンでは `nil' がディフォルトになります。

この関数は削除とスコアのファイル名にも影響します。この変数がリストで、
そのリストが `not-score' という要素を含んでいると、長いファイル名はスコ
アファイルには使われません。そのリストが `not-save' という要素を含んで
いると、保存するときに長いファイル名は使われません。また、そのリストが
`not-kill' という要素を含んでいると、長いファイル名は削除ファイルには使
われません。

記事をスプールのような階層に保存したい場合は、次のようにして下さい。

     (setq gnus-use-long-file-name '(not-save)) ; 階層にする
     (setq gnus-default-article-saver
           'gnus-summary-save-in-file) ; エンコードしない

そうしたならば、`o' で記事を保存するだけです。すると、階層を
`nneething' 一時グループによって読むことができます--グループバッファー
で `G D' をタイプして、一番上のディレクトリー (`~/News/') を引数として
渡して下さい。



File: gnus-ja.info, Node: Decoding Articles, Next: Article Treatment, Prev: Saving Articles, Up: Summary Buffer

記事のデコード
==============

ときどき利用者は何らかの方法でエンコードされた記事 (もしくは一連の記事
群) を投稿します。Gnus はそれらをデコードすることができます。

     訳注: この章では、複数に分割して送信された一つの巨大な記事を、再び
     一つにまとめ上げてデコードする処理について説明しています。現在では、
     そのような分割送信をメールサーバーが受け付けない等の理由によって、
     ほとんど目にすることはありません。分割して送信しないことを確実にす
     るには、以下の設定を行なって下さい (*Note メール変数:
     (message-ja)Mail Variables.):

          (setq message-send-mail-partially-limit nil)

* Menu:

* Uuencoded Articles::          記事を uuencode する
* Shell Archives::              shar 記事を解凍する
* PostScript Files::            ポストスクリプトを分割する
* Other Files::                 普通の保存と binhex.
* Decoding Variables::          幸せなデコードのための変数
* Viewing Files::               デコードされた結果を見たい?

これらすべての関数はプロセス/接頭引数の習慣 (*Note Process/Prefix::) を、
『一つの記事』を『一つの群』と解釈する拡張をして、どの記事に操作をする
かを見つけるために使います。Gnus は自分自身でどの記事がその群に属してい
るかを判断し、すべての記事をデコードして、その結果のファイルを展開/表示
/保存することができます。

Gnus は以下の簡単な規則に則ってどの記事が群に属するのかを推測します: 表
題は行の最後の二つの数字を除いて (ほとんど) 同じである必要があります。
(空白は大体無視されますが。)

例えば: `cat.gif (2/3)' というような表題を選ぶと、Gnus は正規表現
`^cat.gif ([0-9]+/[0-9]+).*$' に合致するすべての記事を見つけようとしま
す。

`cat.gif (2/3) Part 6 of a series' のような標準でない表題はどの自動表示
命令によっても適切に認識されないため、手で記事に `#' の印を付けなければ
なりません。



File: gnus-ja.info, Node: Uuencoded Articles, Next: Shell Archives, Prev: Decoding Articles, Up: Decoding Articles

uuencode された記事
-------------------

`X u'
     現在の群を uudecode します (`gnus-uu-decode-uu')。

`X U'
     現在の群を uudecode して保存します (`gnus-uu-decode-uu-and-save')。

`X v u'
     現在の群を uudecode して、表示します (`gnus-uu-decode-uu-view')。

`X v U'
     現在の記事を uudecode して、表示して保存します
     (`gnus-uu-decode-uu-and-save-view')。

これらはすべて、プロセス印が付けられた記事に対して反応するということを
覚えておいて下さい。例えばニュースグループ全体をデコードして保存したい
のであれば、例によって `M P a' (`gnus-uu-mark-all') に続いて `X U'
(`gnus-uu-decode-uu-and-save') を実行して下さい。

このすべては、白日の下にいちいちキーを打っていた GNUS 4.1 のときの
`gnus-uu' の動作とはまったく違っています。一般にこの版の `gnus-uu' は、
何かの方法 (*Note Setting Process Marks::) で記事に印を付け、それから
`X u' を押すことを前提としています。

注意: 定数 `gnus-uu-notify-files' (値が
`[Cc][Ii][Nn][Dd][Yy][0-9]+.\\(gif\\|jpg\\)' にハードコードされています)
に合致する名前を持つ記事をデコードしようとすると、あなたが問題の記事を
今まさに見たことをバラすために、`gnus-uu' は自動的に
`comp.unix.wizards' に記事を投稿します。この機能を使わないようにするこ
とはできません (訳注: そんな Cindy Crawford 嬢の写真がニュースで大量に
流れていた、まだ WWW がロクに普及していなかった時代の産物です)。



File: gnus-ja.info, Node: Shell Archives, Next: PostScript Files, Prev: Uuencoded Articles, Up: Decoding Articles

シェルアーカイブ
----------------

シェルアーカイブ (『shar ファイル』) はソースを配布するための人気のある
方法でしたが、今日ではそんなに使われていません。とにかくこれらを扱うた
めの命令があります:

`X s'
     現在の群を解凍します (`gnus-uu-decode-unshar')。

`X S'
     現在の群を解凍して保存します (`gnus-uu-decode-unshar-and-save')。

`X v s'
     現在の群を解凍して表示します (`gnus-uu-decode-unshar-view')。

`X v S'
     現在の群を解凍し、表示して保存します
     (`gnus-uu-decode-unshar-and-save-view')。



File: gnus-ja.info, Node: PostScript Files, Next: Other Files, Prev: Shell Archives, Up: Decoding Articles

ポストスクリプトファイル
------------------------

`X p'
     現在のポストスクリプト群を展開します
     (`gnus-uu-decode-postscript')。

`X P'
     現在のポストスクリプト群を展開して保存します
     (`gnus-uu-decode-postscript-and-save')。

`X v p'
     現在のポストスクリプト群を表示します
     (`gnus-uu-decode-postscript-view')。

`X v P'
     現在のポストスクリプト群を表示して保存します
     (`gnus-uu-decode-postscript-and-save-view')。



File: gnus-ja.info, Node: Other Files, Next: Decoding Variables, Prev: PostScript Files, Up: Decoding Articles

他のファイル
------------

`X o'
     現在の群を保存します (`gnus-uu-decode-save')。

`X b'
     現在の記事を binhex で解凍します (`gnus-uu-decode-binhex')。これは
     実際には動作しません。



File: gnus-ja.info, Node: Decoding Variables, Next: Viewing Files, Prev: Other Files, Up: Decoding Articles

デコードのための変数
--------------------

形容詞です。動詞ではありません。

* Menu:

* Rule Variables::              ファイルがどのように表示されるかを決める変数
* Other Decode Variables::      他のデコードのための変数
* Uuencoding and Posting::      uuencode するのをカスタマイズする変数



File: gnus-ja.info, Node: Rule Variables, Next: Other Decode Variables, Prev: Decoding Variables, Up: Decoding Variables

規則変数
........

Gnus はファイルをどうやって表示するかを決めるために「規則変数」を使いま
す。これらの変数はすべて以下のような様式です。

           (list '(regexp1 command2)
                 '(regexp2 command2)
                 ...)

`gnus-uu-user-view-rules'
     この変数はファイルを表示するときに最初に調べられます。例えば、もし
     `.au' 音響ファイルを変換するために `sox' を使いたいときは、次のよ
     うに設定することができます:

          (setq gnus-uu-user-view-rules
                (list '("\\\\.au$\" "sox %s -t .aiff > /dev/audio")))

`gnus-uu-user-view-rules-end'
     この変数は Gnus が利用者とディフォルトの表示規則から合致するものを
     見つけることができなかったときに調べられます。

`gnus-uu-user-archive-rules'
     この変数はアーカイブを展開するときにどの命令が使われるべきかを決め
     るために使うことができます。



File: gnus-ja.info, Node: Other Decode Variables, Next: Uuencoding and Posting, Prev: Rule Variables, Up: Decoding Variables

他のデコードのための変数
........................


`gnus-uu-grabbed-file-functions'
     これは関数のリストです。すぐにファイルを移動したり表示することを可
     能にし、何かができるようになる前にすべてのファイルがデコードされる
     のを待つ必要が無いように、それぞれのファイルのデコードに成功した直
     後にそれらの関数が呼ばれます。このリストに入れることができる既製の
     関数は以下の通りです:

     `gnus-uu-grab-view'
          ファイルを表示します。

     `gnus-uu-grab-move'
          ファイルを移動します (もし保存関数を使っているのであれば)。

`gnus-uu-be-dangerous'
     デコードの最中に異常な状況が起こったときに何をするかを指定します。
     もし `nil' であると、できるだけ保守的になります。もし `t' であると、
     動作しないものは無視して、現存するファイルを上書きします。その他の
     場合は、それぞれのときに尋ねます。

`gnus-uu-ignore-files-by-name'
     この正規表現に合致する名前のファイルは表示されません。

`gnus-uu-ignore-files-by-type'
     この変数に合致する MIME の型を持つファイルは表示されません。Gnus
     はファイル名に基づいて型を推測していることに注意して下さい。
     `gnus-uu' は (まだ) MIME パッケージではないので、これは少々お行儀
     が悪いものです。

`gnus-uu-tmp-dir'
     `gnus-uu' がその仕事をする場所です。

`gnus-uu-do-not-unpack-archives'
     `nil' でないと、`gnus-uu' は表示するためのファイルを探すためにアー
     カイブの中身までは見ません。

`gnus-uu-view-and-save'
     `nil' でないと、利用者はファイルを表示した後で常に保存するかどうか
     を尋ねられます。

`gnus-uu-ignore-default-view-rules'
     `nil' でないと、`gnus-uu' はディフォルトの表示規則を無視します。

`gnus-uu-ignore-default-archive-rules'
     `nil' でないと、`gnus-uu' はディフォルトのアーカイブ展開命令を無視
     します。

`gnus-uu-kill-carriage-return'
     `nil' でないと、`gnus-uu' は記事からすべてのキャリッジリターンを取
     り去ります。

`gnus-uu-unmark-articles-not-decoded'
     `nil' でないと、`gnus-uu' はデコードに失敗した記事に未読の印を付け
     ます。

`gnus-uu-correct-stripped-uucode'
     `nil' でないと、`gnus-uu' は後続の空白が削除されてしまっている
     uuencode されたファイルを修復しようと *試み* ます。

`gnus-uu-pre-uudecode-hook'
     メッセージを `uudecode' に送る前に実行されるフックです。

`gnus-uu-view-with-metamail'
     `nil' でないと、`gnus-uu' は規則変数で定義された表示命令を無視して、
     ファイル名に基づいた MIME Content-Type をでっちあげます。その結果
     は表示のために `metamail' にかけられます。

`gnus-uu-save-in-digest'
     `nil' でないと、デコードせずに保存することを指示されたときに、
     `gnus-uu' は要約 (digest) を保存します。この変数が `nil' であると、
     `gnus-uu' は何も加工を施さずにすべてを一つのファイルに保存します。
     要約の作成は概ね RFC1153 に準拠していますが、意味のある目次を付け
     る簡単な方法が見つからなかったので、私はそれらを単に落としました。



File: gnus-ja.info, Node: Uuencoding and Posting, Prev: Other Decode Variables, Up: Decoding Variables

uuencode と投稿
...............

`gnus-uu-post-include-before-composing'
     `nil' でないと、`gnus-uu' は記事を作成する前にエンコードするファイ
     ルを尋ねます。この変数が `t' であると、`C-c C-i' によってエンコー
     ドされたファイルを取り込むか、記事を投稿するときに取り込むかのどち
     らかをすることができます。

`gnus-uu-post-length'
     記事の最大の長さです。エンコードされたファイルは全体のファイルを投
     稿するのに必要な量のファイルに分割されます。

`gnus-uu-post-threaded'
     `nil' でないと、`gnus-uu' はエンコードされたファイルをスレッドで投
     稿します。これはあまり賢い方法ではないかもしれません。というのは、
     今まで私が見た中で uuencode された記事を集めるのに、スレッドを追っ
     ていくことのできる他のデコーダーが存在しないからです。(えーと、私
     はそれをする一つのパッケージを見たことがあります---`gnus-uu' です。
     しかしどうも、それが数のうちに入るとは思えないのです...) ディフォ
     ルトは `nil' です。

`gnus-uu-post-separate-description'
     `nil' でないと、説明文は別の記事で投稿されます。最初の記事は普通
     (0/x) のように番号が付けられます。もしこの変数が `nil' であると、
     利用者の書いた説明分は最初のファイルの始めに取り込まれ、(1/x) の番
     号が付けられます。ディフォルトは `t' です。



File: gnus-ja.info, Node: Viewing Files, Prev: Decoding Variables, Up: Decoding Articles

ファイルの表示
--------------

デコードした後でファイルが何らかのアーカイブである場合、Gnus はアーカイ
ブを展開しようと試み、アーカイブの中に表示できるファイルがあるかどうか
を調べます。例えば、gzip された tar ファイル `pics.tar.gz' があって、ファ
イル `pic1.jpg' と `pic2.gif' を含んでいる場合、Gnus は主ファイルを解凍
して tar を展開し、それから二つの絵を表示します。この展開の過程は再帰的
なので、アーカイブにアーカイブのアーカイブがあると、それはすべて展開さ
れます。

最後に、Gnus は普通はそれぞれの抽出された記事ごとに「疑似記事」を概略バッ
ファーに挿入します。これらの『記事』に移動した場合は、実行する命令 (普
通は Gnus が提案をします) を入力するように促され、それからその命令が実
行されます。

`gnus-view-pseudo-asynchronously' が `nil' であると、Emacs は先へ進む前
に表示の終了を待ちます。

`gnus-view-pseudos' が `automatic' であると、Gnus は概略バッファーに疑
似記事を挿入せず、それらをすぐに表示します。この変数が `not-confirm' で
あると、利用者は表示が済む前に確認さえも求められません。

`gnus-view-pseudos-separately' が `nil' でないと、表示されるそれぞれの
ファイルにつき一つの疑似記事が作成されます。`nil' であると、同じ表示命
令を使うすべての命令がその命令の引数のリストとして渡されます。

`gnus-insert-pseudo-articles' が `nil' でないと、デコードのときに疑似記
事を挿入します。ディフォルトでは `t' です。

さて、あなたはそんなふうに *仮想サーバー* の *仮想グループ* にある *疑
似記事* を読むことになるわけです。どうしてすべてが現実ではなくなってし
まったんでしょうか?  どうしてこんなところに来てしまったんでしょうか?



File: gnus-ja.info, Node: Article Treatment, Next: MIME Commands, Prev: Decoding Articles, Up: Summary Buffer

記事のトリートメント
====================

この巨大な説明文書を読んできて、人々の著作を読むことがニュースリーダー
の本当の目的だったことを、すっかり忘れてしまったかもしれません。記事を
読むことです。残念ながら人々は書くことがとても苦手ですが、記事を読みや
すくするための関数と変数は山のようにあります。

* Menu:

* Article Highlighting::        記事をフルーツサラダのようにしたい
* Article Fontisizing::         強調された文を素敵にする
* Article Hiding::              特定の情報は消し去りたいとも思う
* Article Washing::             人生をもっとよくするたくさんの気の利いた関数
* Article Header::              ヘッダーをいろいろ変形させる
* Article Buttons::             URL や Message-ID やアドレスなどをクリックする
* Article Button Levels::       ボタンの見え方を制御する
* Article Date::                ぐずぐず言うな、世界時だ!
* Article Display::             X-Face, Picons, Smileys を表示する
* Article Signature::           署名って何?
* Article Miscellanea::         他のいろいろなもの



File: gnus-ja.info, Node: Article Highlighting, Next: Article Fontisizing, Prev: Article Treatment, Up: Article Treatment

記事のハイライト
----------------

記事バッファーをフルーツサラダのように、いや総天然色のフルーツサラダの
ようにしたくありませんか。

`W H a'
     現在の記事をもっとハイライトします。この関数は、ヘッダー、引用文、
     署名をハイライトし、本文とヘッダーにボタンを加えます。

`W H h'
     ヘッダーをハイライトします (`gnus-article-highlight-headers')。ハ
     イライトは変数 `gnus-header-face-alist' に従って行なわれ、それはそ
     れぞれの要素が `(正規表現 名前 内容)' という様式のリストです。正規
     表現 はヘッダーに合致する正規表現、名前 はヘッダーの名前をハイライ
     トするのに使われるフェース (*Note Faces and Fonts::)、内容 はヘッ
     ダーの値をハイライトするフェースです。最初に合致したものが使われま
     す。正規表現 の先頭に `^' を付けてはいけないことに注意して下さ
     い--Gnus がそれを付け加えます。

`W H c'
     引用された文をハイライトします
     (`gnus-article-highlight-citation')。

     引用文のハイライトをカスタマイズする変数は次の通りです:

     `gnus-cite-parse-max-size'
          記事の大きさがこの変数 (ディフォルトでは 25000) より大きい記
          事は、引用文のハイライトが行なわれません。

     `gnus-cite-max-prefix'
          引用符の最大の長さです (ディフォルトでは 20 です)。

     `gnus-cite-face-list'
          引用文をハイライトするために使われるフェースのリストです
          (*Note Faces and Fonts::)。同じメッセージの中に複数の記事から
          の引用があると、Gnus はそれぞれの記事からの引用をそれ用のフェー
          スで表示しようとします。これにより、誰が何を書いたかが分かり
          やすくなるでしょう。

     `gnus-supercite-regexp'
          普通の Supercite 著者行に合致する正規表現です。

     `gnus-supercite-secondary-regexp'
          引き裂かれた Supercite 著者行に合致する正規表現です。

     `gnus-cite-minimum-match-count'
          それが引用文であると判定する前に調べなければならない引用符の
          最小の数です。

     `gnus-cite-attribution-prefix'
          著者行の始まりに合致する正規表現です。

     `gnus-cite-attribution-suffix'
          著者行の終りに合致する正規表現です。

     `gnus-cite-attribution-face'
          著者行に使われるフェースです。その著者が書いた文の引用のため
          のフェースと融合されます。

     `gnus-cite-ignore-quoted-from'
          非-`nil' だったら、`>From ' で始まる行で引用文のハイライトは
          行なわれません。それらの行は、エンベロープ From 行と混同しな
          いように、MTA がクオートした可能性があります。ディフォルト値
          は `t' です。

`W H s'
     署名 (signature) をハイライトします
     (`gnus-article-highlight-signature')。`gnus-signature-separator'
     (*Note Article Signature::) の後のすべてのものは署名であると解釈さ
     れ、`gnus-signature-face' でハイライトされます。それはディフォルト
     では `italic' です。

記事を自動的にハイライトする方法については *Note Customizing
Articles:: を参照して下さい。



File: gnus-ja.info, Node: Article Fontisizing, Next: Article Hiding, Prev: Article Highlighting, Up: Article Treatment

記事中の文の強調表示
--------------------

(訳注: Fontisize == Fontify + Emphasize)

人々はよくニュースの記事で `_これ_' や `*これ*' または `/これ/' のよう
なものを使って単語を強調します。Gnus は記事を `W e' 命令
(`gnus-article-emphasize') にかけることによって素敵に見えるようにできま
す。

強調がどのように処理されるかは変数 `gnus-emphasis-alist' によって制御さ
れます。これは連想リストで、最初の要素は合致するべき正規表現です。二番
目の要素は、正規表現の中のどのグループが強調語全体を見つけるために使わ
れるかを示す数値です。三番目は正規表現のどのグループが表示されハイライ
トされるかを決める数値です。(この二つのグループの間にあるテキストは隠さ
れます。) 四番目はハイライトさせるためののフェースです。

     (setq gnus-emphasis-alist
           '(("_\\(\\w+\\)_" 0 1 gnus-emphasis-underline)
             ("\\*\\(\\w+\\)\\*" 0 1 gnus-emphasis-bold)))

(訳注: 上記の変数の値は、ディフォルトのままにしておくのが無難です。)


ディフォルトでは七つの規則があり、それらは以下のフェースを用います:
`gnus-emphasis-bold', `gnus-emphasis-italic',
`gnus-emphasis-underline', `gnus-emphasis-bold-italic',
`gnus-emphasis-underline-italic',
`gnus-emphasis-underline-bold',
`gnus-emphasis-underline-bold-italic'。

これらのフェースを変更したいのであれば、`M-x customize' か `copy-face'
を使うことができます。例えば `gnus-emphasis-italic' が代わりに赤のフェー
スを使うようにしたいのならば、次のようにすれば良いでしょう:

     (copy-face 'red 'gnus-emphasis-italic)

任意の語を強調表示させたいときは、`gnus-group-highlight-words-alist' 変
数を使うことができます。これは `gnus-emphasis-alist' と同じ構文を使いま
す。`highlight-words' グループパラメーター (*Note Group Parameters::)
を使うこともできます。

記事を自動的に強調表示させるやり方については *Note Customizing
Articles:: を参照して下さい。



File: gnus-ja.info, Node: Article Hiding, Next: Article Washing, Prev: Article Fontisizing, Up: Article Treatment

記事を隠す
----------

と言うよりはむしろ、記事の中にある特定のものを隠すことです。たいていの
記事には、普通はありすぎるくらいのごみがあります。

`W W a'
     記事バッファーでたくさんのものを隠します (`gnus-article-hide')。特
     にこの関数はヘッダー、PGP、引用文、それに署名を隠します。

`W W h'
     ヘッダーを隠します (`gnus-article-hide-headers')。
     *Note Hiding Headers::.

`W W b'
     あまり興味の持てないヘッダーを隠します
     (`gnus-article-hide-boring-headers')。*Note Hiding Headers::.

`W W s'
     署名を隠します (`gnus-article-hide-signature')。
     *Note Article Signature::.

`W W l'
     `gnus-list-identifiers' で指定されているメーリングリストの標識を削
     除します。これらはいくつかのメーリングリストのサーバーがすべて
     の `Subject' ヘッダーの最初に付ける文字列、例え
     ば `[zebra 4711]' のようなものです。文字列の初めにあ
     る `Re: ' は、削除を行なう前に跳び越されます。
     `gnus-list-identifiers' に `\\(..\\)' を含めてはいけません。

     `gnus-list-identifiers'
          表題から削除されるべきメーリングリストの標識に合致する正規表
          現です。これは正規表現のリストであることもできます。

`W W P'
     不要な PEM (privacy enhanced messages (プライバシー拡張メッセージ))
     の部分を隠します (`gnus-article-hide-pem')。

`W W B'
     `banner' グループパラメーターで指定されたバナーを取り除きます
     (`gnus-article-strip-banner')。これは主に、いくつかのメーリングリ
     ストや司会者付きのグループがすべての記事に追加する、欝陶しいバナー
     と/ もしくは署名を隠すために使用されます。この関数を使う方法は
     `banner' グループパラメーター (*Note Group Parameters::) をバナー
     を取り除きたいグループに追加することです。パラメーターは、消去され
     るテキストに合致する正規表現として解釈される文字列か、(最後の) 署
     名を消去するためのシンボル `signature'、または
     `gnus-article-banner-alist' の正規表現に対応した他のシンボルのいず
     れかであることができます。

     グループにかかわらず、記事の送信者が
     `gnus-article-address-banner-alist' で設定されている特定のメールア
     ドレスを持っているときだけ、広告のようなものを隠すことができます。

     `gnus-article-address-banner-alist'
          メールアドレスとバナーの連想リストです。それぞれの要素は
          `(ADDRESS . BANNER)' の形式を持ち、ここで ADDRESS は From ヘッ
          ダーにあるメールアドレスに合致する正規表現です。また、BANNER
          はシンボル `signature'、`gnus-article-banner-alist' の要素、
          正規表現または `nil' のうちの一つです。ADDRESS が著者のメール
          アドレスに合致すると、広告のようなものを消します。例えば、送
          信者が `hail@yoo-hoo.co.jp' というメールアドレスを持っていて、
          彼が送信するすべての記事に `Do You Yoo-hoo!?' のようなものが
          ある場合、以下の要素でそれらを消すことができます。

               ("@yoo-hoo\\.co\\.jp\\'" . "\n_+\nDo You Yoo-hoo!\\?\n.*\n.*\n")

`W W c'
     引用文を隠します (`gnus-article-hide-citation')。隠蔽をカスタマイ
     ズするいくつかの変数は:

     `gnus-cited-opened-text-button-line-format'
     `gnus-cited-closed-text-button-line-format'
          Gnus はどこの引用文が隠されているかを示すためにボタンを付け加
          え、文章の隠蔽を切り替えられるようにします。この変数の様式は、
          以下のフォーマットのような変数によって指定されます (*Note
          Formatting Variables::)。次の指定が有効です:

          `b'
               隠された文の最初のポイントです。
          `e'
               隠された文の最後のポイントです。
          `l'
               隠されたリージョンの文字の数です。
          `n'
               隠された文の行の数です。

     `gnus-cited-lines-visible'
          隠さずに表示しておく、引用文の先頭からの行数です。これは、隠
          さずに表示する先頭からの行と、隠さずに表示する末尾からの行の、
          それぞれの数の cons セルであることもできます。

`W W C-c'
     以下の二つの変数に依存して、引用文を隠します
     (`gnus-article-hide-citation-maybe'):

     `gnus-cite-hide-percentage'
          引用文の割合のパーセンテージが、この変数 (ディフォルトは 50)
          より大きかったら、引用文を隠します。

     `gnus-cite-hide-absolute'
          隠される前に、引用文は少なくともこの長さ (ディフォルトは 10)
          でなければなりません。

`W W C'
     根本でない記事の引用文を隠します
     (`gnus-article-hide-citation-in-followups')。これは対話的命令とし
     てはあまり役に立たないかもしれませんが、自動的に実行させるには手軽
     な関数でしょう (*Note Customizing Articles::)。

これらのすべての『隠蔽』命令は切り替え命令ですが、これらの命令に負の接
頭引数を与えると、それらは前に隠されていたものを表示します。正の接頭引
数を与えれば、それらは常に隠します。

引用文をカスタマイズするためのさらなる変数について、
*Note Article Highlighting:: も参照して下さい。

自動的に記事の要素を隠すための方法は *Note Customizing Articles:: を参
照して下さい。



File: gnus-ja.info, Node: Article Washing, Next: Article Header, Prev: Article Hiding, Up: Article Treatment

記事の洗濯
----------

私たちはこれをもっともな理由の下で『記事の洗濯』(article washing) と呼
んでいます。`A' キーは使われていたので、代わりに `W' キーを使う必要があ
りました。

「洗濯」は『何かの何かを何か別のものに変換する』と定義されますが、普通
はもっと良く見える何かに落ち着きます。もっときれいになります、たぶん。

Gnus が記事を表示するディフォルトのやり方を変えたいときは *Note
Customizing Articles:: を参照して下さい。

`C-u g'
     これは洗濯ではなくて、その逆です。これをタイプすると、ディスクやサー
     バーにあるがままの記事が見えます。

`g'
     現在の記事の再表示を強制します (`gnus-summary-show-article')。これ
     もまた本当の洗濯ではありません。これをタイプすると、以前に適用され
     た対話的な洗濯機能はご破算にされ、すべてのディフォルトのトリートメ
     ントを施された記事が表示されます (*Note Customizing Articles::)。

`W l'
     ページの区切りを現在の記事から取り除きます
     (`gnus-summary-stop-page-breaking')。ページの区切りに付いては
     *Note Misc Article:: を参照して下さい。

`W r'
     記事バッファーでカエサル変換 (Caesar rotate, rot13) を行ないます
     (`gnus-summary-caesar-message')。カエサル変換か rot13 を用いて読む
     ことを指定する、判読不可能な記事です (典型的には攻撃的な冗談などで
     す。)

     普通は“rot13”と呼ばれています。それはアルファベットの位置が 13
     個回転するからです。例えば、`B' (2 番目の文字) → `O' (15 番目の文
     字)。これは時々『カエサル変換』と呼ばれることもあります。というの
     は、カエサルがこの形式の、えーと、いささか貧弱な暗号化を採用したと
     いう噂があるからです。

`W m'
     記事バッファーをモールスでデコードします
     (`gnus-summary-morse-message')。

`W i'
     現在の記事にある IDNA エンコードされたドメイン名をデコードします。
     IDNA エンコードされたドメイン名は `xn--bar' のように見えます。これ
     を実行した後で文字列がデコードされないままだったら、おそらくそれは
     不正な IDNA 文字列でしょう (`xn--bar' は不正です)。このコマンドを
     動かすためには、GNU Libidn
     (`http://www.gnu.org/software/libidn/') をインストールしていなけれ
     ばなりません。

`W t'
`t'
     記事バッファーにすべてのヘッダーを表示するかどうかを切り替えます
     (`gnus-summary-toggle-header')。

`W v'
     記事バッファーにすべてのヘッダーを永続的に表示するかどうかを切り替
     えます (`gnus-summary-verbose-headers')。

`W o'
     オーバーストライクを処理します (`gnus-article-treat-overstrike')。

     訳注: 以下のような重ね打ちを指示する文字列を bold や underline で
     表示します。

     `B^HBo^Hol^Hld^Hd', `U^H_n^H_d^H_e^H_r^H_l^H_i^H_n^H_e^H_'

`W d'
     `gnus-article-dumbquotes-map' に応じて、マ■■■ソ■■
     sm*rtq**t*s を処理します。この関数は文字が sm*rtq**t* かどうかを推
     測するので、対話的にのみ使用されるべきであることに注意して下さい。

     Sm*rtq**t*s はもっと多くの引用文字を提供するために、マ■■■ソ■■
     が勝手に文字マップを拡張したものです。もし、アポストロフィ (') や
     引用記号 (") などがあるべきところに `\222' や `\264' のようなもの
     が見えてしまったら、洗濯してみて下さい。

`W Y f'
     いかれた Outlook (Express) の記事を完全に醜くなくすること (訳注:
     de-ugly-fy) (sm*rtq**t*s を処理、行の折り返しを解除、著者行の修復
     と引用文の整頓) をします。
     (`gnus-article-outlook-deuglify-article')。

`W Y u'
     折り返された引用行のように見える行の折り返しを解きます。折り返しが
     解かれた行の最小および最大の長さを表す
     `gnus-outlook-deuglify-unwrap-min' および
     `gnus-outlook-deuglify-unwrap-max' を調整することによって、どんな
     行の折り返しが解かれるかを制御することができます。
     (`gnus-article-outlook-unwrap-lines')。

`W Y a'
     壊れた著者行を修復します。
     (`gnus-article-outlook-repair-attribution')。

`W Y c'
     壊れた引用文を、テキストを整理し直すことによって修復します。
     (`gnus-article-outlook-rearrange-citation')。

`W w'
     行を折り返します (`gnus-article-fill-cited-articles')。

     折り返す幅を指定するために、命令に数値接頭引数を与えることができま
     す。

`W Q'
     長い行を折り返します (`gnus-article-fill-mode-lines')。

`W C'
     それぞれの文の最初の語を大文字にします
     (`gnus-article-capitalize-sentences')。

`W c'
     CRLF の組 (すなわち、行の最後の `^M') を LF に変換します (これは
     DOS の行末の世話をします)。そうしてから残りの CR を LF に変換しま
     す (これは MAC の行末の世話をします) (`gnus-article-remove-cr')。

     Quoted-printable を処理します
     (`gnus-article-de-quoted-unreadable')。Quoted-Printable は
     非-ASCII (すなわち 8-bit) の記事を送るときに使われる一般的な MIME
     エンコーディングです。それは概して `d,Aij,A` vu' のようなものを
     `d=E9j=E0 vu' に見せるので、とても読み辛くなります。問題の記事が、
     そのエンコーディングが行なわれたことを示す
     `Content-Transfer-Encoding' ヘッダーを持っていれば、通常それは
     Gnus によって自動的に行なわれることに注意して下さい。接頭引数が与
     えられると、文字セットが尋ねられます。

`W 6'
     Base64 をデコードします (`gnus-article-de-base64-unreadable')。
     Base64 は非-ASCII (すなわち 8-bit) の記事を送るときに使われる、一
     般的な MIME エンコーディングです。問題の記事が、そのエンコーディン
     グが行なわれたことを示す `Content-Transfer-Encoding' ヘッダーを持っ
     ていれば、通常それは Gnus によって自動的に行なわれることに注意して
     下さい。接頭引数が与えられると、文字セットが尋ねられます。

`W Z'
     HZ または HZP を処理します。HZ (または HZP) は中国語の記事を伝送す
     るときに使われる一般的な符号です。これは
     `~{<:Ky2;S{#,NpJ)l6HK!#~}' のような典型的な文字列を作ります。

`W A'
     ANSI SGR シーケンスを overlay または extent に変換します
     (`gnus-article-treat-ansi-sequences')。ANSI シーケンスは中国語の
     ニュースグループで強調表示に使われています。

`W u'
     URL に含まれる改行を削除します。いくつかのメイラーは、行を短くする
     ために出ていくメールに改行を挿入しますが、これは長い URL を複数の
     行に分割してしまいます。改行を削除することによって、それらの URL
     を復旧させます (`gnus-article-unsplit-urls')。

`W h'
     HTML を処理します。当該メッセージが HTML であることを示す
     `Content-Type' ヘッダーを持っていたならば、それは Gnus によって自
     動的に行なわれることに注意して下さい。

     接頭引数が与えられると、文字セットを尋ねられます。それがもし数値だっ
     たら、`gnus-summary-show-article-charset-alist' (*Note Paging the
     Article::) で定義されている文字セットが使われます。(訳注: 実質的に
     は「文字セット」ではなくて `coding-system' です。)

     ディフォルトでは HTML の変換に `mm-text-html-renderer' (*Note 表示
     のカスタマイズ: (emacs-mime-ja)Display Customization.) で設定され
     た関数を使いますが、変数 `gnus-article-wash-function' が設定されて
     いると、記事の洗濯ではそれが優先されます。使うことができる、あらか
     じめ用意された関数は以下の通りです:

     `w3'
          Emacs/W3 を使います。

     `w3m'
          emacs-w3m (http://emacs-w3m.namazu.org/) を使います。

     `w3m-standalone'
          w3m (http://w3m.sourceforge.net/) を使います。

     `links'
          Links (http://links.sf.net/) を使います。

     `lynx'
          Lynx (http://lynx.isc.org/) を使います。

     `html2text'
          html2text (シンプルな HTML コンバーターで、Gnus に含まれてい
          ます) を使います。

     訳注: 例えば `mm-text-html-renderer' を `w3m' などに設定してあって
     正しく動作するのならば、`gnus-article-wash-function' はディフォル
     トの `nil' のままにしておいて構いません。

`W b'
     クリックできるボタンを記事に加えます (`gnus-article-add-buttons')。
     *Note Article Buttons::.

`W B'
     クリックできるボタンを記事のヘッダーに加えます
     (`gnus-article-add-buttons-to-head')。

`W p'
     署名付きコントロールメッセージの認証を行ないます
     (`gnus-article-verify-x-pgp-sig')。`newgroup' や `checkgroups' と
     いったコントロールメッセージは、通常そのニュースグループ階層のメイ
     ンテイナーによって署名されています。認証を行なうためには、メインテ
     イナーの PGP 公開鍵をあなたのキーリングに追加しなければなりません。
     (1) (*Note Article Washing-Footnotes::)

`W s'
     署名されたメッセージ (PGP, PGP/MIME または S/MIME によって) を検証
     します (`gnus-summary-force-verify-and-decrypt')。*Note
     Security::.

`W a'
     記事の本文の先頭から `X-No-Archive' ヘッダーのようなヘッダーを取り
     除きます (`gnus-article-strip-headers-in-body')。

`W E l'
     記事の先頭にあるすべての空白行を取り除きます
     (`gnus-article-strip-leading-blank-lines')。

`W E m'
     すべての空白行を空行で置き換えてから、すべての複数の空行を一つの空
     行で置き換えます (`gnus-article-strip-multiple-blank-lines')。

`W E t'
     記事の最後にあるすべての空白行を取り除きます
     (`gnus-article-remove-trailing-blank-lines')。

`W E a'
     上の三つの命令をすべて実行します
     (`gnus-article-strip-blank-lines')。

`W E A'
     すべての空白行を取り除きます
     (`gnus-article-strip-all-blank-lines')。

`W E s'
     記事の本文のすべての行頭にあるすべての空白を取り除きます
     (`gnus-article-strip-leading-space')。

`W E e'
     記事の本文のすべての行末にあるすべての空白を取り除きます
     (`gnus-article-strip-trailing-space')。

自動的に記事の洗濯を行なわせる方法は *Note Customizing Articles:: を参
照して下さい (訳注: 実は多くの洗濯がディフォルトで自動的に行なわれます)。


File: gnus-ja.info  Node: Article Washing-Footnotes, Up: Article Washing

(1) 多くのニュースグループ階層のメインテイナーの PGP の
鍵は `ftp://ftp.isc.org/pub/pgpcontrol/README.html' から入手
することができます。



File: gnus-ja.info, Node: Article Header, Next: Article Buttons, Prev: Article Washing, Up: Article Treatment

記事ヘッダー
------------

これらのコマンドは記事ヘッダーをいろいろに変形させます。

`W G u'
     折り返されたヘッダー行を一行にします
     (`gnus-article-treat-unfold-headers')。

`W G n'
     `Newsgroups' と `Followup-To' ヘッダーを折り返します
     (`gnus-article-treat-fold-newsgroups')。

`W G f'
     すべてのメッセージヘッダーを折り返します
     (`gnus-article-treat-fold-headers')。

`W E w'
     すべてのヘッダーから余分な空白を取り除きます
     (`gnus-article-remove-leading-whitespace')。



File: gnus-ja.info, Node: Article Buttons, Next: Article Button Levels, Prev: Article Header, Up: Article Treatment

記事のボタン
------------

人々はよく記事の中に他の資料を参照するための案内を入れることがあります
が、それらの参照への案内の上で `RET' を打つか、マウスの真中のボタンを使っ
たときに、彼らが話題にしているのが何であれ、最小限の曖昧さで Gnus が取
得することができれば素敵でしょう。

特定の標準的な参照に、Gnus はディフォルトで「ボタン」を付けます: ちゃん
とした URL、メールアドレス、Message-ID、Info へのリンク、man ページ、そ
れに関連する Emacs または Gnus の参考文献です。これは二つの変数によって
制御されていて、その一つは記事の本文を扱い、もう一つは記事のヘッダーを
扱います。

`gnus-button-alist'
     それぞれの要素が次のような様式を持つ連想リストです:

          (REGEXP BUTTON-PAR USE-P FUNCTION DATA-PAR)

     REGEXP
          この正規表現 (大文字と小文字は区別されません) に合致するすべ
          てのテキストは、外部への参照であるとみなされます。これは埋め
          込まれた URL に合致する典型的な正規表現です:
          `<URL:\\([^\n\r>]*\\)>'。これはまた正規表現の値を持つ変数であっ
          てもよく、有用な変数として `gnus-button-url-regexp' および
          `gnus-button-mid-or-mail-regexp' があります。

     BUTTON-PAR
          Gnus は合致したもののどの部分がハイライトされるのかを知らなけ
          ればなりません。これは正規表現のどの副表現がハイライトされる
          かを指定する番号です。すべてをハイライトしたいのなら、ここで
          0 を使って下さい。

     USE-P
          この式は `評価' され、結果が `nil' でなかったら、これは合致で
          あるとみなされます。これは間違った合致を避けるために特別な選
          別をしたいときに役に立ちます。ここではしばしば
          `gnus-button-*-level' のような名前の変数が使われますが、
          *Note Article Button Levels::, 他のどんな形式でも使うことがで
          きます。

     FUNCTION
          この関数が、このボタンをクリックしたときに呼ばれます。

     DATA-PAR
          BUTTON-PAR のように、これは部分表現の番号ですが、これは合致の
          どの部分が FUNCTION にデータとして送られるかを指定します。

     したがって URL をボタンにする完全な要素は、こうなります。

          ("<URL:\\([^\n\r>]*\\)>" 0 t gnus-button-url 1)

`gnus-header-button-alist'
     これは他の連想リストと同じようなものですが、記事のヘッダーだけに適
     用されることと、それぞれの項目がどのヘッダーにボタンを付けるかを指
     示するための追加の要素を持っていることが異なります:

          (HEADER REGEXP BUTTON-PAR USE-P FUNCTION DATA-PAR)

     HEADER は正規表現です。


関連する変数と関数
..................

`gnus-button-*-level'
     *Note Article Button Levels:: を参照して下さい。

`gnus-button-url-regexp'
     埋め込まれた URL に合致する正規表現です。上述の変数のディフォルト
     の値で使われます。

`gnus-button-man-handler'
     Man ページの表示に使う関数です。少なくとも一つの引数として Man ペー
     ジの名前の文字列を受け付けなければなりません。

`gnus-button-mid-or-mail-regexp'
     Message-ID かメールアドレスに合致する正規表現です。

`gnus-button-prefer-mid-or-mail'
     この変数は `foo123@bar.invalid' のような文字列のボタンが押されたと
     きに、何を行なうかを決める変数です。このような文字列は Message-ID
     かメールアドレスのいずれかです。もし `mid' か `mail' というシンボ
     ルのうちの一つだったら、Gnus は常にそれぞれ文字列が Message-ID ま
     たはメールアドレスであると仮定します。この変数が `ask' というシン
     ボルに設定されると、Gnus はいつも利用者が何をしたいかを尋ねます。
     それが関数だった場合、たった一つの文字列を引数として呼ばれます。そ
     の関数は `mid'、`mail'、`invalid' または `ask' を返さなければなり
     ません。ディフォルト値は関数 `gnus-button-mid-or-mail-heuristic'
     です。

`gnus-button-mid-or-mail-heuristic'
     その引数が Message-ID かメールアドレスであるかを推定する関数です。
     Message-ID だったら `mid' を、メールアドレスだったら `mail' を、不
     確かだったら `ask' を、そして無効な文字列だったら `invalid' を返し
     ます。

`gnus-button-mid-or-mail-heuristic-alist'
     関数 `gnus-button-mid-or-mail-heuristic' で使われる `(RATE
     . REGEXP)' 対の連想リストです。

`gnus-button-ctan-handler'
     CTAN リンクの表示に使う関数です。URL 名の文字列を、引数として一つ
     受け付けなければなりません。

`gnus-ctan-url'
     `gnus-button-ctan-handler' で使われる CTAN (Comprehensive TeX
     Archive Network) アーカイブのディレクトリーです。

`gnus-article-button-face'
     ボタンに使われるフェースです。

`gnus-article-mouse-face'
     マウスのカーソルがボタンの上にあるときに使われるフェースです。

記事に自動的にボタンを付ける方法は、*Note Customizing Articles:: を参照
して下さい。



File: gnus-ja.info, Node: Article Button Levels, Next: Article Date, Prev: Article Buttons, Up: Article Treatment

Article button levels
---------------------

変数 `gnus-button-*-level' の値が高いほど、より多くのボタンが現れます。
レベルがゼロだったらボタンは表示されません。ディフォルト値 (それは 5)
では、とてもたくさんのボタンをすでに見ているはずです。高いレベルではよ
り多くのボタンを見ることになりますが、多くの要らないものも現れるかもし
れません。それらを避けるために、特定のグループに対して変数
`gnus-button-*-level' を設定しても良いでしょう (*Note Group
Parameters::)。`gnus-parameters' 変数の例です:

     ;; いくつかのグループで `gnus-button-*-level' を増やす:
     (setq gnus-parameters
           '(("\\<\\(emacs\\|gnus\\)\\>" (gnus-button-emacs-level 10))
             ("\\<unix\\>"               (gnus-button-man-level 10))
             ("\\<tex\\>"                (gnus-button-tex-level 10))))

`gnus-button-browse-level'
     Message-ID、メールアドレスおよびニュースの URL を参照する案内の表示を制
     御します。関連する変数と関数には `gnus-button-url-regexp'、
     `browse-url' および `browse-url-browser-function' があります。

`gnus-button-emacs-level'
     Emacs または Gnus への参照の表示を制御します。関連する関数は、
     `gnus-button-handle-custom',
     `gnus-button-handle-describe-function',
     `gnus-button-handle-describe-variable',
     `gnus-button-handle-symbol', `gnus-button-handle-describe-key',
     `gnus-button-handle-apropos',
     `gnus-button-handle-apropos-command',
     `gnus-button-handle-apropos-variable',
     `gnus-button-handle-apropos-documentation' および
     `gnus-button-handle-library' です。

`gnus-button-man-level'
     (Unix の) man ページへの参照の表示を制御します。
     `gnus-button-man-handler' を見て下さい。

`gnus-button-message-level'
     Message-ID、メールアドレスおよびニュースの URL の表示を制御します。
     関連する変数と関数には `gnus-button-mid-or-mail-regexp',
     `gnus-button-prefer-mid-or-mail',
     `gnus-button-mid-or-mail-heuristic' および
     `gnus-button-mid-or-mail-heuristic-alist' があります。

`gnus-button-tex-level'
     TeX または LaTex への参照、例えば CTAN の URL の表示を制御します。
     変数 `gnus-ctan-url', `gnus-button-ctan-handler',
     `gnus-button-ctan-directory-regexp' および
     `gnus-button-handle-ctan-bogus-regexp' を見て下さい。



File: gnus-ja.info, Node: Article Date, Next: Article Display, Prev: Article Button Levels, Up: Article Treatment

記事の日付
----------

日付は聞いたことの無い何か辺鄙なタイムゾーンで作成されていることが良く
あるので、記事が送られたときに何時だったかを知ることができるのはとても
良いことです。

`W T u'
     UT (別名 GMT, ZULU) で日付を表示します (`gnus-article-date-ut')。

`W T i'
     日付を国際的な形式、ISO 8601 で表示します
     (`gnus-article-date-iso8601')。

`W T l'
     日付をローカル・タイムゾーンで表示します
     (`gnus-article-date-local')。

`W T p'
     日付を英語で楽に発音できる形式で表示します
     (`gnus-article-date-english')。

`W T s'
     日付を利用者定義の様式を使って表示します
     (`gnus-article-date-user')。その様式は変数
     `gnus-article-time-format' で指定される、`format-time-string' に渡
     される文字列です。指定することができる様式の一覧は、変数の説明文を
     見て下さい。

`W T e'
     記事が投稿されてから今までどれくらいの時間が経過したかを表示します
     (`gnus-article-date-lapsed')。こんなふうに。

          X-Sent: 6 weeks, 4 days, 1 hour, 3 minutes, 8 seconds ago

     `gnus-article-date-lapsed-new-header' の値で、このヘッダーを既存の
     Date の下に追加するか、置き替えるかを指定します。

     Gnus でメールを読むことの利点は、それが単純なバグを素晴らしい不条
     理に置き換えることです。

     この行が連続して更新されるようにしたいのであれば、

          (gnus-start-date-timer)

     を `~/.gnus.el' ファイルに入れるか、それを何かのフックで実行するよ
     うにすることができます。タイマーを止めたい場合は、
     `gnus-stop-date-timer' 命令を使って下さい。

`W T o'
     本来の日付を表示します (`gnus-article-date-original')。これはあな
     たが普段は他の変換関数を使っていて、それが完全に間違ったことをして
     いるのではないかと心配になったときに役に立ちます。例えば、記事が
     1854年に投稿されたと主張したとしましょう。しかし、そのようなことは
     *完全に * 不可能です。私が信用できませんか? *くすくす*

好みの書式で自動的に日付を表示する方法は *Note Customizing Articles::
を参照して下さい。



File: gnus-ja.info, Node: Article Display, Next: Article Signature, Prev: Article Date, Up: Article Treatment

Article Display
---------------

これらのコマンドは、いろんな取るに足らないギミック (gimmicks) の表示を、
それらをサポートしている Emacs の記事バッファーに追加します。

`X-Face' ヘッダーは小さな白黒画像で、メッセージヘッダーから持ってきます
(*Note X-Face::)。

`Face' ヘッダーは小さなカラー画像で、メッセージヘッダーから持ってきます
(*Note Face::)。

スマイリーは、人々がメッセージに散らかしたがる小さな `:-)' シンボルです。

一方 Picon はあなた自身のシステムに依存し、Gnus はヘッダーに合致するあ
なたの持ち物を探してみます (*Note Picons::)。

これらすべての機能はトグルです。もしすでにそれらが存在していたならば、
それらは削除されます。

`W D x'
     `X-Face' を `From' ヘッダーに表示します
     (`gnus-article-display-x-face')。

`W D d'
     `Face' を `From' ヘッダーに表示します
     (`gnus-article-display-face')。

`W D s'
     スマイリーを表示します (`gnus-treat-smiley')。

`W D f'
     `From' ヘッダーを Picon 化します (`gnus-treat-from-picon')。

`W D m'
     すべてのメールヘッダー (すなわち `Cc'、`To') を Picon 化します
     (`gnus-treat-mail-picon')。

`W D n'
     すべてのニュースヘッダー (すなわち `Newsgroups' と `Followup-To')
     を Picon 化します (`gnus-treat-newsgroups-picon')。

`W D D'
     記事バッファーからすべての画像を削除します
     (`gnus-article-remove-images')。



File: gnus-ja.info, Node: Article Signature, Next: Article Miscellanea, Prev: Article Display, Up: Article Treatment

記事の署名
----------

それぞれの記事は二つの部分に分けられます--ヘッダーと本文です。本文は署
名部分と文章部分に分けることができます。どれが署名とみなされるかを決め
る変数は `gnus-signature-separator' です。これは普通は son-of-RFC 1036
で規定されている標準の `^-- $' です。しかし、多くの人が標準ではない署名
セパレーターを使うので、この変数は一つ一つ試される、正規表現のリストで
あることもできます。(探索は本文の最後から始めへとなされます。) よくあり
そうな値は:

     (setq gnus-signature-separator
           '("^-- $"         ; 標準
             "^-- *$"        ; 普通の崩し方
             "^-------*$"    ; 多くの人は長ーーい横棒の
                             ; 行を使います。みっともない!
             "^ *--------*$" ; 二倍みっともない!
             "^________*$"   ; 下線も人気があります
             "^========*$")) ; 邪道!

あなたが寛容であればあるほど、間違った結果を得ることになるでしょう。

`gnus-signature-limit' は記事を表示するときにどれが署名とみなされるかへ
の制限を提供します。

  1. これが整数であれば、署名はこの整数より (文字数で) 長くなっていては
     いけません。
  2. これが浮動小数点数であれば、署名はその数値より (行数で) 長くなって
     いてはいけません。
  3. これが関数であれば、その関数は引数なしで呼ばれ、それが `nil' を返
     せば、そのバッファーには署名がありません。
  4. これが文字列であれば、それは正規表現として使われます。もしそれが合
     致すれば、当のその文字列は署名ではありません。

この変数は、要素が上に列挙された型のリストであることもできます。例です:

     (setq gnus-signature-limit
           '(200.0 "^---*Forwarded article"))

これは署名セパレーターの後に 200 を超える行があるか、セパレーターの後の
テキストが正規表現 `^---*Forwarded article' に合致すれば、結局それは署
名ではないということです。



File: gnus-ja.info, Node: Article Miscellanea, Prev: Article Signature, Up: Article Treatment

記事いろいろ
------------

`A t'
     記事をある言語から別のものへ変換します (`gnus-article-babel')。



File: gnus-ja.info, Node: MIME Commands, Next: Charsets, Prev: Article Treatment, Up: Summary Buffer

MIME コマンド
=============

以下のコマンドはすべて数値接頭引数を理解します。例えば `3 K v' は「三番
目の MIME パートを表示する」という意味です。

`b'
`K v'
     MIME パートを表示します。

`K o'
     MIME パートを保存します。

`K O'
     ファイル名の入力を求めてから MIME パートを保存し、それを記事から取
     り除きます。取り除かれた MIME オブジェクトは
     message/external-body 型の MIME 形式として参照されるようになります。

`K r'
     MIME パートを外部にある本体で置き換えます。

`K d'
     MIME パートを削除して、削除したことの案内を追加します。

`K c'
     MIME パートをコピーします。

`K e'
     MIME パートを外部コマンドで表示します。

`K i'
     MIME パートをバッファー内に表示します。

`K |'
     MIME パートを外部コマンドにパイプします。

以降の MIME コマンドの残りは、数値接頭引数を同じやり方では使いません:

`K b'
     すべての MIME パートの先頭にボタンを付加します。埋め込まれたパート
     をセーブ (または他の動作を実行) しようとするときに、たいてい便利で
     す。

`K m'
     ときたま、ヘッダーが無かったり間違ったヘッダーを持つマルチパートの
     メッセージが送信されてきます。このコマンドは、それらのメッセージが
     より快適に表示されるように「修復」を試みます
     (`gnus-summary-repair-multipart')。

`X m'
     MIME タイプに合致するすべてのパートを、ディレクトリーにセーブしま
     す (`gnus-summary-save-parts')。プロセス/接頭引数の習慣を理解しま
     す (*Note Process/Prefix::)。

`M-t'
     記事バッファーにボタンを表示するかしないかを切り替えまます
     (`gnus-summary-toggle-display-buttonized')。

`W M w'
     記事ヘッダーにある RFC 2047 でエンコードされた語をデコードします
     (`gnus-article-decode-mime-words')。

`W M c'
     エンコードされた記事の本文を、文字セットでデコードします
     (`gnus-article-decode-charset')。

     このコマンドは、文字セットを決めるために `Content-Type' ヘッダーを
     調べます。記事にそんなヘッダーが無い場合でも、接頭引数を与えること
     によって、デコードするための文字セットを入力することは可能です。あ
     る共通のエンコーディングを使って (でも MIME ヘッダーは含めずに) 人々
     が記事を投稿する地域的なグループでは、`charset' グループ/トピック・
     パラメーターに必要な文字セットを設定すれば良いでしょう (*Note
     Group Parameters::)。

`W M v'
     現在の記事にある、すべての MIME パートを表示します
     (`gnus-mime-view-all-parts')。

関連する変数:

`gnus-ignored-mime-types'
     これは正規表現のリストで、これに含まれている正規表現に合致する
     MIME タイプは、Gnus によって完全に無視されます。ディフォルト値は
     `nil' です。

     すべての Vcard を無視させるには、こんなふうにして下さい:

          (setq gnus-ignored-mime-types
                '("text/x-vcard"))

`gnus-article-loose-mime'
     非-`nil' だったら、Gnus は記事を MIME メッセージとして解読する前に、
     `MIME-Version' があることを必要としません。これは、ある壊れたメー
     ル・ユーザー・エージェントからのメッセージを読むときに役立ちます。
     ディフォルトは `nil' です。

`gnus-article-emulate-mime'
     MIME ではない別のエンコーディングの手法があります。最も一般的なの
     は `uuencode' ですが、yEncode も普及してきています。この変数が
     非-`nil' になっていると、Gnus はメッセージの本文にそれらのエンコー
     ディングが見つかるかどうかを調べ、もしあったならば、それらを Gnus
     の MIME 機構で処理します。ディフォルトは `t' です。

`gnus-unbuttonized-mime-types'
     これは正規表現のリストで、これに含まれている正規表現に合致する
     MIME タイプには、ボタンが付加されません。ただし、それらが表示され
     ないか、`gnus-buttonized-mime-types' 変数の方が優先される場合を除
     いて、ですが。ディフォルト値は `(".*/.*")' です。この変数は
     `gnus-inhibit-mime-unbuttonizing' が `nil' のときだけ使われます。

`gnus-buttonized-mime-types'
     これは正規表現のリストで、これに含まれている正規表現に合致する
     MIME タイプには、それらが表示されない場合を除いて、ボタンが付加さ
     れます。この変数は `gnus-unbuttonized-mime-types' よりも優先されま
     す。ディフォルト値は `nil' です。この変数は
     `gnus-inhibit-mime-unbuttonizing' が `nil' のときだけ使われます。

     例えば、セキュリティーのボタンだけを表示して、他のボタンを表示しな
     いようにするには、この変数を `("multipart/signed")' に設定して、
     `gnus-unbuttonized-mime-types' はディフォルト値のままにしておいて
     下さい。

     また、このリストに `"multipart/alternative"' を加えることによって、
     そういうメールに含まれている二つのメディア・タイプのうちの一つを選
     ぶことができる、ラジオボタンを表示させることができます。
     `mm-discouraged-alternatives' も参照して下さい (*Note 表示のカスタ
     マイズ: (emacs-mime-ja)Display Customization.)。

`gnus-inhibit-mime-unbuttonizing'
     これが非-`nil' だと、すべての MIME パートにボタンを付加します。ディ
     フォルト値は `nil' です。

`gnus-article-mime-part-function'
     それぞれの MIME パートに対して、この関数が MIME ハンドル (訳注: パー
     トのタイプや内容物を表現するために、Gnus の内部で使われるデータの
     構造体) を引数にして呼ばれます。この関数は、利用者が記事から情報を
     集め (例えば Vcard の情報を bbdb のデータベースに加え) たり、パー
     トに基づいて何かを起動 (例えば、すべての jpeg をあるディレクトリー
     にセーブ) するために使われることが意図されています。

     後者を行なう関数の例です:

          (defun my-save-all-jpeg-parts (handle)
            (when (equal (car (mm-handle-type handle)) "image/jpeg")
              (with-temp-buffer
                (insert (mm-get-part handle))
                (write-region (point-min) (point-max)
                              (read-file-name "Save jpeg to: ")))))
          (setq gnus-article-mime-part-function
                'my-save-all-jpeg-parts)

`gnus-mime-multipart-functions'
     MIME マルチパートの型と、それらを扱う関数の連想リストです。

`gnus-mime-display-multipart-alternative-as-mixed'
     "multipart/alternative" のパートを "multipart/mixed" であるものと
     して表示します。

`gnus-mime-display-multipart-related-as-mixed'
     "multipart/related" のパートを "multipart/mixed" であるものとして
     表示します。

     もし "text/html" を表示するのが気に入らないのなら、
     `mm-discouraged-alternatives' を参照して下さい。ただし (それで
     text/html" を表示しないように設定して、かつ) この変数が `nil' だと、
     multipart/related" パートの中にある画像や他の資料を見逃してしまう
     かもしれません。*Note 表示のカスタマイズ: (emacs-mime-ja)Display
     Customization.

`gnus-mime-display-multipart-as-mixed'
     "multipart" のパートを "multipart/mixed" であるものとして表示しま
     す。もし `t' だと、
     `gnus-mime-display-multipart-alternative-as-mixed' および
     `gnus-mime-display-multipart-related-as-mixed' が `nil' であっても、
     この設定の方が優先されます。

`mm-file-name-rewrite-functions'
     MIME パートのファイル名を書き換えるために使われる関数のリストです。
     それぞれの関数はファイル名を受け取って、ファイル名を返します。

     出来合いの関数は
     `mm-file-name-delete-whitespace',
     `mm-file-name-trim-whitespace',
     `mm-file-name-collapse-whitespace' およ
     び `mm-file-name-replace-whitespace' です。最後のものはファイル名に
     含まれるそれぞれの空白文字を、変
     数 `mm-file-name-replace-whitespace' の値で置き換えます。ディフォル
     ト値は `"_"' (単一の下線) です。

     標準の関数である `capitalize', `downcase', `upcase' および
     `upcase-initials' も、役に立つでしょう。

     ファイル名に含まれる空白文字が害をもたらすことは、みんなが知ってい
     ます。ただし、気にかけない人たちを除いて、ですが。そんな蒙昧の人た
     ちから、たくさんの添付ファイルを受け取るのであれば、こんなものを
     `~/.gnus.el' ファイルに追加することによって、安寧な生活を送ること
     ができるでしょう。

          (setq mm-file-name-rewrite-functions
                '(mm-file-name-trim-whitespace
                  mm-file-name-collapse-whitespace
                  mm-file-name-replace-whitespace))



File: gnus-ja.info, Node: Charsets, Next: Article Commands, Prev: MIME Commands, Up: Summary Buffer

文字セット
==========

人々はいろいろな文字セットを使いますが、私たちは彼らが何の文字セットを
使っているかを教えてくれる MIME を持っています。あるいはもっと正確に言
えば、持っていたらいいなあと思います。多くの人たちが MIME を利用しない
か理解しないニュースリーダーとメイラーを使って、何の文字セットを使うか
を言わずに、単にメッセージを送出するのですが、これを少しばかり救済する
ために、いくつかの地域的なニュース階層には、何の文字セットがディフォル
トであるかを宣言する取り決めがあります。例えば `fj' 階層では
`iso-2022-jp' を使っています。

この知識は `gnus-group-charset-alist' 変数にエンコードされています。こ
れは正規表現 (グループのフルネームに合致した最初の項目を使います) と、
それらのグループを講読するときに使われるディフォルトの文字セットの、連
想リストです。

加えて、人々のいくらかは MIME を意識していると自称 (soi-disant) してい
るくせに、実はそうではないエージェントを使っています。それらは、実際に
はメッセージが `koi-8' なのに `iso-8859-1' だと、陽気にメッセージに刻印
するのです。ここでは救済のために `gnus-newsgroup-ignored-charsets' 変数
を使うことができます。そのリストに連ねられた文字セットは無視されます。
この変数は、グループパラメーター (*Note Group Parameters::) を使って、
グループ毎に設定することができます。ディフォルト値は `(unknown-8bit
x-unknown)' で、それはいくつかのエージェントが内蔵し、主張する値を含ん
でいます。

投稿する場合に、MIME でエンコードしてはいけない文字セットを判定するため
に、`gnus-group-posting-charset-alist' が使われます。例えばいくつかの階
層では、quoted-printable でヘッダーをエンコードすることは嫌われます。

この変数は正規表現と、投稿に際してエンコードしなくても良いことを許され
た (またはエンコードすることが嫌われる) 文字セットの連想リストです。そ
れぞれの要素は `('TEST HEADER BODY-LIST`)' の形式であり、それらは次の意
味を持ちます。

TEST
     Newsgroups ヘッダーに合致する正規表現、または変数シンボルのどちら
     かです。後者の場合は、その値を調べた結果が非-`nil' だったら、その
     要素が採用されることになります。
HEADER
     ヘッダーをエンコードしなくても良い文字セットです (`nil' は、すべて
     の文字セットをエンコードすることを意味します)。
BODY-LIST
     “Content-Transfer-Encoding: 8bit”でもって本文をエンコードしても
     良い (または quoted-printable や base64 でエンコードすることが嫌わ
     れる) 文字セットのリスト、または特別な値の一つである `nil' (常に
     quoted-printable でエンコードする)、または `t' (常に
     “Content-Transfer-Encoding: 8bit”を使う) です。

メッセージを送信するときに何の文字セットが使われるかを制御する付加的な
変数については、*Note エンコーディングのカスタマイズ:
(emacs-mime-ja)Encoding Customization, を参照して下さい (訳注: 特に日本
語のメッセージの文字セットについては、例えば変数
`mm-coding-system-priorities' を参照して下さい)。

Gnus 固有ではないけれど、役に立つかもしれない文字セットに関する他の秘訣:

もし、同一の Emacs の文字セットをエンコードする MIME の文字セットが複数
あるのならば、以下の宣言を使うことによって、使う文字セットを選択するこ
とができます:

     (put-charset-property 'cyrillic-iso8859-5
                           'preferred-coding-system 'koi8-r)

これは、ロシア語がディフォルトの `iso-8859-5' MIME 文字セットの代わりに、
`koi8-r' でエンコードされることを意味します。

メッセージを `koi8-u' で読みたいのであれば、以下のように騙すことができ
ます。

     (define-coding-system-alias 'koi8-u 'koi8-r)

これは、ほとんど正しいことをするでしょう。

そして最後に、`windows-1251' のような文字セットを読むには、次のよう
に宣言すれば良いでしょう (訳注: Emacs の版によっては、
`windows-1251' が最初から実装されています)。

     (codepage-setup 1251)
     (define-coding-system-alias 'windows-1251 'cp1251)



File: gnus-ja.info, Node: Article Commands, Next: Summary Sorting, Prev: Charsets, Up: Summary Buffer

記事命令
========

`A P'
     記事バッファーのポストスクリプト (PostScript) イメージを作成して印
     刷します (`gnus-summary-print-article')。`gnus-ps-print-hook' がバッ
     ファーを印刷する直前に実行されます。他に Muttprint を使って印刷す
     ることもできます (*Note Saving Articles::)。



File: gnus-ja.info, Node: Summary Sorting, Next: Finding the Parent, Prev: Article Commands, Up: Summary Buffer

概略の並べ替え
==============

私はどうしてあなたがそうしたいのかはわからないのですが、それでもあなた
はたくさんの方法で概略バッファーを並べ替えることができます。

`C-c C-s C-n'
     記事番号によって並べ替えます (`gnus-summary-sort-by-number')。

`C-c C-s C-a'
     著者によって並べ替えます (`gnus-summary-sort-by-author')。

`C-c C-s C-t'
     受信者によって並べ替えます (`gnus-summary-sort-by-recipient')。

`C-c C-s C-s'
     表題によって並べ替えます (`gnus-summary-sort-by-subject')。

`C-c C-s C-d'
     日付によって並べ替えます (`gnus-summary-sort-by-date')。

`C-c C-s C-l'
     行数によって並べ替えます (`gnus-summary-sort-by-lines')。

`C-c C-s C-c'
     記事の長さ (文字数) で並べ替えます (`gnus-summary-sort-by-chars')。

`C-c C-s C-i'
     スコアによって並べ替えます (`gnus-summary-sort-by-score')。

`C-c C-s C-r'
     ランダムに並べ替えます (`gnus-summary-sort-by-random')。

`C-c C-s C-o'
     ディフォルトの方法で並べ替えます
     (`gnus-summary-sort-by-original')。

これらの関数はスレッドを使っているときと使っていないときの両方で動作し
ます。後者では、すべての概略行が一行一行並べ替えられます。前者では根本
だけに基づいて並べ替えられ、それはあなたが求めていることとは異なってい
るかもしれません。スレッドを使うかどうかを切り替えるには `T T' を打って
下さい (*Note Thread Commands::)。



