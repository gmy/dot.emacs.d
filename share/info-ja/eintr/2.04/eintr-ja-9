Info file: eintr-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs-lisp-intro.texi.patched'
using `texinfmt.el' version 2.41 of  1 Mar 2005.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* ELisp-Intro-ja: (eintr-ja).       Emacs-Lisp入門ガイド
END-INFO-DIR-ENTRY


これはプログラマではない人のための `Emacs Lisp プログラミング' 解説書で
ある．

Edition 2.04, 2001 Dec 17

Copyright (C) 1990, '91, '92, '93, '94, '95, '97, 2001 Free Software
Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Section being the Preface, with the Front-Cover Texts being
no Front-Cover Texts, and with the Back-Cover Texts being no
Back-Cover Texts.  A copy of the license is included in the section
entitled "GNU Free Documentation License".















File: eintr-ja, Node: Index, Next: About the Author, Prev: GNU Free Documentation License, Up: Top

索引
****



* Menu:

* 引数:                         Arguments.              (line   5)
* 注釈:                         Change a defun.         (line  20)
* 評価:                         Evaluation.             (line   5)
* 除算:                         Large buffer case.      (line  27)
* 再帰:                         Loops & Recursion.      (line   5)
* 再帰:                         Recursion.              (line   5)
* 変数:                         Variables.              (line   5)
* 字下げ:                       append save-excursion.  (line  15)
* アトム:                       Lisp Atoms.             (line   5)
* リスト:                       Lisp Lists.             (line   5)
* ループ:                       Loops & Recursion.      (line   5)
* 真偽値:                       Truth & Falsehood.      (line   5)
* 字下げ:                       Typing Lists.           (line   5)
* ループ:                       while.                  (line   5)
* バッファ:                     Buffer Names.           (line  49)
* 数え上げ:                     Counting.               (line   5)
* データ型:                     Data types.             (line   5)
* デバッグ:                     Debugging.              (line   5)
* 無名関数:                     lambda.                 (line   5)
* 探索の例:                     Regexp Search.          (line   5)
* * （乗算）:                   defun.                  (line  84)
* / （除算）:                   Large buffer case.      (line  27)
* 関数の説明:                   Finding More.           (line   6)
* ライブラリ:                   Finding More.           (line  54)
* タブの保存:                   Indent Tabs Mode.       (line   5)
* 対話的関数:                   Interactive.            (line   5)
* キーマップ:                   Keymaps.                (line   5)
* シンボル名:                   Names & Definitions.    (line   5)
* ナロイング:                   Narrowing & Widening.   (line   5)
* キーワード:                   Optional Arguments.     (line  10)
* 評価の練習:                   Practicing Evaluation.  (line   5)
* リージョン:                   save-excursion.         (line   5)
* 簡単な拡張:                   Simple Extension.       (line   5)
* モード選択:                   Text and Auto-fill.     (line  23)
* 単語の重複:                   the-the.                (line   5)
* 剰余関数`%':                  Compute a Remainder.    (line   6)
* 潜在的なバグ:                 Another Bug.            (line   5)
* 変数の初期化:                 defvar.                 (line   5)
* 関数のソース:                 Finding More.           (line  12)
* タグテーブル:                 Finding More.           (line  33)
* 関数（無名）:                 lambda.                 (line   5)
* メールの別名:                 Mail Aliases.           (line  15)
* ワイドニング:                 Narrowing & Widening.   (line   5)
* 基本操作関数:                 Primitive Functions.    (line   5)
* 基本操作関数:                 Primitive Functions.    (line   6)
* 水平軸の表示:                 print-X-axis.           (line   5)
* 垂直軸の表示:                 print-Y-axis.           (line   5)
* グラフの準備:                 Readying a Graph.       (line   5)
* グラフの本体:                 Readying a Graph.       (line   5)
* 文単位の移動:                 Regexp Search.          (line   5)
* % （剰余関数）:               Compute a Remainder.    (line   6)
* > (より大きい):               if in more detail.      (line  27)
* 関数へ渡す情報:               Arguments.              (line   5)
* ポイントの位置:               Buffer Size & Locations.  (line   6)
* 関数定義の変更:               Change a defun.         (line   5)
* テキストのキル:               Cutting & Storing Text.  (line   5)
* テキストの削除:               Cutting & Storing Text.  (line   5)
* テキストの保存:               Cutting & Storing Text.  (line   5)
* 引数のデータ型:               Data types.             (line   5)
* 初期化ファイル:               Emacs Initialization.   (line   5)
* ファイルを探す:               Find a File.            (line   5)
* バッファの取得:               Getting Buffers.        (line   5)
* モード行の形式:               Mode Line.              (line   5)
* 待機なしの解決:               No deferment solution.  (line   5)
* 表示（水平軸）:               print-X-axis.           (line   5)
* 表示（垂直軸）:               print-Y-axis.           (line   5)
* 再帰関数の定義:               Recursive Definition Parts.  (line   8)
* 移動（文単位）:               Regexp Search.          (line   5)
* 正規表現の探索:               Regexp Search.          (line   5)
* 段落単位の移動:               Regexp Search.          (line   5)
* 可変個数の引数:               Variable Number of Arguments.  (line   5)
* リスト内の空白:               Whitespace in Lists.    (line   5)
* バイトコンパイル:             Byte Compiling.         (line   5)
* テキストのカット:             Cutting & Storing Text.  (line   5)
* リストの実装方法:             List Implementation.    (line   5)
* ファイルのロード:             Loading Files.          (line   5)
* 待機なしでの再帰:             No Deferment.           (line   5)
* 引数（省略可能）:             Optional Arguments.     (line  10)
* グラフ全体の表示:             Print Whole Graph.      (line   5)
* 再帰関数の典型例:             Recursive Patterns.     (line   5)
* パターン（探索）:             Regexp Search.          (line   5)
* 移動（段落単位）:             Regexp Search.          (line   5)
* プログラムの実行:             Run a Program.          (line   5)
* 変数（値の設定）:             set & setq.             (line   5)
* 変数への値の設定:             set & setq.             (line   5)
* 引数（可変個数）:             Variable Number of Arguments.  (line   5)
* ワイドニングの例:             what-line.              (line   5)
* 関数定義の書き方:             Writing Defuns.         (line   5)
* 引数（型の誤り）:             Wrong Type of Argument.  (line   5)
* スペシャルフォーム:           Complications.          (line  11)
* カット（テキスト）:           Cutting & Storing Text.  (line   5)
* タグファイルの作成:           etags.                  (line   5)
* 内側のリストの評価:           Evaluating Inner Lists.  (line   5)
* 評価、内側のリスト:           Evaluating Inner Lists.  (line   5)
* キーバインドの解除:           Keybindings.            (line  53)
* リバインド（キー）:           Keymaps.                (line   5)
* キルリングの扱い方:           Kill Ring.              (line   5)
* `空リスト'（定義）:           Lisp Atoms.             (line  15)
* ロード（ファイル）:           Loading Files.          (line   5)
* 繰り返し（ループ）:           Loops & Recursion.      (line   5)
* 表示（グラフ全体）:           Print Whole Graph.      (line   5)
* バッファの切り替え:           Switching Buffers.      (line   5)
* リスト入力補佐機能:           Typing Lists.           (line   5)
* 引数（ローカル変数）:         Dec Example altogether.  (line  26)
* <= （小さいか等しい）:        Inc Example parts.      (line  37)
* グローバルなキー設定:         Keybindings.            (line  18)
* インタープリタの動作:         Lisp Interpreter.       (line   5)
* 読み出し専用バッファ:         Read-only buffer.       (line   5)
* グラフのプロトタイプ:         Readying a Graph.       (line   5)
* シンタックスカテゴリ:         Syntax.                 (line   5)
* シンタックステーブル:         Syntax.                 (line   5)
* タグファイルを作成する:       etags.                  (line  71)
* 関数定義のインストール:       Install.                (line   5)
* キー設定（グローバル）:       Keybindings.            (line  18)
* シンボリック式（紹介）:       Lisp Atoms.             (line  21)
* エラーメッセージの生成:       Making Errors.          (line   5)
* プロトタイプ（グラフ）:       Readying a Graph.       (line   5)
* 再帰（単語の数え上げ）:       recursive-count-words.  (line   5)
* 単語の数え上げ（再帰）:       recursive-count-words.  (line   5)
* * 読み出し専用バッファ用:     Read-only buffer.       (line   5)
* デバッガ（ソースレベル）:     edebug.                 (line   5)
* 繰り返し（単語の数え上げ）:   Counting Words.         (line   5)
* 正規表現（単語の数え上げ）:   Counting Words.         (line   5)
* 単語の数え上げ（繰り返し）:   Counting Words.         (line   5)
* コードの恒久的インストール:   Permanent Installation.  (line   5)
* バッファごとのローカル変数:   Text and Auto-fill.     (line  23)
* エラー（値のないシンボル）:   Void Variable.          (line   5)
* 再帰のパターン: accumulate:   Accumulate.             (line   5)
* 再帰のパターン: every:        Every.                  (line   5)
* 再帰のパターン: keep:         Keep.                   (line   5)
* 二重引用符のあいだのテキスト: Lisp Atoms.             (line  52)
* アスタリスク（読み出し専用バッファ）: Read-only buffer.  (line   5)
* ポイント、マーク、バッファの保存: save-excursion.     (line   5)
* ローカル変数（バッファごと）: Text and Auto-fill.     (line  23)
* Accumulate, type of recursive pattern: Accumulate.    (line   5)
* add-hook:                     Text and Auto-fill.     (line  53)
* and:                          fwd-para let.           (line  34)
* and:                          kill-new function.      (line 169)
* and, introduced:              kill-new function.      (line 169)
* Anonymous function:           lambda.                 (line   5)
* append-to-buffer:             append-to-buffer.       (line   5)
* apply:                        Columns of a graph.     (line 118)
* apropos:                      Columns of a graph.     (line  31)
* `引数（argument）'（定義）:   Arguments.              (line  14)
* `引数リスト（argument list）'（定義）: defun.         (line  51)
* Auto Fillモード:              Text and Auto-fill.     (line  53)
* モード（Auto Fill）:          Text and Auto-fill.     (line  53)
* autoload:                     Autoload.               (line   5)
* beginning-of-buffer:          beginning-of-buffer.    (line   5)
* `束縛（bind）'（定義）:       set & setq.             (line   6)
* `本体（body）'（定義）:       defun.                  (line  37)
* buffer-file-name:             Buffer Names.           (line   5)
* buffer-menu, バインド:        Keybindings.            (line  64)
* buffer-name:                  Buffer Names.           (line   5)
* Building robots:              Building Robots.        (line   5)
* Cへ回り道:                    Digression into C.      (line   5)
* C, a digression into:         Digression into C.      (line   5)
* `呼び出し（call）'（定義）:   Switching Buffers.      (line  58)
* cancel-debug-on-entry:        debug-on-entry.         (line  83)
* car, 紹介:                    car cdr & cons.         (line   5)
* cdr, 紹介:                    car cdr & cons.         (line   5)
* Chest of Drawers, metaphor for a symbol: Symbols as Chest.  (line   5)
* `コマンド（command）'（定義）: How to Evaluate.       (line  10)
* Common Lisp:                  Lisp History.           (line  10)
* compare-windows:              Keybindings.            (line  11)
* concat:                       Data types.             (line  10)
* cond:                         Recursion with cond.    (line   5)
* Conditional 'twixt two versions of Emacs: Simple Extension.  (line  35)
* condition-case:               condition-case.         (line   5)
* cons, 紹介:                   cons.                   (line   5)
* cons, example:                kill-new function.      (line  89)
* copy-region-as-kill:          copy-region-as-kill.    (line   5)
* copy-to-buffer:               copy-to-buffer.         (line   5)
* count-words-in-defun:         count-words-in-defun.   (line  84)
* count-words-region:           count-words-region.     (line   5)
* current-buffer:               Getting Buffers.        (line   5)
* debug:                        debug.                  (line   5)
* `(debug)'（コード内）:        debug-on-quit.          (line  12)
* debug-on-entry:               debug-on-entry.         (line   5)
* debug-on-quit:                debug-on-quit.          (line   9)
* `default.el'初期化ファイル:   Site-wide Init.         (line   6)
* 初期化ファイル（`default.el'）: Site-wide Init.       (line   6)
* default-mode-line-format:     Mode Line.              (line   5)
* defcustom:                    defcustom.              (line   5)
* Deferment in recursion:       No Deferment.           (line   5)
* Defermentless solution:       No deferment solution.  (line   5)
* defun:                        defun.                  (line   5)
* defun内の単語とシンボル:      Words and Symbols.      (line   5)
* `defun'内の単語の数え上げ:    count-words-in-defun.   (line   5)
* `defun'スペシャルフォーム:    defun.                  (line   5)
* `defun'内の単語の数え上げ:    Words in a defun.       (line   5)
* 単語の数え上げ（`defun'）:    Words in a defun.       (line   5)
* defvar:                       defvar.                 (line   5)
* defvar for a user customizable variable: defvar and asterisk.  (line   5)
* defvar with an asterisk:      defvar and asterisk.    (line   5)
* delete-and-extract-region:    delete-and-extract-region.  (line   5)
* delete-and-extract-region:    Digression into C.      (line   5)
* describe-function:            simplified-beginning-of-buffer.  (line  71)
* describe-function, 紹介:      Finding More.           (line   6)
* Digression into C:            Digression into C.      (line   5)
* directory-files:              Files List.             (line  13)
* dolist:                       dolist.                 (line   5)
* dotimes:                      dotimes.                (line   5)
* Drawers, Chest of, metaphor for a symbol: Symbols as Chest.  (line   5)
* edebug:                       edebug.                 (line   5)
* edit-options:                 defvar and asterisk.    (line  24)
* Else:                         else.                   (line   5)
* `.emacs'ファイル:             Beginning a .emacs File.  (line   5)
* `.emacs'ファイル:             Emacs Initialization.   (line   5)
* Emacsのソースのタグ:          etags.                  (line  71)
* Emacs のバージョンを選択:     Simple Extension.       (line  35)
* Emacs のソースのタグテーブルを作る: etags.            (line  71)
* `.emacs'ファイルのカスタマイズ: Emacs Initialization.  (line   5)
* カスタマイズ（`.emacs'ファイル）: Emacs Initialization.  (line   5)
* Emacs Lispの真偽値:           Truth & Falsehood.      (line   5)
* `.emacs'ファイル（簡単な拡張）: Simple Extension.     (line   5)
* Emacs version, choosing:      Simple Extension.       (line  35)
* `empty string' defined:       Review.                 (line 142)
* eobp:                         fwd-para between paragraphs.  (line  12)
* eq:                           Review.                 (line 107)
* eq （使用例）:                last-command & this-command.  (line  26)
* equal:                        Review.                 (line 107)
* error:                        rotate-yk-ptr body.     (line  15)
* Error for symbol without function: Void Function.     (line   5)
* etags:                        etags.                  (line   5)
* `評価（evaluate）'（定義）:   Run a Program.          (line   6)
* Every, type of recursive pattern: Every.              (line   5)
* Example variable, `fill-column': fill-column Example.  (line   6)
* `式（expression）'（定義）:   Lisp Atoms.             (line  21)
* FDL, GNU Free Documentation License: GNU Free Documentation License.  (line   6)
* files-in-below-directory:     Files List.             (line  24)
* fill-column, an example variable: fill-column Example.  (line   6)
* find-tags:                    Finding More.           (line  33)
* Flowers in a field:           Lisp Lists.             (line  17)
* `フォーム（form）'（定義）:   Lisp Atoms.             (line  21)
* forward-paragraph:            forward-paragraph.      (line   5)
* forward-sentence:             forward-sentence.       (line   5)
* `関数（function）'（定義）:   Making Errors.          (line  97)
* `function' defined:           Making Errors.          (line  47)
* `function' defined:           Making Errors.          (line  71)
* `関数定義（function definition）'（定義）: defun.     (line   6)
* global-set-key:               Keybindings.            (line  18)
* global-unset-key:             Keybindings.            (line  53)
* graph-body-print:             graph-body-print.       (line   5)
* graph-body-print 最終版:      The final version.      (line  52)
* if:                           if.                     (line   5)
* `if'による判定:               if.                     (line   5)
* `判定条件（if-part）'（定義）: if in more detail.     (line   6)
* indent-tabs-mode:             Indent Tabs Mode.       (line   5)
* insert-buffer:                insert-buffer.          (line   5)
* insert-buffer-substring:      append-to-buffer overview.  (line   6)
* interactive:                  Interactive.            (line   5)
* interactive, 使用例:          insert-buffer interactive.  (line   5)
* `interactive'のオプション:    Interactive Options.    (line   5)
* `対話的関数（interactive function）'（定義）: How to Evaluate.  (line  10)
* Keep, type of recursive pattern: Keep.                (line   5)
* kill-append:                  kill-append function.   (line   5)
* kill-new:                     kill-new function.      (line   5)
* kill-region:                  kill-region.            (line   5)
* lambda:                       lambda.                 (line   5)
* length:                       length.                 (line   5)
* lengths-list-file:            lengths-list-file.      (line  10)
* lengths-list-many-files:      lengths-list-many-files.  (line  25)
* let:                          let.                    (line   5)
* `let'式の例:                  Sample let Expression.  (line   5)
* `let'式の構造:                Parts of let Expression.  (line   5)
* `let'式の非初期化変数:        Uninitialized let Variables.  (line   5)
* line-to-top-of-window:        Simple Extension.       (line   5)
* Lispの歴史:                   Lisp History.           (line   5)
* Lispインタープリタの動作:     Lisp Interpreter.       (line   5)
* Lispインタープリタ（説明）:   Run a Program.          (line  35)
* Lisp macro:                   delete-and-extract-region.  (line  42)
* list-buffers, リバインド:     Keybindings.            (line  64)
* load-library:                 Loading Files.          (line  53)
* load-path:                    Loading Files.          (line  38)
* `local variable' defined:     Prevent confusion.      (line   6)
* looking-at:                   fwd-para between paragraphs.  (line  12)
* Maclisp:                      Lisp History.           (line  10)
* Macro, lisp:                  delete-and-extract-region.  (line  42)
* make tags:                    etags.                  (line  71)
* make-string:                  Y Axis Element.         (line  67)
* mapcar:                       mapcar.                 (line   5)
* mark:                         save-excursion.         (line   5)
* mark-whole-buffer:            mark-whole-buffer.      (line   5)
* match-beginning:              fwd-para no fill prefix.  (line  32)
* max:                          Columns of a graph.     (line 108)
* message:                      message.                (line   5)
* min:                          Columns of a graph.     (line 108)
* `ナロイング（narrowing）'（定義）: Buffer Size & Locations.  (line  38)
* nil:                          Truth & Falsehood.      (line   5)
* `nil'、単語の歴史:            Buffer Names.           (line  65)
* No deferment solution:        No deferment solution.  (line   5)
* nreverse:                     Counting function definitions.  (line  85)
* nth:                          nth.                    (line   5)
* nthcdr:                       copy-region-as-kill.    (line   5)
* nthcdr:                       nthcdr.                 (line   5)
* nthcdr, example:              kill-new function.      (line 122)
* number-to-string:             Y Axis Element.         (line  13)
* occur:                        Keybindings.            (line  49)
* optional:                     Optional Arguments.     (line  10)
* or:                           Insert or.              (line  11)
* other-buffer:                 Getting Buffers.        (line   5)
* Parts of a Recursive Definition: Recursive Definition Parts.  (line   8)
* point:                        save-excursion.         (line   5)
* `ポイント（point）'（定義）:  Buffer Size & Locations.  (line  19)
* print-elements-of-list:       print-elements-of-list.  (line   5)
* print-elements-recursively:   Recursion with list.    (line  21)
* print-graph 最終版:           The final version.      (line  74)
* `print-graph'の変数リスト:    print-graph Varlist.    (line   5)
* print-X-axis:                 X Axis Tic Marks.       (line 141)
* print-X-axis-numbered-line:   X Axis Tic Marks.       (line 112)
* print-X-axis-tic-line:        X Axis Tic Marks.       (line  80)
* print-Y-axis:                 print-Y-axis Penultimate.  (line   9)
* prog1:                        fwd-para between paragraphs.  (line  12)
* progn:                        progn.                  (line   8)
* Recursion without Deferments: No Deferment.           (line   5)
* Recursive Definition Parts:   Recursive Definition Parts.  (line   8)
* Recursive pattern: accumulate: Accumulate.            (line   5)
* Recursive pattern: every:     Every.                  (line   5)
* Recursive pattern: keep:      Keep.                   (line   5)
* Recursive Patterns:           Recursive Patterns.     (line   5)
* recursive-count-words:        recursive-count-words.  (line 225)
* recursive-graph-body-print:   recursive-graph-body-print.  (line   5)
* recursive-lengths-list-many-files: Several files recursively.  (line  16)
* regexp-quote:                 fwd-para let.           (line  57)
* re-search-forward:            re-search-forward.      (line   5)
* reverse:                      Counting function definitions.  (line  99)
* Robots, building:             Building Robots.        (line   5)
* rotate-yank-pointer:          rotate-yank-pointer.    (line   5)
* save-excursion:               save-excursion.         (line   5)
* save-restriction:             save-restriction.       (line   5)
* `*scratch*'バッファ:          print-elements-of-list.  (line   8)
* search-forward:               search-forward.         (line   5)
* sentence-end:                 sentence-end.           (line   5)
* set:                          Using set.              (line   5)
* set-buffer:                   Switching Buffers.      (line   5)
* setcar:                       setcar.                 (line   5)
* setcdr:                       setcdr.                 (line   5)
* setcdr, example:              kill-new function.      (line 126)
* setq:                         Using setq.             (line   5)
* `副作用（side effect）'（定義）: Evaluation.          (line  19)
* simplified-beginning-of-buffer: simplified-beginning-of-buffer.  (line   5)
* `site-init.el'初期化ファイル: Site-wide Init.         (line   6)
* 初期化ファイル（`site-init.el'）: Site-wide Init.     (line   6)
* `site-load.el'初期化ファイル: Site-wide Init.         (line   6)
* Solution without deferment:   No deferment solution.  (line   5)
* sort:                         Sorting.                (line   5)
* `文字列（string）'（定義）:   Lisp Atoms.             (line  55)
* switch-to-buffer:             Switching Buffers.      (line   5)
* Symbol without function error: Void Function.         (line   5)
* Symbols as a Chest of Drawers: Symbols as Chest.      (line   5)
* `TAGS'ファイルの作成:         etags.                  (line   5)
* Tags in the Emacs sources:    etags.                  (line  71)
* Textモード:                   Text and Auto-fill.     (line  41)
* モード（Text）:               Text and Auto-fill.     (line  41)
* Text Mode turned on:          Text and Auto-fill.     (line  41)
* `真の場合の動作（then-part）'（定義）: if in more detail.  (line   6)
* the-the:                      the-the.                (line   5)
* top-of-ranges:                Counting function definitions.  (line  16)
* triangle-bugged:              debug.                  (line  12)
* triangle-recursively:         Recursive triangle function.  (line   5)
* Variable, example of, `fill-column': fill-column Example.  (line   6)
* `変数リスト（varlist）'（定義）: Parts of let Expression.  (line   6)
* Version of Emacs, choosing:   Simple Extension.       (line  35)
* what-line:                    what-line.              (line   5)
* while:                        while.                  (line   5)
* Words, duplicated:            the-the.                (line   5)
* X軸の表示:                    print-X-axis.           (line   5)
* X-axis-element:               X Axis Tic Marks.       (line 102)
* Y軸の表示:                    print-Y-axis.           (line   5)
* yank:                         yank.                   (line   5)
* yank-pop:                     yank-pop.               (line   5)
* Y-axis-column:                Y-axis-column.          (line   9)
* Y-axis-column 最終版:         The final version.      (line  14)
* Y-axis-label-spacing:         Compute a Remainder.    (line  69)
* Y-axis-tic:                   Y Axis Element.         (line  30)
* zap-to-char:                  zap-to-char.            (line   5)
* zerop:                        rotate-yk-ptr body.     (line  15)




File: eintr-ja, Node: About the Author, Prev: GNU Free Documentation License, Up: Top

著者について
************

     Robert J. Chassellは、1985年以来GNU Emacsの仕事をしている。執筆や
     編集、EmacsとEmacs Lispを教えており、世界中でソフトウェアの自由に
     関する講演を行っている．Chassellは Free Software Foundation,
     Inc. の理事、幹事／会計でもある。彼は，Texinfo マニュアルの共著者
     であり，1ダース以上の本を執筆している．彼はイギリスのケンブリッジ
     大学を卒業した．社会史や経済史に興味を持っており、自家用飛行機を操
     縦する。

