\input texinfo.tex    @c -*-texinfo-*-
@c $Id: texinfo-ja.texi,v 1.1 2003/01/04 10:43:13 futoshi Exp $
@c Ordinarily Texinfo files have the extension .texi.  But texinfo.texi
@c clashes with texinfo.tex on 8.3 filesystems, so we use texinfo.txi.

@c Everything between the start/end of header lines will be passed by
@c Emacs's {texinfo,makeinfo}-format region commands.  See the `start of
@c header' node for more info.
@c %**start of header

@c makeinfo and texinfo.tex ignore all text before @setfilename.
@c
@c Ordinarily the setfilename argument ends with .info.  But
@c texinfo.info-13 is too long for 14-character filesystems.
@setfilename texinfo-ja.info

@c Automake automatically updates version.texi to @set VERSION and
@c @set UPDATED to appropriate values.
@include texinfo-v.texi
@settitle GNU Texinfo @value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Put everything except function (command, in this case) names in one
@c index (arbitrarily chosen to be the concept index).
@syncodeindex op cp
@syncodeindex vr cp
@syncodeindex pg cp

@footnotestyle separate
@paragraphindent 2
@c finalout

@comment %**end of header

@copying
This manual is for GNU Texinfo (version @value{VERSION}, @value{UPDATED}),
a documentation system that can produce both online information and a
printed manual from a single source.

Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* Texinfo(ja): (texinfo-ja).           The GNU documentation format.
* install-info(ja): (texinfo-ja)Invoking install-info. Update info/dir entries.
* texi2dvi(ja): (texinfo-ja)Format with texi2dvi.      Print Texinfo documents.
* texindex(ja): (texinfo-ja)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo(ja): (texinfo-ja)Invoking makeinfo.         Translate Texinfo source.
@end direntry

@c Before release, run C-u C-c C-u C-a (texinfo-all-menus-update with a
@c prefix arg).  This updates the node pointers, which texinfmt.el needs.

@c Set smallbook if printing in smallbook format so the example of the
@c smallbook font is actually written using smallbook; in bigbook, a kludge
@c is used for TeX output.  Do this through the -t option to texi2dvi,
@c so this same source can be used for other paper sizes as well.
@c smallbook
@c set smallbook
@c @@clear smallbook

@c If you like blank pages, add through texi2dvi -t.
@c setchapternewpage odd

@c Currently undocumented command, 5 December 1993:
@c nwnode          (Same as node, but no warnings; for `makeinfo'.)


@shorttitlepage Texinfo

@titlepage
@title Texinfo
@subtitle The GNU Documentation Format
@subtitle for Texinfo version @value{VERSION}, @value{UPDATED}

@author Robert J. Chassell
@author Richard M. Stallman
@c 翻訳：西尾 太

@c Include the Distribution inside the titlepage so
@c that headings are turned off.

@page
@vskip 0pt plus 1filll
@insertcopying

@sp 1
Published by the Free Software Foundation @*
59 Temple Place Suite 330 @*
Boston, MA 02111-1307 @*
USA @*
ISBN 1-882114-67-1 @c for version 4.0, September 1999.
@c ISBN 1-882114-65-5 is for version 3.12, March 1998.
@c ISBN 1-882114-64-7 is for edition 2.24 of November 1996.
@c ISBN 1-882114-63-9 is for edition 2.20 of 28 February 1995.

@sp 1
Cover art by Etienne Suvasa.
@end titlepage


@summarycontents
@contents


@ifnottex
@node Top
@top Texinfo

@insertcopying

@c The first part of this master menu lists the major nodes in this Info
@c document, including the @@-command and concept indices.  The rest of
@c the menu lists all the lower level nodes in the document.
@c 
このマスターメニューの最初の部分で，このInfoドキュメントの主なノードをリ
ストアップしていて，それには@@-コマンドと概念の索引が含まれています．メ
ニューの残りはすべて，このドキュメントの下位レベルのノードです．
@end ifnottex

@menu
* Copying Conditions::          Your rights.
* Overview::                    Texinfo in brief.
* Texinfo Mode::                How to use Texinfo mode.
* Beginning a File::            What is at the beginning of a Texinfo file?
* Ending a File::               What is at the end of a Texinfo file?
* Structuring::                 How to create chapters, sections, subsections,
                                  appendices, and other parts.
* Nodes::                       How to write nodes.
* Menus::                       How to write menus.
* Cross References::            How to write cross references.
* Marking Text::                How to mark words and phrases as code,
                                  keyboard input, meta-syntactic
                                  variables, and the like.
* Quotations and Examples::     How to write quotations, examples, etc.
* Lists and Tables::            How to write lists and tables.
* Indices::                     How to create indices.
* Insertions::                  How to insert @@-signs, braces, etc.
* Breaks::                      How to force and prevent line and page breaks.
* Definition Commands::         How to describe functions and the like
                                  in a uniform manner.
* Conditionals::                How to specify text for either @TeX{} or Info.
* Internationalization::        
* Defining New Texinfo Commands::  
* Hardcopy::                    How to convert a Texinfo file to a file
                                  for printing and how to print that file.
* Creating and Installing Info Files::  
* Command List::                All the Texinfo @@-commands.
* Tips::                        Hints on how to write a Texinfo document.
* Sample Texinfo Files::        Complete examples, including full texts.
* Include Files::               How to incorporate other Texinfo files.
* Headings::                    How to write page headings and footings.
* Catching Mistakes::           How to find formatting mistakes.
* Refilling Paragraphs::        All about paragraph refilling.
* Command Syntax::              A description of @@-Command syntax.
* Obtaining TeX::               How to Obtain @TeX{}.
* Copying This Manual::         The GNU Free Documentation License.
* Command and Variable Index::  A menu containing commands and variables.
* Concept Index::               A menu covering many topics.

@detailmenu
@c  --- The Detailed Node Listing ---
@c 
 --- 詳細なノードのリスト ---

@c Overview of Texinfo
@c 
Texinfoの概要

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @@-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.

@c Using Texinfo Mode
@c 
Texinfoモードを使用する

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @@-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.

@c Updating Nodes and Menus
@c 
ノードとメニューを更新する

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.

@c Beginning a Texinfo File
@c 
Texinfoファイルを開始する

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                   have the right to use and share software.

@c Texinfo File Header
@c 
Texinfoファイルのヘッダ

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.

@c Document Permissions
@c 
ドキュメントに対する許可

* copying::                 Declare the document's copying permissions.
* insertcopying::           Where to insert the permissions.

@c Title and Copyright Pages
@c 
タイトルと著作権のページ

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The @code{@@titlefont}, @code{@@center},
                                 and @code{@@sp} commands.
* title subtitle author::       The @code{@@title}, @code{@@subtitle},
                                 and @code{@@author} commands.
* Copyright::                   How to write the copyright notice and
                                 include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                 copyright pages.
* headings on off::             An option for turning headings on and off
                                 and double or single sided printing.

@c The `Top' Node and Master Menu
@c 
`Top'ノードとマスターメニュー

* Top Node Example::            
* Master Menu Parts::           

@c Global Document Commands
@c 
大域的なドキュメントコマンド

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* exampleindent::               Specify environment indentation.

@c Ending a Texinfo File
@c 
Texinfoファイルを終える

* Printing Indices & Menus::    How to print an index in hardcopy and
                                 generate index menus in Info.
* Contents::                    How to create a table of contents.
* File End::                    How to mark the end of a file.

@c Chapter Structuring
@c 
章の構造

* Tree Structuring::            A manual is like an upside down tree @dots{}
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The @code{@@top} command, part of the `Top' node.
* chapter::                     
* unnumbered & appendix::       
* majorheading & chapheading::  
* section::                     
* unnumberedsec appendixsec heading::  
* subsection::                  
* unnumberedsubsec appendixsubsec subheading::  
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.

@c Nodes
@c 
ノード

* Two Paths::                   Different commands to structure
                                 Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.

@c The @code{@@node} Command
@c 
@code{@@node}コマンド

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an @code{@@node} line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @@-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the @code{@@top} command.

@c Menus
@c 
メニュー

* Menu Location::               Put a menu in a short node.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.

@c Cross References
@c 
相互参照

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' @dots{}
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.

@code{@@xref}

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                @code{@@xref} with one argument.
* Two Arguments::               @code{@@xref} with two arguments.
* Three Arguments::             @code{@@xref} with three arguments.
* Four and Five Arguments::     @code{@@xref} with four and five arguments.

@c Marking Words and Phrases
@c 
単語と文節に印を付ける

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.

@c Indicating Definitions, Commands, etc.
@c 
定義やコマンド等を示す

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* acronym::                     Indicating acronyms.
* url::                         Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.

@c Emphasizing Text
@c 
テキストの強調

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.

@c Quotations and Examples
@c 
引用と例

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Forms for @code{@@smallbook}.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.

@c Lists and Tables
@c 
リストと表

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.

@c Making a Two-column Table
@c 
二列の表の作成

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.

@c Multi-column Tables
@c 
複数列の表

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.

@c Indices
@c 
索引

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                 of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.

@c Combining Indices
@c 
索引の統合

* syncodeindex::                How to merge two indices, using @code{@@code}
                                 font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                 default font of the merged-to index.

@c Special Insertions
@c 
特別な挿入

* Braces Atsigns::              How to insert braces, @samp{@@}.
* Inserting Space::             How to insert the right amount of space
                                 within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the @TeX{} logo
                                 and the copyright symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                 expansion of macros, errors, etc.
* Footnotes::                   How to include footnotes.
* Images::                      How to include graphics.

@c Inserting @@ and Braces
@c 
@@とカッコの挿入

* Inserting An Atsign::         How to insert @samp{@@}.
* Inserting Braces::            How to insert @samp{@{} and @samp{@}}.

@c Inserting Space
@c 
スペースの挿入

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.

@c Inserting Ellipsis and Bullets
@c 
省略と黒点の挿入

* dots::                        How to insert dots @dots{}
* bullet::                      How to insert a bullet.

@c Inserting @TeX{} and the Copyright Symbol
@c 
@TeX{}と著作権シンボルの挿入

* tex::                         How to insert the @TeX{} logo.
* copyright symbol::            How to use @code{@@copyright@{@}}.

@c Glyphs for Examples
@c 
例のためのglyph

* Glyphs Summary::              
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.

@c Glyphs Summary
@c 
glyphの概要

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::

@c Footnotes
@c 
脚注

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.

@c Making and Preventing Breaks
@c 
改行，改ページの作成と阻止

* Break Commands::              Summary of break-related commands.
* Line Breaks::                 Forcing line breaks.
* - and hyphenation::           Helping @TeX{} with hyphenation points.
* w::                           Preventing unwanted line breaks in text.
* tie::                         Inserting an unbreakable but varying space.
* sp::                          Inserting blank lines.
* page::                        Forcing the start of a new page.
* group::                       Preventing unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.

@c Definition Commands
@c 
定義コマンド

* Def Cmd Template::            How to structure a description using a
                                 definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::  

@c The Definition Commands
@c 
定義コマンド

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.

@c Conditionally Visible Text
@c 
表示されるテキストの条件

* Conditional Commands::        Specifying text for HTML, Info, or @TeX{}.
* Conditional Not Commands::    Specifying text for not HTML, Info, or @TeX{}.
* Raw Formatter Commands::      Using raw @TeX{} or HTML commands.
* set clear value::             Designating which text to format (for
                                 all output formats); and how to set a
                                 flag to a string that you can insert.

@c @code{@@set}, @code{@@clear}, and @code{@@value}
@c 
@code{@@set}，@code{@@clear}，そして@code{@@value}

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.

@c Internationalization
@c 
国際化

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.

@c Defining New Texinfo Commands
@c 
新しいTexinfoコマンドの定義

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.

@c Formatting and Printing Hardcopy
@c 
ハードコピーの書式化と印刷

* Use TeX::                     Use @TeX{} to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        @TeX{} formatting requirements summary.
* Preparing for TeX::           What to do before you use @TeX{}.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                               of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.

@c Creating and Installing Info Files
@c 
Infoファイルの作成とインストール

* Creating an Info File::       
* Installing an Info File::     

@c Creating an Info File
@c 
Infoファイルの作成

* makeinfo advantages::         @code{makeinfo} provides better error checking.
* Invoking makeinfo::           How to run @code{makeinfo} from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run @code{makeinfo} from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to @code{makeinfo}.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.
* makeinfo html::               Generating HTML output.

@c Installing an Info File
@c 
Infoファイルのインストール

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking install-info::       @code{install-info} options.

@c Sample Texinfo Files
@c 
Texinfoファイルの見本

* Short Sample Texinfo File::   
* GNU Sample Texts::            
* Verbatim Copying License::            
* All-permissive Copying License::            

@c Include Files
@c 
インクルードファイル

* Using Include Files::         How to use the @code{@@include} command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                 menus when using included files.
* Include File Requirements::   What @code{texinfo-multiple-files-update} expects.
* Sample Include File::         A sample outer file with included files
                                 within it; and a sample included file.
* Include Files Evolution::     How use of the @code{@@include} command
                                 has changed over time.

@c Page Headings
@c 
ページ見出し

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.

@c Formatting Mistakes
@c 
書式化の失敗

* makeinfo Preferred::          @code{makeinfo} finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with @TeX{} formatting.
* Using texinfo-show-structure::  How to use @code{texinfo-show-structure}.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.

@c Finding Badly Referenced Nodes
@c 
悪いノード参照を見つける

* Using Info-validate::         How to run @code{Info-validate}.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.

@c Copying This Manual
@c 
このマニュアルのコピーについて

* GNU Free Documentation License::  License for copying this manual.

@end detailmenu
@end menu

@c Reward readers for getting to the end of the menu :).
@c Contributed by Arnold Robbins.
@quotation
@c Documentation is like sex: when it is good, it is very, very good; and
@c when it is bad, it is better than nothing.
@c ---Dick Brandon
@c 
ドキュメントはSexに似ていて，いいときはとってもいいし，ダメなときは何も
しないのと一緒だね．
---Dick Brandon
@end quotation


@node Copying Conditions
@c @unnumbered Texinfo Copying Conditions
@unnumbered Texinfoのコピー条件
@cindex Copying conditions
@cindex Conditions for copying Texinfo

@c The programs currently being distributed that relate to Texinfo include
@c @code{makeinfo}, @code{info}, @code{texindex}, and @file{texinfo.tex}.
@c These programs are @dfn{free}; this means that everyone is free to use
@c them and free to redistribute them on a free basis.  The Texinfo-related
@c programs are not in the public domain; they are copyrighted and there
@c are restrictions on their distribution, but these restrictions are
@c designed to permit everything that a good cooperating citizen would want
@c to do.  What is not allowed is to try to prevent others from further
@c sharing any version of these programs that they might get from you.
@c 
Texinfoに関連する，現在配布されているプログラムには，@code{makeinfo}，
@code{info}，@code{texindex}，そして@file{texinfo.tex}が含まれています．
これらのプログラムは@dfn{フリー(free)}です．これは，誰でも自由に使用し，
自由を基本として自由に再配布できるということを意味します．Texinfo関連の
プログラムはパブリックドメインではありません．著作権があり配布に関して制
限がありますが，これらの制限は，良心的で協力的な市民が望むものを全て認め
るよう設計されています．許可されないことは，あなたから得たこれらのプログ
ラムのあらゆるバージョンを，他の人が共有することの妨害を試みることです．

@c Specifically, we want to make sure that you have the right to give away
@c copies of the programs that relate to Texinfo, that you receive source
@c code or else can get it if you want it, that you can change these
@c programs or use pieces of them in new free programs, and that you know
@c you can do these things.
@c 
具体的には，我々はTexinfoに関連するプログラムのコピーを与える権利をあな
たが持っていることを確かめたいと思っていて，それらの権利とは，あなたがソー
スコードを受け取るか，欲しい場合は入手可能だということ，これらのプログラ
ムを変更したり新しいフリーのプログラムにその一部を使用したりできること，
そして，これらのことを知っているということです．

@c To make sure that everyone has such rights, we have to forbid you to
@c deprive anyone else of these rights.  For example, if you distribute
@c copies of the Texinfo related programs, you must give the recipients all
@c the rights that you have.  You must make sure that they, too, receive or
@c can get the source code.  And you must tell them their rights.
@c 
皆がそのような権利を持っていることを確認するため，我々は，あなたが他の誰
かから権利を奪うことを禁止する必要があります．例えば，あなたがTexinfoに
関連するプログラムを配布する場合，あなたは，あなたが持つ全ての権利を与え
る必要があります．そして，ソースコードを受け取る，または得られることを確
かめる必要があります．そして，権利について教える必要があります．

@c Also, for our own protection, we must make certain that everyone finds
@c out that there is no warranty for the programs that relate to Texinfo.
@c If these programs are modified by someone else and passed on, we want
@c their recipients to know that what they have is not what we distributed,
@c so that any problems introduced by others will not reflect on our
@c reputation.
@c 
また我々自身を守るため，Texinfoに関連するプログラムに対し保証が無いとい
うことを全ての人が理解することを確実にする必要があります．プログラムが誰
かに編集されて渡された場合，受け取ったものが我々が配布したものではないの
で，他人が招いたあらゆる問題が我々の判断の影響を受けていないことを受け取っ
た人が知っていて欲しいと思います．

@c The precise conditions of the licenses for the programs currently being
@c distributed that relate to Texinfo are found in the General Public
@c Licenses that accompany them.  This manual specifically is covered by
@c the GNU Free Documentation License (@pxref{GNU Free Documentation
@c License}).
@c 
Texinfoに関連する，現在配布されているプログラムに対するライセンスの正確
な状態は，一緒に配布されるGeneral Public Licensesで見つかります．このマ
ニュアルは，特にGNU Free Documentation Licenseでカバーされています
(@pxref{GNU Free Documentation License})．


@node Overview
@c @chapter Overview of Texinfo
@chapter Texinfoの概要
@cindex Overview of Texinfo
@cindex Texinfo overview

@c @dfn{Texinfo}@footnote{The first syllable of ``Texinfo'' is pronounced
@c like ``speck'', not ``hex''.  This odd pronunciation is derived from,
@c but is not the same as, the pronunciation of @TeX{}.  In the word
@c @TeX{}, the @samp{X} is actually the Greek letter ``chi'' rather than
@c the English letter ``ex''.  Pronounce @TeX{} as if the @samp{X} were the
@c last sound in the name `Bach'; but pronounce Texinfo as if the @samp{x}
@c were a `k'.  Spell ``Texinfo'' with a capital ``T'' and the other
@c letters in lower case.}  is a documentation system that uses a single
@c source file to produce both online information and printed output.  This
@c means that instead of writing two different documents, one for the
@c online information and the other for a printed work, you need write only
@c one document.  Therefore, when the work is revised, you need revise only
@c that one document.
@c 
@dfn{Texinfo}@footnote{``Texinfo''の最初の音節は，``hex''ではなく，
``speck''のように発音します．この奇妙な発音は@TeX{}の発音が由来ですが，
同じではありません．実際には，単語@TeX{}の@samp{X}は英文字``ex''ではなく
ギリシャ文字``chi''となります．@TeX{}の@samp{X}は名前の`Bach'の最後の音
のように発音してください．しかし，Texinfoは@samp{x}を`k'のように発音して
ください．``Texinfo''を大文字``T''とそれ以外は小文字で綴ってください．} 
は，オンラインの情報と印刷物の両方を作成するため，単一ファイルを用いたド
キュメントシステムです．これは，一つをオンライン情報，もう一つを印刷物，
といった異なる二つのドキュメントを書く代わりに，一つのドキュメントを書く
だけで良いということを意味します．それゆえ，ワークが修正されたとき，一つ
のドキュメントだけを修正するだけですみます．

@menu
* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @@-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.
@end menu


@node Reporting Bugs
@c @section Reporting Bugs
@section バグの報告

@cindex Bugs, reporting
@cindex Suggestions for Texinfo, making
@cindex Reporting bugs
@c We welcome bug reports and suggestions for any aspect of the Texinfo system,
@c programs, documentation, installation, anything.  Please email them to
@c @email{bug-texinfo@@gnu.org}.  You can get the latest version of Texinfo
@c from @uref{ftp://ftp.gnu.org/gnu/texinfo/} and its mirrors worldwide.
@c 
我々は，Texinfoシステム，プログラム，ドキュメント，インストール，その他
あらゆる面で，バグの報告と提案を歓迎します．それらを電子メールで，
@email{bug-texinfo@@gnu.org}に送ってください．Texinfoの最新バージョンは，
@uref{ftp://ftp.gnu.org/gnu/texinfo/}と世界中のミラーサイトで入手可能で
す．

@cindex Checklist for bug reports
@c For bug reports, please include enough information for the maintainers
@c to reproduce the problem.  Generally speaking, that means:
@c 
管理者が問題を再現するため，バグの報告に十分な情報を含めてください．一般
的に言って以下を意味します．

@itemize @bullet
@c @item the version number of Texinfo and the program(s) or manual(s) involved.
@c @item hardware and operating system names and versions.
@c @item the contents of any input files necessary to reproduce the bug.
@c @item a description of the problem and samples of any erroneous output.
@c @item any unusual options you gave to @command{configure}.
@c @item anything else that you think would be helpful.
@c 
@item Texinfoのバージョンナンバーと一緒に配布されるプログラムやマニュアル．
@item ハードウェアとオペレーティングシステムの名前とバージョン．
@item バグの再現に必要な入力ファイルの内容．
@item 問題の記述とエラー出力のサンプル．
@item @command{configure}に与えた普通ではないオプション．
@item その他，役に立ちそうなもの．
@end itemize

@c When in doubt whether something is needed or not, include it.  It's
@c better to include too much than to leave out something important.
@c 
必要かどうか疑わしい場合はそれを含めてください．重要なものを除くより多く
を含める方が良いでしょう．

@cindex Patches, contributing
@c Patches are most welcome; if possible, please make them with
@c @samp{@w{diff -c}} (@pxref{Top,, Overview, diffutils, Comparing and
@c Merging Files}) and include @file{ChangeLog} entries (@pxref{Change
@c Log,,, emacs, The GNU Emacs Manual}).
@c 
パッチは最も歓迎しますが，できれば@samp{@w{diff -c}}(@pxref{Top,,
Overview, diffutils, Comparing and Merging Files})で作成し，
@file{ChangeLog}の項目(@pxref{Change Log,,, emacs, The GNU Emacs
Manual})を含めてください．

@c When sending patches, if possible please do not encode or split them in
@c any way; it's much easier to deal with one plain text message, however
@c large, than many small ones.  @uref{ftp://ftp.gnu.org/gnu/sharutils/,
@c GNU shar} is a convenient way of packaging multiple and/or binary files
@c for email.
@c 
パッチを送るとき，可能であればメッセージを符号化したり分割したりしないで
ください．たとえ大きくても，小さいものがたくさんあるより，一つのプレーン
テキストになっている方が簡単に扱えます．
@uref{ftp://ftp.gnu.org/gnu/sharutils/, GNU shar}は，電子メールで複数の
バイナリファイルをまとめる便利な方法です．

@node Using Texinfo
@c @section Using Texinfo
@section Texinfoを使用する

@cindex Using Texinfo in general
@cindex Texinfo, introduction to
@cindex Introduction to Texinfo

@c Using Texinfo, you can create a printed document with the normal
@c features of a book, including chapters, sections, cross references, and
@c indices.  From the same Texinfo source file, you can create a
@c menu-driven, online Info file with nodes, menus, cross references, and
@c indices.  You can also create from that same source file an HTML output
@c file suitable for use with a web browser, or an XML file.  @cite{The GNU
@c Emacs Manual} is a good example of a Texinfo file, as is this manual.
@c 
Texinfoを使用し，普通の本のような形態の印刷ドキュメントの作成が可能で，
それは，章，セクション，相互参照，そして索引が含まれます．同じTexinfoの
ソースファイルから，ノード，メニュー，相互参照，そして索引を用いた，メ
ニュー駆動形式のオンラインInfoファイルを作成することが可能です．また，同
じソースファイルから，ウェブブラウザの利用に適したHTML出力ファイルやXML 
ファイルを作成することも可能です．@cite{The GNU Emacs Manual}は，このマ
ニュアル同様，Texinfo ファイルの良い例です．

@c To make a printed document, you process a Texinfo source file with the
@c @TeX{} typesetting program (but the Texinfo language is very different
@c and much stricter than @TeX{}'s usual language, plain @TeX{}).  This
@c creates a DVI file that you can typeset and print as a book or report
@c (@pxref{Hardcopy}).
@c 
印刷ドキュメントを作成するTexinfoソースファイルを，@TeX{}植字プログラム
を使用して処理します(しかし，Texinfo言語は@TeX{}の普通の言語のプレーン
@TeX{}と比べてかなり異なっていて，より厳密になっています)．これは，本や
レポートのように植字して印刷することが可能なDVIファイルを作成します
(@pxref{Hardcopy})．

@pindex makeinfo
@c To output an Info file, process your Texinfo source with the
@c @code{makeinfo} utility or Emacs's @code{texinfo-format-buffer} command.
@c You can install the result in your Info tree (@pxref{Installing an Info
@c File}).
@c 
Infoファイルを出力するため，Texinfoソースファイルを，@code{makeinfo}ユー
ティリティか，Emacsの@code{texinfo-format-buffer}コマンドで処理してくだ
さい．結果をInfoツリーにインストールすることが可能です(@pxref{Installing
an Info File})．

@c To output an HTML file, run @code{makeinfo --html} on your Texinfo
@c source.  You can (for example) install the result on your web site.
@c 
HTMLファイルを出力するために，Texinfoソースファイルで@code{makeinfo
--html}を実行してください．(例えば)結果をウェブサイトに配置することが可
能です．

@cindex Docbook, converting to Texinfo
@cindex Conversion, from Docbook to Texinfo
@c To output an XML file, run @code{makeinfo --xml} on your Texinfo source.
@c To output DocBook (a particular form of XML), run @code{makeinfo
@c --docbook}.  If you want to convert from Docbook @emph{to} Texinfo,
@c please see @uref{http://docbook2X.sourceforge.net/}.
@c 
XMLファイルを出力するために，Texinfoソースファイルで@code{makeinfo
--xml}を実行してください．DocBook(XMLの特殊な形式)を出力するために，
@code{makeinfo --docbook}を実行してください．DocbookからTexinfo@emph{に} 
変換したい場合は，@uref{http://docbook2X.sourceforge.net/}を参照してくだ
さい．

@cindex Output formats, supporting more
@cindex SGML-tools output format
@c If you are a programmer and would like to contribute to the GNU project
@c by implementing additional output formats for Texinfo, that would be
@c excellent.  But please do not write a separate translator texi2foo for
@c your favorite format foo!  That is the hard way to do the job, and makes
@c extra work in subsequent maintenance, since the Texinfo language is
@c continually being enhanced and updated.  Instead, the best approach is
@c modify @code{makeinfo} to generate the new format, as it does now for
@c Info, plain text, HTML, XML, and DocBook.
@c 
もしあなたがプログラマで，Texinfoに対する出力フォーマットの追加項目を実
装し，GNU プロジェクトに貢献したいというのは素晴らしいことです．しかし，
好みのフォーマットfooのに対して個別に書かれている変換フィルタ
@code{texi2foo}を書かないでください！ そうすることで，その作業を行なうの
も困難ですが，その後のメンテナンスで余分な仕事が発生します．なぜなら，
Texinfo言語は拡張と更新が続いているためです．その代わりの最善のアプロー
チは，@code{makeinfo}を，現在Info，プレーンテキスト，HTML，XML，そして
DocBook を生成しているように，新しいフォーマットを生成するよう修正するこ
とです．

@c @TeX{} works with virtually all printers; Info works with virtually all
@c computer terminals; the HTML output works with virtually all web
@c browsers.  Thus Texinfo can be used by almost any computer user.
@c 
@TeX{}は，ほとんど全てのプリンタで動作します．Infoは，ほとんど全てのコン
ピュータ端末で動作します．HTML出力はほとんど全てのブラウザで動作します．
このため，Texinfoはほとんどの全てのコンピュータユーザが利用可能です．

@cindex Source file
@c A Texinfo source file is a plain @sc{ascii} file containing text and
@c @dfn{@@-commands} (words preceded by an @samp{@@}) that tell the
@c typesetting and formatting programs what to do.  You may edit a Texinfo
@c file with any text editor; but it is especially convenient to use GNU
@c Emacs since that editor has a special mode, called Texinfo mode, that
@c provides various Texinfo-related features.  (@xref{Texinfo Mode}.)
@c 
Texinfoソースファイルはプレーンの@sc{ascii}ファイルで，テキストと，植字
と書式化のプログラムに何を行なうのかを伝える@dfn{@@-コマンド
(@@-commands)}(@samp{@@} を前置する単語)から成り立っています．Texinfoファ
イルをテキストエディタで編集してもかまいませんが，GNU Emacsを使用すると
便利で，それはそのエディタにはTexinfoモードという特別なモードがあり，そ
れは様々なTexinfoに関する機能を提供しているためです．(@xref{Texinfo
Mode}.)

@c Before writing a Texinfo source file, you should learn about nodes,
@c menus, cross references, and the rest, for example by reading this
@c manual.
@c 
Texinfoソースファイルを書く前に，ノード，メニュー，相互参照，そしてその
他の，例えばこのマニュアルの読み方を学ぶべきです．

@c You can use Texinfo to create both online help and printed manuals;
@c moreover, Texinfo is freely redistributable.  For these reasons, Texinfo
@c is the official documentation format of the GNU project.  More
@c information is available at the @uref{http://www.gnu.org/doc/, GNU
@c documentation web page}.
@c 
オンラインヘルプと印刷マニュアルの両方を作成するため，Texinfoを使用する
ことが可能です．さらにTexinfoは自由に再配布できます．この理由のため，
TexinfoはGNUプロジェクトの公式はドキュメントフォーマットになっています．
詳細は，@uref{http://www.gnu.org/doc/, GNU documentation web page}で利用
可能です．

@cindex Man page output, not supported
@c From time to time, proposals are made to generate traditional Unix man
@c pages from Texinfo source.  This is not likely to ever be supported,
@c because man pages have a very strict conventional format.  Merely
@c enhancing @command{makeinfo} to output troff format would be
@c insufficient.  Generating a good man page therefore requires a
@c completely different source than the typical Texinfo applications of
@c writing a good user tutorial or a good reference manual.  This makes
@c generating man pages incompatible with the Texinfo design goal of not
@c having to document the same information in different ways for different
@c output formats.  You might as well just write the man page directly.
@c 
時々，伝統的なUnix manページをTexinfoから生成できるようにして欲しいと提
案されます．これはサポートされる可能性は今のところ高くはなく，それはman 
ページには非常に厳密な伝統的な書式があるためです．@command{makeinfo}を
troffフォーマットを出力するよう単に拡張するだけでは不十分です．それゆえ，
良いmanページを出力するには，良いユーザへのチュートリアルと良いリファレ
ンスマニュアルを書き出す通常のTexinfoアプリケーションと比較すると，完全
に異なるソースが必要になります．このことは，生成されたmanページが，異な
る出力形式に対し，異なる方法で，同じ情報を文章にするという，Texinfoのデ
ザインの目的に矛盾します．manページを直接書く方が良いでしょう．

@pindex help2man 
@cindex O'Dea, Brendan
@c Man pages still have their place, and if you wish to support them, the
@c program @command{help2man} may be useful; it generates a traditional man
@c page from the @samp{--help} output of a program.  In fact, this is
@c currently used to generate man pages for the Texinfo programs
@c themselves.  It is GNU software written by Brendan O'Dea, available from
@c @uref{ftp://ftp.gnu.org/gnu/help2man/}.
@c 
manページがまだ存在していてそれをサポートしたい場合，プログラム
@command{help2man}が役に立つかもしれません．それは，プログラムの
@samp{--help}出力から伝統的なmanページを生成します．これは現在，Texinfo 
プログラム自身のmanページの生成に実際に使用されています．それはGNUのソフ
トウェアで，Brendan O'Deaによって書かれていて，
@uref{ftp://ftp.gnu.org/gnu/help2man/}で利用可能です．


@node Info Files
@c @section Info Files
@section Infoファイル
@cindex Info files

@c An Info file is a Texinfo file formatted so that the Info documentation
@c reading program can operate on it.  (@code{makeinfo}
@c and @code{texinfo-format-buffer} are two commands that convert a Texinfo file
@c into an Info file.)
@c 
Infoファイルは，Infoドキュメントを読むプログラムが処理できるように書式化
されたTexinfoファイルです．(@code{makeinfo}と
@code{texinfo-format-buffer}は，TexinfoファイルをInfoファイルに変換する，
二つのコマンドです．)

@c Info files are divided into pieces called @dfn{nodes}, each of which
@c contains the discussion of one topic.  Each node has a name, and
@c contains both text for the user to read and pointers to other nodes,
@c which are identified by their names.  The Info program displays one node
@c at a time, and provides commands with which the user can move to other
@c related nodes.
@c 
Infoファイルは，@dfn{ノード(nodes)}と呼ばれる部品に分けられ，それぞれが
一つのトピックの説明を含んでいます．それぞれのノードは名前を持っていて，
ユーザが読むテキストと他のノードへポインタを含み，ノードは名前で識別され
ます．Infoプログラムは一度に一つのノードを表示し，ユーザが他の関連するノー
ドへ移動できるコマンドを提供しています．

@ifinfo
@inforef{Top, info, info}, for more information about using Info.
@end ifinfo

@c Each node of an Info file may have any number of child nodes that
@c describe subtopics of the node's topic.  The names of child
@c nodes are listed in a @dfn{menu} within the parent node; this
@c allows you to use certain Info commands to move to one of the child
@c nodes.  Generally, an Info file is organized like a book.  If a node
@c is at the logical level of a chapter, its child nodes are at the level
@c of sections; likewise, the child nodes of sections are at the level
@c of subsections.
@c 
Infoファイルのそれぞれのノードには，ノードのトピックのサブトピックを記述
している子ノードがいくつかあります．子ノードの名前は，親ノードの@dfn{メ
ニュー(menu)}でリストアップされています．これで，Infoコマンドを使用して
一つの子ノードに移動することができます．一般にInfoファイルは本のような構
成になっています．ノードが章の論理レベルの場合，子ノードはセクションレベ
ルです．同様にセクションの子ノードはサブセクションレベルです．

@c All the children of any one parent are linked together in a
@c bidirectional chain of `Next' and `Previous' pointers.  The `Next'
@c pointer provides a link to the next section, and the `Previous' pointer
@c provides a link to the previous section.  This means that all the nodes
@c that are at the level of sections within a chapter are linked together.
@c Normally the order in this chain is the same as the order of the
@c children in the parent's menu.  Each child node records the parent node
@c name as its `Up' pointer.  The last child has no `Next' pointer, and the
@c first child has the parent both as its `Previous' and as its `Up'
@c pointer.@footnote{In some documents, the first child has no `Previous'
@c pointer.  Occasionally, the last child has the node name of the next
@c following higher level node as its `Next' pointer.}
@c 
一つの親の全ての子どもは，`Next'と`Previous'で双方向に連鎖していて，お互
いにリンクされています．`Next'ポインタは次のセクションへのリンクを提供し，
`Previous'ポインタは前のセクションへのリンクを提供します．これは，章のセ
クションレベルにあるノードは，お互いにリンクされていることを意味します．
通常，連鎖の順番は親のメニューでの子の順番と同じです．それぞれの子ノード
は，親ノード名を`Up'ポインタに記録しています．最後の子ノードは`Next'ポイ
ンタが無く，最初の子ノードは`Previous'と`Up'ポインタ両方が親になります．
@footnote{ドキュメントには，最初の子に`Previous'ポインタが無いものもあり
ます．時々，最後の子が`Next'ポインタとして次の上のレベルのノード名を持つ
ものもあります．}

@c The book-like structuring of an Info file into nodes that correspond
@c to chapters, sections, and the like is a matter of convention, not a
@c requirement.  The `Up', `Previous', and `Next' pointers of a node can
@c point to any other nodes, and a menu can contain any other nodes.
@c Thus, the node structure can be any directed graph.  But it is usually
@c more comprehensible to follow a structure that corresponds to the
@c structure of chapters and sections in a printed book or report.@refill
@c 
ノードが章やセクションやそれに類するものに対応しているような，Infoファイ
ルの本のような構造は，必要条件ではなく慣習の問題です．ノードの，`Up'，
`Previous'と，`Next'ポインタは他のノードを示し，メニューは他のノードを含
んでいます．このため，ノードの構造は方向性のあるグラフにすべきです．しか
し，印刷された本やレポートの章とセクションの構造に対応した構造に準拠して
いるため，通常は，より理解しやすいでしょう．@refill

@c In addition to menus and to `Next', `Previous', and `Up' pointers, Info
@c provides pointers of another kind, called references, that can be
@c sprinkled throughout the text.  This is usually the best way to
@c represent links that do not fit a hierarchical structure.@refill
@c 
メニューと，`Next'，`Previous'，そして`Up'ポインタに加え，Infoは参照と呼
ばれるもう一つの種類のポインタを提供していて，それはテキスト中に点在して
いるはずです．これは通常，階層構造に適さないリンクを現す最善の方法です．
@refill

@c Usually, you will design a document so that its nodes match the
@c structure of chapters and sections in the printed output.  But
@c occasionally there are times when this is not right for the material
@c being discussed.  Therefore, Texinfo uses separate commands to specify
@c the node structure for the Info file and the section structure for the
@c printed output.@refill
@c 
通常，印刷された出力物の章とセクションの構造に，ノードが一致するようにド
キュメントを設計します．しかし，議論の材料に対しては正しくないときもよく
あります．そのため，TexinfoはInfoファイルに対するノード構造と，印刷され
た出力物に対するセクション構造を指定する別のコマンドを使います．@refill

@c Generally, you enter an Info file through a node that by convention is
@c named `Top'.  This node normally contains just a brief summary of the
@c file's purpose, and a large menu through which the rest of the file is
@c reached.  From this node, you can either traverse the file
@c systematically by going from node to node, or you can go to a specific
@c node listed in the main menu, or you can search the index menus and then
@c go directly to the node that has the information you want.  Alternatively,
@c with the standalone Info program, you can specify specific menu items on
@c the command line (@pxref{Top,,, info, Info}).
@c 
一般に，慣習で`Top'と命名されているノードを通じてInfoファイルに入ります．
このノードは通常，ファイルの目的の短い概要とファイルの残り全体の大きなメ
ニューを含んでいます．このノードを起点として，ノードからノードへ移動する
ことで組織的にファイルを横断したり，メインメニューに列挙されたノードを指
定して移動したり，索引メニューで検索して欲しい情報があるノードに直接行く
ことが可能になっています．また，スタンドアローンInfoプログラムで，コマン
ドラインで特定のメニューアイテムを指定することができます(@pxref{Top,,,
info-ja, Info})．

@c If you want to read through an Info file in sequence, as if it were a
@c printed manual, you can hit @key{SPC} repeatedly, or you get the whole
@c file with the advanced Info command @kbd{g *}.  (@inforef{Expert,
@c Advanced Info commands, info}.)@refill
@c 
印刷されたマニュアルのように，順番通りInfoファイルを読みたい場合，
@key{SPC}を繰り返し押したり，アドバンスInfoコマンド@kbd{g *}でファイル全
体を利用することができます．(@inforef{Expert, Advanced Info commands,
info-ja}.)@refill

@c !!! dir file may be located in one of many places:
@c     /usr/local/emacs/info            mentioned in info.c DEFAULT_INFOPATH
@c     /usr/local/lib/emacs/info        mentioned in info.c DEFAULT_INFOPATH
@c     /usr/gnu/info                    mentioned in info.c DEFAULT_INFOPATH
@c     /usr/local/info
@c     /usr/local/lib/info
@c 
@c The @file{dir} file in the @file{info} directory serves as the
@c departure point for the whole Info system.  From it, you can reach the
@c `Top' nodes of each of the documents in a complete Info system.@refill
@c 
@file{info}ディレクトリの@file{dir}ファイルは，Infoシステム全体の出発点
としての役目を果たします．そこから，完全なInfoシステムの，それぞれのドキュ
メントの`Top'ノードに行くことができます．@refill

@cindex URI syntax for Info
@c If you wish to refer to an Info file in a URI, you can use the
@c (unofficial) syntax exemplified in the following.  This works with
@c Emacs/W3, for example:
@c 
URIでInfoを参照したい場合，以下で例示された(非公式な)構文を使用すること
が可能です．これはEmacs/W3で動作します．以下が例です．
@example
info:///usr/info/emacs#Dissociated%20Press
info:emacs#Dissociated%20Press
info://localhost/usr/info/emacs#Dissociated%20Press
@end example

@c The @command{info} program itself does not follow URI's of any kind.
@c 
@command{info}プログラム自身は，あらゆる種類のURIに続きません．


@node Printed Books
@c @section Printed Books
@section 印刷された本
@cindex Printed book and manual characteristics
@cindex Manual characteristics, printed
@cindex Book characteristics, printed
@cindex Texinfo printed book characteristics
@cindex Characteristics, printed books or manuals

@cindex Knuth, Donald
@c A Texinfo file can be formatted and typeset as a printed book or manual.
@c To do this, you need @TeX{}, a powerful, sophisticated typesetting
@c program written by Donald Knuth.@footnote{You can also use the
@c 
Texinfoファイルは，印刷された本やマニュアルのように書式化し植字すること
が可能です．こうするためには@TeX{}が必要で，それは強力で洗練された植字プ
ログラムで，Donald Knuthによって書かれました．
@pindex texi2roff@r{, unsupported software}
@c @uref{ftp://tug.org/texi2roff.tar.gz, @code{texi2roff}} program if you
@c do not have @TeX{}; since Texinfo is designed for use with @TeX{},
@c @code{texi2roff} is not described here.  @code{texi2roff} is not part of
@c the standard GNU distribution and is not maintained or up-to-date with
@c all the Texinfo features described in this manual.}
@c 
@footnote{@TeX{}を持っていない場合，
@uref{ftp://tug.org/texi2roff.tar.gz, @code{texi2roff}}プログラムを使用
することも可能です．Texinfoは@TeX{}で使用するために設計されているので，
@code{texi2roff}はここでは述べません．@code{texi2roff}は，標準のGNU配布
物ではなく，このマニュアルで述べているすべてのTexinfoの機能を管理したり
更新したりしていません．}

@c A Texinfo-based book is similar to any other typeset, printed work: it
@c can have a title page, copyright page, table of contents, and preface,
@c as well as chapters, numbered or unnumbered sections and subsections,
@c page headers, cross references, footnotes, and indices.@refill
@c 
Texinfoをベースにした本は，他の植字方法での印刷物に似ています．タイトル
ページ，著作権ページ，目次，序文，章のようなもの，番号が有るまたは無いセ
クションとサブセクション，相互参照，脚注，そして索引があるはずです．
@refill

@c You can use Texinfo to write a book without ever having the intention
@c of converting it into online information.  You can use Texinfo for
@c writing a printed novel, and even to write a printed memo, although
@c this latter application is not recommended since electronic mail is so
@c much easier.@refill
@c 
オンライン情報に変換するつもりがなく，本を書くためにTexinfoを使用するこ
とが可能です．印刷された小説を書くためにTexinfoを使用することも可能で，
メモを書くこともできますが，電子メールの方がもっと簡単なので，これ以外へ
の適用は勧められません．@refill

@c @TeX{} is a general purpose typesetting program.  Texinfo provides a
@c file @file{texinfo.tex} that contains information (definitions or
@c @dfn{macros}) that @TeX{} uses when it typesets a Texinfo file.
@c (@file{texinfo.tex} tells @TeX{} how to convert the Texinfo @@-commands
@c to @TeX{} commands, which @TeX{} can then process to create the typeset
@c document.)  @file{texinfo.tex} contains the specifications for printing
@c a document.  You can get the latest version of @file{texinfo.tex} from
@c @uref{ftp://ftp.gnu.org/gnu/texinfo.tex}.
@c 
@TeX{}は，一般的な植字を目的としたプログラムです．Texinfoは，Texinfoファ
イルを植字するときに@TeX{}が使用する情報(定義と@dfn{マクロ(macros)})を含
むファイル@file{texinfo.tex}を提供しています．(@file{texinfo.tex}は，
@TeX{}にTexinfoの@@-コマンドを@TeX{}コマンドに変換する方法を伝え，そして
@TeX{}は植字ドキュメントを作成するための処理が可能となります．)
@file{texinfo.tex}は，ドキュメントを印刷するための仕様書を含んでいます．
@file{texinfo.tex}の最新バージョンは，
@uref{ftp://ftp.gnu.org/gnu/texinfo.tex}で取得できます．

@c In the United States, documents are most often printed on 8.5 inch by 11
@c inch pages (216@dmn{mm} by 280@dmn{mm}); this is the default size.  But
@c you can also print for 7 inch by 9.25 inch pages (178@dmn{mm} by
@c 235@dmn{mm}, the @code{@@smallbook} size; or on A4 or A5 size paper
@c (@code{@@afourpaper}, @code{@@afivepaper}).  (@xref{smallbook, ,
@c Printing ``Small'' Books}.  Also, see @ref{A4 Paper, ,Printing on A4
@c Paper}.)
@c 
合州国では，ドキュメントは縦横8.5インチx11インチ(216@dmn{mm}x
280@dmn{mm}がデフォルトサイズ)で印刷されることが最も多くなっています．こ
れはデフォルトの大きさです．しかし，7インチx9.25インチ
(178@dmn{mm}x235@dmn{mm}の@code{@@smallbook}サイズ)や，ヨーロッパのA4サ
イズの紙(@code{@@afourpaper})でも印刷可能です．(@xref{smallbook, ,
Printing ``Small'' Books}.  また，@ref{A4 Paper, ,Printing on A4 Paper} 
も参照してください．)

@c By changing the parameters in @file{texinfo.tex}, you can change the
@c size of the printed document.  In addition, you can change the style in
@c which the printed document is formatted; for example, you can change the
@c sizes and fonts used, the amount of indentation for each paragraph, the
@c degree to which words are hyphenated, and the like.  By changing the
@c specifications, you can make a book look dignified, old and serious, or
@c light-hearted, young and cheery.
@c 
@file{texinfo.tex}で変数を変えることで，印刷されたドキュメントのサイズを
変えることが可能です．さらに，書式化される印刷されたドキュメントでスタイ
ルを変えることも可能です．例えば，サイズや使用しているフォント，それそれ
の段落に対する字下げの量，ハイフネーションされた単語の度合と，それに類す
るものを変えることが可能です．仕様書を変更することで，本を格調高く古臭く
真面目に見せたり，気楽に若々しく陽気に見せたりすることも可能です．

@c @TeX{} is freely distributable.  It is written in a superset of Pascal
@c called WEB and can be compiled either in Pascal or (by using a
@c conversion program that comes with the @TeX{} distribution) in C.
@c (@xref{TeX Mode, ,@TeX{} Mode, emacs, The GNU Emacs Manual}, for information
@c about @TeX{}.)@refill
@c 
@TeX{}は自由に配布できます．それは，WEBと呼ばれるPascalのスーパーセット
で書かれていて，Pascalでも(@TeX{}配布物と同梱の変換プログラムを使用しな
がら)Cでもコンパイルすることが可能です．(@TeX{}の詳細は，@xref{TeX Mode,
,@TeX{} Mode, emacs, The GNU Emacs Manual}.)@refill

@c @TeX{} is very powerful and has a great many features.  Because a
@c Texinfo file must be able to present information both on a
@c character-only terminal in Info form and in a typeset book, the
@c formatting commands that Texinfo supports are necessarily limited.
@c 
@TeX{}は非常に強力で，非常に多くの機能があります．Texinfoファイルは，
Info形式の文字のみの端末と，植字された本の両方で情報を表現できるので，
Texinfoがサポートする書式化コマンドは必然的に制限されます．

@c To get a copy of @TeX{}, see
@c @ref{Obtaining TeX, , How to Obtain @TeX{}}.
@c 
@TeX{}のコピーを入手するために，@ref{Obtaining TeX, , How to Obtain
@TeX{}}を参照してください．


@node Formatting Commands
@c @section @@-commands
@section @@-コマンド
@cindex @@-commands
@cindex Formatting commands

@c In a Texinfo file, the commands that tell @TeX{} how to typeset the
@c printed manual and tell @code{makeinfo} and
@c @code{texinfo-format-buffer} how to create an Info file are preceded
@c by @samp{@@}; they are called @dfn{@@-commands}.  For example,
@c @code{@@node} is the command to indicate a node and @code{@@chapter}
@c is the command to indicate the start of a chapter.@refill
@c 
Texinfoファイルでは，@TeX{}に印刷されるマニュアルの植字法を伝えたり，
@code{makeinfo}と@code{texinfo-format-buffer}にInfoファイルの作成方法を
伝えるコマンドには，@samp{@@}が前につきます．それらは@dfn{@@-コマンド
(@@-commands)}と呼ばれています．例えば，@code{@@node}はコードを示すコマ
ンドで，@code{@@chapter}は章の最初を示すコマンドです．@refill

@quotation
@c @strong{Please note:} All the @@-commands, with the exception of the
@c @code{@@TeX@{@}} command, must be written entirely in lower case.
@c 
@strong{注意してください:}全ての@@-コマンドは，@code{@@TeX@{@}}コマンド
以外，全体を小文字で書く必要があります．
@end quotation

@c The Texinfo @@-commands are a strictly limited set of constructs.  The
@c strict limits make it possible for Texinfo files to be understood both
@c by @TeX{} and by the code that converts them into Info files.  You can
@c display Info files on any terminal that displays alphabetic and
@c numeric characters.  Similarly, you can print the output generated by
@c @TeX{} on a wide variety of printers.@refill
@c 
Texinfoの@@-コマンドは，厳密に制限された構成物の集合です．厳密な制限で，
Texinfoファイルを，@TeX{}とInfoファイルに変換するコードの両方が理解する
ことを可能にします．Infoファイルを英数字を表示する端末で表示することが可
能です．同様に，@TeX{}で生成した出力を様々なプリンタで印刷することも可能
です．@refill

@c Depending on what they do or what arguments@footnote{The word
@c @dfn{argument} comes from the way it is used in mathematics and does not
@c refer to a dispute between two people; it refers to the information
@c presented to the command.  According to the @cite{Oxford English
@c Dictionary}, the word derives from the Latin for @dfn{to make clear,
@c prove}; thus it came to mean `the evidence offered as proof', which is
@c to say, `the information offered', which led to its mathematical
@c meaning.  In its other thread of derivation, the word came to mean `to
@c assert in a manner against which others may make counter assertions',
@c which led to the meaning of `argument' as a dispute.} they take, you
@c need to write @@-commands on lines of their own or as part of
@c sentences:
@c 
実行することや受けとる引数に依存して，@footnote{単語@dfn{引数(argument)}
は数学での使用法から来ていて，二人の論争には関係ありません．それは，コマ
ンドに与えた情報を参照します．@cite{オックスフォード英語辞典}によると，
単語は@dfn{明らかにする，証明する(to make clear, prove)}というラテン語か
ら生じました．このため，`証明として提出された証拠'と言う意味で，それは
`提出された情報'と言われていて，数学的な意味から導かれました．由来の他の
筋では，単語は，`他人がした反対の断言に，反対する方法で断言すること'と言
う意味から来ていて，`argument' の意味を論争に導きました．}それ自身の行や，
文の一部として，@@-コマンドを書く必要があります．

@itemize @bullet
@item
@c Write a command such as @code{@@quotation} at the beginning of a line as
@c the only text on the line.  (@code{@@quotation} begins an indented
@c environment.)
@c 
@code{@@quotation}のようなコマンドを，行の最初に，行の唯一のテキストとし
て書いてください．(@code{@@quotation}は，字下げ環境を開始します．)

@item
@c Write a command such as @code{@@chapter} at the beginning of a line
@c followed by the command's arguments, in this case the chapter title, on
@c the rest of the line.  (@code{@@chapter} creates chapter titles.)@refill
@c 
@code{@@chapter}のようなコマンドをコマンドの引数が続く行の最初に，この場
合は行の残りが章のタイトルになるように書いてください．@refill

@item
@c Write a command such as @code{@@dots@{@}} wherever you wish but usually
@c within a sentence. (@code{@@dots@{@}} creates dots @dots{})@refill
@c 
@code{@@dots@{@}}のようなコマンドを，通常は文中ですが，好きなところに書
いてください．(@code{@@dots@{@}}はドット@dots{}を作成します)@refill

@item
@c Write a command such as @code{@@code@{@var{sample-code}@}} wherever you
@c wish (but usually within a sentence) with its argument,
@c @var{sample-code} in this example, between the braces.  (@code{@@code}
@c marks text as being code.)@refill
@c 
@code{@@code@{@var{sample-code}@}}のようなコマンドを，好きなところに(通
常は文中ですが)，引数と一緒に，この例ではカッコの中に@var{sample-code}の
ように書いてください．(@code{@@code}はコードとしてテキストに印を付けます．)
@refill

@item
@c Write a command such as @code{@@example} on a line of its own; write the
@c body-text on following lines; and write the matching @code{@@end}
@c command, @code{@@end example} in this case, at the on a line of its own
@c after the body-text. (@code{@@example} @dots{} @code{@@end example}
@c indents and typesets body-text as an example.)  It's usually ok to
@c indent environment commands like this, but in complicated and
@c hard-to-define circumstances the extra spaces cause extra space to
@c appear in the output, so beware.
@c 
@code{@@example}のようなコマンドを単独行に書いてください．本文はそれ以降
の行に書いてください．そして，併せて@code{@@end}コマンドを，この場合は本
文の後に単独行に書いてください．(@code{@@example}@dots{}@code{@@end
example}は字下げし，例として本体のテキストを植字します．)このような環境
コマンドの字下げは通常問題ありませんが，複雑で定義しにくい環境での余分な
スペースは出力に余分なスペースを生成するので注意してください．
@end itemize

@noindent
@cindex Braces, when to use
@c As a general rule, a command requires braces if it mingles among other
@c text; but it does not need braces if it starts a line of its own.  The
@c non-alphabetic commands, such as @code{@@:}, are exceptions to the rule;
@c they do not need braces.@refill
@c 
一般的な規則として，他のテキストの間に混ぜる場合，コマンドにはカッコが必
要です．しかし行の始まり場合は不要です．@code{@@:}のようなアルファベット
でないコマンドは，規則に対し例外でカッコを必要としません．@refill

@c As you gain experience with Texinfo, you will rapidly learn how to
@c write the different commands: the different ways to write commands
@c make it easier to write and read Texinfo files than if all commands
@c followed exactly the same syntax.  (For details about @@-command
@c syntax, see @ref{Command Syntax, , @@-Command Syntax}.)@refill
@c 
Texinfoの経験を積むにつれ，異なるコマンドに書き方をすぐに覚えられるでしょ
う．コマンドの書き方を異なる方法にしているので，全てのコマンドが同じ構文
に正確に従うことに比較すると，より簡単にTexinfoファイルを書いたり読んだ
りできるでしょう．(@@-コマンド構文の詳細は，@ref{Command Syntax, ,
@@-Command Syntax}を参照してください．)@refill


@node Conventions
@c @section General Syntactic Conventions
@section 一般的な構文の慣習
@cindex General syntactic conventions
@cindex Syntactic conventions
@cindex Conventions, syntactic

@c This section describes the general conventions used in all Texinfo documents.
@c 
このセクションでは，全てのTexinfoドキュメントで使用されている一般的な慣
習を記述しています．

@itemize @bullet
@item
@c All printable @sc{ascii} characters except @samp{@@}, @samp{@{} and
@c @samp{@}} can appear in a Texinfo file and stand for themselves.
@c @samp{@@} is the escape character which introduces commands, while
@c @samp{@{} and @samp{@}} are used to surround arguments to certain
@c commands.  To put one of these special characters into the document, put
@c an @samp{@@} character in front of it, like this: @samp{@@@@},
@c @samp{@@@{}, and @samp{@@@}}.
@c 
@samp{@@}，@samp{@{}，そして@samp{@}}を除き，印刷可能な全ての@sc{ascii} 
文字はTexinfoファイルに書くことが可能で，それはそれ自身を意味します．
@samp{@@}はコマンドを導入するエスケープ文字ですが，@samp{@{}と@samp{@}} 
は特定のコマンドの引数を囲むためだけに使用されます．これらの特別な文字を
ドキュメントに書くため，@samp{@@}文字を，@samp{@@@@}，@samp{@@@{}，そし
て@samp{@@@}}のように，その前に書いてください．

@item
@c It is customary in @TeX{} to use doubled single-quote characters to
@c begin and end quotations: @w{@t{`@w{}`@dots{}'@w{}'}}.  This
@c convention should be followed in Texinfo files.  @TeX{} converts
@c two single quotes to left- and right-hand doubled
@c quotation marks, 
@c 
引用の初めと終りに，シングル引用符文字を二重にした
@w{@t{`@w{}`@dots{}'@w{}'}}を使用することは@TeX{}の習慣です．この慣習に
Texinfoファイルも従うべきです．@TeX{}は，
@c this comes out as "like this" in Info, of course, which is just confusing.
@iftex
@c ``like this'', 
@c 
``このように''，
@end iftex
@c and Info converts doubled single-quote characters to @sc{ascii}
@c double-quotes: @w{@t{`@w{}`@dots{}'@w{}'}} becomes @w{@t{"@dots{}"}}.
@c 
二重にしたシングル引用符文字を右と左の二重引用符に変換し，Infoは二重にし
たシングル引用符文字を，@sc{ascii}の二重引用符"に変換します．
@w{@t{`@w{}`@dots{}'@w{}'}}は@w{@t{"@dots{}"}}になります．

@item
@c Use three hyphens in a row, @samp{---}, for a dash---like this.  In
@c @TeX{}, a single or double hyphen produces a printed dash that is
@c shorter than the usual typeset dash. Info reduces three hyphens to two
@c for display on the screen.
@c 
行では，三つのハイフン@samp{---}を---のようなダッシュに対して使用してくだ
さい．@TeX{}では，一つまたは二つのハイフンは，通常の植字のダッシュより小
さいダッシュを印刷します．Infoでは，画面表示で三つのダッシュを二つにしま
す．

@item
@c To prevent a paragraph from being indented in the printed manual, precede
@c the paragraph with the command @code{@@noindent}
@c 
印刷されたマニュアルで段落の字下げを避けるため，その段落の前にコマンド
@code{@@noindent}を書いてください．

@item
@c If you mark off a region of the Texinfo file with the @code{@@iftex}
@c and @w{@code{@@end iftex}} commands, that region will appear only in
@c the printed copy; in that region, you can use certain commands
@c borrowed from plain @TeX{} that you cannot use in Info.  Conversely,
@c text surrounded by @code{@@ifnottex} and @code{@@end ifnottex} will
@c appear in all output formats @emph{except} @TeX{}.
@c 
@code{@@iftex}と@w{@code{@@end iftex}}コマンドでTexinfoファイルの領域を
区切る場合，その領域は印刷されたコピーだけに現れます．その領域で，Infoで
は使用不可能なプレーン@TeX{}の特定のコマンドを使用することが可能です．反
対に，@code{@@ifnottex}と@code{@@end ifnottex}で囲まれたテキストは，
@TeX{}@emph{以外の}すべての出力形式に現れます．

@c Each of the other output formats (@code{html}, @code{info},
@c @code{plaintext}) have an analogous pair of commands.  @xref{Conditionals}.
@c 
それぞれの出力形式(@code{html}，@code{info}，@code{plaintext})にも，同様
のコマンドの対があります．@xref{Conditionals}.
@end itemize

@cindex Tabs; don't use!
@quotation
@c @strong{Caution:} Do not use tab characters in a Texinfo file (except in
@c verbatim modes)!  @TeX{} uses variable-width fonts, which means that it
@c is impractical at best to define a tab to work in all circumstances.
@c Consequently, @TeX{} treats tabs like single spaces, and that is not
@c what they look like.  Furthermore, @code{makeinfo} does nothing special
@c with tabs, and thus a tab character in your input file may appear
@c differently in the output, for example, in indented text.
@c 
@strong{注意:}タブ文字を(逐語的なモード(verbatim mode)以外の)Texinfoファ
イルで使用しないでください！ @TeX{}は，可変幅のフォントを使用し，それは
全ての環境で動作するように，タブを適切に定義することは現実的ではないこと
を意味します．従って，@TeX{}はタブを単一のスペースとして扱うので，タブの
ように見えません．さらに，@code{makeinfo}はタブに対し特別なことをしない
ので，例えば入力ファイルのタブ文字は出力で異なる字下げとして現れるかもし
れません．

@noindent
@c To avoid this problem, Texinfo mode causes GNU Emacs to insert multiple
@c spaces when you press the @key{TAB} key.
@c 
この問題を避けるためTexinfoモードは，@key{TAB}キーを押したとき，GNU
Emacsに多数のスペースを挿入させます．

@noindent
@c Also, you can run @code{untabify} in Emacs to convert tabs in a region
@c to multiple spaces.
@c 
また，タブを一つの領域の複数のスペースに変換するため，Emacsで
@code{untabify}を実行することも可能です．
@end quotation


@node Comments
@c @section Comments
@section コメント

@cindex Comments
@findex comment
@findex c @r{(comment)}

@c You can write comments in a Texinfo file that will not appear in
@c either the Info file or the printed manual by using the
@c @code{@@comment} command (which may be abbreviated to @code{@@c}).
@c Such comments are for the person who revises the Texinfo file.  All the
@c text on a line that follows either @code{@@comment} or @code{@@c} is a
@c comment; the rest of the line does not appear in either the Info file
@c or the printed manual.
@c 
Infoファイルや印刷されたマニュアルに現れないコメントを，Texinfoファイル
に@code{@@comment}コマンドを使用して書くことが可能です(省略された
@code{@@c}でもかまいません)．そのようなコメントは，Texinfoファイルを修正
する人のためです．@code{@@comment}や@code{@@c}に続く行の全てのテキストは
コメントです．行の残りはInfoファイルにも印刷されたマニュアルにも現れませ
ん．

@c Often, you can write the @code{@@comment} or @code{@@c} in the middle of
@c a line, and only the text that follows after the @code{@@comment} or
@c @code{@@c} command does not appear; but some commands, such as
@c @code{@@settitle} and @code{@@setfilename}, work on a whole line.  You
@c cannot use @code{@@comment} or @code{@@c} in a line beginning with such
@c a command.
@c 
@code{@@comment}や@code{@@c}を行の途中にたびたび書くことも可能で，
@code{@@comment}や@code{@@c}コマンドの後のテキストのみが現れません．しか
し，@code{@@settitle}と@code{@@setfilename}のようなコマンドは行全体に作
用します．@code{@@comment}や@code{@@c}を，そのようなコマンドを用いている
行では使用することは不可能です．

@cindex Ignored text
@cindex Unprocessed text
@findex ignore
@c You can write long stretches of text that will not appear in either
@c the Info file or the printed manual by using the @code{@@ignore} and
@c @code{@@end ignore} commands.  Write each of these commands on a line
@c of its own, starting each command at the beginning of the line.  Text
@c between these two commands does not appear in the processed output.
@c You can use @code{@@ignore} and @code{@@end ignore} for writing
@c comments.
@c 
Infoファイルや印刷されたマニュアルに現れないテキストの長い範囲を，
@code{@@ignore}と@code{@@end ignore}コマンドを使用して書くことが可能です．
行の最初からそれぞれのコマンドを始めながら，単独行にこれらのコマンドをそ
れぞれ書いてください．これら二つのコマンドの間のテキストは処理された出力
物に現れません．@code{@@ignore}と@code{@@end ignore}をコメントを書くため
に使用することが可能です．

@c Text enclosed by @code{@@ignore} or by failing @code{@@ifset} or
@c @code{@@ifclear} conditions is ignored in the sense that it will not
@c contribute to the formatted output.  However, @TeX{} and makeinfo must
@c still parse the ignored text, in order to understand when to @emph{stop}
@c ignoring text from the source file; that means that you may still get
@c error messages if you have invalid Texinfo commands within ignored text.
@c 
@code{@@ignore}や，偽の@code{@@ifset}や@code{@@ifclear}の条件式で囲まれ
ているテキストは，書式化された出力に寄与しないという意味で無視されます．
しかし，@TeX{}と@command{makeinfo}は，ソースファイルのテキストの無視を
@emph{停止する}ときを知るために，無視されたテキストを解析します．つまり，
無視されているテキストに無効なTexinfoコマンドがある場合，エラーメッセー
ジが発生するかもしれません．


@node Minimum
@c @section What a Texinfo File Must Have
@section Texinfoファイルが必要とするもの
@cindex Minimal Texinfo file (requirements)
@cindex Must have in Texinfo file
@cindex Required in Texinfo file
@cindex Texinfo file minimum

@c By convention, the namea of a Texinfo file ends with (in order of
@c preference) one of the extensions @file{.texinfo}, @file{.texi},
@c @file{.txi}, or @file{.tex}.  The longer extensions are preferred since
@c they describe more clearly to a human reader the nature of the file.
@c The shorter extensions are for operating systems that cannot handle long
@c file names.
@c 
慣習では，Texinfoファイルの名前は，(優先順で)拡張子@file{.texinfo}，
@file{.texi}，@file{.txi}，または@file{.tex}で終ります．長い拡張子が好ま
れるのは，人が読むときファイルの性質がより明確に記述されるためです．短い
拡張子は，長いファイル名を扱えないオペレーティングシステムのためです．

@c In order to be made into a printed manual and an Info file, a Texinfo
@c file @strong{must} begin with lines like this:
@c 
印刷されたマニュアルやInfoファイルのため，Texinfoファイルは以下のような
行で始める@strong{必要があります}．

@example
@group
\input texinfo
@@setfilename @var{info-file-name}
@@settitle @var{name-of-manual}
@end group
@end example

@noindent
@c The contents of the file follow this beginning, and then you
@c @strong{must} end a Texinfo file with a line like this:
@c 
ファイルの内容はこの始まりに続き，Texinfoファイルは以下の行で終る
@strong{必要があります}．

@example
@@bye
@end example

@findex \input @r{(raw @TeX{} startup)}
@noindent
@c Here's an explanation:
@c 
以下で説明します．

@itemize @bullet
@item
@c The @samp{\input texinfo} line tells @TeX{} to use the
@c @file{texinfo.tex} file, which tells @TeX{} how to translate the Texinfo
@c @@-commands into @TeX{} typesetting commands.  (Note the use of the
@c backslash, @samp{\}; this is correct for @TeX{}.)
@c 
@samp{\input texinfo}行は@TeX{}に@file{texinfo.tex}ファイルを使用するよ
うに伝え，それは，Texinfoの@@-コマンドを@TeX{}の植字コマンドに変換する方
法を@TeX{}に伝えます．(バックスラッシュ，@samp{\}を使用することに注意し
てください．これは，@TeX{}に対して正しいものです．)

@item
@c The @code{@@setfilename} line provides a name for the Info file and
@c tells @TeX{} to open auxiliary files.  @strong{All text before
@c @code{@@setfilename} is ignored!}
@c 
@samp{@@setfilename}行はInfoファイルの名前を提供し，@TeX{}に補助ファイル
を開くよう伝えます．@strong{@code{@@setfilename}以前のすべての文字は無視
されます！}

@item
@c The @code{@@settitle} line specifies a title for the page headers (or
@c footers) of the printed manual, and the default document description for
@c the @samp{<head>} in HTML format.  Strictly speaking, @code{@@settitle}
@c is optional---if you don't mind your document being titled `Untitled'.
@c 
@samp{@@settitle}行は，印刷されたマニュアルのページヘッダ(やフッタ) のタ
イトルを指定し，HTML形式の@samp{<head>}の記述のデフォルトになります．厳
密に言うと，@code{@@settitle}はオプションです --- ドキュメントのタイトル
が`Untitled'でも気にしなければね．

@item
@c The @code{@@bye} line at the end of the file on a line of its own tells
@c the formatters that the file is ended and to stop formatting.
@c 
ファイルの終りの行の@code{@@bye}は，フォーマッタにファイルの終りを伝え，
書式化を停止するように伝えます．

@end itemize

@c Typically, you will not use quite such a spare format, but will include
@c mode setting and start-of-header and end-of-header lines at the
@c beginning of a Texinfo file, like this:
@c 
一般的には予備のフォーマットを全く使用しないでしょうが，Texinfoファイル
の最初に以下のような，モード設定とヘッダの始まりとヘッダの終りを含めるで
しょう．

@example
@group
\input texinfo   @@c -*-texinfo-*-
@@c %**start of header
@@setfilename @var{info-file-name}
@@settitle @var{name-of-manual}
@@c %**end of header
@end group
@end example

@noindent
@c In the first line, @samp{-*-texinfo-*-} causes Emacs to switch into
@c Texinfo mode when you edit the file.
@c 
最初の行の@samp{-*-texinfo-*-}で，Emacsはファイル編集時にTexinfoモードに
切替えます．

@c The @code{@@c} lines which surround the @code{@@setfilename} and
@c @code{@@settitle} lines are optional, but you need them in order to
@c run @TeX{} or Info on just part of the file.  (@xref{Start of Header}.)
@c 
@samp{@@setfilename}と@samp{@@settitle}行の周りにある@code{@@c}行はオプ
ションですが，ファイルの一部で@TeX{}やInfoを実行するために必要です．(詳
細は@xref{Start of Header}.)@refill

@c Furthermore, you will usually provide a Texinfo file with a title page,
@c indices, and the like, all of which are explained in this manual.  But
@c the minimum, which can be useful for short documents, is just the three
@c lines at the beginning and the one line at the end.
@c 
さらに通常は，Texinfoファイルに，タイトルページ，索引，そしてそれに似た
ものを提供し，それらすべてはこのマニュアルで説明しています．しかし，短い
ドキュメントでは役に立つ最小限のものは，始めの三行と終りの一行だけです．


@node Six Parts
@c @section Six Parts of a Texinfo File
@section Texinfoファイルの六つの部品

@c Generally, a Texinfo file contains more than the minimal beginning and
@c end described in the previous section---it usually contains the six
@c parts listed below.  These are described fully in the following sections.
@c 
一般に，Texinfoファイルは最初と最後の最小限以上のものから成り立っていま
す --- 通常は以下でリストアップしている六つの部品から成り立ちます．これ
らは以下のセクションで完全に記述しています．

@table @r
@c @item 1. Header
@item 1. ヘッダ
@c The @dfn{Header} names the file, tells @TeX{} which definitions file to
@c use, and other such housekeeping tasks.
@c 
@dfn{ヘッダ(Header)}は，ファイルに名前を付け，@TeX{}で使用する定義ファイ
ルと，その他の管理する仕事を伝えます．

@c @item 2. Summary and Copyright
@item 2. 要約の記述と著作権
@c The @dfn{Summary and Copyright} segment describes the document and
@c contains the copyright notice and copying permissions.  This is done
@c with the @code{@@copying} command.
@c 
@dfn{要約の記述と著作権(Summary and Copyright)}の部分では，Infoファイル
に対するドキュメントの記述，著作権通知，そしてコピーの許可から成り立ちま
す．この部分は，Infoファイルにのみフォーマッタが配置するように，
@code{@@ifinfo}と@code{@@end ifinfo}コマンドで囲まれています．@refill

@c @item 3. Title and Copyright
@item 3. タイトルと著作権
@c The @dfn{Title and Copyright} segment contains the title and copyright
@c pages for the printed manual.  The segment must be enclosed between
@c @code{@@titlepage} and @code{@@end titlepage} commands.  The title and
@c copyright page appear only in the printed manual.
@c 
@dfn{タイトルと著作権(Title and Copyright)}の部分は，印刷されたマニュア
ルに対するタイトルと著作権のページから成り立ちます．この部分は
@code{@@titlepage}と@code{@@end titlepage}コマンドで囲む必要があります．
タイトルと著作権のページは，印刷されたマニュアルのみに現れます．

@c @item 4. `Top' Node and Master Menu
@item 4. `Top'ノードとマスターメニュー
@c The `Top' node starts off the online output; it does not appear in the
@c printed manual.  We recommend including the copying permissions here as
@c well as the segments above.  And it contains at least a top-level menu
@c listing the chapters, and possibly a @dfn{Master Menu} listing all the
@c nodes in the entire document.
@c 
`Top'ノードはオンラインの出力を開始します．それは印刷されたマニュアルに
は現れません．上記の部分同様に，コピーの許可をここに含めることを推奨しま
す．そしてそれは，少なくとも章をリストアップしているトップレベルのメニュー
を含んでいて，おそらく@dfn{マスターメニュー(Master Menu)}は，ドキュメン
ト全体のノードをリストアップしています．

@c @item 5. Body
@item 5. 本体
@c The @dfn{Body} of the document is typically structured like a
@c traditional book or encyclopedia, but it may be free form.
@c 
ドキュメントの@dfn{本体(Body)}は，伝統的な本や，百科辞典のように構造化さ
れていますが，自由な形式でもかまいません．

@c @item 6. End
@item 6. 終り
@c The @dfn{End} segment contains commands for printing indices and
@c generating the table of contents, and the @code{@@bye} command on a line
@c of its own.
@c 
@dfn{終り(End)}の部分は，索引を印刷したり目次を生成したりするコマンドと，
単独行の@code{@@bye}コマンドから成り立っています．
@end table


@node Short Sample
@c @section A Short Sample Texinfo File
@section Texinfoの短いサンプル
@cindex Sample Texinfo file, with comments

@c Here is a very short but complete Texinfo file, in the six conventional
@c parts enumerated in the previous section, so you can see how Texinfo
@c source appears in practice.  The first three parts of the file, from
@c @samp{\input texinfo} through to @samp{@@end titlepage}, look more
@c intimidating than they are: most of the material is standard
@c boilerplate; when writing a manual, you simply change the names as
@c appropriate.
@c 
非常に短いが完全なTexinfoファイルは以下のようになり，前のセクションの六
つの慣習的な部分が列挙されているので，Texinfoソースをどのように表現する
のかが実際に分かるでしょう．ファイルの最初の三つの部分は@samp{\input
texinfo}から@samp{@@end titlepage}までで，他より恐ろしく(?)@footnote{訳
注:原文は，look more intimidating}見えます．素材のほとんどが標準的な常套
句です．マニュアルを書くとき，単純にこの部分を適切な名前に変更してくださ
い．

@c @xref{Beginning a File}, for full documentation on the commands listed
@c here.  @xref{GNU Sample Texts}, for the full texts to be used in GNU
@c manuals.
@c 
ここでリストアップしているコマンドの完全なドキュメントは，
@xref{Beginning a File}.  GNUのマニュアルで使用されている完全なテキスト
は，@xref{GNU Sample Texts}.

@c In the following, the sample text is @emph{indented}; comments on it are
@c not.  The complete file, without interspersed comments, is shown in
@c @ref{Short Sample Texinfo File}.
@c 
以下では，サンプルテキストは@emph{字下げ}されています．そこでのコメント
はそうなっていません．散らかっているコメントの無い完全なファイルは，
@ref{Short Sample Texinfo File}で示されています．

@c @subheading Part 1: Header
@subheading Part 1: ヘッダ

@noindent
@c The header does not appear in either the Info file or the
@c printed output.  It sets various parameters, including the
@c name of the Info file and the title used in the header.
@c 
ヘッダはInfoファイルにも印刷物にも現れません．それは様々な変数を設定し，
それにはInfoファイルの名前とヘッダで使用されているタイトルが含まれていま
す．

@example
@group
\input texinfo   @@c -*-texinfo-*-
@@c %**start of header
@@setfilename sample.info
@@settitle Sample Manual 1.0
@@c %**end of header
@end group
@end example

@c @subheading Part 2: Summary Description and Copyright
@subheading Part 2: 要約の記述と著作権

@noindent
@c A real manual includes more text here, according to the license under
@c which it is distributed.  @xref{GNU Sample Texts}.
@c 
実際のマニュアルには，それを配布するライセンスに対応して，ここにより多く
のテキストを含んでいます．@xref{GNU Sample Texts}.

@example
@group
@@copying
This is a short example of a complete Texinfo file, version 1.0.

Copyright @@copyright@{@} 2002 Free Software Foundation, Inc.
@@end copying
@end group
@end example

@c @subheading Part 3: Titlepage, Contents, Copyright
@subheading Part 3: タイトルページ，目次，著作権

@noindent
@c The titlepage segment does not appear in the online output, only in the
@c printed manual.  We use the @code{@@insertcopying} command to
@c include the permission text from the previous section, instead of
@c writing it out again; it is output on the back of the title page.  The
@c @code{@@contents} command generates a table of contents.
@c 
タイトルページの部分はオンラインの出力には現れず，印刷されたマニュアルの
みに現れます．我々はもう一度書く代わりに，前のセクションから許可のテキス
トを含めるために，@code{@@insertcopying}コマンドを使用しています．それは
タイトルページの裏側に出力します．@code{@@contents}コマンドは目次を生成
します．

@example
@group
@@titlepage
@@title Sample Title
@end group

@group
@@c The following two commands start the copyright page.
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage
@end group

@@c Output the table of contents at the beginning.
@@contents
@end example

@c @subheading Part 4: `Top' Node and Master Menu
@subheading Part 4: `Top'ノードとマスターメニュー

@noindent
@c The `Top' node contains the master menu for the Info file.  Since a
@c printed manual uses a table of contents rather than a menu, the master
@c menu appears only in online output.  We also include the copying text
@c again for the benefit of online readers.  And since the copying text
@c begins with a brief description of the manual, no other text is needed.
@c 
`Top'ノードは，Infoファイルのマスターメニューを含んでいます．印刷された
マニュアルはメニューではなく目次を使用するので，マスターメニューはオンラ
インの出力だけに現れます．我々は，読書への利便性のためコピーに関するテキ
ストも再び含めています．そして，コピーに関するテキストはマニュアルの短い
記述の一部で始まっているので，他のテキストは不要です．

@example
@group
@@ifnottex
@@node Top
@@end ifnottex
@end group
@end example

@example
@group
@@insertcopying

@@menu
* First Chapter::    The first chapter is the
                       only chapter in this sample.
* Index::            Complete index.
@@end menu
@end group
@end example


@c @subheading Part 5: The Body of the Document
@subheading Part 5: ドキュメントの本体

@noindent
@c The body segment contains all the text of the document, but not the
@c indices or table of contents.  This example illustrates a node and a
@c chapter containing an enumerated list.
@c 
本体の部分はドキュメントの全ての部分を含んでいますが，索引と目次は含まれ
ていません．この例は，列挙されたリストを含んでいるノードと章を示していま
す．

@example
@group
@@node First Chapter
@@chapter First Chapter

@@cindex chapter, first
@end group

@group
This is the first chapter.
@@cindex index entry, another
@end group

@group
Here is a numbered list.

@@enumerate
@@item
This is the first item.

@@item
This is the second item.
@@end enumerate
@end group
@end example


@c @subheading Part 6: The End of the Document
@subheading Part 6: ドキュメントの終り

@noindent
@c The end segment contains commands for generating an index in a node and
@c unnumbered chapter of its own, and the @code{@@bye} command that marks
@c the end of the document.
@c 
終りの部分は，それ自身が番号付けされていない章とノードとして索引を生成す
るコマンドと，ドキュメントの終りを示す@code{@@bye}コマンドを含んでいます．

@example
@group
@@node Index
@@unnumbered Index
@end group

@group
@@printindex cp

@@bye
@end group
@end example


@c @subheading Some Results
@subheading その結果

@c Here is what the contents of the first chapter of the sample look like:
@c 
サンプルの最初の章の内容のサンプルは以下のように見えます．

@sp 1
@need 700
@quotation
This is the first chapter.

Here is a numbered list.

@enumerate
@item
This is the first item.

@item
This is the second item.
@end enumerate
@end quotation


@node History
@c @section History
@section 歴史

@cindex Stallman, Richard M.
@cindex Chassell, Robert J.
@cindex Fox, Brian
@cindex Berry, Karl
@c Richard M.@: Stallman invented the Texinfo format, wrote the initial
@c processors, and created Edition 1.0 of this manual.  @w{Robert J.@:}
@c Chassell greatly revised and extended the manual, starting with Edition
@c 1.1.  Brian Fox was responsible for the standalone Texinfo distribution
@c until version 3.8, and wrote the standalone @command{makeinfo} and
@c @command{info} programs.  Karl Berry has continued maintenance since
@c Texinfo 3.8 (manual edition 2.22).
@c 
Richard M.@: StallmanがTexinfoフォーマットを発明し，最初のプロセッサを書
き，このマニュアルのEdition 1.0を作成しました．@w{Robert J.@:} Chassell 
は，このマニュアルにかなりの修正と拡張を行ない，Edition 1.1を開始しまし
た．Brian Foxは，バージョン3.8まで，スタンドアローンのTexinfo配布物に責
任があり，@command{makeinfo}と@command{info}プログラムを書きました．Karl
BerryはTexinfo 3.8 から更新し，マニュアルのEdition 2.22を始めました．

@cindex Pinard, Fran@,{c}ois
@cindex Zuhn, David D.
@cindex Weisshaus, Melissa
@cindex Zaretskii, Eli
@cindex Schwab, Andreas
@cindex Weinberg, Zack
@c Our thanks go out to all who helped improve this work, particularly the
@c indefatigable Eli Zaretskii and Andreas Schwab, who have provided
@c patches beyond counting.  Fran@,{c}ois Pinard and @w{David D.@: Zuhn},
@c tirelessly recorded and reported mistakes and obscurities.  Zack
@c Weinberg did the impossible by implementing the macro syntax in
@c @file{texinfo.tex}.  Special thanks go to Melissa Weisshaus for her
@c frequent reviews of nearly similar editions.  Dozens of others have
@c contributed patches and suggestions, they are gratefully acknowledged in
@c the @file{ChangeLog} file.  Our mistakes are our own.
@c 
この仕事の開発を助けてくれた全てに人々，特に数え切れないパッチを提供して
くれた，疲れを知らないEli Zaretskii とAndreas Schwabに感謝します．
Fran@,{c}ois Pinardと@w{David D.@: Zuhn}は飽きること無く，間違いと曖昧さ
を記録し報告してくれました．Zack Weinbergは，@file{texinfo.tex}でマクロ
構文を実装するという，不可能ともいえることを行いました．幾度となくほとん
ど似ているエディションの退屈な査読に対し，Melissa Weisshausに特別な感謝
を送ります．その他，何十人もがパッチと提案を提供してくれ，それは
@file{ChangeLog}ファイルで多いに感謝しています．我々の間違いは，我々自身
のものです．

@cindex Scribe
@cindex Reid, Brian
@cindex History of Texinfo
@cindex Texinfo history
@c A bit of history: in the 1970's at CMU, Brian Reid developed a program
@c and format named Scribe to mark up documents for printing.  It used the
@c @code{@@} character to introduce commands, as Texinfo does.  Much more
@c consequentially, it strived to describe document contents rather than
@c formatting, an idea wholeheartedly adopted by Texinfo.
@c 
ちょっとした歴史:1970年代のCMUで，Brian Reidは印刷のためにドキュメントを
マークアップするプログラムとScribeという名前の書式を開発しました．それは，
Texinfoが行っている，@code{@@}文字をコマンド導入に使用していました．結果
として，書式化というよりむしろドキュメントの内容を記述するために真剣に検
討されていて，その考えは全面的にTexinfoで適用されています．

@cindex Bolio
@cindex Bo@TeX{}
@c Meanwhile, people at MIT developed another, not too dissimilar format
@c called Bolio.  This then was converted to using @TeX{} as its typesetting
@c language: Bo@TeX{}.  The earliest Bo@TeX{} version seems to have been
@c 0.02 on October 31, 1984.
@c 
一方，MITの人々は他のものを開発し，それはBolioと呼ばれる余り違わない書式
でした．これは，植字の言語として@TeX{}を使用するように変更され，Bo@TeX{} 
になりました．最初ののBo@TeX{}のバージョンは0.02で1984年10月31日だったと
思います．

@c Bo@TeX{} could only be used as a markup language for documents to be
@c printed, not for online documents.  Richard Stallman (RMS) worked on
@c both Bolio and Bo@TeX{}.  He also developed a nifty on-line help format
@c called Info, and then combined Bo@TeX{} and Info to create Texinfo, a
@c mark up language for text that is intended to be read both online and
@c as printed hard copy.
@c 
Bo@TeX{}は，印刷されたドキュメントに対するマークアップ言語としてのみ利用
可能で，オンラインドキュメントに対してはできませんでした．Richard
Stallman (RMS)は，BolioとBo@TeX{}の両方で仕事をしました．彼は，Infoと呼
ばれる気のきいたオンラインヘルプ書式を開発し，Texinfoを作成するため，
Bo@TeX{}とInfoを組合せ，オンラインと印刷されたハードコピーの両方で読める
ようにしたテキストのためのマークアップ言語となりました．


@node Texinfo Mode
@c @chapter Using Texinfo Mode
@chapter Texinfoモードを使用する
@cindex Texinfo mode
@cindex Mode, using Texinfo
@cindex GNU Emacs
@cindex Emacs

@c You may edit a Texinfo file with any text editor you choose.  A Texinfo
@c file is no different from any other @sc{ascii} file.  However, GNU Emacs
@c comes with a special mode, called Texinfo mode, that provides Emacs
@c commands and tools to help ease your work.
@c 
Texinfoファイルは，どんなテキストエディタを選んで編集してもかまいません．
Texinfoファイルは，他の@sc{ascii}ファイルと差がありません．しかし，GNU
EmacsにはTexinfoモードと呼ばれる特別なモードがあり，仕事が楽になるよう
Emacsコマンドとツールを提供しています．

@c This chapter describes features of GNU Emacs' Texinfo mode but not any
@c features of the Texinfo formatting language.  So if you are reading this
@c manual straight through from the beginning, you may want to skim through
@c this chapter briefly and come back to it after reading succeeding
@c chapters which describe the Texinfo formatting language in detail.
@c 
この章では，GNU EmacsのTexinfoモードの機能について述べ，Texinfo書式化言
語の特徴は述べません．そのため，このマニュアルを始めからそのまま読んでい
る場合，この章は軽く流し，詳細にTexinfoフォーマット言語を述べている章を
読み終えた後，ここに戻りたくなるかもしれません．

@menu
* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @@-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.
@end menu

@node Texinfo Mode Overview, Emacs Editing, Texinfo Mode, Texinfo Mode
@ifinfo
@heading Texinfo Mode Overview
@heading Texinfoモードの概要
@end ifinfo

@c Texinfo mode provides special features for working with Texinfo
@c files.
@c You can:@refill
@c 
Texinfoモードは，Texinfoファイルで作業するための特別な機能を提供していま
す．以下のようなことが可能です．@refill

@itemize @bullet
@item
@c Insert frequently used @@-commands. @refill
@c 
よく使用される@@-コマンドの挿入．@refill

@item
@c Automatically create @code{@@node} lines.
@c 
@code{@@node}行の自動生成．

@item
@c Show the structure of a Texinfo source file.@refill
@c 
Texinfoソースファイルの構造を表示．@refill

@item
@c Automatically create or update the `Next',
@c `Previous', and `Up' pointers of a node.
@c 
ノードの，`Next'，`Previous'，そして`Up'ポインタの自動的な作成と更新．

@item
@c Automatically create or update menus.@refill
@c 
メニューの自動的な作成と更新．@refill

@item
@c Automatically create a master menu.@refill
@c 
マスターメニューの自動作成．@refill

@item
@c Format a part or all of a file for Info.@refill
@c 
Infoに対するファイルの一部または全部の書式化．@refill

@item
@c Typeset and print part or all of a file.@refill
@c 
ファイルの一部または全部の植字と印刷．@refill
@end itemize

@c Perhaps the two most helpful features are those for inserting frequently
@c used @@-commands and for creating node pointers and menus.@refill
@c 
恐らく，最も役に立つ機能の二つは，よく使用する@@-コマンドの挿入とノードポ
インタとメニューの作成です．@refill

@node Emacs Editing, Inserting, Texinfo Mode Overview, Texinfo Mode
@c @section The Usual GNU Emacs Editing Commands
@section 通常のGNU Emacs編集コマンド

@c In most cases, the usual Text mode commands work the same in Texinfo
@c mode as they do in Text mode.  Texinfo mode adds new editing commands
@c and tools to GNU Emacs' general purpose editing features.  The major
@c difference concerns filling.  In Texinfo mode, the paragraph
@c separation variable and syntax table are redefined so that Texinfo
@c commands that should be on lines of their own are not inadvertently
@c included in paragraphs.  Thus, the @kbd{M-q} (@code{fill-paragraph})
@c command will refill a paragraph but not mix an indexing command on a
@c line adjacent to it into the paragraph.@refill
@c 
ほとんどの状況で，通常のテキストモードのコマンドは，Texinfoモードでもテ
キストモード同様に動作します．Texinfoモードは，新しい編集コマンドとツー
ルを，GNU Emacsの一般的な優れた編集能力に追加します．主な違いは，内容に
関係します．Texinfoモードでは，段落を分離する変数と構文の表は，単独行の
Texinfoコマンドが不注意で段落内に含まれないように再定義されています．こ
のため，@kbd{M-q} (@code{fill-paragraph})コマンドは段落を再定義しますが，
隣接している索引コマンドを段落内に混ぜません．@refill

@c In addition, Texinfo mode sets the @code{page-delimiter} variable to
@c the value of @code{texinfo-chapter-level-regexp}; by default, this is
@c a regular expression matching the commands for chapters and their
@c equivalents, such as appendices.  With this value for the page
@c delimiter, you can jump from chapter title to chapter title with the
@c @kbd{C-x ]} (@code{forward-page}) and @kbd{C-x [}
@c (@code{backward-page}) commands and narrow to a chapter with the
@c @kbd{C-x p} (@code{narrow-to-page}) command.  (@xref{Pages, , ,emacs,
@c The GNU Emacs Manual}, for details about the page commands.)@refill
@c 
さらに，Texinfoモードでは，@code{page-delimiter}に
@code{texinfo-chapter-level-regexp}の値を設定します．デフォルトでこれは，
章や付録のような等価物に対するコマンドに一致する正規表現です．ページの分
離にこの値を用いることで，@kbd{C-x ]}(@code{forward-page})と@kbd{C-x
[}(@code{backward-page})コマンドで，章のタイトルから章のタイトルへ移動し
たり，@kbd{C-x p}(@code{narrow-to-page})コマンドで章を小さくすることが可
能となります．(ページコマンドの詳細は，@xref{Pages, , ,emacs, The GNU
Emacs Manual}.)@refill

@c You may name a Texinfo file however you wish, but the convention is to
@c end a Texinfo file name with one of the extensions
@c @file{.texinfo}, @file{.texi}, @file{.txi}, or @file{.tex}.  A longer
@c extension is preferred, since it is explicit, but a shorter extension
@c may be necessary for operating systems that limit the length of file
@c names.  GNU Emacs automatically enters Texinfo mode when you visit a
@c file with a @file{.texinfo}, @file{.texi} or @file{.txi}
@c extension.  Also, Emacs switches to Texinfo mode
@c when you visit a
@c file that has @samp{-*-texinfo-*-} in its first line.  If ever you are
@c in another mode and wish to switch to Texinfo mode, type @code{M-x
@c texinfo-mode}.@refill
@c 
Texinfoファイルには望みの名前を付けてもかまいませんが，慣習で，
@file{.texinfo}，@file{.texi}，@file{.txi}，または@file{.tex}といった拡
張子の一つで終ります．長い拡張子は明示的なので好まれますが，短い拡張子は
ファイル名の長さに制限があるオペレーティングシステムに必要です．GNU
Emacsは，@file{.texinfo}，@file{.texi}，または@file{.txi}の拡張子を持つ
ファイルのとき，自動的にTexinfoモードに入ります．また，
@samp{-*-texinfo-*-}を最初の行に持つファイルのときも，Texinfoモードに切
り替わります．他のモードからTexinfoモードに切替えたい場合は，@code{M-x
texinfo-mode}と入力してください．@refill

@c Like all other Emacs features, you can customize or enhance Texinfo
@c mode as you wish.  In particular, the keybindings are very easy to
@c change.  The keybindings described here are the default or standard
@c ones.@refill
@c 
他のEmacsの機能のように，望みのままにTexinfoモードをカスタマイズしたり拡
張したりすることが可能です．特にキーバインドは非常に簡単に変更できます．
以下で，デフォルトと標準的なキーバインドを述べます．@refill

@node Inserting, Showing the Structure, Emacs Editing, Texinfo Mode
@comment  node-name,  next,  previous,  up
@c @section Inserting Frequently Used Commands
@section よく使用されるコマンドの挿入
@cindex Inserting frequently used commands
@cindex Frequently used commands, inserting
@cindex Commands, inserting them

@c Texinfo mode provides commands to insert various frequently used
@c @@-commands into the buffer.  You can use these commands to save
@c keystrokes.@refill
@c 
Texinfoモードは，よく使用する様々な@@-コマンドをバッファに挿入するコマン
ドを提供しています．これらのコマンドでキーストロークを減らすことができま
す．@refill

@c The insert commands are invoked by typing @kbd{C-c} twice and then the
@c first letter of the @@-command:@refill
@c 
挿入コマンドは，@kbd{C-c}を2度の後，@@-コマンドの最初の文字を入力し呼び
出します．@refill

@table @kbd
@item  C-c C-c c
@itemx M-x texinfo-insert-@@code
@findex texinfo-insert-@@code
@c Insert @code{@@code@{@}} and put the
@c cursor between the braces.@refill
@c 
@code{@@code@{@}}を挿入し，カッコの間にカーソルを配置します．@refill

@item  C-c C-c d
@itemx M-x texinfo-insert-@@dfn
@findex texinfo-insert-@@dfn
@c Insert @code{@@dfn@{@}} and put the
@c cursor between the braces.@refill
@c 
@code{@@dfn@{@}}を挿入し，カッコの間にカーソルを配置します．@refill

@item  C-c C-c e
@itemx M-x texinfo-insert-@@end
@findex texinfo-insert-@@end
@c Insert @code{@@end} and attempt to insert the correct following word,
@c such as @samp{example} or @samp{table}.  (This command does not handle
@c nested lists correctly, but inserts the word appropriate to the
@c immediately preceding list.)@refill
@c 
@code{@@end}を挿入し，@samp{example}や@samp{table}といった，以下に続く正し
い単語を推測します．(このコマンドはネストされたリストを正確に処理しません
が，すぐ前のリストに適切な単語を挿入します．)@refill

@item  C-c C-c i
@itemx M-x texinfo-insert-@@item
@findex texinfo-insert-@@item
@c Insert @code{@@item} and put the
@c cursor at the beginning of the next line.@refill
@c 
@code{@@item}を挿入し，次の行の始めにカーソルを配置します．@refill

@item  C-c C-c k
@itemx M-x texinfo-insert-@@kbd
@findex texinfo-insert-@@kbd
@c Insert @code{@@kbd@{@}} and put the
@c cursor between the braces.@refill
@c 
@code{@@kbd@{@}}を挿入し，カッコの間にカーソルを配置します．@refill

@item  C-c C-c n
@itemx M-x texinfo-insert-@@node
@findex texinfo-insert-@@node
@c Insert @code{@@node} and a comment line
@c listing the sequence for the `Next',
@c `Previous', and `Up' nodes.
@c Leave point after the @code{@@node}.@refill
@c 
@code{@@node}と，`Next'，`Previous'，そして`Up'ノードに対し，連続したリ
ストのコメント行を挿入します．@code{@@node}の後にポイントは配置されます．
@refill

@item  C-c C-c o
@itemx M-x texinfo-insert-@@noindent
@findex texinfo-insert-@@noindent
@c Insert @code{@@noindent} and put the
@c cursor at the beginning of the next line.@refill
@c 
@code{@@noindent}を挿入し，次の行の最初にカーソルを配置します．@refill

@item  C-c C-c s
@itemx M-x texinfo-insert-@@samp
@findex texinfo-insert-@@samp
@c Insert @code{@@samp@{@}} and put the
@c cursor between the braces.@refill
@c 
@code{@@samp@{@}}を挿入し，カッコの間にカーソルを配置します．@refill

@item  C-c C-c t
@itemx M-x texinfo-insert-@@table
@findex texinfo-insert-@@table
@c Insert @code{@@table} followed by a @key{SPC}
@c and leave the cursor after the @key{SPC}.@refill
@c 
@code{@@table}とその後に@kbd{SPC}を挿入し，@key{SPC}の後にカーソルを配置
します．@refill

@item  C-c C-c v
@itemx M-x texinfo-insert-@@var
@findex texinfo-insert-@@var
@c Insert @code{@@var@{@}} and put the
@c cursor between the braces.@refill
@c 
@code{@@var@{@}}を挿入し，カッコの間にカーソルを配置します．@refill

@item  C-c C-c x
@itemx M-x texinfo-insert-@@example
@findex texinfo-insert-@@example
@c Insert @code{@@example} and put the
@c cursor at the beginning of the next line.@refill
@c 
@code{@@example}を挿入し，次の行の最初にカーソルを配置します．@refill

@c M-@{  was the binding for texinfo-insert-braces;
@c in Emacs 19, backward-paragraph will take this binding.
@item C-c C-c @{
@itemx M-x texinfo-insert-braces
@findex texinfo-insert-braces
@c Insert @code{@{@}} and put the cursor between the braces.@refill
@c 
@code{@{@}}を挿入し，カッコの間にカーソルを挿入します．@refill

@item C-c C-c @}
@itemx C-c C-c ]
@itemx M-x up-list
@findex up-list
@c Move from between a pair of braces forward past the closing brace.
@c Typing @kbd{C-c C-c ]} is easier than typing @kbd{C-c C-c @}}, which
@c is, however, more mnemonic; hence the two keybindings.  (Also, you can
@c move out from between braces by typing @kbd{C-f}.)@refill
@c 
前後の閉じたカッコの間を移動します．@kbd{C-c C-c ]}は@kbd{C-c C-c @}}よ
り簡単ですが，後者の方が覚えやすいです．それで二つのキーバインドとなりま
す．(また，@kbd{C-f}の入力でカッコの間から出ることも可能です．)@refill
@end table

@c To put a command such as @w{@code{@@code@{@dots{}@}}} around an
@c @emph{existing} word, position the cursor in front of the word and type
@c @kbd{C-u 1 C-c C-c c}.  This makes it easy to edit existing plain text.
@c The value of the prefix argument tells Emacs how many words following
@c point to include between braces---@samp{1} for one word, @samp{2} for
@c two words, and so on.  Use a negative argument to enclose the previous
@c word or words.  If you do not specify a prefix argument, Emacs inserts
@c the @@-command string and positions the cursor between the braces.  This
@c feature works only for those @@-commands that operate on a word or words
@c within one line, such as @code{@@kbd} and @code{@@var}.@refill
@c 
@emph{存在する}単語の周りに，@w{@code{@@code@{@dots{}@}}}のようなコマン
ドを書くため，単語の前にカーソルを配置し，@kbd{C-u 1 C-c C-c c}と入力し
てください．これで，簡単に既存のプレーンテキストを編集できるようになりま
す．プレフィクス引数の値は，一単語の場合は@samp{1}，2単語の場合は@samp{2} 
等のように，カッコの間に含めるそれ以降の単語の数をEmacsに伝えます．前の
単語を囲むために負の引数を使用してください．プレフィクス引数を指定しない
場合，Emacsは@@-コマンド文字列を挿入し，カーソルをカッコの間に配置します．
この機能は，@code{@@kbd}と@code{@@var}のような，一つの単語や一行内の単語
を操作する@@-コマンドに対してのみ動作します．@refill

@c This set of insert commands was created after analyzing the frequency
@c with which different @@-commands are used in the @cite{GNU Emacs
@c Manual} and the @cite{GDB Manual}.  If you wish to add your own insert
@c commands, you can bind a keyboard macro to a key, use abbreviations,
@c or extend the code in @file{texinfo.el}.@refill
@c 
この挿入コマンドの組は，@cite{GNU Emacs Manual}と@cite{GDB Manual}で使用
されている，異なる@@-コマンドの頻度の解析後に作成されました．独自の挿入
コマンドを加えたい場合，キーにキーボードマクロをバインドしたり，省略を使
用したり，@file{texinfo.el}のコードを拡張することが可能です．@refill

@findex texinfo-start-menu-description
@cindex Menu description, start
@cindex Description for menu, start
@c @kbd{C-c C-c C-d} (@code{texinfo-start-menu-description}) is an insert
@c command that works differently from the other insert commands.  It
@c inserts a node's section or chapter title in the space for the
@c description in a menu entry line.  (A menu entry has three parts, the
@c entry name, the node name, and the description.  Only the node name is
@c required, but a description helps explain what the node is about.
@c @xref{Menu Parts, , The Parts of a Menu}.)@refill
@c 
@kbd{C-c C-c C-d}(@code{texinfo-start-menu-description})は，他の挿入コマ
ンドとは異なる挿入コマンドです．それは，メニュー項目行の記述のためのスペー
スに，ノードのセクションや章のタイトルを挿入します．(メニュー項目は三つ
の部品があり，それは項目名，ノード名，そして記述です．ノード名のみ要求さ
れますが，記述はノードが関係するものの説明を補助します．@xref{Menu
Parts, , The Parts of a Menu}.)@refill

@c To use @code{texinfo-start-menu-description}, position point in a menu
@c entry line and type @kbd{C-c C-c C-d}.  The command looks for and copies
@c the title that goes with the node name, and inserts the title as a
@c description; it positions point at beginning of the inserted text so you
@c can edit it.  The function does not insert the title if the menu entry
@c line already contains a description.@refill
@c 
@code{texinfo-start-menu-description}を使用するため，メニュー項目行にポ
イントをおき，@kbd{C-c C-c C-d}を入力してください．コマンドはノード名に
付属するタイトルを探してコピーし，タイトルを記述として挿入します．編集可
能なように，それは挿入されたテキストの始めにポイントを配置します．メニュー
項目行に記述が含まれている場合，この機能はタイトルを挿入しません．
@refill

@c This command is only an aid to writing descriptions; it does not do the
@c whole job.  You must edit the inserted text since a title tends to use
@c the same words as a node name but a useful description uses different
@c words.@refill
@c 
このコマンドは記述を書くためだけに役立ちます．それは仕事を全部しません．
タイトルはノード名と同じ単語を使いたがるものですが，役に立つ記述にするに
は，異なる単語を使用すべきなので，挿入されたテキストを編集する必要があり
ます．@refill

@node Showing the Structure, Updating Nodes and Menus, Inserting, Texinfo Mode
@comment  node-name,  next,  previous,  up
@c @section Showing the Section Structure of a File
@section ファイルのセクションの構造を見る
@cindex Showing the section structure of a file
@cindex Section structure of a file, showing it
@cindex Structure of a file, showing it
@cindex Outline of file structure, showing it
@cindex Contents-like outline of file structure
@cindex File section structure, showing it
@cindex Texinfo file section structure, showing it

@c You can show the section structure of a Texinfo file by using the
@c @kbd{C-c C-s} command (@code{texinfo-show-structure}).  This command
@c shows the section structure of a Texinfo file by listing the lines
@c that begin with the @@-commands for @code{@@chapter},
@c @code{@@section}, and the like.  It constructs what amounts
@c to a table of contents.  These lines are displayed in another buffer
@c called the @samp{*Occur*} buffer.  In that buffer, you can position
@c the cursor over one of the lines and use the @kbd{C-c C-c} command
@c (@code{occur-mode-goto-occurrence}), to jump to the corresponding spot
@c in the Texinfo file.@refill
@c 
@kbd{C-c C-s}コマンド(@code{texinfo-show-structure})を使用して，Texinfo 
ファイルのセクションの構造を表示することが可能です．このコマンドは，
@code{@@chapter}や@code{@@section}のような，@@-コマンドで始まる行をリス
トアップし，Texinfoファイルのセクションの構造を表示します．それは，結果
として目次を構成します．これらの行は，@samp{*Occur*}と呼ばれる別のバッファ
に表示されます．そのバッファでTexinfoファイルの関連する場所に移動するた
め，行の一つにカーソルを配置し@kbd{C-c C-c}コマンド
(@code{occur-mode-goto-occurrence})を使用することが可能です．@refill

@table @kbd
@item  C-c C-s
@itemx M-x texinfo-show-structure
@findex texinfo-show-structure
@c Show the @code{@@chapter}, @code{@@section}, and such lines of a
@c Texinfo file.@refill
@c 
Texinfoファイルの@code{@@chapter}，@code{@@section}，そしてそれに類似し
た行を表示します．@refill

@item  C-c C-c
@itemx M-x occur-mode-goto-occurrence
@findex occur-mode-goto-occurrence
@c Go to the line in the Texinfo file corresponding to the line under the
@c cursor in the @file{*Occur*} buffer.@refill
@c 
@file{*Occur*}バッファのカーソルの下の行に関連する，Texinfoファイルの行
に移動します．@refill
@end table

@c If you call @code{texinfo-show-structure} with a prefix argument by
@c typing @w{@kbd{C-u C-c C-s}}, it will list not only those lines with the
@c @@-commands for @code{@@chapter}, @code{@@section}, and the like, but
@c also the @code{@@node} lines.  You can use @code{texinfo-show-structure}
@c with a prefix argument to check whether the `Next', `Previous', and `Up'
@c pointers of an @code{@@node} line are correct.
@c 
@w{@kbd{C-u C-c C-s}}を入力し，プレフィクス引数を付けて
@code{texinfo-show-structure}を呼び出す場合，@code{@@chapter}，
@code{@@section}，そしてこれに類する@@-コマンドがある行だけでなく，
@code{@@node}行もリストアップします．@code{@@node}行の，`Next'，
`Previous'，そして`Up'ポインタが正しいかどうか調査するため，
@code{texinfo-show-structure}にプレフィクスを付けて使用することが可能で
す．

@c Often, when you are working on a manual, you will be interested only
@c in the structure of the current chapter.  In this case, you can mark
@c off the region of the buffer that you are interested in by using the
@c @kbd{C-x n n} (@code{narrow-to-region}) command and
@c @code{texinfo-show-structure} will work on only that region.  To see
@c the whole buffer again, use @w{@kbd{C-x n w}} (@code{widen}).
@c (@xref{Narrowing, , , emacs, The GNU Emacs Manual}, for more
@c information about the narrowing commands.)@refill
@c 
マニュアルの作業中，現在の章の構造のみに興味があることもよくあります．こ
の場合，@kbd{C-x n n}(@code{narrow-to-region})コマンドを使用し，興味があ
るバッファの領域を区別することが可能で，@code{texinfo-show-structure}は
その領域のみで動作します．再びバッファの領域全体を見るため，@w{@kbd{C-x
n w}}(@code{widen})を使用してください．(コマンドの制限は，
@xref{Narrowing, , , emacs, The GNU Emacs Manual}.)@refill

@vindex page-delimiter
@cindex Page delimiter in Texinfo mode
@c In addition to providing the @code{texinfo-show-structure} command,
@c Texinfo mode sets the value of the page delimiter variable to match
@c the chapter-level @@-commands.  This enables you to use the @kbd{C-x
@c ]} (@code{forward-page}) and @kbd{C-x [} (@code{backward-page})
@c commands to move forward and backward by chapter, and to use the
@c @kbd{C-x p} (@code{narrow-to-page}) command to narrow to a chapter.
@c @xref{Pages, , , emacs, The GNU Emacs Manual}, for more information
@c about the page commands.@refill
@c 
@code{texinfo-show-structure}コマンドの提供に加えて，Texinfoモードは，章
レベルの@@-コマンドに一致するページ分離変数の値を設定します．これで，
@kbd{C-x ]}(@code{forward-page})と@kbd{C-x [} (@code{backward-page})コマ
ンドを前後の章に移動するために使用したり，@kbd{C-x p}
(@code{narrow-to-page})コマンドを章を小さくするために使用したりすること
が可能です．ページコマンドの詳細は，@xref{Pages, , , emacs, The GNU
Emacs Manual}.@refill

@node Updating Nodes and Menus, Info Formatting, Showing the Structure, Texinfo Mode
@comment  node-name,  next,  previous,  up
@c @section Updating Nodes and Menus
@section ノードとメニューの更新
@cindex Updating nodes and menus
@cindex Create nodes, menus automatically
@cindex Insert nodes, menus automatically
@cindex Automatically insert nodes, menus

@c Texinfo mode provides commands for automatically creating or updating
@c menus and node pointers.  The commands are called ``update'' commands
@c because their most frequent use is for updating a Texinfo file after you
@c have worked on it; but you can use them to insert the `Next',
@c `Previous', and `Up' pointers into an @code{@@node} line that has none
@c and to create menus in a file that has none.
@c 
Texinfoモードは，自動的にメニューとノードポインタを作成し更新するコマン
ドを提供しています．コマンドは``更新''コマンドと呼ばれ，その理由は，作業
後にTexinfoファイルを更新するため最もよく使用されているためです．しかし，
`Next'，`Previous'，そして`Up'ポインタを，何も持たない@code{@@node}行に
挿入したり，何も持たないファイルでメニューを作成したりするために使用する
ことが可能です．

@c If you do not use the updating commands, you need to write menus and
@c node pointers by hand, which is a tedious task.@refill
@c 
更新コマンドを使用しない場合，メニューとノードポインタを手で書く必要があ
り，それは退屈な仕事です．@refill

@menu
* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.
@end menu

@node Updating Commands, Updating Requirements, Updating Nodes and Menus, Updating Nodes and Menus
@ifinfo
@c @subheading The Updating Commands
@subheading 更新コマンド
@end ifinfo

@c You can use the updating commands to:@refill
@c 
以下を行なうために，更新コマンドを使用することが可能です．@refill

@itemize @bullet
@item
@c insert or update the `Next', `Previous', and `Up' pointers of a
@c node,@refill
@c 
ノードに，`Next'，`Previous'，そして`Up'ポインタを挿入したり更新したりし
ます．@refill

@item
@c insert or update the menu for a section, and@refill
@c 
セクションに対するメニューを挿入したり更新したりします．@refill

@item
@c create a master menu for a Texinfo source file.@refill
@c 
Texinfoソースファイルのためのマスターメニューを作成します．@refill
@end itemize

@c You can also use the commands to update all the nodes and menus in a
@c region or in a whole Texinfo file.@refill
@c 
Texinfoの一部や全体の，全てのノードとメニューを更新するためにそのコマン
ドを使用することも可能です．@refill

@c The updating commands work only with conventional Texinfo files, which
@c are structured hierarchically like books.  In such files, a structuring
@c command line must follow closely after each @code{@@node} line, except
@c for the `Top' @code{@@node} line.  (A @dfn{structuring command line} is
@c a line beginning with @code{@@chapter}, @code{@@section}, or other
@c similar command.)
@c 
更新コマンドは慣習に従っているTexinfoファイルでしか動作せず，それは本に
似た階層構造をしているものです．そのようなファイルでの構造的なコマンド行
は，`Top'@code{@@node}行以外のそれぞれの@code{@@node}行に続ける必要があ
ります．(@dfn{構造的なコマンド行(structuring command line)}は，
@code{@@chapter}，@code{@@section} や，他の似たコマンドで始まる行です．)

@c You can write the structuring command line on the line that follows
@c immediately after an @code{@@node} line or else on the line that
@c follows after a single @code{@@comment} line or a single
@c @code{@@ifinfo} line.  You cannot interpose more than one line between
@c the @code{@@node} line and the structuring command line; and you may
@c interpose only an @code{@@comment} line or an @code{@@ifinfo} line.
@c 
@code{@@node}行の直後に続く行や，単一の@code{@@comment}行や，単一の
@code{@@ifinfo}行の後に続く行に，構造的なコマンド行を書くことが可能です．
@code{@@node}行と構造的なコマンド行の間には，一行以上挿入できません．
@code{@@comment}行や@code{@@ifinfo}行のみ挿入できます．

@c Commands which work on a whole buffer require that the `Top' node be
@c followed by a node with an @code{@@chapter} or equivalent-level command.
@c The menu updating commands will not create a main or master menu for a
@c Texinfo file that has only @code{@@chapter}-level nodes!  The menu
@c updating commands only create menus @emph{within} nodes for lower level
@c nodes.  To create a menu of chapters, you must provide a `Top'
@c node.
@c 
バッファ全体で動作するコマンドには，@code{@@chapter}や，同等のレベルコマ
ンドを用いているノードが続く`Top'ノードが必要です．メニュー更新コマンド
は，@code{@@chapter}レベルのノードしか持たないTexinfoファイルに対して，
メインやマスターメニューを作成しません！メニュー更新コマンドは，低レベル
のノードの@emph{の中に}メニューを作成するだけです．章のメニューを作成す
vるために`Top'ノードを提供する必要があります．

@c The menu updating commands remove menu entries that refer to other Info
@c files since they do not refer to nodes within the current buffer.  This
@c is a deficiency.  Rather than use menu entries, you can use cross
@c references to refer to other Info files.  None of the updating commands
@c affect cross references.@refill
@c 
メニュー更新コマンドは現在のバッファ内のノードを参照しないので，他のInfo 
ファイルを参照するメニュー項目を削除します．これは欠陥です．メニュー項目
を使用するのではなく，他のInfoファイルを参照する相互参照を使用することが
可能です．更新コマンドは相互参照に影響しません．@refill

@c Texinfo mode has five updating commands that are used most often: two
@c are for updating the node pointers or menu of a single node (or a
@c region); two are for updating every node pointer and menu in a file;
@c and one, the @code{texinfo-master-menu} command, is for creating a
@c master menu for a complete file, and optionally, for updating every
@c node and menu in the whole Texinfo file.@refill
@c 
Texinfoモードは，よく使用される五つの更新コマンドがあります．二つは，単一
ノード(や領域)のノードポインタやメニューを更新します．二つは，ファイルの
全てのノードポインタとメニューを更新します．もう一つは，
@code{texinfo-master-menu}コマンドで，完全なファイルのマスターメニューを
作成し，さらにTexinfoファイル全体の全てのノードとメニューを更新します．
@refill

@c The @code{texinfo-master-menu} command is the primary command:@refill
@c 
@code{texinfo-master-menu}コマンドは，主要なコマンドです．@refill

@table @kbd
@item C-c C-u m
@itemx M-x texinfo-master-menu
@findex texinfo-master-menu
@c Create or update a master menu that includes all the other menus
@c (incorporating the descriptions from pre-existing menus, if
@c any).@refill
@c 
全ての他のメニューを含むマスターメニューを作成更新します(既存のメニュー
があれば，その記述を含めます)．@refill

@c With an argument (prefix argument, @kbd{C-u,} if interactive), first create or
@c update all the nodes and all the regular menus in the buffer before
@c constructing the master menu.  (@xref{The Top Node, , The Top Node and
@c Master Menu}, for more about a master menu.)@refill
@c 
引数(対話的な場合は，プレフィクス引数，@kbd{C-u,})を用いることで，マスター
メニューを構築する前に，バッファの全ての通常のメニューを最初に作成更新し
ます．(マスターメニューについては,@xref{The Top Node, , The Top Node and
Master Menu}.)@refill

@c For @code{texinfo-master-menu} to work, the Texinfo file must have a
@c `Top' node and at least one subsequent node.@refill
@c 
@code{texinfo-master-menu}を動作させるため，Texinfoファイルは，`Top'ノー
ドと，少なくとも一つのサブシーケンスノードがある必要があります．@refill

@c After extensively editing a Texinfo file, you can type the following:
@c 
広範囲でTexinfoファイルを編集後，以下を入力します．

@example
C-u M-x texinfo-master-menu
@c @exdent or
@c 
@exdent または
C-u C-c C-u m
@end example

@noindent
@c This updates all the nodes and menus completely and all at once.@refill
@c 
これで，一度に全てのノードとメニューを，完全に更新します．@refill
@end table

@c The other major updating commands do smaller jobs and are designed for
@c the person who updates nodes and menus as he or she writes a Texinfo
@c file.@refill
@c 
他の主要な更新コマンドは小さな仕事をし，人間がノードやメニューをTexinfo 
ファイルに書くように設計されています．@refill

@need 1000
@c The commands are:@refill
@c 
以下のコマンドです．@refill

@table @kbd
@item C-c C-u C-n
@itemx M-x texinfo-update-node
@findex texinfo-update-node
@c Insert the `Next', `Previous', and `Up' pointers for the node that point is
@c within (i.e., for the @code{@@node} line preceding point).  If the
@c @code{@@node} line has pre-existing `Next', `Previous', or `Up'
@c pointers in it, the old pointers are removed and new ones inserted.
@c With an argument (prefix argument, @kbd{C-u}, if interactive), this command
@c updates all @code{@@node} lines in the region (which is the text
@c between point and mark).@refill
@c 
`Next'，`Previous'，そして`Up'ポインタを，ポインタがあるノード(例えば，
@code{@@node}行をポイントの前)に挿入します．@code{@@node}行に，`Next'，
`Previous'，または`Up'ポインタがある場合，古いポインタは削除され新しいも
のが挿入されます．引数(対話的な場合，@kbd{C-u}プレフィクス引数)を用いる
ことで，このコマンドは領域の全ての@code{@@node}行を更新します(それは，ポ
イントとマークの間のテキストです)．@refill

@item C-c C-u C-m
@itemx M-x texinfo-make-menu
@findex texinfo-make-menu
@c Create or update the menu in the node that point is within.
@c With an argument (@kbd{C-u} as prefix argument, if
@c interactive), the command makes or updates menus for the
@c nodes which are either within or a part of the
@c region.@refill
@c 
ポイントがあるノードのメニューを作成更新します．引数(対話的な場合は，
@kbd{C-u}プレフィクス引数)を用いることで，コマンドは領域内またはその一部
のノードに対しメニューを作成更新します．@refill

@c Whenever @code{texinfo-make-menu} updates an existing menu, the
@c descriptions from that menu are incorporated into the new menu.  This
@c is done by copying descriptions from the existing menu to the entries
@c in the new menu that have the same node names.  If the node names are
@c different, the descriptions are not copied to the new menu.@refill
@c 
@code{texinfo-make-menu}が既存のメニューを更新する場合は，メニューの記述
は常に新しいメニューに挿入されます．これは，既存のメニューから同じノード
名を持つ新しいメニュー項目に記述をコピーすることで行います．ノードメニュー
が異なる場合，記述は新しいメニューにコピーされません．@refill

@item C-c C-u C-e
@itemx M-x texinfo-every-node-update
@findex texinfo-every-node-update
@c Insert or update the `Next', `Previous', and `Up' pointers for every
@c node in the buffer.@refill
@c 
バッファ内の全てのノードに対し，`Next'，`Previous'，そして`Up'ポインタを
挿入する，または更新します．@refill

@item C-c C-u C-a
@itemx M-x texinfo-all-menus-update
@findex texinfo-all-menus-update
@c Create or update all the menus in the buffer.  With an argument
@c (@kbd{C-u} as prefix argument, if interactive), first insert
@c or update all the node
@c pointers before working on the menus.@refill
@c 
バッファ内の全てのメニューを作成するまたは更新します．引数(対話的な場合
はプレフィクス引数@kbd{C-u})を用いることで，メニューで作業する前に，最初
に全てのノードを挿入更新します．@refill

@c If a master menu exists, the @code{texinfo-all-menus-update} command
@c updates it; but the command does not create a new master menu if none
@c already exists.  (Use the @code{texinfo-master-menu} command for
@c that.)@refill
@c 
マスターメニューがある場合，@code{texinfo-all-menus-update}コマンドはそ
れを更新します．しかし，メニューが無い場合，コマンドは新しいマスターメ
ニューを作成しません．(そのためには，@code{texinfo-master-menu}コマンド
を使用してください．)@refill

@c When working on a document that does not merit a master menu, you can
@c type the following:
@c 
マスターメニューを作成するメリットが無いドキュメントで作業する場合，以下
のように入力できます．

@example
C-u C-c C-u C-a
@c @exdent or
@c 
@exdent または
C-u M-x texinfo-all-menus-update
@end example

@noindent
@c This updates all the nodes and menus.@refill
@c 
これで，全てのノードとメニューを更新します．@refill
@end table

@c The @code{texinfo-column-for-description} variable specifies the
@c column to which menu descriptions are indented.  By default, the value
@c is 32 although it is often useful to reduce it to as low as 24.  You
@c can set the variable with the @kbd{M-x edit-options} command
@c (@pxref{Edit Options, , Editing Variable Values, emacs, The GNU Emacs
@c Manual}) or with the @kbd{M-x set-variable} command (@pxref{Examining,
@c , Examining and Setting Variables, emacs, The GNU Emacs
@c Manual}).@refill
@c 
@code{texinfo-column-for-description}変数は，メニューの記述を字下げする
列数を指定します．デフォルトで値は32ですが，24以下にした方が便利なときが
多いです．@kbd{M-x edit-options}コマンド(@pxref{Edit Options, , Editing
Variable Values, emacs, The GNU Emacs Manual})や，@kbd{M-x set-variable} 
コマンド(@pxref{Examining, , Examining and Setting Variables, emacs, The
GNU Emacs Manual})で変数を設定することが可能です．@refill

@c Also, the @code{texinfo-indent-menu-description} command may be used to
@c indent existing menu descriptions to a specified column.  Finally, if
@c you wish, you can use the @code{texinfo-insert-node-lines} command to
@c insert missing @code{@@node} lines into a file.  (@xref{Other Updating
@c Commands}, for more information.)@refill
@c 
また，@code{texinfo-indent-menu-description}を既存のメニューでの記述の字
下げの列の指定に使用することも可能です．終りに，希望があれば
@code{texinfo-insert-node-lines}コマンドを，ファイルに足りない
@code{@@node}行を挿入するために使用することが可能です．(詳細は
@xref{Other Updating Commands}.)@refill

@node Updating Requirements
@c @subsection Updating Requirements
@subsection 更新の必要条件
@cindex Updating requirements
@cindex Requirements for updating commands

@c To use the updating commands, you must organize the Texinfo file
@c hierarchically with chapters, sections, subsections, and the like.
@c When you construct the hierarchy of the manual, do not `jump down'
@c more than one level at a time: you can follow the `Top' node with a
@c chapter, but not with a section; you can follow a chapter with a
@c section, but not with a subsection.  However, you may `jump up' any
@c number of levels at one time---for example, from a subsection to a
@c chapter.@refill
@c 
更新コマンドを使用するためには，章，セクション，サブセクション，そしてそ
れに類するものを用いて，Texinfoファイルを階層的に組織化する必要がありま
す．マニュアルの階層構造を構築するとき，一度に一階層以上`jump down'しな
いでください．章を`Top'ノードの次にすることは可能ですが，セクションは不
可能です．セクションを章の次にすることは可能ですが，サブセクションでは不
可能です．しかし，一度に何レベルでも`jump up'することは可能です --- 例え
ば，サブセクションから章にすることは可能です．@refill

@c Each @code{@@node} line, with the exception of the line for the `Top'
@c node, must be followed by a line with a structuring command such as
@c @code{@@chapter}, @code{@@section}, or
@c @code{@@unnumberedsubsec}.@refill
@c 
それぞれの@code{@@node}行は，`Top'ノードの行は例外として，
@code{@@chapter}，@code{@@section}，または@code{@@unnumberedsubsec}のよ
うな，構造的なコマンドの行が続きます．@refill

@c Each @code{@@node} line/structuring-command line combination
@c must look either like this:
@c 
それぞれの@code{@@node}行や構造的なコマンド行は，以下のような組合せにす
る必要があります．

@example
@group
@@node     Comments,  Minimum, Conventions, Overview
@@comment  node-name, next,    previous,    up
@@section Comments
@end group
@end example

@c or like this (without the @code{@@comment} line):
@c 
または，(@code{@@comment}行が無ければ)以下のようになります．

@example
@group
@@node Comments, Minimum, Conventions, Overview
@@section Comments
@end group
@end example

@c or like this (without the explicit node pointers):
@c 
または，(明示的なノードポインタが無ければ)以下のようになります．

@example
@group
@@node Comments
@@section Comments
@end group
@end example

@noindent
@c In this example, `Comments' is the name of both the node and the
@c section.  The next node is called `Minimum' and the previous node is
@c called `Conventions'.  The `Comments' section is within the `Overview'
@c node, which is specified by the `Up' pointer.  (Instead of an
@c @code{@@comment} line, you may also write an @code{@@ifinfo} line.)
@c 
この例では，`Comments'はノードとセクションの名前です．次のノードは
`Minimum'と呼ばれ，前のノードは`Conventions'と呼ばれます．`Comments'セク
ションは`Overview'ノードにあり，`Up'ポインタで指定されています．
(@code{@@comment}行の代わりに，@code{@@ifinfo}行を書いてもかまいません．)

@c If a file has a `Top' node, it must be called @samp{top} or @samp{Top}
@c and be the first node in the file.
@c 
ファイルに`Top'ノードがある場合，それは，@samp{top}や@samp{Top}と呼ばれ，
ファイルの最初のノードにする必要があります．

@c The menu updating commands create a menu of sections within a chapter,
@c a menu of subsections within a section, and so on.  This means that
@c you must have a `Top' node if you want a menu of chapters.@refill
@c 
メニュー更新コマンドは，章のセクションメニュー，セクションのサブセクショ
ンメニュー等を作成します．これは，章のメニューが欲しい場合，`Top'ノード
が必要だということを意味します．@refill

@c Incidentally, the @code{makeinfo} command will create an Info file for a
@c hierarchically organized Texinfo file that lacks `Next', `Previous' and
@c `Up' pointers.  Thus, if you can be sure that your Texinfo file will be
@c formatted with @code{makeinfo}, you have no need for the update node
@c commands.  (@xref{Creating an Info File}, for more information about
@c @code{makeinfo}.)  However, both @code{makeinfo} and the
@c @code{texinfo-format-@dots{}} commands require that you insert menus in
@c the file.
@c 
ところで，@code{makeinfo}コマンドは，`Next'，`Previous'，そして`Up'ポイ
ンタが無い階層的に組織化されたTexinfoファイルに対し，Infoファイルを作成
します．このため，Texinfoファイルが@code{makeinfo}で書式化されることが確
実な場合，ノード更新コマンドは不要です(@code{makeinfo}の詳細は，
@pxref{Creating an Info File})．しかし，@code{makeinfo}と
@code{texinfo-format-@dots{}}コマンドでは，どちらもファイルにメニューを
挿入する必要があります．


@node Other Updating Commands
@c @subsection Other Updating Commands
@subsection その他の更新コマンド

@c In addition to the five major updating commands, Texinfo mode
@c possesses several less frequently used updating commands:@refill
@c 
五つの主な更新コマンドに加え，Texinfoモードには，余り使用されていない更新
コマンドもあります．@refill

@table @kbd
@item M-x texinfo-insert-node-lines
@findex texinfo-insert-node-lines
@c Insert @code{@@node} lines before the @code{@@chapter},
@c @code{@@section}, and other sectioning commands wherever they are
@c missing throughout a region in a Texinfo file.@refill
@c 
Texinfoファイルのある領域全体に@code{@@node}が無い場所では，
@code{@@chapter}，@code{@@section}，そしてその他のセクションコマンドの前
に@code{@@node}行を挿入します．@refill

@c With an argument (@kbd{C-u} as prefix argument, if interactive), the
@c @code{texinfo-insert-node-lines} command not only inserts
@c @code{@@node} lines but also inserts the chapter or section titles as
@c the names of the corresponding nodes.  In addition, it inserts the
@c titles as node names in pre-existing @code{@@node} lines that lack
@c names.  Since node names should be more concise than section or
@c chapter titles, you must manually edit node names so inserted.@refill
@c 
引数(対話的な場合は，@kbd{C-u}プレフィクス引数)を使用することで，
@code{texinfo-insert-node-lines}コマンドは，@code{@@node}行を挿入するだ
けでなく，対応するノードの名前として章やセクションのタイトルも挿入します．
さらに，既存の名前が無い@code{@@node}行に，ノード名としてタイトルを挿入
します．ノード名は，セクションや章のタイトルより簡潔にすべきなので，挿入
されたノード名を手作業で編集する必要があります．@refill

@c For example, the following marks a whole buffer as a region and inserts
@c @code{@@node} lines and titles throughout:@refill
@c 
例えば，以下のようにして，バッファ全体を領域としてマークし，
@code{@@node}行とタイトルを全体に挿入します．@refill

@example
C-x h C-u M-x texinfo-insert-node-lines
@end example

@c This command inserts titles as node names in @code{@@node} lines; the
@c @code{texinfo-start-menu-description} command (@pxref{Inserting,
@c Inserting Frequently Used Commands}) inserts titles as descriptions in
@c menu entries, a different action.  However, in both cases, you need to
@c edit the inserted text.
@c 
このコマンドは，タイトルをノード名として@code{@@node}行に挿入します．
@code{texinfo-start-menu-description}コマンド(@pxref{Inserting,
Inserting Frequently Used Commands})は，タイトルをメニュー項目に記述とし
て挿入するという，異なる動作になります．しかし，どちらの場合でも挿入され
たテキストを編集する必要があります．

@item M-x texinfo-multiple-files-update
@findex texinfo-multiple-files-update @r{(in brief)}
@c Update nodes and menus in a document built from several separate files.
@c With @kbd{C-u} as a prefix argument, create and insert a master menu in
@c the outer file.  With a numeric prefix argument, such as @kbd{C-u 2}, first
@c update all the menus and all the `Next', `Previous', and `Up' pointers
@c of all the included files before creating and inserting a master menu in
@c the outer file.  The @code{texinfo-multiple-files-update} command is
@c described in the appendix on @code{@@include} files.
@c 
分割されているファイルから構築されたドキュメントで，ノードとメニューを更
新します．プレフィクス引数@kbd{C-u}を使用することで，外部ファイルにマス
ターメニューを作成し挿入します．@kbd{C-u 2}のように，数字のプレフィクス
引数を使用することで，外部ファイルにマスターメニューを作成し挿入する前に，
全てのメニューと全てのインクルードファイルの，全ての`Next'，`Previous'，
そして`Up' ポインタを最初に更新します．
@ifinfo
@xref{texinfo-multiple-files-update}.@refill
@end ifinfo
@iftex
@xref{texinfo-multiple-files-update, ,
@code{texinfo-multiple-files-update}}.@refill
@end iftex

@item M-x texinfo-indent-menu-description
@findex texinfo-indent-menu-description
@c Indent every description in the menu following point to the specified
@c column.  You can use this command to give yourself more space for
@c descriptions.  With an argument (@kbd{C-u} as prefix argument, if
@c interactive), the @code{texinfo-indent-menu-description} command indents
@c every description in every menu in the region.  However, this command
@c does not indent the second and subsequent lines of a multi-line
@c description.@refill
@c 
指定された列の位置に，メニューのすべての記述を字下げします．記述に対して
より多くのスペースを与えるために，このコマンドを使用することが可能です．
引数(対話的な場合，@kbd{C-u}引数)を使用することで，
@code{texinfo-indent-menu-description} コマンドは，領域の全てのメニュー
の記述をを字下げします．しかし，このコマンドは複数行の記述行の二番目と次
に続く行を字下げしません．@refill

@item M-x texinfo-sequential-node-update
@findex texinfo-sequential-node-update
@c Insert the names of the nodes immediately following and preceding the
@c current node as the `Next' or `Previous' pointers regardless of those
@c nodes' hierarchical level.  This means that the `Next' node of a
@c subsection may well be the next chapter.  Sequentially ordered nodes are
@c useful for novels and other documents that you read through
@c sequentially.  (However, in Info, the @kbd{g *} command lets
@c you look through the file sequentially, so sequentially ordered nodes
@c are not strictly necessary.)  With an argument (prefix argument, if
@c interactive), the @code{texinfo-sequential-node-update} command
@c sequentially updates all the nodes in the region.@refill
@c 
現在のノードの直前直後に，ノードの階層レベルに係わらず，`Next'や
`Previous'ポインタとしてノード名を挿入します．これは，サブセクションの
`Next'ノードが次の章になることを意味します．連続して並んだノードは，小説
や順番に読んでいくドキュメントで役立ちます．(しかしInfoでは，@kbd{g *} 
コマンドでファイルを順番に見ることができ，順番に並んだノードは厳密には不
要です．)引数(対話的な場合は，プレフィクス引数)を使用することで，
@code{texinfo-sequential-node-update}コマンドは領域の全てのノードを更新
します．@refill
@end table

@node Info Formatting, Printing, Updating Nodes and Menus, Texinfo Mode
@comment  node-name,  next,  previous,  up
@c @section Formatting for Info
@section Infoの書式化
@cindex Formatting for Info
@cindex Running an Info formatter
@cindex Info formatting

@c Texinfo mode provides several commands for formatting part or all of a
@c Texinfo file for Info.  Often, when you are writing a document, you
@c want to format only part of a file---that is, a region.@refill
@c 
Texinfoモードは，Infoに対してTexinfoファイルの一部または全体を書式化する
コマンドも提供しています．ドキュメントを書いているとき，ファイルの一部だ
け，すなわち領域を書式化したいことがよくあります．@refill

@c You can use either the @code{texinfo-format-region} or the
@c @code{makeinfo-region} command to format a region:@refill
@c 
領域を書式化するために，@code{texinfo-format-region}や
@code{makeinfo-region}コマンドを使用することが可能です．@refill

@table @kbd
@findex texinfo-format-region
@item  C-c C-e C-r
@itemx M-x texinfo-format-region
@itemx C-c C-m C-r
@itemx M-x makeinfo-region
@c Format the current region for Info.@refill
@c 
Infoに対し，現在の領域の書式化を行います．@refill
@end table

@c You can use either the @code{texinfo-format-buffer} or the
@c @code{makeinfo-buffer} command to format a whole buffer:@refill
@c 
バッファ全体を書式化するために，@code{texinfo-format-buffer}や
@code{makeinfo-buffer}コマンドを使用することが可能です．@refill

@table @kbd
@findex texinfo-format-buffer
@item  C-c C-e C-b
@itemx M-x texinfo-format-buffer
@itemx C-c C-m C-b
@itemx M-x makeinfo-buffer
@c Format the current buffer for Info.@refill
@c 
Infoに対し，現在のバッファを初期化します．@refill
@end table

@need 1000
@c For example, after writing a Texinfo file, you can type the following:
@c 
例えば，Texinfoを書いた後で以下のように入力します．

@example
C-u C-c C-u m
@c @exdent or
@c 
@exdent または
C-u M-x texinfo-master-menu
@end example

@noindent
@c This updates all the nodes and menus.  Then type the following to create
@c an Info file:
@c 
これで，全てのノードとメニューを更新します．そして，Infoファイルを作成す
るため以下のように入力します．

@example
C-c C-m C-b
@c @exdent or
@c 
@exdent または
M-x makeinfo-buffer
@end example

@c For @TeX{} or the Info formatting commands to work, the file @emph{must}
@c include a line that has @code{@@setfilename} in its header.
@c 
@TeX{}やInfo書式化コマンドを動作させるため，ファイルには，ヘッダに
@code{@@setfilename}行を含める@emph{必要が}あります．

@c @xref{Creating an Info File}, for details about Info formatting.@refill
@c 
Infoの書式化の詳細は，@xref{Creating an Info File}.@refill

@node Printing, Texinfo Mode Summary, Info Formatting, Texinfo Mode
@comment node-name,  next,  previous,  up
@c @section Formatting and Printing
@section 書式化と印刷
@cindex Formatting for printing
@cindex Printing a region or buffer
@cindex Region formatting and printing
@cindex Buffer formatting and printing
@cindex Part of file formatting and printing

@c Typesetting and printing a Texinfo file is a multi-step process in which
@c you first create a file for printing (called a DVI file), and then
@c print the file.  Optionally, you may also create indices.  To do this,
@c you must run the @code{texindex} command after first running the
@c @code{tex} typesetting command; and then you must run the @code{tex}
@c command again.  Or else run the @code{texi2dvi} command which
@c automatically creates indices as needed (@pxref{Format with texi2dvi}).
@c 
Texinfoファイルの植字と印刷は，最初に印刷するための(DVIと呼ばれる)ファイ
ルを作成しその後でファイルを印刷するという，複数のステップによる処理にな
ります．オプションで索引を作成することも可能です．こうするため，最初に
@code{tex}植字コマンドを実行した後，@code{texindex}コマンドを実行する必
要があります．そして，もう一度@code{tex}コマンドを実行する必要があります．
また別の方法として，必要な索引を自動的に作成する，@code{texi2dvi}コマン
ドを実行します(@pxref{Format with texi2dvi})．

@c Often, when you are writing a document, you want to typeset and print
@c only part of a file to see what it will look like.  You can use the
@c @code{texinfo-tex-region} and related commands for this purpose.  Use
@c the @code{texinfo-tex-buffer} command to format all of a
@c buffer.@refill
@c 
ドキュメントを書いているとき，どのように見えるかを確認するため，ファイル
の一部だけを植字し印刷したいときがよくあります．
@code{texinfo-tex-region}と，この目的に関係するコマンドを使用することが
可能です．@code{texinfo-tex-buffer}コマンドは，バッファ全体の書式化に使
用してください．@refill

@table @kbd
@item  C-c C-t C-b
@itemx M-x texinfo-tex-buffer
@findex texinfo-tex-buffer
@c Run @code{texi2dvi} on the buffer.  In addition to running @TeX{} on the
@c buffer, this command automatically creates or updates indices as
@c needed.@refill
@c 
バッファで@code{texi2dvi}を実行します．バッファで@TeX{}の実行に追加し，
このコマンドは，必要な場合は自動的に索引を作成更新します．@refill

@item  C-c C-t C-r
@itemx M-x texinfo-tex-region
@findex texinfo-tex-region
@c Run @TeX{} on the region.@refill
@c 
領域で@TeX{}を実行します．@refill

@item C-c C-t C-i
@itemx M-x texinfo-texindex
@c Run @code{texindex} to sort the indices of a Texinfo file formatted with
@c @code{texinfo-tex-region}.  The @code{texinfo-tex-region} command does
@c not run @code{texindex} automatically; it only runs the @code{tex}
@c typesetting command.  You must run the @code{texinfo-tex-region} command
@c a second time after sorting the raw index files with the @code{texindex}
@c command.  (Usually, you do not format an index when you format a region,
@c only when you format a buffer.  Now that the @code{texi2dvi} command
@c exists, there is little or no need for this command.)@refill
@c 
@code{texinfo-tex-region}で書式化されたTexinfoファイルの索引をソートする
ため，@code{texindex}を実行します．@code{texinfo-tex-region}コマンドは，
自動的に@code{texindex}を実行しません．それは，@code{tex}植字コマンドを
実行するだけです．@code{texindex}コマンドで生の索引ファイルをソートした
後，@code{texinfo-tex-region}コマンドを2回実行する必要があります．(通常，
領域を書式化したときは索引を書式化せず，バッファを書式化したときのみ行わ
れます．現在は@code{texi2dvi}コマンドがあるので，このコマンドはほとんど，
あるいは全く必要ありません．)@refill

@item C-c C-t C-p
@itemx M-x texinfo-tex-print
@findex texinfo-tex-print
@c Print the file (or the part of the file) previously formatted with
@c @code{texinfo-tex-buffer} or @code{texinfo-tex-region}.@refill
@c 
前もって，@code{texinfo-tex-buffer}や@code{texinfo-tex-region}で書式化さ
れたファイル(またはファイルの一部)を印刷します．@refill
@end table

@c For @code{texinfo-tex-region} or @code{texinfo-tex-buffer} to work, the
@c file @emph{must} start with a @samp{\input texinfo} line and must
@c include an @code{@@settitle} line.  The file must end with @code{@@bye}
@c on a line by itself.  (When you use @code{texinfo-tex-region}, you must
@c surround the @code{@@settitle} line with start-of-header and
@c end-of-header lines.)@refill
@c 
@code{texinfo-tex-region}や@code{texinfo-tex-buffer}が動作するように，ファ
イルを@samp{\input texinfo}行で始める@emph{必要}があり，そして
@code{@@settitle}行を含める必要があります．ファイルは，単独の
@code{@@bye}行で終える必要があります．(@code{texinfo-tex-region}を使用す
るとき，@code{@@settitle}行を，start-of-headerとend-of-header行で囲む必
要があります．)@refill

@c @xref{Hardcopy}, for a description of the other @TeX{} related
@c commands, such as @code{tex-show-print-queue}.@refill
@c 
@code{tex-show-print-queue}のような，他の@TeX{}に関連するコマンドの記述
は，@xref{Hardcopy}.@refill

@node Texinfo Mode Summary,  , Printing, Texinfo Mode
@comment  node-name,  next,  previous,  up
@c @section Texinfo Mode Summary
@section Texinfoモードの概要

@c In Texinfo mode, each set of commands has default keybindings that
@c begin with the same keys.  All the commands that are custom-created
@c for Texinfo mode begin with @kbd{C-c}.  The keys are somewhat
@c mnemonic.@refill
@c 
Texinfoモードには，それぞれのコマンドの組には同じキーで始まるデフォルト
のキーバインドがあります．Texinfoモードのためにカスタムで作成された全て
のコマンドは@kbd{C-c}で始まります．キーは多少覚え易くなっています．
@refill

@c @subheading Insert Commands
@subheading 挿入コマンド

@c The insert commands are invoked by typing @kbd{C-c} twice and then the
@c first letter of the @@-command to be inserted.  (It might make more
@c sense mnemonically to use @kbd{C-c C-i}, for `custom insert', but
@c @kbd{C-c C-c} is quick to type.)@refill
@c 
挿入コマンドは，@kbd{C-c}を2度入力し，挿入する@@-コマンドの最初の文字を
入力し呼び出します．(それは，`カスタム挿入'に対する@kbd{C-c C-i}の使用よ
り記憶力が必要かもしれませんが，@kbd{C-c C-c}は，素早く入力できます．)
@refill

@example
@c C-c C-c c       @r{Insert} @samp{@@code}.
@c C-c C-c d       @r{Insert} @samp{@@dfn}.
@c C-c C-c e       @r{Insert} @samp{@@end}.
@c C-c C-c i       @r{Insert} @samp{@@item}.
@c C-c C-c n       @r{Insert} @samp{@@node}.
@c C-c C-c s       @r{Insert} @samp{@@samp}.
@c C-c C-c v       @r{Insert} @samp{@@var}.
@c C-c C-c @{       @r{Insert braces.}
@c C-c C-c ]
@c C-c C-c @}       @r{Move out of enclosing braces.}
@c 
C-c C-c c       @samp{@@code}を@r{挿入}．
C-c C-c d       @samp{@@dfn}を@r{挿入}．
C-c C-c e       @samp{@@end}を@r{挿入}．
C-c C-c i       @samp{@@item}を@r{挿入}．
C-c C-c n       @samp{@@node}を@r{挿入}．
C-c C-c s       @samp{@@samp}を@r{挿入}．
C-c C-c v       @samp{@@var}を@r{挿入}．
C-c C-c @{       @r{カッコを挿入．}
C-c C-c ]
C-c C-c @}       @r{閉じたカッコの外へ移動．}

@group
@c C-c C-c C-d     @r{Insert a node's section title}
@c                @r{in the space for the description}
@c                @r{in a menu entry line.}
@c 
C-c C-c C-d     @r{メニュー項目行で}
               @r{記述のためのスペースに}
               @r{ノードのセクションタイトルを挿入}
@end group
@end example

@c @subheading Show Structure
@subheading 構造の表示

@c The @code{texinfo-show-structure} command is often used within a
@c narrowed region.@refill
@c 
@code{texinfo-show-structure}コマンドは，小さな領域でよく使用されていま
す．@refill

@example
@c C-c C-s         @r{List all the headings.}
@c 
C-c C-s         @r{全ての見出しをリストアップします．}
@end example

@c @subheading The Master Update Command
@subheading マスター更新コマンド

@c The @code{texinfo-master-menu} command creates a master menu; and can
@c be used to update every node and menu in a file as well.@refill
@c 
@code{texinfo-master-menu}コマンドはマスターメニューを作成します．そして，
ファイルの全てのノードとメニューの更新にも使用可能です．@refill

@c Probably should use @tables in this section.
@example
@group
C-c C-u m
M-x texinfo-master-menu
@c                @r{Create or update a master menu.}
@c 
               @r{マスターメニューを作成更新します．}
@end group

@group
@c C-u C-c C-u m   @r{With @kbd{C-u} as a prefix argument, first}
@c                @r{create or update all nodes and regular}
@c                @r{menus, and then create a master menu.}
@c 
C-u C-c C-u m   @r{プレフィクス引数@kbd{C-u}を用いることで，}
               @r{最初に全てのノードと普通のメニューを作成更新し，}
               @r{そしてマスターメニューを作成する．}
@end group
@end example

@c @subheading Update Pointers
@subheading ポインタの更新

@c The update pointer commands are invoked by typing @kbd{C-c C-u} and
@c then either @kbd{C-n} for @code{texinfo-update-node} or @kbd{C-e} for
@c @code{texinfo-every-node-update}.@refill
@c 
ポインタを更新するコマンドは，@kbd{C-c C-u}と入力してから，
@code{texinfo-update-node}に対する@kbd{C-n}，または，
@code{texinfo-every-node-update}に対する@kbd{C-e}を入力します．@refill

@example
@c C-c C-u C-n     @r{Update a node.}
@c C-c C-u C-e     @r{Update every node in the buffer.}
@c 
C-c C-u C-n     @r{ノードの更新．}
C-c C-u C-e     @r{バッファの全てのノードの更新．}
@end example

@c @subheading Update Menus
@subheading メニューの更新

@c Invoke the  update menu commands by typing @kbd{C-c C-u}
@c and then either @kbd{C-m} for @code{texinfo-make-menu} or
@c @kbd{C-a} for @code{texinfo-all-menus-update}.  To update
@c both nodes and menus at the same time, precede @kbd{C-c C-u
@c C-a} with @kbd{C-u}.@refill
@c 
メニューの更新コマンドは，@kbd{C-c C-u}と入力してから，
@code{texinfo-make-menu}に対する@kbd{C-m}，または，
@code{texinfo-all-menus-update}に対する@kbd{C-a}を入力し呼び出してくださ
い．ノードとメニューの両方を同時に更新するため，@kbd{C-c C-u C-a}の前に
@kbd{C-u}を入力してください．@refill

@example
@c C-c C-u C-m     @r{Make or update a menu.}

C-c C-u C-m     @r{メニューの作成更新．}

@group
@c C-c C-u C-a     @r{Make or update all}
@c                @r{menus in a buffer.}
@c 
C-c C-u C-a     @r{バッファの全ての}
               @r{メニューの作成更新．}
@end group

@group
@c C-u C-c C-u C-a @r{With @kbd{C-u} as a prefix argument,}
@c                @r{first create or update all nodes and}
@c                @r{then create or update all menus.}
@c 
C-u C-c C-u C-a @r{プレフィクス引数@kbd{C-u}を用いることで，}
                @r{最初に全てのノードを作成更新し}
                @r{そして全てのメニューを作成更新します．}
@end group
@end example

@c @subheading Format for Info
@subheading Infoの書式化

@c The Info formatting commands that are written in Emacs Lisp are
@c invoked by typing @kbd{C-c C-e} and then either @kbd{C-r} for a region
@c or @kbd{C-b} for the whole buffer.@refill
@c 
Emacs Lispで書かれているInfoの書式化コマンドは，@kbd{C-c C-e}と入力して
から，領域に対し@kbd{C-r}，または，バッファ全体に対し@kbd{C-b}を入力しま
す．@refill

@c The Info formatting commands that are written in C and based on the
@c @code{makeinfo} program are invoked by typing @kbd{C-c C-m} and then
@c either @kbd{C-r} for a region or @kbd{C-b} for the whole buffer.@refill
@c 
Cで書かれていて，@code{makeinfo}プログラムをベースにしたInfoの書式化コマ
ンドは，@kbd{C-c C-m}と入力してから，領域に対し@kbd{C-r}，または，バッファ
全体に対し@kbd{C-b}を入力し呼び出します．@refill

@need 800
@noindent
@c Use the @code{texinfo-format@dots{}} commands:
@c 
@code{texinfo-format@dots{}}コマンドを使用します．

@example
@group
@c C-c C-e C-r     @r{Format the region.}
@c C-c C-e C-b     @r{Format the buffer.}
@c 
C-c C-e C-r     @r{領域の書式化．}
C-c C-e C-b     @r{バッファの書式化．}
@end group
@end example

@need 750
@noindent
@c Use @code{makeinfo}:
@c 
@code{makeinfo}を使用します．

@example
@c C-c C-m C-r     @r{Format the region.}
@c C-c C-m C-b     @r{Format the buffer.}
@c C-c C-m C-l     @r{Recenter the @code{makeinfo} output buffer.}
@c C-c C-m C-k     @r{Kill the @code{makeinfo} formatting job.}
@c 
C-c C-m C-r     @r{領域の書式化．}
C-c C-m C-b     @r{バッファの書式化．}
C-c C-m C-l     @r{@code{makeinfo}出力バッファの更新．}
C-c C-m C-k     @r{@code{makeinfo}書式化の停止．}
@end example

@c @subheading Typeset and Print
@subheading 植字と印刷

@c The @TeX{} typesetting and printing commands are invoked by typing
@c @kbd{C-c C-t} and then another control command: @kbd{C-r} for
@c @code{texinfo-tex-region}, @kbd{C-b} for @code{texinfo-tex-buffer},
@c and so on.@refill
@c 
@TeX{}の植字と印刷コマンドは，@kbd{C-c C-t}と入力してから，もう一つ制御コ
マンドを入力して呼び出します．@code{texinfo-tex-region}に対する@kbd{C-r}，
@code{texinfo-tex-buffer}に対する@kbd{C-b}等です．@refill

@example
@c C-c C-t C-r     @r{Run @TeX{} on the region.}
@c C-c C-t C-b     @r{Run} @code{texi2dvi} @r{on the buffer.}
@c C-c C-t C-i     @r{Run} @code{texindex}.
@c C-c C-t C-p     @r{Print the DVI file.}
@c C-c C-t C-q     @r{Show the print queue.}
@c C-c C-t C-d     @r{Delete a job from the print queue.}
@c C-c C-t C-k     @r{Kill the current @TeX{} formatting job.}
@c C-c C-t C-x     @r{Quit a currently stopped @TeX{} formatting job.}
@c C-c C-t C-l     @r{Recenter the output buffer.}
@c 
C-c C-t C-r     @r{@TeX{}を領域で実行．}
C-c C-t C-b     @code{texi2dvi}@r{をバッファで実行．}
C-c C-t C-i     @code{texindex}@r{の実行．}
C-c C-t C-p     @r{DVIファイルの印刷．}
C-c C-t C-q     @r{プリントキューの表示．}
C-c C-t C-d     @r{プリントキューからジョブを削除．}
C-c C-t C-k     @r{現在の@TeX{}書式化の停止．}
C-c C-t C-x     @r{現在停止中の@TeX{}書式化を終了．}
C-c C-t C-l     @r{出力バッファの更新．}
@end example

@c @subheading Other Updating Commands
@subheading その他の更新コマンド

@c The remaining updating commands do not have standard keybindings because
@c they are rarely used.
@c 
残りの更新コマンドは滅多に使用されないのでキーバインドはありません．

@example
@group
@c M-x texinfo-insert-node-lines
@c                @r{Insert missing @code{@@node} lines in region.}
@c                @r{With @kbd{C-u} as a prefix argument,}
@c                @r{use section titles as node names.}
@c 
M-x texinfo-insert-node-lines
               @r{領域に足りない@code{@@node}行を挿入．}
               @r{プレフィクス引数@kbd{C-u}を用いることで，}
               @r{セクションタイトルをノード名として使用．}
@end group

@group
@c M-x texinfo-multiple-files-update
@c                @r{Update a multi-file document.}
@c                @r{With @kbd{C-u 2} as a prefix argument,}
@c                @r{create or update all nodes and menus}
@c                @r{in all included files first.}
@c 
M-x texinfo-multiple-files-update
               @r{複数ファイルのドキュメントの更新．}
               @r{プレフィクス引数@kbd{C-u 2}を用いることで，}
               @r{最初に全てのインクルードファイルを}
               @r{作成更新．}
@end group

@group
@c M-x texinfo-indent-menu-description
@c                @r{Indent descriptions.}
@c 
M-x texinfo-indent-menu-description
               @r{記述の字下げ．}
@end group

@group
@c M-x texinfo-sequential-node-update
@c                @r{Insert node pointers in strict sequence.}
@c 
M-x texinfo-sequential-node-update
               @r{厳密な順序でノードポインタの挿入．}
@end group
@end example


@node Beginning a File
@c @chapter Beginning a Texinfo File
@chapter Texinfoファイルを始める
@cindex Beginning a Texinfo file
@cindex Texinfo file beginning
@cindex File beginning

@c Certain pieces of information must be provided at the beginning of a
@c Texinfo file, such as the name for the output file(s), the title of the
@c document, and the Top node.
@c 
情報の部品は，Texinfoファイルの最初に提供する必要があり，それは，出力ファ
イルの名前，ドキュメントタイトル，そしてTopノードです．@refill

@c This chapter expands on the minimal complete Texinfo source file
@c previously given (@pxref{Six Parts}).
@c 
この章では，以前に見せた(@pxref{Six Parts})最小限の完全なTexinfoソースファ
イルを拡張していきます．

@menu
* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                   have the right to use and share software.
@end menu


@node Sample Beginning
@c @section Sample Texinfo File Beginning
@section Texinfoファイルの始まりのサンプル

@cindex Example beginning of Texinfo file 

@c The following sample shows what is needed.  The elements given here are
@c explained in more detail in the following sections.  Other commands are
@c often included at the beginning of Texinfo files, but the ones here are
@c the most critical.
@c 
以下のサンプルは，必要なものを表示しています．以下で与えられている要素は，
それ以降のセクションで詳細に説明します．それ以外のコマンドで，Texinfoファ
イルの最初に含められることが多いものもありますが，ここにあるものが最も重
要です．

@c @xref{GNU Sample Texts}, for the full texts to be used in GNU manuals.
@c 
GNUマニュアルで使用されている完全なテキストは，@xref{GNU Sample Texts}.

@example
\input texinfo   @@c -*-texinfo-*-
@@c %**start of header
@@setfilename @var{infoname}.info
@@settitle @var{name-of-manual} @var{version}
@@c %**end of header

@@copying
This manual is for @var{program}, version @var{version}.

Copyright @@copyright@{@} @var{years} @var{copyright-owner}.

@group
@@quotation
Permission is granted to @dots{}
@@end quotation
@@end copying
@end group

@group
@@titlepage
@@title @var{name-of-manual-when-printed}
@@subtitle @var{subtitle-if-any}
@@subtitle @var{second-subtitle}
@@author @var{author}
@end group

@group
@@c  The following two commands
@@c  start the copyright page.
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@end group

Published by @dots{}
@@end titlepage

@@c So the toc is printed in the right place.
@@contents

@@ifnottex
@@node Top
@@top @var{title}

@@insertcopying
@@end ifnottex

@group
@@menu
* First Chapter::    Getting started @dots{}
* Second Chapter::          @dots{}
 @dots{}
* Copying::          Your rights and freedoms.
@@end menu
@end group

@group
@@node First Chapter
@@chapter First Chapter

@@cindex first chapter
@@cindex chapter, first
@dots{}
@end group
@end example


@node Texinfo File Header
@c @section Texinfo File Header
@section Texinfoファイルのヘッダ
@cindex Header for Texinfo files
@cindex Texinfo file header

@c Texinfo files start with at least three lines that provide Info and
@c @TeX{} with necessary information.  These are the @code{\input texinfo}
@c line, the @code{@@settitle} line, and the @code{@@setfilename} line.
@c 
Texinfoファイルは，Infoと@TeX{}に必要な情報を提供する少なくとも三行から始
めます．これらは，@code{\input texinfo}行，@code{@@settitle}行，そして
@code{@@setfilename}行です．

@c Also, if you want to format just part of the Texinfo file, you must
@c write the @code{@@settitle} and @code{@@setfilename} lines between
@c start-of-header and end-of-header lines.  The start- and end-of-header
@c lines are optional, but they do no harm, so you might as well always
@c include them.
@c 
また，Texinfoファイルの一部で@TeX{}を実行したい場合，@code{@@settitle}と
@code{@@setfilename}行を，start-of-headerとend-of-header行の間に書く必要
があります．start-of-headerとend-of-headerの行はオプションですが無害なの
で，常に含めた方が良いでしょう．

@c Any command that affects document formatting as a whole makes sense to
@c include in the header.  @code{@@synindex} (@pxref{synindex}), for
@c instance, is another command often included in the header.  @xref{GNU
@c Sample Texts}, for complete sample texts.
@c 
ドキュメント全体のの書式化に影響のあるコマンドは，ヘッダに含める価値があ
ります．例えば，@code{@@synindex} (@pxref{synindex})はヘッダに含められる
ことが多いもう一つのコマンドです．見本のテキストの完全なものは，
@xref{GNU Sample Texts}.

@c Thus, the beginning of a Texinfo file generally looks like this:
@c 
このため，Texinfoファイルの始まりは以下のようになります．

@example
@group
\input texinfo   @@c -*-texinfo-*-
@@c %**start of header
@@setfilename sample.info
@@settitle Sample Manual 1.0
@@c %**end of header
@end group
@end example

@menu
* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.
@end menu


@node First Line
@c @subsection The First Line of a Texinfo File
@subsection Texinfoファイルの最初の行
@cindex First line of a Texinfo file
@cindex Beginning line of a Texinfo file
@cindex Header of a Texinfo file

@c Every Texinfo file that is to be the top-level input to @TeX{} must begin
@c with a line that looks like this:
@c 
@TeX{}に入力する，最上位となるすべてのTexinfoファイルは，以下の行で始め
る必要があります．

@example
\input texinfo   @@c -*-texinfo-*-
@end example

@noindent
@c This line serves two functions:
@c 
この行は，二つの機能を提供します．

@enumerate
@item
@c When the file is processed by @TeX{}, the @samp{\input texinfo} command
@c tells @TeX{} to load the macros needed for processing a Texinfo file.
@c These are in a file called @file{texinfo.tex}, which should have been
@c installed on your system along with either the @TeX{} or Texinfo
@c software.  @TeX{} uses the backslash, @samp{\}, to mark the beginning of
@c a command, exactly as Texinfo uses @samp{@@}.  The @file{texinfo.tex}
@c file causes the switch from @samp{\} to @samp{@@}; before the switch
@c occurs, @TeX{} requires @samp{\}, which is why it appears at the
@c beginning of the file.
@c 
ファイルが@TeX{}で処理されるとき，@samp{\input texinfo}コマンドは，
Texinfoファイルを処理するため必要なマクロを，@TeX{}にロードするよう伝え
ます．これらは@file{texinfo.tex}と呼ばれるファイルにあり，@TeX{}または
Texinfo ソフトウェアのいずれかでシステムにインストールされているはずです．
@TeX{}はバックスラッシュ@samp{\}をコマンドの始めの印として使用し，それは
ちょうどTexinfoが使用する@samp{@@}のようなものです．@file{texinfo.tex}ファ
イルは，@samp{\}を@samp{@@}に切替えます．切替える前に@TeX{}は@samp{\}を
要求し，それがファイルの最初に現れる理由です．

@item
@c When the file is edited in GNU Emacs, the @samp{-*-texinfo-*-} mode
@c specification tells Emacs to use Texinfo mode.
@c 
ファイルをGNU Emacsで編集するとき，@samp{-*-texinfo-*-}モード指定は，
EmacsにTexinfoモードを使用するように伝えます．
@end enumerate


@node Start of Header
@c @subsection Start of Header
@subsection ヘッダの始まり
@cindex Start of header line

@c A start-of-header line is a Texinfo comment that looks like this:
@c 
start-of-header行は以下のようなTexinfoのコメントです．

@example
@@c %**start of header
@end example

@c Write the start-of-header line on the second line of a Texinfo file.
@c Follow the start-of-header line with @code{@@setfilename} and
@c @code{@@settitle} lines and, optionally, with other commands that
@c globally affect the document formatting, such as @code{@@synindex} or
@c @code{@@footnotestyle}; and then by an end-of-header line (@pxref{End of
@c Header}).
@c 
Texinfoファイルの二行目に，start-of-header行を書いてください．
start-of-header行に続けて，@code{@@setfilename}と@code{@@settitle}行と，
オプションで@code{@@smallbook}や@code{@@footnotestyle}のようなドキュメン
ト全体に影響を与えるその他のコマンド行を書いてください．そして
end-of-header行が続きます(@pxref{End of Header})．

@c The start- and end-of-header lines allow you to format only part of a
@c Texinfo file for Info or printing.  @xref{texinfo-format commands}.
@c 
start-of-headerとend-of-headerの行で，Texinfoファイルの一部だけをInfoや
印刷物に書式化することが可能になります．@xref{texinfo-format commands}.

@c The odd string of characters, @samp{%**}, is to ensure that no other
@c comment is accidentally taken for a start-of-header line.  You can
@c change it if you wish by setting the @code{tex-start-of-header} and/or
@c @code{tex-end-of-header} Emacs variables.  @xref{Texinfo Mode Printing}.
@c 
@samp{%**}という奇妙な文字列は，他のコメントが偶然start-of-header行だと
思われないことを保証します．Emacs変数@code{tex-start-of-header}と/や
@code{tex-end-of-header}を設定することで，希望のものに変更することが可能
です．@xref{Texinfo Mode Printing}.


@node setfilename
@c @subsection @code{@@setfilename}: Set the output file name
@subsection @code{@@setfilename}:出力ファイル名を設定する
@findex setfilename
@cindex Texinfo requires @code{@@setfilename}

@c In order to serve as the primary input file for either @code{makeinfo}
@c or @TeX{}, a Texinfo file must contain a line that looks like this:
@c 
@code{makeinfo}や@TeX{}のための主要な入力ファイルとして供給するため，
Texinfoファイルには以下の行を含める必要があります．

@example
@@setfilename @var{info-file-name}
@end example

@c Write the @code{@@setfilename} command at the beginning of a line and
@c follow it on the same line by the Info file name.  Do not write anything
@c else on the line; anything on the line after the command is considered
@c part of the file name, including what would otherwise be a
@c comment.
@c 
@code{@@setfilename}コマンドを行の最初に書き，同じ行にInfoファイル名を続
けてください．その行に他のものは書かないでください，その行のコマンド後は，
コメントであっても，全てファイル名の一部と考えられます．

@cindex Ignored before @code{@@setfilename}
@cindex @samp{\input} source line ignored
@c The Info formatting commands ignore everything written before the
@c @code{@@setfilename} line, which is why the very first line of
@c the file (the @code{\input} line) does not show up in the output.
@c 
Info書式化コマンドは，@code{@@setfilename}行の前に書かれている全てのもの
を無視し，それはファイルの最初の行(@code{\input}行)を出力に表示しません．

@c The @code{@@setfilename} line specifies the name of the output file to
@c be generated.  This name must be different from the name of the Texinfo
@c file.  There are two conventions for choosing the name: you can either
@c remove the extension (such as @samp{.texi}) entirely from the input file
@c name, or, preferably, replace it with the @samp{.info} extension.
@c 
@code{@@setfilename}行で生成する出力ファイルの名前を指定します．この名前
はTexinfoファイルの名前とは異なるものにする必要があります．名前を選ぶ慣
習が二つあります．入力ファイル名から(@samp{.texi}のような)拡張子を削除す
る，またはより望ましい@samp{.info}拡張子で置換するいずれかを行なうことが
可能です．

@cindex Length of file names
@cindex File name collision
@cindex Info file name, choosing
@c Although an explicit @samp{.info} extension is preferable, some
@c operating systems cannot handle long file names.  You can run into a
@c problem even when the file name you specify is itself short enough.
@c This occurs because the Info formatters split a long Info file into
@c short indirect subfiles, and name them by appending @samp{-1},
@c @samp{-2}, @dots{}, @samp{-10}, @samp{-11}, and so on, to the original
@c file name.  (@xref{Tag and Split Files}.)  The subfile name
@c @file{texinfo.info-10}, for example, is too long for old systems with a
@c 14-character limit on filenames; so the Info file name for this document
@c is @file{texinfo} rather than @file{texinfo.info}.  When @code{makeinfo}
@c is running on operating systems such as MS-DOS which impose severe
@c limits on file names, it may remove some characters from the original
@c file name to leave enough space for the subfile suffix, thus producing
@c files named @file{texin-10}, @file{gcc.i12}, etc.
@c 
明示的な@samp{.info}拡張子が好まれますが，オペレーティングシステムには，
長いファイル名を処理できないものもあります．指定したファイル名が十分短い
ときでも問題となるはずです．これは，Infoフォーマッタが長いInfoファイルを
短い間接的なサブファイルに分割し，@samp{-1}，@samp{-2}， @dots{}，
@samp{-10}，@samp{-11}等を，元のファイルの名前に加えるためです
(@pxref{Tag and Split Files, , Tag Files and Split Files})．例えば，サブ
ファイル名@file{texinfo.info-10}は，ファイル名に14文字の制限のある古いシ
ステムでは長過ぎます．そのため，このドキュメントのInfoファイル名は，
@file{texinfo.info}ではなく@file{texinfo}としています．@code{makeinfo} 
を，MSーDOSのようなファイル名に重大な制限を加えるオペレーティングシステ
ムで実行するとき，それは元のファイル名から数文字削除し，サブファイルのサ
フィックスに十分なものだけ残し，そしてファイル名は，@file{texin-10}，
@file{gcc.i12}等になります．

@c When producing HTML output, @code{makeinfo} will replace any extension
@c with @samp{html}, or add @samp{.html} if the given name has no
@c extension.
@c 
HTML出力を生成しているとき，@code{makeinfo}は拡張子を@samp{html}に置換す
る，または，拡張子が無い場合は@samp{.html}を追加します．

@pindex texinfo.cnf
@c The @code{@@setfilename} line produces no output when you typeset a
@c manual with @TeX{}, but it is nevertheless essential: it opens the
@c index, cross-reference, and other auxiliary files used by Texinfo, and
@c also reads @file{texinfo.cnf} if that file is present on your system
@c (@pxref{Preparing for TeX,, Preparing for @TeX{}}).
@c 
@code{@@setfilename}行は，@TeX{}でマニュアルを植字するとき出力を作成しま
せんが，それにも関わらず不可欠です．それは，索引，相互参照，そしてその他
のTexinfoファイルで使用される追加ファイルを開き，システムに
@file{texinfo.cnf}ファイルがあれば，それも読み込みます(@pxref{Preparing
for TeX,, Preparing for @TeX{}})．


@node settitle
@c @subsection @code{@@settitle}: Set the document title
@subsection @code{@@settitle}:ドキュメントのタイトルを設定する
@findex settitle

@c In order to be made into a printed manual, a Texinfo file must contain
@c a line that looks like this:
@c 
印刷されたマニュアルにするため，Texinfoファイルは，以下のような行を含め
る必要があります．

@example
@@settitle @var{title}
@end example

@c Write the @code{@@settitle} command at the beginning of a line and
@c follow it on the same line by the title.  This tells @TeX{} the title to
@c use in a header or footer.  Do not write anything else on the line;
@c anything on the line after the command is considered part of the title,
@c including what would otherwise be a comment.
@c 
@code{@@settitle}コマンドを行の最初に書き，同じ行にタイトルを続けてくだ
さい．これは，@TeX{}にヘッダやフッタで使用するタイトルを伝えます．その行
には他に何も書かないでください．コマンド以降のその行は，タイトルの一部と
考えられ，それには他の場所ではコメントになるもの含まれます．

@c The @code{@@settitle} command should precede everything that generates
@c actual output in @TeX{}.
@c 
@code{@@settitle}コマンドは，@TeX{}で実際に出力を生成するすべてのものに
前置すべきです．

@cindex <title> HTML tag
@c In the HTML file produced by @command{makeinfo}, @var{title} also serves
@c as the document @samp{<title>} and the default document description in
@c the @samp{<head>} part; see @ref{documentdescription}, for how to change
@c that.
@c 
@command{makeinfo}で生成されるHTMLファイルには，@var{title}がドキュメン
トの@samp{<title>}として提供され，@samp{<head>}部分にあるデフォルトのド
キュメントの説明になります．それを変更する方法は，
@ref{documentdescription}を参照してください．

@c The title in the @code{@@settitle} command does not affect the title as
@c it appears on the title page.  Thus, the two do not need not match
@c exactly.  A practice we recommend is to include the version or edition
@c number of the manual in the @code{@@settitle} title; on the title page,
@c the version number generally appears as a @code{@@subtitle} so it would
@c be omitted from the @code{@@title}.  (@xref{titlepage}.)
@c 
@code{@@settitle}コマンドのタイトルは，通常タイトルページのタイトルと同
じですが，タイトルページに現れるタイトルに影響しません．このため，二つは
正確に一致する必要はありません．このため，@code{@@settitle}コマンドのタ
イトルは，タイトルページに現れるタイトルの，短い，あるいは展開されたバー
ジョンにすることが可能です(@pxref{titlepage, , @code{@@titlepage}})．
@refill

@c Conventionally, when @TeX{} formats a Texinfo file for double-sided
@c output, the title is printed in the left-hand (even-numbered) page
@c headings and the current chapter title is printed in the right-hand
@c (odd-numbered) page headings.  (@TeX{} learns the title of each chapter
@c from each @code{@@chapter} command.)  By default, no page footer is
@c printed.
@c 
慣習では，@TeX{}でTexinfoファイルを両面出力物のための書式化するとき，タ
イトルは左側(偶数)のページの見出しに印刷され，現在の章のタイトルは右側
(奇数)のページの見出しに印刷されます．(@TeX{}は，それぞれの
@code{@@chapter}コマンドからの，それぞれの章のタイトルを記憶します．)デ
フォルトで，ページフッタは印刷されません．@refill

@c Even if you are printing in a single-sided style, @TeX{} looks for an
@c @code{@@settitle} command line, in case you include the manual title
@c in the heading.
@c 
片面スタイルの場合でさえ，@TeX{}は@code{@@settitle}コマンド行を探し，マ
ニュアルタイトルを見出しに含める場合に備えます．

@c @TeX{} prints page headings only for that text that comes after the
@c @code{@@end titlepage} command in the Texinfo file, or that comes
@c after an @code{@@headings} command that turns on headings.
@c (@xref{headings on off, , The @code{@@headings} Command}, for more
@c information.)
@c 
@TeX{}は，Texinfoファイルの@code{@@end titlepage}以降や，見出しを付ける
@code{@@headings}コマンド以降のテキストに対してのみ，ページ見出しを印刷
します(詳細は，@pxref{headings on off, , The @code{@@headings} Command})．

@c You may, if you wish, create your own, customized headings and footings.
@c @xref{Headings}, for a detailed discussion of this.
@c 
希望があれば，独自のカスタム見出しとフッタを作成することが可能です．この
処理の詳細な記述は，@xref{Headings, , Page Headings}.


@node End of Header
@c @subsection End of Header
@subsection ヘッダの終り
@cindex End of header line

@c Follow the header lines with an @w{end-of-header} line, which is a
@c Texinfo comment that looks like this:
@c 
ヘッダ行に，以下のようなTexinfoコメントになっている@w{end-of-header}を続
けてください．

@example
@@c %**end of header
@end example

@xref{Start of Header}.


@node Document Permissions
@c @section Document Permissions
@section ドキュメントの許可
@cindex Document Permissions
@cindex Copying Permissions

@c The copyright notice and copying permissions for a document need to
@c appear in several places in the various Texinfo output formats.
@c Therefore, Texinfo provides a command (@code{@@copying}) to declare
@c this text once, and another command (@code{@@insertcopying}) to
@c insert the text at appropriate points.
@c 
ドキュメントに対する著作権の注意とコピーの許可は，様々なTexinfo出力形式
で複数の場所に表す必要があります．このため，Texinfoはこのテキストを一度
宣言するコマンド(@code{@@copying})と，適切な場所にテキストを挿入するため
のもう一つのコマンド(@code{@@insertcopying})を提供しています．

@menu
* copying::                 Declare the document's copying permissions.
* insertcopying::           Where to insert the permissions.
@end menu


@node copying
@c @subsection @code{@@copying}: Declare Copying Permissions
@subsection @code{@@copying}:コピーの許可を宣言する
@findex copying

@c The @code{@@copying} command should be given very early in the document;
@c the recommended location is right after the header material
@c (@pxref{Texinfo File Header}).  It conventionally consists of a sentence
@c or two about what the program is, identification of the documentation
@c itself, the legal copyright line, and the copying permissions.  Here is
@c a skeletal example:
@c 
@code{@@copying}コマンドは，ドキュメントのなるべく最初の部分で提供すべき
です．推奨される場所はヘッダの材料の(@pxref{Texinfo File Header})直後で
す．それは慣習的に，プログラムが何かという一つか二つの文，ドキュメント自
身の証明，そしてコピーの許可から成り立っています．骨組みの例は以下のよう
になります．

@example
@@copying
This manual is for @var{program} (version @var{version}, updated
@var{date}), which @dots{}

Copyright @@copyright@{@} @var{years} @var{copyright-owner}.

@@quotation
Permission is granted to @dots{}
@@end quotation
@@end copying
@end example

@c The @code{@@quotation} has no legal significance; it's there to improve
@c readability in some contexts.
@c 
@code{@@quotation}は法的には重要性ではありません．前後関係の読み易さを改
善するために存在します．

@c @xref{GNU Sample Texts}, for the full text to be used in GNU manuals.
@c @xref{GNU Free Documentation License}, for the license itself under
@c which GNU and other free manuals are distributed.  You need to include
@c the license as an appendix to your document.
@c 
GNUのマニュアルで使用されている完全なテキストは，@xref{GNU Sample
Texts}.  GNUやそれ以外のフリーなマニュアル自身を配布するライセンスは，
@xref{GNU Free Documentation License}.  ドキュメントの付録としてライセン
スを含める必要があります．

@c The text of @code{@@copying} is output as a comment at the beginning of
@c Info, HTML, and XML output files.  It is @emph{not} output implicitly in
@c plain text or @TeX{}; it's up to you to use @code{@@insertcopying} to
@c emit the copying information.  See the next section for details.
@c 
@code{@@copying}のテキストは，Info，HTML，そしてXMLの出力ファイルの最初
に，コメントとして出力されます．プレーンテキストや@TeX{}では，暗黙的に出
力され@emph{ません}．コピーの情報を発行するための@code{@@insertcopying} 
の使用はお任せします．詳細は次のセクションを参照してください．

@findex copyright
@c The @code{@@copyright@{@}} command generates a @samp{c} inside a circle
@c in output formats that support this (print and HTML).  In the other
@c formats (Info and plain text), it generates @samp{(C)}.  The copyright
@c notice itself has the following legally defined sequence:
@c 
@code{@@copyright@{@}}は，丸の中の@samp{c}の出力をサポートしている(印刷
とHTML)の出力形式ではそれを生成します．それ以外のフォーマット(Infoとプレー
ンテキスト)では，@samp{(C)}を生成します．著作権の注意には，以下の法的に
定義された順番があります．

@example
Copyright @copyright{} @var{years} @var{copyright-owner}.
@end example

@cindex Copyright word, always in English
@c The word `Copyright' must always be written in English, even if the
@c document is otherwise written in another language.  This is due to
@c international law.
@c 
単語`Copyright'は，たとえ他の言語でマニュアルが書かれている場合でも，常
に英語で書く必要があります．これは国際的な法律のためです．

@cindex Years, in copyright line
@c The list of years should include all years in which a version was
@c completed (even if it was released in a subsequent year).  Ranges are
@c not allowed; each year must be written out individually and in full,
@c separated by commas.
@c 
年のリストは，バージョンが完了したすべての年を(たとえ連続した年にリリー
スされていたとしても)含めるべきです．範囲指定は許可されていません．それ
ぞれの年を，個別にカンマで分けながらすべて書き出す必要があります．

@cindex Copyright holder for FSF works
@cindex Holder of copyright for FSF works
@cindex Owner of copyright for FSF works
@c The copyright owner (or owners) is whoever holds legal copyright on the
@c work.  In the case of works assigned to the FSF, the owner is `Free
@c Software Foundation, Inc.'.
@c 
著作権の所有者(達)は，その作業に対して法的な著作権を保持するものです．作
業をFSFに上としている状況では，所有者は`Free Software Foundation, Inc.' 
になります．

@c The copyright `line' may actually be split across multiple
@c lines, both in the source document and in the output.  This often
@c happens for documents with a long history, having many different years
@c of publication.
@c 
著作権の`行'は，ソースドキュメントと出力の両方で，実際に複数の行に跨って
分離されていてもかまいません．これは，ドキュメントに長い歴史があり，異な
る出版年が多いときよくあります．

@c @xref{Copyright Notices,,,maintain,GNU Maintenance Instructions}, for
@c additional information.
@c 
追加情報は，@xref{Copyright Notices,,,maintain,GNU Maintenance
Instructions}.


@node insertcopying
@c @subsection @code{@@insertcopying}: Include Permissions Text
@subsection @code{@@insertcopying}:許可のテキストを含める
@findex insertcopying
@cindex Copying text, including
@cindex Permissions text, including
@cindex Including permissions text

@c The @code{@@insertcopying} command is simply written on a line by
@c itself, like this:
@c 
@code{@@insertcopying}コマンドは，単純に単独行に以下のように書きます．

@example
@@insertcopying
@end example

@c This inserts the text previously defined by @code{@@copying}.  To meet
@c legal requirements, it must be used on the copyright page in the printed
@c manual (@pxref{Copyright}).
@c 
これは，@code{@@copying}で前もって定義されているテキストを挿入します．法
的な要求に対処するため，印刷されたマニュアルの著作権のページで使用する必
要があります．

@c We also strongly recommend using @code{@@insertcopying} in the Top node
@c of your manual (@pxref{The Top Node}), although it is not required
@c legally.  Here's why:
@c 
マニュアルのTopノード(@pxref{The Top Node})で@code{@@insertcopying}を使
用することを強く推奨しますが，それは法的には要求されていません．以下はそ
の理由です．

@c The @code{@@copying} command itself causes the permissions text to
@c appear in an Info file @emph{before} the first node.  The text is also
@c copied into the beginning of each split Info output file, as is legally
@c necessary.  This location implies a human reading the manual using Info
@c does @emph{not} see this text (except when using the advanced Info
@c command @kbd{g *}).  Therefore, an explicit @code{@@insertcopying}
@c in the Top node makes it apparent to readers that the manual is free.
@c 
@code{@@copying}コマンド自身で，許可のテキストをInfoファイルの最初のノー
ドの@emph{前に}現します．そのテキストは，それぞれのInfo出力ファイルの先
頭にも，法的な必要性からそのままコピーされます．この場所では，Infoを使用
してマニュアルを読んでいる人がこのテキストを見ることは@emph{ありません}
(例外は，高度なInfoコマンド@kbd{g *}を使用しているときです)．そのため，
明示的に@code{@@insertcopying}をTopノードに書くことで，マニュアルがフリー
だということが読者に対して明らかになります．

@c Similarly, the @code{@@copying} text is automatically included at the
@c beginning of each HTML output file, as an HTML comment.  Again, this
@c text is not visible (unless the reader views the HTML source).  And
@c therefore again, the @code{@@insertcopying} in the Top node is valuable
@c because it makes the copying permissions visible and thus promotes
@c freedom.
@c 
同様に，@code{@@copying}のテキストは，それぞれのHTML出力ファイルの先頭に，
コメントとして，自動的に含められます．また，このテキストは，(読者がHTML 
のソースを見ない限り)見ることができません．そしてまたそのために，コピー
の許可を見えるようにし，フリーを押し進めていくために，
@code{@@insertcopying}をTopノードに書くことが重要です．

@c The permissions text defined by @code{@@copying} also appears
@c automatically at the beginning of the XML output file.
@c 
@code{@@copying}で定義される許可のテキストは，XML出力ファイルの最初にも，
自動的に表示されます．


@node Titlepage & Copyright Page
@c @section Title and Copyright Pages
@section タイトルと著作権ページ

@c In hard copy output, the manual's name and author are usually printed on
@c a title page.  Copyright information is usually printed on the back of
@c the title page.
@c 
ハードコピーの出力では，マニュアルの名前と著作者は，通常はタイトルページ
に印刷されます．著作権情報は通常，タイトルページの裏に印刷されます．

@c The title and copyright pages appear in the printed manual, but not in
@c the Info file.  Because of this, it is possible to use several slightly
@c obscure @TeX{} typesetting commands that cannot be used in an Info file.
@c In addition, this part of the beginning of a Texinfo file contains the
@c text of the copying permissions that appears in the printed manual.
@c 
タイトルと著作権ページは印刷されたマニュアルには現れますが，Infoファイル
には現れません．このため，Infoファイルで使用不可能な，分かりにくい@TeX{} 
植字コマンドを，いくつか使用することが可能です．さらに，Texinfoファイル
の始めのこの部分は，印刷されたマニュアルに現れる著作権の許可のテキストを
含んでいます．

@cindex Title page, for plain text
@cindex Copyright page, for plain text
@c You may wish to include titlepage-like information for plain text
@c output.  Simply place any such leading material between
@c @code{@@ifplaintext} and @code{@@end ifplaintext}; @command{makeinfo}
@c includes this when writing plain text (@samp{--no-headers}), along with
@c an @code{@@insertcopying}.
@c 
プレーンテキスト出力に対し，タイトルページのような情報を含めたい場合もあ
るでしょう．単純に，@code{@@ifplaintext}と@code{@@end ifplaintext}の間に，
そのような導入素材を配置してください．@command{makeinfo}は，これをプレー
ンテキスト(@samp{--no-headers})に書くときに，@code{@@insertcopying}と一
緒に含めます．

@menu
* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The @code{@@titlefont}, @code{@@center},
                                 and @code{@@sp} commands.
* title subtitle author::       The @code{@@title}, @code{@@subtitle},
                                 and @code{@@author} commands.
* Copyright::                   How to write the copyright notice and
                                 include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                 copyright pages.
* headings on off::             An option for turning headings on and off
                                 and double or single sided printing.
@end menu


@node titlepage
@subsection @code{@@titlepage}
@cindex Title page
@findex titlepage

@c Start the material for the title page and following copyright page
@c with @code{@@titlepage} on a line by itself and end it with
@c @code{@@end titlepage} on a line by itself.
@c 
タイトルページと，それに続く著作権ページのための材料は，
@code{@@titlepage}の単独行で開始し，@code{@@end titlepage}の単独行で終了
します．

@c The @code{@@end titlepage} command starts a new page and turns on page
@c numbering.  (@xref{Headings, , Page Headings}, for details about how to
@c generate page headings.)  All the material that you want to appear on
@c unnumbered pages should be put between the @code{@@titlepage} and
@c @code{@@end titlepage} commands.  You can force the table of contents to
@c appear there with the @code{@@setcontentsaftertitlepage} command
@c (@pxref{Contents}).
@c 
@code{@@end titlepage}コマンドは，新しいページから始め，ページの番号付け
を開始します．(ページ見出し生成の詳細は，@xref{Headings, , Page
Headings}.)番号付けされないページにしたいものは，@code{@@titlepage}と
@code{@@end titlepage}コマンドの間に書きます．
@code{@@setcontentsaftertitlepage}コマンドで，目次をその場所に表示するこ
とが可能です(@pxref{Contents})．

@findex page@r{, within @code{@@titlepage}}
@c By using the @code{@@page} command you can force a page break within the
@c region delineated by the @code{@@titlepage} and @code{@@end titlepage}
@c commands and thereby create more than one unnumbered page.  This is how
@c the copyright page is produced.  (The @code{@@titlepage} command might
@c perhaps have been better named the @code{@@titleandadditionalpages}
@c command, but that would have been rather long!)
@c 
@code{@@page}コマンドを使用することで，@code{@@titlepage}と@code{@@end
titlepage}コマンドで線引きをした領域での改ページが可能となり，一ページ以
上のページ付けされないものが作成可能となります．これは，著作権ページを作
成する方法です．(@code{@@titlepage}コマンドは，おそらく
@code{@@titleandadditionalpages}と名付けた方がいいのですが，それは長すぎ
ます！)

@c When you write a manual about a computer program, you should write the
@c version of the program to which the manual applies on the title page.
@c If the manual changes more frequently than the program or is independent
@c of it, you should also include an edition number@footnote{We have found
@c that it is helpful to refer to versions of independent manuals as
@c `editions' and versions of programs as `versions'; otherwise, we find we
@c are liable to confuse each other in conversation by referring to both
@c the documentation and the software with the same words.} for the manual.
@c This helps readers keep track of which manual is for which version of
@c the program.  (The `Top' node should also contain this information; see
@c @ref{The Top Node}.)
@c 
コンピュータプログラムのマニュアルを書くとき，マニュアルが適合するプログ
ラムのバージョンをタイトルページに書くべきです．マニュアルがプログラムよ
り変更頻度が高い，または，プログラムに依存しない場合，マニュアルのエディ
ション番号@footnote{我々は，独立したマニュアルのバージョンを`edition'と
して，プログラムのバージョンを`version'として参照することが便利だと分か
りました．そうしない場合，慣習的にドキュメントとソフトウェアの両方を同じ
単語で言及することで，お互いに混乱しやすいことが分かりました．}を含める
べきです．これは，マニュアルがどのプログラムのバージョンに対するものかを，
読者が追跡する助けとなります(`Top'ノードは，この情報も含みます．
@pxref{makeinfo top, , @code{@@top}})．

@c Texinfo provides two main methods for creating a title page.  One method
@c uses the @code{@@titlefont}, @code{@@sp}, and @code{@@center} commands
@c to generate a title page in which the words on the page are
@c centered.
@c 
Texinfoでは，タイトルページの作成に対して二つの主な方法を提供しています．
一つの方法は，@code{@@titlefont}，@code{@@sp}，そして@code{@@center}コマ
ンドを，ページの単語を中央揃えしたタイトルページを生成するために使います．

@c The second method uses the @code{@@title}, @code{@@subtitle}, and
@c @code{@@author} commands to create a title page with black rules under
@c the title and author lines and the subtitle text set flush to the
@c right hand side of the page.  With this method, you do not specify any
@c of the actual formatting of the title page.  You specify the text
@c you want, and Texinfo does the formatting.
@c 
二番目の方法は，@code{@@title}，@code{@@subtitle}，そして@code{@@author} 
コマンドを，タイトルの下に黒い罫線をつけてタイトルページを作成し，著作者
の行とサブタイトルテキストをページで右寄せするために使用します．この方法
では，タイトルページの実際の書式化を何も指定しません．テキストを望み通り
に指定し，Texinfoは書式化を行います．

@c You may use either method, or you may combine them; see the examples in
@c the sections below.
@c 
どちらか一方の方法を使用する，または，両方を組み合わせてもかまいません．
以下のセクションでサンプルを参照してください．

@findex shorttitlepage
@cindex Bastard title page
@cindex Title page, bastard
@c For extremely simple applications, and for the bastard title page in
@c traditional book front matter, Texinfo also provides a command
@c @code{@@shorttitlepage} which takes the rest of the line as the title.
@c The argument is typeset on a page by itself and followed by a blank
@c page.
@c 
非常に簡単なアプリケーションのためと，伝統的な本の前部の規格外のタイトル
ページのため，Texinfoはタイトルとしてその行の残りの部分を引数とする
@code{@@shorttitlepage}コマンドも提供しています．引数は，ページにそれ自
身を植字し，次は空白のページになります．


@node titlefont center sp
@c @subsection @code{@@titlefont}, @code{@@center}, and @code{@@sp}
@subsection @code{@@titlefont}，@code{@@center}，そして@code{@@sp}
@findex titlefont
@findex center
@findex sp @r{(titlepage line spacing)}

@c You can use the @code{@@titlefont}, @code{@@sp}, and @code{@@center}
@c commands to create a title page for a printed document.  (This is the
@c first of the two methods for creating a title page in Texinfo.)
@c 
印刷されたドキュメントに対してタイトルページを作成するため，
@code{@@titlefont}，@code{@@sp}，そして@code{@@center}コマンドを使用する
ことが可能です．(これは，Texinfoのタイトルページを作成する，二つの方法の
最初のものです．)

@c Use the @code{@@titlefont} command to select a large font suitable for
@c the title itself.  You can use @code{@@titlefont} more than once if you
@c have an especially long title.
@c 
タイトル自身に適した大きなフォントを選択するため，@code{@@titlefont}コマ
ンドを使用してください．特に長いタイトルがある場合，一度以上
@code{@@titlefont}を使用することが可能です．

@need 700
@c For example:
@c 
例えば，以下のようにします．

@example
@@titlefont@{Texinfo@}
@end example

@c Use the @code{@@center} command at the beginning of a line to center
@c the remaining text on that line.  Thus,
@c 
残りのテキストを中央揃えにするため，行の最初に@code{@@center}コマンドを
使用してください．このため以下のようにします．

@example
@@center @@titlefont@{Texinfo@}
@end example

@noindent
@c centers the title, which in this example is ``Texinfo'' printed
@c in the title font.
@c 
例では，タイトル``Texinfo''は中央揃えされ，タイトルフォントで印刷されま
す．

@c Use the @code{@@sp} command to insert vertical space.  For example:
@c 
縦の空白を挿入するため，@code{@@sp}コマンドを使用してください．例えば，
以下のようにします．

@example
@@sp 2
@end example

@noindent
@c This inserts two blank lines on the printed page.  (@xref{sp, ,
@c @code{@@sp}}, for more information about the @code{@@sp}
@c command.)
@c 
これで印刷されたページに二行の空白行が挿入されます(@code{@@sp}コマンドの
詳細は，@pxref{sp, , @code{@@sp}})．

@c A template for this method looks like this:
@c 
この手法のテンプレートは，以下のようになります．

@example
@group
@@titlepage
@@sp 10
@@center @@titlefont@{@var{name-of-manual-when-printed}@}
@@sp 2
@@center @var{subtitle-if-any}
@@sp 2
@@center @var{author}
@dots{}
@@end titlepage
@end group
@end example

@c The spacing of the example fits an 8.5 by 11 inch manual.
@c 
例の空白は，8.5x11インチのマニュアルに適しています．


@node title subtitle author
@c @subsection @code{@@title}, @code{@@subtitle}, and @code{@@author}
@subsection @code{@@title}，@code{@@subtitle}，そして@code{@@author}
@findex title
@findex subtitle
@findex author

@c You can use the @code{@@title}, @code{@@subtitle}, and @code{@@author}
@c commands to create a title page in which the vertical and horizontal
@c spacing is done for you automatically.  This contrasts with the method
@c described in the previous section, in which the @code{@@sp} command is
@c needed to adjust vertical spacing.
@c 
垂直と水平方向に自動的な配置を行なうタイトルページを作成するため，
@code{@@title}，@code{@@subtitle}，そして@code{@@author}コマンドを使用す
ることが可能です．これは前のセクションの記述とは異なり，@code{@@sp}コマ
ンドは垂直方向の空白調整に必要です．

@c Write the @code{@@title}, @code{@@subtitle}, or @code{@@author}
@c commands at the beginning of a line followed by the title, subtitle,
@c or author.
@c 
@code{@@title}，@code{@@subtitle}，そして@code{@@author}コマンドを行の最
初に，タイトル，サブタイトル，または著作者を続けて書いてください．

@c The @code{@@title} command produces a line in which the title is set
@c flush to the left-hand side of the page in a larger than normal font.
@c The title is underlined with a black rule.  Only a single line is
@c allowed; the @code{@@*} command may not be used to break the title into
@c two lines.  To handle very long titles, you may find it profitable to
@c use both @code{@@title} and @code{@@titlefont}; see the final example in
@c this section.
@c 
@code{@@title}コマンドは，ページの左揃えで通常より大きいフォントでタイト
ルの行を生成します．タイトルには黒い罫線の下線があります．一行のみ可能で
す．@code{@@*}コマンドを，タイトルを二行に分けるために使用してはいけませ
ん．非常に長いタイトルを扱うため，@code{@@title}と@code{@@titlefont}の両
方を使用した方が便利だと分かるかもしれません．このセクションの最後の例を
参照してください．

@c The @code{@@subtitle} command sets subtitles in a normal-sized font
@c flush to the right-hand side of the page.
@c 
@code{@@subtitle}コマンドは，通常の大きさのフォントでページの右側にサブ
タイトルを設定します．

@c The @code{@@author} command sets the names of the author or authors in
@c a middle-sized font flush to the left-hand side of the page on a line
@c near the bottom of the title page.  The names are underlined with a
@c black rule that is thinner than the rule that underlines the title.
@c (The black rule only occurs if the @code{@@author} command line is
@c followed by an @code{@@page} command line.)
@c 
@code{@@author}コマンドは，著作者達の名前を中間の大きさのフォントで，ペー
ジのその行の左揃えでタイトルページの下の近くに配置します．名前は，タイト
ルの下線より細い黒い罫線の下線があります．(黒い罫線は，@code{@@author}コ
マンド行に，@code{@@page}コマンド行が続く場合に表示されます．)

@c There are two ways to use the @code{@@author} command: you can write
@c the name or names on the remaining part of the line that starts with
@c an @code{@@author} command:
@c 
@code{@@author}コマンドを使用するための二つの方法があります．
@code{@@author}コマンドで始まった行の残りの部分に，名前を書くことが可能
です．

@example
@@author by Jane Smith and John Doe
@end example

@noindent
@c or you can write the names one above each other by using two (or more)
@c @code{@@author} commands:
@c 
または，二つ(またはそれ以上)のそれぞれの前に@code{@@author}を使用して，名
前を書くことも可能です．

@example
@group
@@author Jane Smith
@@author John Doe
@end group
@end example

@noindent
@c (Only the bottom name is underlined with a black rule.)
@c 
(下の名前のみ，黒い罫線の下線がつきます．)

@need 950
@c A template for this method looks like this:
@c 
この方法のテンプレートは，以下のようになります．

@example
@group
@@titlepage
@@title @var{name-of-manual-when-printed}
@@subtitle @var{subtitle-if-any}
@@subtitle @var{second-subtitle}
@@author @var{author}
@@page
@dots{}
@@end titlepage
@end group
@end example

@c You may also combine the @code{@@titlefont} method described in the
@c previous section and @code{@@title} method described in this one.  This
@c may be useful if you have a very long title.  Here is a real-life example:
@c 
前のセクションで記述された@code{@@titlefont}の方法と，ここで記述されてい
る@code{@@title}の方法を組み合わせてもかまいません．これは，長いタイトル
の場合に便利です．現実的な例は以下のようになります．

@example
@group
@@titlepage
@@titlefont@{GNU Software@}
@@sp 1
@@title for MS-Windows and MS-DOS
@@subtitle Edition @@value@{e@} for Release @@value@{cde@}
@@author by Daniel Hagerty, Melissa Weisshaus
@@author and Eli Zaretskii
@end group
@end example

@noindent
@c (The use of @code{@@value} here is explained in @ref{value Example}.
@c 
(ここでの@code{@@value}の使用は，@ref{value Example}で述べられています．)


@node Copyright
@c @subsection Copyright Page
@subsection 著作権のページ
@cindex Copyright page
@cindex Printed permissions
@cindex Permissions, printed

@c By international treaty, the copyright notice for a book must be either
@c on the title page or on the back of the title page.  When the copyright
@c notice is on the back of the title page, that page is customarily not
@c numbered.  Therefore, in Texinfo, the information on the copyright page
@c should be within @code{@@titlepage} and @code{@@end titlepage}
@c commands.
@c 
国際的な条約で，本の著作権の注意は，タイトルページかタイトルページの裏に
書く必要があります．著作権の注意がタイトルページの裏にあるとき，そのペー
ジは慣習で番号が付きません．そのため，Texinfoでは，著作権のページの情報
を@code{@@titlepage}と@code{@@end titlepage}コマンドの間に書くべきです．

@findex vskip @r{@TeX{} vertical skip}
@findex filll @r{@TeX{} dimension}
@c Use the @code{@@page} command to cause a page break.  To push the
@c copyright notice and the other text on the copyright page towards the
@c bottom of the page, use the following incantantion after @code{@@page}:
@c 
@code{@@page}コマンドを改ページに使用してください．著作権の注意と著作権
ページの他のテキストがページの下になるように，@code{@@page}コマンドの後
に，以下のような魔法の呪文を使用してください．@refill

@example
@@vskip 0pt plus 1filll
@end example

@noindent
@c This is a @TeX{} command that is not supported by the Info formatting
@c commands.  The @code{@@vskip} command inserts whitespace.  The @samp{0pt
@c plus 1filll} means to put in zero points of mandatory whitespace, and as
@c much optional whitespace as needed to push the following text to the
@c bottom of the page.  Note the use of three @samp{l}s in the word
@c @samp{filll}; this is correct.
@c 
これは，Info書式化コマンドがサポートしていない@TeX{}コマンドです．
@code{@@vskip}コマンドは空白を挿入します．@samp{0pt plus 1filll}は，0ポ
イントの必須の空白を書き，以下のテキストをページの下に書くことに必要な追
加の空白を配置することを意味します．@samp{filll}の三つの@samp{l}を使用し
ていることに注意してください．これは正しい使い方です．

@c To insert the copyright text itself, write @code{@@insertcopying}
@c next (@pxref{Document Permissions}):
@c 
著作権のテキスト自身を挿入するために，次に@code{@@insertcopying}を書いて
ください(@pxref{Document Permissions})．

@example
@@insertcopying
@end example

@c Follow the copying text by the publisher, ISBN numbers, cover art
@c credits, and other such information.
@c 
発行者のコピーについてのテキスト，ISBN番号，カバーアートのクレジット，そ
してそれ以外のそのような情報を続けてください．

@c Here is an example putting all this together:
@c 
以下はこれらをすべてまとめて書き込んだ例です．

@example
@@titlepage
@dots{}
@@page
@@vskip 0pt plus 1filll
@@insertcopying

Published by @dots{}

Cover art by @dots{}
@@end titlepage
@end example


@node end titlepage
@c @subsection Heading Generation
@subsection 見出しの生成
@findex end titlepage
@cindex Headings, page, begin to appear
@cindex Titlepage end starts headings
@cindex End titlepage starts headings

@c The @code{@@end titlepage} command must be written on a line by itself.
@c It not only marks the end of the title and copyright pages, but also
@c causes @TeX{} to start generating page headings and page numbers.
@c 
@code{@@end titlepage}コマンドは，単独行に書く必要があります．タイトルと
著作権のページの終りの印付けをするだけでなく，@TeX{}にページ見出しとペー
ジ番号の生成も開始させます．

@c To repeat what is said elsewhere,  Texinfo has two standard page heading
@c formats, one for documents which are printed on one side of each sheet of paper
@c (single-sided printing), and the other for documents which are printed on both
@c sides of each sheet (double-sided printing).
@c You can specify these formats in different ways:
@c 
他で述べた繰り返しですが，Texinfoには二つの標準ページ見出しの書式があり，
一つは紙のそれぞれの片側に印刷されたドキュメント(片面印刷)のためで，もう一 
つはそれぞれの用紙の両側に印刷されたドキュメント(両面印刷)のためです．こ
れらの書式化を，異なる方法で指定することが可能です．

@itemize @bullet
@item
@c The conventional way is to write an @code{@@setchapternewpage} command
@c before the title page commands, and then have the @code{@@end
@c titlepage} command start generating page headings in the manner desired.
@c (@xref{setchapternewpage}.)
@c 
従来の方法は，@code{@@setchapternewpage}コマンドをタイトルページコマンド
の前に書くもので，@code{@@end titlepage}で要求された方法でページ見出しの
生成を開始します(@pxref{setchapternewpage})．

@item
@c Alternatively, you can use the @code{@@headings} command to prevent page
@c headings from being generated or to start them for either single or
@c double-sided printing.  (Write an @code{@@headings} command immediately
@c after the @code{@@end titlepage} command.  @xref{headings on off, , The
@c @code{@@headings} Command}, for more information.)@refill
@c 
他の方法として，生成されたものへのページ見出しを阻止したり，片面または両
面印刷で開始したりするため，@code{@@headings}コマンドを使用することが可
能です．(@code{@@headings}コマンドを，@code{@@end titlepage}コマンドの直
後に書いてください．詳細は，@xref{headings on off, , The
@code{@@headings} Command}.)@refill

@item
@c Or, you may specify your own page heading and footing format.
@c @xref{Headings, , Page Headings}, for detailed
@c information about page headings and footings.
@c 
または，独自のページ見出しとフッタの書式を指定できます．ページ見出しとフッ
タの詳細は，@xref{Headings, , Page Headings}.
@end itemize

@c Most documents are formatted with the standard single-sided or
@c double-sided format, using @code{@@setchapternewpage odd} for
@c double-sided printing and no @code{@@setchapternewpage} command for
@c single-sided printing.
@c 
ほとんどのドキュメントは標準的な片面または両面の書式で書式化され，両面印
刷のため@code{@@setchapternewpage odd}を使用し，片面印刷のため
@code{@@setchapternewpage}コマンドは使用しません．


@node headings on off
@c @subsection The @code{@@headings} Command
@subsection @code{@@headings}コマンド
@findex headings

@c The @code{@@headings} command is rarely used.  It specifies what kind of
@c page headings and footings to print on each page.  Usually, this is
@c controlled by the @code{@@setchapternewpage} command.  You need the
@c @code{@@headings} command only if the @code{@@setchapternewpage} command
@c does not do what you want, or if you want to turn off pre-defined page
@c headings prior to defining your own.  Write an @code{@@headings} command
@c immediately after the @code{@@end titlepage} command.@refill
@c 
@code{@@headings}コマンドは滅多に使用されません．それは，それぞれのペー
ジに印刷するページ見出しとフッタの種類を指定します．通常これは，
@code{@@setchapternewpage}コマンドで制御されます．
@code{@@setchapternewpage}コマンドが望まないことをしたり，独自の定義の前
に前もって定義されているページ見出しを止める場合のみ，@code{@@headings} 
コマンドが必要です．@code{@@headings}コマンドを@code{@@end titlepage} コ
マンドの直後に書いてください．@refill

@c You can use @code{@@headings} as follows:@refill
@c 
以下のように，@code{@@headings}を使用することが可能です．@refill

@table @code
@item @@headings off
@c Turn off printing of page headings.@refill
@c 
ページ見出しの印刷を停止します．@refill

@item @@headings single
@c Turn on page headings appropriate for single-sided printing.
@c 
片面印刷に適したページ見出しを開始します．@refill
@refill

@item @@headings double
@itemx @@headings on
@c Turn on page headings appropriate for double-sided printing.  The two
@c commands, @code{@@headings on} and @code{@@headings double}, are
@c synonymous.@refill
@c 
両面印刷に適したページ見出しを開始します．二つのコマンド，
@code{@@headings on}と@code{@@headings double}は同意語です．@refill

@item @@headings singleafter
@itemx @@headings doubleafter
@c Turn on @code{single} or @code{double} headings, respectively, after the
@c current page is output.
@c 
現在のページを出力した後，それぞれ，@code{single}または@code{double}見出
しを開始します．

@item @@headings on
@c Turn on page headings: @code{single} if @samp{@@setchapternewpage
@c on}, @code{double} otherwise.
@c 
ページ見出しを開始します．@samp{@@setchapternewpage on}の場合は
@code{single}で，それ以外では@code{double}です．
@end table

@c For example, suppose you write @code{@@setchapternewpage off} before the
@c @code{@@titlepage} command to tell @TeX{} to start a new chapter on the
@c same page as the end of the last chapter.  This command also causes
@c @TeX{} to typeset page headers for single-sided printing.  To cause
@c @TeX{} to typeset for double sided printing, write @code{@@headings
@c double} after the @code{@@end titlepage} command.
@c 
例えば，前の章の終りに続けて同じページで新しい章を開始するよう@TeX{}に伝
えるための@code{@@titlepage}コマンドの前に，@code{@@setchapternewpage
off}を書く場合を考えます．またこのコマンドは，片面印刷のページヘッダを
@TeX{}に植字させます．両面印刷で@TeX{}に植字させるため，@code{@@end
titlepage}コマンドの後に@code{@@headings double}を書いてください．

@c You can stop @TeX{} from generating any page headings at all by
@c writing @code{@@headings off} on a line of its own immediately after the
@c line containing the @code{@@end titlepage} command, like this:@refill
@c 
@code{@@end titlepage}コマンドを含む行の直後に単独行の@code{@@headings
off}を書くことで，@TeX{}のページ見出しの生成を停止できます．@refill

@example
@@end titlepage
@@headings off
@end example

@noindent
@c The @code{@@headings off} command overrides the @code{@@end titlepage}
@c command, which would otherwise cause @TeX{} to print page
@c headings.@refill
@c 
@code{@@headings off}コマンドは，@code{@@end titlepage}コマンドに優先し，
それ以外の場合は@TeX{}にページ見出しを印刷させます．@refill

@c You can also specify your own style of page heading and footing.
@c @xref{Headings, , Page Headings}, for more information.@refill
@c 
ページ見出しとフッタの独自のスタイルを指定することも可能です．詳細は，
@xref{Headings, , Page Headings}.@refill


@node The Top Node
@c @section The `Top' Node and Master Menu
@section `Top'ノードとマスターメニュー
@cindex Top node
@cindex Node, `Top'

@c The `Top' node is the node in which a reader enters an Info manual.  As
@c such, it should begin with the @code{@@insertcopying} command
@c (@pxref{Document Permissions}) to provide a brief description of the
@c manual (including the version number) and copying permissions, and end
@c with a master menu for the whole manual.  Of course you should include
@c any other general information you feel a reader would find helpful.
@c 
`Top'ノードは，Infoマニュアルへの読者の入口です．そのため，マニュアルの
(バージョンナンバーを含めた)短い記述とコピーの許可を提供するため，
@code{@@insertcopying}コマンド(@pxref{Document Permissions})で開始し，マ
ニュアル全体のマスターメニューで終えるべきです．もちろん，読者が役に立つ
と思われるその他の一般的な情報を含めるべきです．

@findex top
@c It is also conventional to write an @code{@@top} sectioning command line
@c containing the title of the document immediately after the @code{@@node
@c Top} line (@pxref{makeinfo top command, , The @code{@@top} Sectioning
@c Command}).
@c 
また，@code{@@node Top}行(@pxref{makeinfo top command, , The
@code{@@top} Sectioning Command})の直後に，ドキュメントのタイトルを含む
@code{@@top}セクションコマンド行を書くのも通常の方法です．

@c The contents of the `Top' node should appear only in the online output;
@c none of it should appear in printed output, so enclose it between
@c @code{@@ifnottex} and @code{@@end ifnottex} commands.  (@TeX{} does not
@c print either an @code{@@node} line or a menu; they appear only in Info;
@c strictly speaking, you are not required to enclose these parts between
@c @code{@@ifnottex} and @code{@@end ifnottext}, but it is simplest to do
@c so.  @xref{Conditionals, , Conditionally Visible Text}.)
@c 
`Top'ノードの内容は，オンラインの出力だけに現れます．印刷されたマニュア
ルに現れるものが無いので，@code{@@ifnottex}と@code{@@end ifnottex}コマン
ドで囲まれています．(@TeX{}は@code{@@node}行もメニューも印刷しません．
Infoだけに現れます．厳密には，@code{@@ifnottex}と@code{@@end ifnottext}
でこれらの部分を囲む必要はありませんが，そうするのが最も簡単です．
@xref{Conditionals, , Conditionally Visible Text}.)

@menu
* Top Node Example::            
* Master Menu Parts::           
@end menu


@node Top Node Example
@c @subsection Top Node Example
@subsection Topノードの例

@cindex Top node example

@c Here is an example of a Top node.
@c 
以下はTopノードの例です．

@example
@group
@@ifnottex
@@node Top
@@top Sample Title

@@insertcopying
@end group

Additional general information.

@group
@@menu
* First Chapter::
* Second Chapter::
@dots{}
* Index::
@end group
@@end menu
@end example


@node Master Menu Parts
@c @subsection Parts of a Master Menu
@subsection マスターメニューの部分
@cindex Master menu
@cindex Menu, master
@cindex Parts of a master menu

@c A @dfn{master menu} is a detailed main menu listing all the nodes in a
@c file.
@c 
@dfn{マスターメニュー(master menu)}は，ファイル全体のノードをリストアッ
プする詳細なメインメニューです．

@c A master menu is enclosed in @code{@@menu} and @code{@@end menu}
@c commands and does not appear in the printed document.
@c 
マスターメニューは，@code{@@menu}と@code{@@end menu}コマンドで囲まれてい
て，印刷されたドキュメントには現れません．

@c Generally, a master menu is divided into parts.
@c 
一般に，マスターメニューはいくつかの部分に分かれています．

@itemize @bullet
@item
@c The first part contains the major nodes in the Texinfo file: the nodes
@c for the chapters, chapter-like sections, and the appendices.
@c 
最初の部分は，Texinfoファイルの主なノードを含みます．章のノード，章のよ
うなもののノード，そして付録です．

@item
@c The second part contains nodes for the indices.
@c 
二番目の部分は，索引のノードを含みます．

@item
@c The third and subsequent parts contain a listing of the other, lower
@c level nodes, often ordered by chapter.  This way, rather than go
@c through an intermediary menu, an inquirer can go directly to a
@c particular node when searching for specific information.  These menu
@c items are not required; add them if you think they are a
@c convenience.  If you do use them, put @code{@@detailmenu} before the
@c first one, and @code{@@end detailmenu} after the last; otherwise,
@c @code{makeinfo} will get confused.
@c 
三番目の部分とそれに続く部分はその他の低レベルのノードで，章の順番のリス
トを含みます．このように，中間メニューを通過するのではなく特定の情報を探
すとき，探している人は特定のノードへ直接行くことが可能になります．これら
のメニュー項目は必要ではありません．便利だと思う場合は追加してください．
それらを使用する場合，@code{@@detailmenu}を最初のものの前に書き，
@code{@@end detailmenu}を最後のものの後に書きます．そうしなければ
@code{makeinfo}は混乱します．
@end itemize

@c Each section in the menu can be introduced by a descriptive line.  So
@c long as the line does not begin with an asterisk, it will not be
@c treated as a menu entry.  (@xref{Writing a Menu}, for more
@c information.)
@c 
メニューのそれぞれのセクションは記述行で紹介されています．アスタリスクで
始まらない行は，メニュー項目として扱われません．(詳細は，@xref{Writing a
Menu}.)

@c For example, the master menu for this manual looks like the following
@c (but has many more entries):
@c 
例えば，このマニュアルのマスターメニューは，以下のようになっています(もっ
と多くの項目がありますが．)

@example
@group
@@menu
* Copying Conditions::  Your rights.
* Overview::            Texinfo in brief.
@dots{}
@end group
@group
* Command and Variable Index::
* Concept Index::       
@end group

@group
@@detailmenu
--- The Detailed Node Listing ---

Overview of Texinfo

* Reporting Bugs:: @dots{}
@dots{}
@end group

@group
Beginning a Texinfo File

* Sample Beginning:: @dots{}
@dots{}
@@end detailmenu
@@end menu
@end group
@end example


@node Global Document Commands
@c @section Global Document Commands
@section 大域的なドキュメントコマンド
@cindex Global Document Commands

@c Besides the basic commands mentioned in the previous sections, here are
@c additional commands which affect the document as a whole.  They are
@c generally all given before the Top node, if they are given at all.
@c 
前のセクションで記述した基本的なコマンド以外に，以下のようなドキュメント
全体に影響のある，追加のコマンドがあります．それらが与えられる場合は，通
常はすべてTopノードの前で与えられます．

@menu
* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* exampleindent::               Specify environment indentation.
@end menu


@node documentdescription
@c @subsection @code{@@documentdescription}: Summary Text
@subsection @code{@@documentdescription}:概要のテキスト
@cindex Document description
@cindex Description of document
@cindex Summary of document
@cindex Abstract of document
@cindex <meta> HTML tag, and document description
@findex documentdescription

@c When producing HTML output for a document, @command{makeinfo} writes a
@c @samp{<meta>} element in the @samp{<head>} to give some idea of the
@c content of the document.  By default, this @dfn{description} is the title
@c of the document, taken from the @code{@@settitle} command
@c (@pxref{settitle}).  To change this, use the @code{@@documentdescription}
@c environment, as in:
@c 
ドキュメントのHTML出力を生成しているとき，@command{makeinfo}はドキュメン
トの内容を与えるため，@samp{<meta>}エレメントを@samp{<head>}に書き出しま
す．デフォルトで，この@dfn{説明(description)}は，@code{@@settitle}コマン
ド(@pxref{settitle})で与えられるドキュメントのタイトルです．これを変更す
るため，@code{@@documentdescription}環境変数を以下のように使用してくださ
い．

@example
@@documentdescription
descriptive text.
@@end documentdescription
@end example

@noindent
@c This will produce the following output in the @samp{<head>} of the HTML:
@c 
これで，HTMLの@samp{<head>}に以下のような出力を生成します．

@example
<meta name=description content="descriptive text.">
@end example

@c @code{@@documentdescription} must be specified before the first node of
@c the document.
@c 
@code{@@documentdescription}は，ドキュメントの最初のノードの前に指定する
必要があります．


@node setchapternewpage
@subsection @code{@@setchapternewpage}: 
@cindex Starting chapters
@cindex Pages, starting odd
@findex setchapternewpage

@c In an officially bound book, text is usually printed on both sides of
@c the paper, chapters start on right-hand pages, and right-hand pages have
@c odd numbers.  But in short reports, text often is printed only on one
@c side of the paper.  Also in short reports, chapters sometimes do not
@c start on new pages, but are printed on the same page as the end of the
@c preceding chapter, after a small amount of vertical whitespace.
@c 
公式に製本された本では，通常テキストは紙の両面に印刷され，章は右側のペー
ジから始まり，そして右のページは偶数番号です．しかし，短いレポートではテ
キストが紙の片面だけに印刷されることもよくあります．また短いレポートでは，
章で改ページしないときもありますが，小量の縦方向の空白の後，前の章の終り
と同じページで印刷されます．

@c You can use the @code{@@setchapternewpage} command with various
@c arguments to specify how @TeX{} should start chapters and whether it
@c should format headers for printing on one or both sides of the paper
@c (single-sided or double-sided printing).
@c 
@code{@@setchapternewpage}コマンドを，@TeX{}が章を開始する方法と，紙の片
面や両面への印刷(一面や二面印刷)に対するヘッダの書式化の方法を指定するた
め，様々な引数で使用することが可能です．

@c Write the @code{@@setchapternewpage} command at the beginning of a
@c line followed by its argument.
@c 
@code{@@setchapternewpage}コマンドを，行の最初に引数を続けて書いてくださ
い．

@c For example, you would write the following to cause each chapter to
@c start on a fresh odd-numbered page:
@c 
例えば，それぞれの章を新しい偶数ページから始めるため，以下のように書きま
す．

@example
@@setchapternewpage odd
@end example

@c You can specify one of three alternatives with the
@c @code{@@setchapternewpage} command:
@c 
@code{@@setchapternewpage}コマンドで，三つの選択肢の一つを指定することが可
能です．

@table @asis

@item @code{@@setchapternewpage off}
@c Cause @TeX{} to typeset a new chapter on the same page as the last
@c chapter, after skipping some vertical whitespace.  Also, cause @TeX{} to
@c format page headers for single-sided printing.
@c 
@TeX{}は，直前の章と同じページで，いくつかの縦方向の空白を挟み，新しい章
を植字します．また，@TeX{}は片面印刷に対するページヘッダの書式化も行ない
ます．

@item @code{@@setchapternewpage on}
@c Cause @TeX{} to start new chapters on new pages and to format page
@c headers for single-sided printing.  This is the form most often used for
@c short reports or personal printing. This is the default.
@c 
@TeX{}は，新しいページで章を開始させ，片面印刷に対するページヘッダで書式
化します．これは，短いレポートや個人的な印刷で最もよく使用されている形式
です．これはデフォルトです．

@item @code{@@setchapternewpage odd}
@c Cause @TeX{} to start new chapters on new, odd-numbered pages
@c (right-handed pages) and to typeset for double-sided printing.  This is
@c the form most often used for books and manuals.
@c 
@TeX{}は，新しい章を新しい偶数ページ(右側のページ)で開始させ，両面印刷に
対する植字をします．これは，本やマニュアルで最もよく使用されている形式で
す．
@end table

@c Texinfo does not have an @code{@@setchapternewpage even} command,
@c because there is no printing tradition of starting chapters or books on
@c an even-numbered page.
@c 
奇数番号のページで新しい章や本を開始する印刷の伝統はないので，Texinfoに
は@code{@@setchapternewpage even}コマンドはありません．

@c If you don't like the default headers that @code{@@setchapternewpage}
@c sets, you can explicit control them with the @code{@@headings} command.
@c @xref{headings on off, , The @code{@@headings} Command}.
@c 
@code{@@setchapternewpage}が設定するデフォルトのヘッダが好みではない場合，
@code{@@headings}コマンドを用いて明示的に制御することが可能です．
@xref{headings on off, , The @code{@@headings} Command}.

@c At the beginning of a manual or book, pages are not numbered---for
@c example, the title and copyright pages of a book are not numbered.  By
@c convention, table of contents and frontmatter pages are numbered with
@c roman numerals and not in sequence with the rest of the document.
@c 
マニュアルや本の最初では，ページの番号付けはされません --- 例えば，本の
タイトルと著作権のページは番号付けされていません．慣習で，目次のページと
序章のページはローマ数字で番号付けされ，それはドキュメントの残りの部分と
連番にはなっていません．

@c Since an Info file does not have pages, the @code{@@setchapternewpage}
@c command has no effect on it.
@c 
Infoファイルにはページが無いので，@code{@@setchapternewpage}はそれに対し
効果はありません．

@c We recommend not including any @code{@@setchapternewpage} command in
@c your manual sources at all, since the desired output is not intrinsic to
@c the document.  For a particular hard copy run, if you don't want the
@c default option (no blank pages, same headers on all pages) use the
@c @option{--texinfo} option to @command{texi2dvi} to specify the output
@c you want.
@c 
要求される出力物がドキュメントの本質ではないため，
@code{@@setchapternewpage}コマンドをマニュアルのソースに入れることを推奨
する気はありません．特定のハードコピーを実行する際，デフォルトオプション
(空白ページがない，全てのページで同じヘッダ)が不要な場合，お望みの出力を
指定するために@command{texi2dvi}に@option{--texinfo}オプション使用してく
ださい．


@node paragraphindent
@c @subsection Paragraph Indenting
@subsection 段落の字下げ
@cindex Indenting paragraphs, control of
@cindex Paragraph indentation control
@findex paragraphindent

@c The Texinfo processors may insert whitespace at the beginning of the
@c first line of each paragraph, thereby indenting that paragraph.  You can
@c use the @code{@@paragraphindent} command to specify this indentation.
@c Write an @code{@@paragraphindent} command at the beginning of a line
@c followed by either @samp{asis} or a number:
@c 
Texinfoプロセッサは，それぞれの段落の最初の行の始めに空白を挿入し，それ
により段落を字下げします．この字下げを指定するために，
@code{@@paragraphindent}コマンドを使用することが可能です．行の最初に
@code{@@paragraphindent}コマンドを書き，@samp{asis}や数字を続けてくださ
い．

@example
@@paragraphindent @var{indent}
@end example

@c The indentation is according to the value of @var{indent}:
@c 
字下げは，@var{indent}の値に従います．

@table @asis
@item @code{asis}
@c Do not change the existing indentation (not implemented in @TeX{}).
@c 
既存の字下げを変更しません(@TeX{}では実装されていません)．

@item @code{none}
@itemx 0
@c Omit all indentation.
@c 
すべての字下げを取り消します．

@item @var{n}
@c Indent by @var{n} space characters in Info output, by @var{n} ems in
@c @TeX{}.
@c 
Info出力では@var{n}個のスペース文字，@TeX{}では@var{n}字下げします．

@end table

@c The default value of @var{indent} is 3.  @code{@@paragraphindent} is
@c ignored for HTML output.
@c 
@var{indent}のデフォルト値は三です．@code{@@paragraphindent}は，HTML出力
では無視されます．

@c It is best to write the @code{@@paragraphindent} command before the
@c end-of-header line at the beginning of a Texinfo file, so the region
@c formatting commands indent paragraphs as specified.  @xref{Start of
@c Header}.
@c 
@code{@@paragraphindent}コマンドは，領域の書式化コマンドで指定されたよう
に段落を字下げするので，Texinfoファイルの最初に，end-of-header行の直前に
書くのが最善です．@xref{Start of Header}.

@c A peculiarity of the @code{texinfo-format-buffer} and
@c @code{texinfo-format-region} commands is that they do not indent (nor
@c fill) paragraphs that contain @code{@@w} or @code{@@*} commands.
@c @xref{Refilling Paragraphs}, for further information.
@c 
@code{texinfo-format-buffer}と@code{texinfo-format-region}の特別なところ
は，@code{@@w}や@code{@@*}コマンドを含む段落を字下げしない(または補充し
ない)ことです．詳細は，@xref{Refilling Paragraphs}.


@node exampleindent
@c @subsection @code{@@exampleindent}: Environment Indenting
@subsection @code{@@exampleindent}:環境に応じた字下げ
@cindex Indenting environments
@cindex Environment indentation
@cindex Example indentation
@findex exampleindent

@c The Texinfo processors indent each line of @code{@@example} and similar
@c environments.  You can use the @code{@@exampleindent} command to specify
@c this indentation.  Write an @code{@@exampleindent} command at the
@c beginning of a line followed by either @samp{asis} or a number:
@c 
Texinfoプロセッサは，@code{@@example}とそれに似たもので囲まれている部分
でそれぞれの行を字下げします．@code{@@exampleindent}コマンドで字下げを指
定することが可能です．@code{@@exampleindent}コマンドを行の始めに書き，
@samp{asis}または数字のいずれかを続けてください．

@example
@@exampleindent @var{indent}
@end example

@c The indentation is according to the value of @var{indent}:
@c 
字下げは，@var{indent}の値に従います．

@table @asis
@item @code{asis}
@c Do not change the existing indentation (not implemented in @TeX{}).
@c 
既存の字下げを変更しません(@TeX{}では実装されていません)．

@item 0
@c Omit all indentation.
@c 
すべての字下げを取り消します．

@item @var{n}
@c Indent environments by @var{n} space characters in Info output, by
@c @var{n} ems in @TeX{}.
@c 
Info出力では，@var{n}個のスペース文字，@TeX{}では@var{n}文字，囲まれた部
分を字下げします．

@end table

@c The default value of @var{indent} is 5.  @code{@@exampleindent} is
@c ignored for HTML output.
@c 
@var{indent}のデフォルト値は5です．@code{@@exampleindent}はHTML出力では
無視されます．

@c It is best to write the @code{@@exampleindent} command before the
@c end-of-header line at the beginning of a Texinfo file, so the region
@c formatting commands indent paragraphs as specified.  @xref{Start of
@c Header}.
@c 
@code{@@exampleindent}コマンドは，領域の書式化コマンドで指定されたように
段落を字下げするので，Texinfoファイルの最初に，end-of-header行の前に書く
のが最善です．@xref{Start of Header}.


@node Software Copying Permissions
@c @section Software Copying Permissions
@section ソフトウェアのコピーの許可
@cindex Software copying permissions
@cindex Copying software
@cindex Distribution
@cindex License agreement

@c If the Texinfo file has a section containing the ``General Public
@c License'' and the distribution information and a warranty disclaimer for
@c the software that is documented, we recommend placing this right after
@c the `Top' node.  The General Public License is very important to Project
@c GNU software.  It ensures that you and others will continue to have a
@c right to use and share the software.
@c 
Texinfoファイルに，文章化された``General Public License''と，配布情報と
ソフトウェアに対する免責を含むセクションがある場合，`Top'ノードの直後に
配置することを推奨します．General Public Licenseは，Project GNUのソフト
ウェアにとって非常に重要です．それは，万人に対するソフトウェアの使用と共
有の維持を保証します．

@c The copying and distribution information and the disclaimer are followed
@c by an introduction or else by the first chapter of the manual.
@c 
コピーと配布の情報と免責には，導入部分やマニュアルの最初の章が続きます．

@cindex Introduction, as part of file
@c Although an introduction is not a required part of a Texinfo file, it
@c is very helpful.  Ideally, it should state clearly and concisely what
@c the file is about and who would be interested in reading it.  In
@c general, an introduction would follow the licensing and distribution
@c information, although sometimes people put it earlier in the document.
@c 
導入部分はTexinfoの必須部分ではありませんが大変役に立ちます．理想的には，
ファイルが何に関係するするのかと，誰が興味を持って読むのかを，そこで明白
に簡潔に述べるべきです．ドキュメントの最初の方に書く人もいますが，一般に，
導入部分にはライセンスと情報の記述が続きます．通常の導入部分は，
@code{@@unnumbered}セクションに書きます．(@xref{unnumbered & appendix, ,
The @code{@@unnumbered} and @code{@@appendix} Commands}.)@refill


@node Ending a File
@c @chapter Ending a Texinfo File
@chapter Texinfoファイルを終える
@cindex Ending a Texinfo file
@cindex Texinfo file ending
@cindex File ending
@findex bye

@c The end of a Texinfo file should include commands to create indices and
@c (perhaps) to generate both the full and summary tables of contents.
@c Finally, it must include the @code{@@bye} command that marks the last
@c line to be processed.
@c 
Texinfoファイルの終りには，索引を作成するコマンドと，(おそらく)完全なも
のと概要の目次を生成するコマンドを含めるべきです．最後に，処理する最終行
に印を付ける@code{@@bye}コマンドを含んでいる必要があります．

@need 700
@c For example:
@c 
例えば，以下のようにします．

@example
@@node Index
@@unnumbered Index

@@printindex cp

@@shortcontents
@@contents

@@bye
@end example

@menu
* Printing Indices & Menus::    How to print an index in hardcopy and
                                 generate index menus in Info.
* Contents::                    How to create a table of contents.
* File End::                    How to mark the end of a file.
@end menu


@node Printing Indices & Menus
@c @section Printing Indices and Menus
@section 索引メニューと索引の印刷
@findex printindex
@cindex Printing an index
@cindex Indices, printing and menus
@cindex Generating menus with indices
@cindex Menus generated with indices

@c To print an index means to include it as part of a manual or Info file.
@c This does not happen automatically just because you use @code{@@cindex}
@c or other index-entry generating commands in the Texinfo file; those just
@c cause the raw data for the index to be accumulated.  To generate an
@c index, you must include the @code{@@printindex} command at the place in
@c the document where you want the index to appear.  Also, as part of the
@c process of creating a printed manual, you must run a program called
@c @code{texindex} (@pxref{Hardcopy}) to sort the raw data to produce a
@c sorted index file.  The sorted index file is what is actually used to
@c print the index.
@c 
索引を印刷するということは，マニュアルやInfoファイルの一部としてそれを含
めることを意味します．これは，@code{@@cindex}やその他の索引項目を生成す
るコマンドをTexinfoファイルで使用しているだけでは，自動的に発生しません．
それらは索引のため生データを蓄積します．索引を生成するため，
@code{@@printindex}コマンドをドキュメントの索引を書きたい場所に含める必
要があります．また，印刷されたマニュアルを作成する過程でソートされた索引
ファイルを生成する際，生データをソートするために@code{texindex}と呼ばれ
るプログラム(@pxref{Hardcopy})を実行する必要もあります．ソートされた索引
ファイルは索引の印刷で実際に使用されます．

@c Texinfo offers six separate types of predefined index, each with a
@c two-letter abbreviation, as illustrated in the following table.
@c However, you may merge indices (@pxref{Combining Indices}) or define
@c your own indices (@pxref{New Indices}).
@c 
Texinfoは，前もって定義された六つの個別の形態の索引を提供していて，それ
ぞれ以下の表で示す二文字の省略を用いています．しかし，索引を統合したり
(@pxref{Combining Indices})，独自の索引を定義(@pxref{New Indices})しても
かまいません．

@c Here are the predefined indices, their abbreviations, and the
@c corresponding index entry commands:
@c 
以下は前もって定義されている索引，その省略，そしてそれに対応する索引項目
コマンドです．

@table @samp
@item cp
@c concept index (@code{@@cindex})
@c 
概念の索引(@code{@@cindex})
@item fn
@c function index (@code{@@findex})
@c 
関数の索引(@code{@@findex})
@item vr
@c variable index (@code{@@index})
@c 
変数の索引(@code{@@index})
@item ky
@c key index (@code{@@kindex})
@c 
キーの索引(@code{@@kindex})
@item pg
@c program index (@code{@@pindex})
@c 
プログラムの索引(@code{@@pindex})
@item tp
@c data type index (@code{@@tindex})
@c 
データ型の索引(@code{@@tindex})
@end table

@c The @code{@@printindex} command takes a two-letter index abbreviation,
@c reads the corresponding sorted index file and formats it appropriately
@c into an index.
@c 
@code{@@printindex}コマンドは二文字の索引の省略を引数として，対応するソー
トされた索引ファイルを読み込み，索引内に適切に書式化します．

@c The @code{@@printindex} command does not generate a chapter heading for
@c the index.  Consequently, you should precede the @code{@@printindex}
@c command with a suitable section or chapter command (usually
@c @code{@@appendix} or @code{@@unnumbered}) to supply the chapter heading
@c and put the index into the table of contents.  Precede the
@c @code{@@unnumbered} command with an @code{@@node} line.
@c 
@code{@@printindex}コマンドは索引に対する章の見出しを生成しません．した
がって，章の見出しを提供し索引を目次に含めるため，適切なセクションや章コ
マンド(通常@code{@@unnumbered})の前に@code{@@printindex}コマンドを書くべ
きです．@code{@@unnumbered}コマンドを@code{@@node}行に前置してください．
@refill

@c For example:
@c 
例えば，以下のようにします．

@smallexample
@group
@@node Variable Index
@@unnumbered Variable Index

@@printindex vr
@end group

@group
@@node Concept Index
@@unnumbered Concept Index

@@printindex cp
@end group
@end smallexample

@c @noindent

@c We recommend placing the concept index last, since that makes it easiest
@c to find.  We also recommend having a single index whenever possible,
@c since then readers have only one place to look (@pxref{Combining Indices}).
@c 
見つけ易くするため，概念の索引を最後に配置することを推奨します．また，読
者が見る場所を一つだけにするため，可能な限り索引を一つにすることを推奨し
ます(@pxref{Combining Indices})．


@node Contents
@c @section Generating a Table of Contents
@section 目次の生成
@cindex Table of contents
@cindex Contents, Table of
@cindex Short table of contents
@findex contents
@findex summarycontents
@findex shortcontents

@c The @code{@@chapter}, @code{@@section}, and other structuring commands
@c supply the information to make up a table of contents, but they do not
@c cause an actual table to appear in the manual.  To do this, you must use
@c the @code{@@contents} and/or @code{@@summarycontents} command(s).
@c 
@code{@@chapter}，@code{@@section}，そしてその他の構造化コマンドは，目次
を作成する情報を供給していますが，実際の表をマニュアルに表示しません．こ
うするため，@code{@@contents}と/または@code{@@summarycontents}コマンドを
使用する必要があります．

@table @code
@item @@contents
@c Generate a table of contents in a printed manual, including all
@c chapters, sections, subsections, etc., as well as appendices and
@c unnumbered chapters.  Headings generated by the @code{@@heading}
@c series of commands do not appear in the table of contents.
@c 
印刷されたマニュアルに目次を生成し，それは，全ての章，セクション，サブセ
クションなど，付録や番号付けされない章まで含みます．@code{@@heading}と同
列のコマンドで生成された見出しは目次に現れません．

@item @@shortcontents
@itemx @@summarycontents
@c (@code{@@summarycontents} is a synonym for @code{@@shortcontents}.)
@c 
(@code{@@summarycontents}は@code{@@shortcontents}と同義語です．)

@c Generate a short or summary table of contents that lists only the
@c chapters, appendices, and unnumbered chapters.  Sections, subsections
@c and subsubsections are omitted.  Only a long manual needs a short table
@c of contents in addition to the full table of contents.
@c 
章，付録，そして番号付けされない章のみをリストアップした，短い，または，
概要の目次を生成します．セクション，サブセクション，そしてサブサブセクショ
ンは削除されます．長いマニュアルのみ，完全な目次への追加として短い目次が
必要です．

@end table

@c Both contents commands should be written on a line by themselves.
@c The contents commands automatically generate a chapter-like heading at
@c the top of the first table of contents page, so don't include any
@c sectioning command such as @code{@@unnumbered} before them.
@c 
どちらの目次コマンドも単独行に書くべきです．目次コマンドは，自動的に章の
ような見出しを最初の目次ページのトップに生成するので，その前に
@code{@@unnumbered}のようなセクションコマンドを含めないでください．

@c Since an Info file uses menus instead of tables of contents, the Info
@c formatting commands ignore the contents commands.  But the contents are
@c included in plain text output (generated by @code{makeinfo
@c --no-headers}), unless @code{makeinfo} is writing its output to standard
@c output.
@c 
Infoファイルは目次の代わりにメニューを使用するので，Indo書式化コマンドは，
目次コマンドを無視します．しかし，@code{makeinfo}で標準出力に出力を書い
ていない限り，目次は(@code{makeinfo --no-headers}で生成される)プレーンテ
キスト出力には含まれます．

@c When @code{makeinfo} writes a short table of contents while producing
@c html output, the links in the short table of contents point to
@c corresponding entries in the full table of contents rather than the text
@c of the document. The links in the full table of contents point to the
@c main text of the document.
@c 
HTML出力を生成する際に@code{makeinfo}で短い目次を書いているとき，短い目
次のリンクは，ドキュメントのテキストではなく，完全な目次の対応する項目を
指し示します．完全な目次のリンクは，ドキュメントの主なテキストを指し示し
ます．

@c The contents commands can be placed either at the very end of the file,
@c after any indices (see the previous section) and just before the
@c @code{@@bye} (see the next section), or near the beginning of the file,
@c after the @code{@@end titlepage} (@pxref{titlepage}).  The advantage to
@c the former is that then the contents output is always up to date,
@c because it reflects the processing just done.  The advantage to the
@c latter is that the contents are printed in the proper place, thus you do
@c not need to rearrange the DVI file with @command{dviselect} or shuffle
@c paper.
@c 
目次コマンドは，ファイルの最後の索引(前のセクションを参照してください) 
の後の@code{@@bye}(次のセクションを参照してください)の直前，または，ファ
イルの最初の@code{@@end titlepage}(@pxref{titlepage})の後に配置すること
が可能です．前者の利点は，行われた処理を参照するため，目次出力が常に更新
されることです．後者の利点は，目次が適切な場所に印刷されることで，DVIファ
イルを@command{dviselect}で再配列したり，紙を並べ変える必要が無くなりま
す．

@findex setcontentsaftertitlepage
@findex setshortcontentsaftertitlepage
@cindex Contents, after title page
@cindex Table of contents, after title page
@c As an author, you can put the contents commands wherever you prefer.
@c But if you are a user simply printing a manual, you may wish to print
@c the contents after the title page even if the author put the contents
@c commands at the end of the document (as is the case in most existing
@c Texinfo documents, at this writing).  You can do this by specifying
@c @code{@@setcontentsaftertitlepage} and/or
@c @code{@@setshortcontentsaftertitlepage}.  The first prints only the main
@c contents after the @code{@@end titlepage}; the second prints both the
@c short contents and the main contents.  In either case, any subsequent
@c @code{@@contents} or @code{@@shortcontents} is ignored (unless no
@c @code{@@end titlepage} is ever encountered).
@c 
著者として，目次コマンドを好きなところに書くことが可能です．しかし，単に
マニュアルを印刷するだけのユーザは，たとえ著者が目次コマンドをドキュメン
トの最後に書いている場合でも，(ここで書かれているような，ほとんどの既存
のTexinfoドキュメントのように)目次をタイトルページの後に書きたいと思うか
もしれません．これは，@code{@@setcontentsaftertitlepage}と/または，
@code{@@setshortcontentsaftertitlepage}で指定することが可能です．最初の
ものは，@code{@@end titlepage}の後に主な目次のみ印刷します．二番目のもの
は，短い目次と主な目次の両方を印刷します．どちらの場合でも，それに続く
@code{@@contents}や@code{@@shortcontents}は(@code{@@end titlepage}がない
場合は)無視されます(@code{@@end titlepage}．

@c You need to include the @code{@@set@dots{}contentsaftertitlepage}
@c commands early in the document (just after @code{@@setfilename}, for
@c example).  We recommend using @command{texi2dvi} (@pxref{Format with
@c texi2dvi}) to specify this without altering the source file at all.  For
@c example:
@c 
@code{@@set@dots{}contentsaftertitlepage}を，ドキュメントの最初の方(例え
ば@code{@@setfilename}の直後)に含める必要があります．ソースファイルの変
更無しでこれを指定するため@command{texi2dvi} (@pxref{Format with
texi2dvi})の使用を推奨します．例えば，以下のようにします．
@example
texi2dvi --texinfo=@@setcontentsaftertitlepage foo.texi
@end example


@node File End
@c @section @code{@@bye} File Ending
@section ファイルの終りの@code{@@bye}
@findex bye

@c An @code{@@bye} command terminates Texinfo processing.  None of the
@c formatters read anything following @code{@@bye}.  The @code{@@bye}
@c command should be on a line by itself.
@c 
@code{@@bye}コマンドはTexinfoの処理を終了します．@code{@@bye}以降を読み
込むフォーマッタは存在しません．@code{@@bye}は単独行にすべきです．

@c If you wish, you may follow the @code{@@bye} line with notes. These
@c notes will not be formatted and will not appear in either Info or a
@c printed manual; it is as if text after @code{@@bye} were within
@c @code{@@ignore} @dots{} @code{@@end ignore}.  Also, you may follow the
@c @code{@@bye} line with a local variables list for Emacs.
@c @xref{Compile-Command, , Using Local Variables and the Compile Command},
@c for more information.
@c 
お望みなら，@code{@@bye}行に注釈を続けてもかまいません．これらの注釈は書
式化されず，Infoや印刷されたマニュアルに現れません．それは，@code{@@bye} 
後のテキストが@code{@@ignore}@dots{}@code{@@end ignore}にあるかのように
なります．また，@code{@@bye}行にEmacsに対するローカルな変数リストを続け
てもかまいません．詳細は，@xref{Compile-Command, , Using Local Variables
and the Compile Command}.


@node Structuring
@c @chapter Chapter Structuring
@chapter 章の構造
@cindex Chapter structuring
@cindex Structuring of chapters

@c The @dfn{chapter structuring} commands divide a document into a hierarchy of
@c chapters, sections, subsections, and subsubsections.  These commands
@c generate large headings; they also provide information for the table
@c of contents of a printed manual (@pxref{Contents, , Generating a Table
@c of Contents}).@refill
@c 
@dfn{章の構造化(chapter structuring)}コマンドは，ドキュメントを，章，セ
クション，サブセクション，そしてサブサブセクションの階層構造に分けます．
これらのコマンドは，大きな見出しを生成します．それらは，印刷されたマニュ
アルの目次の情報も提供します(@pxref{Contents, , Generating a Table of
Contents})．@refill

@c The chapter structuring commands do not create an Info node structure,
@c so normally you should put an @code{@@node} command immediately before
@c each chapter structuring command (@pxref{Nodes}).  The only time you
@c are likely to use the chapter structuring commands without using the
@c node structuring commands is if you are writing a document that
@c contains no cross references and will never be transformed into Info
@c format.@refill
@c 
章の構造化コマンドはInfoノード構造を作成しないので，通常は@code{@@node} 
コマンドをそれぞれの章の構造化コマンドの直前に書くべきです
(@pxref{Nodes})．ノードの構造化コマンドを使用せず章の構造化コマンドを使
用するのは，おそらく，相互参照を含まないドキュメントやInfo形式に変換しな
いドキュメントを書く場合だけでしょう．@refill

@c It is unlikely that you will ever write a Texinfo file that is
@c intended only as an Info file and not as a printable document.  If you
@c do, you might still use chapter structuring commands to create a
@c heading at the top of each node---but you don't need to.@refill
@c 
印刷可能なドキュメントではなく，InfoファイルのためだけにTexinfoファイル
を書くことはおそらくないでしょう．そうする場合でも，章の構造化コマンドを
それぞれのノードの見出しを作成するために --- 不要ですが --- 書いてもかま
いません．@refill

@menu
* Tree Structuring::            A manual is like an upside down tree @dots{}
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The @code{@@top} command, part of the `Top' node.
* chapter::                     
* unnumbered & appendix::       
* majorheading & chapheading::  
* section::                     
* unnumberedsec appendixsec heading::  
* subsection::                  
* unnumberedsubsec appendixsubsec subheading::  
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.
@end menu


@node Tree Structuring
@c @section Tree Structure of Sections
@section セクションのツリー構造
@cindex Tree structuring

@c A Texinfo file is usually structured like a book with chapters,
@c sections, subsections, and the like.  This structure can be visualized
@c as a tree (or rather as an upside-down tree) with the root at the top
@c and the levels corresponding to chapters, sections, subsection, and
@c subsubsections.@refill
@c 
Texinfoファイルは通常，章，セクション，サブセクション，そしてそのような
ものからなる，本のような構造をしています．この構造は，上に根があり，レベ
ルに対応した，章，セクション，サブセクション，そしてサブサブセクションを
持つ木(または，さかさまの木)のように見えます．@refill

@c Here is a diagram that shows a Texinfo file with three chapters,
@c each of which has two sections.@refill
@c 
それぞれ二つのセクションを持つ章が三つあるTexinfoファイルの図は以下のよう
になります．@refill

@example
@group
@c                          Top
@c                           |
@c         -------------------------------------
@c        |                  |                  |
@c     Chapter 1          Chapter 2          Chapter 3
@c        |                  |                  |
@c     --------           --------           --------
@c    |        |         |        |         |        |
@c Section  Section   Section  Section   Section  Section
@c   1.1      1.2       2.1      2.2       3.1      3.2
@c 
                                  Top
                                   |
             ---------------------------------------------
            |                      |                      |
           1 章                   2 章                   3 章
            |                      |                      |
       -----------            -----------            -----------
      |           |          |           |          |           |
 セクション  セクション セクション  セクション セクション  セクション
     1.1         1.2        2.1         2.2        3.1         3.2

@end group
@end example

@c In a Texinfo file that has this structure, the beginning of Chapter 2
@c looks like this:@refill
@c 
この構造を持つTexinfoファイルで，2章は以下のように開始します．@refill

@example
@group
@@node    Chapter 2,  Chapter 3, Chapter 1, top
@@chapter Chapter 2
@end group
@end example

@c The chapter structuring commands are described in the sections that
@c follow; the @code{@@node} and @code{@@menu} commands are described in
@c following chapters. (@xref{Nodes}, and see @ref{Menus}.)@refill
@c 
章の構造化コマンドは以下のセクションで述べています．@code{@@node}と
@code{@@menu}コマンドは以下の章で述べています．(@xref{Nodes}.  そして，
@ref{Menus}を参照してください．)@refill


@node Structuring Command Types
@c @section Structuring Command Types
@section 構造化コマンドの形式

@c The chapter structuring commands fall into four groups or series, each
@c of which contains structuring commands corresponding to the
@c hierarchical levels of chapters, sections, subsections, and
@c subsubsections.@refill
@c 
章を構造化するコマンドは，四つのグループ，またはシリーズに分類され，それ
ぞれは，章，セクション，サブセクション，そしてサブサブセクションの階層レ
ベルに対応する構造化コマンドを含んでいます．@refill

@c The four groups are the @code{@@chapter} series, the
@c @code{@@unnumbered} series, the @code{@@appendix} series, and the
@c @code{@@heading} series.@refill
@c 
四つのグループは，@code{@@chapter}シリーズ，@code{@@unnumbered}シリーズ，
@code{@@appendix}シリーズ，そして@code{@@heading}シリーズです．@refill

@c Each command produces titles that have a different appearance on the
@c printed page or Info file; only some of the commands produce
@c titles that are listed in the table of contents of a printed book or
@c manual.@refill
@c 
それぞれのコマンドは，印刷されたページやInfoファイルで異なるタイトルを生
成します．いくつかのコマンドのみ，印刷された本やマニュアルの目次でリスト
アップされるタイトルを持ちます．@refill

@itemize @bullet
@item
@c The @code{@@chapter} and @code{@@appendix} series of commands produce
@c numbered or lettered entries both in the body of a printed work and in
@c its table of contents.@refill
@c 
コマンドの@code{@@chapter}と@code{@@appendix}シリーズは，印刷されたもの
や目次に番号や文字が付いた項目を生成します．@refill

@item
@c The @code{@@unnumbered} series of commands produce unnumbered entries
@c both in the body of a printed work and in its table of contents.  The
@c @code{@@top} command, which has a special use, is a member of this
@c series (@pxref{makeinfo top, , @code{@@top}}).@refill
@c 
コマンドの@code{@@unnumbered}シリーズは，印刷されたものや目次に番号無し
の項目を生成します．特別な使用法がある@code{@@top}コマンドは，このシリー
ズのメンバーです(@pxref{makeinfo top, , @code{@@top}})．@refill

@item
@c The @code{@@heading} series of commands produce unnumbered headings
@c that do not appear in a table of contents.  The heading commands never
@c start a new page.@refill
@c 
コマンドの@code{@@heading}シリーズは，目次に現れない番号付けされない見出
しを生成します．見出しコマンドは新しいページを開始しません．@refill

@item
@c The @code{@@majorheading} command produces results similar to using
@c the @code{@@chapheading} command but generates a larger vertical
@c whitespace before the heading.@refill
@c 
@code{@@majorheading}コマンドは，@code{@@chapheading}の使用と似た結果を
生成しますが，見出しの前に大きな縦方向の空白を生成します．@refill

@item
@c When an @code{@@setchapternewpage} command says to do so, the
@c @code{@@chapter}, @code{@@unnumbered}, and @code{@@appendix} commands
@c start new pages in the printed manual; the @code{@@heading} commands
@c do not.@refill
@c 
@code{@@setchapternewpage}コマンドでは，@code{@@chapter}，
@code{@@unnumbered}，そして@code{@@appendix}コマンドは，印刷されたマニュ
アルで新しいページを開始します．@code{@@heading}コマンドではそうなりませ
ん．@refill
@end itemize

@c Here are the four groups of chapter structuring commands:
@c 
四つの章の構造化コマンドのグループは以下のようになります．

@tex
{\globaldefs = 1 \smallfonts}
@end tex

@multitable @columnfractions .19 .30 .29 .22
@c @item                        @tab                              @tab                       @tab No new page
@c @item @i{Numbered}           @tab @i{Unnumbered}               @tab @i{Lettered/numbered} @tab @i{Unnumbered}
@c @item In contents            @tab In contents                  @tab In contents           @tab Omitted from@*contents
@c 
@item @i{番号付き} @tab @i{番号無し} @tab @i{文字と番号} @tab @i{番号無し}
@item 目次にある   @tab 目次にある   @tab 目次にある     @tab 目次から削除
@item                        @tab @code{@@top}                 @tab                       @tab @code{@@majorheading}
@item @code{@@chapter}       @tab @code{@@unnumbered}          @tab @code{@@appendix} @tab @code{@@chapheading}
@item @code{@@section}       @tab @code{@@unnumberedsec}       @tab @code{@@appendixsec} @tab @code{@@heading}
@item @code{@@subsection}    @tab @code{@@unnumberedsubsec}    @tab @code{@@appendixsubsec} @tab @code{@@subheading}
@item @code{@@subsubsection} @tab @code{@@unnumberedsubsubsec} @tab @code{@@appendixsubsubsec} @tab @code{@@subsubheading}
@end multitable
@tex
{\globaldefs = 1 \textfonts}
@end tex


@node makeinfo top
@section @code{@@top}

@c The @code{@@top} command is a special sectioning command that you use
@c only after an @samp{@@node Top} line at the beginning of a Texinfo file.
@c The @code{@@top} command tells the @code{makeinfo} formatter which node
@c is the `Top' node, so it can use it as the root of the node tree if your
@c manual uses implicit pointers.  It has the same typesetting effect as
@c @code{@@unnumbered} (@pxref{unnumbered & appendix, , @code{@@unnumbered}
@c and @code{@@appendix}}).  For detailed information, see @ref{makeinfo
@c top command, , The @code{@@top} Command}.
@c 
@code{@@top}コマンドは，Texinfoファイルの最初の@samp{@@node Top}行の後に
使用している特別なセクションコマンドです．@code{@@top}コマンドは，
@code{makeinfo}フォーマッタに`Top'ノードを伝え，マニュアルで暗黙のポイン
タを使用する場合，それはノードツリーのルートとして使用することが可能です．
@code{@@unnumbered}(@pxref{unnumbered & appendix, , @code{@@unnumbered}
and @code{@@appendix}})の植字効果と同じです．詳細は，@ref{makeinfo top
command, , The @code{@@top} Command}を参照してください．

@c The @code{@@top} node and its menu (if any) is conventionally wrapped in
@c an @code{@@ifnottex} conditional so that it will appear only in Info and
@c HTML output, not @TeX{}.
@c 
@code{@@top}ノードとそのメニュー(がある場合)は，InfoとHTML出力のみに現れ，
@TeX{}に現れないようにするため，慣習で，@code{@@ifnottex}環境になります．


@node chapter, unnumbered & appendix, makeinfo top, Structuring
@comment  node-name,  next,  previous,  up
@section @code{@@chapter}
@findex chapter

@c @code{@@chapter} identifies a chapter in the document.  Write the
@c command at the beginning of a line and follow it on the same line by
@c the title of the chapter.@refill
@c 
@code{@@chapter}はドキュメントの章を識別します．行の最初にコマンドを，同
じ行に続けて章のタイトルを書いてください．@refill

@c For example, this chapter in this manual is entitled ``Chapter
@c Structuring''; the @code{@@chapter} line looks like this:@refill
@c 
例えば，このマニュアルのこの章は，``章の構造(Chapter Structuring)''とい
う項目です．@code{@@chapter}行は以下のようになります．@refill

@example
@@chapter Chapter Structuring
@end example

@c In @TeX{}, the @code{@@chapter} command creates a chapter in the
@c document, specifying the chapter title.  The chapter is numbered
@c automatically.@refill
@c 
@TeX{}では，@code{@@chapter}コマンドはドキュメントに章を作成し，章のタイ
トルを指定します．章は自動的に番号付けされます．@refill

@c In Info, the @code{@@chapter} command causes the title to appear on a
@c line by itself, with a line of asterisks inserted underneath.  Thus,
@c in Info, the above example produces the following output:@refill
@c 
Infoでは，@code{@@chapter}コマンドはタイトルを単独行に現し，行の下にはア
スタリスクの挿入があります．このため，Infoで上の例は以下の出力を生成しま
す．@refill

@example
Chapter Structuring
*******************
@end example

@findex centerchap
@c Texinfo also provides a command @code{@@centerchap}, which is analogous
@c to @code{@@unnumbered}, but centers its argument in the printed output.
@c This kind of stylistic choice is not usually offered by Texinfo.
@c 
Texinfoはコマンド@code{@@centerchap}も提供していて，それは
@code{@@unnumbered}に似ていますが，印刷物でその引数を中央揃えします．こ
の種の形式上の選択は，通常Texinfoでは提案されません．
@c but the Hacker's Dictionary wanted it ...


@node unnumbered & appendix
@c @section @code{@@unnumbered} and @code{@@appendix}
@section @code{@@unnumbered}と@code{@@appendix}
@findex unnumbered
@findex appendix

@c Use the @code{@@unnumbered} command to create a chapter that appears
@c in a printed manual without chapter numbers of any kind.  Use the
@c @code{@@appendix} command to create an appendix in a printed manual
@c that is labelled by letter instead of by number.@refill
@c 
@code{@@unnumbered}コマンドを，印刷されたマニュアルであらゆる種類の数字
が付かない章を作成するために使用してください．@code{@@appendix}コマンド
を，印刷されたマニュアルで数字の代わりに文字でラベルが付く付録を作成する
ために使用してください．@refill

@c For Info file output, the @code{@@unnumbered} and @code{@@appendix}
@c commands are equivalent to @code{@@chapter}: the title is printed on a
@c line by itself with a line of asterisks underneath.  (@xref{chapter, ,
@c @code{@@chapter}}.)@refill
@c 
Infoファイル出力に対し，@code{@@unnumbered}と@code{@@appendix}コマンドは，
@code{@@chapter}と同じです．タイトルは単独行で印刷され，下にアスタリスク
の行が付きます．(@xref{chapter, , @code{@@chapter}}.)@refill

@c To create an appendix or an unnumbered chapter, write an
@c @code{@@appendix} or @code{@@unnumbered} command at the beginning of a
@c line and follow it on the same line by the title, as you would if you
@c were creating a chapter.@refill
@c 
付録や番号を付けない章を作成するため，章の作成のように@code{@@appendix} 
や@code{@@unnumbered}コマンドを行の最初から書き，同じ行にタイトルを続け
てください．@refill


@node majorheading & chapheading, section, unnumbered & appendix, Structuring
@c @section @code{@@majorheading}, @code{@@chapheading}
@section @code{@@majorheading}，@code{@@chapheading}
@findex majorheading
@findex chapheading

@c The @code{@@majorheading} and @code{@@chapheading} commands put
@c chapter-like headings in the body of a document.@refill
@c 
@code{@@majorheading}と@code{@@chapheading}コマンドで，ドキュメントの本
体に章のような見出しを書き出します．@refill

@c However, neither command causes @TeX{} to produce a numbered heading
@c or an entry in the table of contents; and neither command causes
@c @TeX{} to start a new page in a printed manual.@refill
@c 
しかし，いずれのコマンドも@TeX{}に番号付の見出しや目次項目を生成させませ
ん．また，どちらのコマンドも，@TeX{}に印刷されたマニュアルで新しいページ
を開始させません．@refill

@c In @TeX{}, an @code{@@majorheading} command generates a larger vertical
@c whitespace before the heading than an @code{@@chapheading} command but
@c is otherwise the same.@refill
@c 
@TeX{}では，@code{@@majorheading}コマンドは，@code{@@chapheading}コマン
ドが生成するより大きな縦方向の空白を生成します．@refill

@c In Info,
@c the @code{@@majorheading} and
@c @code{@@chapheading} commands are equivalent to
@c @code{@@chapter}: the title is printed on a line by itself with a line
@c of asterisks underneath.  (@xref{chapter, , @code{@@chapter}}.)@refill
@c 
Infoでは，@code{@@majorheading}と@code{@@chapheading}コマンドは
@code{@@chapter}と同じで，下にアスタリスクの行が付いた単独行にタイトルを
出力します．(@xref{chapter, , @code{@@chapter}}.)@refill

@node section, unnumberedsec appendixsec heading, majorheading & chapheading, Structuring
@comment  node-name,  next,  previous,  up
@section @code{@@section}
@findex section

@c In a printed manual, an @code{@@section} command identifies a
@c numbered section within a chapter.  The section title appears in the
@c table of contents.  In Info, an @code{@@section} command provides a
@c title for a segment of text, underlined with @samp{=}.@refill
@c 
印刷されたマニュアルでは，@code{@@section}コマンドは章の中の番号付きのセ
クションとなります．セクションのタイトルは目次に現われます．Infoでは，
@code{@@section}コマンドは@samp{=}で下線を引かれたテキストをタイトルとし
て提供します．@refill

@c This section is headed with an @code{@@section} command and looks like
@c this in the Texinfo file:@refill
@c 
このセクションは，@code{@@section}コマンドが前置されていて，Texinfoファ
イルでは以下のように見えます．@refill

@example
@@section @@code@{@@@@section@}
@end example

@c To create a section, write the @code{@@section} command at the
@c beginning of a line and follow it on the same line by the section
@c title.@refill
@c 
セクションを作成するため，@code{@@section}コマンドを行の最初に書き，同じ
行にセクションのタイトルを続けてください．@refill

@c Thus,
@c 
このため，以下のようにします．

@example
@@section This is a section
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
@group
This is a section
=================
@end group
@end example

@noindent
@c in Info.
@c 
Infoでは，上記のようになります．

@node unnumberedsec appendixsec heading, subsection, section, Structuring
@comment  node-name,  next,  previous,  up
@c @section @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}
@section @code{@@unnumberedsec}，@code{@@appendixsec}，@code{@@heading}
@findex unnumberedsec
@findex appendixsec
@findex heading

@c The @code{@@unnumberedsec}, @code{@@appendixsec}, and @code{@@heading}
@c commands are, respectively, the unnumbered, appendix-like, and
@c heading-like equivalents of the @code{@@section} command.
@c (@xref{section, , @code{@@section}}.)@refill
@c 
@code{@@unnumberedsec}，@code{@@appendixsec}，そして@code{@@heading}コマ
ンドはそれぞれ，@code{@@section}コマンドの，番号無し，付録のようなもの，
そして見出しのようなものと同じです．(@xref{section, ,
@code{@@section}}.)@refill

@table @code
@item @@unnumberedsec
@c The @code{@@unnumberedsec} command may be used within an
@c unnumbered chapter or within a regular chapter or appendix to
@c provide an unnumbered section.@refill
@c 
@code{@@unnumberedsec}コマンドは，番号無しの章の中や，通常の章や付録の中
で，番号無しのセクションを提供するために使用できます．@refill

@item @@appendixsec
@itemx @@appendixsection
@c @code{@@appendixsection} is a longer spelling of the
@c @code{@@appendixsec} command; the two are synonymous.@refill
@c 
@code{@@appendixsection}は，@code{@@appendixsec}コマンドの長い綴です．二
つは同じです．@refill
@findex appendixsection

@c Conventionally, the @code{@@appendixsec} or @code{@@appendixsection}
@c command is used only within appendices.@refill
@c 
慣習的に，@code{@@appendixsec}や@code{@@appendixsection}コマンドは，付録
でのみ使用します．@refill

@item @@heading
@c You may use the @code{@@heading} command anywhere you wish for a
@c section-style heading that will not appear in the table of contents.@refill
@c 
@code{@@heading}コマンドは，章の形式の見出しで目次に現われないものに対し
て，希望の場所でどこで使用してもかまいません．@refill
@end table

@node subsection, unnumberedsubsec appendixsubsec subheading, unnumberedsec appendixsec heading, Structuring
@comment  node-name,  next,  previous,  up
@c @section The @code{@@subsection} Command
@section @code{@@subsection}コマンド
@findex subsection

@c Subsections are to sections as sections are to chapters.
@c (@xref{section, , @code{@@section}}.)  In Info, subsection titles are
@c underlined with @samp{-}.  For example,@refill
@c 
サブセクションとセクションの関係は，セクションと章の関係のようなものです．
(@xref{section, , @code{@@section}}.)Infoで，サブセクションのタイトルは，
@samp{-}で下線が引かれます．例えば，以下のようになります．@refill

@example
@@subsection This is a subsection
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
@group
This is a subsection
--------------------
@end group
@end example

@c In a printed manual, subsections are listed in the table of contents
@c and are numbered three levels deep.@refill
@c 
印刷されたマニュアルでは，サブセクションは目次にリストアップされ，3レベ
ルの深さで番号が付きます．@refill

@node unnumberedsubsec appendixsubsec subheading, subsubsection, subsection, Structuring
@comment  node-name,  next,  previous,  up
@c @section The @code{@@subsection}-like Commands
@section @code{@@subsection}のようなコマンド
@cindex Subsection-like commands
@findex unnumberedsubsec
@findex appendixsubsec
@findex subheading

@c The @code{@@unnumberedsubsec}, @code{@@appendixsubsec}, and
@c @code{@@subheading} commands are, respectively, the unnumbered,
@c appendix-like, and heading-like equivalents of the @code{@@subsection}
@c command.  (@xref{subsection, , @code{@@subsection}}.)@refill
@c 
@code{@@unnumberedsubsec}，@code{@@appendixsubsec}，そして
@code{@@subheading}コマンドは，それぞれ，@code{@@subsection}コマンドの，
番号無し，付録のようなもの，そして見出しのようなものと同じです．
(@xref{subsection, , @code{@@subsection}}.)@refill

@c In Info, the @code{@@subsection}-like commands generate a title
@c underlined with hyphens.  In a printed manual, an @code{@@subheading}
@c command produces a heading like that of a subsection except that it is
@c not numbered and does not appear in the table of contents.  Similarly,
@c an @code{@@unnumberedsubsec} command produces an unnumbered heading like
@c that of a subsection and an @code{@@appendixsubsec} command produces a
@c subsection-like heading labelled with a letter and numbers; both of
@c these commands produce headings that appear in the table of
@c contents.@refill
@c 
Infoでは，@code{@@subsection}のようなコマンドはハイフンで下線が引かれた
タイトルを生成します．印刷されたマニュアルでは，@code{@@subheading}コマ
ンドは，番号無しのものと目次に現われないもの以外サブセクションのような見
出しを生成します．同様に，@code{@@unnumberedsubsec}コマンドは，サブセク
ションに似た番号がない見出しを生成し，@code{@@appendixsubsec}コマンドは，
文字と数字でラベルが付いたサブセクションのような見出しを生成します．これ
らのコマンドは両方とも目次に現われる見出しを生成します．@refill

@node subsubsection, Raise/lower sections, unnumberedsubsec appendixsubsec subheading, Structuring
@comment  node-name,  next,  previous,  up
@c @section The `subsub' Commands
@section `subsub'コマンド
@cindex Subsub commands
@findex subsubsection
@findex unnumberedsubsubsec
@findex appendixsubsubsec
@findex subsubheading

@c The fourth and lowest level sectioning commands in Texinfo are the
@c `subsub' commands.  They are:@refill
@c 
Texinfoでの四番目以下のレベルのセクションコマンドは，`subsub'コマンドで
す．以下のものがあります．@refill

@table @code
@item @@subsubsection
@c Subsubsections are to subsections as subsections are to sections.
@c (@xref{subsection, , @code{@@subsection}}.)  In a printed manual,
@c subsubsection titles appear in the table of contents and are numbered
@c four levels deep.@refill
@c 
サブサブセクションとサブセクションの関係は，サブセクションとセクションの
関係のようなものです．(@xref{subsection, , @code{@@subsection}}.)印刷さ
れたマニュアルで，サブサブセクションのタイトルは目次に現われ，四番目の深
さのレベルで番号を付けられます．@refill

@item @@unnumberedsubsubsec
@c Unnumbered subsubsection titles appear in the table of contents of a
@c printed manual, but lack numbers.  Otherwise, unnumbered
@c subsubsections are the same as subsubsections.  In Info, unnumbered
@c subsubsections look exactly like ordinary subsubsections.@refill
@c 
番号付けされていないサブサブセクションのタイトルは，印刷されたマニュアル
の目次に現われますが，番号はありません．それ以外で，番号付けされていない
サブサブセクションはサブサブセクションと同じです．実際にInfoでは，番号付
けされていないサブサブセクションは，普通のサブサブセクションのように見え
ます．@refill

@item @@appendixsubsubsec
@c Conventionally, appendix commands are used only for appendices and are
@c lettered and numbered appropriately in a printed manual.  They also
@c appear in the table of contents.  In Info, appendix subsubsections look
@c exactly like ordinary subsubsections.@refill
@c 
慣習的に，付録コマンドは付録のためのみに使用され，印刷されたマニュアルで
は文字と番号が適切に付けられます．それらは目次にも現われます．実際にInfo 
では，付録のサブサブセクションは普通のサブサブセクションのように見えます．
@refill

@item @@subsubheading
@c The @code{@@subsubheading} command may be used anywhere that you need
@c a small heading that will not appear in the table of contents.  In
@c Info, subsubheadings look exactly like ordinary subsubsection
@c headings.@refill
@c 
@code{@@subsubheading}コマンドは，目次に現われない小さい見出しが必要なあ
らゆる場所で使用できます．実際にInfoでは，サブサブ見出しは普通のサブサブ
セクションの見出しのように見えます．@refill
@end table

@c In Info,  `subsub' titles are underlined with periods.
@c For example,@refill
@c 
Infoでは，`subsub'タイトルはピリオドで下線が引かれます．例えば以下のよう
にします．@refill

@example
@@subsubsection This is a subsubsection
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
@group
This is a subsubsection
.......................
@end group
@end example

@node Raise/lower sections,  , subsubsection, Structuring
@comment  node-name,  next,  previous,  up
@c @section @code{@@raisesections} and @code{@@lowersections}
@section @code{@@raisesections}と@code{@@lowersections}
@findex raisesections
@findex lowersections
@cindex Raising and lowering sections
@cindex Sections, raising and lowering

@c The @code{@@raisesections} and @code{@@lowersections} commands raise and
@c lower the hierarchical level of chapters, sections, subsections and the
@c like.  The @code{@@raisesections} command changes sections to chapters,
@c subsections to sections, and so on.  The @code{@@lowersections} command
@c changes chapters to sections, sections to subsections, and so on.
@c 
@code{@@raisesections}と@code{@@lowersections}コマンドは，章，セクション，
サブセクションのようなものの，階層的レベルをあげたり下げたりします．
@code{@@raisesections}コマンドは，セクションを章，サブセクションをセクショ
ンなどのように変更します．@code{@@lowersections}コマンドは，章をセクショ
ン，セクションをサブセクションなどのように変更します．

@cindex Include files, and section levels
@c An @code{@@lowersections} command is useful if you wish to include text
@c that is written as an outer or standalone Texinfo file in another
@c Texinfo file as an inner, included file.  If you write the command at
@c the beginning of the file, all your @code{@@chapter} commands are
@c formatted as if they were @code{@@section} commands, all your
@c @code{@@section} command are formatted as if they were
@c @code{@@subsection} commands, and so on.
@c 
他のTexinfoファイルの内部ファイルやインクルードファイルとなる，外部や単
独のTexinfoファイルとして書かれているテキストを含める場合，
@code{@@lowersections}コマンドは役に立ちます．ファイルの最初にコマンドを
書くことで，すべての@code{@@chapter}コマンドは@code{@@section}コマンドで
あるかのように書式化され，すべての@code{@@section}コマンドは
@code{@@subsection}コマンドであるかのように書式化される等のようになりま
す．

@need 1000
@c @code{@@raisesections} raises a command one level in the chapter
@c structuring hierarchy:@refill
@c 
@code{@@raisesections}は，章の構造階層でコマンドを一階層あげます．
@refill

@example
@group
@c  @r{Change}           @r{To}
@c 
  変更前           変更後
@@subsection     @@section,
@@section        @@chapter,
@@heading        @@chapheading,
@c          @r{etc.}
@c 
         等々
@end group
@end example

@need 1000
@c @code{@@lowersections} lowers a command one level in the chapter
@c structuring hierarchy:@refill
@c 
@code{@@lowersections}は，章の構造階層でコマンドを一階層下げます．
@refill

@example
@group
@c  @r{Change}           @r{To}
@c 
  変更前           変更後
@@chapter        @@section,
@@subsection     @@subsubsection,
@@heading        @@subheading,
@c          @r{etc.}
@c 
         等々
@end group
@end example

@c An @code{@@raisesections} or @code{@@lowersections} command changes only
@c those structuring commands that follow the command in the Texinfo file.
@c Write an @code{@@raisesections} or @code{@@lowersections} command on a
@c line of its own.
@c 
@code{@@raisesections}や@code{@@lowersections}コマンドは，Texinfoファイ
ルのそれ以降の章の構造化コマンドのみを変更します．@code{@@raisesections} 
や@code{@@lowersections}コマンドは単独行に書いてください．

@c An @code{@@lowersections} command cancels an @code{@@raisesections}
@c command, and vice versa.  Typically, the commands are used like this:
@c 
@code{@@lowersections}コマンドは，@code{@@raisesections}コマンドでキャン
セルされ，逆も同様になります．一般的に，コマンドは以下のように使用します．

@example
@@lowersections
@@include somefile.texi
@@raisesections
@end example

@c Without the @code{@@raisesections}, all the subsequent sections in your
@c document will be lowered.
@c 
@code{@@raisesections}コマンドが無い場合，ドキュメントのそれ以降全てのセ
クションはレベルが下がります．

@c Repeated use of the commands continue to raise or lower the hierarchical
@c level a step at a time.
@c 
コマンドの繰り返しの使用で，階層レベルは一度に一段階づつ，上がったり下がっ
たりし続けます．

@c An attempt to raise above `chapters' reproduces chapter commands; an
@c attempt to lower below `subsubsections' reproduces subsubsection
@c commands.
@c 
`章'を上に上げようとすると，章コマンドを再生成します．`サブサブセクショ
ン'を下に下げようとすると，サブサブセクションコマンドを再生成します．

@node Nodes
@c @chapter Nodes
@chapter ノード

@c @dfn{Nodes} are the primary segments of a Texinfo file.  They do not
@c themselves impose a hierarchical or any other kind of structure on a file.
@c Nodes contain @dfn{node pointers} that name other nodes, and can contain
@c @dfn{menus} which are lists of nodes.  In Info, the movement commands
@c can carry you to a pointed-to node or to a node listed in a menu.  Node
@c pointers and menus provide structure for Info files just as chapters,
@c sections, subsections, and the like, provide structure for printed
@c books.@refill
@c 
@dfn{ノード(Nodes)}はTexinfoファイルの主要な部分です．それらは，それ自身
が階層的ではなく，ファイル構造でもありません．ノードは，他のノードの名前
を持つ@dfn{ノードポインタ(node pointers)}を含み，ノードをリストアップし
ている@dfn{メニュー(menus)} を含めることも可能です．Infoでは，移動コマン
ドで指示されたノードやメニューのノードリストへ移動することが可能です．ノー
ドポインタとメニューは，Info ファイルに，章，セクション，サブセクション
等のような構造を提供していて，それらは印刷された本に構造を提供しているも
のに似ています．@refill

@menu
* Two Paths::                   Different commands to structure
                                 Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.
@end menu


@node Two Paths
@c @section Two Paths
@section 二つのパス

@c The node and menu commands and the chapter structuring commands are
@c technically independent of each other:
@c 
ノードとメニューコマンドと章の構造化コマンドは，専門的にはお互い独立して
います．

@itemize @bullet
@item
@c In Info, node and menu commands provide structure.  The chapter
@c structuring commands generate headings with different kinds of
@c underlining---asterisks for chapters, hyphens for sections, and so on;
@c they do nothing else.@refill
@c 
Infoでは，ノードとメニューコマンドは構造を提供しています．章の構造化コマ
ンドは，下線で区切られた見出しを生成します --- 章ではアスタリスク，セク
ションではハイフンのようになっています．それ以外は何もしません．@refill

@item
@c In @TeX{}, the chapter structuring commands generate chapter and section
@c numbers and tables of contents.  The node and menu commands provide
@c information for cross references; they do nothing else.@refill
@c 
@TeX{}では，章の構造化コマンドは章とセクション番号と目次を生成します．ノー
ドとメニューコマンドは，相互参照の情報を提供します．それ以外は何もしませ
ん．@refill
@end itemize

@c You can use node pointers and menus to structure an Info file any way
@c you want; and you can write a Texinfo file so that its Info output has a
@c different structure than its printed output.  However, virtually all
@c Texinfo files are written such that the structure for the Info output
@c corresponds to the structure for the printed output.  It is neither
@c convenient nor understandable to the reader to do otherwise.@refill
@c 
ノードポインタとメニューを，Infoファイルを好きなように構造化するために使
用することが可能です．Texinfoファイルで，Info出力が印刷物と異なるように
書くことも可能です．しかし，ほとんど全てのTexinfoファイルは，Info出力の
構造が印刷物の構造に対応するように書かれています．そうしなければ，読者は
不便で理解不能になります．@refill

@c Generally, printed output is structured in a tree-like hierarchy in
@c which the chapters are the major limbs from which the sections branch
@c out.  Similarly, node pointers and menus are organized to create a
@c matching structure in the Info output.@refill
@c 
一般に，印刷物は章が主要な大枝でそこからセクションが枝を出している木のよ
うな階層構造です．同様に，ノードポインタとメニューは，Info出力で一致する
構造を作成するように組織化されています．@refill


@node Node Menu Illustration
@c @section Node and Menu Illustration
@section ノードとメニューの図

@c Here is a copy of the diagram shown earlier that illustrates a Texinfo
@c file with three chapters, each of which contains two sections.@refill
@c 
前で示した，章が三つでそれぞれが二つのセクションを含むTexinfoファイル図
の，コピーは以下のようになります．@refill

@c The ``root'' is at the top of the diagram and the ``leaves'' are at the
@c bottom.  This is how such a diagram is drawn conventionally; it
@c illustrates an upside-down tree.  For this reason, the root node is
@c called the `Top' node, and `Up' node pointers carry you closer to the
@c root.@refill
@c 
``root''は図の最上部で，``leaves''が最下部です．これはそのような図を書く
慣習的な方法です．それは，さかさまの木を描きます．このため，ルートノード
は`Top'ノードと呼ばれ，`Up'ノードはルートに近い方向へ導きます．@refill

@example
@group
@c                          Top
@c                           |
@c         -------------------------------------
@c        |                  |                  |
@c     Chapter 1          Chapter 2          Chapter 3
@c        |                  |                  |
@c     --------           --------           --------
@c    |        |         |        |         |        |
@c Section  Section   Section  Section   Section  Section
@c   1.1      1.2       2.1      2.2       3.1      3.2
@c 
                                  Top
                                   |
             ---------------------------------------------
            |                      |                      |
           1 章                   2 章                   3 章
            |                      |                      |
       -----------            -----------            -----------
      |           |          |           |          |           |
 セクション  セクション セクション  セクション セクション  セクション
     1.1         1.2        2.1         2.2        3.1         3.2
@end group
@end example

@c The fully-written command to start Chapter 2 would be this:
@c 
二章を開始するため，完全に書かれたコマンドは以下のようになります．

@example
@group
@@node     Chapter 2,  Chapter 3, Chapter 1, Top
@@comment  node-name,  next,      previous,  up
@end group
@end example

@noindent
@c This @code{@@node} line says that the name of this node is ``Chapter
@c 2'', the name of the `Next' node is ``Chapter 3'', the name of the
@c `Previous' node is ``Chapter 1'', and the name of the `Up' node is
@c ``Top''.  You can omit writing out these node names if your document is
@c hierarchically organized (@pxref{makeinfo Pointer Creation}), but the
@c pointer relationships still obtain.
@c 
この@code{@@node}行は，このノード名が``Chapter 2''で，`Next'ノードが
``Chapter 3''で，`Previous'ノードが``Chapter 1''で，`Up'ノードが``Top'' 
だということを告げています．ドキュメントが階層的に組織化されている場合
(@pxref{makeinfo Pointer Creation})，これらのノード名を書くことを省略可
能ですが，ポインタの関係は得られます．

@quotation
@c @strong{Please Note:} `Next' refers to the next node at the same
@c hierarchical level in the manual, not necessarily to the next node
@c within the Texinfo file.  In the Texinfo file, the subsequent node may
@c be at a lower level---a section-level node most often follows a
@c chapter-level node, for example.  `Next' and `Previous' refer to nodes
@c at the @emph{same} hierarchical level.  (The `Top' node contains the
@c exception to this rule.  Since the `Top' node is the only node at that
@c level, `Next' refers to the first following node, which is almost always
@c a chapter or chapter-level node.)@refill
@c 
@strong{注意してください:}`Next'は，マニュアルで同じ階層レベルの次のノー
ドを参照し，それは，Texinfoファイル内での次のノードである必要はありませ
ん．Texinfoファイルでは，次のノードは下のレベルかもしません --- 例えば，
セクションレベルノードは，章レベルのノードに続くことが多くあります．
`Next' と`Previous'は，@emph{同じ}階層レベルのノードを参照します．(`Top'
ノードはこの規則の例外です．`Top'ノードはそのレベルでの唯一のノードなの
で，`Next'は，以下にある最初のノードを参照し，それは通常，章や章レベルの
ノードです．)@refill
@end quotation

@c To go to Sections 2.1 and 2.2 using Info, you need a menu inside Chapter
@c 2.  (@xref{Menus}.)  You would write the menu just
@c before the beginning of Section 2.1, like this:@refill
@c 
Infoを使用して，セクション2.1と2.2に行くため，2章の内部にメニューが必要
です．(@xref{Menus}.)以下のように，セクション2.1をはじめる前に，メニュー
を書きます．@refill

@example
@group
   @@menu
   * Sect. 2.1::    Description of this section.
   * Sect. 2.2::
   @@end menu
@end group
@end example

@c Write the node for Sect. 2.1 like this:@refill
@c 
セクション2.1に対して，以下のように書いてください．@refill

@example
@group
   @@node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
   @@comment  node-name, next,      previous,  up
@end group
@end example

@c In Info format, the `Next' and `Previous' pointers of a node usually
@c lead to other nodes at the same level---from chapter to chapter or from
@c section to section (sometimes, as shown, the `Previous' pointer points
@c up); an `Up' pointer usually leads to a node at the level above (closer
@c to the `Top' node); and a `Menu' leads to nodes at a level below (closer
@c to `leaves').  (A cross reference can point to a node at any level;
@c see @ref{Cross References}.)@refill
@c 
Info書式では，ノードの`Next'と`Previous'ポインタは通常，同じレベルの他の
ノードへ導きます --- 章から章や，セクションからセクションのようになりま
す(ここまで見てきたように，`Previous'ポインタが上を指すこともあります)．
`Up'ポインタは通常，上のレベルのノードへ導きます(`Top'ノードに近い方向で
す)．`Menu'は下のレベルのノードへ導きます(`leaves'に近い方向です)．(相互
参照は，あらゆるレベルのノードを指し示します．@ref{Cross References}を参
照してください．)@refill

@c Usually, an @code{@@node} command and a chapter structuring command are
@c used in sequence, along with indexing commands.  (You may follow the
@c @code{@@node} line with a comment line that reminds you which pointer is
@c which.)@refill
@c 
通常，@code{@@node}コマンドと章の構造化コマンドは，索引コマンドと一緒に
順番に使用されます．(@code{@@node}行に，指し示すものを覚えておくためのコ
メント行を続けてもかまいません．)@refill

@c Here is the beginning of the chapter in this manual called ``Ending a
@c Texinfo File''.  This shows an @code{@@node} line followed by a comment
@c line, an @code{@@chapter} line, and then by indexing lines.@refill
@c 
このマニュアルの``Ending a Texinfo File''と呼ばれる章の最初は以下のよう
になっています．これには，@code{@@node}行，それに続くコメント行，
@code{@@chapter}行，そして索引行があります．@refill

@example
@group
@@node    Ending a File, Structuring, Beginning a File, Top
@@comment node-name,     next,        previous,         up
@@chapter Ending a Texinfo File
@@cindex Ending a Texinfo file
@@cindex Texinfo file ending
@@cindex File ending
@end group
@end example


@node node
@c @section The @code{@@node} Command
@section @code{@@node}コマンド

@cindex Node, defined
@findex node

@c A @dfn{node} is a segment of text that begins at an @code{@@node}
@c command and continues until the next @code{@@node} command.  The
@c definition of node is different from that for chapter or section.  A
@c chapter may contain sections and a section may contain subsections;
@c but a node cannot contain subnodes; the text of a node continues only
@c until the next @code{@@node} command in the file.  A node usually
@c contains only one chapter structuring command, the one that follows
@c the @code{@@node} line.  On the other hand, in printed output nodes
@c are used only for cross references, so a chapter or section may
@c contain any number of nodes.  Indeed, a chapter usually contains
@c several nodes, one for each section, subsection, and
@c subsubsection.
@c 
@dfn{ノード(node)}とは，@code{@@node}コマンドで始まり，次の@code{@@node}
コマンドまで続くテキストの塊です．ノードの定義は章やセクションとは異なり
ます．章にセクションを含めてもかまいませんし，セクションにサブセクション
を含めてもかまいません．しかし，ノードにサブノードを含めることは不可能で
す．ノードのテキストは，ファイルの次の@code{@@node}コマンドまで続くだけ
です．ノードは通常，章の構造化コマンドを一つだけ含み，それは
@code{@@node}行に続けます．一方，印刷物ではノードは相互参照としてのみ使
用されるので，章やセクションに複数のノードを含めてもかまいません．実際，
章は通常，それぞれのセクション，サブセクション，そしてサブサブセクション
となる複数のノードを含んでいます．

@c To create a node, write an @code{@@node} command at the beginning of a
@c line, and follow it with up to four arguments, separated by commas, on
@c the rest of the same line.  The first argument is required; it is the
@c name of this node.  The subsequent arguments are the names of the
@c `Next', `Previous', and `Up' pointers, in that order, and may be omitted
@c if your Texinfo document is hierarchically organized (@pxref{makeinfo
@c Pointer Creation}).
@c 
ノードを作成するため，@code{@@node}コマンドを行の最初に書き，カンマで分
離した四つの引数を同じ行の残りに続けてください．最初の引数は必要です．そ
れはノードの名前です．次の引数は，順番で，`Next'，`Previous'，そして`Up' 
ポインタの名前で，Texinfoドキュメントが階層的に組織化されている場合，省
略可能です(@pxref{makeinfo Pointer Creation})．

@c You may insert spaces before each name if you wish; the spaces are
@c ignored.  You must write the name of the node and (if present) the names
@c of the `Next', `Previous', and `Up' pointers all on the same line.
@c Otherwise, the formatters fail.  (@inforef{Top, info, info}, for more
@c information about nodes in Info.)
@c 
好みにより，それぞれの名前の前にスペースを挿入してもかまいません．スペー
スは無視されます．ノードの名前と，(存在する場合は)`Next'，`Previous'，そ
して`Up'ポインタの名前をすべて同じ行に書く必要があります．そうしない場合，
書式化は失敗します．(Infoのノードの詳細は，@inforef{Top, info,
info-ja}.)

@c Usually, you write one of the chapter-structuring command lines
@c immediately after an @code{@@node} line---for example, an
@c @code{@@section} or @code{@@subsection} line.  (@xref{Structuring
@c Command Types}.)
@c 
通常，章の構造化コマンド行を@code{@@node}の直後に書き，例えば，それは
@code{@@section}や@code{@@subsection}です．(@xref{Structuring Command
Types}.)

@quotation
@c @strong{Please note:} The GNU Emacs Texinfo mode updating commands work
@c only with Texinfo files in which @code{@@node} lines are followed by chapter
@c structuring lines.  @xref{Updating Requirements}.
@c 
@strong{注意してください:}GNU Emacs Texinfoモードの更新コマンドは，
@code{@@node}行が章の構造化コマンドに続いているTexinfoファイルでのみ動作
します．@xref{Updating Requirements}.
@end quotation

@c @TeX{} uses @code{@@node} lines to identify the names to use for cross
@c references.  For this reason, you must write @code{@@node} lines in a
@c Texinfo file that you intend to format for printing, even if you do not
@c intend to format it for Info.  (Cross references, such as the one at the
@c end of this sentence, are made with @code{@@xref} and related commands;
@c see @ref{Cross References}.)
@c 
@TeX{}では，相互参照で使用する名前を識別するために@code{@@node}行を使用
します．このため，@code{@@node}行を印刷のための書式化を行いたいTexinfo 
ファイルに，たとえInfoで書式化するつもりがなくても書く必要があります．
(相互参照は，この文章の終りにあるようなもので，@code{@@xref}とそれに関連
するコマンドで作成されます．@ref{Cross References}を参照してください．)

@menu
* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an @code{@@node} line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @@-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the @code{@@top} command.
@end menu


@node Node Names
@c @subsection Choosing Node and Pointer Names
@subsection ノードとポインタの名前の選択

@cindex Node names, choosing
@c The name of a node identifies the node.  The pointers enable
@c you to reach other nodes and consist simply of the names of those nodes.
@c 
ノード名はノードの識別子です．ポインタで他のノードに行くことが可能で，そ
れは単純にこれらのノード名から成り立っています．

@c Normally, a node's `Up' pointer contains the name of the node whose menu
@c mentions that node.  The node's `Next' pointer contains the name of the
@c node that follows that node in that menu and its `Previous' pointer
@c contains the name of the node that precedes it in that menu.  When a
@c node's `Previous' node is the same as its `Up' node, both node pointers
@c name the same node.
@c 
通常，ノードの`Up'ポインタは，そのノードを記述しているメニューがあるノー
ドの名前を含みます．ノードの`Next'ポインタは，メニューでそのノードの次の
ノード名を含み，`Previous'ポインタは，メニューでそのノードの前のノード名
を含みます．ノードの`Previous'ノードが`Up'ノードと同じとき，両方のノード
は同じノード名を示します．

@c Usually, the first node of a Texinfo file is the `Top' node, and its
@c `Up' and `Previous' pointers point to the @file{dir} file, which
@c contains the main menu for all of Info.
@c 
通常，Texinfoファイルの最初のノードは`Top'ノードで，その`Up'と`Previous' 
ポインタは@file{dir}ファイルを指し示し，それはInfo全てのメインメニューを
含んでいます．

@c The `Top' node itself contains the main or master menu for the manual.
@c Also, it is helpful to include a brief description of the manual in the
@c `Top' node.  @xref{First Node}, for information on how to write the
@c first node of a Texinfo file.
@c 
`Top'ノード自身は，マニュアルのメインまたはマスターメニューを含みます．
また，`Top'ノードに簡単なマニュアルの記述を含めると役に立ちます．Texinfo 
ファイルの最初のノードの書き方の詳細は，@xref{First Node}.

@c Even when you explicitly specify all pointers, that does not mean you
@c can write the nodes in the Texinfo source file in an arbitrary order!
@c Because @TeX{} processes the file sequentially, irrespective of node
@c pointers, you must write the nodes in the order you wish them to appear
@c in the printed output.
@c 
明示的に全てのポインタを指定したときでも，任意の順番でTexinfoソースファ
イルにノードを書くことができるということを意味するわけではありません！
@TeX{}は，ノードポインタにかかわらずファイルを順番に処理するので，印刷物
に現したい順番にノードを書く必要があります．


@node Writing a Node
@c @subsection How to Write an @code{@@node} Line
@subsection @code{@@node}行の書き方
@cindex Writing an @code{@@node} line
@cindex @code{@@node} line writing
@cindex Node line writing

@c The easiest way to write an @code{@@node} line is to write @code{@@node}
@c at the beginning of a line and then the name of the node, like
@c this:@refill
@c 
@code{@@node}行の最も簡単な書き方は，@code{@@node}を行の最初に書き，その
後にノード名を以下のように書く方法です．@refill

@example
@@node @var{node-name}
@end example

@c If you are using GNU Emacs, you can use the update node commands
@c provided by Texinfo mode to insert the names of the pointers; or you
@c can leave the pointers out of the Texinfo file and let @code{makeinfo}
@c insert node pointers into the Info file it creates.  (@xref{Texinfo
@c Mode}, and @ref{makeinfo Pointer Creation}.)@refill
@c 
GNU Emacsを使用している場合，ポインタ名を挿入するために，Texinfoモードで
ノードの更新コマンドが提供されています．また，ポインタをTexinfoファイル
の外に置き，@code{makeinfo}でノードポインタを作成するInfoファイルに挿入
することも可能です．(@xref{Texinfo Mode}.  また@ref{makeinfo Pointer
Creation}を参照してください．)@refill

@c Alternatively, you can insert the `Next', `Previous', and `Up'
@c pointers yourself.  If you do this, you may find it helpful to use the
@c Texinfo mode keyboard command @kbd{C-c C-c n}.  This command inserts
@c @samp{@@node} and a comment line listing the names of the pointers in
@c their proper order.  The comment line helps you keep track of which
@c arguments are for which pointers.  This comment line is especially useful
@c if you are not familiar with Texinfo.@refill
@c 
代わりに，`Next'，`Previous'，そして`Up'ポインタを独自に挿入することも可
能です．こうする場合，Texinfoモードでキーボードコマンドの@kbd{C-c C-c n} 
を使用すると便利だと思います．このコマンドは，@samp{@@node}と，適切な順
番でポインタ名をリストアップしたコメント行を挿入します．コメント行は，引
数がどのポインタに対するものかを，追跡記録するのに役立ちます．このコメン
ト行は，Texinfoに精通していない場合，特に便利です．@refill

@c The template for a fully-written-out node line with `Next', `Previous',
@c and `Up' pointers looks like this:@refill
@c 
`Next'，`Previous'，そして`Up'ポインタがある，完全に書かれたノード行のテ
ンプレートは以下のようになります．@refill

@example
@@node @var{node-name}, @var{next}, @var{previous}, @var{up}
@end example

@c If you wish, you can ignore @code{@@node} lines altogether in your first
@c draft and then use the @code{texinfo-insert-node-lines} command to
@c create @code{@@node} lines for you.  However, we do not recommend this
@c practice.  It is better to name the node itself at the same time that
@c you write a segment so you can easily make cross references.  A large
@c number of cross references are an especially important feature of a good
@c Info file.
@c 
希望があれば，初稿では@code{@@node}行を完全に無視することが可能で，その
後で@code{texinfo-insert-node-lines}コマンドを@code{@@node}行を作成する
ために使用してください．しかし，この方法はお勧めしません．その部分を書く
と同時にそれ自身のノードに名前を付ける方が良く，そうすることで相互参照を
作成しやすくなります．相互参照が多数あることは，良いInfoファイルの特徴と
して特に重要です．

@c After you have inserted an @code{@@node} line, you should immediately
@c write an @@-command for the chapter or section and insert its name.
@c Next (and this is important!), put in several index entries.  Usually,
@c you will find at least two and often as many as four or five ways of
@c referring to the node in the index.  Use them all.  This will make it
@c much easier for people to find the node.
@c 
@code{@@node}行を挿入した後，すぐに@@-コマンドを章やセクションに対し書き，
名前を挿入するべきです．次に(これが肝心！)，いくつかの索引項目を書いてく
ださい．通常，少なくとも二つ書き，索引でノードを参照する方法として，四つ
または五つあることもよくあります．これで，人々がノードをより容易に見つけ
られるようになります．


@node Node Line Tips
@c @subsection @code{@@node} Line Tips
@subsection @code{@@node}行の助言

@c Here are three suggestions:
@c 
ここに三つの提案があります．

@itemize @bullet
@item
@c Try to pick node names that are informative but short.@refill
@c 
有益だが短いノード名を選んでみてください．@refill

@c In the Info file, the file name, node name, and pointer names are all
@c inserted on one line, which may run into the right edge of the window.
@c (This does not cause a problem with Info, but is ugly.)@refill
@c 
Infoファイルでは，ファイル名，ノード名，そしてポインタ名は全て一行に挿入
され，それはウィンドウの右端まで行くかもしれません．(これは，Infoの問題
ではありませんが，醜いです．)@refill

@item
@c Try to pick node names that differ from each other near the beginnings
@c of their names.  This way, it is easy to use automatic name completion in
@c Info.@refill
@c 
名前の始まりが他とは違うノード名を選んでみてください．これで，Infoの自動
的な名前補完が使用しやすくなります．@refill

@item
@c By convention, node names are capitalized just as they would be for
@c section or chapter titles---initial and significant words are
@c capitalized; others are not.@refill
@c 
慣習的に，ノード名は，セクションや章のタイトルで --- 最初と重要な単語が
大文字になるように --- 大文字になります．他は違います．@refill
@end itemize


@node Node Line Requirements
@c @subsection @code{@@node} Line Requirements
@subsection @code{@@node}行の必要事項

@cindex Node line requirements
@cindex Restrictions on node names
@c Here are several requirements for @code{@@node} lines:
@c 
@code{@@node}行でいくつかある必要事項は以下のようなものです．

@itemize @bullet
@cindex Unique nodename requirement
@cindex Node name must be unique
@item
@c All the node names for a single Info file must be unique.
@c 
全てのノード名は，単一のInfoファイルで唯一のものとする必要があります．

@c Duplicates confuse the Info movement commands.  This means, for
@c example, that if you end every chapter with a summary, you must name
@c each summary node differently.  You cannot just call each one
@c ``Summary''.  You may, however, duplicate the titles of chapters, sections,
@c and the like.  Thus you can end each chapter in a book with a section
@c called ``Summary'', so long as the node names for those sections are all
@c different.
@c 
重複するとInfo移動コマンドで混乱します．例えば，概要で全ての章を終える場
合，それぞれの概要のノードを異なる名前にする必要があるという意味です．そ
れぞれを一つの``概要''とすることはできません．しかし，章，セクション，そ
してそれに類するもののタイトルは重複してもかまいません．このため，これら
のセクションに対するノード名が全て異なっている限り，本のそれぞれの章を
``概要''というセクションで終えることが可能です．

@item
@c A pointer name must be the name of a node.
@c 
ポインタ名は，ノード名にする必要があります．

@c The node to which a pointer points may come before or after the
@c node containing the pointer.
@c 
ポインタが示すノードは，そのポインタを含むノードの前でも後でもかまいませ
ん．

@cindex @@-commands in nodename
@cindex Node name, should not contain @@-commands
@item
@c @@-commands in node names are not allowed.  This includes punctuation
@c characters that are escaped with a @samp{@@}, such as @code{@@} and
@c @code{@{}.  (For a few rare cases when this is useful, Texinfo has
@c limited support for using @w{@@-commands} in node names; see
@c @ref{Pointer Validation}.)
@c 
ノード名での@@-コマンドは許可されていません，これには，@code{@@}と
@code{@{}のような，@samp{@@}でエスケープされている句読点文字が含まれます．
(これが役に立つときは滅多にないので，Texinfoではノード名で@w{@@-コマンド} 
を使用することに対するサポートに制限があります．@ref{Pointer Validation} 
を参照してください．)

@item
@cindex Parentheses in nodename
@c You cannot use parentheses in node names, because a node name such as
@c @samp{(foo)bar} is interpreted by the Info readers as a node
@c @samp{bar} in an Info file @file{foo}.
@c 
@samp{(foo)bar}のようなノード名は，InfoリーダーがInfoファイル@file{foo} 
にあるノード@samp{bar}だと解釈するので，ノード名でカッコを使用することは
できません．

@item
@cindex Apostrophe in nodename
@cindex Colon in nodename
@cindex Comma in nodename
@cindex Period in nodename
@cindex Characters, invalid in node name
@cindex Invalid characters in node names
@c Unfortunately, you cannot use periods, commas, colons or apostrophes
@c within a node name; these confuse @TeX{} or the Info formatters.
@c 
残念ながら，ピリオド，カンマ，コロン，またはアポストロフィをノード名に使
用することはできません．これらで@TeX{}やInfoフォーマッタが混乱します．

@need 700
@c For example, the following is a section title in this manual:
@c 
例えば，以下はこのマニュアルのセクションのタイトルです．

@smallexample
@@code@{@@@@unnumberedsec@}, @@code@{@@@@appendixsec@}, @@code@{@@@@heading@}
@end smallexample

@noindent
@c But the corresponding node name lacks the commas and the @@'s:
@c 
しかし，対応するノード名にはカンマと@@がありません．

@smallexample
unnumberedsec appendixsec heading
@end smallexample

@cindex Case in node name
@item
@c Case is significant.
@c 
大文字小文字の区別は重要です．
@end itemize


@node First Node
@c @subsection The First Node
@subsection 最初のノード
@cindex Top node is first
@cindex First node

@c The first node of a Texinfo file is the @dfn{Top} node, except in an
@c included file (@pxref{Include Files}).  The Top node should contain a
@c short summary, copying permissions, and a master menu.  @xref{The Top
@c Node}, for more information on the Top node contents and examples.
@c 
Texinfoファイルの最初のノードは，インクルードファイルは例外として
(@pxref{Include Files})，@dfn{トップ(Top)}ノードです．トップノードには，
ドキュメントの短い概要，コピーの許可，そしてマスターメニューを含めるべき
です．Topノードの内容と例の詳細は，@xref{The Top Node}.

@c Here is a description of the node pointers to be used in the Top node:
@c 
Topノードで使用されているノードポインタの記述は以下のようになります．

@itemize @bullet

@item
@cindex Up node of Top node
@cindex (dir) as Up node of Top node
@c The Top node (which must be named @samp{top} or @samp{Top}) should have
@c as its `Up' node the name of a node in another file, where there is a
@c menu that leads to this file.  Specify the file name in parentheses.
@c 
トップノードは(@samp{top}または@samp{Top}と命名する必要があり)，`Up'ノー
ドとして他のファイルのノード名を持つべきで，それはこのファイルへ導くメ
ニューがあります．カッコでファイルを指定してください．

@c Usually, all Info files are installed in the same Info directory tree;
@c in this case, use @samp{(dir)} as the parent of the Top node; this is
@c short for @samp{(dir)top}, and specifies the Top node in the @file{dir}
@c file, which contains the main menu for the Info system as a whole. 
@c 
通常，すべてのInfoファイルは，同じInfoディレクトリツリーにインストールさ
れます．この状況では，Topノードの親として@samp{(dir)}を使用してください．
これは@samp{(dir)top}を短くしたもので，@file{dir}のTopノードを指定し，そ
れにはInoシステム全体のメインメニューが含まれています．

@item
@cindex Previous node of Top node
@c On the other hand, do not define the `Previous' node of the Top node to
@c be @samp{(dir)}, as it causes confusing behavior for users: if you are
@c in the Top node and hits @key{DEL} to go backwards, you wind up in the
@c middle of the some other entry in the @file{dir} file, which has nothing
@c to do with what you were reading.
@c 
一方，ユーザに対し動作が紛らわしいので，トップノードの`Previous'ノードを
@samp{(dir)}で定義しないでください．トップノードにいて，そこから戻るため
に@key{DEL}を押した場合，@file{dir}ファイルの他の項目の真ん中に戻るので
すが，それは読みたいものではないはずです．

@item
@cindex Next node of Top node
@c The `Next' node of the Top node should be the first chapter in your
@c document.
@c 
Topノードの`Next'ノードは，ドキュメントの最初の章にすべきです．

@end itemize

@c @xref{Installing an Info File}, for more information about installing
@c an Info file in the @file{info} directory.
@c 
Infoファイルの@file{info}ディレクトリへのインストールの詳細は，
@xref{Installing an Info File}.

@c For concreteness, here is an example with explicit pointers (which you
@c can maintain automatically with the texinfo mode commands):
@c 
具体的には，明示的なポインタを示す例は以下のようになります(texinfoモード
のコマンドで自動的に管理することが可能です)．

@c Or you can leave the pointers off entirely and let the tools implicitly
@c define them.  This is recommended.  Thus:
@c 
または，ポインタを完全に無くし，ツールに暗黙的に定義させることも可能です．
これは推奨されます．このため以下のようにします．

@example
@@node Top
@end example


@node makeinfo top command
@c @subsection The @code{@@top} Sectioning Command
@subsection @code{@@top}セクションコマンド
@findex top @r{(@@-command)}

@c A special sectioning command, @code{@@top} should be used with the
@c @code{@@node Top} line.  The @code{@@top} sectioning command tells
@c @code{makeinfo} that it marks the `Top' node in the file.  It provides
@c the information that @code{makeinfo} needs to insert node pointers
@c automatically.  Write the @code{@@top} command at the beginning of the
@c line immediately following the @code{@@node Top} line.  Write the title
@c on the remaining part of the same line as the @code{@@top} command.
@c 
特別なセクションコマンド@code{@@top}は，@code{@@node Top}行とともに使用
すべきです．@code{@@top}セクションコマンドは，それがファイルの`Top'ノー
ドだという印を付けるよう@code{makeinfo}に伝えます．それは，ノードポイン
タを自動的に挿入するために@code{makeinfo}が必要とする情報を提供します．
@code{@@top}コマンドを行の最初に書き，直後に@code{@@node Top}行を続けて
ください．@code{@@top}コマンドと同じ行の残りの部分にタイトルを書いてくだ
さい．

@c In Info, the @code{@@top} sectioning command causes the title to appear
@c on a line by itself, with a line of asterisks inserted underneath, as
@c other sectioning commands do.
@c 
Infoでは，@code{@@top}セクションコマンドは，タイトルが単独行に現れるよう
にし，他のセクションコマンドと同様にアスタリスクを下に挿入します．

@c In @TeX{} and @code{texinfo-format-buffer}, the @code{@@top}
@c sectioning command is merely a synonym for @code{@@unnumbered}.
@c Neither of these formatters require an @code{@@top} command, and do
@c nothing special with it.  You can use @code{@@chapter} or
@c @code{@@unnumbered} after the @code{@@node Top} line when you use
@c these formatters.  Also, you can use @code{@@chapter} or
@c @code{@@unnumbered} when you use the Texinfo updating commands to
@c create or update pointers and menus.
@c 
@TeX{}と@code{texinfo-format-buffer}では，@code{@@top}セクションコマンド
は@code{@@unnumbered}とほとんど同義語です．これらのフォーマッタは，
@code{@@top}コマンドを要求せず，特別なことは何もしません．これらのフォー
マッタを使用するとき，@code{@@chapter}や@code{@@unnumbered}を
@code{@@node Top}行の後に使用することも可能です．また，ポインタとメニュー
を作成更新するため，Texinfo更新コマンドを使用する時に@code{@@chapter}や
@code{@@unnumbered}を使用することも可能です．

@c Thus, in practice, a Top node starts like this:
@c 
このため，具体的には，Topノードは以下のようにして開始します．

@example
@@node Top
@@top Your Manual Title
@end example


@node makeinfo Pointer Creation
@c @section Creating Pointers with @code{makeinfo}
@section @code{makeinfo}でポインタを作成する
@cindex Creating pointers with @code{makeinfo}
@cindex Pointer creation with @code{makeinfo}
@cindex Automatic pointer creation with @code{makeinfo}

@c The @code{makeinfo} program has a feature for automatically defining
@c node pointers for a hierarchically organized file.
@c 
@code{makeinfo}プログラムは，階層的に組織化されているファイルに対し，自
動的にノードポインタを定義する機能があります．

@c When you take advantage of this feature, you do not need to write the
@c `Next', `Previous', and `Up' pointers after the name of a node.
@c However, you must write a sectioning command, such as @code{@@chapter}
@c or @code{@@section}, on the line immediately following each truncated
@c @code{@@node} line (except that comment lines may intervene).
@c 
この機能を利用するとき，`Next'，`Previous'，そして`Up'ポインタを，ノード
名の後に書く必要がありません．しかし，@code{@@chapter}や@code{@@section} 
のようなセクションコマンドを，それぞれの切り詰めた@code{@@node}行の直後
の行に書く必要があります(例外は，コメント行が間に入ることです)．

@c In addition, you must follow the `Top' @code{@@node} line with a line
@c beginning with @code{@@top} to mark the `Top' node in the
@c file.  @xref{makeinfo top, , @code{@@top}}.
@c 
さらに，`Top'@code{@@node}行に，ファイルの`Top'ノードに印を付ける
@code{@@top}で始まる行を続ける必要があります．@xref{makeinfo top, ,
@code{@@top}}.

@c Finally, you must write the name of each node (except for the `Top'
@c node) in a menu that is one or more hierarchical levels above the
@c node's hierarchical level.
@c 
最後に，(`Top'ノード以外の)それぞれのノード名を，ノードの階層レベルの上
に，一つかそれ以上の階層レベルとなるメニューに書く必要があります．

@c This node pointer insertion feature in @code{makeinfo} relieves you from
@c the need to update menus and pointers manually or with Texinfo mode
@c commands.  (@xref{Updating Nodes and Menus}.)
@c 
この@code{makeinfo}のノードポインタ挿入の機能は，手動やTexinfoモードのコ
マンドでメニューやポインタを更新する必要から開放します．(@xref{Updating
Nodes and Menus}.)

@c In most cases, you will want to take advantage of this feature and not
@c redundantly specify node pointers.  However, Texinfo documents are not
@c required to be organized hierarchically or in fact contain sectioning
@c commands at all.  For example, if you never intend the document to be
@c printed.  In those cases, you will need to explicitly specify the pointers.
@c 
ほとんどの状況で，この機能の利点を利用し，冗長にノードポインタを指定した
くはないでしょう．しかし，Texinfoドキュメントは，階層的に組織化されてい
ることや実際にセクションコマンドが完全に含まれていることを要求していませ
ん．例えば，印刷を目的としていないドキュメントの場合です．これらの状況で
は，明示的にポインタを指定する必要があります．


@node anchor
@c @section @code{@@anchor}: Defining Arbitrary Cross-reference Targets
@section @code{@@anchor}:相互参照のターゲット任意に定義する

@findex anchor
@cindex Anchors
@cindex Cross-reference targets, arbitrary
@cindex Targets for cross-references, arbitrary

@c An @dfn{anchor} is a position in your document, labeled so that
@c cross-references can refer to it, just as they can to nodes.  You create
@c an anchor with the @code{@@anchor} command, and give the label as a
@c normal brace-delimited argument.  For example:
@c 
@dfn{アンカー(anchor)}は，相互参照が参照可能な，まるでノードのようなドキュ
メント内の位置です．@code{@@anchor}コマンドでアンカーを作成し，普通のカッ
コで分離された引数としてラベルを与えます．例えば，以下のようになります．
@example
This marks the @@anchor@{x-spot@}spot.
@dots{}
@@xref@{x-spot,,the spot@}.
@end example

@noindent
@c produces:
@c 
以下を生成します．

@example
This marks the spot.
@dots{}
See [the spot], page 1.
@end example

@c As you can see, the @code{@@anchor} command itself produces no output.
@c This example defines an anchor `x-spot' just before the word `spot'.
@c You can refer to it later with an @code{@@xref} or other cross-reference
@c command, as shown.  @xref{Cross References}, for details on the
@c cross-reference commands.
@c 
御覧のように，@code{@@anchor}コマンド自身は出力を生成しません．この例は
アンカー`x-spot'だけを，単語`スポット'の直前に定義します．その後で，後述
の@code{@@xref}や，その他の相互参照を使用して参照することが可能になりま
す．相互参照の詳細は，@xref{Cross References}.

@c It is best to put @code{@@anchor} commands just before the position you
@c wish to refer to; that way, the reader's eye is led on to the correct
@c text when they jump to the anchor.  You can put the @code{@@anchor}
@c command on a line by itself if that helps readability of the source.
@c Spaces are always ignored after @code{@@anchor}.
@c 
@code{@@anchor}コマンドを参照する位置の直前に置くのが最善です．そうする
ことで，読者の目はアンカーにジャンプしたとき正しいテキストに導かれます．
@code{@@anchor}コマンドを単独行に置くことでソースの可読性が改善される場
合は，そうすることもできます．@code{@@anchor}後のスペースは常に無視され
ます．

@c Anchor names and node names may not conflict.  Anchors and nodes are
@c given similar treatment in some ways; for example, the @code{goto-node}
@c command in standalone Info takes either an anchor name or a node name as
@c an argument.  (@xref{goto-node,,,info-stnd,GNU Info}.)
@c 
アンカー名とノード名は衝突してはいけません．アンカーとノードは同じように
扱われることもあります．例えば，スタンドアローンInfoの@code{goto-node}コ
マンドは，アンカー名やノード名を引数としてとります．
(@xref{goto-node,,,info-stnd-ja,GNU Info}.)


@node Menus
@c @chapter Menus
@chapter メニュー
@cindex Menus
@findex menu

@c @dfn{Menus} contain pointers to subordinate nodes.@footnote{Menus can
@c carry you to any node, regardless of the hierarchical structure; even to
@c nodes in a different Info file.  However, the GNU Emacs Texinfo mode
@c updating commands work only to create menus of subordinate nodes.
@c Conventionally, cross references are used to refer to other nodes.} In
@c Info, you use menus to go to such nodes.  Menus have no effect in
@c printed manuals and do not appear in them.
@c 
@dfn{メニュー(Menus)}は，従属的なノードへのポインタを含みます．
@footnote{メニューでは，階層構造にかかわらずあらゆるノードへ行くことがで
きます．異なるInfo ファイルのノードへ行くことすら可能です．しかし，GNU
Emacs Texinfoモードの更新コマンドは，従属的なノードのメニューしか作成し
ません．慣習で，相互参照は他のノードへの参照のために使用します．}Infoで
は，メニューをそのようなノードへ行くために使用します．メニューは印刷され
たマニュアルで効果がなく，それらには現れません．

@c By convention, a menu is put at the end of a node since a reader who
@c uses the menu may not see text that follows it.  Furthermore, a node
@c that has a menu should not contain much text. If you have a lot of text
@c and a menu, move most of the text into a new subnode---all but a few
@c lines.  Otherwise, a reader with a terminal that displays only a few
@c lines may miss the menu and its associated text.  As a practical matter,
@c you should locate a menu within 20 lines of the beginning of the
@c node.
@c 
慣習で，メニューを使用する読者がそれ以降のテキストを見ない可能性があるの
で，メニューはノードの終りに置かれます．さらに，メニューがあるノードは多
くのテキストを含むべきではありません．多くのテキストとメニューがある場合
は，テキストのほとんどを --- 数行以外全て --- 新しいサブノードに移動して
ください．そうしない場合，数行しか表示できない端末を使用している読者は，
メニューとそれに関連するテキストが見えません．実際問題として，メニューは
ノードの最初の20行以内に配置すべきです．

@menu
* Menu Location::               Put a menu in a short node.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.
@end menu


@node Menu Location, Writing a Menu, Menus, Menus
@ifinfo
@heading Menus Need Short Nodes
@heading 短いノードが必要なメニュー
@end ifinfo
@cindex Menu location
@cindex Location of menus
@cindex Nodes for menus are short
@cindex Short nodes for menus

@c The short text before a menu may look awkward in a printed manual.  To
@c avoid this, you can write a menu near the beginning of its node and
@c follow the menu by an @code{@@node} line, and then an @code{@@heading}
@c line located within @code{@@ifinfo} and @code{@@end ifinfo}.  This way,
@c the menu, @code{@@node} line, and title appear only in the Info file,
@c not the printed document.
@c 
メニューの前の短いテキストは，印刷されたマニュアルで不様に見えるかもしれ
ません．これを避けるため，メニューをそのノードの最初の方に書き，メニュー
を@code{@@node}行で続け，その後で@code{@@heading}行を@code{@@ifinfo}と
@code{@@end ifinfo}の間に書くことが可能です．こうすることで，
@code{@@node}行のメニューとタイトルはInfoファイルでしか現れず，印刷され
たドキュメントには現れません．

@c For example, the preceding two paragraphs follow an Info-only menu,
@c @code{@@node} line, and heading, and look like this:
@c 
例えば，前の二つの段落は，Infoのみのメニュー@code{@@node}行と見出しが続き，
以下のように見えます．

@example
@group
@@menu
* Menu Location::             Put a menu in a short node.
* Writing a Menu::            What is a menu?
* Menu Parts::                A menu entry has three parts.
* Less Cluttered Menu Entry:: Two part menu entry.
* Menu Example::              Two and three part entries.
* Other Info Files::          How to refer to a different
                               Info file.
@@end menu

@@node Menu Location, Writing a Menu, , Menus
@@ifinfo
@@heading Menus Need Short Nodes
@@end ifinfo
@end group
@end example

@c The Texinfo file for this document contains a number of
@c examples of this procedure; one is at the beginning of this chapter.
@c 
このドキュメントのTexinfoファイルは，1ダース以上のこの手続きの例を含んで
います．一つはこの章の最初にあります．もう一つはこの章の最初にあります．


@node Writing a Menu, Menu Parts, Menu Location, Menus
@c @section Writing a Menu
@section メニューを書く
@cindex Writing a menu
@cindex Menu writing

@c A menu consists of an @code{@@menu} command on a line by
@c itself followed by menu entry lines or menu comment lines
@c and then by an @code{@@end menu} command on a line by
@c itself.@refill
@c 
メニューは，単独行の@code{@@menu}コマンドと，それに続く項目行やメニュー
コメント行と，その後の単独行の@code{@@end menu}コマンドから成り立ちます．
@refill

@c A menu looks like this:@refill
@c 
メニューは，以下のようになります．@refill

@example
@group
@@menu
Larger Units of Text

* Files::                       All about handling files.
* Multiples: Buffers.           Multiple buffers; editing
                                 several files at once.
@@end menu
@end group
@end example

@c In a menu, every line that begins with an @w{@samp{* }} is a @dfn{menu
@c entry}.  (Note the space after the asterisk.)  A line that does not
@c start with an @w{@samp{* }} may also appear in a menu.  Such a line is
@c not a menu entry but is a menu comment line that appears in the Info
@c file.  In the example above, the line @samp{Larger Units of Text} is a
@c menu comment line; the two lines starting with @w{@samp{* }} are menu
@c 
メニューでは，@w{@samp{* }}で始まる全ての行は@dfn{メニュー項目(menu
entry)}です．(アスタリスクの後のスペースに注意してください．)@w{@samp{*
}}で始まらない行もメニューに現すこともできます．そのような行はメニュー項
目ではなく，Info ファイルに現れるメニューのコメント行になります．上記の
例では，@samp{Larger Units of Text}はメニューのコメント行です．
@w{@samp{* }}で始まる二行はメニュー
@cindex Spaces, in menus
@c entries.  Space characters in a menu are preserved as-is; this allows
@c you to format the menu as you wish.
@c 
項目です．メニューのスペース文字はそのまま維持されます．これで，メニュー
を望み通りに書式化できます．


@node Menu Parts, Less Cluttered Menu Entry, Writing a Menu, Menus
@c @section The Parts of a Menu
@section メニューの部品
@cindex Parts of a menu
@cindex Menu parts
@cindex @code{@@menu} parts

@c A menu entry has three parts, only the second of which is required:
@c 
メニュー項目は，三つの部品があり，二番目のみ必要です．

@enumerate
@item
@c The menu entry name (optional).
@c 
メニュー項目名(オプション)．

@item
@c The name of the node (required).
@c 
ノード名(必須)．

@item
@c A description of the item (optional).
@c 
項目の記述(オプション)．
@end enumerate

@c The template for a menu entry looks like this:@refill
@c 
メニュー項目のテンプレートは以下のようになります．@refill

@example
* @var{menu-entry-name}: @var{node-name}.   @var{description}
@end example

@c Follow the menu entry name with a single colon and follow the node name
@c with tab, comma, period, or newline.@refill
@c 
メニュー項目名に，一つのコロンを続け，ノード名にタブ，カンマ，ピリオド，
または改行を続けてください．@refill

@c In Info, a user selects a node with the @kbd{m} (@code{Info-menu})
@c command.  The menu entry name is what the user types after the @kbd{m}
@c command.@refill
@c 
Infoでは，ユーザはノードを@kbd{m}(@code{Info-menu})コマンドで選択します．
メニュー項目名は，ユーザが@kbd{m}コマンドの後で入力するものです．@refill

@c The third part of a menu entry is a descriptive phrase or sentence.
@c Menu entry names and node names are often short; the description
@c explains to the reader what the node is about.  A useful description
@c complements the node name rather than repeats it.  The description,
@c which is optional, can spread over two or more lines; if it does, some
@c authors prefer to indent the second line while others prefer to align it
@c with the first (and all others).  It's up to you.
@c 
メニュー項目の三番目の部分は記述的な句または文です．メニュー項目名とノー
ド名は短い場合が多くなります．記述は，読者に何について書かれているノード
かを説明します．役立つ記述は，繰り返しではなくノード名への補完になります．
追加の記述は，二行以上に分けることができます．そうする場合，著作者は最初
(と他の全て)と同列にするより，二行目を字下げするほうを好みます．それはお
好みでお願いします．


@node Less Cluttered Menu Entry, Menu Example, Menu Parts, Menus
@comment  node-name,  next,  previous,  up
@c @section Less Cluttered Menu Entry
@section バラバラでないメニュー項目
@cindex Two part menu entry
@cindex Double-colon menu entries
@cindex Menu entries with two colons
@cindex Less cluttered menu entry
@cindex Uncluttered menu entry

@c When the menu entry name and node name are the same, you can write
@c the name immediately after the asterisk and space at the beginning of
@c the line and follow the name with two colons.@refill
@c 
メニュー項目名とノード名が同じとき，行の最初でアスタリスクとスペースの直
後に名前を書き，名前に二つのコロンを続けることが可能です．@refill

@need 800
@c For example, write
@c 
例えば，以下のように書きます．

@example
* Name::                                    @var{description}
@end example

@need 800
@noindent
@c instead of
@c 
以下の代わりです．

@example
* Name: Name.                               @var{description}
@end example

@c You should use the node name for the menu entry name whenever possible,
@c since it reduces visual clutter in the menu.@refill
@c 
メニューが見た目バラバラに散らばるので，可能な場合はノード名をメニュー項
目名として使用すべきです．

@node Menu Example, Other Info Files, Less Cluttered Menu Entry, Menus
@comment  node-name,  next,  previous,  up
@c @section A Menu Example
@section メニューの例
@cindex Menu example
@cindex Example menu

@c A menu looks like this in Texinfo:@refill
@c 
Texinfoでは，メニューは以下のようになります．@refill

@example
@group
@@menu
* menu entry name: Node name.   A short description.
* Node name::                   This form is preferred.
@@end menu
@end group
@end example

@need 800
@noindent
@c This produces:
@c 
これは，以下を生成します．

@example
@group
* menu:

* menu entry name: Node name.   A short description.
* Node name::                   This form is preferred.
@end group
@end example

@need 700
@c Here is an example as you might see it in a Texinfo file:@refill
@c 
Texinfoファイルで見られる例は以下のようになります．@refill

@example
@group
@@menu
Larger Units of Text

* Files::                       All about handling files.
* Multiples: Buffers.           Multiple buffers; editing
                                 several files at once.
@@end menu
@end group
@end example

@need 800
@noindent
@c This produces:
@c 
これは，以下を生成します．

@example
@group
* menu:
Larger Units of Text

* Files::                       All about handling files.
* Multiples: Buffers.           Multiple buffers; editing
                                 several files at once.
@end group
@end example

@c In this example, the menu has two entries.  @samp{Files} is both a menu
@c entry name and the name of the node referred to by that name.
@c @samp{Multiples} is the menu entry name; it refers to the node named
@c @samp{Buffers}. The line @samp{Larger Units of Text} is a comment; it
@c appears in the menu, but is not an entry.@refill
@c 
この例ではメニューに二つの項目があります．@samp{Files}はメニュー項目とそ
の名前で参照されるノード名です．@samp{Multiples}はメニュー項目名です．そ
れは，@samp{Buffers}という名前のノードで参照します．@samp{Larger Units
of Text}はコメントです．それはメニューには現れますが項目ではありません．
@refill

@c Since no file name is specified with either @samp{Files} or
@c @samp{Buffers}, they must be the names of nodes in the same Info file
@c (@pxref{Other Info Files, , Referring to Other Info Files}).@refill
@c 
@samp{Files}や@samp{Buffers}でファイル名が指定されていないので，それらは
同じInfoファイルでのノード名にする必要があります．(@pxref{Other Info
Files, , Referring to Other Info Files})．@refill

@node Other Info Files,  , Menu Example, Menus
@comment  node-name,  next,  previous,  up
@c @section Referring to Other Info Files
@section 他のInfoファイルへの参照
@cindex Referring to other Info files
@cindex Nodes in other Info files
@cindex Other Info files' nodes
@cindex Going to other Info files' nodes
@cindex Info; other files' nodes

@c You can create a menu entry that enables a reader in Info to go to a
@c node in another Info file by writing the file name in parentheses just
@c before the node name.  In this case, you should use the three-part menu
@c entry format, which saves the reader from having to type the file
@c name.@refill
@c 
ノード名の直前のカッコにファイル名を書くことで，Infoの読者が他のInfoファ
イルのノードへ行くことを可能にするメニュー項目を作成することが可能です．
この場合，三つの部分のメニュー項目の書式を使用するべきで，それで読者はファ
イル名を入力することを省略できます．@refill

@need 800
@c The format looks like this:@refill
@c 
書式は，以下のようになります．

@example
@group
@@menu
* @var{first-entry-name}:(@var{filename})@var{nodename}.     @var{description}
* @var{second-entry-name}:(@var{filename})@var{second-node}. @var{description}
@@end menu
@end group
@end example

@c For example, to refer directly to the @samp{Outlining} and
@c @samp{Rebinding} nodes in the @cite{Emacs Manual}, you would write a
@c menu like this:@refill
@c 
例えば，@cite{Emacs Manual}で直接@samp{Outlining}と@samp{Rebinding}ノー
ドを参照するため，メニューを以下のように書きます．@refill

@example
@group
@@menu
* Outlining: (emacs)Outline Mode. The major mode for
                                 editing outlines.
* Rebinding: (emacs)Rebinding.    How to redefine the
                                 meaning of a key.
@@end menu
@end group
@end example

@c If you do not list the node name, but only name the file, then Info
@c presumes that you are referring to the `Top' node.@refill
@c 
ノード名をリストアップせずファイル名だけにする場合，Infoは`Top'ノードを
参照しているものと推測します．@refill

@c The @file{dir} file that contains the main menu for Info has menu
@c entries that list only file names.  These take you directly to the `Top'
@c nodes of each Info document.  (@xref{Installing an Info File}.)
@c 
Infoのメインメニューを含む@file{dir}ファイルには，ファイル名のみを列挙し
たメニュー項目があります．これで，それぞれのInfoドキュメントの`Top'ノー
ドへ直接行くことができます(@pxref{Installing an Info File})．

@need 700
@c For example:
@c 
例えば，以下のようになります．

@example
@group
* Info: (info).         Documentation browsing system.
* Emacs: (emacs).       The extensible, self-documenting
                       text editor.
@end group
@end example

@noindent
@c (The @file{dir} top level directory for the Info system is an Info file,
@c not a Texinfo file, but a menu entry looks the same in both types of
@c file.)@refill
@c 
(Infoシステムのための@file{dir}のトップレベルディレクトリは，Texinfoファ
イルではなくInfoファイルですが，メニュー項目はどちらの形式のファイルでも
同じように見えます．)@refill

@c The GNU Emacs Texinfo mode menu updating commands only work with nodes
@c within the current buffer, so you cannot use them to create menus that
@c refer to other files.  You must write such menus by hand.
@c 
GNU Emacs Texinfoモードでのメニュー更新コマンドは，現在のバッファのノー
ドでのみ動作するので，他のファイルを参照するメニューを作成するために使用
することは不可能です．そのようなメニューは手で書く必要があります．


@node Cross References
@c @chapter Cross References
@chapter 相互参照
@cindex Making cross references
@cindex Cross references
@cindex References

@c @dfn{Cross references} are used to refer the reader to other parts of the
@c same or different Texinfo files.  In Texinfo, nodes and anchors are the
@c places to which cross references can refer.
@c 
@dfn{相互参照(Cross references)}は，同じまたは異なるTexinfoファイルの他
の部分へ読者を導くために使用します．Texinfoでは，ノードとアンカーが相互
参照が参照する場所です．

@menu
* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' @dots{}
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.
@end menu

@node References, Cross Reference Commands, Cross References, Cross References
@ifinfo
@heading What References Are For
@heading 参照されるもの
@end ifinfo

@c Often, but not always, a printed document should be designed so that
@c it can be read sequentially.  People tire of flipping back and forth
@c to find information that should be presented to them as they need
@c it.@refill
@c 
いつもではありませんが，ほとんどの印刷されたドキュメントは順番に読むよう
に設計されています．人々は，必要なとき提出されるべき情報を見つけるために，
前後にページをめくるのが嫌になります．@refill

@c However, in any document, some information will be too detailed for
@c the current context, or incidental to it; use cross references to
@c provide access to such information.  Also, an online help system or a
@c reference manual is not like a novel; few read such documents in
@c sequence from beginning to end.  Instead, people look up what they
@c need.  For this reason, such creations should contain many cross
@c references to help readers find other information that they may not
@c have read.@refill
@c 
しかしドキュメントには，現在の文脈に対しては詳しすぎたり主要でなかったり
する情報もあります．そのような情報へのアクセスを提供するため相互参照を使
用してください．また，オンラインヘルプシステムやリファレンスマニュアルは．
小説とは異なります．そのようなドキュメントを最初から最後まで順番に読む人
はほとんどいません．代わりに，人々は必要なところを拾い読みします．このた
め，そのようなものでは，読者が読まなかった可能性のある他の情報を見つける
とき役に立つ相互参照を多く含めるべきです．@refill

@c In a printed manual, a cross reference results in a page reference,
@c unless it is to another manual altogether, in which case the cross
@c reference names that manual.@refill
@c 
印刷されたマニュアルでは，完全に他のマニュアルでない限り，相互参照は結果
としてページ参照となり，他のマニュアルの場合は相互参照はマニュアルの名前
になります．@refill

@c In Info, a cross reference results in an entry that you can follow using
@c the Info @samp{f} command.  (@inforef{Help-Adv, Some advanced Info
@c commands, info}.)@refill
@c 
Infoでは，相互参照は結果としてInfoの@samp{f}コマンドに続いて使用可能な項
目となります．(@inforef{Help-Adv, Some advanced Info commands,
info}.)@refill

@c The various cross reference commands use nodes (or anchors,
@c @pxref{anchor,,@code{@@anchor}}) to define cross reference locations.
@c This is evident in Info, in which a cross reference takes you to the
@c specified location.  @TeX{} also uses nodes to define cross reference
@c locations, but the action is less obvious.  When @TeX{} generates a DVI
@c file, it records each node's page number and uses the page numbers in making
@c references.  Thus, if you are writing a manual that will only be
@c printed, and will not be used online, you must nonetheless write
@c @code{@@node} lines to name the places to which you make cross
@c references.@refill
@c 
様々な相互参照コマンドは，ノード(やアンカー
@pxref{anchor,,@code{@@anchor}})を相互参照の位置を定義するために使用しま
す．これはInfoの環境の話で，そこでの相互参照は指定した場所に移動します．
@TeX{}もノードを相互参照の位置を定義するために使用しますが，動作は明白で
はありません．@TeX{}がDVIファイルを生成するとき，それは，それぞれのノー
ドのページを記録し参照を作成する際にページ番号を使用します．このため，印
刷されるだけのマニュアルを書くだけでオンラインで使用しない場合でさえ，相
互参照する場所に名前をつけるために@code{@@node}行を書く必要があります．
@refill

@need 800
@node Cross Reference Commands, Cross Reference Parts, References, Cross References
@comment  node-name,  next,  previous,  up
@c @section Different Cross Reference Commands
@section 様々な相互参照コマンド
@cindex Different cross reference commands

@c There are four different cross reference commands:@refill
@c 
四つの様々な相互参照のコマンドがあります．@refill

@table @code
@item @@xref
@c Used to start a sentence in the printed manual saying @w{`See @dots{}'}
@c or an Info cross-reference saying @samp{*Note @var{name}: @var{node}.}.
@c 
印刷されたマニュアルでの@w{`See @dots{}'}や，Infoでの相互参照の
@samp{*Note @var{name}: @var{node}.}を告げる文を開始するために使用されま
す．

@item @@ref
@c Used within or, more often, at the end of a sentence; same as
@c @code{@@xref} for Info; produces just the reference in the printed
@c manual without a preceding `See'.@refill
@c 
文中や主に文の最後で使用します．Infoでは@code{@@xref}と同じです．印刷さ
れたマニュアルでは参照だけを生成し，前に`See'を生成しません．@refill

@item @@pxref
@c Used within parentheses to make a reference that suits both an Info
@c file and a printed book.  Starts with a lower case `see' within the
@c printed manual. (@samp{p} is for `parenthesis'.)@refill
@c 
Infoファイルや印刷された本に適した参照を生成するためカッコ内で使用します．
印刷されたマニュアルでは小文字の`see'で始まります．(@samp{p}は
`parenthesis'です．)@refill

@item @@inforef
@c Used to make a reference to an Info file for which there is no printed
@c manual.@refill
@c 
Infoファイルでの参照を作成するために使用し，印刷されたマニュアルにはあり
ません．@refill
@end table

@noindent
@c (The @code{@@cite} command is used to make references to books and
@c manuals for which there is no corresponding Info file and, therefore,
@c no node to which to point.   @xref{cite, , @code{@@cite}}.)@refill
@c 
(@code{@@cite}コマンドは，Infoと関係の無い本やマニュアルへの参照を作成す
るために使用され，それゆえ，指し示すノードはありません．@xref{cite, ,
@code{@@cite}}.)@refill

@node Cross Reference Parts, xref, Cross Reference Commands, Cross References
@comment  node-name,  next,  previous,  up
@c @section Parts of a Cross Reference
@section 相互参照の部品
@cindex Cross reference parts
@cindex Parts of a cross reference

@c A cross reference command requires only one argument, which is the
@c name of the node to which it refers.  But a cross reference command
@c may contain up to four additional arguments.  By using these
@c arguments, you can provide a cross reference name for Info, a topic
@c description or section title for the printed output, the name of a
@c different Info file, and the name of a different printed
@c manual.@refill
@c 
相互参照のコマンドは一つの引数のみを要求し，それは参照するノード名です．
しかし，相互参照コマンドは四つの追加の引数を含むことができます．これらの
引数を使用することで，Infoに対する相互参照名，トピックの記述や印刷物での
セクションのタイトル，異なるInfoファイルの名前，そして異なる印刷されたマ
ニュアルの名前を提供することが可能になります．@refill

@c Here is a simple cross reference example:@refill
@c 
簡単な相互参照の例は以下のようになります．@refill

@example
@@xref@{Node name@}.
@end example

@noindent
@c which produces
@c 
これは，以下を生成します．

@example
*Note Node name::.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section @var{nnn} [Node name], page @var{ppp}.
@end quotation

@need 700
@c Here is an example of a full five-part cross reference:@refill
@c 
完全な五つの部分を持つ相互参照は以下のようになります．@refill

@example
@group
@@xref@{Node name, Cross Reference Name, Particular Topic,
info-file-name, A Printed Manual@}, for details.
@end group
@end example

@noindent
@c which produces
@c 
これは，以下を生成します．

@example
*Note Cross Reference Name: (info-file-name)Node name,
for details.
@end example

@noindent
@c in Info and
@c 
Infoではこうなります．

@quotation
See section ``Particular Topic'' in @i{A Printed Manual}, for details.
@end quotation

@noindent
@c in a printed book.
@c 
印刷された本ではこうなります．

@c The five possible arguments for a cross reference are:@refill
@c 
相互参照に対する五つの利用可能な引数は，以下の通りです．@refill

@enumerate
@item
@c The node or anchor name (required).  This is the location to which the
@c cross reference takes you.  In a printed document, the location of the
@c node provides the page reference only for references within the same
@c document.@refill
@c 
ノードやアンカー名です(必須)．これは，相互参照がたどっていく場所です．印
刷されたドキュメントでは，ノードの場所は同じドキュメント内を参照するため
だけのページ参照を提供します．@refill

@item
@c The cross reference name for the Info reference, if it is to be different
@c from the node name.  If you include this argument, it becomes
@c the first part of the cross reference.  It is usually omitted.@refill
@c 
相互参照名がノード名と異なっている場合のInfo参照に対する相互参照名です．
この引数を含める場合，それは相互参照の最初の部分になります．通常省略され
ます．

@item
@c A topic description or section name.  Often, this is the title of the
@c section.  This is used as the name of the reference in the printed
@c manual.  If omitted, the node name is used.@refill
@c 
トピックの記述やセクション名です．これはよくセクションのタイトルになりま
す．これは印刷されたマニュアルでの参照名として使用されます．省略された場
合，ノード名が使用されます．@refill

@item
@c The name of the Info file in which the reference is located, if it is
@c different from the current file.  You need not include any @samp{.info}
@c suffix on the file name, since Info readers try appending it
@c automatically.
@c 
参照先が現在のファイルと異なる場合，参照先があるInfoファイル名です．Info
リーダは自動的に追加するので，ファイル名の@samp{.info}接尾子は不要です．

@item
@c The name of a printed manual from a different Texinfo file.@refill
@c 
異なるTexinfoファイルで印刷されたマニュアル名です．@refill
@end enumerate

@c The template for a full five argument cross reference looks like
@c this:@refill
@c 
完全な五つの引数を持つ相互参照のテンプレートは，以下のようになります．
@refill

@example
@group
@@xref@{@var{node-name}, @var{cross-reference-name}, @var{title-or-topic},
@var{info-file-name}, @var{printed-manual-title}@}.
@end group
@end example

@c Cross references with one, two, three, four, and five arguments are
@c described separately following the description of @code{@@xref}.@refill
@c 
一つ，二つ，三つ，四つ，そして五つの引数を持つ相互参照は，@code{@@xref}
の記述に続けて，別々に記述されます．@refill

@c Write a node name in a cross reference in exactly the same way as in
@c the @code{@@node} line, including the same capitalization; otherwise, the
@c formatters may not find the reference.@refill
@c 
相互参照では，@code{@@node}行と正確に同じ方法で，同じように大文字小文字
を使用して，ノード名を書いてください．そうしない場合，フォーマッタは参照
を見つけることができません．@refill

@c You can write cross reference commands within a paragraph, but note
@c how Info and @TeX{} format the output of each of the various commands:
@c write @code{@@xref} at the beginning of a sentence; write
@c @code{@@pxref} only within parentheses, and so on.@refill
@c 
段落で相互参照を書くこともできますが，Infoと@TeX{}が，それぞれの様々なコ
マンドの出力をどのようにして書式化するのかに注意してください．それは，
@code{@@xref}を文の最初に書く．@code{@@pxref}をカッコ内でのみ書くなどで
す．@refill

@node xref, Top Node Naming, Cross Reference Parts, Cross References
@comment  node-name,  next,  previous,  up
@c @section @code{@@xref}
@findex xref
@cindex Cross references using @code{@@xref}
@cindex References using @code{@@xref}

@c The @code{@@xref} command generates a cross reference for the
@c beginning of a sentence.  The Info formatting commands convert it into
@c an Info cross reference, which the Info @samp{f} command can use to
@c bring you directly to another node.  The @TeX{} typesetting commands
@c convert it into a page reference, or a reference to another book or
@c manual.@refill
@c 
@code{@@xref}コマンドは文の最初での相互参照を生成します．Info書式化コマ
ンドはそれをInfo相互参照に変換し，Infoの@samp{f}で他のノードへ直接行くこ
とが可能です．@TeX{}植字コマンドは，それをページ参照や他の本やマニュアル
への参照に変換します．@refill

@menu
* Reference Syntax::            What a reference looks like and requires.
* One Argument::                @code{@@xref} with one argument.
* Two Arguments::               @code{@@xref} with two arguments.
* Three Arguments::             @code{@@xref} with three arguments.
* Four and Five Arguments::     @code{@@xref} with four and five arguments.
@end menu

@node Reference Syntax, One Argument, xref, xref
@ifinfo
@c @subheading What a Reference Looks Like and Requires
@subheading 参照のように見えるものと必要条件
@end ifinfo

@c Most often, an Info cross reference looks like this:@refill
@c 
よくあるInfo相互参照は，以下のようになります．@refill

@example
*Note @var{node-name}::.
@end example

@noindent
@c or like this
@c 
または，以下のようになります．

@example
*Note @var{cross-reference-name}: @var{node-name}.
@end example

@noindent
@c In @TeX{}, a cross reference looks like this:
@c 
@TeX{}では，相互参照は以下のようになります．

@quotation
See Section @var{section-number} [@var{node-name}], page @var{page}.
@end quotation

@noindent
@c or like this
@c 
または，以下のようになります．

@quotation
See Section @var{section-number} [@var{title-or-topic}], page @var{page}.
@end quotation

@c The @code{@@xref} command does not generate a period or comma to end
@c the cross reference in either the Info file or the printed output.
@c You must write that period or comma yourself; otherwise, Info will not
@c recognize the end of the reference.  (The @code{@@pxref} command works
@c differently.  @xref{pxref, , @code{@@pxref}}.)@refill
@c 
@code{@@xref}コマンドは，Infoファイルや印刷物でピリオドやカンマを相互参
照の終りに生成しません．ピリオドやカンマは自分で書く必要があります．
@footnote{訳注:日本語では句読点はカンマやピリオドではありません．この翻
訳では，全角のカンマとピリオドを使用しています．}そうしない場合，参照の
終りを認識しません．(@code{@@pxref}コマンドは異なる動作をします．
@xref{pxref, , @code{@@pxref}}.)@refill

@quotation
@c @strong{Please note:} A period or comma @strong{must} follow the closing
@c brace of an @code{@@xref}.  It is required to terminate the cross
@c reference.  This period or comma will appear in the output, both in
@c the Info file and in the printed manual.@refill
@c 
@strong{注意してください:}ピリオドやカンマを，@code{@@xref}に続ける
@strong{必要があります}．相互参照の終了で要求されます．このピリオドやカ
ンマは，Infoファイルと印刷されたマニュアルの両方の出力に現れます．
@refill
@end quotation

@c @code{@@xref} must refer to an Info node by name.  Use @code{@@node}
@c to define the node (@pxref{Writing a Node}).@refill
@c 
@code{@@xref}はInfoをノード名で参照する必要があります．@code{@@node}をノー
ドの定義に使用してください(@pxref{Writing a Node})．@refill

@c @code{@@xref} is followed by several arguments inside braces, separated by
@c commas.  Whitespace before and after these commas is ignored.@refill
@c 
@code{@@xref}はカッコ内に，カンマで分けられたいくつかの引数が続きます．
これらのカンマの前後の空白は無視されます．@refill

@c A cross reference requires only the name of a node; but it may contain
@c up to four additional arguments.  Each of these variations produces a
@c cross reference that looks somewhat different.@refill
@c 
相互参照はノード名のみ必要です．しかし，それは最大四つまで追加引数を含む
ことができます．これらの変数はそれぞれ，幾分異なるように見える相互参照を
生成します．@refill

@quotation
@c @strong{Please note:} Commas separate arguments in a cross reference;
@c avoid including them in the title or other part lest the formatters
@c mistake them for separators.@refill
@c 
@strong{注意してください:}カンマは相互参照で引数を分離します．フォーマッ
タがそれらをセパレータと間違えないように，タイトルや他の部分にそれらを含
めるのを避けてください．
@end quotation

@node One Argument, Two Arguments, Reference Syntax, xref
@c @subsection @code{@@xref} with One Argument
@subsection 一つの引数を用いた@code{@@xref}

@c The simplest form of @code{@@xref} takes one argument, the name of
@c another node in the same Info file.    The Info formatters produce
@c output that the Info readers can use to jump to the reference; @TeX{}
@c produces output that specifies the page and section number for you.@refill
@c 
@code{@@xref}の最も簡単な形式は，同じInfoファイルの他のノード名を一つの引
数として持つものです．Infoフォーマッタは，Infoリーダが参照へジャンプでき
る出力を生成します．@TeX{}はページとセクション番号を指定する出力を生成し
ます．@refill

@need 700
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@@xref@{Tropical Storms@}.
@end example

@noindent
@c produces
@c 
これは，以下を生成します．

@example
*Note Tropical Storms::.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section 3.1 [Tropical Storms], page 24.
@end quotation

@noindent
@c (Note that in the preceding example the closing brace is followed by a
@c period.)@refill
@c 
(前の例では，閉じカッコにピリオドが続くことに注意してください．)@refill

@c You can write a clause after the cross reference, like this:@refill
@c 
相互参照の後に，以下のように文節を書くことが可能です．@refill

@example
@@xref@{Tropical Storms@}, for more info.
@end example

@noindent
@c which produces
@c 
それは，以下を生成します．

@example
*Note Tropical Storms::, for more info.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section 3.1 [Tropical Storms], page 24, for more info.
@end quotation

@noindent
@c (Note that in the preceding example the closing brace is followed by a
@c comma, and then by the clause, which is followed by a period.)@refill
@c 
(前の例では，閉じカッコはカンマと文節が続き，それにはピリオドが続くこと
に注意してください．)@refill

@node Two Arguments, Three Arguments, One Argument, xref
@c @subsection @code{@@xref} with Two Arguments
@subsection 二つの引数を用いた@code{@@xref}

@c With two arguments, the second is used as the name of the Info cross
@c reference, while the first is still the name of the node to which the
@c cross reference points.@refill
@c 
二つの引数を用いた場合，二番目はInfo相互参照の名前として使用され，一方，最
初のものは相互参照が示すノード名のままです．@refill

@need 750
@noindent
@c The template is like this:
@c 
テンプレートは以下のようになります．

@example
@@xref@{@var{node-name}, @var{cross-reference-name}@}.
@end example

@need 700
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@@xref@{Electrical Effects, Lightning@}.
@end example

@noindent
@c produces:
@c 
以下を生成します．

@example
*Note Lightning: Electrical Effects.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section 5.2 [Electrical Effects], page 57.
@end quotation

@noindent
@c (Note that in the preceding example the closing brace is followed by a
@c period; and that the node name is printed, not the cross reference name.)
@c 
(前の例では，閉じカッコはピリオドが続き，ノード名が印刷され，相互参照は印
刷されないことに注意してください．)

@c You can write a clause after the cross reference, like this:@refill
@c 
相互参照の後に，以下のように文節を続けることができます．@refill

@example
@@xref@{Electrical Effects, Lightning@}, for more info.
@end example

@noindent
@c which produces
@c 
以下を生成します．
@example
*Note Lightning: Electrical Effects, for more info.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section 5.2 [Electrical Effects], page 57, for more info.
@end quotation

@noindent
@c (Note that in the preceding example the closing brace is followed by a
@c comma, and then by the clause, which is followed by a period.)@refill
@c 
(前の例では，閉じカッコはカンマと文節が続き，それにはピリオドが続くことに
注意してください．)@refill

@node Three Arguments, Four and Five Arguments, Two Arguments, xref
@c @subsection @code{@@xref} with Three Arguments
@subsection 三つの引数を用いた

@c A third argument replaces the node name in the @TeX{} output.  The third
@c argument should be the name of the section in the printed output, or
@c else state the topic discussed by that section.  Often, you will want to
@c use initial upper case letters so it will be easier to read when the
@c reference is printed.  Use a third argument when the node name is
@c unsuitable because of syntax or meaning.@refill
@c 
三番目の引数は，@TeX{}出力のノード名を置換します．三番目の引数は，印刷物
でのセクション名にするか，セクションで述べられているトピックを述べるべき
です．参照を印刷したとき読みやすいように，頭文字を大文字にしたいことも多
いでしょう．構文や意味としてノード名が適切でないときは，三番目の引数を使
用してください．@refill

@c Remember to avoid placing a comma within the title or topic section of
@c a cross reference, or within any other section.  The formatters divide
@c cross references into arguments according to the commas; a comma
@c within a title or other section will divide it into two arguments.  In
@c a reference, you need to write a title such as ``Clouds, Mist, and
@c Fog'' without the commas.@refill
@c 
相互参照のタイトルやトピックや，その他のあらゆるセクションで，カンマの配
置を避けることを覚えておいてください．フォーマッタは，カンマに従い引数の
相互参照を分けます．タイトルやセクションのカンマは，それを二つの引数に分
けます．参照では，タイトルをカンマ無しで``Clouds, Mist, and Fog''のよう
に書く必要があります．@refill

@c Also, remember to write a comma or period after the closing brace of an
@c @code{@@xref} to terminate the cross reference.  In the following
@c examples, a clause follows a terminating comma.@refill
@c 
また，相互参照を終了するために，カンマやピリオドを@code{@@xref}の閉じカッ
コの後に書くことを覚えておいてください．以下の例では，文節が終端のカンマ
に付きます．@refill


@need 750
@noindent
@c The template is like this:
@c 
テンプレートは以下のようになります．

@example
@group
@@xref@{@var{node-name}, @var{cross-reference-name}, @var{title-or-topic}@}.
@end group
@end example

@need 700
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@xref@{Electrical Effects, Lightning, Thunder and Lightning@},
for details.
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
*Note Lightning: Electrical Effects, for details.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section 5.2 [Thunder and Lightning], page 57, for details.
@end quotation

@c If a third argument is given and the second one is empty, then the
@c third argument serves both.  (Note how two commas, side by side, mark
@c the empty second argument.)@refill
@c 
三番目の引数が与えられていて，二番目が空の場合，三番目の引数が両方に与え
られます．(二つのカンマが並んで，二番目の引数が空だということを示してい
る方法に注意してください．)@refill

@example
@group
@@xref@{Electrical Effects, , Thunder and Lightning@},
for details.
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
*Note Thunder and Lightning: Electrical Effects, for details.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Section 5.2 [Thunder and Lightning], page 57, for details.
@end quotation

@c As a practical matter, it is often best to write cross references with
@c just the first argument if the node name and the section title are the
@c same, and with the first and third arguments if the node name and title
@c are different.@refill
@c 
実際問題として，ノード名とセクションタイトルが同じ場合は，相互参照を最初
の引数で書き，ノード名とタイトルが異なる場合は，一番目と三番目の引数で書
くことが最善です．@refill

@c Here are several examples from @cite{The GNU Awk User's Guide}:@refill
@c 
@cite{The GNU Awk User's Guide}でいくつかの例は以下のようになっています．
@refill

@smallexample
@@xref@{Sample Program@}.
@@xref@{Glossary@}.
@@xref@{Case-sensitivity, ,Case-sensitivity in Matching@}.
@@xref@{Close Output, , Closing Output Files and Pipes@},
  for more information.
@@xref@{Regexp, , Regular Expressions as Patterns@}.
@end smallexample

@node Four and Five Arguments,  , Three Arguments, xref
@c @subsection @code{@@xref} with Four and Five Arguments
@subsection 四つと五つの引数を用いた@code{@@xref}

@c In a cross reference, a fourth argument specifies the name of another
@c Info file, different from the file in which the reference appears, and
@c a fifth argument specifies its title as a printed manual.@refill
@c 
相互参照では，四番目の引数はリファレンスが現れるファイルと異なるInfoファ
イルのアンカー名を指定し，五番目の引数は印刷されたマニュアルでのそのタイ
トルを指定します．@refill

@c Remember that a comma or period must follow the closing brace of an
@c @code{@@xref} command to terminate the cross reference.  In the
@c following examples, a clause follows a terminating comma.@refill
@c 
カンマやピリオドを，相互参照を終了する@code{@@xref}の閉じカッコに続ける
必要があることを覚えておいてください．以下の例では，終端のカンマに文節が
続きます．@refill

@need 800
@noindent
@c The template is:
@c 
テンプレートは以下のようになります．

@example
@group
@@xref@{@var{node-name}, @var{cross-reference-name}, @var{title-or-topic},
@var{info-file-name}, @var{printed-manual-title}@}.
@end group
@end example

@need 700
@noindent
@c For example,
@c 
以下が例です．

@example
@@xref@{Electrical Effects, Lightning, Thunder and Lightning,
weather, An Introduction to Meteorology@}, for details.
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
*Note Lightning: (weather)Electrical Effects, for details.
@end example

@noindent
@c The name of the Info file is enclosed in parentheses and precedes
@c the name of the node.
@c 
Infoファイルの名前はカッコで囲まれ，前にノード名があります．

@noindent
@c In a printed manual, the reference looks like this:@refill
@c 
印刷されたマニュアルでは，参照は以下のようになります．@refill

@quotation
See section ``Thunder and Lightning'' in @i{An Introduction to
Meteorology}, for details.
@end quotation

@noindent
@c The title of the printed manual is typeset in italics; and the
@c reference lacks a page number since @TeX{} cannot know to which page a
@c reference refers when that reference is to another manual.@refill
@c 
印刷されたマニュアルのタイトルは，イタリック体で植字されます．他のマニュ
アルを参照するときは，相互参照が参照するページを@TeX{}は知ることができな
いので，ページ番号はありません．@refill

@c Often, you will leave out the second argument when you use the long
@c version of @code{@@xref}.  In this case, the third argument, the topic
@c description, will be used as the cross reference name in Info.@refill
@c 
長いバージョンの@code{@@xref}を使用するとき，二番目に引数を省略することも
よくあります．この場合，トピックを記述する三番目に引数はInfoでの相互参照
名として使用されます．@refill

@noindent
@c The template looks like this:
@c 
テンプレートは以下のようになります．

@example
@@xref@{@var{node-name}, , @var{title-or-topic}, @var{info-file-name},
@var{printed-manual-title}@}, for details.
@end example

@noindent
@c which produces
@c 
それは，以下を生成します．

@example
*Note @var{title-or-topic}: (@var{info-file-name})@var{node-name}, for details.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See section @var{title-or-topic} in @var{printed-manual-title}, for details.
@end quotation

@need 700
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@@xref@{Electrical Effects, , Thunder and Lightning,
weather, An Introduction to Meteorology@}, for details.
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
@group
*Note Thunder and Lightning: (weather)Electrical Effects,
for details.
@end group
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See section ``Thunder and Lightning'' in @i{An Introduction to
Meteorology}, for details.
@end quotation

@c On rare occasions, you may want to refer to another Info file that
@c is within a single printed manual---when multiple Texinfo files are
@c incorporated into the same @TeX{} run but make separate Info files.
@c In this case, you need to specify only the fourth argument, and not
@c the fifth.@refill
@c 
滅多にありませんが，単一の印刷されたマニュアルにある他のInfoファイルへ参
照したいときもあります --- それは，複数のTexinfoファイルが同じ@TeX{}の実
行に組み込まれるにもかかわらず，別々のInfoファイルを作成するときです．こ
の場合，四番目の引数のみを指定し，五番目はその必要がありません．@refill

@node Top Node Naming, ref, xref, Cross References
@c @section Naming a `Top' Node
@section `Top'ノードに名前を付ける
@cindex Naming a `Top' Node in references
@cindex @samp{@r{Top}} node naming for references

@c In a cross reference, you must always name a node.  This means that in
@c order to refer to a whole manual, you must identify the `Top' node by
@c writing it as the first argument to the @code{@@xref} command.  (This
@c is different from the way you write a menu entry; see @ref{Other Info
@c Files, , Referring to Other Info Files}.)  At the same time, to
@c provide a meaningful section topic or title in the printed cross
@c reference (instead of the word `Top'), you must write an appropriate
@c entry for the third argument to the @code{@@xref} command.
@c @refill
@c 
相互参照では，常にノードを名付ける必要があります．これは，マニュアル全体
を参照するために，@code{@@xref}コマンドの最初の引数として書き込むことで
`Top'ノードを識別する必要があるということを意味します．(これは，メニュー
項目を書く方法と異なります．@ref{Other Info Files, , Referring to Other
Info Files}を参照してください．)同時に，印刷された相互参照で有意義なセク
ショントピックやタイトルを(単語`Top'の代わりに)提供するために，
@code{@@xref}コマンドの三番目の引数として適切な項目を書く必要があります．
@refill

@noindent
@c Thus, to make a cross reference to @cite{The GNU Make Manual},
@c write:@refill
@c 
このため，@cite{The GNU Make Manual}への相互参照を作成するために，以下の
ように書いてください．@refill

@example
@@xref@{Top, , Overview, make, The GNU Make Manual@}.
@end example

@noindent
@c which produces
@c 
それは，以下を生成します．

@example
*Note Overview: (make)Top.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See section ``Overview'' in @i{The GNU Make Manual}.
@end quotation

@noindent
@c In this example, @samp{Top} is the name of the first node, and
@c @samp{Overview} is the name of the first section of the manual.@refill
@c 
この例では，@samp{Top}が最初のノード名で，@samp{Overview}がマニュアルの
最初のセクション名です．@refill

@node ref, pxref, Top Node Naming, Cross References
@comment  node-name,  next,  previous,  up
@section @code{@@ref}
@cindex Cross references using @code{@@ref}
@cindex References using @code{@@ref}
@findex ref

@c @code{@@ref} is nearly the same as @code{@@xref} except that it does
@c not generate a `See' in the printed output, just the reference itself.
@c This makes it useful as the last part of a sentence.@refill
@c 
@code{@@ref}は印刷物で`See'を生成せず，参照のみを生成する以外，
@code{@@xref}とほとんど同じです．これは，文の終りの部分にするとき役に立
ちます．@refill

@need 700
@noindent
@c For example,
@c 
例えば，以下のようにします．

@cindex Hurricanes
@example
For more information, see @@ref@{Hurricanes@}.
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
For more information, see *Note Hurricanes::.
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
For more information, see Section 8.2 [Hurricanes], page 123.
@end quotation

@c The @code{@@ref} command sometimes leads writers to express themselves
@c in a manner that is suitable for a printed manual but looks awkward
@c in the Info format.  Bear in mind that your audience will be using
@c both the printed and the Info format.@refill
@c 
@code{@@ref}コマンドは，著者が表現する方法として，印刷されたマニュアルに
適しているが，Info書式では悪く見えるものを導き出すときもあります．使用者
が印刷物とInfo書式の両方で使用することを心に留めておいてください．
@refill

@need 800
@noindent
@c For example,
@c 
例えば，以下のようにします．

@cindex Sea surges
@example
@group
Sea surges are described in @@ref@{Hurricanes@}.
@end group
@end example

@need 800
@noindent
@c produces
@c 
以下を生成します．

@quotation
Sea surges are described in Section 6.7 [Hurricanes], page 72.
@end quotation

@need 800
@noindent
@c in a printed document, and the following in Info:
@c 
以上は印刷されたマニュアルで，Infoでは以下のようになります．

@example
Sea surges are described in *Note Hurricanes::.
@end example

@quotation
@c @strong{Caution:} You @emph{must} write a period, comma, or right
@c parenthesis immediately after an @code{@@ref} command with two or more
@c arguments.  Otherwise, Info will not find the end of the cross reference
@c entry and its attempt to follow the cross reference will fail.  As a
@c general rule, you should write a period or comma after every
@c @code{@@ref} command.  This looks best in both the printed and the Info
@c output.@refill
@c 
@strong{注意:}ピリオド，カンマ，または正しいカッコを，@code{@@ref}コマン
ドの後に二つ以上の引数とともに書く@emph{必要があります}．そうしない場合，
Infoは相互参照の項目を見つけることができず，相互参照を追う試みは失敗しま
す．一般的な規則として，ピリオドやカンマを，全ての@code{@@ref}コマンドの
後に書くべきです@footnote{訳注:日本語の場合はカッコ悪くなるので，このマ
ニュアルではそうしていません}．これは，印刷されたマニュアルでもInfo出力
でも最善に見えます．@refill
@end quotation

@node pxref, inforef, ref, Cross References
@comment  node-name,  next,  previous,  up
@section @code{@@pxref}
@cindex Cross references using @code{@@pxref}
@cindex References using @code{@@pxref}
@findex pxref

@c The parenthetical reference command, @code{@@pxref}, is nearly the
@c same as @code{@@xref}, but you use it @emph{only} inside parentheses
@c and you do @emph{not} type a comma or period after the command's
@c closing brace.  The command differs from @code{@@xref} in two
@c ways:@refill
@c 
丸カッコの参照コマンド@code{@@pxref}は，@code{@@xref}とほとんど同じです
が，丸カッコの中で@emph{のみ}使用し，コマンドの閉じカッコの後にカンマや
ピリオドを入力@emph{しません}．コマンドは二つの点で@code{@@xref}と異なり
ます．@refill

@enumerate
@item
@c @TeX{} typesets the reference for the printed manual with a lower case
@c `see' rather than an upper case `See'.@refill
@c 
@TeX{}は印刷されたマニュアルに対し，大文字の`See'ではなく小文字の`see'を
用いて参照を植字します．@refill

@item
@c The Info formatting commands automatically end the reference with a
@c closing colon or period.@refill
@c 
Info書式化コマンドでは，自動的に閉じコロンやピリオドで参照を終りにします．
@refill
@end enumerate

@c Because one type of formatting automatically inserts closing
@c punctuation and the other does not, you should use @code{@@pxref}
@c @emph{only} inside parentheses as part of another sentence.  Also, you
@c yourself should not insert punctuation after the reference, as you do
@c with @code{@@xref}.@refill
@c 
書式化の一つの形式は自動的に閉じる句読点を挿入し，もう一つはそうしないの
で，@code{@@pxref}は他の文の一部として丸カッコ内で@emph{のみ}使用すべき
です．また，@code{@@xref}で行うような，参照後に句読点を挿入すべきではあ
りません．@refill

@c @code{@@pxref} is designed so that the output looks right and works
@c right between parentheses both in printed output and in an Info file.
@c In a printed manual, a closing comma or period should not follow a
@c cross reference within parentheses; such punctuation is wrong.  But in
@c an Info file, suitable closing punctuation must follow the cross
@c reference so Info can recognize its end.  @code{@@pxref} spares you
@c the need to use complicated methods to put a terminator into one form
@c of the output and not the other.@refill
@c 
@code{@@pxref}は，印刷物とInfoファイルの両方で出力が正しく見え，丸カッコ
が正しく動作するように設計されています．印刷されたマニュアルでは，閉じる
カンマやピリオドは丸カッコ内の相互参照の後に続きません．そのような句読点
は間違いです．しかしInfoファイルでは，適切な閉じる句読点をInfoが終りとし
て認識できるように，相互参照に続ける必要があります．@code{@@pxref}で，出
力の一つの形式に終端を置きそれ以外では置かないため，複雑な方法を使用する
ことから免除されます．@refill

@noindent
@c With one argument, a parenthetical cross reference looks like
@c this:@refill
@c 
一つの引数を用いた丸カッコ相互参照は以下のようになります．@refill

@cindex Flooding
@example
@dots{} storms cause flooding (@@pxref@{Hurricanes@}) @dots{}
@end example

@need 800
@noindent
@c which produces
@c 
それは，以下を生成します．

@example
@group
@dots{} storms cause flooding (*Note Hurricanes::) @dots{}
@end group
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@quotation
@dots{} storms cause flooding (see Section 6.7 [Hurricanes], page 72) @dots{}
@end quotation

@c With two arguments, a parenthetical cross reference has this
@c template:@refill
@c 
二つの引数を用いた丸カッコ相互参照は，以下のようなテンプレートになります．
@refill

@example
@dots{} (@@pxref@{@var{node-name}, @var{cross-reference-name}@}) @dots{}
@end example

@noindent
@c which produces
@c 
それは，以下を生成します．

@example
@dots{} (*Note @var{cross-reference-name}: @var{node-name}.) @dots{}
@end example

@noindent
@c and
@c 
そして，以下を生成します．

@need 1500
@quotation
@dots{} (see Section @var{nnn} [@var{node-name}], page @var{ppp}) @dots{}
@end quotation

@c @code{@@pxref} can be used with up to five arguments just like
@c @code{@@xref} (@pxref{xref, , @code{@@xref}}).@refill
@c 
@code{@@pxref}は@code{@@xref}のように，最大五つの引数を使用することが可能
です(@pxref{xref, , @code{@@xref}})．@refill

@quotation
@c @strong{Please note:} Use @code{@@pxref} only as a parenthetical
@c reference.  Do not try to use @code{@@pxref} as a clause in a sentence.
@c It will look bad in either the Info file, the printed output, or
@c both.@refill
@c 
@strong{注意してください:}@code{@@pxref}は，丸カッコの参照としてのみ使用
してください．@code{@@pxref}を文の文節として使用しようとしないでください．
それは，Infoファイル，印刷物，またはその両方で悪く見えます．@refill

@c Also, parenthetical cross references look best at the ends of sentences.
@c Although you may write them in the middle of a sentence, that location
@c breaks up the flow of text.@refill
@c 
また，丸カッコ相互参照は文の終りでも最善のようです．文中に書くこともでき
ますが，その場所はテキストの流れを分断します．@refill
@end quotation

@node inforef, uref, pxref, Cross References
@section @code{@@inforef}
@cindex Cross references using @code{@@inforef}
@cindex References using @code{@@inforef}
@findex inforef

@c @code{@@inforef} is used for cross references to Info files for which
@c there are no printed manuals.  Even in a printed manual,
@c @code{@@inforef} generates a reference directing the user to look in
@c an Info file.@refill
@c 
@code{@@inforef}は印刷されたマニュアルには無い，Infoファイルへの相互参照
に対して使用されます．印刷されたマニュアルでも，@code{@@inforef}はInfo 
ファイルでユーザが見えるような参照を生成します．@refill

@c The command takes either two or three arguments, in the following
@c order:@refill
@c 
このコマンドは，以下の順番で二つまたは三つの引数をとります．@refill

@enumerate
@item
@c The node name.
@c 
ノード名．

@item
@c The cross reference name (optional).
@c 
相互参照名(オプション)．

@item
@c The Info file name.
@c 
Infoファイル名．
@end enumerate

@noindent
@c Separate the arguments with commas, as with @code{@@xref}.  Also, you
@c must terminate the reference with a comma or period after the
@c @samp{@}}, as you do with @code{@@xref}.@refill
@c 
@code{@@xref}のように引数はカンマで分けられます．また，@code{@@xref}のよ
うに@samp{@}}の後でカンマやピリオドで参照を終端する必要もあります．
@refill

@noindent
@c The template is:
@c 
テンプレートは以下のようになります．

@example
@@inforef@{@var{node-name}, @var{cross-reference-name}, @var{info-file-name}@},
@end example

@need 800
@noindent
@c Thus,
@c 
以下のようにします．

@example
@group
@@inforef@{Expert, Advanced Info commands, info@},
for more information.
@end group
@end example

@need 800
@noindent
@c produces
@c 
以下を生成します．

@example
@group
*Note Advanced Info commands: (info)Expert,
for more information.
@end group
@end example

@need 800
@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Info file @file{info}, node @samp{Expert}, for more information.
@end quotation

@need 800
@noindent
@c Similarly,
@c 
同様に，以下のようにします．

@example
@group
@@inforef@{Expert, , info@}, for more information.
@end group
@end example

@need 800
@noindent
@c produces
@c 
以下を生成します．

@example
*Note (info)Expert::, for more information.
@end example

@need 800
@noindent
@c and
@c 
そして，以下を生成します．

@quotation
See Info file @file{info}, node @samp{Expert}, for more information.
@end quotation

@c The converse of @code{@@inforef} is @code{@@cite}, which is used to
@c refer to printed works for which no Info form exists.  @xref{cite, ,
@c @code{@@cite}}.@refill
@c 
@code{@@inforef}の逆は@code{@@cite}で，それはInfo形式がない印刷物を参照
するために使用します．@xref{cite, , @code{@@cite}}.@refill


@node uref
@section @code{@@uref@{@var{url}[, @var{text}][, @var{replacement}]@}}
@findex uref
@cindex Uniform resource locator, referring to
@cindex URL, referring to

@cindex @code{href}, producing HTML
@c @code{@@uref} produces a reference to a uniform resource locator (url).
@c It takes one mandatory argument, the url, and two optional arguments
@c which control the text that is displayed.  In HTML output, @code{@@uref}
@c produces a link you can follow.
@c 
@code{@@uref}は，ユニフォームリソースロケータ(url)への参照を生成します．
それは，一つの必須の引数urlと表示されるテキストを制御する二つの追加の引数
をとります．HTML出力では，@code{@@uref}はたどることが可能なリンクを生成
します．

@c The second argument, if specified, is the text to display (the default
@c is the url itself); in Info and DVI output, but not in HTML output, the
@c url is also output.
@c 
二番目の引数が指定されている場合，それは表示するテキストです(デフォルトは
url自身です)．InfoとDVI出力ではurlも出力され，HTML出力ではそうなりません．

@cindex Man page, reference to
@c The third argument, on the other hand, if specified is also the text to
@c display, but the url is @emph{not} output in any format.  This is useful
@c when the text is already sufficiently referential, as in a man page.  If
@c the third argument is given, the second argument is ignored.
@c 
一方，三番目の引数が指定されている場合もテキストは表示されますが，urlは全
ての書式で出力@emph{されません}．これは，テキストがmanページのように既に
十分参考にされているとき役に立ちます．三番目の引数が与えられた場合，二番目
の引数は無視されます．

@c The simple one argument form, where the url is both the target and the
@c text of the link:
@c 
簡単な一つの引数の形式では，urlはターゲットとリンクのテキストの両方になり
ます．

@example
The official GNU ftp site is @@uref@{ftp://ftp.gnu.org/gnu@}.
@end example

@noindent
@c produces:
@c 
以下を生成します．
@display
The official GNU ftp site is @uref{ftp://ftp.gnu.org/gnu}.
@end display

@c An example of the two-argument form:

二つの引数の形式の例です．
@example
The official @@uref@{ftp://ftp.gnu.org/gnu, GNU ftp site@}
holds programs and texts.
@end example

@noindent
@c produces:
@c 
以下を生成します．
@display
The official @uref{ftp://ftp.gnu.org/gnu, GNU ftp site}
holds programs and texts.
@end display

@noindent
@c that is, the Info output is this:
@c 
そして，Info出力はこのようになります．
@example
The official GNU ftp site (ftp://ftp.gnu.org/gnu)
holds programs and texts.
@end example

@noindent
@c and the HTML output is this:
@c 
HTML出力はこのようになります．
@example
The official <a href="ftp://ftp.gnu.org/gnu">GNU ftp site</a>
holds programs and texts.
@end example


@c An example of the three-argument form:
@c 
三つの引数の形式の例です．
@example
The @@uref@{/man.cgi/1/ls,,ls(1)@} program @dots{}
@end example

@noindent
@c produces:
@c 
以下を生成します．
@display
The @uref{/man.cgi/1/ls,,ls(1)} program @dots{}
@end display

@noindent
@c but with HTML:
@c 
しかしHTMLでは，以下のようになります．
@example
The <a href="/man.cgi/1/ls">ls(1)</a> program @dots{}
@end example

@c To merely indicate a url without creating a link people can follow, use
@c @code{@@url} (@pxref{url, @code{@@url}}).
@c 
人々がたどることが可能なリンクを作成せず，単にurlを示すため，
@code{@@url}を使用してください(@pxref{url, @code{@@url}})．

@c Some people prefer to display url's in the unambiguous format:
@c 
urlの明確な書式を表示することを好む人もいます．

@display
<URL:http://@var{host}/@var{path}>
@end display

@noindent
@cindex <URL convention, not used
@c You can use this form in the input file if you wish.  We feel it's not
@c necessary to clutter up the output with the extra @samp{<URL:} and
@c @samp{>}, since any software that tries to detect url's in text already
@c has to detect them without the @samp{<URL:} to be useful.
@c 
好みにより，この形式を入力ファイルで使用することも可能です．テキストから
urlの検出を試みるあらゆるソフトウェアでは，便利にするために，
@samp{<URL:}無しで検出する必要があるので，我々は余分な@samp{<URL:}と
@samp{>}を用い，出力をバラバラにすることは必要ないと思います．


@node Marking Text
@c @chapter Marking Words and Phrases
@chapter 単語と句の印付け
@cindex Paragraph, marking text within
@cindex Marking words and phrases
@cindex Words and phrases, marking them
@cindex Marking text within a paragraph
@cindex Text, marking up

@c In Texinfo, you can mark words and phrases in a variety of ways.
@c The Texinfo formatters use this information to determine how to
@c highlight the text.
@c You can specify, for example, whether a word or phrase is a
@c defining occurrence, a metasyntactic variable, or a symbol used in a
@c program.  Also, you can emphasize text, in several different ways.
@c 
Texinfoでは，様々な方法で単語や句に印を付けることが可能です．Texinfoフォー
マッタは，テキストの強調の方法を決定するためにこの情報を使用します．例え
ば，単語や句が，定義している事象，メタ構文の変数，またはプログラムで定義
されているシンボルであっても指定可能です．また，いくつかの異なる方法でテ
キストを強調することも可能です．

@menu
* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.
@end menu


@node Indicating, Emphasis, Marking Text, Marking Text
@c @section Indicating Definitions, Commands, etc.
@section 定義，コマンド等を示す
@cindex Highlighting text
@cindex Indicating commands, definitions, etc.

@c Texinfo has commands for indicating just what kind of object a piece of
@c text refers to.  For example, metasyntactic variables are marked by
@c @code{@@var}, and code by @code{@@code}.  Since the pieces of text are
@c labelled by commands that tell what kind of object they are, it is easy
@c to change the way the Texinfo formatters prepare such text.  (Texinfo is
@c an @emph{intentional} formatting language rather than a @emph{typesetting}
@c formatting language.)@refill
@c 
Texinfoには，テキストの一部が言及しているものの種類を示すコマンドがあり
ます．例えば，メタ構文の変数は@code{@@var}で，コードは@code{@@code}で印
を付けられます．テキストの一部は，そのオブジェクトの種類を伝えるコマンド
でラベルが付くので，Texinfoフォーマッタでそのようなテキストへの準備を変
更することは簡単です．(Texinfoは@emph{植字的な}書式化言語というよりはむ
しろ，@emph{意図的な}書式化言語です．)@refill

@c For example, in a printed manual,
@c code is usually illustrated in a typewriter font;
@c @code{@@code} tells @TeX{} to typeset this text in this font.  But it
@c would be easy to change the way @TeX{} highlights code to use another
@c font, and this change would not affect how keystroke examples are
@c highlighted.  If straight typesetting commands were used in the body
@c of the file and you wanted to make a change, you would need to check
@c every single occurrence to make sure that you were changing code and
@c not something else that should not be changed.@refill
@c 
例えば，印刷されたマニュアルでは，コードは通常タイプライターのフォントで
図案化されます．@code{@@code}は@TeX{}に，このテキストをこのフォントで植
字するよう伝えます．しかし，@TeX{}のコードの強調を他のフォントを使用する
よう変更することは簡単で，この変更はキーストロークの例を強調する方法に影
響しません．直接的な植字コマンドがファイルの本体で使用されていて，それを
変更したい場合，コードを変更して，他が変更されていないことを確かめるため，
全てのそれぞれの事象を調べる必要があります．@refill

@menu
* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* acronym::                     Indicating acronyms.
* url::                         Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.
@end menu


@node Useful Highlighting, code, Indicating, Indicating
@ifinfo
@c @subheading Highlighting Commands are Useful
@subheading 役に立つ強調コマンド
@end ifinfo

@c The highlighting commands can be used to extract useful information
@c from the file, such as lists of functions or file names.  It is
@c possible, for example, to write a program in Emacs Lisp (or a keyboard
@c macro) to insert an index entry after every paragraph that contains
@c words or phrases marked by a specified command.  You could do this to
@c construct an index of functions if you had not already made the
@c entries.@refill
@c 
強調コマンドは，関数やファイル名のリストのような，ファイルからの便利な情
報を抽出するために使用することが可能です．例えば，Emacs Lisp(またはキー
ボードマクロ)でのプログラムを書くために，指定されたコマンドで印が付いて
いる単語と句が含まれているそれぞれの段落の後に，索引項目を挿入することも
可能です．まだ項目を作成していない場合，関数の索引を構築するためこれを行
うことが可能でしょう．@refill

@c The commands serve a variety of purposes:@refill
@c 
コマンドは様々な目的を満たします．@refill

@table @code
@item @@code@{@var{sample-code}@}
@c Indicate text that is a literal example of a piece of a program.@refill
@c 
プログラムの一部のリテラル例となるテキストを示します．@refill

@item @@kbd@{@var{keyboard-characters}@}
@c Indicate keyboard input.@refill
@c 
キーボード入力を示します．@refill

@item @@key@{@var{key-name}@}
@c Indicate the conventional name for a key on a keyboard.@refill
@c 
キーボードのキーに対する慣習的な名前を示します．@refill

@item @@samp@{@var{text}@}
@c Indicate text that is a literal example of a sequence of characters.@refill
@c 
文字列のリテラル例となるテキストを示します．@refill

@item @@var@{@var{metasyntactic-variable}@}
@c Indicate a metasyntactic variable.@refill
@c 
メタ構文変数を示します．@refill

@item @@env@{@var{environment-variable}@}
@c Indicate an environment variable.@refill
@c 
環境変数を示します．@refill

@item @@file@{@var{file-name}@}
@c Indicate the name of a file.@refill
@c 
ファイル名を示します．@refill

@item @@command@{@var{command-name}@}
@c Indicate the name of a command.@refill
@c 
コマンド名を示します．@refill

@item @@option@{@var{option}@}
@c Indicate a command-line option.@refill
@c 
コマンドラインオプションを示します．@refill

@item @@dfn@{@var{term}@}
@c Indicate the introductory or defining use of a term.@refill
@c 
用語使用の紹介や定義を示します．@refill

@item @@cite@{@var{reference}@}
@c Indicate the name of a book.@refill
@c 
本の名前を示します．@refill

@item @@acronym@{@var{acronym}@}
@c Indicate an acronym.@refill
@c 
頭文字を組み合わせた言葉を示します．@refill

@item @@url@{@var{uniform-resource-locator}@}
@c Indicate a uniform resource locator for the World Wide Web.
@c 
ワールドワイドウェブ(WWW)のユニフォームリソースロケータ(URL)を示します．

@item @@email@{@var{email-address}[, @var{displayed-text}]@}
@c Indicate an electronic mail address.
@c 
電子メールアドレスを示します．

@ignore
@item @@ctrl@{@var{ctrl-char}@}
Use for an @sc{ascii} control character.@refill
@end ignore
@end table


@node code
@subsection @code{@@code}@{@var{sample-code}@}
@findex code

@cindex Syntactic tokens, indicating
@c Use the @code{@@code} command to indicate text that is a piece of a
@c program and which consists of entire syntactic tokens.  Enclose the
@c text in braces.
@c 
プログラムの一部と，全体が構文的なトークンからなるテキストを示すため，
@code{@@code}コマンドを使用してください．カッコでテキストを囲ってくださ
い．

@cindex Expressions in a program, indicating
@cindex Keywords, indicating
@cindex Reserved words, indicating
@c Thus, you should use @code{@@code} for an expression in a program, for
@c the name of a variable or function used in a program, or for a
@c keyword in a programming language.
@c 
このため，@code{@@code}をプログラム内部の式，プログラムで使用している変
数や関数の名前，またはプログラム言語のキーワードに対して使用すべきです．

@c Use @code{@@code} for command names in languages that resemble
@c programming languages, such as Texinfo.  For example, @code{@@code} and
@c @code{@@samp} are produced by writing @samp{@@code@{@@@@code@}} and
@c @samp{@@code@{@@@@samp@}} in the Texinfo source, respectively.
@c 
Texinfoのようなプログラム言語に似ている言語のコマンド名に対して
@code{@@code}を使用してください．例えば，@code{@@code}と@code{@@samp}は，
Texinfoソースファイルで，それぞれ@samp{@@code@{@@@@code@}}と
@samp{@@code@{@@@@samp@}}と書くことで生成されます．

@cindex Case, not altering in @code{@@code}
@c It is incorrect to alter the case of a word inside an @code{@@code}
@c command when it appears at the beginning of a sentence.  Most computer
@c languages are case sensitive.  In C, for example, @code{Printf} is
@c different from the identifier @code{printf}, and most likely is a
@c misspelling of it.  Even in languages which are not case sensitive, it
@c is confusing to a human reader to see identifiers spelled in different
@c ways.  Pick one spelling and always use that.  If you do not want to
@c start a sentence with a command name written all in lower case, you
@c should rearrange the sentence.
@c 
文の最初に現れるとき，@code{@@code}コマンドの中で単語の大文字小文字を変
えるのは正しくありません．ほとんどのコンピュータ言語は大文字小文字の違い
を識別します．例えばCでは，@code{Printf}は@code{printf}の識別子と異なり，
それはおそらくスペルミスです．大文字小文字の区別をしない言語でも，異なる
方法で綴られた識別子を見ると人間の読者は混乱します．一つの綴りを選び，そ
れを常に使用してください．全てが小文字で書かれたコマンド名で文を開始した
くない場合，文の配置替えをするべきです．

@c In the printed manual, @code{@@code} causes @TeX{} to typeset the
@c argument in a typewriter face.  In the Info file, it causes the Info
@c formatting commands to use single quotation marks around the text.
@c 
印刷されたマニュアルでは，@code{@@code}で@TeX{}は引数をタイプライターフェ
イスのフォントで植字します．Infoファイルでは．Info書式化コマンドはシング
ルクォーテーションマークでテキストの周りを囲みます．

@need 700
@c For example,
@c 
例えば，以下のようにします．

@example
The function returns @@code@{nil@}.
@end example

@noindent
@c produces this in the printed manual:
@c 
印刷されたマニュアルで，これは以下を生成します．

@quotation
The function returns @code{nil}.
@end quotation

@iftex
@noindent
@c and this in the Info file:
@c 
Infoファイルでは，以下を生成します．
@example
The function returns `nil'.
@end example
@end iftex

@c Here are some cases for which it is preferable not to use @code{@@code}:
@c 
@code{@@code}を使用しないほうが好ましい状況は，以下のものです．

@itemize @bullet
@item
@c For shell command names such as @command{ls} (use @code{@@command}).
@c 
@command{ls}のようなシェルコマンド名(@code{@@command}を使用してください)．

@item
@c For shell options such as @samp{-c} when such options stand alone (use
@c @code{@@option}).
@c 
@samp{-c}のようなシェルオプション単独のとき(@code{@@option}を使用してくだ
さい)．

@item
@c Also, an entire shell command often looks better if written using
@c @code{@@samp} rather than @code{@@code}.  In this case, the rule is to
@c choose the more pleasing format.
@c 
また，シェルコマンド全体は，@code{@@code}より@code{@@samp}を使用して書い
た方が良く見えます．この場合，規則はより喜ばしい書式を選択するためです．

@item
@c For environment variable such as @env{TEXINPUTS} (use @code{@@env}).
@c 
@env{TEXINPUTS}のような環境変数(@code{@@env}を使用してください)．

@item
@c For a string of characters shorter than a syntactic token.  For example,
@c if you are writing about @samp{goto-ch}, which is just a part of the
@c name for the @code{goto-char} Emacs Lisp function, you should use
@c @code{@@samp}.
@c 
構文トークンより短い文字列．例えば，Emacs Lisp関数の@code{goto-char}の名
前の一部の@samp{goto-ch}に関して書く場合，@code{@@samp}を使用すべきです．

@item
@c In general, when writing about the characters used in a token; for
@c example, do not use @code{@@code} when you are explaining what letters
@c or printable symbols can be used in the names of functions.  (Use
@c @code{@@samp}.)  Also, you should not use @code{@@code} to mark text
@c that is considered input to programs unless the input is written in a
@c language that is like a programming language.  For example, you should
@c not use @code{@@code} for the keystroke commands of GNU Emacs (use
@c @code{@@kbd} instead) although you may use @code{@@code} for the names
@c of the Emacs Lisp functions that the keystroke commands invoke.
@c 
一般的に，トークンで使用されている文字に関して書く場合です．例えば，関数
名で使用可能な文字や印刷可能なシンボルを説明しているとき，@code{@@code} 
を使用しないでください．(@code{@@samp}を使用してください．)また，入力が
プログラム言語のような言語で書かれていない場合，プログラムの入力と考えら
れるテキストに印を付けるために@code{@@code}を使用すべきではありません．
例えば，GNU Emacsのキーストロークコマンドに対して@code{@@code}を使用すべ
きではありませんが(代わりに@code{@@kbd}を使用してください)，キーストロー
クコマンドが呼び出すEmacs Lispの関数名に対し@code{@@code}を使用してもか
まいません．

@end itemize

@c Since @code{@@command}, @code{@@option}, and @code{@@env} were
@c introduced relatively recently, it is acceptable to use @code{@@code} or
@c @code{@@samp} for command names, options, and environment variables.
@c The new commands allow you to express the markup more precisely, but
@c there is no real harm in using the older commands, and of course the
@c long-standing manuals do so.
@c 
@code{@@command}，@code{@@option}，そして@code{@@env}は比較的最近導入さ
れたので，@code{@@code}や@code{@@samp}をコマンド名，オプション，そして環
境変数に使用することも可能です．新しいコマンドでより正確に印付けを表現で
きますが，より古いコマンドの使用でも実害は無く，もちろん長期存続のマニュ
アルはそうしています．


@node kbd
@subsection @code{@@kbd}@{@var{keyboard-characters}@}
@findex kbd
@cindex Keyboard input

@c Use the @code{@@kbd} command for characters of input to be typed by
@c users.  For example, to refer to the characters @kbd{M-a},
@c write@refill
@c 
ユーザが入力する文字に対し@code{@@kbd}コマンドを使用してください．例えば，
文字@kbd{M-a}を記述するため，以下のように書いてください．@refill

@example
@@kbd@{M-a@}
@end example

@noindent
@c and to refer to the characters @kbd{M-x shell}, write@refill
@c 
文字@kbd{M-x shell}を記述するため，以下のように書いてください．@refill

@example
@@kbd@{M-x shell@}
@end example

@cindex user input
@cindex slanted typewriter font, for @code{@@kbd}
@c The @code{@@kbd} command has the same effect as @code{@@code} in Info,
@c but by default produces a different font (slanted typewriter instead of
@c normal typewriter) in the printed manual, so users can distinguish the
@c characters they are supposed to type from those the computer outputs.
@c 
@code{@@kbd}コマンドはInfoでは@code{@@code}と同じ効果がありますが，印刷
されたマニュアルではデフォルトで異なるフォント(通常のタイプライターの代
わりに傾いたタイプライター)を生成し，そのため，ユーザはこれらのコンピュー
タの出力と，入力として仮定される文字とを区別可能です．

@findex kbdinputstyle
@c Since the usage of @code{@@kbd} varies from manual to manual, you can
@c control the font switching with the @code{@@kbdinputstyle} command.
@c This command has no effect on Info output.  Write this command at the
@c beginning of a line with a single word as an argument, one of the
@c following:
@c 
@code{@@kbd}の使用法がマニュアル間で異なるので，@code{@@kbdinputstyle}コ
マンドでフォント切替えの制御が可能です．このコマンドはInfo出力で効果があ
りません．このコマンドを行の最初で，引数として一単語で以下の一つを書いて
ください．
@vindex distinct@r{, arg to @@kbdinputstyle}
@vindex example@r{, arg to @@kbdinputstyle}
@vindex code@r{, arg to @@kbdinputstyle}
@table @samp
@item code
@c Always use the same font for @code{@@kbd} as @code{@@code}.
@c 
常に@code{@@kbd}に対し@code{@@code}と同じフォントを使用します．
@item example
@c Use the distinguishing font for @code{@@kbd} only in @code{@@example}
@c and similar environments.
@c 
@code{@@example}とそれに似た環境のみで，@code{@@kbd}に対し異なるフォント
を使用します．
@item distinct
@c (the default) Always use the distinguishing font for @code{@@kbd}.
@c 
(デフォルトで)常に@code{@@kbd}に対し異なるフォントを使用します．
@end table

@c You can embed another @@-command inside the braces of an @code{@@kbd}
@c command.  Here, for example, is the way to describe a command that
@c would be described more verbosely as ``press an @samp{r} and then
@c press the @key{RET} key'':@refill
@c 
@code{@@kbd}コマンドのカッコの中に他の@@-コマンドを埋め込むことが可能で
す．例えばここで，より冗長に記述すると，``@samp{r}を押し，@key{RET}を押
してください''となるコマンドを記述した例があります．

@example
@@kbd@{r @@key@{RET@}@}
@end example

@noindent
@c This produces: @kbd{r @key{RET}}
@c 
これは@kbd{r @key{RET}}を生成します．

@c You also use the @code{@@kbd} command if you are spelling out the letters
@c you type; for example:@refill
@c 
また，入力した文字を書き出すために@code{@@kbd}コマンドを使用することも可
能です．例えば，以下のようにします．

@example
To give the @@code@{logout@} command,
type the characters @@kbd@{l o g o u t @@key@{RET@}@}.
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@quotation
To give the @code{logout} command,
type the characters @kbd{l o g o u t @key{RET}}.
@end quotation

@c (Also, this example shows that you can add spaces for clarity.  If you
@c really want to mention a space character as one of the characters of
@c input, write @kbd{@@key@{SPC@}} for it.)@refill
@c 
(また，この例は明確にするためスペースを加えることが可能だということも示
しています．実際にスペース文字を入力文字の一つとして述べたい場合，そのた
めに@kbd{@@key@{SPC@}}を書いてください．@refill


@node key, samp, kbd, Indicating
@comment  node-name,  next,  previous,  up
@subsection @code{@@key}@{@var{key-name}@}
@findex key

@c Use the @code{@@key} command for the conventional name for a key on a
@c keyboard, as in:@refill
@c 
@code{@@key}コマンドをキーボード上のキーの慣習名に対し以下のように使用し
てください．@refill

@example
@@key@{RET@}
@end example

@c You can use the @code{@@key} command within the argument of an
@c @code{@@kbd} command when the sequence of characters to be typed
@c includes one or more keys that are described by name.@refill
@c 
入力された文字の並びが一つ以上の名前で記述されたキーを含むとき，
@code{@@key}コマンドを，@code{@@kbd}コマンドの引数内部で使用可能です．
@refill

@need 700
@c For example, to produce @kbd{C-x @key{ESC}} you would type:@refill
@c 
例えば，入力する@kbd{C-x @key{ESC}}を生成するために，以下のようにします．
@refill

@example
@@kbd@{C-x @@key@{ESC@}@}
@end example

@c Here is a list of the recommended names for keys:
@c 
推奨されるキーの名前のリストは以下のものがあります．
@cindex Recommended names for keys
@cindex Keys, recommended names
@cindex Names recommended for keys
@cindex Abbreviations for keys

@quotation
@table @t
@item SPC
@c Space
@c 
スペース
@item RET
@c Return
@c 
リターン
@item LFD
@c Linefeed (however, since most keyboards nowadays do not have a Linefeed key,
@c it might be better to call this character @kbd{C-j}.
@c 
Linefeed(しかし，最近のほとんどのキーボードはLinefeedキーが無いので，この
文字@kbd{C-j}を呼ぶ方がいいでしょう)．
@item TAB
@c Tab
@c 
タブ
@item BS
@c Backspace
@c 
バックスペース
@item ESC
@c Escape
@c 
エスケープ
@item DEL
@c Delete
@c 
デリート
@item SHIFT
@c Shift
@c 
シフト
@item CTRL
@c Control
@c 
コントロール
@item META
@c Meta
@c 
メタ
@end table
@end quotation

@cindex META key
@c There are subtleties to handling words like `meta' or `ctrl' that are
@c names of modifier keys.  When mentioning a character in which the
@c modifier key is used, such as @kbd{Meta-a}, use the @code{@@kbd} command
@c alone; do not use the @code{@@key} command; but when you are referring
@c to the modifier key in isolation, use the @code{@@key} command.  For
@c example, write @samp{@@kbd@{Meta-a@}} to produce @kbd{Meta-a} and
@c @samp{@@key@{META@}} to produce @key{META}.
@c 
修飾キー名の`meta'や`ctrl'のような単語を扱う細別手法もあります．
@kbd{Meta-a}のような，修飾キーが使用されている文字を記述するとき，
@code{@@kbd}コマンドを単独で使用してください．@code{@@key}コマンドを使用
しないでください．しかし，修飾キーを単独で記述するときは@code{@@key}コマ
ンドを使用してください．例えば，@kbd{Meta-a}を生成するため
@samp{@@kbd@{Meta-a@}}と書き，@key{META}を生成するため
@samp{@@key@{META@}}と書いてください．

@c I don't think this is a good explanation.
@c I think it will puzzle readers more than it clarifies matters.  -- rms.
@c In other words, use @code{@@kbd} for what you do, and use @code{@@key}
@c for what you talk about: ``Press @code{@@kbd@{M-a@}} to move point to
@c the beginning of the sentence.  The @code{@@key@{META@}} key is often in
@c the lower left of the keyboard.''@refill

@node samp
@subsection @code{@@samp}@{@var{text}@}
@findex samp

@c Use the @code{@@samp} command to indicate text that is a literal example
@c or `sample' of a sequence of characters in a file, string, pattern, etc.
@c Enclose the text in braces.  The argument appears within single
@c quotation marks in both the Info file and the printed manual; in
@c addition, it is printed in a fixed-width font.@refill
@c 
ファイル，文字列，パターンなどの内部の文字の並びの例や`sample'のリテラル
となるテキストを示すため，@code{@@samp}コマンドを使用してください．テキ
ストをカッコで囲んでください．Infoファイルと印刷されたマニュアルの両方で，
シングル引用符の中にで引数が現れます．さらに，等幅フォントで印刷されます．
@refill

@example
To match @@samp@{foo@} at the end of the line,
use the regexp @@samp@{foo$@}.
@end example

@noindent
@c produces
@c 
これは以下を生成します．

@quotation
To match @samp{foo} at the end of the line, use the regexp
@samp{foo$}.@refill
@end quotation

@c Any time you are referring to single characters, you should use
@c @code{@@samp} unless @code{@@kbd} or @code{@@key} is more appropriate.
@c Also, you may use @code{@@samp} for entire statements in C and for entire
@c shell commands---in this case, @code{@@samp} often looks better than
@c @code{@@code}.  Basically, @code{@@samp} is a catchall for whatever is
@c not covered by @code{@@code}, @code{@@kbd}, or @code{@@key}.@refill
@c 
単一の文字を記述するときはいつも，@code{@@kbd}や@code{@@key}がより適して
いない限り@code{@@samp}を使用すべきです．また，Cの記述全体やシェルコマン
ド全体に対し@code{@@samp}を使用することも可能です．この場合，
@code{@@samp}は@code{@@code}より良く見えます．基本的に，@code{@@samp}は
@code{@@code}，@code{@@kbd}，または@code{@@key}でカバーされていないあら
ゆるものに対する入れものです．@refill

@c Only include punctuation marks within braces if they are part of the
@c string you are specifying.  Write punctuation marks outside the braces
@c if those punctuation marks are part of the English text that surrounds
@c the string.  In the following sentence, for example, the commas and
@c period are outside of the braces:@refill
@c 
指定した文字列の一部の場合のみ，句読点をカッコ内に含めてください．句読点
が文字列の周りにある英語のテキストの一部の場合，カッコの外に句読点を書い
てください．例えば以下の文章では，カンマとピリオドはカッコの外側に置きま
す．@refill

@example
@group
In English, the vowels are @@samp@{a@}, @@samp@{e@},
@@samp@{i@}, @@samp@{o@}, @@samp@{u@}, and sometimes
@@samp@{y@}.
@end group
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@quotation
In English, the vowels are @samp{a}, @samp{e},
@samp{i}, @samp{o}, @samp{u},  and sometimes
@samp{y}.
@end quotation


@node verb
@subsection @code{@@verb}@{<char>@var{text}<char>@}
@findex verb
@cindex Verbatim in-line text

@cindex Delimiter character, for verbatim 
@c Use the @code{@@verb} command to print a verbatim sequence of
@c characters.
@c 
文字の並びをそのまま出力するために，@code{@@verb}コマンドを使用してくだ
さい．

@c Like La@TeX{}'s @code{\verb} command, the verbatim text can be quoted using
@c any unique delimiter character.  Enclose the verbatim text, including the
@c delimiters, in braces.  Text is printed in a fixed-width font:
@c 
La@TeX{}の@code{\verb}コマンドのように，テキストそのままを，ユニークな分
離文字を使用して引用符で囲むことが可能です．囲まれているテキストは自身に
はカッコの中の分離文字も含まれます．テキストは固定幅フォントで出力されま
す．

@example
How many @@verb@{|@@|@}-escapes does one need to print this
@@verb@{.@@a @@b @@c.@} string or @@verb@{+@@'e@?`@!`@{@}\+@} this?
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
How many @verb{|@|}-escapes does one need to print this
@verb{.@a @b @c.} string or these @verb{+@'e?`{}!`\+} this?
@end example

@c This is in contrast to @code{@@samp} (see the previous
@c section), whose argument is normal Texinfo text, where the characters
@c @code{@@@{@}} are special; with @code{@@verb}, nothing is special except
@c the delimiter character you choose.
@c 
これは，引数が通常のTexinfoのテキストになる@code{@@samp}(前のセクション
を参照してください)と比較して，文字@code{@@@{@}}は特別です．
@code{@@verb}を用いた場合，選択した分離文字以外，特別な例外はありません．


@node var
@subsection @code{@@var}@{@var{metasyntactic-variable}@}
@findex var

@c Use the @code{@@var} command to indicate metasyntactic variables.  A
@c @dfn{metasyntactic variable} is something that stands for another piece of
@c text.  For example, you should use a metasyntactic variable in the
@c documentation of a function to describe the arguments that are passed
@c to that function.@refill
@c 
メタ構文変数を示すため，@code{@@var}コマンドを使用してください．@dfn{メ
タ構文変数(metasyntactic variable)}は，テキストの一部と同類のものを意味
するものです．例えば，メタ構文変数を関数に渡される引数を記述するため関数
のドキュメントで使用すべきです．@refill

@c Do not use @code{@@var} for the names of particular variables in
@c programming languages.  These are specific names from a program, so
@c @code{@@code} is correct for them (@pxref{code}).  For example, the
@c Emacs Lisp variable @code{texinfo-tex-command} is not a metasyntactic
@c variable; it is properly formatted using @code{@@code}.
@c 
プログラム言語で，特定の変数の名前に対し@code{@@var}を使用しないでくださ
い．これらはプログラムの特別な名前なので，それに対しては@code{@@code}が
正しいものです(@pxref{code})．例えば，Emacs Lisp変数
@code{texinfo-tex-command}はメタ構文変数ではありません．それは，
@code{@@code}を使用することで正確に書式化されます．

@c Do not use @code{@@var} for environment variables either; @code{@@env}
@c is correct for them (see the next section).
@c 
環境変数に対しても@code{@@var}を使用しないでください．それに対しては
@code{@@env}が正しいものです(次のセクションを見てください)．

@c The effect of @code{@@var} in the Info file is to change the case of the
@c argument to all upper case.  In the printed manual and HTML output, the
@c argument is printed in slanted type.  
@c 
Infoでの@code{@@var}の効果は，引数の文字を全て大文字に変更します．印刷さ
れたマニュアルとHTML出力では引数は傾いて印刷されます．

@need 700
@c For example,
@c 
例えば，以下のようにします．

@example
To delete file @@var@{filename@},
type @@samp@{rm @@var@{filename@}@}.
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
To delete file @var{filename}, type @samp{rm @var{filename}}.
@end quotation

@noindent
@c (Note that @code{@@var} may appear inside @code{@@code},
@c @code{@@samp}, @code{@@file}, etc.)@refill
@c 
(@code{@@var}は@code{@@code}，@code{@@samp}，@code{@@file}などの間に現す
ことができることに注意してください．)@refill

@c Write a metasyntactic variable all in lower case without spaces, and
@c use hyphens to make it more readable.  Thus, the Texinfo source for
@c the illustration of how to begin a Texinfo manual looks like
@c this:@refill
@c 
メタ構文変数は，スペース以外全て小文字で書き，読みやすくするためハイフン
を使用してください．このため，Texinfoマニュアルの初め方を表現するTexinfo
ソースは以下のようになります．@refill

@example
@group
\input texinfo
@@@@setfilename @@var@{info-file-name@}
@@@@settitle @@var@{name-of-manual@}
@end group
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@example
@group
\input texinfo
@@setfilename @var{info-file-name}
@@settitle @var{name-of-manual}
@end group
@end example

@c In some documentation styles, metasyntactic variables are shown with
@c angle brackets, for example:@refill
@c 
ドキュメント形式によっては，メタ構文変数は山カッコで表示するものもあり，
以下がその例です．@refill

@example
@dots{}, type rm <filename>
@end example

@noindent
@c However, that is not the style that Texinfo uses.  (You can, of
@c course, modify the sources to @file{texinfo.tex} and the Info formatting commands
@c to output the @code{<@dots{}>} format if you wish.)@refill
@c 
しかし，それはTexinfoが使用する形式ではありません．(もちろん，そうしたい
場合，@file{texinfo.tex}ソースを編集して，Info書式化コマンドを
@code{<@dots{}>}書式で出力させることもできます．)@refill


@node env
@subsection @code{@@env}@{@var{environment-variable}@}
@findex env

@c Use the @code{@@env} command to indicate environment variables, as used
@c by many operating systems, including GNU.  Do not use it for
@c metasyntactic variables; use @code{@@var} instead (see the previous
@c section).
@c 
GNUを含め，多くのオペレーティングシステムで使用される環境変数を示すため，
@code{@@env}コマンドを使用してください．メタ構文変数に使用しないでくださ
い．代わりに@code{@@var}を使用してください(前のセクションを参照してくだ
さい)．

@c @code{@@env} is equivalent to @code{@@code} in its effects.
@c For example:
@c 
@code{@@env}の効果は@code{@@code}と同じです．例えば，以下のようにします．

@example
The @@env@{PATH@} environment variable @dots{}
@end example
@noindent
@c produces
@c 
以下を生成します．
@quotation
The @env{PATH} environment variable @dots{}
@end quotation


@node file
@subsection @code{@@file}@{@var{file-name}@}
@findex file

@c Use the @code{@@file} command to indicate text that is the name of a
@c file, buffer, or directory, or is the name of a node in Info.  You can
@c also use the command for file name suffixes.  Do not use @code{@@file}
@c for symbols in a programming language; use @code{@@code}.
@c 
ファイル，バッファ，またはディレクトリ名や，Infoでのノード名となるテキス
トを示すため，@code{@@file}コマンドを使用してください．また，ファイル名
の接尾子にも使用可能です．プログラム言語のシンボルに対し@code{@@file}を
使用しないでください．@code{@@code}を使用してください．

@c Currently, @code{@@file} is equivalent to @code{@@samp} in its effects.
@c For example,@refill
@c 
現在，@code{@@file}の効果は@code{@@samp}と同じです．例えば以下のようにし
ます．@refill

@example
The @@file@{.el@} files are in
the @@file@{/usr/local/emacs/lisp@} directory.
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
The @file{.el} files are in
the @file{/usr/local/emacs/lisp} directory.
@end quotation


@node command
@subsection @code{@@command}@{@var{command-name}@}
@findex command
@cindex Command names, indicating
@cindex Program names, indicating

@c Use the @code{@@command} command to indicate command names, such as
@c @command{ls} or @command{cc}.
@c 
@command{ls}や@command{cc}のようなコマンド名を示すため，@code{@@command}
を使用してください．

@c @code{@@command} is equivalent to @code{@@code} in its effects.
@c For example:
@c 
@code{@@command}の効果は@code{@@code}と同じです．例えば，以下のようにし
ます．

@example
The command @@command@{ls@} lists directory contents.
@end example
@noindent
@c produces
@c 
以下を生成します．
@quotation
The command @command{ls} lists directory contents.
@end quotation

@c You should write the name of a program in the ordinary text font, rather
@c than using @code{@@command}, if you regard it as a new English word,
@c such as `Emacs' or `Bison'.
@c 
`Emacs'や`Bison'のような新しい英単語にしたい場合，@code{@@command}を使用
せず，通常のテキストのフォントでプログラム名を書くべきです．

@c When writing an entire shell command invocation, as in @samp{ls -l},
@c you should use either @code{@@samp} or @code{@@code} at your discretion.
@c 
@samp{ls -l}のようなシェルコマンドの呼び出し全体を書くとき，自分で判断し
て@code{@@samp}または@code{@@code}のどちらかを使用すべきです．


@node option
@subsection @code{@@option}@{@var{option-name}@}
@findex option

@c Use the @code{@@option} command to indicate a command-line option; for
@c example, @option{-l} or @option{--version} or
@c @option{--output=@var{filename}}.
@c 
コマンドラインオプションを示すため，@code{@@option}コマンドを使用してく
ださい．例えば， @option{-l}や，@option{--version}や，
@option{--output=@var{filename}}です．

@c @code{@@option} is equivalent to @code{@@samp} in its effects.
@c For example:
@c 
@code{@@option}の効果は@code{@@samp}と同じです．例えば以下のようにします．

@example
The option @@option@{-l@} produces a long listing.
@end example
@noindent
@c produces
@c 
以下を生成します．
@quotation
The option @option{-l} produces a long listing.
@end quotation

@c In tables, putting options inside @code{@@code} produces a
@c more pleasing effect.
@c 
表では，オプションを@code{@@code}の中に書くと，より喜ばしい効果を生成し
ます．

@node dfn
@comment  node-name,  next,  previous,  up
@subsection @code{@@dfn}@{@var{term}@}
@findex dfn

@c Use the @code{@@dfn} command to identify the introductory or defining
@c use of a technical term.  Use the command only in passages whose
@c purpose is to introduce a term which will be used again or which the
@c reader ought to know.  Mere passing mention of a term for the first
@c time does not deserve @code{@@dfn}.  The command generates italics in
@c the printed manual, and double quotation marks in the Info file.  For
@c example:@refill
@c 
技術用語の使用の紹介や定義を識別するため，@code{@@dfn}コマンドを使用して
ください．もう一度使用する用語や読者が知っておくべき用語の紹介を意図した
引用部分でのみ，このコマンドを使用してください．最初に用語について述べる
ちょっとした記述は@code{@@dfn}に値しません．コマンドは印刷されたマニュア
ルでイタリック体を生成し，Infoファイルでは2重引用符を生成します．例えば
以下のようにします．@refill

@example
Getting rid of a file is called @@dfn@{deleting@} it.
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
Getting rid of a file is called @dfn{deleting} it.
@end quotation

@c As a general rule, a sentence containing the defining occurrence of a
@c term should be a definition of the term.  The sentence does not need
@c to say explicitly that it is a definition, but it should contain the
@c information of a definition---it should make the meaning clear.
@c 
一般的な規則として，用語の発生の定義を含む文は用語の定義にすべきです．文
はその定義を明示的にする必要はありませんが，定義情報を含めるべきです --- 
それで意味がはっきりします．

@node cite
@subsection @code{@@cite}@{@var{reference}@}
@findex cite

@c Use the @code{@@cite} command for the name of a book that lacks a
@c companion Info file.  The command produces italics in the printed
@c manual, and quotation marks in the Info file.
@c 
Infoファイルの仲間にはない本の名前に対し@code{@@cite}コマンドを使用して
ください．コマンドは印刷されたマニュアルでイタリック体を生成し，Infoファ
イルでは引用符を生成します．

@c If a book is written in Texinfo, it is better to use a cross reference
@c command since a reader can easily follow such a reference in Info.
@c @xref{xref, , @code{@@xref}}.
@c 
本がTexinfoで書かれている場合，読者はInfoでそのような参照を簡単に追うこ
とが可能なので，相互参照を使用してください．@xref{xref, ,
@code{@@xref}}.


@ignore
@c node ctrl, , cite, Indicating
@comment  node-name,  next,  previous,  up
@c subsection @code{@@ctrl}@{@var{ctrl-char}@}
@findex ctrl

The @code{@@ctrl} command is seldom used.  It describes an @sc{ascii}
control character by inserting the actual character into the Info
file.

Usually, in Texinfo, you talk what you type as keyboard entry by
describing it with @code{@@kbd}: thus, @samp{@@kbd@{C-a@}} for
@kbd{C-a}.  Use @code{@@kbd} in this way when talking about a control
character that is typed on the keyboard by the user.  When talking
about a control character appearing in a file or a string, do not use
@code{@@kbd} since the control character is not typed.  Also, do not
use @samp{C-} but spell out @code{control-}, as in @samp{control-a},
to make it easier for a reader to understand.@refill

@code{@@ctrl} is an idea from the beginnings of Texinfo which may not
really fit in to the scheme of things.  But there may be times when
you want to use the command.  The pattern is
@code{@@ctrl@{@var{ch}@}}, where @var{ch} is an @sc{ascii} character
whose control-equivalent is wanted.  For example, to specify
@samp{control-f}, you would enter@refill

@example
@@ctrl@{f@}
@end example

@noindent
produces

@quotation
@ctrl{f}
@end quotation

In the Info file, this generates the specified control character, output
literally into the file.  This is done so a user can copy the specified
control character (along with whatever else he or she wants) into another
Emacs buffer and use it.  Since the `control-h',`control-i', and
`control-j' characters are formatting characters, they should not be
indicated with @code{@@ctrl}.@refill

In a printed manual, @code{@@ctrl} generates text to describe or
identify that control character: an uparrow followed by the character
@var{ch}.@refill
@end ignore


@node acronym
@subsection @code{@@acronym}@{@var{acronym}@}
@findex acronym

@cindex NASA, as acronym
@cindex F.B.I., as acronym
@cindex Abbreviations, tagging
@cindex Acronyms, tagging
@c Use the @code{@@acronym} command for abbreviations written in all
@c capital letters, such as `@acronym{NASA}'.  The abbreviation is given as
@c the single argument in braces, as in @samp{@@acronym@{NASA@}}.  As
@c a matter of style, or for particular abbreviations, you may prefer to
@c use periods, as in @samp{@@acronym@{F.B.I.@}}.
@c 
`@acronym{NASA}'のように全て大文字で書かれている省略に対し，
@code{@@acronym}を使用してください．省略は@samp{@@acronym@{NASA@}}のよう
にカッコ内に一つの引数で与えられます．形式の問題や特定の省略のため，
@samp{@@acronym@{F.B.I.@}}のようにピリオドを使用した方が良いかもしれませ
ん．

@c In @TeX{} and HTML, the argument is printed in a slightly smaller font
@c size.  In Info or plain text output, this command changes nothing.
@c 
@TeX{}とHTMLでは，引数は傾いた小さなフォントサイズで印刷されます．Infoや
プレーンテキスト出力では，このコマンドは何も変更しません．


@node url
@subsection @code{@@url}@{@var{uniform-resource-locator}@}
@findex url
@cindex Uniform resource locator, indicating
@cindex URL, indicating

@c Use the @code{@@url} command to indicate a uniform resource locator on
@c the World Wide Web.  This is analogous to @code{@@file}, @code{@@var},
@c etc., and is purely for markup purposes.  It does not produce a link you
@c can follow in HTML output (use the @code{@@uref} command for that,
@c @pxref{uref,, @code{@@uref}}).  It is useful for url's which do
@c not actually exist.  For example:
@c 
ワールドワイドウェブ(WWW)のユニフォームリソースロケータ(URL)を示すため，
@code{@@url}コマンドを使用してください．これは，@code{@@file}，
@code{@@var}等に似ていて，純粋にマークアップのためのものです．それはHTML 
形式でたどることが可能なリンクを生成しません(そのためには@code{@@uref} 
を使用してください．@pxref{uref,, @code{@@uref}})．実際には存在しないURL 
に対して役に立ちます．例えば，以下のようにします．

@c Two lines because one is too long for smallbook format.
@example
For example, the url might be @@url@{http://example.org/path@}.
@end example

@noindent
@c which produces:
@c 
それは，以下を生成します．
@display
For example, the url might be @url{http://example.org/path}.
@end display


@node email
@subsection @code{@@email}@{@var{email-address}[, @var{displayed-text}]@}
@findex email

@c Use the @code{@@email} command to indicate an electronic mail address.
@c It takes one mandatory argument, the address, and one optional argument, the
@c text to display (the default is the address itself).
@c 
電子メールアドレスを示すため@code{@@email}コマンドを使用してください．そ
れは引数として一つの必須のアドレスと，一つの追加引数で表示するテキストをと
ります(デフォルトではアドレス自身になります)．

@cindex mailto link
@c In Info and @TeX{}, the address is shown in angle brackets, preceded by
@c the text to display if any.  In HTML output, @code{@@email} produces a
@c @samp{mailto} link that usually brings up a mail composition window.
@c For example:
@c 
Infoと@TeX{}では，アドレスは山カッコで表示され，存在する場合は表示テキス
トが前に付きます．HTML出力では，@code{@@email}は通常メール作成ウィンドウ
を生成する@samp{mailto}リンクを生成します．例えば，以下のようにします．

@example
Send bug reports to @@email@{bug-texinfo@@@@gnu.org@},
suggestions to the @@email@{bug-texinfo@@@@gnu.org, same place@}.
@end example
@noindent
@c produces
@c 
以下を生成します．
@display
Send bug reports to @email{bug-texinfo@@gnu.org},
suggestions to the @email{bug-texinfo@@gnu.org, same place}.
@end display


@node Emphasis
@comment node-name,  next,  previous,  up
@c @section Emphasizing Text
@section テキストの強調
@cindex Emphasizing text

@c Usually, Texinfo changes the font to mark words in the text according to
@c what category the words belong to; an example is the @code{@@code} command.
@c Most often, this is the best way to mark words.
@c However, sometimes you will want to emphasize text without indicating a
@c category.  Texinfo has two commands to do this.  Also, Texinfo has
@c several commands that specify the font in which @TeX{} will typeset
@c text.  These commands have no effect on Info and only one of them,
@c the @code{@@r} command, has any regular use.@refill
@c 
通常Texinfoは，テキストで単語が属するカテゴリに従って印付けされた単語に
対しフォントを変更します．例えば@code{@@code}コマンドです．ほとんどの状
況で単語に印を付ける方法が最善です．しかし，カテゴリを示さずにテキストを
強調したいときもあります．Texinfoにはこのための二つのコマンドがあります．
またTexinfoには，@TeX{}がテキストを植字するときのフォントを指定するコマ
ンドもいくつかあります．これらのコマンドはInfoでは効果が無く，その中の一 
つ@code{@@r}コマンドだけ，通常使用されます．@refill

@menu
* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.
@end menu

@node emph & strong
@c @subsection @code{@@emph}@{@var{text}@} and @code{@@strong}@{@var{text}@}
@subsection @code{@@emph}@{@var{text}@}と@code{@@strong}@{@var{text}@}
@cindex Emphasizing text, font for
@findex emph
@findex strong

@c The @code{@@emph} and @code{@@strong} commands are for emphasis;
@c @code{@@strong} is stronger.  In printed output, @code{@@emph} produces
@c @emph{italics} and @code{@@strong} produces @strong{bold}.
@c 
@code{@@emph}と@code{@@strong}コマンドは，強調のためのものです．
@code{@@strong}がより強調します．印刷物で，@code{@@emph}は@emph{italics} 
を生成し，@code{@@strong}は@strong{bold}を生成します．

@need 800
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@quotation
@@strong@{Caution:@} @@samp@{rm * .[^.]*@} removes @@emph@{all@}
files in the directory.
@@end quotation
@end group
@end example

@iftex
@noindent
@c produces the following in printed output:
@c 
以下が印刷物で生成されます．

@quotation
@strong{Caution}: @samp{rm * .[^.]*} removes @emph{all}
files in the directory.
@end quotation

@noindent
@c and the following in Info:
@c 
そして，Infoでは以下が生成されます．
@end iftex
@ifinfo
@noindent
@c produces:
@c 
以下を生成します．
@end ifinfo

@example
    *Caution*: `rm * .[^.]*' removes _all_
    files in the directory.
@end example

@c The @code{@@strong} command is seldom used except to mark what is, in
@c effect, a typographical element, such as the word `Caution' in the
@c preceding example.
@c 
@code{@@strong}コマンドは，前の例での単語`Caution'のような，効果が印刷要
素となるマーク以外では，滅多に使用されません．

@c In the Info output, @code{@@emph} surrounds the text with underscores
@c (@samp{_}), and @code{@@strong} puts asterisks around the text.
@c 
Info出力では，@code{@@emph}はアンダースコア(@samp{_})でテキストを囲み，
@code{@@strong}はテキストの周りにアスタリスクを書きます．

@quotation
@c @strong{Caution:} Do not use @code{@@strong} with the word @samp{Note};
@c Info will mistake the combination for a cross reference.  Use a phrase
@c such as @strong{Please note} or @strong{Caution} instead.
@c 
@strong{注意:}@code{@@strong}を単語@samp{Note}で使用しないでください．
Infoは相互参照との組み合わせと勘違いします．代わりに，@strong{Please
note}や@strong{Caution}のような句を使用してください．
@end quotation


@node Smallcaps
@c @subsection @code{@@sc}@{@var{text}@}: The Small Caps Font
@subsection @code{@@sc}@{@var{text}@}:小さな大文字フォント
@cindex Small caps font
@findex sc @r{(small caps font)}

@c Use the @samp{@@sc} command to set text in the printed and the HTML
@c output in @sc{a small caps font} and set text in the Info file in upper
@c case letters.  Write the text you want to be in small caps (where
@c possible) between braces in lower case, like this:
@c 
テキストを，印刷物とHTMLで@sc{a small caps font}に設定し，Infoファイルで
大文字に設定するため，@samp{@@sc}コマンドを使用してください．(可能な場合) 
小さい大文字にしたいテキストを以下のように小文字でカッコの間に書いてくだ
さい．

@example
The @@sc@{acm@} and @@sc@{ieee@} are technical societies.
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@display
The @sc{acm} and @sc{ieee} are technical societies.
@end display

@c @TeX{} typesets the small caps font in a manner that prevents the
@c letters from `jumping out at you on the page'.  This makes small caps
@c text easier to read than text in all upper case---but it's usually
@c better to use regular mixed case anyway.  The Info formatting commands
@c set all small caps text in upper case.  In HTML, the text is upper-cased
@c and a smaller font is used to render it.
@c 
@TeX{}は，文字が`ページからはみ出る'ことを避けるように，小さい大文字フォ
ントで植字します．これは，小さい大文字のテキストを全て大文字にするより読
みやすくします．しかし通常は，どこでも大文字小文字を混ぜて使用する方が良
いでしょう．Info書式化コマンドは，全ての小さい大文字のテキストを大文字に
設定します．HTMLでは，テキストは大文字で小さいフォントで表現されます．

@c If the text between the braces of an @code{@@sc} command is uppercase,
@c @TeX{} typesets in FULL-SIZE CAPITALS.  Use full-size capitals
@c sparingly, if ever, and since it's redundant to mark all-uppercase text
@c with @code{@@sc}, @command{makeinfo} warns about such usage.
@c 
@code{@@sc}コマンドのカッコ内のテキストが大文字の場合，@TeX{}はフルサイ
ズの大文字で植字します．今までそうしている場合，@code{@@sc}で全て大文字
のテキストに印を付けるのは無駄なので，@command{makeinfo}がそのような使用
法に警告する場合は，省略してフルサイズの大文字を使用してください．

@c You may also use the small caps font for a jargon word such as
@c @sc{ato} (a @sc{nasa} word meaning `abort to orbit').
@c 
また，@sc{ato}(`abort to orbit'を意味する@sc{nasa}単語)のような専門用語
に対し小さな大文字フォントを使用することも可能です．

@c There are subtleties to using the small caps font with a jargon word
@c such as @sc{cdr}, a word used in Lisp programming.  In this case, you
@c should use the small caps font when the word refers to the second and
@c subsequent elements of a list (the @sc{cdr} of the list), but you
@c should use @samp{@@code} when the word refers to the Lisp function of
@c the same spelling.
@c 
Lispプログラムで使用される単語@sc{cdr}のような専門用語で小さな大文字フォ
ントを使用することには微妙な点があります．この状況では，単語がリスト(リ
ストの@sc{cdr})の二番目のものとそれに続く要素を参照するときは小さな大文
字フォントを使用すべきですが，単語が同じ綴りのLisp関数を参照するときは
@samp{@@code}を使用すべきです．


@node Fonts
@c @subsection Fonts for Printing, Not Info
@subsection Infoではなく印刷時のフォント
@cindex Fonts for printing, not for Info
@findex i @r{(italic font)}
@findex b @r{(bold font)}
@findex t @r{(typewriter font)}
@findex r @r{(Roman font)}

@c Texinfo provides four font commands that specify font changes in the
@c printed manual but have no effect in the Info file.  @code{@@i}
@c requests @i{italic} font (in some versions of @TeX{}, a slanted font
@c is used), @code{@@b} requests @b{bold} face, @code{@@t} requests the
@c @t{fixed-width}, typewriter-style font used by @code{@@code}, and @code{@@r} requests a
@c @r{roman} font, which is the usual font in which text is printed.  All
@c four commands apply to an argument that follows, surrounded by
@c braces.@refill
@c 
Texinfoには，Infoでは効果が無く印刷されたマニュアルでフォントの変更を指
定する，四つのフォントコマンドを提供しています．@code{@@i}は@i{italic}フォ
ント(@TeX{}のバージョンによっては傾いたフォントが使用される)を要求し，
@code{@@b}は@b{bold}フェイスを要求し，@code{@@t}は@code{@@code}で使用さ
れるタイプライター形式のフォント@t{fixed-width}を要求し，そして，
@code{@@r}はテキストの印刷での通常フォントの@r{roman}フォントを要求しま
す．すべての四つのコマンドは，それに続くカッコに囲まれた引数に適用します．
@refill

@c Only the @code{@@r} command has much use: in example programs, you
@c can use the @code{@@r} command to convert code comments from the
@c fixed-width font to a roman font.  This looks better in printed
@c output.@refill
@c 
@code{@@r}コマンドのみがよく使用されます．例としてのプログラムで，コード
コメントを等幅フォントからローマンフォントに変更するため，@code{@@r}コマ
ンドを使用することが可能です．これは，印刷された出力で見ためが良くなりま
す．@refill

@need 700
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@lisp
(+ 2 2)    ; @@r@{Add two plus two.@}
@@end lisp
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@lisp
(+ 2 2)    ; @r{Add two plus two.}
@end lisp

@c If possible, you should avoid using the other three font commands.  If
@c you need to use one, it probably indicates a gap in the Texinfo
@c language.
@c 
可能な場合，他の三つのフォントコマンドの使用を避けるべきです．その一つを
使用する必要がある場合，Texinfo言語ではおそらくギャップが生じます．


@node Quotations and Examples
@c @chapter Quotations and Examples
@chapter 引用と例

@c Quotations and examples are blocks of text consisting of one or more
@c whole paragraphs that are set off from the bulk of the text and
@c treated differently.  They are usually indented.@refill
@c 
引用と例は，テキストの塊が区切られた一つ以上の段落全体から成り立つテキス
トとなっていて，取り扱いが異なります．通常字下げされます．@refill

@c In Texinfo, you always begin a quotation or example by writing an
@c @@-command at the beginning of a line by itself, and end it by writing
@c an @code{@@end} command that is also at the beginning of a line by
@c itself.  For instance, you begin an example by writing @code{@@example}
@c by itself at the beginning of a line and end the example by writing
@c @code{@@end example} on a line by itself, at the beginning of that
@c line.
@c 
Texinfoでは，引用や例は，常に行の最初に単独で@@-コマンドを書くことから始
まり，行の最初に単独行で@code{@@end}コマンドを書くことで終ります．例えば，
例を@code{@@example}を行の最初に単独行で書くことで始め，行の始めに単独行
で@code{@@end example}を書くことで終えます．
@findex end

@menu
* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Forms for @code{@@smallbook}.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.
@end menu


@node Block Enclosing Commands
@c @section Block Enclosing Commands
@section ブロックで囲むコマンド

@c Here are commands for quotations and examples, explained further in the
@c following sections:
@c 
以下のものは次のセクションで更に説明しますが，引用と例のコマンドです．

@table @code
@item @@quotation
@c Indicate text that is quoted. The text is filled, indented, and
@c printed in a roman font by default.
@c 
引用されたテキストを示します．テキストは補充され，字下げされ，そしてデフォ
ルトでローマンフォントで印刷されます．

@item @@example
@c Illustrate code, commands, and the like. The text is printed
@c in a fixed-width font, and indented but not filled.
@c 
コードとコマンドのようなものを例示します．テキストは等幅フォントで印刷さ
れ，字下げされますが，補充されません．

@item @@verbatim
@c Mark a piece of text that is to be printed verbatim; no character 
@c substitutions are made and all commands are ignored, until the next
@c @code{@@end verbatim}.  The text is printed in a fixed-width font, 
@c and not indented or filled.  Extra spaces and blank lines are 
@c significant, and tabs are expanded.
@c 
逐語的に出力されるテキストの一部に印をつけます．次の@code{@@end
verbatim}まで，置換される文字は無く，すべてのコマンドは無視されます．テ
キストは固定幅フォントで出力され，字下げも補充もされません．余分なスペー
スと空の行は重要で，タブは展開されます．

@item @@smallexample
@c Same as @code{@@example}, except that in @TeX{} this command typesets
@c text in a smaller font.
@c 
@TeX{}でこのコマンドがより小さいフォントでテキストを植字する以外，
@code{@@example} と同じです．

@item @@lisp
@c Like @code{@@example}, but specifically for illustrating Lisp code. The
@c text is printed in a fixed-width font, and indented but not filled.
@c 
@code{@@example}に似ていますが，特にLispコードの例示に対するものです．テ
キストは等幅フォントで印刷され字下げされますが，補充されません．

@item @@smalllisp
@c Is to @code{@@lisp} as @code{@@smallexample} is to @code{@@example}.
@c 
@code{@@example}に対する@code{@@smallexample}のような@code{@@lisp}に対す
るものです．

@item @@display
@c Display illustrative text.  The text is indented but not filled, and
@c no font is selected (so, by default, the font is roman).@refill
@c 
例示のテキストを表示します．テキストは字下げされますが補充されず，フォン
トの選択もされません(そのため，デフォルトでフォントはローマンです)．
@refill

@item @@smalldisplay
@c Is to @code{@@display} as @code{@@smallexample} is to @code{@@example}.
@c 
@code{@@example}に対する@code{@@smallexample}のような@code{@@display}に
対するものです．

@item @@format
@c Like @code{@@display} (the text is not filled and no font is selected),
@c but the text is not indented.
@c 
@code{@@display}(テキストは補充されずフォントの選択もありません)に似てい
ますが，字下げされません．

@item @@smallformat
@c Is to @code{@@format} as @code{@@smallexample} is to @code{@@example}.
@c 
@code{@@example}に対する@code{@@smallexample}のような@code{@@format}に対
するものです．
@end table

@c The @code{@@exdent} command is used within the above constructs to
@c undo the indentation of a line.
@c 
@code{@@exdent}コマンドは，行の字下げを元に戻すため，上記の構成の中で使
用されます．

@c The @code{@@flushleft} and @code{@@flushright} commands are used to line
@c up the left or right margins of unfilled text.@refill
@c 
@code{@@flushleft}と@code{@@flushright}コマンドは，補充されないテキスト
の左右のマージンを整えるために使用されます．@refill

@c The @code{@@noindent} command may be used after one of the above
@c constructs to prevent the following text from being indented as a new
@c paragraph.
@c 
@code{@@noindent}は，それに続くテキストを新しい段落のように字下げするの
を妨げるため，上の構成の一つの後で使用してもかまいません．

@c You can use the @code{@@cartouche} command within one of the above
@c constructs to highlight the example or quotation by drawing a box with
@c rounded corners around it.  @xref{cartouche, , Drawing Cartouches Around
@c Examples}.
@c 
上の構成物の一つの中で角丸の四角を描いて例や引用を強調するため，
@code{@@cartouche}コマンドを使用することが可能です．@xref{cartouche, ,
Drawing Cartouches Around Examples}.


@node quotation
@section @code{@@quotation}
@cindex Quotations
@findex quotation

@c The text of a quotation is processed normally except that:
@c 
引用のテキストを，以下の場合以外は普通に処理します．

@itemize @bullet
@item
@c the margins are closer to the center of the page, so the whole of the
@c quotation is indented;@refill
@c 
マージンがページの中心に近く，そのため引用全体を字下げできない場合．
@refill

@item
@c the first lines of paragraphs are indented no more than other
@c lines;@refill
@c 
段落の最初の行が他の行以上に字下げできない場合．@refill

@item
@c in the printed output, interparagraph spacing is reduced.@refill
@c 
印刷物で，段落間の間隔が減らされている場合．@refill
@end itemize

@quotation
@c This is an example of text written between an @code{@@quotation}
@c command and an @code{@@end quotation} command.  An @code{@@quotation}
@c command is most often used to indicate text that is excerpted from
@c another (real or hypothetical) printed work.@refill
@c 
これは@code{@@quotation}コマンドと@code{@@end quotation}コマンドの間に書
かれているテキストの例です．@code{@@quotation}コマンドは，他の(実際また
は架空の)印刷された本から抜粋されたテキストを示すために，最もよく使用さ
れます．
@end quotation

@c Write an @code{@@quotation} command as text on a line by itself.  This
@c line will disappear from the output.  Mark the end of the quotation
@c with a line beginning with and containing only @code{@@end quotation}.
@c The @code{@@end quotation} line will likewise disappear from the
@c output.  Thus, the following,@refill
@c 
@code{@@quotation}コマンドは単独行のテキストとして書いてください．この行
は出力に現れません．引用の終りを，行の最初に@code{@@end quotation}のみを
含む行で印を付けてください．@code{@@end quotation}行は出力に現れません．
こうして，以下のようになります．@refill

@example
@@quotation
This is
a foo.
@@end quotation
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
This is a foo.
@end quotation


@node example
@c @section @code{@@example}: Example Text
@section @code{@@example}: 例のテキスト
@cindex Examples, formatting them
@cindex Formatting examples
@findex example

@c The @code{@@example} command is used to indicate an example that is
@c not part of the running text, such as computer input or output.
@c 
@code{@@example}コマンドは，コンピュータの入力や出力のような実行している
テキスト以外の例を示すために使用されます．

@example
@group
@c This is an example of text written between an
@c @code{@@example} command
@c and an @code{@@end example} command.
@c The text is indented but not filled.
@c 
これは，@code{@@example}コマンドと
@code{@@end example}コマンドの間に書かれている
テキストの例です．
字下げされますが補充されません．
@end group

@group
@c In the printed manual, the text is typeset in a
@c fixed-width font, and extra spaces and blank lines are
@c significant.  In the Info file, an analogous result is
@c obtained by indenting each line with five spaces.
@c 
印刷されたマニュアルでは，テキストは等幅フォントで植字され，
余分な空白と空白行は意味があります．Infoファイルでは，
それぞれの行を五個のスペースで字下げされ，
似たような結果が得られます．
@end group
@end example

@c Write an @code{@@example} command at the beginning of a line by itself.
@c Mark the end of the example
@c with an @code{@@end example} command, also written at the beginning of a
@c line by itself.@refill
@c 
@code{@@end example}コマンドを行の最初に単独行に書いてください．例の終り
に@code{@@end example}コマンドで印を付け，それも行の最初に単独行で書いて
ください．

@need 700
@c For example,
@c 
例えば，以下のようにします．

@example
@@example
mv foo bar
@@end example
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
mv foo bar
@end example

@c The lines containing @code{@@example} and @code{@@end example}
@c will disappear from the output.
@c To make the output look good,
@c you should put a blank line before the
@c @code{@@example} and another blank line after the @code{@@end example}.
@c Note that blank lines inside the beginning
@c @code{@@example} and the ending @code{@@end example} will appear in
@c the output.@refill
@c 
@code{@@example}と@code{@@end example}を含む行は出力に現れません．出力の
見ためが良くなるように，@code{@@example}の前に空白行を置き，もう一つの空
白行を@code{@@end example}の後に置くべきです．始めの@code{@@example}と終
りの@code{@@end example}の中の空白行は出力に現れることに注意してください．
@refill

@quotation
@c @strong{Caution:} Do not use tabs in the lines of an example or anywhere
@c else in Texinfo (except in verbatim environments)!  The @TeX{}
@c implementation of Texinfo treats tabs as single spaces, and that is not
@c what they look like.  (If necessary, in Emacs, you can use @kbd{M-x
@c untabify} to convert tabs in a region to multiple spaces.)@refill
@c 
@strong{注意:}(逐語的な環境以外の)例の行や問題となりうるTexinfoのあらゆ
る場所でタブを使用しないでください！Texinfoの@TeX{}の実装ではタブを一つの
スペースとして扱い，表示されているようにはなりません．(必要な場合，Emacs 
でタブをその領域を占める複数のスペースに変換するため@kbd{M-x untabify} 
を使用することが可能です．)
@end quotation

@c Examples are often, logically speaking, ``in the middle'' of a
@c paragraph, and the text that continues after an example should not be
@c indented.  The @code{@@noindent} command prevents a piece of text from
@c being indented as if it were a new paragraph.
@c 
例は，論理的に言うと段落の``真中にある''ものと，例の後に字下げされずに続
けられるテキストとなります．@code{@@noindent}コマンドはテキストの部分が
新しい段落のように字下げされるのを妨げます．
@ifinfo
(@xref{noindent}.)
@end ifinfo

@c (The @code{@@code} command is used for examples of code that are
@c embedded within sentences, not set off from preceding and following
@c text.  @xref{code, , @code{@@code}}.)
@c 
(@code{@@code}コマンドは文の中に埋め込まれるコードの例に使用されますが，
前後のテキストを区切りません．@xref{code, , @code{@@code}}.)


@node verbatim
@c @section @code{@@verbatim}: Literal Text
@section @code{@@verbatim}:リテラルテキスト
@findex verbatim
@cindex Verbatim environment

@c Use the @code{@@verbatim} environment for printing of text that may
@c contain special characters or commands that should not be interpreted,
@c such as computer input or output (@code{@@example} interprets its text
@c as regular Texinfo commands).  This is especially useful for including
@c automatically generated output in a Texinfo manual.  Here is an example;
@c the output you see is just the same as the input, with a line
@c @code{@@verbatim} before and a line @code{@@end verbatim} after.
@c 
コンピュータの入力や出力のような，特殊な文字や解釈して欲しくないコマンド
を含む可能性のあるテキストを出力するために，@code{@@verbatim}の環境を使
用してください(@code{@@example}はそのテキストを通常のTexinfoコマンドとし
て解釈します)．これは，自動的に生成される出力をTexinfoマニュアルに含める
ときに特に役に立ちます．例は以下のようになります．見ることになる出力は，
@code{@@verbatim}の前の行と@code{@@end verbatim}の後の行も含めて，入力と
全く同じになります．

@verbatim
@c This is an example of text written in a @verbatim
@c block.  No character substitutions are made.  All commands
@c are ignored, until `<at>end verbatim'.
@c 
これは，@verbatimブロックの例です．
文字の置換はありません．`<at>end verbatim'まで，
すべてのコマンドは無視されます．

@c In the printed manual, the text is typeset in a
@c fixed-width font, and not indented or filled.  All
@c spaces and blank lines are significant, including tabs.
@c 
印刷されたマニュアルでは，テキストは固定幅フォントで植字され，
字下げも補充もされません．
すべてのスペースと空白行は，タブも含めて重要です．
@end verbatim

@c Write a @code{@@verbatim} command at the beginning of a line by itself.
@c This line will disappear from the output.  Mark the end of the verbatim
@c block with a @code{@@end verbatim} command, also written at the
@c beginning of a line by itself.  The @code{@@end verbatim} will also
@c disappear from the output.
@c 
@code{@@verbatim}コマンドを行の始めに単独行で書いてください．この行は出
力に現れません．verbatimブロックの終りを@code{@@end verbatim}コマンドで
印を付け，これも行の始めから単独行にしてください．@code{@@end verbatim}
も出力には現れません．

@c For example:
@c 
例えば以下のようにします．
@c oops, got to trick this a bit: can't use @end verbatim inside @verbatim

@example
@exdent @@verbatim
@exdent @{
@exdent <tab>@@command with strange characters: @@'e 
@exdent expand<tab>me
@exdent @}
@exdent @@end verbatim
@end example

@noindent
@c produces
@c 
以下を生成します．

@verbatim
{
       @command with strange characters: @'e 
expand	me
}
@end verbatim

@c Since the lines containing @code{@@verbatim} and @code{@@end verbatim}
@c produce no output, tyically you should put a blank line before the
@c @code{@@verbatim} and another blank line after the @code{@@end
@c verbatim}.  Blank lines between the beginning @code{@@verbatim} and the
@c ending @code{@@end verbatim} will appear in the output.
@c 
@code{@@verbatim}と@code{@@end verbatim}を含んでいる行は出力を生成しない
ので，通常は@code{@@verbatim}の前の空白行と，@code{@@end verbatim}の後に
も空白行を書くべきです．最初の@code{@@verbatim}と終りの@code{@@end
verbatim}の間の空白行は出力に現れます．


@node verbatiminclude
@c @section @code{@@verbatiminclude} @var{file}: Include a File Verbatim
@section @code{@@verbatiminclude} @var{file}:ファイルをそのまま含める
@cindex Verbatim, include file
@cindex Including a file verbatim
@findex verbatiminclude

@c You can include the exact contents of a file in the document with the
@c @code{@@verbatiminclude} command:
@c 
@code{@@verbatiminclude}コマンドでファイルの内容を正確にドキュメントに含
めることが可能です．

@example
@@verbatiminclude @var{filename}
@end example

@c The contents of @var{filename} is printed in a verbatim environment
@c (@pxref{verbatim,,@code{@@verbatim}}).  Generally, the file is printed
@c exactly as it is, with all special characters and white space retained.
@c 
@var{filename}の内容は，verbatimで囲まれたように出力されます
(@pxref{verbatim,,@code{@@verbatim}})．一般的に，ファイルはそのまま正確
に出力され，すべての特殊文字と空白はそのままになります．


@node lisp
@c @section @code{@@lisp}: Marking a Lisp Example
@section @code{@@lisp}:Lispの例の印付け
@findex lisp
@cindex Lisp example

@c The @code{@@lisp} command is used for Lisp code.  It is synonymous
@c with the @code{@@example} command.
@c 
@code{@@lisp}コマンドはLispコードに対し使用します．それは
@code{@@example}コマンドの類語です．

@lisp
@c This is an example of text written between an
@c @code{@@lisp} command and an @code{@@end lisp} command.
@c 
これは，@code{@@lisp}コマンドと
@code{@@end lisp}コマンドの間に書かれたテキストの例です．
@end lisp

@c Use @code{@@lisp} instead of @code{@@example} to preserve information
@c regarding the nature of the example.  This is useful, for example, if
@c you write a function that evaluates only and all the Lisp code in a
@c Texinfo file.  Then you can use the Texinfo file as a Lisp
@c library.@footnote{It would be straightforward to extend Texinfo to work
@c in a similar fashion for C, Fortran, or other languages.}
@c 
例の性質に関する情報を保護するため，@code{@@example}の代わりに
@code{@@lisp}を使用してください．例えば，TexinfoファイルにLispコードのみ
を評価しそれが全てである関数を書く場合，これは役に立ちます．Lispライブラ
リのようにTexinfoファイルを使用すること可能です．@footnote{ C，Fortran 
や他の言語に対し，類似の流儀で動作するようTexinfoを拡張することは簡単で
す．}

@c Mark the end of @code{@@lisp} with @code{@@end lisp} on a line by
@c itself.@refill
@c 
@code{@@lisp}の終りは，単独行の@code{@@end lisp}で印を付けてください．
@refill


@node small
@c @section @code{@@small@dots{}} Block Commands
@section @code{@@small@dots{}}ブロックコマンド
@cindex Small examples
@cindex Examples in smaller fonts
@cindex Lisp examples in smaller fonts
@findex smalldisplay
@findex smallexample
@findex smallformat
@findex smalllisp

@c In addition to the regular @code{@@example} and @code{@@lisp} commands,
@c Texinfo has ``small'' example-style commands.  These are
@c @code{@@smalldisplay}, @code{@@smallexample}, @code{@@smallformat}, and
@c @code{@@smalllisp}.
@c 
正規の@code{@@example}と@code{@@lisp}コマンドに加えて，Texinfoは
``small''という例のような形式のコマンドがあります．これらは，
@code{@@smalldisplay}，@code{@@smallexample}，@code{@@smallformat}，そし
て@code{@@smalllisp}です．

@c In @TeX{}, the @code{@@small@dots{}} commands typeset text in a smaller
@c font than the non-small example commands.  Consequently, many examples
@c containing long lines fit on a page without needing to be shortened.
@c 
@TeX{}では，@code{@@small@dots{}}コマンドは，小さい例のコマンドより小さ
いフォントでテキストを植字します．したがって，長い行を含んでいる例の多く
は，短くする必要が無いように，ページに適したものになります．

@c In Info, the @code{@@small@dots{}} commands are equivalent to their
@c non-small companion commands.
@c 
Infoでは，@code{@@small@dots{}}コマンドは，``small''が無いコマンドと同じ
です．

@c Mark the end of an @code{@@small@dots{}} block with a corresponding
@c @code{@@end small@dots{}}.  For example, pair @code{@@smallexample} with
@c @code{@@end smallexample}.
@c 
@code{@@small@dots{}}ブロックは，対応する@code{@@end small@dots{}}で印を
付けてください．例えば@code{@@smallexample}は@code{@@end smallexample}と
対になります．

@iftex
@c Here is an example written in the small font used by the
@c @code{@@smallexample} and @code{@@smalllisp} commands:
@c 
@code{@@smallexample}と@code{@@smalllisp}コマンドによって，小さいフォン
トで書かれた例は以下のようになります．

@ifclear smallbook
@display
@tex
% Remove extra vskip; this is a kludge to counter the effect of display
\vskip-3\baselineskip
{\smalltt
\dots{} to make sure that you have the freedom to
distribute copies of free software (and charge for
this service if you wish), that you receive source
code or can get it if you want it, that you can
change the software or use pieces of it in new free
programs; and that you know you can do these things.}
@end tex
@end display
@end ifclear
@end iftex
@ifset smallbook
@iftex
@smallexample
@c This is an example of text written between @code{@@smallexample} and
@c @code{@@end smallexample}.  In Info this text appears in its normal size;
@c but in printed manuals, this text appears in a smaller font.
@c 
これは@code{@@smallexample}と@code{@@end smallexample}の間に書かれたテキ
ストの例です．Infoでは，と8.5x11インチのマニュアルではこのテキストは通常
サイズで現れます．しかし印刷されたマニュアルでは，このテキストは小さいフォ
ントで現れます．
@end smallexample
@end iftex
@end ifset
@ifinfo
@smallexample
@c This is an example of text written between @code{@@smallexample} and
@c @code{@@end smallexample}.  In Info this text appears in its normal size;
@c but in a 7 by 9.25 inch manual, this text appears in a smaller font.
@c 
これは，@code{@@smallexample}と@code{@@end smallexample}の間に書かれたテ
キストの例です．Infoでは，このテキストは通常サイズで現れます．しかし
7x9.25インチのマニュアルでは，このテキストは小さいフォントで現れます．
@end smallexample
@end ifinfo

@c The @code{@@small@dots{}} commands make it easier to prepare manuals
@c without forcing you to edit examples by hand to fit them onto narrower
@c pages.
@c 
@code{@@small@dots{}}コマンドで，狭いページに適したものになるよう手動で
例を編集することなく，マニュアルの準備がより簡単になります．

@c As a general rule, a printed document looks better if you use only one
@c of (for example) @code{@@example} or in @code{@@smallexample}
@c consistently within a chapter.  Only occasionally should you mix the two
@c formats.
@c 
一般的な規則として，(例えば)@code{@@example}または@code{@@smallexample}
の一つのみを章の中で一貫して使用すると，印刷されたドキュメントはより良く
見えます．たまにだけ，二つの書式を混ぜるべきです．

@c @xref{smallbook, , Printing ``Small'' Books}, for more information
@c about the @code{@@smallbook} command.
@c 
@code{@@smallbook}コマンドの詳細は，@xref{smallbook, , Printing
``Small'' Books}.


@node display
@c @section @code{@@display} and @code{@@smalldisplay}
@section @code{@@display}と@code{@@smalldisplay}
@cindex Display formatting
@findex display

@c The @code{@@display} command begins a kind of example.  It is like the
@c @code{@@example} command
@c except that, in
@c a printed manual, @code{@@display} does not select the fixed-width
@c font.  In fact, it does not specify the font at all, so that the text
@c appears in the same font it would have appeared in without the
@c @code{@@display} command.@refill
@c 
@code{@@display}コマンドは，例のようなものを開始します．印刷されたマニュ
アルで@code{@@display}は等幅フォントを選択しない以外は，@code{@@example} 
コマンドに似ています．実際，フォントを全く指定しないので，テキストは
@code{@@display}コマンドを用いていないところに現れるものと同じフォントで
現れます．@refill

@display
@c This is an example of text written between an @code{@@display} command
@c and an @code{@@end display} command.  The @code{@@display} command
@c indents the text, but does not fill it.
@c 
これは，@code{@@display}コマンドと@code{@@end display}コマンドの間に書かれ
たテキストの例です．@code{@@display}コマンドは，テキストを字下げしますが，
補充しません．
@end display

@findex smalldisplay
@c Texinfo also provides a command @code{@@smalldisplay}, which is like
@c @code{@@display} but uses a smaller font in @code{@@smallbook} format.
@c @xref{small}.
@c 
Texinfoは@code{@@smalldisplay}コマンドも提供していて，それは
@code{@@display}に似ていますが，@code{@@smallbook}書式でより小さいフォン
トを使用します．@xref{small}.


@node format
@c @section @code{@@format} and @code{@@smallformat}
@section @code{@@format}と@code{@@smallformat}
@findex format

@c The @code{@@format} command is similar to @code{@@example} except
@c that, in the printed manual, @code{@@format} does not select the
@c fixed-width font and does not narrow the margins.@refill
@c 
@code{@@format}コマンドは，印刷されたマニュアルで@code{@@format}が等幅フォ
ントを選択せず，マージンを狭くしないこと以外は，@code{@@example}に似てい
ます．@refill

@format
@c This is an example of text written between an @code{@@format} command
@c and an @code{@@end format} command.  As you can see
@c from this example,
@c the @code{@@format} command does not fill the text.
@c 
これは@code{@@format}コマンドと@code{@@end format}コマンドの間に書かれてい
るテキストの例です．
この例で分かるように，
@code{@@format}コマンドは，テキストを補充しません．
@end format

@findex smallformat
@c Texinfo also provides a command @code{@@smallformat}, which is like
@c @code{@@format} but uses a smaller font in @code{@@smallbook} format.
@c @xref{small}.
@c 
Texinfoは@code{@@smallformat}も提供していて，それは，@code{@@format}に似
ていますが，@code{@@smallbook}書式でより小さいフォントを使用します．
@xref{small}.

@node exdent
@c @section @code{@@exdent}: Undoing a Line's Indentation
@section @code{@@exdent}: 行の字下げの取り消し
@cindex Indentation undoing
@findex exdent

@c The @code{@@exdent} command removes any indentation a line might have.
@c The command is written at the beginning of a line and applies only to
@c the text that follows the command that is on the same line.  Do not use
@c braces around the text.  In a printed manual, the text on an
@c @code{@@exdent} line is printed in the roman font.@refill
@c 
@code{@@exdent}コマンドは行が持つ字下げを削除します．このコマンドは行の
最初に書き，同じ行にあるコマンドに続くテキストのみに適用されます．テキス
トの周りにカッコを使用しないでください．印刷されたマニュアルでは，
@code{@@exdent}行のテキストはローマンフォントで印刷されます．@refill

@c @code{@@exdent} is usually used within examples.  Thus,@refill
@c 
@code{@@exdent}は通常例の内部で使用されます．このため，以下のようになり
ます．@refill

@example
@group
@@example
@c This line follows an @@@@example command.
@c @@exdent This line is exdented.
@c This line follows the exdented line.
@c The @@@@end example comes on the next line.
@c 
この行は，@@@@exampleコマンドに続いています．
@@exdent この行は字下げされません．
この行は字下げされていない行に続いています．
@@@@end exampleは次の行にあります．
@@end group
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
@group
@c This line follows an @@example command.
@c @exdent This line is exdented.
@c This line follows the exdented line.
@c The @@end example comes on the next line.
@c 
この行は，@@exampleコマンドに続いています．
@exdent この行は字下げされません．
この行は字下げされていない行に続いています．
@@end exampleは次の行にあります．
@end group
@end example

@c In practice, the @code{@@exdent} command is rarely used.
@c Usually, you un-indent text by ending the example and
@c returning the page to its normal width.@refill
@c 
実際は，@code{@@exdent}コマンドは滅多に使用されません．通常幅に変えるた
め，通常は例を終りにしたり，ページをかえたりして，テキストを字下げしない
ようにします．


@node flushleft & flushright
@c @section @code{@@flushleft} and @code{@@flushright}
@section @code{@@flushleft}と@code{@@flushright}
@findex flushleft
@findex flushright
@cindex ragged right
@cindex ragged left

@c The @code{@@flushleft} and @code{@@flushright} commands line up the
@c ends of lines on the left and right margins of a page,
@c but do not fill the text.  The commands are written on lines of their
@c own, without braces.  The @code{@@flushleft} and @code{@@flushright}
@c commands are ended by @code{@@end flushleft} and @code{@@end
@c flushright} commands on lines of their own.@refill
@c 
@code{@@flushleft}と@code{@@flushright}コマンドは，ページの左右のマージ
ンで行の終りを整えますが，テキストを補充しません．コマンドはカッコを使用
せず，単独行に書かれます．@code{@@flushleft}と@code{@@flushright}コマン
ドは，単独行の@code{@@end flushleft}と@code{@@end flushright}コマンドで
終りになります．

@need 1500
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@flushleft
@c This text is
@c written flushleft.
@c 
このテキストは
左揃えで書かれています．
@@end flushleft
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
@flushleft
@c This text is
@c written flushleft.
@c 
このテキストは
左揃えで書かれています．
@end flushleft
@end quotation


@c @code{@@flushright} produces the type of indentation often used in the
@c return address of letters.  For example,
@c 
@code{@@flushright}は，手紙の返信先住所でよく使用される字下げの形式を生
成します．例えば，以下のようにします．

@example
@group
@@flushright
@c Here is an example of text written
@c flushright.  The @@code@{@@flushright@} command
@c right justifies every line but leaves the
@c left end ragged.
@c 
これは，右揃えで書かれてたテキストの例です．
@@code@{@@flushright@}コマンドは
全ての行を右揃えにしますが，
左端はバラバラのままです．
@@end flushright
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@flushright
@c Here is an example of text written
@c flushright.  The @code{@@flushright} command
@c right justifies every line but leaves the
@c left end ragged.
@c 
これは，右揃えで書かれてたテキストの例です．
@code{@@flushright}コマンドは
全ての行を右揃えにしますが，
左端はバラバラのままです．
@end flushright


@node noindent
@c @section @code{@@noindent}: Omitting Indentation
@section @code{@@noindent}: 字下げを行なわない
@findex noindent

@c An example or other inclusion can break a paragraph into segments.
@c Ordinarily, the formatters indent text that follows an example as a new
@c paragraph.  You can prevent this on a case-by-case basis by writing
@c @code{@@noindent} at the beginning of a line, preceding the continuation
@c text.  You can also disable indentation for all paragraphs globally with
@c @code{@@paragraphindent} (@pxref{paragraphindent, Paragraph Indenting}).
@c 
例やその他の包含物は，段落を部分に切り分けます．通常，フォーマッタは例に
続くテキストを新しい段落として字下げします．時と場合によって
@code{@@noindent}を行の最初に単独行に書いたり，それに続くテキストの前に
書くことで，これを妨げることが可能です．@code{@@paragraphindent}を用いる
ことで，段落全体すべての字下げを行なわないことも可能です
(@pxref{paragraphindent, Paragraph Indenting})．

@c It is best to write @code{@@noindent} on a line by itself, since in most
@c environments, spaces following the command will not be ignored.  It's ok
@c to use it at the beginning of a line, with text following, outside of
@c any environment.
@c 
ほとんどの囲まれている部分で，コマンドの直後のスペースは無視されないので，
@code{@@noindent}を単独行に書いた方が良いでしょう．囲まれている部分以外
では，行の最初に使用し，それにテキストを続けてもかまいません．

@need 1500
@c For example:
@c 
例えば，以下のようにします．

@example
@group
@@example
@c This is an example
@c 
これは例です．
@@end example

@@noindent
@c This line is not indented.  As you can see, the
@c beginning of the line is fully flush left with the line
@c that follows after it.  (This whole example is between
@c @@code@{@@@@display@} and @@code@{@@@@end display@}.)
@c 
この行は，字下げされません．御覧のように，行の最初は
その後も続けて全体が左寄せになっています．
(この全体の例は，@@code@{@@@@display@}と
@@code@{@@@@end display@}の間にあります．)
@end group
@end example

@noindent
@c produces:
@c 
以下を生成します．

@display

@example
@c This is an example
@c 
これは例です．
@end example

@noindent
@c This line is not indented.  As you can see, the
@c beginning of the line is fully flush left with the line
@c that follows after it.  (This whole example is between
@c @code{@@display} and @code{@@end display}.)
@c 
この行は，字下げされません．御覧のように，行の最初は
その後も続けて全体が左寄せになっています．
(この全体の例は，@code{@@display}と@code{@@end
display}の間にあります．)

@end display

@c To adjust the number of blank lines properly in the Info file output,
@c remember that the line containing @code{@@noindent} does not generate a
@c blank line, and neither does the @code{@@end example} line.
@c 
Info出力で空白行の数を正確に調整するため，@code{@@noindent}を含む行は，
空白行を生成せず，@code{@@end example}行もそうしないことを覚えておいてく
ださい．

@c In the Texinfo source file for this manual, each line that says
@c `produces' is preceded by @code{@@noindent}.
@c 
このマニュアルのTexinfoソースファイルでは，`以下を生成します'と書いてあ
るそれぞれの行の前に，@code{@@noindent}が前置されています．

@c Do not put braces after an @code{@@noindent} command; they are not
@c necessary, since @code{@@noindent} is a command used outside of
@c paragraphs (@pxref{Command Syntax}).
@c 
@code{@@noindent}コマンドの後にカッコを書かないでください．
@code{@@noindent}は段落の外で使用されるので，それは不要です
(@pxref{Command Syntax})．


@node cartouche
@c @section @code{@@cartouche}: Rounded Rectangles Around Examples
@section @code{@@cartouche}:例の周りに枠を描く
@findex cartouche
@cindex Box with rounded corners
@cindex Rounded rectangles, around examples

@c In a printed manual, the @code{@@cartouche} command draws a box with
@c rounded corners around its contents.  You can use this command to
@c further highlight an example or quotation.  For instance, you could
@c write a manual in which one type of example is surrounded by a cartouche
@c for emphasis.
@c 
印刷されたマニュアルで，@code{@@cartouche}コマンドは，その内容の周りに角
丸の箱を描きます．例や引用をより強調するために使用することが可能です．例
えば，例の一つの形式が強調のため枠で囲まれているマニュアルを書くことが可
能です．

@c @code{@@cartouche} affects only the printed manual; it has no effect in
@c other output files.
@c 
@code{@@cartouche}は印刷されたマニュアルのみで効果があります．他の出力で
は効果がありません．

@need 1500
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@example
@@cartouche
% pwd
/usr/local/share/emacs
@@end cartouche
@@end example
@end group
@end example

@noindent
@c surrounds the two-line example with a box with rounded corners, in the
@c printed manual.
@c 
二行の例は，印刷されたマニュアルで，角丸の箱で囲まれます．

@iftex
@c In a printed manual, the example looks like this:@refill
@c 
印刷されたマニュアルでは，例は以下のように見えます．@refill

@example
@group
@cartouche
% pwd
/usr/local/lib/emacs/info
@end cartouche
@end group
@end example
@end iftex


@node Lists and Tables
@c @chapter Lists and Tables
@chapter リストと表
@cindex Making lists and tables
@cindex Lists and tables, making
@cindex Tables and lists, making

@c Texinfo has several ways of making lists and tables.  Lists can be
@c bulleted or numbered; two-column tables can highlight the items in
@c the first column; multi-column tables are also supported.
@c 
Texinfoにはリストと表を作成する方法がいくつかあります．リストは黒丸また
は番号が付きます．二列の表は，最初の列の項目が強調されます．複数列の表も
サポートされています．

@menu
* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.
@end menu

@node Introducing Lists, itemize, Lists and Tables, Lists and Tables
@ifinfo
@heading Introducing Lists
@heading リストの導入
@end ifinfo

@c Texinfo automatically indents the text in lists or tables, and numbers
@c an enumerated list.  This last feature is useful if you modify the
@c list, since you do not need to renumber it yourself.@refill
@c 
Texinfoは，リストや表のテキストの字下げと，列挙されたリストの番号付けを
自動的に行います．この最後の機能は，リストを編集する場合に番号を付け直す
必要が無いので便利です．@refill

@c Numbered lists and tables begin with the appropriate @@-command at the
@c beginning of a line, and end with the corresponding @code{@@end}
@c command on a line by itself.  The table and itemized-list commands
@c also require that you write formatting information on the same line as
@c the beginning @@-command.@refill
@c 
番号付のリストと表は，行の最初を適切な@@-コマンドで開始し，単独行の対応
する@code{@@end}コマンドで終了します．表と項目に分けられたリストのコマン
ドも，開始の@@-コマンドと同じ行に書式化情報を書くことを要求します．
@refill

@c Begin an enumerated list, for example, with an @code{@@enumerate}
@c command and end the list with an @code{@@end enumerate} command.
@c Begin an itemized list with an @code{@@itemize} command, followed on
@c the same line by a formatting command such as @code{@@bullet}, and end
@c the list with an @code{@@end itemize} command.@refill
@c 
例えば，@code{@@enumerate}コマンドで列挙リストを開始し，@code{@@end
enumerate}コマンドでリストを終了してください．項目分けリストを
@code{@@itemize}コマンドで開始し，@code{@@bullet}のような書式化コマンド
を同じ行に続け，@code{@@end itemize}コマンドでリストを終了してください．
@refill
@findex end

@c Precede each element of a list with an @code{@@item} or @code{@@itemx}
@c command.@refill
@c 
リストのそれぞれの要素は，@code{@@item}や@code{@@itemx}コマンドに前置し
ます．@refill

@sp 1
@noindent
@c Here is an itemized list of the different kinds of table and lists:@refill
@c 
異なる種類の表とリストの項目分けされたリストは以下のようになります．
@refill

@itemize @bullet
@item
@c Itemized lists with and without bullets.
@c 
黒点有りと無しの項目分けされたリスト．

@item
@c Enumerated lists, using numbers or letters.
@c 
番号や文字を使用した列挙リスト．

@item
@c Two-column tables with highlighting.
@c 
強調のある二列の表．
@end itemize

@sp 1
@noindent
@c Here is an enumerated list with the same items:@refill
@c 
同じ項目で列挙されたリストは以下のようになります．

@enumerate
@item
@c Itemized lists with and without bullets.
@c 
黒点有りと無しの項目分けされたリスト．

@item
@c Enumerated lists, using numbers or letters.
@c 
番号や文字を使用した列挙リスト．

@item
@c Two-column tables with highlighting.
@c 
強調のある二列の表．
@end enumerate

@sp 1
@noindent
@c And here is a two-column table with the same items and their
@c @w{@@-commands}:@refill
@c 
そして，同じ項目と@w{@@-コマンド}の二列の表は以下のようになります．
@refill

@table @code
@item @@itemize
@c Itemized lists with and without bullets.
@c 
黒点有りと無しの項目分けされたリスト．

@item @@enumerate
@c Enumerated lists, using numbers or letters.
@c 
番号や文字を使用した列挙リスト．

@item @@table
@itemx @@ftable
@itemx @@vtable
@c Two-column tables, optionally with indexing.
@c 
強調のある二列の表．
@end table


@node itemize
@c @section @code{@@itemize}: Making an Itemized List
@section @code{@@itemize}: 項目分けされたリストの作成
@cindex Itemization
@findex itemize

@c The @code{@@itemize} command produces sequences of indented
@c paragraphs, with a bullet or other mark inside the left margin
@c at the beginning of each paragraph for which such a mark is desired.@refill
@c 
@code{@@itemize}コマンドは，印が必要なそれぞれの段落の最初に左のマージン
に黒丸や他の印を使用した，字下げされた段落の並びを生成します．@refill

@cindex @code{@@w}, for blank items
@c Begin an itemized list by writing @code{@@itemize} at the beginning of
@c a line.  Follow the command, on the same line, with a character or a
@c Texinfo command that generates a mark.  Usually, you will write
@c @code{@@bullet} after @code{@@itemize}, but you can use
@c @code{@@minus}, or any command or character that results in a single
@c character in the Info file.  If you don't want any mark at all, use
@c @code{@@w}.  (When you write the mark command such as
@c @code{@@bullet} after an @code{@@itemize} command, you may omit the
@c @samp{@{@}}.)  If you don't specify a mark command, the default is
@c @code{@@bullet}.
@c 
行の 最初に@code{@@itemize}を書き，項目分けされたリストを開始します．コ
マンドに続く同じ行に，文字やマークを生成するTexinfoコマンドを続けてくだ
さい．通常，@code{@@itemize}の後に@code{@@bullet}を書きますが，
@code{@@minus}や結果としてInfoファイルで一文字を生成するあらゆるコマンド
や文字を使用することが可能です．全く印をを付けたくない場合は@code{@@w} 
を使用してください．(@code{@@itemize}コマンド後に@code{@@bullet}のような
コマンドを書く場合，@samp{@{@}}を省略できます．)マークコマンドを指定しな
い場合はデフォルトは@code{@@bullet}です．

@c Write the text of the indented paragraphs themselves after the
@c @code{@@itemize}, up to another line that says @code{@@end
@c itemize}.@refill
@c 
@code{@@itemize}の後に，@code{@@end itemize}の行まで．字下げされた段落自
身のテキストを書いてください．@refill

@findex item
@c Before each paragraph for which a mark in the margin is desired, write a
@c line that says just @code{@@item}.  It is ok to have text following the
@c @code{@@item}.
@c 
マージンに要求される印に対して，それぞれの段落の前に@code{@@item}のみの
行を書いてください．@code{@@item}にテキストを続けても構いません．

@c Usually, you should put a blank line before an @code{@@item}.  This
@c puts a blank line in the Info file. (@TeX{} inserts the proper
@c interline whitespace in either case.)  Except when the entries are
@c very brief, these blank lines make the list look better.@refill
@c 
通常，@code{@@item}の前に空白行を書くべきです．これはInfoファイルにも空
白行を書きます．(@TeX{}は，どちらの場合でも適切な空白を行間に挿入します．) 
項目が非常に短いとき以外は，これらの空白行でリストの見ためが良くなります．
@refill

@c Here is an example of the use of @code{@@itemize}, followed by the
@c output it produces.  @code{@@bullet} produces an @samp{*} in Info and a
@c round dot in @TeX{}.
@c 
@code{@@itemize}の使用に続き，それが生成する出力の例は以下のようになりま
す．@code{@@bullet}はInfoでは@samp{*}，@TeX{}では丸い点を生成します．

@example
@group
@@itemize @@bullet
@@item
@c Some text for foo.
@c 
fooに対するいくつかのテキスト．

@@item
@c Some text
@c for bar.
@c 
barに対する
いくつかのテキスト．
@@end itemize
@end group
@end example

@noindent
@c This produces:
@c 
これは，以下を生成します．

@quotation
@itemize @bullet
@item
@c Some text for foo.
@c 
fooに対するいくつかのテキスト．

@item
@c Some text
@c for bar.
@c 
barに対する
いくつかのテキスト．
@end itemize
@end quotation

@c Itemized lists may be embedded within other itemized lists.  Here is a
@c list marked with dashes embedded in a list marked with bullets:@refill
@c 
項目分けされたリストには，他の項目分けされたリストを埋め込んでもかまいま
せん．黒点で印を付けたリストの中にダッシュで印を付けたリストを埋め込んだ
ものは以下のようになります．@refill

@example
@group
@@itemize @@bullet
@@item
@c First item.
@c 
最初の項目．

@@itemize @@minus
@@item
@c Inner item.
@c 
内部の項目．

@@item
@c Second inner item.
@c 
二番目の内部の項目．
@@end itemize

@@item
@c Second outer item.
@c 
二番目の外部項目．
@@end itemize
@end group
@end example

@noindent
@c This produces:
@c 
これは，以下を生成します．

@quotation
@itemize @bullet
@item
@c First item.
@c 
最初の項目．

@itemize @minus
@item
@c Inner item.
@c 
内部の項目．

@item
@c Second inner item.
@c 
二番目の内部の項目．
@end itemize

@item
@c Second outer item.
@c 
二番目の外部項目．
@end itemize
@end quotation


@node enumerate
@c @section @code{@@enumerate}: Making a Numbered or Lettered List
@section @code{@@enumerate}: 数字や文字が付いたリストの作成
@cindex Enumeration
@findex enumerate

@c @code{@@enumerate} is like @code{@@itemize} (@pxref{itemize,,
@c @code{@@itemize}}), except that the labels on the items are
@c successive integers or letters instead of bullets.
@c 
@code{@@enumerate}は，アイテムのラベルが黒丸の代わりに，連続した整数や文
字となる以外，@code{@@itemize}に似ています(@pxref{itemize,,
@code{@@itemize}})．

@c Write the @code{@@enumerate} command at the beginning of a line.  The
@c command does not require an argument, but accepts either a number or a
@c letter as an option.  Without an argument, @code{@@enumerate} starts the
@c list with the number @samp{1}.  With a numeric argument, such as
@c @samp{3}, the command starts the list with that number.  With an upper
@c or lower case letter, such as @samp{a} or @samp{A}, the command starts
@c the list with that letter.
@c 
@code{@@enumerate}コマンドを行の最初に書いてください．コマンドは引数を要
求しませんが，オプションとして数字または文字を受け入れます．引数を用いな
いと，@code{@@enumerate}は数字@samp{1}でリストを開始します．@samp{3}のよ
うな数字の引数を用いると，コマンドはその番号からリストを開始します．
@samp{a}または@samp{A}のような大文字または小文字を用いると，コマンドはそ
の文字でリストを開始します．

@c Write the text of the enumerated list in the same way you write an
@c itemized list: put @code{@@item} on a line of its own before the start
@c of each paragraph that you want enumerated.  Do not write any other text
@c on the line beginning with @code{@@item}.
@c 
項目分けされたリストと同じ方法で，列挙されたリストのテキストを書いてくだ
さい．列挙したいそれぞれの段落を始める前に，単独行に@code{@@item}を置い
てください．@code{@@item}で始まる行に他のテキストは一切書かないでくださ
い．

@c You should put a blank line between entries in the list.
@c This generally makes it easier to read the Info file.
@c 
リストの項目の間に空白行を書くべきです．一般にInfoファイルが読みやすくな
ります．

@need 1500
@c Here is an example of @code{@@enumerate} without an argument:
@c 
引数の無い@code{@@enumerate}の例は以下のようになります．

@example
@group
@@enumerate
@@item
@c Underlying causes.
@c 
根本的な原因．

@@item
@c Proximate causes.
@c 
直接の原因．
@@end enumerate
@end group
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@enumerate
@item
@c Underlying causes.
@c 
根本的な原因．

@item
@c Proximate causes.
@c 
直接の原因．
@end enumerate
@sp 1
@c Here is an example with an argument of @kbd{3}:@refill
@c 
@kbd{3}を引数とした例は以下のようになります．@refill
@sp 1
@example
@group
@@enumerate 3
@@item
@c Predisposing causes.
@c 
元となる原因．

@@item
@c Precipitating causes.
@c 
逆の原因．

@@item
@c Perpetuating causes.
@c 
永続する原因．
@@end enumerate
@end group
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@enumerate 3
@item
@c Predisposing causes.
@c 
元となる原因．

@item
@c Precipitating causes.
@c 
逆の原因．

@item
@c Perpetuating causes.
@c 
永続する原因．
@end enumerate
@sp 1
@c Here is a brief summary of the alternatives.  The summary is constructed
@c using @code{@@enumerate} with an argument of @kbd{a}.@refill
@c 
選択肢に関する短い概要は以下のようになります．概要は，@kbd{a}の引数で
@code{@@enumerate}を使用して組み立てられています．@refill
@sp 1
@enumerate a
@item
@code{@@enumerate}

@c Without an argument, produce a numbered list, starting with the number
@c 1.@refill
@c 
引数を用いないと，番号付リストを生成し，それは数字の1で始まります．@refill

@item
@code{@@enumerate @var{positive-integer}}

@c With a (positive) numeric argument, start a numbered list with that
@c number.  You can use this to continue a list that you interrupted with
@c other text.@refill
@c 
(正の)数字の引数を用いると，その数字で番号付のリストを開始します．他の文
章で中断されたリストを続けるために，これを使用することが可能です．

@item
@code{@@enumerate @var{upper-case-letter}}

@c With an upper case letter as argument, start a list
@c in which each item is marked
@c by a letter, beginning with that upper case letter.@refill
@c 
大文字の引数を用いると，それぞれの項目がその大文字で始まる文字で印が付い
たリストを開始します．@refill

@item
@code{@@enumerate @var{lower-case-letter}}

@c With a lower case letter as argument, start a list
@c in which each item is marked by
@c a letter, beginning with that lower case letter.@refill
@c 
小文字の引数を用いると，それぞれの項目がその小文字で始まる文字で印が付い
たリストを開始します．
@end enumerate

@c You can also nest enumerated lists, as in an outline.@refill
@c 
アウトラインのように，番号付のリストを入れ子にすることも可能です．

@node Two-column Tables, Multi-column Tables, enumerate, Lists and Tables
@c @section Making a Two-column Table
@section 二列の表の作成
@cindex Tables, making two-column
@findex table

@c @code{@@table} is similar to @code{@@itemize} (@pxref{itemize,,
@c @code{@@itemize}}), but allows you to specify a name or heading line for
@c each item.  The @code{@@table} command is used to produce two-column
@c tables, and is especially useful for glossaries, explanatory
@c exhibits, and command-line option summaries.
@c 
@code{@@table}は，@code{@@itemize}(@pxref{itemize,, @code{@@itemize}})に
似ていますが．それぞれの項目に対して名前や見出し行を指定できます．
@code{@@table}コマンドは，二列の表を生成するために使用され，特に，用語集，
説明的な表示，そしてコマンドラインオプションの概要に役に立ちます．

@menu
* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.
@end menu

@node table, ftable vtable, Two-column Tables, Two-column Tables
@ifinfo
@c @subheading Using the @code{@@table} Command
@subheading @code{@@table}コマンドの使用

@c Use the @code{@@table} command to produce two-column tables.@refill
@c 
二列の表を生成するために@code{@@table}コマンドを使用してください．@refill
@end ifinfo

@c Write the @code{@@table} command at the beginning of a line and follow
@c it on the same line with an argument that is a Texinfo ``indicating''
@c command such as @code{@@code}, @code{@@samp}, @code{@@var}, or
@c @code{@@kbd} (@pxref{Indicating}).  Although these commands are usually
@c followed by arguments in braces, in this case you use the command name
@c without an argument because @code{@@item} will supply the argument.
@c This command will be applied to the text that goes into the first column
@c of each item and determines how it will be highlighted.  For example,
@c @code{@@code} will cause the text in the first column to be highlighted
@c with an @code{@@code} command.  (We recommend @code{@@code} for
@c @code{@@table}'s of command-line options.)
@c 
@code{@@table}コマンドを行の最初に書き，同じ行に@code{@@code}，
@code{@@samp}，@code{@@var}や，@code{@@kbd}(@pxref{Indicating})のような
Texinfoの``表示''コマンドを引数として続けてください．これらのコマンドは
通常カッコで引数が続きますが，@code{@@item}は引数を供給するので，この場
合は引数無しでコマンド名を使用します．このコマンドは，それぞれの項目の最
初の列になるテキストに適用され，強調方法を決定します．例えば，
@code{@@code}は最初の列のテキストを@code{@@code}コマンドで強調します．
(我々はコマンドラインオプションの@code{@@table}に対し@code{@@code}を勧め
ます．)

@findex asis
@c You may also choose to use the @code{@@asis} command as an argument to
@c @code{@@table}.  @code{@@asis} is a command that does nothing; if you
@c use this command after @code{@@table}, @TeX{} and the Info formatting
@c commands output the first column entries without added highlighting
@c (``as is'').@refill
@c 
@code{@@table}の引数として，@code{@@asis}コマンドの使用を選択してもかま
いません．@code{@@asis}は何もしないコマンドです．@code{@@table}の後にこ
のコマンドを使用した場合，@TeX{}とInfoの書式化コマンドは，最初の列の項目
を強調せず(``そのまま'')出力します．@refill

@c (The @code{@@table} command may work with other commands besides those
@c listed here.  However, you can only use commands that normally take
@c arguments in braces.)@refill
@c 
(@code{@@table}コマンドは，ここでリストアップした以外のコマンドを用いて
作業してもかまいません．しかし，通常はカッコ内に引数をとるコマンドのみが
使用可能です．)@refill

@findex item
@c Begin each table entry with an @code{@@item} command at the beginning
@c of a line.  Write the first column text on the same line as the
@c @code{@@item} command.  Write the second column text on the line
@c following the @code{@@item} line and on subsequent lines.  (You do not
@c need to type anything for an empty second column entry.)  You may
@c write as many lines of supporting text as you wish, even several
@c paragraphs.  But only text on the same line as the @code{@@item} will
@c be placed in the first column, including any footnote.
@c 
それぞれの表の項目を，行の最初の@code{@@item}コマンドで開始してください．
最初の列のテキストを@code{@@item}コマンドと同じ行に書いてください．二番目
の列のテキストを@code{@@item}行に続く行と，それ以降の行に書いてください．
(二番目の列の項目が空の場合，何も入力する必要はありません．)サポートする
テキストは好きな行数を書いてもかまいませんし，複数の段落にしてもかまいま
せん．しかし，@code{@@item}と同じ行のテキストのみ，脚注も含めて，最初の
列に配置されます．

@c Normally, you should put a blank line before an @code{@@item} line.
@c This puts a blank like in the Info file.  Except when the entries are
@c very brief, a blank line looks better.@refill
@c 
通常，@code{@@item}行の前に空白行を書くべきです．これはInfoファイルで空
白を書きます．項目が非常に短いとき以外は，空白行は見ためが良くなります．
@refill

@need 1500
@c The following table, for example, highlights the text in the first
@c column with an @code{@@samp} command:@refill
@c 
例えば，以下の表は最初の列を@code{@@samp}で強調しています．@refill

@example
@group
@@table @@samp
@@item foo
@c This is the text for
@c @@samp@{foo@}.
@c 
これは@@samp@{foo@}に対する
テキストです．

@@item bar
@c Text for @@samp@{bar@}.
@c 
@@samp@{bar@}に対するテキストです．
@@end table
@end group
@end example

@noindent
@c This produces:
@c 
これは，以下を生成します．

@table @samp
@item foo
@c This is the text for
@c @samp{foo}.
@c 
これは@samp{foo}に対する
テキストです．
@item bar
@c Text for @samp{bar}.
@c 
@@samp@{bar@}に対するテキストです．
@end table

@c If you want to list two or more named items with a single block of
@c text, use the @code{@@itemx} command.  (@xref{itemx, ,
@c @code{@@itemx}}.)@refill
@c 
二行以上の名前の項目を一つの塊のテキストでリストアップしたい場合，
@code{@@itemx}コマンドを使用してください．(@xref{itemx, ,
@code{@@itemx}}.)@refill


@node ftable vtable
@c @subsection @code{@@ftable} and @code{@@vtable}
@subsection @code{@@ftable}と@code{@@vtable}
@cindex Tables with indexes
@cindex Indexing table entries automatically
@findex ftable
@findex vtable

@c The @code{@@ftable} and @code{@@vtable} commands are the same as the
@c @code{@@table} command except that @code{@@ftable} automatically enters
@c each of the items in the first column of the table into the index of
@c functions and @code{@@vtable} automatically enters each of the items in
@c the first column of the table into the index of variables.  This
@c simplifies the task of creating indices.  Only the items on the same
@c line as the @code{@@item} commands are indexed, and they are indexed in
@c exactly the form that they appear on that line.  @xref{Indices},
@c for more information about indices.@refill
@c 
@code{@@ftable}と@code{@@vtable}コマンドは，@code{@@ftable}が自動的に表
の最初の列のそれぞれの項目を関数の索引に入れ，@code{@@vtable}が自動的に
表の最初の列のそれぞれの項目を変数の索引に入れる以外，@code{@@table}コマ
ンドと同じです．これは，索引作成の仕事を単純にします．@code{@@item}コマ
ンドと同じ行の項目のみ索引になり，それらはその行の表示と全く同じ形式で索
引になります．索引の詳細は，@xref{Indices}.@refill

@c Begin a two-column table using @code{@@ftable} or @code{@@vtable} by
@c writing the @@-command at the beginning of a line, followed on the same
@c line by an argument that is a Texinfo command such as @code{@@code},
@c exactly as you would for an @code{@@table} command; and end the table
@c with an @code{@@end ftable} or @code{@@end vtable} command on a line by
@c itself.
@c 
@code{@@ftable}や@code{@@vtable}を使用している二列の表は，行の最初に@@-コ
マンドを書くことで開始し，同じ行に引数として@code{@@table}コマンドに対す
るものと全く同じものを，@code{@@code}コマンドのようなTexinfoコマンドで続
けてください．そして，単独行で@code{@@end ftable}や@code{@@end vtable}コ
マンドを使用して終りにしてください．

@c See the example for @code{@@table} in the previous section.
@c 
前のセクションの@code{@@table}の例を参照してください．

@node itemx
@subsection @code{@@itemx}
@cindex Two named items for @code{@@table}
@findex itemx

@c Use the @code{@@itemx} command inside a table when you have two or more
@c first column entries for the same item, each of which should appear on a
@c line of its own.  Use @code{@@itemx} for all but the first entry;
@c @code{@@itemx} should always follow an @code{@@item} command.  The
@c @code{@@itemx} command works exactly like @code{@@item} except that it
@c does not generate extra vertical space above the first column text.
@c 
同じ項目で，最初の列の項目が二つ以上あり，それぞれを単独行に現したい場合，
@code{@@itemx}コマンドを表の中で使用してください．@code{@@itemx}を最初の
項目以外の全てに使用してください．@code{@@itemx}は常に@code{@@item}コマ
ンドに続けるべきです．@code{@@itemx}コマンドは，最初の列のテキストの上に
余分な空白を生成しない以外は，@code{@@item}と全く同じように動作します．

@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@table @@code
@@item upcase
@@itemx downcase
@c These two functions accept a character or a string as
@c argument, and return the corresponding upper case (lower
@c case) character or string.
@c 
この二つの関数は，引数として文字や文字列を受け入れ，対応した大文字(小文字)
の文字や文字列を返します．
@@end table
@end group
@end example

@noindent
@c This produces:
@c 
これは以下を生成します．

@table @code
@item upcase
@itemx downcase
@c These two functions accept a character or a string as
@c argument, and return the corresponding upper case (lower
@c case) character or string.@refill
@c 
この二つの関数は，引数として文字や文字列を受け入れ，対応した大文字(小文字) 
の文字や文字列を返します．@refill
@end table

@noindent
@c (Note also that this example illustrates multi-line supporting text in
@c a two-column table.)@refill
@c 
(この例は，二列の表に複数行をサポートしているテキストを表現していることに
注意してください．)@refill


@node Multi-column Tables,  , Two-column Tables, Lists and Tables
@c @section Multi-column Tables
@section 複数列の表
@cindex Tables, making multi-column
@findex multitable

@c @code{@@multitable} allows you to construct tables with any number of
@c columns, with each column having any width you like.
@c 
@code{@@multitable}で，それぞれの列が希望の幅を持つ，あらゆる数の列を持
つ表を構築することが可能となります．

@c You define the column widths on the @code{@@multitable} line itself, and
@c write each row of the actual table following an @code{@@item} command,
@c with columns separated by an @code{@@tab} command.  Finally, @code{@@end
@c multitable} completes the table.  Details in the sections below.
@c 
単独の@code{@@multitable}行で列の幅を定義し，@code{@@tab}コマンドで分け
られた列で，@code{@@item}コマンドに続けて，実際の表のそれぞれの行を書き
ます．最終的に，@code{@@end multitable}で表を終了します．詳細は以下のセ
クションにあります．

@menu
* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.
@end menu

@node Multitable Column Widths
@c @subsection Multitable Column Widths
@subsection 複数列の表の幅
@cindex Multitable column widths
@cindex Column widths, defining for multitables
@cindex Widths, defining multitable column

@c You can define the column widths for a multitable in two ways: as
@c fractions of the line length; or with a prototype row.  Mixing the two
@c methods is not supported.  In either case, the widths are defined
@c entirely on the same line as the @code{@@multitable} command.
@c 
複数行の表の列の幅を二つの方法で定義することが可能です．行の長さを小数と
する方法，または行のプロトタイプを使用する方法です．二つの方法を混ぜたも
のはサポートしていません．どちらの場合でも，@code{@@multitable}コマンド
と同じ行で幅は完全に定義されます．

@enumerate
@item
@findex columnfractions
@cindex Line length, column widths as fraction of
@c To specify column widths as fractions of the line length, write
@c @code{@@columnfractions} and the decimal numbers (presumably less than
@c 1) after the @code{@@multitable} command, as in:
@c 
行の長さ全体の小数として列の幅を指定するため，@code{@@columnfractions}と
(1より小さい)10進数を@code{@@multitable}コマンドの後に以下のように書いて
ください．

@example
@@multitable @@columnfractions .33 .33 .33
@end example

@noindent
@c The fractions need not add up exactly to 1.0, as these do
@c not.  This allows you to produce tables that do not need the full line
@c length.  You can use a leading zero if you wish.
@c 
小数部は上記がそうでないように，和が正確に1.0になる必要はありません．こ
れで，行全体を満たす必要の無い表を生成することができます．好みで0を前置
することが可能です．

@item
@cindex Prototype row, column widths defined by
@c To specify a prototype row, write the longest entry for each column
@c enclosed in braces after the @code{@@multitable} command.  For example:
@c 
行のプロトタイプを指定するため，それぞれの列で最も長い項目を，
@code{@@multitable}コマンドの後にカッコで囲んで書いてください．例えば，
以下のようにします．

@example
@@multitable @{some text for column one@} @{for column two@}
@end example

@noindent
@c The first column will then have the width of the typeset `some text for
@c column one', and the second column the width of `for column two'.
@c 
最初の列は，`some text for column one'で植字される幅を持ち，二列目は`for
column two'の幅を持ちます．

@c The prototype entries need not appear in the table itself.
@c 
プロトタイプ項目を表に書く必要はありません．

@c Although we used simple text in this example, the prototype entries can
@c contain Texinfo commands; markup commands such as @code{@@code} are
@c particularly likely to be useful.
@c 
この例で単純なテキストを使用しましたが，プロトタイプ項目にTexinfoコマン
ドを含めることが可能です．@code{@@code}のようなマークアップコマンドは，
特に役に立つ可能性が高いものです．

@end enumerate


@node Multitable Rows,  , Multitable Column Widths, Multi-column Tables
@c @subsection Multitable Rows
@subsection 複数列の表の行
@cindex Multitable rows
@cindex Rows, of a multitable

@findex item
@findex tab
@c After the @code{@@multitable} command defining the column widths (see
@c the previous section), you begin each row in the body of a multitable
@c with @code{@@item}, and separate the column entries with @code{@@tab}.
@c Line breaks are not special within the table body, and you may break
@c input lines in your source file as necessary.
@c 
列の幅を定義する@code{@@multitable}(前のセクション参照)の後で，
@code{@@item}で複数列の表の本体にそれぞれの行を開始し，列項目を
@code{@@tab}で分けます．改行は表の本体で特別扱いされず，必要な場所でソー
スファイルの入力行を改行してもかまいません．

@c Here is a complete example of a multi-column table (the text is from
@c @cite{The GNU Emacs Manual}, @pxref{Split Window,, Splitting Windows,
@c emacs, The GNU Emacs Manual}):
@c 
複数列の表の完全な例は以下のようになります(@cite{The GNU Emacs Manual}か
らのテキストで，@pxref{Split Window,, Splitting Windows, emacs, The GNU
Emacs Manual})．

@example
@@multitable @@columnfractions .15 .45 .4
@@item Key @@tab Command @@tab Description
@@item C-x 2
@@tab @@code@{split-window-vertically@}
@@tab Split the selected window into two windows,
with one above the other.
@@item C-x 3
@@tab @@code@{split-window-horizontally@}
@@tab Split the selected window into two windows
positioned side by side.
@@item C-Mouse-2
@@tab
@@tab In the mode line or scroll bar of a window,
split that window.
@@end multitable
@end example

@noindent
@c produces:
@c 
以下を生成します．

@multitable @columnfractions .15 .45 .4
@item Key @tab Command @tab Description
@item C-x 2
@tab @code{split-window-vertically}
@tab Split the selected window into two windows,
with one above the other.
@item C-x 3
@tab @code{split-window-horizontally}
@tab Split the selected window into two windows
positioned side by side.
@item C-Mouse-2
@tab
@tab In the mode line or scroll bar of a window,
split that window.
@end multitable


@node Indices, Insertions, Lists and Tables, Top
@comment node-name,  next,  previous,  up
@c @chapter Indices
@chapter 索引
@cindex Indices

@c Using Texinfo, you can generate indices without having to sort and
@c collate entries manually.  In an index, the entries are listed in
@c alphabetical order, together with information on how to find the
@c discussion of each entry.  In a printed manual, this information
@c consists of page numbers.  In an Info file, this information is a menu
@c entry leading to the first node referenced.@refill
@c 
Texinfoを使用すると，項目を手動で並べ替えしたりページ順に揃える必要も無
く索引を生成できます．索引では，項目はアルファベット順@footnote{訳注:あ
いうえお順には，現在対応していません．}に，それぞれの項目の記述を見つけ
る方法の情報と共にリストアップされます．印刷されたマニュアルでは，この情
報にはページ番号が含まれます．Infoファイルでは，この情報は参照された最初
のノードへ導くメニュー項目となります．@refill

@c Texinfo provides several predefined kinds of index: an index
@c for functions, an index for variables, an index for concepts, and so
@c on.  You can combine indices or use them for other than their
@c canonical purpose.  If you wish, you can define your own indices.@refill
@c 
Texinfoは，前もって定義されている索引の種類も提供しています．関数の索引，
変数の索引，概念の索引などです．索引を統合したり，典型的な目的以外のため
に使用することができます．好みで独自の索引も定義可能です．@refill

@menu
* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                 of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.
@end menu

@node Index Entries, Predefined Indices, Indices, Indices
@comment  node-name,  next,  previous,  up
@c @section Making Index Entries
@section 索引項目の作成
@cindex Index entries, making
@cindex Entries, making index

@c When you are making index entries, it is good practice to think of the
@c different ways people may look for something.  Different people
@c @emph{do not} think of the same words when they look something up.  A
@c helpful index will have items indexed under all the different words
@c that people may use.  For example, one reader may think it obvious that
@c the two-letter names for indices should be listed under ``Indices,
@c two-letter names'', since the word ``Index'' is the general concept.
@c But another reader may remember the specific concept of two-letter
@c names and search for the entry listed as ``Two letter names for
@c indices''.  A good index will have both entries and will help both
@c readers.@refill
@c 
索引項目を作成するとき，人々が何かを探す際に異なる方法で行なえるように考
えることは良いことです．何かを探すとき，人が変われば単語も@emph{変わりま
す}．役に立つ索引には，人々が使用する可能性のある，全ての異なる単語で索
引にされた項目があります．例えば，ある読者は単語``Index''は一般的な概念
なので，索引の二文字の名前は``Indices, two-letter names''にあって当然だ
と考えるかもしれません．しかし，もう一人の読者は，二文字の名前の特定の概
念を覚えていて，``Two letter names for indices''としてリストアップされて
いる項目を探すかもしれません．良い索引は，両方の項目を持ち，それは両方の
読者を助けるでしょう．@refill

@c Like typesetting, the construction of an index is a highly skilled,
@c professional art, the subtleties of which are not appreciated until you
@c need to do it yourself.@refill
@c 
植字のように，索引の構築は高度に熟練した専門的な芸術品で，自分で構築する
必要が無ければ正当に評価できない繊細なものです．@refill

@c @xref{Printing Indices & Menus}, for information about printing an index
@c at the end of a book or creating an index menu in an Info file.@refill
@c 
本の終りに索引を印刷する，またはInfoファイルで索引メニューを作成する方法
の情報は，@xref{Printing Indices & Menus}.@refill

@node Predefined Indices, Indexing Commands, Index Entries, Indices
@comment  node-name,  next,  previous,  up
@c @section Predefined Indices
@section 前もって定義されている索引

@c Texinfo provides six predefined indices:@refill
@c 
Texinfoは六つの前もって定義されている索引を提供しています．@refill

@itemize @bullet
@item
@c A @dfn{concept index} listing concepts that are discussed.@refill
@c 
@dfn{概念の索引(concept index)}は記述してある概念をリストアップします．
@refill

@item
@c A @dfn{function index} listing functions (such as entry points of
@c libraries).@refill
@c 
@dfn{関数の索引(function index)}は(ライブラリのエントリポイントのような) 
関数をリストアップします．@refill

@item
@c A @dfn{variables index} listing variables (such as global variables
@c of libraries).@refill
@c 
@dfn{変数の索引(variables index)}は(ライブラリのグローバル変数のような)
変数をリストアップします．@refill

@item
@c A @dfn{keystroke index} listing keyboard commands.@refill
@c 
@dfn{キーストロークの索引(keystroke index)}はキーボードコマンドをリスト
アップします．@refill

@item
@c A @dfn{program index} listing names of programs.@refill
@c 
@dfn{プログラムの索引(program index)}はプログラム名をリストアップします．
@refill

@item
@c A @dfn{data type index} listing data types (such as structures defined in
@c header files).@refill
@c 
@dfn{データ型の索引(data type index)}は(ヘッダファイルの構造体の定義のよ
うな)データ型をリストアップします．@refill
@end itemize

@noindent
@c Not every manual needs all of these, and most manuals use two or three
@c of them.  This manual has two indices: a
@c concept index and an @@-command index (that is actually the function
@c index but is called a command index in the chapter heading).  Two or
@c more indices can be combined into one using the @code{@@synindex} or
@c @code{@@syncodeindex} commands.  @xref{Combining Indices}.@refill
@c 
全てのマニュアルがこれらの全てを必要とするわけではなく，ほとんどのマニュ
アルはそのいくつかを使用します．このマニュアルには二つの索引があります．
概念の索引と，@@-コマンドの索引(実際には関数索引ですが，章見出しでコマン
ド索引と呼ばれています)です．二つ以上の索引を，@code{@@synindex}や
@code{@@syncodeindex}コマンドを使用して，一つに統合することが可能です．
@xref{Combining Indices}.@refill

@node Indexing Commands, Combining Indices, Predefined Indices, Indices
@comment  node-name,  next,  previous,  up
@c @section Defining the Entries of an Index
@section 索引の項目の定義
@cindex Defining indexing entries
@cindex Index entries
@cindex Entries for an index
@cindex Specifying index entries
@cindex Creating index entries

@c The data to make an index come from many individual indexing commands
@c scattered throughout the Texinfo source file.  Each command says to add
@c one entry to a particular index; after formatting, the index will give
@c the current page number or node name as the reference.@refill
@c 
索引を作成するデータは，Texinfoソースファイル中に散らばってる多くの個別
の索引コマンドからきます．それぞれのコマンドは，一つの項目を特定の索引に
加わるよう伝えます．書式化後，索引は現在のページ番号や参照するノード名を
与えます．@refill

@c An index entry consists of an indexing command at the beginning of a
@c line followed, on the rest of the line, by the entry.@refill
@c 
索引項目は，行の最初に索引コマンドを書き，残りの行に項目と続けることから
成り立ちます．@refill

@c For example, this section begins with the following five entries for
@c the concept index:@refill
@c 
例えば，このセクションは，概念索引のため五つの項目が続いています．@refill

@example
@@cindex Defining indexing entries
@@cindex Index entries
@@cindex Entries for an index
@@cindex Specifying index entries
@@cindex Creating index entries
@end example

@c Each predefined index has its own indexing command---@code{@@cindex}
@c for the concept index, @code{@@findex} for the function index, and so
@c on.@refill
@c 
それぞれの前もって定義された索引は，それ自身の索引コマンドがあります --- 
それは，概念索引に対する@code{@@cindex}，関数索引に対する@code{@@findex} 
などです．@refill

@cindex Writing index entries
@cindex Index entry writing
@c Concept index entries consist of text.  The best way to write an index
@c is to choose entries that are terse yet clear.  If you can do this,
@c the index often looks better if the entries are not capitalized, but
@c written just as they would appear in the middle of a sentence.
@c (Capitalize proper names and acronyms that always call for upper case
@c letters.)  This is the case convention we use in most GNU manuals'
@c indices.
@c 
概念の索引項目は，テキストから成り立ちます．索引を書く最も良い方法は，簡
潔且つ明確な項目を選択することです．こうすることが可能な場合，項目が大文
字化されておらず，文の内部に現れるものを書く方が，索引は見栄えが良くなり
ます．(常に大文字で書かれる固有名前や頭字語を大文字化してください．)これ
は，我々がほとんどのGNUマニュアルの索引で使用する慣習している事実です．

@c If you don't see how to make an entry terse yet clear, make it longer
@c and clear---not terse and confusing.  If many of the entries are several
@c words long, the index may look better if you use a different convention:
@c to capitalize the first word of each entry.  But do not capitalize a
@c case-sensitive name such as a C or Lisp function name or a shell
@c command; that would be a spelling error.
@c 
簡潔且つ明確な項目を作成する方法を知らない場合，より長い明確なものを作成
してください --- 簡潔で紛らわしいものを作成しないでください．項目の多く
が数単語の場合，異なる慣習(それぞれの項目の最初の単語を大文字にする)を使
用した方が索引は良く見えます．しかし，CやLispの関数名やシェルコマンドの
ような大文字小文字を識別する名前を大文字化してはいけません．それはスペル
エラーとなります．

@c Whichever case convention you use, please use it consistently!
@c 
どちらを慣習として使用した場合でも，それを慣習として使用してください！

@c Entries in indices other than the concept index are symbol names in
@c programming languages, or program names; these names are usually
@c case-sensitive, so use upper and lower case as required for them.
@c 
概念の索引以外の索引の項目は，プログラム言語やプログラム名のシンボル名で
す．これらの名前は通常大文字小文字を識別するので，それらが要求する大文字
または小文字を使用してください．

@c By default, entries for a concept index are printed in a small roman
@c font and entries for the other indices are printed in a small
@c @code{@@code} font.  You may change the way part of an entry is
@c printed with the usual Texinfo commands, such as @code{@@file} for
@c file names and @code{@@emph} for emphasis (@pxref{Marking
@c Text}).@refill
@c 
デフォルトで，概念の索引の項目は小さなローマンフォントで印刷され，他の索
引の項目は@code{@@code}フォントで印刷されます．項目の一部の印刷方法を，
ファイル名に対する@code{@@file}や，強調に対する@code{@@emph}のような
(@pxref{Marking Text})，通常のTexinfoコマンドで変更してもかまいません．
@cindex Index font types

@cindex Predefined indexing commands
@cindex Indexing commands, predefined
@c The six indexing commands for predefined indices are:
@c 
前もって定義されている六つの索引コマンドは以下のものがあります．

@table @code
@item @@cindex @var{concept}
@findex cindex
@c Make an entry in the concept index for @var{concept}.@refill
@c 
@var{concept}に対して概念の索引の項目を作成します．@refill

@item @@findex @var{function}
@findex findex
@c Make an entry in the function index for @var{function}.@refill
@c 
@var{function}に対して関数の索引の項目を作成します．@refill

@item @@vindex @var{variable}
@findex vindex
@c Make an entry in the variable index for @var{variable}.@refill
@c 
@var{variable}に対して変数の索引の項目を作成します．@refill

@item @@kindex @var{keystroke}
@findex kindex
@c Make an entry in the key index for @var{keystroke}.@refill
@c 
@var{keystroke}に対してキー索引の項目を作成します．@refill

@item @@pindex @var{program}
@findex pindex
@c Make an entry in the program index for @var{program}.@refill
@c 
@var{program}に対してプログラムの索引の項目を作成します．@refill

@item @@tindex @var{data type}
@findex tindex
@c Make an entry in the data type index for @var{data type}.@refill
@c 
@var{data type}に対してデータ型の索引の項目を作成します．@refill
@end table

@quotation
@c @strong{Caution:} Do not use a colon in an index entry.  In Info, a
@c colon separates the menu entry name from the node name, so a colon in
@c the entry itself confuses Info.  @xref{Menu Parts, , The Parts of a
@c Menu}, for more information about the structure of a menu entry.
@c 
@strong{注意:}索引項目にコロンを使用しないでください．Infoでは，コロンは
ノード名と項目名を分離するので，項目自身のコロンでInfoは混乱します．メ
ニュー項目の構造の詳細は，@xref{Menu Parts, , The Parts of a Menu}.
@end quotation

@c You are not actually required to use the predefined indices for their
@c canonical purposes.  For example, suppose you wish to index some C
@c preprocessor macros.  You could put them in the function index along
@c with actual functions, just by writing @code{@@findex} commands for
@c them; then, when you print the ``Function Index'' as an unnumbered
@c chapter, you could give it the title `Function and Macro Index' and
@c all will be consistent for the reader.  Or you could put the macros in
@c with the data types by writing @code{@@tindex} commands for them, and
@c give that index a suitable title so the reader will understand.
@c (@xref{Printing Indices & Menus}.)@refill
@c 
それらの標準的な目的のために，前もって定義されている索引を実際に使用する
ことを要求されているわけではありません．例えば，Cプリプロセッサマクロの
索引を望む場合を考えます．それらに対し@code{@@findex}コマンドを書くこと
で，それらを実際の関数に属する関数索引に書くことが可能です．そして，番号
付けされていない章として``関数の索引''を印刷するとき，タイトルに`関数と
マクロの索引'を与えることで読者に対しも全く矛盾しません．または，マクロ
を@code{@@tindex}コマンドでデータ型に書き，それに適した索引タイトルを与
えると読者は理解できるでしょう．(@xref{Printing Indices &
Menus}.)@refill

@node Combining Indices, New Indices, Indexing Commands, Indices
@comment node-name,  next,  previous,  up
@c @section Combining Indices
@section 索引の統合
@cindex Combining indices
@cindex Indices, combining them

@c Sometimes you will want to combine two disparate indices such as functions
@c and concepts, perhaps because you have few enough of one of them that
@c a separate index for them would look silly.@refill
@c 
索引の一つがおかしいくらい小さいなどの理由から，関数と概念のように二つに
分離されている索引を統合したいこともあります．

@c You could put functions into the concept index by writing
@c @code{@@cindex} commands for them instead of @code{@@findex} commands,
@c and produce a consistent manual by printing the concept index with the
@c title `Function and Concept Index' and not printing the `Function
@c Index' at all; but this is not a robust procedure.  It works only if
@c your document is never included as part of another
@c document that is designed to have a separate function index; if your
@c document were to be included with such a document, the functions from
@c your document and those from the other would not end up together.
@c Also, to make your function names appear in the right font in the
@c concept index, you would need to enclose every one of them between
@c the braces of @code{@@code}.@refill
@c 
@code{@@cindex}コマンドを@code{@@findex}コマンドの代わりに書くことで関数
を概念ど索引に書き，`関数の索引'と印刷するのではなく`関数と概念の索引' 
というタイトルで概念索引を印刷することで，一貫したマニュアルを生成するこ
とは可能でしょう．しかし，これは強力な手続きではありません．それはドキュ
メントが，分離されている関数の索引を持つように設計されていない他のドキュ
メントに挿入される場合のみ動作します．そのようなドキュメントにドキュメン
トを挿入した場合，ドキュメントの関数と他から持って来たものは一緒になりま
せん．また，関数名は概念の索引の右側に表示するため，@code{@@code}のカッ
コの間にそれらの一つを個別に囲む必要もあります．@refill

@menu
* syncodeindex::                How to merge two indices, using @code{@@code}
                                 font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                 default font of the merged-to index.
@end menu

@node syncodeindex
@subsection @code{@@syncodeindex}
@findex syncodeindex

@c When you want to combine functions and concepts into one index, you
@c should index the functions with @code{@@findex} and index the concepts
@c with @code{@@cindex}, and use the @code{@@syncodeindex} command to
@c redirect the function index entries into the concept index.@refill
@c 
関数と概念を一つの索引に統合したいとき，関数を@code{@@findex}で索引にし，
概念を@code{@@cindex}で索引にし，そして関数の索引の項目を概念索引にリダ
イレクトするため@code{@@syncodeindex}コマンドを使用すべきです．
@findex syncodeindex

@c The @code{@@syncodeindex} command takes two arguments; they are the name
@c of the index to redirect, and the name of the index to redirect it to.
@c The template looks like this:@refill
@c 
@code{@@syncodeindex}コマンドは二つの引数をとります．それらはリダイレク
ト元の索引名と，リダイレクト先の索引名です．テンプレートは以下のようにな
ります．@refill

@example
@@syncodeindex @var{from} @var{to}
@end example

@cindex Predefined names for indices
@cindex Two letter names for indices
@cindex Indices, two letter names
@cindex Names for indices
@c For this purpose, the indices are given two-letter names:@refill
@c 
この目的のため，索引には二文字の名前が与えられています．@refill

@table @samp
@item cp
@c concept index
@c 
概念の索引
@item fn
@c function index
@c 
関数の索引
@item vr
@c variable index
@c 
変数の索引
@item ky
@c key index
@c 
キーの索引
@item pg
@c program index
@c 
プログラムの索引
@item tp
@c data type index
@c 
データ型の索引
@end table

@c Write an @code{@@syncodeindex} command before or shortly after the
@c end-of-header line at the beginning of a Texinfo file.  For example,
@c to merge a function index with a concept index, write the
@c following:@refill
@c 
@code{@@syncodeindex}コマンドを，Texinfoファイルの最初にend-of-header行
の前または直後に書いてください．例えば，関数の索引を概念の索引に統合する
ため以下のように書いてください．@refill

@example
@@syncodeindex fn cp
@end example

@noindent
@c This will cause all entries designated for the function index to merge
@c in with the concept index instead.@refill
@c 
これで，関数の索引にとして指定されている全ての項目は，代わりに概念索引に
統合されます．@refill

@c To merge both a variables index and a function index into a concept
@c index, write the following:@refill
@c 
変数の索引と関数の索引の両方を概念の索引に統合するため以下のように書きま
す．@refill

@example
@group
@@syncodeindex vr cp
@@syncodeindex fn cp
@end group
@end example

@cindex Fonts for indices
@c The @code{@@syncodeindex} command puts all the entries from the `from'
@c index (the redirected index) into the @code{@@code} font, overriding
@c whatever default font is used by the index to which the entries are
@c now directed.  This way, if you direct function names from a function
@c index into a concept index, all the function names are printed in the
@c @code{@@code} font as you would expect.@refill
@c 
@code{@@syncodeindex}コマンドは`from'索引(リダイレクトされる索引)からの
全ての項目を@code{@@code}フォントにし，それは，項目がリダイレクト先の索
引で使用してデフォルトフォントが何であろうと優先します．このように，関数
名を関数索引から概念索引にリダイレクトする場合，全ての関数名は期待したよ
うに@code{@@code}フォントで印刷されます．@refill

@node synindex,  , syncodeindex, Combining Indices
@subsection @code{@@synindex}
@findex synindex

@c The @code{@@synindex} command is nearly the same as the
@c @code{@@syncodeindex} command, except that it does not put the
@c `from' index  entries into the @code{@@code} font; rather it puts
@c them in the roman font.  Thus, you use @code{@@synindex} when you
@c merge a concept index into a function index.@refill
@c 
`from'索引項目を@code{@@code}フォントに置き換えない以外，
@code{@@synindex}コマンドは@code{@@syncodeindex}コマンドとほとんど同じで
す．その代わりにローマンフォントに置き換えます．このため，概念の索引を関
数の索引に統合するとき@code{@@synindex}を使用します．

@c @xref{Printing Indices & Menus}, for information about printing an index
@c at the end of a book or creating an index menu in an Info file.@refill
@c 
本の終りに索引を印刷したり，Infoファイルに索引メニューを作成する詳細は，
@xref{Printing Indices & Menus}.@refill

@node New Indices,  , Combining Indices, Indices
@c @section Defining New Indices
@section 新しい索引の定義
@cindex Defining new indices
@cindex Indices, defining new
@cindex New index defining
@findex defindex
@findex defcodeindex

@c In addition to the predefined indices, you may use the
@c @code{@@defindex} and @code{@@defcodeindex} commands to define new
@c indices.  These commands create new indexing @@-commands with which
@c you mark index entries.  The @code{@@defindex }command is used like
@c this:@refill
@c 
前もって定義されている索引に加えて，@code{@@defindex}と
@code{@@defcodeindex}コマンドを，新しい索引を定義するために使用してもか
まいません．これらのコマンドは，索引項目の印に使用する新しい索引を作成す
る@@-コマンドを作成します．@code{@@defindex}コマンドは以下のように使用し
ます．@refill

@example
@@defindex @var{name}
@end example

@c The name of an index should be a two letter word, such as @samp{au}.
@c For example:@refill
@c 
索引の名前は@samp{au}のような二文字の単語にするべきです．例えば，以下のよ
うにします．@refill

@example
@@defindex au
@end example

@c This defines a new index, called the @samp{au} index.  At the same
@c time, it creates a new indexing command, @code{@@auindex}, that you
@c can use to make index entries.  Use the new indexing command just as
@c you would use a predefined indexing command.@refill
@c 
これは@samp{au}索引と呼ばれる新しい索引を定義します．同時に，新しい索引
作成コマンド@code{@@auindex}を作成し，索引項目の印付けに使用することが可
能になります．新しい索引コマンドを，前もって定義されている索引コマンドと
全く同じように使用してください．@refill

@c For example, here is a section heading followed by a concept index
@c entry and two @samp{au} index entries.@refill
@c 
例えば，セクション見出しに概念索引項目と二つの@samp{au}索引項目が続いた
例は以下のようになります．@refill

@example
@@section Cognitive Semantics
@@cindex kinesthetic image schemas
@@auindex Johnson, Mark
@@auindex Lakoff, George
@end example

@noindent
@c (Evidently, @samp{au} serves here as an abbreviation for ``author''.)
@c Texinfo constructs the new indexing command by concatenating the name
@c of the index with @samp{index}; thus, defining an @samp{au} index
@c leads to the automatic creation of an @code{@@auindex} command.@refill
@c 
(明らかに，@samp{au}はここで``著者''の省略として提供されています．)
Texinfoは@samp{index}を使用した索引の名前を連結して，新しい索引コマンド
を構成します．このため，@samp{au}索引の定義は自動的に@code{@@auindex}コ
マンドの作成を行います．@refill

@c Use the @code{@@printindex} command to print the index, as you do with
@c the predefined indices.  For example:@refill
@c 
前もって定義されている索引で使用したように，@code{@@printindex}コマンド
を索引を印刷するために使用してください．例えば以下のようにします．
@refill

@example
@group
@@node Author Index, Subject Index, , Top
@@unnumbered Author Index

@@printindex au
@end group
@end example

@c The @code{@@defcodeindex} is like the @code{@@defindex} command, except
@c that, in the printed output, it prints entries in an @code{@@code} font
@c instead of a roman font.  Thus, it parallels the @code{@@findex} command
@c rather than the @code{@@cindex} command.@refill
@c 
印刷物でローマンフォントの代わりに@code{@@code}フォントで項目を印刷する
以外，@code{@@defcodeindex}は@code{@@defindex}コマンドに似ています．この
ように，それは@code{@@cindex}コマンドより@code{@@findex}コマンドに似てい
ます．@refill

@c You should define new indices within or right after the end-of-header
@c line of a Texinfo file, before any @code{@@synindex} or
@c @code{@@syncodeindex} commands (@pxref{Texinfo File Header}).
@c 
新しい索引をTexinfoファイルのend-of-headerの内部か直後に，あらゆる
@code{@@synindex}や@code{@@syncodeindex}コマンド(@pxref{Texinfo File
Header})の前で使用すべきです．


@node Insertions
@c @chapter Special Insertions
@chapter 特別なものの挿入
@cindex Inserting special characters and symbols
@cindex Special insertions

@c Texinfo provides several commands for inserting characters that have
@c special meaning in Texinfo, such as braces, and for other graphic
@c elements that do not correspond to simple characters you can type.
@c 
Texinfoは，カッコのようなTexinfoで特別な意味を持つ文字を挿入するためと，
入力可能な単純な文字に対応しない他の画像要素に対するコマンドもいくつかあ
ります．

@iftex
@c These are:
@c 
以下がそうです．

@itemize @bullet
@c @item Braces and @samp{@@}.
@c @item Whitespace within and around a sentence.
@c @item Accents.
@c @item Dots and bullets.
@c @item The @TeX{} logo and the copyright symbol.
@c @item The pounds currency symbol.
@c @item The minus sign.
@c @item Mathematical expressions.
@c @item Glyphs for evaluation, macros, errors, etc.
@c @item Footnotes.
@c @item Images.
@c 
@item カッコと，@samp{@@}．
@item 文の中と周りの空白．
@item アクセント．
@item 点と黒点．
@item @TeX{}ロゴと著作権シンボル．
@item ポンド通貨シンボル．
@item 負記号．
@item 数式．
@item 評価，マクロ，エラー等に対するglyph．
@item 脚注．
@item 画像．
@end itemize
@end iftex

@menu
* Braces Atsigns::              How to insert braces, @samp{@@}.
* Inserting Space::             How to insert the right amount of space
                                 within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the @TeX{} logo
                                 and the copyright symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                 expansion of macros, errors, etc.
* Footnotes::                   How to include footnotes.
* Images::                      How to include graphics.
@end menu


@node Braces Atsigns, Inserting Space, Insertions, Insertions
@c @section Inserting @@ and Braces
@section @@とカッコの挿入
@cindex Inserting @@, braces
@cindex Braces, inserting
@cindex Special characters, commands to insert
@cindex Commands to insert special characters

@c @samp{@@} and curly braces are special characters in Texinfo.  To insert
@c these characters so they appear in text, you must put an @samp{@@} in
@c front of these characters to prevent Texinfo from misinterpreting
@c them.
@c 
@samp{@@}と弓カッコはTexinfoで特別な文字です．これらの文字がテキストに現
れるように挿入するため，Texinfoが誤解することを避けるため，@samp{@@}をこ
れらの文字の前に書く必要があります．

@c Do not put braces after any of these commands; they are not
@c necessary.
@c 
これらのコマンドの後にカッコを書かないでください．それらは不要です．

@menu
* Inserting An Atsign::         How to insert @samp{@@}.
* Inserting Braces::            How to insert @samp{@{} and @samp{@}}.
@end menu

@node Inserting An Atsign, Inserting Braces, Braces Atsigns, Braces Atsigns
@c @subsection Inserting @samp{@@} with @@@@
@subsection @samp{@@}を@@@@で挿入する
@findex @@ @r{(literal @samp{@@})}

@c @code{@@@@} stands for a single @samp{@@} in either printed or Info
@c output.
@c 
@code{@@@@}は，印刷物やInfoで単一の@samp{@@}を意味します．

@c Do not put braces after an @code{@@@@} command.
@c 
@code{@@@@}コマンドの後にカッコを書かないでください．


@node Inserting Braces
@c @subsection Inserting @samp{@{} and @samp{@}}with @@@{ and @@@}
@subsection @samp{@{}と@samp{@}}を@@@{と@@@}で挿入する
@findex @{ @r{(literal @samp{@{})}
@findex @} @r{(literal @samp{@}})}

@c @code{@@@{} stands for a single @samp{@{} in either printed or Info
@c output.
@c 
@code{@@@{}は印刷物やInfoで単一の@samp{@{}を意味します．

@c @code{@@@}} stands for a single @samp{@}} in either printed or Info
@c output.
@c 
@code{@@@}}は印刷物やInfoで単一の@samp{@{}を意味します．

@c Do not put braces after either an @code{@@@{} or an @code{@@@}}
@c command.
@c 
@code{@@@{}や@code{@@@}}コマンドの後にカッコを書かないでください．


@node Inserting Space
@c @section Inserting Space
@section 空白の挿入

@cindex Inserting space
@cindex Spacing, inserting
@c The following sections describe commands that control spacing of various
@c kinds within and after sentences.
@c 
以下のセクションでは，文の中や後の様々な種類の空白を制御するコマンドを記
述します．

@menu
* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.
@end menu


@node Not Ending a Sentence
@c @subsection Not Ending a Sentence
@subsection 文を終了しない

@cindex Not ending a sentence
@cindex Sentence non-ending punctuation
@cindex Periods, inserting
@c Depending on whether a period or exclamation point or question mark is
@c inside or at the end of a sentence, less or more space is inserted after
@c a period in a typeset manual.  Since it is not always possible
@c to determine when a period ends a sentence and when it is used
@c in an abbreviation, special commands are needed in some circumstances.
@c Usually, Texinfo can guess how to handle periods, so you do not need to
@c use the special commands; you just enter a period as you would if you
@c were using a typewriter, which means you put two spaces after the
@c period, question mark, or exclamation mark that ends a sentence.
@c 
ピリオドや，感嘆符や疑問符が文の中か終りにあるかに依存して，植字されたピ
リオドの後に，少しまたは多くの空白が挿入されます．ピリオドが文を終るとき
と省略で使用されるときとを常に決定できるわけではないので，特別なコマンド
が必要な状況もあります．通常，Texinfoはピリオドの扱い方を推測できるので，
特別なコマンドは必要ありません．タイプライターを使用するときのようにピリ
オドを入力し，それは二つの空白をピリオド，疑問符，または感嘆符の後に文の
終りとして書くことを意味しています．

@findex <colon> @r{(suppress widening)}
@c Use the @code{@@:}@: command after a period, question mark,
@c exclamation mark, or colon that should not be followed by extra space.
@c For example, use @code{@@:}@: after periods that end abbreviations
@c which are not at the ends of sentences.
@c 
余分な空白を続けるべきではないピリオド，疑問符，感嘆符，またはコロンの後
に@code{@@:}@:コマンドを使用してください．例えば，文の終りではない省略の
終りのピリオドの後に@code{@@:}@:を使用してください．

@c For example,
@c 
例えば，以下のようにします．

@example
The s.o.p.@@: has three parts @dots{}
The s.o.p. has three parts @dots{}
@end example

@noindent
@ifinfo
@c produces
@c 
以下を生成します．
@end ifinfo
@iftex
@c produces the following.  If you look carefully at this printed output,
@c you will see a little more whitespace after @samp{s.o.p.} in the second
@c line.@refill
@c 
以下を生成します．この印刷物を注意深く見ると，二行目の@samp{s.o.p.}の後の
空白がより小さいことが分かります．@refill
@end iftex

@quotation
The s.o.p.@: has three parts @dots{}@*
The s.o.p. has three parts @dots{}
@end quotation

@noindent
@c (Incidentally, @samp{s.o.p.} is an abbreviation for ``Standard Operating
@c Procedure''.)
@c 
(ついでながら，@samp{s.o.p.}は``Standard Operating Procedure''の略を意味
します．)

@c @code{@@:} has no effect on the Info output.  Do not put braces after
@c @code{@@:}.
@c 
@code{@@:}はInfo出力で効果はありません．@code{@@:}の後にカッコを置かない
でください．


@node Ending a Sentence, Multiple Spaces, Not Ending a Sentence, Inserting Space
@c @subsection Ending a Sentence
@subsection 文を終える

@cindex Ending a Sentence
@cindex Sentence ending punctuation

@findex .  @r{(end of sentence)}
@findex ! @r{(end of sentence)}
@findex ? @r{(end of sentence)}
@c Use @code{@@.}@: instead of a period, @code{@@!}@: instead of an
@c exclamation point, and @code{@@?}@: instead of a question mark at the end
@c of a sentence that ends with a single capital letter.  Otherwise, @TeX{}
@c will think the letter is an abbreviation and will not insert the correct
@c end-of-sentence spacing.  Here is an example:
@c 
単一の大文字で終る文の終りのピリオドの代わりに@code{@@.}@:，感嘆符の代わ
りに@code{@@!}@:，そして疑問符の代わりに@code{@@?}@:を使用してください．
そうしない場合，@TeX{}は文字を省略だと考え，正しい文の終りの空白を挿入し
ません．例は以下のようになります．

@example
Give it to M.I.B. and to M.E.W@@.  Also, give it to R.J.C@@.
Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
@end example

@noindent
@ifinfo
@c produces
@c 
以下を生成します．
@end ifinfo
@iftex
@c produces the following.  If you look carefully at this printed output,
@c you will see a little more whitespace after the @samp{W} in the first
@c line.
@c 
以下を生成します．注意深くこの印刷物を見ると，最初の行の@samp{W}の後の空
白がわずかに大きいことが分かります．
@end iftex

@quotation
Give it to M.I.B. and to M.E.W@.  Also, give it to R.J.C@.@*
Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
@end quotation

@c In the Info file output, @code{@@.}@: is equivalent to a simple
@c @samp{.}; likewise for @code{@@!}@: and @code{@@?}@:.
@c 
Infoファイル出力では，@code{@@.}@:は単なる@samp{.}と同じです．
@code{@@!}@:と@code{@@?}@:も同様です．

@c The meanings of @code{@@:} and @code{@@.}@: in Texinfo are designed to
@c work well with the Emacs sentence motion commands (@pxref{Sentences,,,
@c emacs, The GNU Emacs Manual}).
@c 
Texinfoの@code{@@:}と@code{@@.}@:のマージンは，Emacsの文の移動コマンド
(@pxref{Sentences,,, emacs, The GNU Emacs Manual})でうまく動作します．

@c Do not put braces after any of these commands.
@c 
これらのコマンドの後にカッコを書かないでください．


@node Multiple Spaces, dmn, Ending a Sentence, Inserting Space
@c @subsection Multiple Spaces
@subsection 複数のスペース

@cindex Multiple spaces
@cindex Whitespace, inserting
@cindex Space, inserting horizontal
@findex (space)
@findex (tab)
@findex (newline)

@c Ordinarily, @TeX{} collapses multiple whitespace characters (space, tab,
@c and newline) into a single space.  Info output, on the other hand,
@c preserves whitespace as you type it, except for changing a newline into
@c a space; this is why it is important to put two spaces at the end of
@c sentences in Texinfo documents.
@c 
通常@TeX{}は，複数の空白文字(スペース，タブと，改行)を単一のスペースに縮
めます．一方Info出力では，改行をスペースにする以外，入力した通りの空白を
維持します．これは，Texinfoドキュメントの文の終りの二つのスペースを置く
ことが重要だという理由のためです．

@c Occasionally, you may want to actually insert several consecutive
@c spaces, either for purposes of example (what your program does with
@c multiple spaces as input), or merely for purposes of appearance in
@c headings or lists.  Texinfo supports three commands:
@c @code{@@@kbd{SPACE}}, @code{@@@kbd{TAB}}, and @code{@@@kbd{NL}}, all of
@c which insert a single space into the output.  (Here,
@c @code{@@@kbd{SPACE}} represents an @samp{@@} character followed by a
@c space, i.e., @samp{@@ }, and @kbd{TAB} and @kbd{NL} represent the tab
@c character and end-of-line, i.e., when @samp{@@} is the last character on
@c a line.)
@c 
例を目的としたり(プログラムが入力として複数の空白を扱うこと)，見出しやリ
ストの単純な見栄えのため，複数の連続した空白を実際に挿入したいこともあり
ます．Texinfoは三つのコマンドをサポートします．@code{@@@kbd{SPACE}}，
@code{@@@kbd{TAB}}，そして@code{@@@kbd{NL}}で，それらは全て出力に単一の
スペースを挿入します．(ここでは，@code{@@@kbd{SPACE}}は空白に続く
@samp{@@}文字，すなわち@samp{@@ }を現し，@kbd{TAB}と@kbd{NL}はタブ文字と
文の終り，すなわち，@samp{@@}が行の最後の文字のときを現します．)

@c For example,
@c 
例えば，以下のようにします．
@example
Spacey@@ @@ @@ @@
example.
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
Spacey@ @ @ @
example.
@end example

@c Other possible uses of @code{@@@kbd{SPACE}} have been subsumed by
@c @code{@@multitable} (@pxref{Multi-column Tables}).
@c 
可能性のあるもう一つの@code{@@@kbd{SPACE}}の利用法は，
@code{@@multitable}(@pxref{Multi-column Tables})に包括されました．

@c Do not follow any of these commands with braces.
@c 
これらのコマンドにカッコを続けないでください．

@c To produce a non-breakable space, see @ref{w, non-breakable space}.
@c 
改行されないスペースを生成するために，@ref{w, non-breakable space}を参照
してください．


@node dmn
@c @subsection @code{@@dmn}@{@var{dimension}@}: Format a Dimension
@subsection @code{@@dmn}@{@var{dimension}@}: 寸法単位の書式化
@cindex Thin space between number, dimension
@cindex Dimension formatting
@cindex Format a dimension
@findex dmn

@c At times, you may want to write @samp{12@dmn{pt}} or
@c @samp{8.5@dmn{in}} with little or no space between the number and the
@c abbreviation for the dimension.  You can use the @code{@@dmn} command
@c to do this.  On seeing the command, @TeX{} inserts just enough space
@c for proper typesetting; the Info formatting commands insert no space
@c at all, since the Info file does not require it.
@c 
寸法単位に対し，数字と省略の間に小さな空白または空白を全く置かないで，
@samp{12@dmn{pt}}や@samp{8.5@dmn{in}}を書きたいときもあります．こうする
ため，@code{@@dmn}コマンドを使用することが可能です．このコマンドの見ため
は，@TeX{}は適切な植字のためちょうどぴったりの空白を挿入します．Infoファ
イルでは空白が要求されないので，Info書式化コマンドでは空白を全く挿入しま
せん．

@c To use the @code{@@dmn} command, write the number and then follow it
@c immediately, with no intervening space, by @code{@@dmn}, and then by
@c the dimension within braces.  For example,
@c 
@code{@@dmn}コマンドを使用するため，数字を書き，間に空白を置かずそれに
@code{@@dmn}続けてカッコ内に寸法単位を続けてください．例えば以下のように
します．

@example
A4 paper is 8.27@@dmn@{in@} wide.
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
A4 paper is 8.27@dmn{in} wide.
@end quotation

@c Not everyone uses this style.  Some people prefer @w{@samp{8.27 in.@@:}}
@c or @w{@samp{8.27 inches}} to @samp{8.27@@dmn@{in@}} in the Texinfo file.
@c In these cases, however, the formatters may insert a line break between
@c the number and the dimension, so use @code{@@w} (@pxref{w}).  Also, if
@c you write a period after an abbreviation within a sentence, you should
@c write @samp{@@:} after the period to prevent @TeX{} from inserting extra
@c whitespace, as shown here.  @xref{Not Ending a Sentence}.
@c 
全ての人がこの形式を使用するわけではありません．Texinfoファイルでは
@samp{8.27@@dmn@{in@}}より@w{@samp{8.27 in.@@:}}や@w{@samp{8.27 inches}} 
を好む人もいます．しかしこれらの場合，フォーマッタは数字と寸法単位の間に
改行を挿入するかもしれないので，@code{@@w}(@pxref{w})を使用してください．
また，文中の省略の後にピリオドを書く場合，@TeX{}が余分の空白を挿入するの
を避けるため，ここで見たように，ピリオドの後に@samp{@@:}を書いてください．
@xref{Not Ending a Sentence}.


@node Inserting Accents
@c @section Inserting Accents
@section アクセントの挿入

@cindex Inserting accents
@cindex Accents, inserting
@cindex Floating accents, inserting

@c Here is a table with the commands Texinfo provides for inserting
@c floating accents.  The commands with non-alphabetic names do not take
@c braces around their argument (which is taken to be the next character).
@c (Exception: @code{@@,} @emph{does} take braces around its argument.)
@c This is so as to make the source as convenient to type and read as
@c possible, since accented characters are very common in some languages.
@c 
フローティングアクセントを挿入するためにTexinfoが提供しているコマンドの
表は以下のようになります．アルファベットでない名前のコマンドは引数の周り
にカッコをとりません(それは次の文字をとります)．(例外:@code{@@,}は引数の
周りにカッコを@emph{とります}．)これは，言語によってはアクセントがある文
字が普通のものもあるので，ソースを入力や査読で可能な限り便利にするためで
す．

@findex " @r{(umlaut accent)}
@cindex Umlaut accent
@findex ' @r{(umlaut accent)}
@cindex Acute accent
@findex = @r{(macron accent)}
@cindex Macron accent
@findex ^ @r{(circumflex accent)}
@cindex Circumflex accent
@findex ` @r{(grave accent)}
@cindex Grave accent
@findex ~ @r{(tilde accent)}
@cindex Tilde accent
@findex , @r{(cedilla accent)}
@cindex Cedilla accent
@findex dotaccent
@cindex Dot accent
@findex H @r{(Hungarian umlaut accent)}
@cindex Hungarian umlaut accent
@findex ringaccent
@cindex Ring accent
@findex tieaccent
@cindex Tie-after accent
@findex u @r{(breve accent)}
@cindex Breve accent
@findex ubaraccent
@cindex Underbar accent
@findex udotaccent
@cindex Underdot accent
@findex v @r{(check accent)}
@cindex Check accent
@multitable {@@questiondown@{@}} {Output} {macron/overbar accent}
@c @item Command               @tab Output         @tab What
@c @item @t{@@"o}              @tab @"o            @tab umlaut accent
@c @item @t{@@'o}              @tab @'o            @tab acute accent
@c @item @t{@@,@{c@}}          @tab @,{c}          @tab cedilla accent
@c @item @t{@@=o}              @tab @=o            @tab macron/overbar accent
@c @item @t{@@^o}              @tab @^o            @tab circumflex accent
@c @item @t{@@`o}              @tab @`o            @tab grave accent
@c @item @t{@@~o}              @tab @~o            @tab tilde accent
@c @item @t{@@dotaccent@{o@}}  @tab @dotaccent{o}  @tab overdot accent
@c @item @t{@@H@{o@}}          @tab @H{o}          @tab long Hungarian umlaut
@c @item @t{@@ringaccent@{o@}} @tab @ringaccent{o} @tab ring accent
@c @item @t{@@tieaccent@{oo@}} @tab @tieaccent{oo} @tab tie-after accent
@c @item @t{@@u@{o@}}          @tab @u{o}          @tab breve accent
@c @item @t{@@ubaraccent@{o@}} @tab @ubaraccent{o} @tab underbar accent
@c @item @t{@@udotaccent@{o@}} @tab @udotaccent{o} @tab underdot accent
@c @item @t{@@v@{o@}}          @tab @v{o}          @tab hacek or check accent
@c 
@item コマンド              @tab 出力           @tab 意味するもの
@item @t{@@"o}              @tab @"o            @tab ウムラートアクセント
@item @t{@@'o}              @tab @'o            @tab アキュートアクセント
@item @t{@@,@{c@}}          @tab @,{c}          @tab セディラアクセント
@item @t{@@=o}              @tab @=o            @tab マクロン/オーバーバーアクセント
@item @t{@@^o}              @tab @^o            @tab サーカムフレックスアクセント
@item @t{@@`o}              @tab @`o            @tab グレーブアクセント
@item @t{@@~o}              @tab @~o            @tab チルダアクセント
@item @t{@@dotaccent@{o@}}  @tab @dotaccent{o}  @tab オーバードットアクセント
@item @t{@@H@{o@}}          @tab @H{o}          @tab ロングハンガリアンアクセント
@item @t{@@ringaccent@{o@}} @tab @ringaccent{o} @tab リングアクセント
@item @t{@@tieaccent@{oo@}} @tab @tieaccent{oo} @tab ティーアフターアクセント
@item @t{@@u@{o@}}          @tab @u{o}          @tab ブレーブアクセント
@item @t{@@ubaraccent@{o@}} @tab @ubaraccent{o} @tab アンダーバーアクセント
@item @t{@@udotaccent@{o@}} @tab @udotaccent{o} @tab アンダードットアクセント
@item @t{@@v@{o@}}          @tab @v{o}          @tab ハケックやチェックアクセント
@end multitable

@c This table lists the Texinfo commands for inserting other characters
@c commonly used in languages other than English.
@c 
以下の表では，英語以外の言語で共通に使用される他の文字を挿入するTexinfo
コマンドをリストアップします．

@findex questiondown
@cindex @questiondown{}
@findex exclamdown
@cindex @exclamdown{}
@findex aa
@cindex @aa{}
@findex AA
@cindex @AA{}
@findex ae
@cindex @ae{}
@findex AE
@cindex @AE{}
@findex dotless
@cindex @dotless{i}
@cindex @dotless{j}
@cindex Dotless i, j
@findex l
@cindex @l{}
@findex L
@cindex @L{}
@findex o
@cindex @o{}
@findex O
@cindex @O{}
@findex oe
@cindex @oe{}
@findex OE
@cindex @OE{}
@findex ss
@cindex @ss{}
@cindex Es-zet
@cindex Sharp S
@cindex German S
@c @multitable {x@@questiondown@{@}} {oe,OE} {es-zet or sharp S}
@c @item @t{@@exclamdown@{@}}   @tab @exclamdown{}   @tab upside-down !
@c @item @t{@@questiondown@{@}} @tab @questiondown{} @tab upside-down ?
@c @item @t{@@aa@{@},@@AA@{@}}  @tab @aa{},@AA{}     @tab a,A with circle
@c @item @t{@@ae@{@},@@AE@{@}}  @tab @ae{},@AE{}     @tab ae,AE ligatures
@c @item @t{@@dotless@{i@}}     @tab @dotless{i}     @tab dotless i
@c @item @t{@@dotless@{j@}}     @tab @dotless{j}     @tab dotless j
@c @item @t{@@l@{@},@@L@{@}}    @tab @l{},@L{}       @tab suppressed-L,l
@c @item @t{@@o@{@},@@O@{@}}    @tab @o{},@O{}       @tab O,o with slash
@c @item @t{@@oe@{@},@@OE@{@}}  @tab @oe{},@OE{}     @tab oe,OE ligatures
@c @item @t{@@ss@{@}}           @tab @ss{}           @tab es-zet or sharp S
@c 
@multitable {x@@questiondown@{@} } {oe,OE} {es-zet or sharp S エスツェットや尖ったS}
@item @t{@@exclamdown@{@}}   @tab @exclamdown{}   @tab さかさまの !
@item @t{@@questiondown@{@}} @tab @questiondown{} @tab さかさまの ?
@item @t{@@aa@{@},@@AA@{@}}  @tab @aa{},@AA{}     @tab 丸を持つ a，A
@item @t{@@ae@{@},@@AE@{@}}  @tab @ae{},@AE{}     @tab くっついた ae，AE
@item @t{@@dotless@{i@}}     @tab @dotless{i}     @tab ドットの無い i
@item @t{@@dotless@{j@}}     @tab @dotless{j}     @tab ドットの無い j
@item @t{@@l@{@},@@L@{@}}    @tab @l{},@L{}       @tab 押え付けられた L，l
@item @t{@@o@{@},@@O@{@}}    @tab @o{},@O{}       @tab スラッシュ付の O，o
@item @t{@@oe@{@},@@OE@{@}}  @tab @oe{},@OE{}     @tab くっついた oe，OE
@item @t{@@ss@{@}}           @tab @ss{}           @tab エスツェットや尖った S
@end multitable


@node Dots Bullets
@c @section Inserting Ellipsis and Bullets
@section 省略と黒点の挿入
@cindex Dots, inserting
@cindex Bullets, inserting
@cindex Ellipsis, inserting
@cindex Inserting ellipsis
@cindex Inserting dots
@cindex Special typesetting commands
@cindex Typesetting commands for dots, etc.

@c An @dfn{ellipsis} (a line of dots) is not typeset as a string of
@c periods, so a special command is used for ellipsis in Texinfo.  The
@c @code{@@bullet} command is special, too.  Each of these commands is
@c followed by a pair of braces, @samp{@{@}}, without any whitespace
@c between the name of the command and the braces.  (You need to use braces
@c with these commands because you can use them next to other text; without
@c the braces, the formatters would be confused.  @xref{Command Syntax, ,
@c @@-Command Syntax}, for further information.)@refill
@c 
@dfn{省略(ellipsis)}(ドットの行)はピリオドの列として植字されないので，特
別なコマンドがTexinfoの省略で使用されます．@code{@@bullet}コマンドも特別
です．それぞれのコマンドは，カッコの組@samp{@{@}}が続き，コマンド名とカッ
コの間には空白を用いません．(続けて他のテキストを使用できるので，これら
のコマンドにはカッコを使用する必要があります．カッコが無い場合，フォーマッ
タは混乱するでしょう．詳細は，@xref{Command Syntax, , @@-Command
Syntax}.)@refill

@menu
* dots::                        How to insert dots @dots{}
* bullet::                      How to insert a bullet.
@end menu


@node dots
@c @subsection @code{@@dots}@{@} (@dots{}) and @code{@@enddots}@{@} (@enddots{})
@subsection @code{@@dots}@{@} (@dots{})と@code{@@enddots}@{@} (@enddots{})
@findex dots
@findex enddots
@cindex Inserting dots
@cindex Dots, inserting

@c Use the @code{@@dots@{@}} command to generate an ellipsis, which is
@c three dots in a row, appropriately spaced, like this: `@dots{}'.  Do
@c not simply write three periods in the input file; that would work for
@c the Info file output, but would produce the wrong amount of space
@c between the periods in the printed manual.
@c 
連続した三つの点になり，適切な空白がある`@dots{}'のような省略を生成する
ため，@code{@@dots@{@}}コマンドを使用してください．入力ファイルに単純に
三つのピリオドを書かないでください．それはInfo出力では動作しますが，印刷
されたマニュアルではピリオドの間に間違った量の空白を生成します．

@c Similarly, the @code{@@enddots@{@}} command generates an
@c end-of-sentence ellipsis (four dots) @enddots{}
@c 
同様に，@code{@@enddots@{@}}コマンドは文の終りの省略(四つの点)を生成しま
す@enddots{}

@iftex
@c Here is an ellipsis: @dots{}
@c Here are three periods in a row: ...
@c 
これは省略です:@dots{}
これは続いている三つのピリオドです:...

@c In printed output, the three periods in a row are closer together than
@c the dots in the ellipsis.
@c 
印刷物での続いた三つのピリオドは，省略の点よりお互い近付いています．
@end iftex


@node bullet
@subsection @code{@@bullet}@{@} (@bullet{})
@findex bullet

@c Use the @code{@@bullet@{@}} command to generate a large round dot, or
@c the closest possible thing to one.  In Info, an asterisk is used.@refill
@c 
大きな黒点やそれに近いものを生成するために@code{@@bullet@{@}}を使用して
ください．Infoではアスタリスクが使用されます．@refill

@c Here is a bullet: @bullet{}
@c 
これは黒点です:@bullet{}

@c When you use @code{@@bullet} in @code{@@itemize}, you do not need to
@c type the braces, because @code{@@itemize} supplies them.
@c (@xref{itemize, , @code{@@itemize}}.)@refill
@c 
@code{@@itemize}で@code{@@bullet}を使用するときは，@code{@@itemize}が供
給するので，カッコを入力する必要はありません．(@xref{itemize, ,
@code{@@itemize}}.)@refill


@node TeX and copyright, pounds, Dots Bullets, Insertions
@c @section Inserting @TeX{} and the Copyright Symbol
@section @TeX{}と著作権シンボルの挿入

@c The logo `@TeX{}' is typeset in a special fashion and it needs an
@c @@-command.  The copyright symbol, `@copyright{}', is also special.
@c Each of these commands is followed by a pair of braces, @samp{@{@}},
@c without any whitespace between the name of the command and the
@c braces.@refill
@c 
ロゴ`@TeX{}'は特別な形での植字で，@@-コマンドが必要です．著作権シンボル
`@copyright{}'も特別です．それぞれのコマンドはカッコの組@samp{@{@}}が続
き，コマンド名とカッコの間に空白は使用しません．@refill

@menu
* tex::                         How to insert the @TeX{} logo.
* copyright symbol::            How to use @code{@@copyright@{@}}.
@end menu


@node tex
@subsection @code{@@TeX}@{@} (@TeX{})
@findex tex (command)

@c Use the @code{@@TeX@{@}} command to generate `@TeX{}'.  In a printed
@c manual, this is a special logo that is different from three ordinary
@c letters.  In Info, it just looks like @samp{TeX}.  The
@c @code{@@TeX@{@}} command is unique among Texinfo commands in that the
@c @samp{T} and the @samp{X} are in upper case.@refill
@c 
`@TeX{}'を生成するため@code{@@TeX@{@}}コマンドを使用してください．印刷さ
れたマニュアルでは，これは三つの通常の文字と異なる特別なロゴとなります．
Infoではそれは@samp{TeX}のように見えます．@code{@@TeX@{@}}コマンドは
@samp{T}と@samp{X}が大文字となっている，Texinfoコマンドの中ではユニーク
なものです．@refill


@node copyright symbol
@subsection @code{@@copyright@{@}} (@copyright{})
@findex copyright

@c Use the @code{@@copyright@{@}} command to generate `@copyright{}'.  In
@c a printed manual, this is a @samp{c} inside a circle, and in Info,
@c this is @samp{(C)}.
@c 
`@copyright{}'を生成するために@code{@@copyright@{@}}コマンドを使用してく
ださい．印刷されたマニュアルでは，これは丸の中の@samp{c}になり，Infoでは
これは@samp{(C)}になります．


@node pounds, minus, TeX and copyright, Insertions
@c @section @code{@@pounds}@{@} (@pounds{}): Pounds Sterling
@section @code{@@pounds}@{@} (@pounds{}): ポンド英貨
@findex pounds

@c Use the @code{@@pounds@{@}} command to generate `@pounds{}'.  In a
@c printed manual, this is the symbol for the currency pounds sterling.
@c In Info, it is a @samp{#}.  Other currency symbols are unfortunately not
@c available.
@c 
`@pounds{}'を生成するために@code{@@pounds@{@}}コマンドを使用してください．
印刷されたマニュアルでは，これは通貨ポンド銀貨のシンボルとなります．Info 
では@samp{#}になります．他の通貨シンボルは残念ながら利用不可能です．


@node minus, math, pounds, Insertions
@c @section @code{@@minus}@{@} (@minus{}): Inserting a Minus Sign
@section @code{@@minus}@{@} (@minus{}): 負の記号の挿入
@findex minus

@cindex em-dash
@cindex hyphen
@c Use the @code{@@minus@{@}} command to generate a minus sign.  In a
@c fixed-width font, this is a single hyphen, but in a proportional font,
@c the symbol is the customary length for a minus sign---a little longer
@c than a hyphen, shorter than an em-dash:
@c 
負記号を生成するために@code{@@minus@{@}}コマンドを使用してください．等幅
フォントで，これは単一のハイフンですが，プロポーショナルフォントではシン
ボルは負記号の慣習的な長さになります---ハイフンより少し長く，em-dashより
短くなります．

@display
@c @samp{@minus{}} is a minus sign generated with @samp{@@minus@{@}},
@c 
@samp{@minus{}}は@samp{@@minus@{@}}で生成された負記号で，

@c `-' is a hyphen generated with the character @samp{-},
@c 
`-'は文字@samp{-}で生成したハイフンで，

@c `---' is an em-dash for text.
@c 
`---'はテキストのem-dashです．
@end display

@noindent
@c In the fixed-width font used by Info, @code{@@minus@{@}} is the same
@c as a hyphen.
@c 
Infoで使用される等幅フォントでは，@code{@@minus@{@}}はハイフンと同じです．

@c You should not use @code{@@minus@{@}} inside @code{@@code} or
@c @code{@@example} because the width distinction is not made in the
@c fixed-width font they use.
@c 
幅の違いは，使用する等幅フォントで作成されないので，@code{@@code}や
@code{@@example}で@code{@@minus@{@}}を使用すべきではありません．

@c When you use @code{@@minus} to specify the mark beginning each entry in
@c an itemized list, you do not need to type the braces
@c (@pxref{itemize, , @code{@@itemize}}.)
@c 
項目分けされたリストのそれぞれの項目をはじめる印を指定するために
@code{@@minus}を使用するとき，カッコを入力する必要はありません
(@pxref{itemize, , @code{@@itemize}})．


@node math
@c @section @code{@@math}: Inserting Mathematical Expressions
@section @code{@@math}: 数式の挿入
@findex math
@cindex Mathematical expressions
@cindex Formulas, mathematical

@c You can write a short mathematical expression with the @code{@@math}
@c command.  Write the mathematical expression between braces, like this:
@c 
短い数式を@code{@@math}コマンドで書くことができます．カッコの間に以下の
ように数式を書いてください．

@example
@@math@{(a + b)(a + b) = a^2 + 2ab + b^2@}
@end example

@iftex
@noindent
@c This produces the following in @TeX{}:
@c 
これは@TeX{}では以下を生成します．

@display
@math{(a + b)(a + b) = a^2 + 2ab + b^2}
@end display

@noindent
@c and the following in Info:
@c 
Infoでは以下のようになります．
@end iftex
@ifinfo
@noindent
@c This produces the following in Info:
@c 
これはInfoでは以下を生成します．
@end ifinfo

@example
(a + b)(a + b) = a^2 + 2ab + b^2
@end example

@c Thus, the @code{@@math} command has no effect on the Info output;
@c @command{makeinfo} just reproduces the input, it does not try to
@c interpret the mathematics in any way.
@c 
このように，@code{@@math}コマンドはInfo出力で効果がありません．
@command{makeinfo}は入力をそのまま再生成し，数学的な解釈を全く行ないませ
ん．

@c @code{@@math} implies @code{@@tex}.  This not only makes it possible to
@c write superscripts and subscripts (as in the above example), but also
@c allows you to use any of the plain @TeX{} math control sequences.  It's
@c conventional to use @samp{\} instead of @samp{@@} for these commands.
@c As in:
@c 
@code{@@math}は@code{@@tex}を暗黙に指定します．これは(上記の例のように) 
上付文字と下付文字を書くことを可能にするだけでなく，あらゆるプレーンの
@TeX{}の数学的なコントロールシーケンスを使用することも可能にします．これ
らのコマンドに対し@samp{@@}の代わりに@samp{\}を使用するのは従来通りです．
以下のようにします．
@example
@@math@{\sin 2\pi \equiv \cos 3\pi@}
@end example

@iftex
@noindent
@c which looks like this in @TeX{}:
@c 
@TeX{}では以下のようにします．
@display
@math{\sin 2\pi \equiv \cos 3\pi}
@end display

@noindent and
@end iftex
@noindent
@c which looks like the input in Info and HTML:
@c 
InfoとHTMLでは以下のような入力になります．
@example
\sin 2\pi \equiv \cos 3\pi
@end example

@findex \ @r{(literal \ in @code{@@math})}
@c Since @samp{\} is an escape character inside @code{@@math}, you can use
@c @code{@@\} to get a literal backslash (@code{\\} will work in @TeX{},
@c but you'll get the literal @samp{\\} in Info).  @code{@@\} is not
@c defined outside of @code{@@math}, since a @samp{\} ordinarily produces a
@c literal @samp{\}.
@c 
@samp{\}は@code{@@math}内部のエスケープ文字なので，文字通りのバックスラッ
シュを得るために@code{@@\}を使用することが可能です(@code{\\}は@TeX{}では
動作しますが，Infoでは文字通り@samp{\\}になるでしょう)．@samp{\}は通常，
文字通り@samp{\}を生成するので，@code{@@\}は@code{@@math}の外部では定義
されていません．


@cindex Displayed equations
@cindex Equations, displayed
@c For displayed equations, you must at present use @TeX{} directly
@c (@pxref{Raw Formatter Commands}).  
@c 
等式を表示するために，現在は@TeX{}を直接使用する必要があります
(@pxref{Raw Formatter Commands})．


@node Glyphs
@c @section Glyphs for Examples
@section 例のためのglyph
@cindex Glyphs
@cindex Examples, glyphs for

@c In Texinfo, code is often illustrated in examples that are delimited
@c by @code{@@example} and @code{@@end example}, or by @code{@@lisp} and
@c @code{@@end lisp}.  In such examples, you can indicate the results of
@c evaluation or an expansion using @samp{@result{}} or
@c @samp{@expansion{}}.  Likewise, there are commands to insert glyphs
@c to indicate
@c printed output, error messages, equivalence of expressions, and the
@c location of point.@refill
@c 
Texinfoでは，コードは@code{@@example}と@code{@@end example}や
@code{@@lisp}と@code{@@end lisp}で区切られた例として表示されることがよく
あります．そのような例では，@samp{@result{}}や@samp{@expansion{}}を使用
して，評価の結果や展開を示すことが可能です．同様に，印刷物，エラーメッセー
ジ，等式，そしてポイントの位置を示すglyphを挿入するコマンドがあります．
@refill

@c The glyph-insertion commands do not need to be used within an example, but
@c most often they are.  Every  glyph-insertion command is followed by a pair of
@c left- and right-hand braces.@refill
@c 
glyph挿入コマンドは，例の内部で使用する必要はありませんが，ほとんどのも
のはそうなっています．全てのglyph挿入コマンドには左右のカッコの組が続き
ます．@refill

@menu
* Glyphs Summary::              
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.
@end menu


@node Glyphs Summary
@c @subsection Glyphs Summary
@subsection glyphの概要

@c Here are the different glyph commands:@refill
@c 
個別のglyphコマンドには以下のものがあります．@refill

@table @asis
@item @result{}
@c @code{@@result@{@}} points to the result of an expression.@refill
@c 
@code{@@result@{@}}は，式の結果を示します．@refill

@item @expansion{}
@c @code{@@expansion@{@}} shows the results of a macro expansion.@refill
@c 
@code{@@expansion@{@}}はマクロ展開の結果を表示します．@refill

@item @print{}
@c @code{@@print@{@}} indicates printed output.@refill
@c 
@code{@@print@{@}}は出力の表示を示します．@refill

@item @error{}
@c @code{@@error@{@}} indicates that the following text is an error
@c message.@refill
@c 
@code{@@error@{@}}は次のテキストがエラーメッセージだということを示します．
@refill

@item @equiv{}
@c @code{@@equiv@{@}} indicates the exact equivalence of two forms.@refill
@c 
@code{@@equiv@{@}}は，二つのフォームが正確に等しいことを示します．
@refill

@item @point{}
@c @code{@@point@{@}} shows the location of point.@refill
@c 
@code{@@point@{@}}はポイントの場所を表示します．@refill
@end table

@menu
* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::
@end menu


@node result
@c @subsection @code{@@result@{@}} (@result{}): Indicating Evaluation
@subsection @code{@@result@{@}} (@result{}): 評価結果を示す
@cindex Result of an expression
@cindex Indicating evaluation
@cindex Evaluation glyph
@cindex Value of an expression, indicating
@findex result

@c Use the @code{@@result@{@}} command to indicate the result of
@c evaluating an expression.@refill
@c 
式の評価の結果を示すため@code{@@result@{@}}を使用してください．@refill

@iftex
@c The @code{@@result@{@}} command is displayed as @samp{=>} in Info and
@c as @samp{@result{}} in the printed output.
@c 
@code{@@result@{@}}コマンドはInfoでは@samp{=>}として，印刷物では
@samp{@result{}}として表示されます．
@end iftex
@ifinfo
@c The @code{@@result@{@}} command is displayed as @samp{@result{}} in Info
@c and as a double stemmed arrow in the printed output.@refill
@c 
@code{@@result@{@}}コマンドはInfoでは@samp{@result{}}として，印刷物では
棒が二重の矢印として表示されます．@refill
@end ifinfo

@c Thus, the following,
@c 
このため，以下のようにします．

@lisp
(cdr '(1 2 3))
    @result{} (2 3)
@end lisp

@noindent
@c may be read as ``@code{(cdr '(1 2 3))} evaluates to @code{(2 3)}''.
@c 
``@code{(cdr '(1 2 3))}を評価すると@code{(2 3)になる}''と読めるでしょう．


@node expansion, Print Glyph, result, Glyphs
@c @subsection @code{@@expansion@{@}} (@expansion{}): Indicating an Expansion
@subsection @code{@@expansion@{@}} (@expansion{}): 展開を示す
@cindex Expansion, indicating it
@findex expansion

@c When an expression is a macro call, it expands into a new expression.
@c You can indicate the result of the expansion with the
@c @code{@@expansion@{@}} command.@refill
@c 
式がマクロ呼び出しのとき，新しい式に展開します．@code{@@expansion@{@}}コ
マンドで展開の結果を示すことができます．@refill

@iftex
@c The @code{@@expansion@{@}} command is displayed as @samp{==>} in Info and
@c as @samp{@expansion{}} in the printed output.
@c 
@code{@@expansion@{@}}コマンドは，Infoでは@samp{==>}として，印刷物では
@samp{@expansion{}}として表示されます．
@end iftex
@ifinfo
@c The @code{@@expansion@{@}} command is displayed as @samp{@expansion{}}
@c in Info and as a long arrow with a flat base in the printed output.@refill
@c 
@code{@@expansion@{@}}コマンドはInfoでは@samp{@expansion{}}として，印刷
物では平らな長い矢印として表示されます．@refill
@end ifinfo

@need 700
@c For example, the following
@c 
例えば，以下のようにします．

@example
@group
@@lisp
(third '(a b c))
    @@expansion@{@} (car (cdr (cdr '(a b c))))
    @@result@{@} c
@@end lisp
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@lisp
@group
(third '(a b c))
    @expansion{} (car (cdr (cdr '(a b c))))
    @result{} c
@end group
@end lisp

@noindent
@c which may be read as:
@c 
以下のように読めるでしょう．

@quotation
@c @code{(third '(a b c))} expands to @code{(car (cdr (cdr '(a b c))))};
@c the result of evaluating the expression is @code{c}.
@c 
@code{(third '(a b c))}は@code{(car (cdr (cdr '(a b c))))}の展開で，式の
評価結果は@code{c}です．
@end quotation

@noindent
@c Often, as in this case, an example looks better if the
@c @code{@@expansion@{@}} and @code{@@result@{@}} commands are indented
@c five spaces.@refill
@c 
この状況では，@code{@@expansion@{@}}と@code{@@result@{@}}コマンドが五個
の空白で字下げされている場合，例の見ためが良くなることもよくあります．
@refill


@node Print Glyph, Error Glyph, expansion, Glyphs
@c @subsection @code{@@print@{@}} (@print{}): Indicating Printed Output
@subsection @code{@@print@{@}} (@print{}): 出力を示す
@cindex Printed output, indicating it
@findex print

@c Sometimes an expression will print output during its execution.  You
@c can indicate the printed output with the @code{@@print@{@}} command.@refill
@c 
式が実行中の出力を表示するときもあります．@code{@@print@{@}}コマンドで印
刷物ということを示すことができます．@refill

@iftex
@c The @code{@@print@{@}} command is displayed as @samp{-|} in Info and
@c as @samp{@print{}} in the printed output.
@c 
@code{@@print@{@}}コマンドは，Infoでは@samp{-|}として，印刷物では
@samp{@print{}}として表示されます．
@end iftex
@ifinfo
@c The @code{@@print@{@}} command is displayed as @samp{@print{}} in Info
@c and similarly, as a horizontal dash butting against a vertical bar, in
@c the printed output.@refill
@c 
@code{@@print@{@}}コマンドはInfoでは@samp{@print{}}とそれに似たものとし
て，印刷物では，水平のダッシュが垂直のバーにぶつかったものとして表示され
ます．@refill
@end ifinfo

@c In the following example, the printed text is indicated with
@c @samp{@print{}}, and the value of the expression follows on the
@c last line.@refill
@c 
以下の例では，印刷されたテキストは@samp{@print{}}で示され，式の値は最後
の行に続いています．@refill

@lisp
@group
(progn (print 'foo) (print 'bar))
    @print{} foo
    @print{} bar
    @result{} bar
@end group
@end lisp

@noindent
@c In a Texinfo source file, this example is written as follows:
@c 
Texinfoソースファイルで，この例は以下のように書きます．

@lisp
@group
@@lisp
(progn (print 'foo) (print 'bar))
    @@print@{@} foo
    @@print@{@} bar
    @@result@{@} bar
@@end lisp
@end group
@end lisp


@node Error Glyph, Equivalence, Print Glyph, Glyphs
@c @subsection @code{@@error@{@}} (@error{}): Indicating an Error Message
@subsection @code{@@error@{@}} (@error{}): エラーメッセージを示す
@cindex Error message, indicating it
@findex error

@c A piece of code may cause an error when you evaluate it.  You can
@c designate the error message with the @code{@@error@{@}} command.@refill
@c 
コードの一部は，評価したときエラーとなる可能性があります．
@code{@@error@{@}}コマンドでエラーメッセージを示すことが可能です．
@refill

@iftex
@c The @code{@@error@{@}} command is displayed as @samp{error-->} in Info
@c and as @samp{@error{}} in the printed output.
@c 
@code{@@error@{@}}コマンドは，Infoでは@samp{error-->}として，印刷物では
@samp{@error{}}として表示されます．
@end iftex
@ifinfo
@c The @code{@@error@{@}} command is displayed as @samp{@error{}} in Info
@c and as the word `error' in a box in the printed output.@refill
@c 
@code{@@error@{@}}コマンドはInfoでは@samp{@error{}}として，印刷物では四
角の中の`error'という単語として表示されます．@refill
@end ifinfo

@need 700
@c Thus,
@c 
このため以下のようにします．

@example
@@lisp
(+ 23 'x)
@@error@{@} Wrong type argument: integer-or-marker-p, x
@@end lisp
@end example

@noindent
@c produces
@c 
以下を生成します．

@lisp
(+ 23 'x)
@error{} Wrong type argument: integer-or-marker-p, x
@end lisp

@noindent
@c This indicates that the following error message is printed
@c when you evaluate the expression:
@c 
これは，式を評価したとき，以下のエラーメッセージが出力されることを示しま
す．

@lisp
Wrong type argument: integer-or-marker-p, x
@end lisp

@c @samp{@error{}} itself is not part of the error message.
@c 
@samp{@error{}}自身はエラーメッセージの一部ではありません．


@node Equivalence, Point Glyph, Error Glyph, Glyphs
@c @subsection @code{@@equiv@{@}} (@equiv{}): Indicating Equivalence
@subsection @code{@@equiv@{@}} (@equiv{}): 等価を示す
@cindex Equivalence, indicating it
@findex equiv

@c Sometimes two expressions produce identical results.  You can indicate the
@c exact equivalence of two forms with the @code{@@equiv@{@}} command.@refill
@c 
二つの式が同一の結果を生成することもあります．@code{@@equiv@{@}}コマンド
で，二つのフォームが正確に同一だということを示すことが可能です．@refill

@iftex
@c The @code{@@equiv@{@}} command is displayed as @samp{==} in Info and
@c as @samp{@equiv{}} in the printed output.
@c 
@code{@@equiv@{@}}コマンドはInfoでは@samp{==}として，印刷物では
@samp{@equiv{}}として表示されます．
@end iftex
@ifinfo
@c The @code{@@equiv@{@}} command is displayed as @samp{@equiv{}} in Info
@c and as a three parallel horizontal lines in the printed output.@refill
@c 
@code{@@equiv@{@}}コマンドはInfoでは@samp{@equiv{}}として，印刷物では三つ
の平行な水平な線として表示されます．@refill
@end ifinfo

@c Thus,
@c 
このため以下のようにします．

@example
@@lisp
(make-sparse-keymap) @@equiv@{@} (list 'keymap)
@@end lisp
@end example

@noindent
@c produces
@c 
以下を生成します．

@lisp
(make-sparse-keymap) @equiv{} (list 'keymap)
@end lisp

@noindent
@c This indicates that evaluating @code{(make-sparse-keymap)} produces
@c identical results to evaluating @code{(list 'keymap)}.
@c 
これは，@code{(make-sparse-keymap)}の評価が@code{(list 'keymap)}の評価結
果と同一なものを生成することを示します．


@node Point Glyph
@c @subsection @code{@@point@{@}} (@point{}): Indicating Point in a Buffer
@subsection @code{@@point@{@}} (@point{}): バッファのポイントを示す
@cindex Point, indicating in a buffer
@findex point

@c Sometimes you need to show an example of text in an Emacs buffer.  In
@c such examples, the convention is to include the entire contents of the
@c buffer in question between two lines of dashes containing the buffer
@c name.@refill
@c 
Emacsバッファのテキストの例を見せる必要があることもあります．そのような
例では，バッファ名を含む二行のダッシュの間に問題のバッファ全体の内容を含
める慣習があります．@refill

@c You can use the @samp{@@point@{@}} command to show the location of point
@c in the text in the buffer.  (The symbol for point, of course, is not
@c part of the text in the buffer; it indicates the place @emph{between}
@c two characters where point is located.)@refill
@c 
バッファのテキストでポイントの場所を表示するため，@samp{@@point@{@}}コマ
ンドを使用することが可能です．(ポイントのシンボルは，もちろんバッファの
テキストの一部ではありません．それは，ポイントがある二文字の@emph{間の}
場所を示します．)@refill

@iftex
@c The @code{@@point@{@}} command is displayed as @samp{-!-} in Info and
@c as @samp{@point{}} in the printed output.
@c 
@code{@@point@{@}}コマンドは，Infoでは@samp{-!-}として，印刷物では
@samp{@point{}}として表示されます．
@end iftex
@ifinfo
@c The @code{@@point@{@}} command is displayed as @samp{@point{}} in Info
@c and as a small five pointed star in the printed output.@refill
@c 
@code{@@point@{@}}コマンドは，Infoでは@samp{@point{}}として，印刷物では
小さな五つの先端がある星として表示されます．@refill
@end ifinfo

@c The following example shows the contents of buffer @file{foo} before
@c and after evaluating a Lisp command to insert the word @code{changed}.@refill
@c 
以下の例は，単語@code{changed}を挿入するためのLispコマンドを評価した，前
後の@file{foo}バッファの内容を表示しています．@refill

@example
@group
---------- Buffer: foo ----------
This is the @point{}contents of foo.
---------- Buffer: foo ----------

@end group
@end example

@example
@group
(insert "changed ")
    @result{} nil
---------- Buffer: foo ----------
This is the changed @point{}contents of foo.
---------- Buffer: foo ----------

@end group
@end example

@c In a Texinfo source file, the example is written like this:@refill
@c 
Texinfoソースファイルでは，例は以下のように書かれています．@refill

@example
@@example
---------- Buffer: foo ----------
This is the @@point@{@}contents of foo.
---------- Buffer: foo ----------

(insert "changed ")
    @@result@{@} nil
---------- Buffer: foo ----------
This is the changed @@point@{@}contents of foo.
---------- Buffer: foo ----------
@@end example
@end example


@node Footnotes
@c @section Footnotes
@section 脚注
@cindex Footnotes
@findex footnote

@c A @dfn{footnote} is for a reference that documents or elucidates the
@c primary text.@footnote{A footnote should complement or expand upon
@c the primary text, but a reader should not need to read a footnote to
@c understand the primary text.  For a thorough discussion of footnotes,
@c see @cite{The Chicago Manual of Style}, which is published by the
@c University of Chicago Press.}
@c 
@dfn{脚注(footnote)}は，主要なテキストの紹介や説明を参照するためのもので
す．@footnote{脚注は主要なテキストを補完する，または詳細に述べるべきです
が，読者が主要なテキストを理解するために脚注を読む必要があるべきではあり
ません．脚注の徹底的な論議については，シカゴ大学出版によって出版された
@cite{The Chicago Manual of Style}を参照してください．}

@menu
* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.
@end menu


@node Footnote Commands
@c @subsection Footnote Commands
@subsection 脚注コマンド

@c In Texinfo, footnotes are created with the @code{@@footnote} command.
@c This command is followed immediately by a left brace, then by the text
@c of the footnote, and then by a terminating right brace.  Footnotes may
@c be of any length (they will be broken across pages if necessary), but
@c are usually short.  The template is:
@c 
Texinfoでは脚注は@code{@@footnote}で作成されます．このコマンドは直後に左
カッコが続き，その後に脚注のテキストが続き，そして終端の右カッコが続きま
す．脚注はどのような長さでも可能ですが(必要ならページに跨ります)，通常は
短いです．以下はテンプレートです．

@example
@c ordinary text@@footnote@{@var{text of footnote}@}
@c 
通常のテキスト@@footnote@{@var{脚注のテキスト}@}
@end example

@c As shown here, the @code{@@footnote} command should come right after the
@c text being footnoted, with no intervening space; otherwise, the footnote
@c marker might end up starting a line.
@c 
このように，@code{@@footnote}は脚注が付くテキストの直後に，余分な空白無
しにすべきです．そうしない場合，脚注の印は行を開始するでしょう．

@c For example, this clause is followed by a sample footnote@footnote{Here
@c is the sample footnote.}; in the Texinfo source, it looks like
@c this:
@c 
例えば，この節は見本の脚注@footnote{これは見本の脚注です．}が続きます．
Texinfoソースファイルでは，以下のようになります．

@example
@c @dots{}a sample footnote@@footnote@{Here is the sample
@c footnote.@}; in the Texinfo source@dots{}
@c 
@dots{}見本の脚注@@footnote@{これは見本の脚注です．@}が続きます．Texinfo
ソース@dots{}
@end example

@c As you can see, the source includes two punctuation marks next to each
@c other; in this case, @samp{.@};} is the sequence.  This is normal (the
@c first ends the footnote and the second belongs to the sentence being
@c footnoted), so don't worry that it looks odd.
@c 
御覧のように，ソースファイルには二つの句読点文字がお互いに隣り合っていま
す．この状況では@samp{.@};}が連続しています．これは一般的なので(最初のも
のは脚注の終りで，二番目のものは脚注がある文章に属しています)，奇妙に見
えても気にしないでください．

@c In a printed manual or book, the reference mark for a footnote is a
@c small, superscripted number; the text of the footnote appears at the
@c bottom of the page, below a horizontal line.
@c 
印刷されたマニュアルや本では，脚注の参照マークは小さい上付き数字です．脚
注のテキストは，ページの底に水平方向の線の下に現れます．

@c In Info, the reference mark for a footnote is a pair of parentheses
@c with the footnote number between them, like this: @samp{(1)}.  The
@c reference mark is followed by a cross-reference link to the footnote's
@c text.
@c 
Infoでは，脚注の参照マークは脚注番号が間にある一組のカッコで，@samp{(1)} 
のようになります．参照マークは，脚注のテキストへの相互参照のリンクが続き
ます．

@c In the HTML output, footnote references are marked with a small,
@c superscripted number which is rendered as a hypertext link to the
@c footnote text.
@c 
HTML出力では，脚注参照は小さな上付き数字で，脚注テキストへのハイパーテキ
ストリンクとなります．

@c By the way, footnotes in the argument of an @code{@@item} command for a
@c @code{@@table} must be on the same line as the @code{@@item}
@c (as usual).  @xref{Two-column Tables}.
@c 
ところで，@code{@@table}に対する@code{@@item}コマンドの引数の脚注は，(通
常)@code{@@item}コマンドと同じ行にする必要があります．@xref{Two-column
Tables}.


@node Footnote Styles
@c @subsection Footnote Styles
@subsection 脚注スタイル

@c Info has two footnote styles, which determine where the text of the
@c footnote is located:@refill
@c 
Infoは二つの脚注スタイルがあり，脚注のテキストがある場所を決定します．
@refill

@itemize @bullet
@cindex @samp{@r{End}} node footnote style
@item
@c In the `End' node style, all the footnotes for a single node
@c are placed at the end of that node.  The footnotes are separated from
@c the rest of the node by a line of dashes with the word
@c @samp{Footnotes} within it.  Each footnote begins with an
@c @samp{(@var{n})} reference mark.@refill
@c 
`End'ノードスタイルでは，一つのノードに対する全ての脚注は，そのノードの
最後に置かれます．脚注は，ノードの残りと，その中で単語@samp{Footnotes}が
付いたダッシュの行で分けられます．それぞれの脚注は@samp{(@var{n})}の参照
マークで開始します．@refill

@need 700
@noindent
@c Here is an example of a single footnote in the end of node style:@refill
@c 
ノードの終りのスタイルの，一つの脚注の例は以下のようになります．@refill

@example
@group
--------- Footnotes ---------

(1)  Here is a sample footnote.
@end group
@end example

@cindex @samp{@r{Separate}} footnote style
@item
@c In the `Separate' node style, all the footnotes for a single
@c node are placed in an automatically constructed node of
@c their own.  In this style, a ``footnote reference'' follows
@c each @samp{(@var{n})} reference mark in the body of the
@c node.  The footnote reference is actually a cross reference
@c which you use to reach the footnote node.@refill
@c 
`Separate'ノードスタイルでは，一つのノードに対する全ての脚注は，自動的に
構築された単独のノードに配置されます．この形式では``footnote reference'' 
は，ノード本体にそれそれの@samp{(@var{n})}参照マークが続きます．脚注参照
は実際には脚注ノードに到達する相互参照です．@refill

@c The name of the node with the footnotes is constructed
@c by appending @w{@samp{-Footnotes}} to the name of the node
@c that contains the footnotes. (Consequently, the footnotes'
@c node for the @file{Footnotes} node is
@c @w{@file{Footnotes-Footnotes}}!)  The footnotes' node has an
@c `Up' node pointer that leads back to its parent node.@refill
@c 
脚注のノード名は，脚注が含まれるノード名に@w{@samp{-Footnotes}}を付けて
構築されます．(従って，@file{Footnotes}に対する脚注のノードは
@w{@file{Footnotes-Footnotes}}です！)脚注ノードは，その親ノードに戻るた
めの，`Up'ノードポインタがあります．@refill

@noindent
@c Here is how the first footnote in this manual looks after being
@c formatted for Info in the separate node style:@refill
@c 
このマニュアルの最初の脚注が，分かれたノードスタイルで，Infoの書式化後ど
のように見えるかを以下のように示します．@refill

@smallexample
@group
File: texinfo.info  Node: Overview-Footnotes, Up: Overview

@c (1) The first syllable of "Texinfo" is pronounced like "speck", not
@c "hex". @dots{}
@c 
(1) "Texinfo"の最初の音節は，"hex"ではなく，``speck''のように発音されま
す．@dots{}
@end group
@end smallexample
@end itemize

@c A Texinfo file may be formatted into an Info file with either footnote
@c style.@refill
@c 
Texinfoファイルは，どちらかの脚注スタイルでInfoファイルに書式化されます．
@refill

@findex footnotestyle
@c Use the @code{@@footnotestyle} command to specify an Info file's
@c footnote style.  Write this command at the beginning of a line followed
@c by an argument, either @samp{end} for the end node style or
@c @samp{separate} for the separate node style.
@c 
@code{@@footnotestyle}コマンドを，Infoファイルの脚注スタイルを指定するた
めに使用してください．このコマンドは行の最初に書き，終りのノードスタイル
に対する@samp{end}，または，分割ノードスタイルに対する@samp{separate}を
引数として続けてください．

@need 700
@c For example,
@c 
例えば，以下のようにします．

@example
@@footnotestyle end
@end example
@noindent
@c or
@c 
または，以下のようにします．
@example
@@footnotestyle separate
@end example

@c Write an @code{@@footnotestyle} command before or shortly after the
@c end-of-header line at the beginning of a Texinfo file.  (If you
@c include the @code{@@footnotestyle} command between the start-of-header
@c and end-of-header lines, the region formatting commands will format
@c footnotes as specified.)@refill
@c 
@code{@@footnotestyle}コマンドは，Texinfoファイルの最初に，end-of-header 
行の前か直後に書いてください．(@code{@@footnotestyle}コマンドが
start-of-headerとend-of-header行の間に含まれる場合，領域の書式化コマンド
は脚注を指定したように書式化します．)@refill

@c If you do not specify a footnote style, the formatting commands use
@c their default style.  Currently, @code{texinfo-format-buffer} and
@c @code{texinfo-format-region} use the `separate' style and
@c @code{makeinfo} uses the `end' style.@refill
@c 
脚注スタイルを指定しない場合，書式化コマンドはデフォルトスタイルを使用し
ます．現在@code{texinfo-format-buffer}と@code{texinfo-format-region}は
`separate'スタイルを使用し，@code{makeinfo}は`end'スタイルを使用します．
@refill

@c !!! note: makeinfo's --footnote-style option overrides footnotestyle
@ignore
If you use @code{makeinfo} to create the Info file, the
@samp{--footnote-style} option determines which style is used,
@samp{end} for the end of node style or @samp{separate} for the
separate node style.  Thus, to format the Texinfo manual in the
separate node style, you would use the following shell command:@refill

@example
makeinfo --footnote-style=separate texinfo.texi
@end example

@noindent
To format the Texinfo manual in the end of node style, you would
type:@refill

@example
makeinfo --footnote-style=end texinfo.texi
@end example
@end ignore
@ignore
If you use @code{texinfo-format-buffer} or
@code{texinfo-format-region} to create the Info file, the value of the
@code{texinfo-footnote-style} variable controls the footnote style.
It can be either @samp{"separate"} for the separate node style or
@samp{"end"} for the end of node style.  (You can change the value of
this variable with the @kbd{M-x edit-options} command (@pxref{Edit
Options, , Editing Variable Values, emacs, The GNU Emacs Manual}), or
with the @kbd{M-x set-variable} command (@pxref{Examining, , Examining
and Setting Variables, emacs, The GNU Emacs Manual}).@refill

The @code{texinfo-footnote-style} variable also controls the style if
you use the @kbd{M-x makeinfo-region} or @kbd{M-x makeinfo-buffer}
command in Emacs.@refill
@end ignore
@ifinfo
@c This chapter contains two footnotes.@refill
@c 
この章は二つの脚注を含んでいます．@refill
@end ifinfo


@c this should be described with figures when we have them
@c perhaps in the quotation/example chapter.
@node Images
@c @section Inserting Images
@section 画像の挿入

@cindex Images, inserting
@cindex Pictures, inserting
@findex image

@c You can insert an image given in an external file with the
@c @code{@@image} command:
@c 
@code{@@image}コマンドで，外部ファイルで与えられた画像を挿入できます．

@example
@@image@{@var{filename}, @r{[}@var{width}@r{]}, @r{[}@var{height}@r{]}, @r{[}@var{alttext}@r{]}, @r{[}@var{extension}@r{]}@}
@end example

@cindex Formats for images
@cindex Image formats
@c The @var{filename} argument is mandatory, and must not have an
@c extension, because the different processors support different formats:
@c 
@var{filename}引数は必須で，処理によってサポートするフォーマットが異なる
ので，拡張子付けてはいけません．
@itemize @bullet
@item
@c @TeX{} reads the file @file{@var{filename}.eps} (Encapsulated PostScript
@c format).
@c 
@TeX{}は@file{@var{filename}.eps}ファイル(Encapsulated PostScript
format)を読み込みます．
@item
@pindex pdftex@r{, and images}
@c PDF@TeX{} reads @file{@var{filename}.pdf} (Adobe's Portable Document Format).
@c 
PDF@TeX{}は@file{@var{filename}.pdf}ファイル(アドビのPortable Document
Format)を読み込み．
@item
@c @code{makeinfo} uses @file{@var{filename}.txt} verbatim for
@c Info output (more or less as if it was an @code{@@example}).
@c 
@command{makeinfo}はInfo出力に対し@file{@var{filename}.txt}を(多かれ少な
かれ@code{@@example}のように)そのまま使用します．
@item
@c @code{makeinfo}
@c uses the optional fifth argument to @code{@@image} for the extension if
@c you supply it.  For example:
@c 
@command{makeinfo}は，提供されている場合，オプションの五番目の引数を拡張
子として使用します．例えば以下のようにします．

@pindex XPM image format
@example
@@image@{foo,,,,xpm@}
@end example

@noindent
@c will cause @samp{makeinfo --html} to try @file{foo.xpm}.
@c 
これで@samp{makeinfo --html}のとき@file{foo.xpm}を試します．

@cindex GIF, unsupported due to patents
@cindex PNG image format
@cindex JPG image format
@c If you do not supply the optional fifth argument, @samp{makeinfo
@c ---html} first tries @file{@var{filename}.png}; if that does not exist,
@c it tries @file{@var{filename}.jpg}.  If that does not exist either, it
@c complains.  (We cannot support GIF format directly due to software
@c patents.)
@c 
追加の五番目の引数を提供していない場合，@samp{makeinfo ---html}は最初に
@file{@var{filename}.png}を試みます．存在しない場合は，
@file{@var{filename}.jpg}を試みます．どちらも存在しない場合は警告を出し
ます．(ソフトウェア特許のためGIFフォーマットはサポートできません．)
@end itemize

@cindex Width of images
@cindex Height of images
@cindex Aspect ratio of images
@cindex Distorting images
@c The optional @var{width} and @var{height} arguments specify the size to
@c scale the image to (they are ignored for Info output).  If neither is
@c specified, the image is presented in its natural size (given in the
@c file); if only one is specified, the other is scaled proportionately;
@c and if both are specified, both are respected, thus possibly distorting
@c the original image by changing its aspect ratio.
@c 
追加の@var{width}と@var{height}引数は，画像のサイズを指定します(Info出力
では無視されます)．どちらも指定されない場合，画像はそのままの大きさで提
供されます(ファイルで与えられたもの)．一方のみが指定された場合，もう一方
はそれに比例して大きさを調整します．両方指定された場合，両方が重視され，
このため縦横比が変更され，元画像が歪む可能性があります．

@cindex Dimensions and image sizes
@c The @var{width} and @var{height} may be specified using any valid @TeX{}
@c dimension, namely:
@c 
@var{width}は@var{height}は有効な@TeX{}の寸法単位を使用して指定できます．
すなわち以下を使用します．

@table @asis
@item pt
@cindex Points (dimension)
@c point (72.27pt = 1in)
@c 
ポイント(72.27pt = 1in)
@item pc
@cindex Picas
@c pica (1pc = 12pt)
@c 
パイカ(1pc = 12pt)
@item bp
@cindex Big points
@c big point (72bp = 1in)
@c 
ビッグポイント(72bp = 1in)
@item in
@cindex Inches
@c inch
@c 
インチ
@item cm
@cindex Centimeters
@c centimeter (2.54cm = 1in)
@c 
センチメートル(2.54cm = 1in)
@item mm
@cindex Millimeters
@c millimeter (10mm = 1cm)
@c 
ミリメートル(10mm = 1cm)
@item dd
@cindex Did@^ot points
@c did@^ot point (1157dd = 1238pt)
@c 
did@^otポイント(1157dd = 1238pt)
@item cc
@cindex Ciceros
@c cicero (1cc = 12dd)
@c 
cicero (1cc = 12dd)
@item sp
@cindex Scaled points
@c scaled point (65536sp = 1pt)
@c 
scaledポイント(65536sp = 1pt)
@end table

@pindex ridt.eps
@c For example, the following will scale a file @file{ridt.eps} to one
@c inch vertically, with the width scaled proportionately:
@c 
例えば，以下は@file{ridt.eps}ファイルを高さ1インチで幅をそれに比例した大
きさに変更します．

@example
@@image@{ridt,,1in@}
@end example

@pindex epsf.tex
@c For @code{@@image} to work with @TeX{}, the file @file{epsf.tex} must be
@c installed somewhere that @TeX{} can find it.  (The standard location is
@c @file{@var{texmf}/tex/generic/dvips/epsf.tex}, where @var{texmf} is a
@c root of your @TeX{} directory tree.)  This file is included in the
@c Texinfo distribution and is also available from
@c @uref{ftp://tug.org/tex/epsf.tex}, among other places.
@c 
@code{@@image}が@TeX{}で動作するように，ファイル@file{epsf.tex}を@TeX{}
が見つけられるところに配置する必要があります．(標準の場所は
@file{@var{texmf}/tex/generic/dvips/epsf.tex}で，そこでは@var{texmf}が
@TeX{}のディレクトリツリーのルートになります．)このファイルはTexinfo配布
物に含まれていて，@uref{ftp://tug.org/tex/epsf.tex}や他の場所でも利用可
能です．

@c @code{@@image} can be used within a line as well as for displayed
@c figures.  Therefore, if you intend it to be displayed, be sure to leave
@c a blank line before the command, or the output will run into the
@c preceding text.
@c 
@code{@@image}は図を表示する行で使用することが可能です．このため，表示し
ようとした場合，前のテキストに出力が入り込まないように，コマンドの前で残
りの空白行を確認してください．

@cindex alt attribute for images
@cindex alternate text for images
@c When producing html, @code{makeinfo} sets the @dfn{alt attribute} for
@c inline images to the optional fourth argument to @code{@@image}, if
@c supplied.  If not supplied, @code{makeinfo} uses the full file name of
@c the image being displayed.
@c 
HTMLを生成しているとき，@command{makeinfo}はオプションの四番目の引数が提
供されている場合，それをインライン画像に対し@dfn{alt属性(alt attribute)} 
を@code{@@image}に設定します．提供されていない場合，@command{makeinfo}は
表示されている画像の完全な名前を使用します．


@node Breaks
@c @chapter Making and Preventing Breaks
@chapter 改行，改ページの作成と阻止
@cindex Making line and page breaks
@cindex Preventing line and page breaks

@cindex Line breaks
@c Usually, a Texinfo file is processed both by @TeX{} and by one of the
@c Info formatting commands.  Line, paragraph, or page breaks sometimes
@c occur in the `wrong' place in one or other form of output.  You must
@c ensure that text looks right both in the printed manual and in the
@c Info file.
@c 
通常Texinfoファイルは，@TeX{}とInfo書式化コマンドの一つの，両方で処理さ
れます．行，段落，ページの分割は，出力のどれかで`間違った'場所で発生する
こともあります．印刷されたマニュアルとInfoファイルの両方でテキストが正し
く見えるように確認する必要があります．

@cindex White space, excessive
@cindex Page breaks
@c For example, in a printed manual, page breaks may occur awkwardly in
@c the middle of an example; to prevent this, you can hold text together
@c using a grouping command that keeps the text from being split across
@c two pages.  Conversely, you may want to force a page break where none
@c would occur normally.  Fortunately, problems like these do not often
@c arise.  When they do, use the break, break prevention, or pagination
@c commands.
@c 
例えば印刷されたマニュアルでは，ページの分割は例の途中で不恰好に発生する
かもしれません．これを避けるため，テキストを2ページに分割することから守
るグループコマンドを使用してテキストを保つことができます．反対に，通常発
生しない場所で改ページを強制したい場合もあります．幸い，これらの問題は滅
多にありません．そうするときは，改行や改ページ，改行や改ページ防止，また
はページ作成コマンドを使用してください．

@menu
* Break Commands::              Summary of break-related commands.
* Line Breaks::                 Forcing line breaks.
* - and hyphenation::           Helping @TeX{} with hyphenation points.
* w::                           Preventing unwanted line breaks in text.
* tie::                         Inserting an unbreakable but varying space.
* sp::                          Inserting blank lines.
* page::                        Forcing the start of a new page.
* group::                       Preventing unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.
@end menu


@node Break Commands
@c @section Break Commands
@section 改行，改ページコマンド

@c The break commands create or allow line and paragraph breaks:
@c 
改行，改ページコマンドは，行や段落の分割や作成を許可します．

@table @code
@item @@*
@c Force a line break.
@c 
強制改行します．

@item @@sp @var{n}
@c Skip @var{n} blank lines.
@c 
@var{n}個の空白行を省略します．

@item @@-
@c Insert a discretionary hyphen.
@c 
任意のハイフンを挿入します．

@item @@hyphenation@{@var{hy-phen-a-ted words}@}
@c Define hyphen points in @var{hy-phen-a-ted words}.
@c 
@var{hy-phen-a-ted words}のハイフネーションポイントを定義します．
@end table

@c These commands hold text together on a single line:
@c 
以下のコマンドは，テキストを単一行に維持します．

@table @code
@item @@w@{@var{text}@}
@c Prevent @var{text} from being split and hyphenated across two lines.
@c 
@var{text}を改行やハイブネーションで二行に跨ることを避けます．
@item @@tie@{@}
@c Insert a normal interword space at which a line break may not occur.
@c 
改行が生じではならない場所に，単語内に普通のスペースを挿入します．
@end table
@iftex
@sp 1
@end iftex

@c The pagination commands apply only to printed output, since Info
@c files do not have pages.
@c 
Infoはページが無いので，ページコマンドは印刷物のみで適用されます．

@table @code
@item @@page
@c Start a new page in the printed manual.
@c 
印刷されたマニュアルで新しいページを開始します．

@item @@group
@c Hold text together that must appear on one printed page.
@c 
印刷された1ページに現れるよう，テキストを一緒に保ちます．

@item @@need @var{mils}
@c Start a new printed page if not enough space on this one.
@c 
当該ページに十分余白が無い場合，新しい印刷ページを開始します．
@end table


@node Line Breaks
@c @section @code{@@*}: Generate Line Breaks
@section @code{@@*}: 改行の生成
@findex * @r{(force line break)}
@cindex Line breaks
@cindex Breaks in a line

@c The @code{@@*} command forces a line break in both the printed manual and
@c in Info.@refill
@c 
@code{@@*}コマンドは，印刷されたマニュアルとInfoの両方で，強制的に改行し
ます．@refill

@need 700
@c For example,
@c 
例えば，以下のようにします．

@example
@c This line @@* is broken @@*in two places.
@c 
この行は@@* 2箇所で@@*分割されます．
@end example

@noindent
@c produces
@c 
以下を生成します．

@example
@group
@c This line
@c  is broken
@c in two places.
@c 
この行は
 二箇所で
分割されています．
@end group
@end example

@noindent
@c (Note that the space after the first @code{@@*} command is faithfully
@c carried down to the next line.)@refill
@c 
(最初の@code{@@*}コマンドの後のスペースは，次の行にそのまま運ばれること
に注意してください．)@refill

@need 800
@c The @code{@@*} command is often used in a file's copyright page:@refill
@c 
@code{@@*}コマンドは，ファイルの著作権ページでよく使用されます．@refill

@example
@group
@c This is edition 2.0 of the Texinfo documentation,@@*
@c and is for @dots{}
@c 
これは，Texinfoドキュメントのエディション2.0@@*
それは@dots{}
@end group
@end example

@noindent
@c In this case, the @code{@@*} command keeps @TeX{} from stretching the
@c line across the whole page in an ugly manner.@refill
@c 
この状況では，@code{@@*}コマンドは，@TeX{}が醜い方法でページ全体に行を引
き延ばすことを阻止します．@refill

@quotation
@c @strong{Please note:} Do not write braces after an @code{@@*} command;
@c they are not needed.@refill
@c 
@strong{注意してください:}@code{@@*}コマンドの後にカッコを書かないでくだ
さい．それらは不要です．@refill

@c Do not write an @code{@@refill} command at the end of a paragraph
@c containing an @code{@@*} command; it will cause the paragraph to be
@c refilled after the line break occurs, negating the effect of the line
@c break.@refill
@c 
@code{@@*}コマンドを含む段落の終りに@code{@@refill}コマンドを書かないで
ください．それは改行の発生後に段落を補充し，改行の効果を否定します．
@refill
@end quotation


@node - and hyphenation
@c @section @code{@@-} and @code{@@hyphenation}: Helping @TeX{} Hyphenate
@section @code{@@-}と@code{@@hyphenation}: @TeX{}のハイフネーションを助ける

@findex - @r{(discretionary hyphen)}
@findex hyphenation
@cindex Hyphenation, helping @TeX{} do
@cindex Fine-tuning, and hyphenation

@c Although @TeX{}'s hyphenation algorithm is generally pretty good, it
@c does miss useful hyphenation points from time to time.  (Or, far more
@c rarely, insert an incorrect hyphenation.)  So, for documents with an
@c unusual vocabulary or when fine-tuning for a printed edition, you may
@c wish to help @TeX{} out.  Texinfo supports two commands for this:
@c 
@TeX{}のハイフネーションアルゴリズムは一般にかなり良いのですが，時々役に
立つハイフネーションポイントに失敗します．(滅多に無いことですが，間違っ
たハイフネーションを挿入します．)そのため，通常の語彙のドキュメントや良
く調整された印刷エディションのため，@TeX{}出力を助けたいと思うかもしれま
せん．Texinfoはこのための二つのコマンドをサポートします．

@table @code
@item @@-
@c Insert a discretionary hyphen, i.e., a place where @TeX{} can (but does
@c not have to) hyphenate.  This is especially useful when you notice an
@c overfull hbox is due to @TeX{} missing a hyphenation (@pxref{Overfull
@c hboxes}).  @TeX{} will not insert any hyphenation points itself into a
@c word containing @code{@@-}.
@c 
任意のハイフン，すなわち@TeX{}でハイフネーション可能な(が必須ではない)場
所を挿入します．これは@TeX{}がハイフネーションを失敗したため，overfull
hbox(@pxref{Overfull hboxes})を警告されたとき特に便利です．@TeX{}は
@code{@@-}を含む単語にハイフネーションポイント自身を挿入しません．

@item @@hyphenation@{@var{hy-phen-a-ted words}@}
@c Tell @TeX{} how to hyphenate @var{hy-phen-a-ted words}.  As shown, you
@c put a @samp{-} at each hyphenation point.  For example:
@c 
@TeX{}に@var{hy-phen-a-ted words}のハイフネーション方法を伝えます．御覧
のように，@samp{-}をそれぞれのハイフネーションポイントに置きます．例えば
以下のようにします．
@example
@@hyphenation@{man-u-script man-u-scripts@}
@end example
@noindent
@c @TeX{} only uses the specified hyphenation points when the
@c words match exactly, so give all necessary variants.
@c 
@TeX{}は，正しく一致した単語のときのみ指定されたハイフネーションポイント
を使用するので，必要な変形を全て与えてください．
@end table

@c Info output is not hyphenated, so these commands have no effect there.
@c 
Info出力はハイフネーションしないので，これらのコマンドはそこでは意味があ
りません．

@node w
@c @section @code{@@w}@{@var{text}@}: Prevent Line Breaks
@section @code{@@w}@{@var{text}@}: 改行を妨げる
@findex w @r{(prevent line break)}
@cindex Line breaks, preventing
@cindex Hyphenation, preventing

@c @code{@@w@{@var{text}@}} outputs @var{text} and prohibits line breaks
@c within @var{text}.
@c 
@code{@@w@{@var{text}@}}は@var{text}を出力し，@var{text}内部での改行を妨
げます．

@c You can use the @code{@@w} command to prevent @TeX{} from automatically
@c hyphenating a long name or phrase that happens to fall near the end of a
@c line.  For example:
@c 
@code{@@w}コマンドを，長い名前や文節を行の終り付近で@TeX{}が生成する自動
的にハイフネーションを避けるために使用することが可能です．例えば，以下の
ようにします．

@example
You can copy GNU software from @@w@{@@samp@{ftp.gnu.org@}@}.
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
You can copy GNU software from @w{@samp{ftp.gnu.org}}.
@end quotation

@cindex Non-breakable space, fixed
@cindex Unbreakable space, fixed
@c You can also use @code{@@w} to produce a non-breakable space, fixed at
@c the width of a normal interword space:
@c 
改行されないスペースを生成するために@code{@@w}を使用することも可能で，そ
れは単語内の普通のスペースの幅に修正されます．

@example
@@w@{ @} @@w@{ @} @@w@{ @} indentation.
@end example

@noindent
@c produces:
@c 
以下を生成します．

@display
@w{ } @w{ } @w{ } indentation.
@end display

@c The space from @code{@@w@{@w{ }@}}, as well as being non-breakable, also
@c will not stretch or shrink.  Sometimes that is what you want, for
@c instance if you're doing some manual indenting.  However, usually you
@c want a normal interword space that does stretch and shrink (in the
@c printed output); see the @code{@@tie} command in the next section.
@c 
@code{@@w@{@w{ }@}}でのスペースは，改行不可のものと同様に間隔を広くした
り狭くしたりしません．例えば，手動で字下げを行なっている状況がそうしたい
場合でしょう．しかし，単語内に(印刷した出力で)伸び縮みする普通のスペース
が欲しいときもあります．次のセクションの@code{@@tie}コマンドを見てくださ
い．


@node tie
@c @section @code{@@tie@{@}}: Inserting an Unbreakable Space
@section @code{@@tie@{@}}: 改行されないスペースを挿入する
@findex tie @r{(unbreakable interword space)}
@cindex Tied space
@cindex Non-breakable space, variable
@cindex Unbreakable space, variable

@c The @code{@@tie@{@}} command produces a normal interword space at which
@c a line break may not occur.  Always write it with following (empty)
@c braces, as usual for commands used within a paragraph.  Here's an
@c example:
@c 
@code{@@tie@{@}}コマンドは，単語内の改行を生じさせてはならない普通のスペー
スを生成します．段落内で使用されるコマンドのように，常に(空の)カッコを続
けて書いてください．例は以下のようになります．

@example
@@TeX@{@} was written by Donald E.@@tie@{@}Knuth.
@end example

@noindent
@c produces:
@c 
以下を生成します．

@display
@TeX{} was written by Donald E.@tie{}Knuth.
@end display

@c There are two important differences between @code{@@tie@{@}} and
@c @code{@@w@{@w{ }@}}:
@c 
@code{@@tie@{@}}と@code{@@w@{@w{ }@}}には，二つの重要な違いがあります．

@itemize
@item
@c The space produced by @code{@@tie@{@}} will stretch and shrink slightly
@c along with the normal interword spaces in the paragraph; the space
@c produced by @code{@@w@{@w{ }@}} will not vary.
@c 
@code{@@tie@{@}}が生成するスペースは，段落内の単語内の普通のスペースと一
緒に，わずかに伸び縮みします．@code{@@w@{@w{ }@}}で生成されたスペースは
変化しません．

@item
@c @code{@@tie@{@}} allows hyphenation of the surrounding words, while
@c @code{@@w@{@w{ }@}} inhibits hyphenation of those words (for @TeX{}nical
@c reasons, namely that it produces an @samp{\hbox}).
@c 
@code{@@tie@{@}}では周りの単語のハイフネーションが許可されていますが，
@code{@@w@{@w{ }@}}それらの単語のハイフネーションを抑止します(@TeX{}の技
術的な理由のためで，それが@samp{\hbox}を生成するからです)．

@end itemize


@node sp
@c @section @code{@@sp} @var{n}: Insert Blank Lines
@section @code{@@sp} @var{n}: 空白行の挿入
@findex sp @r{(line spacing)}
@cindex Space, inserting vertical
@cindex Blank lines
@cindex Line spacing

@c A line beginning with and containing only @code{@@sp @var{n}}
@c generates @var{n} blank lines of space in both the printed manual and
@c the Info file.  @code{@@sp} also forces a paragraph break.  For
@c example,
@c 
@code{@@sp @var{n}}のみを含むもので始まる行は，印刷されたマニュアルと
Infoファイルの両方で，@var{n}個の空白行の空間を生成します．@code{@@sp}は
段落の分割も強制します．例えば，以下のようにします．

@example
@@sp 2
@end example

@noindent
@c generates two blank lines.
@c 
二行の空白行を生成します．

@c The @code{@@sp} command is most often used in the title page.@refill
@c 
@code{@@sp}コマンドはタイトルページで最もよく使用されます．@refill

@ignore
@c node br, page, sp, Breaks
@comment  node-name,  next,  previous,  up
@c section @code{@@br}: Generate Paragraph Breaks
@findex br @r{(paragraph breaks)}
@cindex Paragraph breaks
@cindex Breaks in a paragraph

The @code{@@br} command forces a paragraph break.  It inserts a blank
line.  You can use the command within or at the end of a line.  If
used within a line, the @code{@@br@{@}} command must be followed by
left and right braces (as shown here) to mark the end of the
command.@refill

@need 700
For example,

@example
@group
This line @@br@{@}contains and is ended by paragraph breaks@@br
and is followed by another line.
@end group
@end example

@noindent
produces

@example
@group
This line

contains and is ended by paragraph breaks

and is followed by another line.
@end group
@end example

The @code{@@br} command is seldom used.
@end ignore


@node page
@c @section @code{@@page}: Start a New Page
@section @code{@@page}: 新しいページの開始
@cindex Page breaks
@findex page

@c A line containing only @code{@@page} starts a new page in a printed
@c manual.  The command has no effect on Info files since they are not
@c paginated.  An @code{@@page} command is often used in the @code{@@titlepage}
@c section of a Texinfo file to start the copyright page.
@c 
@code{@@page}のみを含む行は印刷されたマニュアルで，新しいページを開始し
ます．このコマンドは，Infoファイルではページが無いので効果がありません．
@code{@@page}コマンドは，著作権ページを開始するため，Texinfoファイルの
@code{@@titlepage}セクションでよく使用されます．


@node group, need, page, Breaks
@comment  node-name,  next,  previous,  up
@c @section @code{@@group}: Prevent Page Breaks
@section @code{@@group}: 改ページを妨げる
@cindex Group (hold text together vertically)
@cindex Holding text together vertically
@cindex Vertically holding text together
@findex group

@c The @code{@@group} command (on a line by itself) is used inside an
@c @code{@@example} or similar construct to begin an unsplittable vertical
@c group, which will appear entirely on one page in the printed output.
@c The group is terminated by a line containing only @code{@@end group}.
@c These two lines produce no output of their own, and in the Info file
@c output they have no effect at all.@refill
@c 
@code{@@group}コマンドは(単独行で)，@code{@@example}やそれに類似した縦方
向に分割不可能なグループを開始するものの内部で使用され，それは印刷物では，
1ページに全体が現れます．グループは@code{@@end group}のみを含む行で終了
します．この二つの行はそれ自身出力に現れず，Info出力では効果がありません．
@refill

@c Once said that these environments
@c turn off vertical spacing between ``paragraphs''.
@c Also, quotation used to work, but doesn't in texinfo-2.72
@c 
@c Although @code{@@group} would make sense conceptually in a wide
@c variety of contexts, its current implementation works reliably only
@c within @code{@@example} and variants, and within @code{@@display},
@c @code{@@format}, @code{@@flushleft} and @code{@@flushright}.
@c @xref{Quotations and Examples}.  (What all these commands have in
@c common is that each line of input produces a line of output.)  In
@c other contexts, @code{@@group} can cause anomalous vertical
@c spacing.@refill
@c 
@code{@@group}には様々な文脈で概念的な意味はありますが，現在の実装では，
@code{@@example}とその変種の@code{@@display}，@code{@@format}，
@code{@@flushleft}，そして@code{@@flushright}のみで確実に動作します．
@xref{Quotations and Examples}.  (これら全てのコマンドが共通に持つものは，
入力のそれぞれの行が出力を生成することです．)他の内容では，
@code{@@group}は異常な縦の空白を生成するはずです．@refill

@need 750
@c This formatting requirement means that you should write:
@c 
この書式の必要条件は，以下のように書くべきだということです．

@example
@group
@@example
@@group
@dots{}
@@end group
@@end example
@end group
@end example

@noindent
@c with the @code{@@group} and @code{@@end group} commands inside the
@c @code{@@example} and @code{@@end example} commands.
@c 
このように，@code{@@group}と@code{@@end group}コマンドを用いて，
@code{@@example}と@code{@@end example}コマンドの中に書きます．

@c The @code{@@group} command is most often used to hold an example
@c together on one page.  In this Texinfo manual, more than 100 examples
@c contain text that is enclosed between @code{@@group} and @code{@@end
@c group}.
@c 
@code{@@group}コマンドは例を1ページにまとめるため，最もよく使用されます．
このTexinfoマニュアルには，100以上の例として，@code{@@group}と
@code{@@end group}で囲まれたテキストが含まれています．

@c If you forget to end a group, you may get strange and unfathomable
@c error messages when you run @TeX{}.  This is because @TeX{} keeps
@c trying to put the rest of the Texinfo file onto the one page and does
@c not start to generate error messages until it has processed
@c considerable text.  It is a good rule of thumb to look for a missing
@c @code{@@end group} if you get incomprehensible error messages in
@c @TeX{}.@refill
@c 
グループの終了を忘れた場合，@TeX{}を実行したとき，奇妙で不可解なエラーメッ
セージを得るかもしれません．これは，@TeX{}がTexinfoファイルの残りを1ペー
ジを書こうとして，大量のテキストを処理するまでエラーメッセージの生成を開
始しないためです．@TeX{}で理解できないエラーメッセージを得る場合，
@code{@@end group}が無いところを探すことは，良い経験則です．@refill

@node need,  , group, Breaks
@comment  node-name,  next,  previous,  up
@c @section @code{@@need @var{mils}}: Prevent Page Breaks
@section @code{@@need @var{mils}}: 改ページを妨げる
@cindex Need space at page bottom
@findex need

@c A line containing only @code{@@need @var{n}} starts
@c a new page in a printed manual if fewer than @var{n} mils (thousandths
@c of an inch) remain on the current page.  Do not use
@c braces around the argument @var{n}.  The @code{@@need} command has no
@c effect on Info files since they are not paginated.@refill
@c 
@code{@@need @var{n}}のみを含む行は，現在のページの残りが@var{n}ミル(千
分の1インチ)以下の場合，印刷されたマニュアルで新しいページを開始します．
引数@var{n}の周りにカッコを使用しないでください．@code{@@need}コマンドは，
Infoはページが無いので，Infoでは効果はありません．@refill

@need 800
@c This paragraph is preceded by an @code{@@need} command that tells
@c @TeX{} to start a new page if fewer than 800 mils (eight-tenths
@c inch) remain on the page.  It looks like this:@refill
@c 
この段落は，ページの残りが800ミル(10分の8インチ)以下の場合，@TeX{}に新し
いページを開始するよう伝える，@code{@@need}コマンドで処理されます．以下
のようにします．@refill

@example
@group
@@need 800
This paragraph is preceded by @dots{}
@end group
@end example

@c The @code{@@need} command is useful for preventing orphans (single
@c lines at the bottoms of printed pages).@refill
@c 
@code{@@need}コマンドは孤立行(印刷ページの底の単一行)を避けるのに役立ち
ます．@refill


@node Definition Commands
@c @chapter Definition Commands
@chapter 定義コマンド
@cindex Definition commands

@c The @code{@@deffn} command and the other @dfn{definition commands}
@c enable you to describe functions, variables, macros, commands, user
@c options, special forms and other such artifacts in a uniform
@c format.@refill
@c 
@code{@@deffn}コマンドと他の@dfn{定義コマンド(definition commands)}で，
関数，変数，マクロ，コマンド，ユーザーオプション，スペシャルフォーム，そ
してその他の一様な書式での人工物のようなものを記述可能になります．
@refill

@c In the Info file, a definition causes the entity
@c category---`Function', `Variable', or whatever---to appear at the
@c beginning of the first line of the definition, followed by the
@c entity's name and arguments.  In the printed manual, the command
@c causes @TeX{} to print the entity's name and its arguments on the left
@c margin and print the category next to the right margin.  In both
@c output formats, the body of the definition is indented.  Also, the
@c name of the entity is entered into the appropriate index:
@c @code{@@deffn} enters the name into the index of functions,
@c @code{@@defvr} enters it into the index of variables, and so
@c on.@refill
@c 
Infoファイルでは，定義は構成要素のカテゴリ --- `関数'，`変数'，またはあ
らゆるもの --- を定義の最初の行の始めに現し，構成要素の名前と引数が続き
ます．印刷されたマニュアルでは，コマンドは@TeX{}に構成要素の名前とその引
数を左端のマージンに印刷させ，カテゴリを次に右端のマージンに印刷させます．
両方の出力形式で，定義の本体は字下げされます．また，構成要素の名前は適切
な索引に入ります．@code{@@deffn}は関数の索引に名前が入り，@code{@@defvr}
は変数の索引に入る等のようになります．@refill

@c A manual need not and should not contain more than one definition for
@c a given name.  An appendix containing a summary should use
@c @code{@@table} rather than the definition commands.@refill
@c 
マニュアルは，与えられた名前に対し一つ以上の定義は不要で含めるべきではあ
りません．概要を含む付録は，定義コマンドより@code{@@table}を使用すべきで
す．@refill

@menu
* Def Cmd Template::            How to structure a description using a
                                 definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::  
@end menu

@node Def Cmd Template, Optional Arguments, Definition Commands, Definition Commands
@c @section The Template for a Definition
@section 定義のテンプレート
@cindex Definition template
@cindex Template for a definition

@c The @code{@@deffn} command is used for definitions of entities that
@c resemble functions.  To write a definition using the @code{@@deffn}
@c command, write the @code{@@deffn} command at the beginning of a line
@c and follow it on the same line by the category of the entity, the name
@c of the entity itself, and its arguments (if any).  Then write the body
@c of the definition on succeeding lines.  (You may embed examples in the
@c body.)  Finally, end the definition with an @code{@@end deffn} command
@c written on a line of its own.  (The other definition commands follow
@c the same format.)@refill
@c 
@code{@@deffn}コマンドは，関数に似ている構成要素の定義に使用されます．
@code{@@deffn}コマンドで定義を書くために，@code{@@deffn}コマンドを行の最
初に書き，同じ行に構成要素のカテゴリ，構成要素自身の名前と，(存在する場
合は)引数を続けてください．そして，続く行に定義の本体を書いてください．
(本体に例を埋め込むこともできます．)終りに，単独行に書かれた@code{@@end
deffn}コマンドで定義を終えてください．(他の定義コマンドも同じ書式が続き
ます．)@refill

@c The template for a definition looks like this:
@c 
定義のテンプレートは以下のようになります．

@example
@group
@@deffn @var{category} @var{name} @var{arguments}@dots{}
@var{body-of-definition}
@@end deffn
@end group
@end example

@need 700
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@deffn Command forward-word count
@c This command moves point forward @@var@{count@} words
@c (or backward if @@var@{count@} is negative). @dots{}
@c 
このコマンドは，ポイントを@@var@{count@}語前に(または，@@var@{count@}が
負の場合は後ろに)移動します．@dots{}@@end deffn
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
@deffn Command forward-word count
@c This function moves point forward @var{count} words
@c (or backward if @var{count} is negative). @dots{}
@c 
このコマンドは，ポイントを@var{count}語前に(または，@var{count}が負の場
合は後ろに)移動します．@dots{}
@end deffn
@end quotation

@c Capitalize the category name like a title.  If the name of the
@c category contains spaces, as in the phrase `Interactive Command',
@c write braces around it.  For example:@refill
@c 
タイトルのようなカテゴリ名は大文字にしてください．`Interactive Command' 
といった文節のようにカテゴリ名に空白が含まれている場合，周りにカッコを書
いてください．例えば以下のようにします．@refill


@example
@group
@@deffn @{Interactive Command@} isearch-forward
@dots{}
@@end deffn
@end group
@end example

@noindent
@c Otherwise, the second word will be mistaken for the name of the
@c entity.@refill
@c 
そうしない場合，二番目の単語は構成要素の名前と誤解されます．@refill

@c Some of the definition commands are more general than others.  The
@c @code{@@deffn} command, for example, is the general definition command
@c for functions and the like---for entities that may take arguments.  When
@c you use this command, you specify the category to which the entity
@c belongs.  The @code{@@deffn} command possesses three predefined,
@c specialized variations, @code{@@defun}, @code{@@defmac}, and
@c @code{@@defspec}, that specify the category for you: ``Function'',
@c ``Macro'', and ``Special Form'' respectively.  (In Lisp, a special form
@c is an entity much like a function.)  The @code{@@defvr} command also is
@c accompanied by several predefined, specialized variations for describing
@c particular kinds of variables.@refill
@c 
定義コマンドには，それ以外に一般的なものもあります．例えば，
@code{@@deffn}コマンドは関数やそれに似たもの --- 引数を取る構成要素 --- 
に対する一般的な定義コマンドです．このコマンドを使用するときは，構成要素
が属するカテゴリを指定すべきです．@code{@@deffn}コマンドには，三つの既に
定義されている専門的な変種の，@code{@@defun}，@code{@@defmac}，そして
@code{@@defspec}を処理し，それらはカテゴリを指定します．それぞれ``関数''，
``マクロ''，そして``スペシャルフォーム''です．(Lispではスペシャルフォー
ムは関数に似た構成要素です．) @code{@@defvr}コマンドも，変数の特定の種類
を記述するため専門分野に相違のあるものとして，前もって定義されたものがあ
ります．@refill

@c The template for a specialized definition, such as @code{@@defun}, is
@c similar to the template for a generalized definition, except that you
@c do not need to specify the category:@refill
@c 
@code{@@defun}のような専門的に定義されているものに対するテンプレートは，
カテゴリを指定する必要が無い以外，一般の定義のテンプレートに似ています．
@refill

@example
@group
@@defun @var{name} @var{arguments}@dots{}
@var{body-of-definition}
@@end defun
@end group
@end example

@noindent
@c Thus,
@c 
このため以下のようにします．

@example
@group
@@defun buffer-end flag
@c This function returns @@code@{(point-min)@} if @@var@{flag@}
@c is less than 1, @@code@{(point-max)@} otherwise.
@c @dots{}
@c 
この関数は@@var@{flag@}が1より小さい場合@@code@{(point-min)@}を返し，そ
れ以外では@@code@{(point-max)@}を返します．@dots{}
@@end defun
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@quotation
@defun buffer-end flag
@c This function returns @code{(point-min)} if @var{flag} is less than 1,
@c @code{(point-max)} otherwise.  @dots{}
@c 
この関数は@var{flag}が1より小さい場合@code{(point-min)}を返し，それ以外
では@code{(point-max)}を返します．@dots{}
@end defun
@end quotation

@noindent
@c @xref{Sample Function Definition, Sample Function Definition, A Sample
@c Function Definition}, for a more detailed example of a function
@c definition, including the use of @code{@@example} inside the
@c definition.@refill
@c 
定義の内部に@code{@@example}の使用を含んでいる関数定義の詳細な例は，
@xref{Sample Function Definition, Sample Function Definition, A Sample
Function Definition}.@refill

@c The other specialized commands work like @code{@@defun}.@refill
@c 
それ以外の特別なコマンドは，@code{@@defun}のように動作します．@refill

@cindex Macros in definition commands
@c Note that, due to implementation difficulties, macros are not expanded
@c in @code{@@deffn} and all the other definition commands.
@c 
実装が困難なため，@code{@@deffn}内部とそれ以外のすべての定義コマンドの内
部にあるマクロは展開されないことに注意してください．

@node Optional Arguments, deffnx, Def Cmd Template, Definition Commands
@c @section Optional and Repeated Arguments
@section オプションと繰り返しの引数
@cindex Optional and repeated arguments
@cindex Repeated and optional arguments
@cindex Arguments, repeated and optional
@cindex Syntax, optional & repeated arguments
@cindex Meta-syntactic chars for arguments

@c Some entities take optional or repeated arguments, which may be
@c specified by a distinctive glyph that uses square brackets and
@c ellipses.  For @w{example}, a special form often breaks its argument list
@c into separate arguments in more complicated ways than a
@c straightforward function.@refill
@c 
オプションや繰り返しの引数を取る構成要素もあり，それは角カッコと丸カッコ
を使用する特有なglyphで指定されているかもしれません．@w{例えば}，スペシャ
ルフォームは，引数リストを簡単な関数より複雑な方法で分けられた引数に区切
ることもよくあります．@refill

@iftex
@c An argument enclosed within square brackets is optional.
@c Thus, the phrase
@c @samp{@code{@r{[}@var{optional-arg}@r{]}}} means that
@c @var{optional-arg} is optional.
@c An argument followed by an ellipsis is optional
@c and may be repeated more than once.
@c 
角カッコで囲まれた引数はオプションです．このため
@samp{@code{@r{[}@var{optional-arg}@r{]}}}のような文節は，
@var{optional-arg}がオプションだということを意味します．丸カッコに続く引
数はオプションで，一度以上繰り返すこともできます．
@c This is consistent with Emacs Lisp Reference manual
@c 
@c Thus, @samp{@var{repeated-args}@dots{}} stands for zero or more arguments.
@c Parentheses are used when several arguments are grouped
@c into additional levels of list structure in Lisp.
@c 
このため，@samp{@var{repeated-args}@dots{}}は0以上の引数を意味します．い
くつかの引数がLispのリスト構造の追加のレベルにまとめられるとき，カッコが
使用されます．
@end iftex
@c The following looks better in Info (no `r', `samp' and `code'):
@ifinfo
@c An argument enclosed within square brackets is optional.
@c Thus, [@var{optional-arg}] means that @var{optional-arg} is optional.
@c An argument followed by an ellipsis is optional
@c and may be repeated more than once.
@c 
角カッコで囲まれた引数はオプションです．このため[@var{optional-arg}]のよ
うな文節は，@var{optional-arg}がオプションだということを意味します．丸カッ
コに続く引数はオプションで，一度以上繰り返すこともできます．
@c This is consistent with Emacs Lisp Reference manual
@c 
@c Thus, @var{repeated-args}@dots{} stands for zero or more arguments.
@c Parentheses are used when several arguments are grouped
@c into additional levels of list structure in Lisp.
@c 
このため，@var{repeated-args}@dots{}は0以上の引数を意味します．いくつか
の引数がLispのリスト構造の追加のレベルにまとめられるとき，カッコが使用さ
れます．
@end ifinfo

@c Here is the @code{@@defspec} line of an example of an imaginary
@c special form:@refill
@c 
想像上のスペシャルフォームの例の@code{@@defspec}の行は以下のようになります．
@refill

@quotation
@defspec foobar (@var{var} [@var{from} @var{to} [@var{inc}]]) @var{body}@dots{}
@end defspec
@tex
\vskip \parskip
@end tex
@end quotation

@noindent
@c In this example, the arguments @var{from} and @var{to} are optional,
@c but must both be present or both absent.  If they are present,
@c @var{inc} may optionally be specified as well.  These arguments are
@c grouped with the argument @var{var} into a list, to distinguish them
@c from @var{body}, which includes all remaining elements of the
@c form.@refill
@c 
この例では，引数@var{from}と@var{to}がオプションですが，両方とも有るか両
方とも無いことが必要です．それらが有る場合，@var{inc}も同様にオプション
で指定してかまいません．これらの引数は@var{body}と分けるため，リストに引
数@var{var}でまとめられ，それは形式の残りの全ての要素を含みます．@refill

@c In a Texinfo source file, this @code{@@defspec} line is written like
@c this (except it would not be split over two lines, as it is in this
@c example).@refill
@c 
Texinfoソースファイルでは，この@code{@@defspec}行は以下のように書かれま
す(この例のように二行以上には分割されません)．@refill

@example
@group
@@defspec foobar (@@var@{var@} [@@var@{from@} @@var@{to@}
    [@@var@{inc@}]]) @@var@{body@}@@dots@{@}
@end group
@end example

@noindent
@c The function is listed in the Command and Variable Index under
@c @samp{foobar}.@refill
@c 
関数はコマンドと変数の索引で@samp{foobar}の下にリストアップされます．
@refill

@node deffnx, Def Cmds in Detail, Optional Arguments, Definition Commands
@c @section Two or More `First' Lines
@section 二つ以上の`最初の'行
@cindex Two `First' Lines for @code{@@deffn}
@cindex Grouping two definitions together
@cindex Definitions grouped together
@findex deffnx

@c To create two or more `first' or header lines for a definition, follow
@c the first @code{@@deffn} line by a line beginning with @code{@@deffnx}.
@c The @code{@@deffnx} command works exactly like @code{@@deffn}
@c except that it does not generate extra vertical white space between it
@c and the preceding line.@refill
@c 
定義に対し二つ以上の`最初の'またはヘッダ行を作成するため，最初の
@code{@@deffn}行に@code{@@deffnx}で始まる行を続けてください．
@code{@@deffnx}コマンドは，その行と前の行の間に余分な縦方向の空白を生成
しない以外，@code{@@deffn}と同じように動作します．@refill

@need 1000
@c For example,
@c 
例えば以下のようにします．

@example
@group
@@deffn @{Interactive Command@} isearch-forward
@@deffnx @{Interactive Command@} isearch-backward
@c These two search commands are similar except @dots{}
@c 
この二つの検索コマンドは似ていて@dots{}
@@end deffn
@end group
@end example

@noindent
@c produces
@c 
以下を生成します．

@deffn {Interactive Command} isearch-forward
@deffnx {Interactive Command} isearch-backward
@c These two search commands are similar except @dots{}
@c 
この二つの検索コマンドは似ていて@dots{}
@end deffn

@c Each definition command has an `x' form: @code{@@defunx},
@c @code{@@defvrx}, @code{@@deftypefunx}, etc.
@c 
それぞれの定義コマンドには`x'が付きます．@code{@@defunx}，
@code{@@defvrx}，@code{@@deftypefunx}などです．

@c The `x' forms work just like @code{@@itemx}; see @ref{itemx, , @code{@@itemx}}.
@c 
`x'の形式は@code{@@itemx}と全く同じように動作します．@ref{itemx, ,
@code{@@itemx}}を参照してください．

@node Def Cmds in Detail, Def Cmd Conventions, deffnx, Definition Commands
@c @section The Definition Commands
@section 定義コマンド

@c Texinfo provides more than a dozen definition commands, all of which
@c are described in this section.@refill
@c 
Texinfoは1ダース以上の定義コマンドを提供していて，それらの全てをこのセ
クションで記述します．@refill

@c The definition commands automatically enter the name of the entity in
@c the appropriate index: for example, @code{@@deffn}, @code{@@defun},
@c and @code{@@defmac} enter function names in the index of functions;
@c @code{@@defvr} and @code{@@defvar} enter variable names in the index
@c of variables.@refill
@c 
定義コマンドは自動的に構成要素の名前を適切な索引に入れます．例えば，
@code{@@deffn}，@code{@@defun}，そして@code{@@defmac}は関数の索引に関数
名を入れます．@code{@@defvr}と@code{@@defvar}は変数の索引に変数名を入れ
ます．@refill

@c Although the examples that follow mostly illustrate Lisp, the commands
@c can be used for other programming languages.@refill
@c 
以下のほとんどの例はLispの例ですが，コマンドは他のプログラミング言語でも
使用可能です．@refill

@menu
* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.
@end menu

@node Functions Commands, Variables Commands, Def Cmds in Detail, Def Cmds in Detail
@c @subsection Functions and Similar Entities
@subsection 関数とそれに類似した構成要素

@c This section describes the commands for describing functions and similar
@c entities:@refill
@c 
このセクションは関数やそれに類似した構成要素の記述のためのコマンドを記述
します．@refill

@table @code
@findex deffn
@item @@deffn @var{category} @var{name} @var{arguments}@dots{}
@c The @code{@@deffn} command is the general definition command for
@c functions, interactive commands, and similar entities that may take
@c arguments.  You must choose a term to describe the category of entity
@c being defined; for example, ``Function'' could be used if the entity is
@c a function.  The @code{@@deffn} command is written at the beginning of a
@c line and is followed on the same line by the category of entity being
@c described, the name of this particular entity, and its arguments, if
@c any.  Terminate the definition with @code{@@end deffn} on a line of its
@c own.@refill
@c 
@code{@@deffn}コマンドは，関数，対話式コマンド，そして引数を取る類似の構
成要素のための一般的な定義コマンドです．定義されている構成要素のカテゴリ
を記述する用語を選択する必要があります．例えば，``関数''は，構成要素が関
数の場合使用されます．@code{@@deffn}コマンドは，行の最初に，同じ行に記述
する構成要素のカテゴリ，この特定の構成要素の名前，そして，存在する場合そ
の引数を続けます．単独行の@code{@@end deffn}で定義を終了してください．
@refill

@need 750
@c For example, here is a definition:
@c 
例えば，定義を以下のようにします．

@example
@group
@@deffn Command forward-char nchars
@c Move point forward @@var@{nchars@} characters.
@c 
ポイントを@@var@{nchars@}文字前に移動します．
@@end deffn
@end group
@end example

@noindent
@c This shows a rather terse definition for a ``command'' named
@c @code{forward-char} with one argument, @var{nchars}.
@c 
これは，一つの引数@var{nchars}を持つ@code{forward-char}という名前の``コマ
ンド''の，どちらかというと簡潔な定義を表示します．

@c @code{@@deffn} prints argument names such as @var{nchars} in italics or
@c upper case, as if @code{@@var} had been used, because we think of these
@c names as metasyntactic variables---they stand for the actual argument
@c values.  Within the text of the description, write an argument name
@c explicitly with @code{@@var} to refer to the value of the argument.  In
@c the example above, we used @samp{@@var@{nchars@}} in this way.
@c 
@code{@@deffn}は，@var{nchars}のような引数名を@code{@@var}が使用されてい
るかのようにイタリックまたは大文字で印刷し，それは，これらの名前がメタ構
文変数と考えるためです --- それは実際の引数の値を意味します．記述のテキ
ストで引数の値を述べるため，明示的に@code{@@var}で引数名を書いてください．
上記の例では，このように@samp{@@var@{nchars@}}を使用しています．

@c The template for @code{@@deffn} is:
@c 
@code{@@deffn}のテンプレートは以下のとおりです．

@example
@group
@@deffn @var{category} @var{name} @var{arguments}@dots{}
@var{body-of-definition}
@@end deffn
@end group
@end example

@findex defun
@item @@defun @var{name} @var{arguments}@dots{}
@c The @code{@@defun} command is the definition command for functions.
@c @code{@@defun} is equivalent to @samp{@@deffn Function
@c @dots{}}.@refill
@c 
@code{@@defun}コマンドは関数に対する定義コマンドです．@code{@@defun}は，
@samp{@@deffn Function @dots{}}と同じです．@refill

@need 800
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@defun set symbol new-value
@c Change the value of the symbol @@var@{symbol@}
@c to @@var@{new-value@}.
@c 
シンボル@@var@{symbol@}の値を@@var@{new-value@}に変更します．
@@end defun
@end group
@end example

@noindent
@c shows a rather terse definition for a function @code{set} whose
@c arguments are @var{symbol} and @var{new-value}.  The argument names on
@c the @code{@@defun} line automatically appear in italics or upper case as
@c if they were enclosed in @code{@@var}.  Terminate the definition with
@c @code{@@end defun} on a line of its own.@refill
@c 
これは，引数が@var{symbol}と@var{new-value}の関数@code{set}の，どちらか
というと簡潔な定義を表示します．@code{@@defun}行の引数名は，@code{@@var} 
で囲まれているかのように自動的にイタリックまたは大文字で現れます．単独行
の@code{@@end defun}で定義を終了してください．@refill

@c The template is:
@c 
テンプレートは以下のとおりです．

@example
@group
@@defun @var{function-name} @var{arguments}@dots{}
@var{body-of-definition}
@@end defun
@end group
@end example

@c @code{@@defun} creates an entry in the index of functions.
@c 
@code{@@defun}は関数索引に項目を生成します．

@findex defmac
@item @@defmac @var{name} @var{arguments}@dots{}
@c The @code{@@defmac} command is the definition command for macros.
@c @code{@@defmac} is equivalent to @samp{@@deffn Macro @dots{}} and
@c works like @code{@@defun}.@refill
@c 
@code{@@defmac}コマンドはマクロの定義コマンドです．@code{@@defmac}は
@samp{@@deffn Macro @dots{}}と同じで，@code{@@defun}のように動作します．
@refill

@findex defspec
@item @@defspec @var{name} @var{arguments}@dots{}
@c The @code{@@defspec} command is the definition command for special
@c forms.  (In Lisp, a special form is an entity much like a function,
@c @pxref{Special Forms,,, elisp, GNU Emacs Lisp Reference Manual}.)
@c @code{@@defspec} is equivalent to @samp{@@deffn @{Special Form@}
@c @dots{}} and works like @code{@@defun}.@refill
@c 
@code{@@defspec}コマンドは，スペシャルフォームの定義コマンドです．(Lisp 
では，スペシャルフォームは関数によく似た構成要素です．@pxref{Special
Forms,,, elisp, GNU Emacs Lisp Reference Manual}．)@code{@@defspec}は
@samp{@@deffn @{Special Form@} @dots{}}と同じで，@code{@@defun}のように
動作します．@refill
@end table

@node Variables Commands, Typed Functions, Functions Commands, Def Cmds in Detail
@c @subsection Variables and Similar Entities
@subsection 変数とそれに類似した構成要素

@c Here are the commands for defining variables and similar
@c entities:@refill
@c 
変数とそれに類似した構成要素を定義するためのコマンドは以下のものです．
@refill

@table @code
@findex defvr
@item @@defvr @var{category} @var{name}
@c The @code{@@defvr} command is a general definition command for
@c something like a variable---an entity that records a value.  You must
@c choose a term to describe the category of entity being defined; for
@c example, ``Variable'' could be used if the entity is a variable.
@c Write the @code{@@defvr} command at the beginning of a line and
@c follow it on the same line by the category of the entity and the
@c name of the entity.
@c 
@code{@@defvr}コマンドは変数のようなものの一般的な定義コマンドです --- 
構成要素は値を記録します．定義された構成要素のカテゴリを記述するための，
用語を選択する必要があります．例えば，``変数''は構成要素が変数の場合使用
されます．@code{@@defvr}コマンドを行の最初に書き，同じ行に構成要素のカテ
ゴリと構成要素の名前を続けてください．

@c Capitalize the category name like a title.  If the name of the category
@c contains spaces, as in the name ``User Option'', enclose it in braces.
@c Otherwise, the second word will be mistaken for the name of the entity.
@c For example,
@c 
タイトルのようにカテゴリ名を大文字にしてください．カテゴリ名が``User
Option''のようにスペースを含む場合，カッコで囲んでください．そうしない場
合，二番目の単語は構成要素の名前だと誤解されます．例えば，以下のようにし
ます．

@example
@group
@@defvr @{User Option@} fill-column
@c This buffer-local variable specifies
@c the maximum width of filled lines.
@c @dots{}
@c 
このバッファローカル変数は，
補充された行の最大幅を指定します．
@dots{}
@@end defvr
@end group
@end example

@c Terminate the definition with @code{@@end defvr} on a line of its
@c own.@refill
@c 
単独行の@code{@@end defvr}で定義を終了してください．@refill

@c The template is:
@c 
テンプレートは以下の通りです．

@example
@group
@@defvr @var{category} @var{name}
@var{body-of-definition}
@@end defvr
@end group
@end example

@c @code{@@defvr} creates an entry in the index of variables for @var{name}.
@c 
@code{@@defvr}は@var{name}に対し，変数索引の項目を作成します．

@findex defvar
@item @@defvar @var{name}
@c The @code{@@defvar} command is the definition command for variables.
@c @code{@@defvar} is equivalent to @samp{@@defvr Variable
@c @dots{}}.@refill
@c 
@code{@@defvar}コマンドは，変数の定義コマンドです．@code{@@defvar}は
@samp{@@defvr Variable @dots{}}と同じです．@refill

@need 750
@c For example:
@c 
例えば，以下のようにします．

@example
@group
@@defvar kill-ring
@dots{}
@@end defvar
@end group
@end example

@c The template is:
@c 
テンプレートは以下の通りです．

@example
@group
@@defvar @var{name}
@var{body-of-definition}
@@end defvar
@end group
@end example

@c @code{@@defvar} creates an entry in the index of variables for
@c @var{name}.@refill
@c 
@code{@@defvar}は，@var{name}に対し変数索引の項目を作成します．@refill

@findex defopt
@item @@defopt @var{name}
@cindex User options, marking
@c The @code{@@defopt} command is the definition command for @dfn{user
@c options}, i.e., variables intended for users to change according to
@c taste; Emacs has many such (@pxref{Variables,,, emacs, The GNU Emacs
@c Manual}).  @code{@@defopt} is equivalent to @samp{@@defvr @{User
@c Option@} @dots{}} and works like @code{@@defvar}.@refill
@c 
@code{@@defopt}コマンドは，@dfn{ユーザオプション(user options)}，すなは
ち，ユーザが好みで変更する変数に対する定義コマンドです．Emacsは多くのそ
のようなものがあります(@pxref{Variables,,, emacs, The GNU Emacs Manual})．
@code{@@defopt}は@samp{@@defvr @{User Option@} @dots{}}と同じで，
@code{@@defvar}のように動作します．@refill
@end table


@node Typed Functions, Typed Variables, Variables Commands, Def Cmds in Detail
@c @subsection Functions in Typed Languages
@subsection 型のある言語の関数

@c The @code{@@deftypefn} command and its variations are for describing
@c functions in languages in which you must declare types of variables and
@c functions, such as C and C++.
@c 
@code{@@deftypefn}コマンドとその変形は，CやC++のような変数の型と関数を宣
言する必要がある言語の関数を記述するためのものです．

@table @code
@findex deftypefn
@item @@deftypefn @var{category} @var{data-type} @var{name} @var{arguments}@dots{}
@c The @code{@@deftypefn} command is the general definition command for
@c functions and similar entities that may take arguments and that are
@c typed.  The @code{@@deftypefn} command is written at the beginning of
@c a line and is followed on the same line by the category of entity
@c being described, the type of the returned value, the name of this
@c particular entity, and its arguments, if any.@refill
@c 
@code{@@deftypefn}コマンドは，関数と，引数を取るものや型のある類似の構成
要素の定義コマンドです．@code{@@deftypefn}は行の最初に書き，同じ行に記述
される構成要素のカテゴリ，戻り値の型，この特定の構成要素の名前と，存在す
る場合引数が続きます．@refill

@need 800
@noindent
@c For example,
@c 
例えば，以下のようにします．

@example
@group
@@deftypefn @{Library Function@} int foobar
  (int @@var@{foo@}, float @@var@{bar@})
@dots{}
@@end deftypefn
@end group
@end example

@need 1000
@noindent
@c (where the text before the ``@dots{}'', shown above as two lines, would
@c actually be a single line in a real Texinfo file) produces the following
@c in Info:
@c 
(``@dots{}''の前のテキストは，二行で表示され，Texinfoファイルでは実際に
は単一行です．)Infoでは以下を生成します．

@smallexample
@group
-- Library Function: int foobar (int FOO, float BAR)
@dots{}
@end group
@end smallexample
@iftex

@c In a printed manual, it produces:
@c 
印刷されたマニュアルでは，以下を生成します．

@quotation
@deftypefn {Library Function} int foobar (int @var{foo}, float @var{bar})
@dots{}
@end deftypefn
@end quotation
@end iftex

@c This means that @code{foobar} is a ``library function'' that returns an
@c @code{int}, and its arguments are @var{foo} (an @code{int}) and
@c @var{bar} (a @code{float}).@refill
@c 
これは，@code{foobar}が``ライブラリ関数''で，それは@code{int}を返し，引
数は@var{foo}(@code{int})と@var{bar}(@code{float})だということを意味しま
す．@refill

@c The argument names that you write in @code{@@deftypefn} are not subject
@c to an implicit @code{@@var}---since the actual names of the arguments in
@c @code{@@deftypefn} are typically scattered among data type names and
@c keywords, Texinfo cannot find them without help.  Instead, you must write
@c @code{@@var} explicitly around the argument names.  In the example
@c above, the argument names are @samp{foo} and @samp{bar}.@refill
@c 
@code{@@deftypefn}で書いた引数名は，暗黙で@code{@@var}にはなりません ---
@code{@@deftypefn}の引数の実際の名前は，データ型名とキーワードで通常はバ
ラバラなので，Texinfoは助けなしに見つけることができません．代わりに，
@code{@@var}を引数名の周りに明示的に書く必要があります．上の例では，引数
名は@samp{foo}と@samp{bar}です．@refill

@c The template for @code{@@deftypefn} is:@refill
@c 
@code{@@deftypefn}のテンプレートは以下の通りです．@refill

@example
@group
@@deftypefn @var{category} @var{data-type} @var{name} @var{arguments} @dots{}
@var{body-of-description}
@@end deftypefn
@end group
@end example

@noindent
@c Note that if the @var{category} or @var{data type} is more than one
@c word then it must be enclosed in braces to make it a single argument.@refill
@c 
@var{category}や@var{data type}が1単語以上の場合，単一の引数にするためカッ
コで囲む必要があることに注意してください．@refill

@c If you are describing a procedure in a language that has packages,
@c such as Ada, you might consider using @code{@@deftypefn} in a manner
@c somewhat contrary to the convention described in the preceding
@c paragraphs.@refill
@c 
Adaのようなパッケージ言語のプロシージャを記述する場合，前の段落で記述さ
れている慣習と幾分反対の方法として，@code{@@deftypefn}の使用を手法として
考えるかもしれません．@refill

@need 800
@noindent
@c For example:
@c 
例えば以下のようにします．

@example
@group
@@deftypefn stacks private push
       (@@var@{s@}:in out stack;
       @@var@{n@}:in integer)
@dots{}
@@end deftypefn
@end group
@end example

@noindent
@c (The @code{@@deftypefn} arguments are shown split into three lines, but
@c would be a single line in a real Texinfo file.)
@c 
(@code{@@deftypefn}の引数は，三行に分割されていますが，実際のTexinfoファ
イルでは単一行になります．)

@c In this instance, the procedure is classified as belonging to the
@c package @code{stacks} rather than classified as a `procedure' and its
@c data type is described as @code{private}.  (The name of the procedure
@c is @code{push}, and its arguments are @var{s} and @var{n}.)@refill
@c 
この例では，プロシージャは`プロシージャ'と分類するのではなくパッケージ
@code{stacks}に属するものとして分類され，そのデータ型は@code{private}と
して記述されます．(プロシージャの名前は@code{push}で，その引数は@var{s} 
と@var{n}です．)@refill

@c @code{@@deftypefn} creates an entry in the index of functions for
@c @var{name}.@refill
@c 
@code{@@deftypefn}は@var{name}に対し関数索引に項目を作成します．@refill

@item @@deftypefun @var{data-type} @var{name} @var{arguments}@dots{}
@findex deftypefun
@c The @code{@@deftypefun} command is the specialized definition command
@c for functions in typed languages.  The command is equivalent to
@c @samp{@@deftypefn Function @dots{}}.@refill
@c 
@code{@@deftypefun}コマンドは，型のある言語の関数のための特別な定義コマ
ンドです．そのコマンドは@samp{@@deftypefn Function @dots{}}と同じです．
@refill

@need 800
@noindent
@c Thus,
@c 
このため以下のようにします．

@smallexample
@group
@@deftypefun int foobar (int @@var@{foo@}, float @@var@{bar@})
@dots{}
@@end deftypefun
@end group
@end smallexample

@noindent
@c produces the following in Info:
@c 
Infoでは以下を生成します．

@example
@group
-- Function: int foobar (int FOO, float BAR)
@dots{}
@end group
@end example
@iftex

@need 800
@noindent
@c and the following in a printed manual:
@c 
印刷されたマニュアルでは以下を生成します．

@quotation
@deftypefun int foobar (int @var{foo}, float @var{bar})
@dots{}
@end deftypefun
@end quotation
@end iftex

@need 800
@c The template is:
@c 
テンプレートは以下の通りです．

@example
@group
@@deftypefun @var{type} @var{name} @var{arguments}@dots{}
@var{body-of-description}
@@end deftypefun
@end group
@end example

@c @code{@@deftypefun} creates an entry in the index of functions for
@c @var{name}.@refill
@c 
@code{@@deftypefun}は@var{name}に対し関数索引に項目を作成します．@refill

@end table


@node Typed Variables, Abstract Objects, Typed Functions, Def Cmds in Detail
@c @subsection Variables in Typed Languages
@subsection 型のある言語の変数

@c Variables in typed languages are handled in a manner similar to
@c functions in typed languages.  @xref{Typed Functions}.  The general
@c definition command @code{@@deftypevr} corresponds to
@c @code{@@deftypefn} and the specialized definition command
@c @code{@@deftypevar} corresponds to @code{@@deftypefun}.@refill
@c 
型のある言語の変数は，型のある言語の関数に似た方法で処理されます．
@xref{Typed Functions}.  一般的な定義コマンド@code{@@deftypevr}は
@code{@@deftypefn}に対応し，特別な定義コマンド@code{@@deftypevar}は
@code{@@deftypefun}に対応します．@refill

@table @code
@findex deftypevr
@item @@deftypevr @var{category} @var{data-type} @var{name}
@c The @code{@@deftypevr} command is the general definition command for
@c something like a variable in a typed language---an entity that records
@c a value.  You must choose a term to describe the category of the
@c entity being defined; for example, ``Variable'' could be used if the
@c entity is a variable.@refill
@c 
@code{@@deftypevr}コマンドは，型のある言語の変数のようなもののための一般
的な定義コマンドです---値を記録する構成要素です．定義される構成要素のカ
テゴリを記述するための用語を選択する必要があります．例えば，``変数''は構
成要素が変数の場合使用します．@refill

@c The @code{@@deftypevr} command is written at the beginning of a line
@c and is followed on the same line by the category of the entity
@c being described, the data type, and the name of this particular
@c entity.@refill
@c 
@code{@@deftypevr}コマンドは，行の最初に書かれ，同じ行に記述される構成要
素のカテゴリ，データの型，そして特定の構成要素の名前が続きます．
@refill

@need 800
@noindent
@c For example:
@c 
例えば，以下のようにします．

@example
@group
@@deftypevr @{Global Flag@} int enable
@dots{}
@@end deftypevr
@end group
@end example

@noindent
@c produces the following in Info:
@c 
Infoでは以下を生成します．

@example
@group
-- Global Flag: int enable
@dots{}
@end group
@end example
@iftex

@noindent
@c and the following in a printed manual:
@c 
印刷されたマニュアルでは，以下を生成します．

@quotation
@deftypevr {Global Flag} int enable
@dots{}
@end deftypevr
@end quotation
@end iftex

@need 800
@c The template is:
@c 
テンプレートは以下の通りです．

@example
@@deftypevr @var{category} @var{data-type} @var{name}
@var{body-of-description}
@@end deftypevr
@end example

@c @code{@@deftypevr} creates an entry in the index of variables for
@c @var{name}.@refill
@c 
@code{@@deftypevr}は，@var{name}に対し変数索引に項目を作成します．
@refill

@findex deftypevar
@item @@deftypevar @var{data-type} @var{name}
@c The @code{@@deftypevar} command is the specialized definition command
@c for variables in typed languages.  @code{@@deftypevar} is equivalent
@c to @samp{@@deftypevr Variable @dots{}}.@refill
@c 
@code{@@deftypevar}コマンドは，型のある言語の変数のための特別な定義コマ
ンドです．@code{@@deftypevar}は@samp{@@deftypevr Variable @dots{}}と同じ
です．@refill

@need 800
@noindent
@c For example:
@c 
例えば，以下のようにします．

@example
@group
@@deftypevar int fubar
@dots{}
@@end deftypevar
@end group
@end example

@noindent
@c produces the following in Info:
@c 
Infoでは以下を生成します．

@example
@group
-- Variable: int fubar
@dots{}
@end group
@end example
@iftex

@need 800
@noindent
@c and the following in a printed manual:
@c 
印刷されたマニュアルでは，以下を生成します．

@quotation
@deftypevar int fubar
@dots{}
@end deftypevar
@end quotation
@end iftex

@need 800
@noindent
@c The template is:
@c 
テンプレートは以下の通りです．

@example
@group
@@deftypevar @var{data-type} @var{name}
@var{body-of-description}
@@end deftypevar
@end group
@end example

@c @code{@@deftypevar} creates an entry in the index of variables for
@c @var{name}.@refill
@c 
@code{@@deftypevar}は，@var{name}に対し，変数索引の項目を作成します．
@refill
@end table

@node Abstract Objects
@c @subsection Object-Oriented Programming
@subsection オブジェクト指向プログラミング

@c Here are the commands for formatting descriptions about abstract
@c objects, such as are used in object-oriented programming.  A class is
@c a defined type of abstract object.  An instance of a class is a
@c particular object that has the type of the class.  An instance
@c variable is a variable that belongs to the class but for which each
@c instance has its own value.@refill
@c 
オブジェクト指向プログラミングで使用するような，抽象的なオブジェクトに関
する記述を書式化するためのコマンドには以下のものがあります．クラスは抽象
的なオブジェクトの定義された型です．クラスのインスタンスはクラスの型を持
つ特定のオブジェクトです．インスタンス変数はクラスに属するがそれぞれのイ
ンスタンスが独自の値を持つ変数です．@refill

@c In a definition, if the name of a class is truly a name defined in the
@c programming system for a class, then you should write an @code{@@code}
@c around it.  Otherwise, it is printed in the usual text font.@refill
@c 
定義では，クラス名はクラスに対するプログラミングシステムで本当に定義され
た名前の場合，@code{@@code}をその周りに書くべきです．そうしない場合，通
常のテキストフォントで印刷されます．@refill

@table @code
@findex defcv
@item @@defcv @var{category} @var{class} @var{name}
@c The @code{@@defcv} command is the general definition command for
@c variables associated with classes in object-oriented programming.  The
@c @code{@@defcv} command is followed by three arguments: the category of
@c thing being defined, the class to which it belongs, and its
@c name.  Thus,@refill
@c 
@code{@@defcv}コマンドは，オブジェクト指向プログラミングで，クラスに関連
する変数に対する一般的な定義コマンドです．@code{@@defcv}コマンドは三つの
引数をとります．定義している事柄のカテゴリ名，属するクラス，そしてその名
前です．このようにします．@refill

@example
@group
@@defcv @{Class Option@} Window border-pattern
@dots{}
@@end defcv
@end group
@end example

@noindent
@c illustrates how you would write the first line of a definition of the
@c @code{border-pattern} class option of the class @code{Window}.@refill
@c 
これは，@code{Window}クラスの@code{border-pattern}クラスオプションの定義
の最初の行の書き方を説明しています．

@c The template is:
@c 
テンプレートは以下の通りです．
@example
@group
@@defcv @var{category} @var{class} @var{name}
@dots{}
@@end defcv
@end group
@end example

@c @code{@@defcv} creates an entry in the index of variables.
@c 
@code{@@defcv}は変数索引に項目を作成します．

@findex defivar
@item @@defivar @var{class} @var{name}
@c The @code{@@defivar} command is the definition command for instance
@c variables in object-oriented programming.  @code{@@defivar} is
@c equivalent to @samp{@@defcv @{Instance Variable@} @dots{}}@refill
@c 
@code{@@defivar}コマンドは，オブジェクト指向プログラミングのインスタンス
変数に対する定義コマンドです．@code{@@defivar}は@samp{@@defcv @{Instance
Variable@} @dots{}}と同じです．@refill

@c The template is:
@c 
テンプレートは以下の通りです．
@example
@group
@@defivar @var{class} @var{instance-variable-name}
@var{body-of-definition}
@@end defivar
@end group
@end example

@c @code{@@defivar} creates an entry in the index of variables.
@c 
@code{@@defivar}は変数索引に項目を作成します．

@findex deftypeivar
@item @@deftypeivar @var{class} @var{data-type} @var{name}
@c The @code{@@deftypeivar} command is the definition command for typed
@c instance variables in object-oriented programming.  It is similar to
@c @code{@@defivar} with the addition of the @var{data-type} parameter to
@c specify the type of the instance variable.  @code{@@deftypeivar} creates an
@c entry in the index of variables.
@c 
@code{@@deftypeivar}コマンドは，オブジェクト指向プログラミングの型を付け
られたインスタンス変数に対する定義コマンドです．それは，@code{@@defivar} 
に，インスタンス変数の型を指定するための@var{data-type}パラメータが付い
たものに似ています．@code{@@deftypeivar}は変数索引に項目を作成します．

@findex defop
@item @@defop @var{category} @var{class} @var{name} @var{arguments}@dots{}
@c The @code{@@defop} command is the general definition command for
@c entities that may resemble methods in object-oriented programming.
@c These entities take arguments, as functions do, but are associated with
@c particular classes of objects.@refill
@c 
@code{@@defop}コマンドは，オブジェクト指向プログラミングのメソッドに似た
構成要素に対する定義コマンドです．これらの構成要素は関数のように引数を取
りますが，オブジェクトの特定のクラスに関連付けされています．@refill

@c For example, some systems have constructs called @dfn{wrappers} that
@c are associated with classes as methods are, but that act more like
@c macros than like functions.  You could use @code{@@defop Wrapper} to
@c describe one of these.@refill
@c 
例えば，メソッドとしてクラスに関連付けされている@dfn{ラッパー(wrappers)}
と呼ばれる概念を持つシステムもありますが，それは関数というよりマクロのよ
うに動作します．@code{@@defop Wrapper}をこれらの一つとしての記述に使用す
ることが可能です．@refill

@c Sometimes it is useful to distinguish methods and @dfn{operations}.
@c You can think of an operation as the specification for a method.
@c Thus, a window system might specify that all window classes have a
@c method named @code{expose}; we would say that this window system
@c defines an @code{expose} operation on windows in general.  Typically,
@c the operation has a name and also specifies the pattern of arguments;
@c all methods that implement the operation must accept the same
@c arguments, since applications that use the operation do so without
@c knowing which method will implement it.@refill
@c 
メソッドと@dfn{オペレーション(operations)}を分けた方が便利なときもありま
す．オペレーションをメソッドの詳述と考えることができます．このため，ウィ
ンドウシステムは全てのウィンドウクラスが@code{expose}と言う名前のメソッ
ドを持つことを指定できます．我々は，このウィンドウシステムが一般的なウィ
ンドウ上に@code{expose}オペレーションを定義していると言っているのです．
特に，オペレーションは名前を持ち，引数のパターンも指定されています．全て
のオペレーションを実装したメソッドは，オペレーションで使用されるアプリケー
ションが実装したメソッドを知ることなくそれを行うので．同じ引数を受け入れ
るようにする必要があります．@refill

@c Often it makes more sense to document operations than methods.  For
@c example, window application developers need to know about the
@c @code{expose} operation, but need not be concerned with whether a
@c given class of windows has its own method to implement this operation.
@c To describe this operation, you would write:@refill
@c 
メソッドよりオペレーションを説明した方がより意味があることもよくあります．
例えば，ウィンドウアプリケーション開発者は，@code{expose}オペレーション
を知っている必要がありますが，与えられたウィンドウのクラスが，このオペレー
ションを実装した独自のメソッドを持つかどうかを考慮する必要はありません．
このオペレーションを記述するため以下のように書きます．@refill

@example
@@defop Operation windows expose
@end example

@c The @code{@@defop} command is written at the beginning of a line and
@c is followed on the same line by the overall name of the category of
@c operation, the name of the class of the operation, the name of the
@c operation, and its arguments, if any.@refill
@c 
@code{@@defop}コマンドは，行の最初に書かれ，同じ行にオペレーションのカテ
ゴリの全体的な名前，オペレーションクラスの名前，オペレーションの名前，そ
して，存在する場合その引数を続けます．@refill

@c The template is:
@c 
テンプレートは以下の通りです．
@example
@group
@@defop @var{category} @var{class} @var{name} @var{arguments}@dots{}
@var{body-of-definition}
@@end defop
@end group
@end example

@c @code{@@defop} creates an entry, such as `@code{expose} on
@c @code{windows}', in the index of functions.@refill
@c 
@code{@@defop}は`@code{expose} on @code{windows}'のような項目を，関数索
引に作成します．@refill

@findex deftypeop
@item @@deftypeop @var{category} @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
@c The @code{@@deftypeop} command is the definition command for typed
@c operations in object-oriented programming.  It is similar to
@c @code{@@defop} with the addition of the @var{data-type} parameter to
@c specify the return type of the method.  @code{@@deftypeop} creates an
@c entry in the index of functions.
@c 
@code{@@deftypeop}コマンドは，オブジェクト指向プログラミングの型付のオペ
レーションに対する定義コマンドです．それは@code{@@defop}に，メソッドの戻
り値を指定する@var{data-type}パラメータを加えたものに似ています．
@code{@@deftypeop}は関数索引に項目を作成します．

@item @@defmethod @var{class} @var{name} @var{arguments}@dots{}
@findex defmethod
@c The @code{@@defmethod} command is the definition command for methods
@c in object-oriented programming.  A method is a kind of function that
@c implements an operation for a particular class of objects and its
@c subclasses.
@c 
@code{@@defmethod}コマンドは，オブジェクト指向プログラミングのメソッドに
対する定義コマンドです．メソッドは特定のオブジェクトのクラスとそのサブク
ラスのためのオペレーションを実装する関数のようなものです．
@ignore
@c ADR: Who cares?!?
@c KB: Oh, I don't know, I think this info is crucial!
In the Lisp Machine, methods actually were functions, but
they were usually defined with @code{defmethod}.
@end ignore

@c @code{@@defmethod} is equivalent to @samp{@@defop Method @dots{}}.
@c The command is written at the beginning of a line and is followed by
@c the name of the class of the method, the name of the method, and its
@c arguments, if any.@refill
@c 
@code{@@defmethod}は@samp{@@defop Method @dots{}}と同じです．コマンドは
行の最初に書かれ，メソッドのクラス名，メソッド名，そして存在する場合はそ
の引数が続きます．@refill

@noindent
@c For example:
@c 
例えば，以下のようにします．
@example
@group
@@defmethod @code{bar-class} bar-method argument
@dots{}
@@end defmethod
@end group
@end example

@noindent
@c illustrates the definition for a method called @code{bar-method} of
@c the class @code{bar-class}.  The method takes an argument.@refill
@c 
これは，クラス@code{bar-class}の@code{bar-method}と呼ばれるメソッドに対
する定義を説明しています．メソッドは引数を取ります．@refill

@c The template is:
@c 
テンプレートは以下の通りです．

@example
@group
@@defmethod @var{class} @var{method-name} @var{arguments}@dots{}
@var{body-of-definition}
@@end defmethod
@end group
@end example

@c @code{@@defmethod} creates an entry, such as `@code{bar-method} on
@c @code{bar-class}', in the index of functions.@refill
@c 
@code{@@defmethod}は，関数索引に`@code{bar-method} on @code{bar-class}'
のような項目を作成します．@refill


@item @@deftypemethod @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
@findex defmethod
@c The @code{@@deftypemethod} command is the definition command for methods
@c in object-oriented typed languages, such as C++ and Java.  It is similar
@c to the @code{@@defmethod} command with the addition of the
@c @var{data-type} parameter to specify the return type of the method.
@c 
@code{@@deftypemethod}コマンドは，C++やJavaのようなオブジェクト指向の型
のある言語のメソッドのに対する定義コマンドです．それは，
@code{@@defmethod}コマンドにメソッドの戻り値を指定するための
@var{data-type}パラメータを追加したものに似ています．

@end table


@node Data Types
@c @subsection Data Types
@subsection データの型

@c Here is the command for data types:@refill
@c 
データの型に対するコマンドには以下のものがあります．@refill

@table @code
@findex deftp
@item @@deftp @var{category} @var{name} @var{attributes}@dots{}
@c The @code{@@deftp} command is the generic definition command for data
@c types.  The command is written at the beginning of a line and is
@c followed on the same line by the category, by the name of the type
@c (which is a word like @code{int} or @code{float}), and then by names of
@c attributes of objects of that type.  Thus, you could use this command
@c for describing @code{int} or @code{float}, in which case you could use
@c @code{data type} as the category.  (A data type is a category of
@c certain objects for purposes of deciding which operations can be
@c performed on them.)@refill
@c 
@code{@@deftp}コマンドは，データの型に対する一般的な定義コマンドです．そ
のコマンドは行の最初に書かれ，同じ行にカテゴリ，型の名前(@code{int}や
@code{float}のようなもの)，そして型のオブジェクトの属性名が続きます．こ
のため，このコマンドを@code{int}や@code{float}を記述するために使用するこ
とが可能で，その場合，カテゴリとして@code{data type}を使用することも可能
でしょう．(データの型は，実行可能なオペレーションを決定する目的に対する，
特定のオブジェクトのカテゴリです．)@refill

@c In Lisp, for example,  @dfn{pair} names a particular data
@c type, and an object of that type has two slots called the
@c @sc{car} and the @sc{cdr}.  Here is how you would write the first line
@c of a definition of @code{pair}.@refill
@c 
例えばLispでは，@dfn{pair}は特定のデータの型に名前を付け，その型のオブジェ
クトは@sc{car}と@sc{cdr}と呼ばれる二つのスロットを持ちます．@code{pair}
の定義の最初の行を書く方法は以下のようになります．@refill

@example
@group
@@deftp @{Data type@} pair car cdr
@dots{}
@@end deftp
@end group
@end example

@need 950
@c The template is:
@c 
テンプレートは以下の通りです．

@example
@group
@@deftp @var{category} @var{name-of-type} @var{attributes}@dots{}
@var{body-of-definition}
@@end deftp
@end group
@end example

@c @code{@@deftp} creates an entry in the index of data types.
@c 
@code{@@deftp}はデータの型の索引に項目を作成します．
@end table

@node Def Cmd Conventions, Sample Function Definition, Def Cmds in Detail, Definition Commands
@c @section Conventions for Writing Definitions
@section 定義を書くための慣習
@cindex Definition conventions
@cindex Conventions for writing definitions

@c When you write a definition using @code{@@deffn}, @code{@@defun}, or
@c one of the other definition commands, please take care to use
@c arguments that indicate the meaning, as with the @var{count} argument
@c to the @code{forward-word} function.  Also, if the name of an argument
@c contains the name of a type, such as @var{integer}, take care that the
@c argument actually is of that type.@refill
@c 
@code{@@deffn}，@code{@@defun}やその他の定義コマンドの一つを使用し定義を
書くとき，@code{forward-word}関数に対する@var{count}引数のように，意味を
示す引数の使用に注意してください．また，@var{integer}のように引数名が型
名を含んでいる場合，引数が実際にその型であるよう注意してください．
@refill

@node Sample Function Definition,  , Def Cmd Conventions, Definition Commands
@c @section A Sample Function Definition
@section 関数定義の見本
@cindex Function definitions
@cindex Command definitions
@cindex Macro definitions
@cindex Sample function definition

@c A function definition uses the @code{@@defun} and @code{@@end defun}
@c commands.  The name of the function follows immediately after the
@c @code{@@defun} command and it is followed, on the same line, by the
@c parameter list.@refill
@c 
関数定義は，@code{@@defun}と@code{@@end defun}を使用します．関数名は
@code{@@defun}コマンドの直後に続き，同じ行にパラメータリストが続きます．
@refill

@c Here is a definition from @ref{Calling Functions,,, elisp, The GNU Emacs
@c Lisp Reference Manual}.
@c 
@ref{Calling Functions,,, elisp, The GNU Emacs Lisp Reference Manual}の
定義には以下のものがあります．

@quotation
@defun apply function &rest arguments
@c @code{apply} calls @var{function} with @var{arguments}, just
@c like @code{funcall} but with one difference: the last of
@c @var{arguments} is a list of arguments to give to
@c @var{function}, rather than a single argument.  We also say
@c that this list is @dfn{appended} to the other arguments.
@c 
@code{apply}は@var{arguments}で@var{function}を呼び出し，@code{funcall} 
に似ていますが，一点が異なります．@var{arguments}の終りは，
@var{function} に与えられる単一の引数ではなく引数のリストです．我々は，
このリストが他の引数に@dfn{append}されるとも言っています．

@c @code{apply} returns the result of calling @var{function}.
@c As with @code{funcall}, @var{function} must either be a Lisp
@c function or a primitive function; special forms and macros
@c do not make sense in @code{apply}.
@c 
@code{apply}は@var{function}呼び出しの結果を返します．@code{funcall}のよ
うに，@var{function}はLisp関数やプリミティブ関数である必要があります．ス
ペシャルフォームとマクロは，@code{apply}では意味がありません．

@example
(setq f 'list)
    @result{} list
(apply f 'x 'y 'z)
@error{} Wrong type argument: listp, z
(apply '+ 1 2 '(3 4))
    @result{} 10
(apply '+ '(1 2 3 4))
    @result{} 10

(apply 'append '((a b c) nil (x y z) nil))
    @result{} (a b c x y z)
@end example

@c An interesting example of using @code{apply} is found in the description
@c of @code{mapcar}.@refill
@c 
@code{apply}を使用した興味深い例は，@code{mapcar}の記述で見付かります．
@refill
@end defun
@end quotation

@need 1200
@c In the Texinfo source file, this example looks like this:
@c 
Texinfoソースファイルでは，この例は以下のようになります．

@example
@group
@@defun apply function &rest arguments
@c @@code@{apply@} calls @@var@{function@} with
@c @@var@{arguments@}, just like @@code@{funcall@} but with one
@c difference: the last of @@var@{arguments@} is a list of
@c arguments to give to @@var@{function@}, rather than a single
@c argument.  We also say that this list is @@dfn@{appended@}
@c to the other arguments.
@c 
@@code@{apply@}は@@var@{arguments@}で@@var@{function@}を呼び出し，
@@code@{funcall@}に似ていますが，1点異なります．@@var@{arguments@}の終り
は，@@var@{function@}に与えられた単一の引数ではなく引数のリストです．我々
は，このリストが他の引数に@@dfn@{加えられる@}とも言っています．
@end group

@group
@c @@code@{apply@} returns the result of calling
@c @@var@{function@}.  As with @@code@{funcall@},
@c @@var@{function@} must either be a Lisp function or a
@c primitive function; special forms and macros do not make
@c sense in @@code@{apply@}.
@c 
@@code@{apply@}は@@var@{function@}呼び出しの結果を返します．
@@code@{funcall@}のように，@@var@{function@}はLisp関数やプリミティブ関数
である必要があります．スペシャルフォームとマクロは，@@code@{apply@}では
意味がありません．
@end group

@group
@@example
(setq f 'list)
    @@result@{@} list
(apply f 'x 'y 'z)
@@error@{@} Wrong type argument: listp, z
(apply '+ 1 2 '(3 4))
    @@result@{@} 10
(apply '+ '(1 2 3 4))
    @@result@{@} 10

(apply 'append '((a b c) nil (x y z) nil))
    @@result@{@} (a b c x y z)
@@end example
@end group

@group
@c An interesting example of using @@code@{apply@} is found
@c in the description of @@code@{mapcar@}.
@c 
@@code@{apply@}を使用した興味深い例は，@@code@{mapcar@}の記述で見付かり
ます．
@@end defun
@end group
@end example

@noindent
@c In this manual, this function is listed in the Command and Variable
@c Index under @code{apply}.@refill
@c 
このマニュアルでは，この関数は@code{apply}の下のコマンドと変数索引にリス
トアップされています．@refill

@c Ordinary variables and user options are described using a format like
@c that for functions except that variables do not take arguments.
@c 
通常の変数とユーザーオプションは，変数が引数を取らない以外，関数に対する
ものに似た書式を使用し記述されます．


@node Conditionals
@c @chapter Conditionally Visible Text
@chapter 目に見えるテキストの条件
@cindex Conditionally visible text
@cindex Text, conditionally visible
@cindex Visibility of conditional text
@cindex If text conditionally visible

@c Sometimes it is good to use different text for different output formats.
@c For example, you can use the @dfn{conditional commands} to specify
@c different text for the printed manual and the Info output.
@c 
異なる出力フォーマットに対し，異なるテキストを使用するのが良いこともあり
ます．例えば，印刷されたマニュアルとInfo出力に対し異なるテキストを指定す
る，@dfn{条件コマンド(conditional commands)}を使用することができます．

@c Conditional commands may not be nested.
@c 
条件コマンドは入れ子状にしてはいけません．

@c The conditional commands comprise the following categories.
@c 
条件コマンドは，以下のカテゴリから成り立ちます．

@itemize @bullet
@c @item Commands for HTML, Info, or @TeX{}.
@c @item Commands for not HTML, Info, or @TeX{}.
@c @item Raw @TeX{} or HTML commands.
@c @item
@c Substituting text for all formats, and testing if a flag is set or clear.
@c 
@item HTML，Info，または@TeX{}のためのコマンド．
@item HTML，Info，または@TeX{}ではないもののためのコマンド．
@item 生の@TeX{}やHTMLコマンド．
@item
全てのフォーマットに対しテキストを代入し，フラグが設定されているかクリア
されているか試すもの．
@end itemize

@menu
* Conditional Commands::        Specifying text for HTML, Info, or @TeX{}.
* Conditional Not Commands::    Specifying text for not HTML, Info, or @TeX{}.
* Raw Formatter Commands::      Using raw @TeX{} or HTML commands.
* set clear value::             Designating which text to format (for
                                 all output formats); and how to set a
                                 flag to a string that you can insert.
@end menu


@node Conditional Commands
@c @section Conditional Commands
@section 条件コマンド

@c Texinfo has an @code{@@if@dots{}} environment for each output format, to
@c allow conditional inclusion of text for a particular output format.
@c 
Texinfoには，特定の出力フォーマットにテキストを含める条件を利用可能にす
るために，それぞれの出力フォーマットに対して@code{@@if@dots{}}で囲む方法
があります．

@findex ifinfo
@c @code{@@ifinfo} begins segments of text that should be ignored by @TeX{}
@c when it typesets the printed manual.  The segment of text appears only
@c in the Info file and (for historical compatibility) the plain text
@c output.  The @code{@@ifinfo} command should appear on a line by itself;
@c end the Info-only text with a line containing @code{@@end ifinfo} by
@c itself.
@c 
@code{@@ifinfo}は，印刷されたマニュアルに植字されるとき，@TeX{}で無視さ
れるテキストの部分を開始します．テキストのその部分は，Infoファイル(歴史
的な互換性のため)とプレーンテキストの出力だけに現れます．@code{@@ifinfo} 
コマンドは単独行に書くべきです．単独行の@code{@@end ifinfo}を含む行で，
Infoのみのテキストを終えるべきです．

@findex ifhtml
@findex ifplaintext
@findex iftex
@findex ifxml
@c The @code{@@iftex} and @code{@@end iftex} commands are analogous to the
@c @code{@@ifinfo} and @code{@@end ifinfo} commands; they specify text that
@c will appear in the printed manual but not in the Info file.  Likewise
@c for @code{@@ifhtml} and @code{@@end ifhtml}, which specify text to
@c appear only in HTML output.  And for @code{@@ifplaintext} and
@c @code{@@end ifplaintext}, which specify text to appear only in plain
@c text output.  And for @code{@@ifxml} and
@c @code{@@end ifxml}, for the XML output.
@c 
@code{@@iftex}と@code{@@end iftex}コマンドは，@code{@@ifinfo}と
@code{@@end ifinfo}コマンドに類似しています．それらは，テキストが印刷さ
れたマニュアルに現れ，Infoファイルに現れないように指定します．
@code{@@ifhtml}と@code{@@end ifhtml}も同様で，テキストがHTML出力だけに現
すように指定します．そして，@code{@@ifplaintext}と@code{@@end
ifplaintext}も同様で，テキストがプレーンテキストの出力だけに現れるように
指定します．そして，@code{@@ifxml}と@code{@@end ifxml}は，XML出力に対す
るものです．

@c For example,
@c 
例えば，以下のようにします．

@example
@@iftex
@c This text will appear only in the printed manual.
@c 
このテキストは，印刷されたマニュアルだけに現れます．
@@end iftex
@@ifinfo
@c However, this text will appear only in Info (or plain text).
@c 
しかし，このテキストはInfo(またはプレーンテキスト)だけに現れます．
@@end ifinfo
@@ifhtml
@c And this text will only appear in HTML.
@c 
また，このテキストはHTMLだけに現れます．
@@end ifhtml
@@ifplaintext
@c Whereas this text will only appear in plain text.
@c 
但し，このテキストはプレーンテキストだけに現れます．
@@end ifplaintext
@@ifxml
@c And this will only appear in XML output.
@c 
そしてこれはXML出力だけに現れます．
@@end ifxml
@end example

@noindent
@c The preceding example produces the following line:
@c 
上記の例は，以下の行を生成します．
@iftex
@c This text will appear only in the printed manual.
@c 
このテキストは，印刷されたマニュアルだけに現れます．
@end iftex
@ifinfo
@c However, this text will appear only in Info (or plain text).
@c 
しかし，このテキストはInfo(またはプレーンテキスト)だけに現れます．
@end ifinfo
@ifhtml
@c And this text will only appear in HTML.
@c 
また，このテキストはHTMLだけに現れます．
@end ifhtml
@ifplaintext
@c Whereas this text will only appear in plain text.
@c 
但し，このテキストはプレーンテキストだけに現れます．
@end ifplaintext
@ifxml
@c And this will only appear in XML output.
@c 
そしてこれはXML出力だけに現れます．
@end ifxml

@noindent
@c Notice that you only see one of the input lines, depending on which
@c version of the manual you are reading.
@c 
読んでいるマニュアルのバージョンに依存して，入力行の一つのみ見えることに
注意してください．


@node Conditional Not Commands
@c @section Conditional Not Commands
@section 条件の否定コマンド
@findex ifnothtml
@findex ifnotinfo
@findex ifnotplaintext
@findex ifnottex
@findex ifnotxml

@c You can specify text to be included in any output format @emph{other}
@c than some given one with the @code{@@ifnot@dots{}} commands:
@c 
@code{@@ifnot@dots{}}コマンドで与えられたもの以外の，あらゆる出力フォー
マットに含まれるテキストを指定できます．
@example
@@ifnothtml @dots{} @@end ifnothtml
@@ifnotinfo @dots{} @@end ifnotinfo
@@ifnotplaintext @dots{} @@end ifnotplaintext
@@ifnottex @dots{} @@end ifnottex
@@ifnotxml @dots{} @@end ifnotxml
@end example
@noindent
@c The @code{@@ifnot@dots{}} command and the @code{@@end} command must
@c appear on lines by themselves in your actual source file.
@c 
@code{@@ifnot@dots{}}コマンドと@code{@@end}コマンドは，実際のソースファ
イルでは単独行で現します．

@c If the output file is being made in the given format, the
@c region is @emph{ignored}.  Otherwise, it is included.
@c 
出力ファイルが与えられたフォーマットで作成されている場合，その領域は
@emph{無視され}ます．それ以外の場合は含められます．

@c With one exception (for historical compatibility): @code{@@ifnotinfo}
@c text is omitted for both Info and plain text output, not just Info.  To
@c specify text which appears only in Info and not in plain text, use
@c @code{@@ifnotplaintext}, like this:
@c 
(歴史的な互換性のため)一つの例外があります．@code{@@ifnotinfo}テキストは，
Infoだけでなく，Infoとプレーンテキストの出力の両方で削除されます．テキス
トがInfoだけに現れてプレーンテキストに現れないように指定するため，以下の
ように@code{@@ifnotplaintext}を指定してください．
@example
@ifinfo
@ifnotplaintext
@c This will be in Info, but not plain text.
@c 
これはInfoにはありますが，プレーンテキストにはありません．
@end ifnotplaintext
@end ifinfo
@end example

@c The regions delimited by these commands are ordinary Texinfo source as
@c with @code{@@iftex}, not raw formatter source as with @code{@@tex}
@c (@pxref{Raw Formatter Commands}).
@c 
これらのコマンドで限定された領域は，@code{@@tex}で使用したような生のフォー
マッタソースではなく，@code{@@iftex}で使用したような通常のTexinfoソース
にします(@pxref{Raw Formatter Commands})．


@node Raw Formatter Commands
@c @section Raw Formatter Commands
@section 生の書式化コマンド
@cindex Raw formatter commands
@cindex @TeX{} commands, using ordinary
@cindex Ordinary @TeX{} commands, using
@cindex Commands using raw @TeX{}
@cindex HTML, including raw
@cindex XML, including raw
@cindex plain @TeX{}

@c Inside a region delineated by @code{@@iftex} and @code{@@end iftex}, you
@c can embed some raw @TeX{} commands.  Info will ignore these commands
@c since they are only in that part of the file which is seen by @TeX{}.
@c You can write the @TeX{} commands as you would write them in a normal
@c @TeX{} file, except that you must replace the @samp{\} used by @TeX{}
@c with an @samp{@@}.  For example, in the @code{@@titlepage} section of a
@c Texinfo file, you can use the @TeX{} command @code{@@vskip} to format
@c the copyright page.  (The @code{@@titlepage} command causes Info to
@c ignore the region automatically, as it does with the @code{@@iftex}
@c command.)
@c 
@code{@@iftex}と@code{@@end iftex}で線引きされた領域の内部に，生の@TeX{} 
コマンドを埋め込むことが可能です．@TeX{}が見るファイルの一部になるだけな
ので，Infoではこれらのコマンドは無視されます．@TeX{}で使用されている
@samp{\}を@samp{@@}に置換する必要がある以外，通常の@TeX{}ファイルで書い
ていたような@TeX{}コマンドを書くことが可能です．例えば，Texinfoファイル
の@code{@@titlepage}セクションで，著作権ページを書式化するための@TeX{}コ
マンド@code{@@vskip}を使用することが可能です．(@code{@@titlepage}コマン
ドは，@code{@@iftex}コマンドの使用と同じように，その領域を自動的にInfoに
無視させます．)

@c However, many features of plain @TeX{} will not work, as they are
@c overridden by Texinfo features.
@c 
しかし，プレーン@TeX{}の多くの機能は，Texinfoが優先されるので動作しませ
ん．

@findex tex
@c You can enter plain @TeX{} completely, and use @samp{\} in the @TeX{}
@c commands, by delineating a region with the @code{@@tex} and @code{@@end
@c tex} commands.  (The @code{@@tex} command also causes Info to ignore the
@c region, like the @code{@@iftex} command.)  The sole exception is that the
@c @code{@@} character still introduces a command, so that @code{@@end tex}
@c can be recognized properly.
@c 
@code{@@tex}と@code{@@end tex}コマンドで領域を線引きすることで，プレーン
@TeX{}を完全に入力し，@TeX{}コマンドで@samp{\}を使用することが可能です．
(@code{@@tex}コマンドでも，@code{@@iftex}コマンドのようにInfoは領域を無
視します．)唯一の例外は，@code{@@end tex}を正確に認識できるよう，
@code{@@}文字がまだコマンドを導入することです．

@cindex Mathematical expressions
@c For example, here is a mathematical expression written in
@c plain @TeX{}:
@c 
例えばここに，プレーン@TeX{}で書かれた数式があります．

@example
@@tex
$$ \chi^2 = \sum_@{i=1@}^N
         \left (y_i - (a + b x_i)
         \over \sigma_i\right)^2 $$
@@end tex
@end example

@noindent
@c The output of this example will appear only in a printed manual.  If
@c you are reading this in Info, you will not see the equation that appears
@c in the printed manual.
@c 
この例の出力は，印刷されたマニュアルにのみ現れます．Infoでこれを読んでい
る場合，印刷されたマニュアルに現れる等式は見ることはないでしょう．
@iftex
@c In a printed manual, the above expression looks like
@c this:
@c 
印刷されたマニュアルでは，上の式は以下のようになります．
@end iftex

@tex
$$ \chi^2 = \sum_{i=1}^N
         \left(y_i - (a + b x_i)
         \over \sigma_i\right)^2 $$
@end tex

@findex ifhtml
@findex html
@c Analogously, you can use @code{@@ifhtml @dots{} @@end ifhtml} to delimit
@c a region to be included in HTML output only, and @code{@@html @dots{}
@c @@end html} for a region of raw HTML (again, except that @code{@@} is
@c still the escape character, so the @code{@@end} command can be
@c recognized.)
@c 
同様に，HTML出力のみに含まれる領域を線引きするため，@code{@@ifhtml
@dots{} @@end ifhtml}を使用し，生のHTMLの領域に対し@code{@@html @dots{}
@@end html}を使用することができます(再びですが，例外的に@code{@@}はまだ
エスケープ文字なので，@code{@@end}コマンドを認識することが可能です．)

@findex ifxml
@findex xml
@c Analogously, you can use @code{@@ifxml @dots{} @@end ifxml} to delimit
@c a region to be included in XML output only, and @code{@@xml @dots{}
@c @@end xml} for a region of raw XML (again, except that @code{@@} is
@c still the escape character, so the @code{@@end} command can be
@c recognized.)
@c 
同様に，XML出力のみに含まれる領域を線引きするため，@code{@@ifxml @dots{}
@@end ifxml}を使用し，生のXMLの領域に対し@code{@@xml @dots{} @@end xml} 
を使用することが可能です(再びですが，例外的に@code{@@}はまだエスケープ文
字なので，@code{@@end}コマンドを認識することが可能です．)


@node set clear value
@c @section @code{@@set}, @code{@@clear}, and @code{@@value}
@section @code{@@set}，@code{@@clear}，そして@code{@@value}

@c You can direct the Texinfo formatting commands to format or ignore parts
@c of a Texinfo file with the @code{@@set}, @code{@@clear}, @code{@@ifset},
@c and @code{@@ifclear} commands.@refill
@c 
@code{@@set}，@code{@@clear}，@code{@@ifset}，そして@code{@@ifclear}コマ
ンドを用いて，直接Texinfo書式化コマンドにTexinfoファイルの一部を書式化さ
せたり無視させたりすることが可能です．@refill

@c Brief descriptions:
@c 
短い説明は以下のとおりです．

@table @code
@item @@set @var{flag} [@var{value}]
@c Set the variable @var{flag}, to the optional @var{value} if specifed.
@c 
変数@var{flag}を設定し，追加の@var{value}が指定されている場合はそれに設
定します．

@item @@clear @var{flag}
@c Undefine the variable @var{flag}, whether or not it was previously defined.
@c 
以前に定義されていたかどうかによらず，変数@var{flag}を未定義にします．

@item @@ifset @var{flag}
@c If @var{flag} is set, text through the next @code{@@end ifset} command
@c is formatted.  If @var{flag} is clear, text through the following
@c @code{@@end ifset} command is ignored.
@c 
@var{flag}が設定されている場合，次の@code{@@end ifset}コマンドまでのテキ
ストを書式化します．@var{flag}がクリアされている場合，次の@code{@@end
ifset}コマンドまでのテキストは無視されます．

@item @@ifclear @var{flag}
@c If @var{flag} is set, text through the next @code{@@end ifclear} command
@c is ignored.  If @var{flag} is clear, text through the following
@c @code{@@end ifclear} command is formatted.
@c 
@var{flag}が設定されている場合，次の@code{@@end ifclear}コマンドまでのテ
キストは無視されます．@var{flag}がクリアされている場合，次の@code{@@end
ifclear}コマンドまでのテキストを書式化します．
@end table

@menu
* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.
@end menu


@node set value
@c @subsection @code{@@set} and @code{@@value}
@subsection @code{@@set}と@code{@@value}
@findex value

@c You use the @code{@@set} command to specify a value for a flag, which is
@c later expanded by the @code{@@value} command.
@c 
フラグに対する値を指定するために@code{@@set}コマンドを使用し，それは後に
@code{@@value}コマンドで展開されます．

@c A @dfn{flag} is an identifier.  In general, it is best to use only
@c letters and numerals in a flag name, not @samp{-} or @samp{_}---they
@c will work in some contexts, but not all, due to limitations in @TeX{}.
@c 
@dfn{フラグ(flag)}は識別子です．一般的に，フラグ名には文字と数字のみを使
用し，@samp{-}や@samp{_}は使用しないことが最善です --- それらが動作する
文脈もありますが，@TeX{}の制限のため全てが動作するわけではありません．

@c The value is the remainder of the input line, and can contain anything.
@c 
値は入力行の残りの文字による文字列で，あらゆるものを含めることが可能です．

@c Write the @code{@@set} command like this:
@c 
@code{@@set}コマンドは以下のように書きます．

@example
@c @@set foo This is a string.
@c 
@@set foo これは文字列です．
@end example

@noindent
@c This sets the value of the flag @code{foo} to ``This is a string.''.
@c 
これは，フラグ@code{foo}の値を``これは文字列です''に設定します．

@c The Texinfo formatters then replace an @code{@@value@{@var{flag}@}}
@c command with the string to which @var{flag} is set.  Thus, when
@c @code{foo} is set as shown above, the Texinfo formatters convert this:
@c 
そのとき，Texinfoフォーマッタは@code{@@value@{@var{flag}@}}コマンドを
@var{flag}に設定された文字列に置換します．このため@code{foo}が上記のよう
に設定されている場合，Texinfoフォーマッタは以下のように変換します．

@example
@group
@@value@{foo@}
@c @exdent @r{to this:}
@c This is a string.
@c 
@exdent @r{上記を以下に変換}
これは文字列です
@end group
@end example

@c You can write an @code{@@value} command within a paragraph; but you
@c must write an @code{@@set} command on a line of its own.
@c 
@code{@@value}コマンドを段落の中に書くことも可能です．しかし，
@code{@@set}コマンドは単独行に書く必要があります．

@c If you write the @code{@@set} command like this:
@c 
@code{@@set}コマンドを以下のように書く場合を考えます．

@example
@@set foo
@end example

@noindent
@c without specifying a string, the value of @code{foo} is the empty string.
@c 
文字列を指定していないので，@code{foo}の値は空の文字列になります．

@c If you clear a previously set flag with @code{@@clear @var{flag}}, a
@c subsequent @code{@@value@{flag@}} command will report an error.
@c 
@code{@@clear @var{flag}}で前に設定されたフラグをクリアする場合，それに
続く@code{@@value@{flag@}}コマンドはエラーを報告します．

@c For example, if you set @code{foo} as follows:@refill
@c 
例えば，以下のように@code{foo}を設定した場合を考えます．@refill

@example
@@set how-much very, very, very
@end example

@noindent
@c then the formatters transform
@c 
そのとき，フォーマッタは以下のように変換します．

@example
@group
It is a @@value@{how-much@} wet day.
@c @exdent @r{into}
@c 
@exdent @r{上記を以下変換}
It is a very, very, very wet day.
@end group
@end example

@c If you write
@c 
以下のように書いた場合を考えます．

@example
@@clear how-much
@end example

@noindent
@c then the formatters transform
@c 
そのとき，フォーマッタは以下のように変換します．

@example
@group
It is a @@value@{how-much@} wet day.
@c @exdent @r{into}
@c 
@exdent @r{上記を以下に変換}
It is a @{No value for "how-much"@} wet day.
@end group
@end example


@node ifset ifclear
@c @subsection @code{@@ifset} and @code{@@ifclear}
@subsection @code{@@ifset}と@code{@@ifclear}

@findex ifset
@c When a @var{flag} is set, the Texinfo formatting commands format text
@c between subsequent pairs of @code{@@ifset @var{flag}} and @code{@@end
@c ifset} commands.  When the @var{flag} is cleared, the Texinfo formatting
@c commands do @emph{not} format the text.  @code{@@ifclear} operates
@c analogously.
@c 
@var{flag}が設定されているとき，Texinfo書式化コマンドは，それ以降の
@code{@@ifset @var{flag}}と@code{@@end ifset}コマンドの組の間にあるテキ
ストを書式化します．@var{flag}がクリアされているとき，Texinfo書式化コマ
ンドはテキストを書式化@emph{しません}．@code{@@ifclear}は同様に処理しま
す．

@c Write the conditionally formatted text between @code{@@ifset @var{flag}}
@c and @code{@@end ifset} commands, like this:
@c 
条件によって書式化されるテキストは，@code{@@ifset @var{flag}}と
@code{@@end ifset}コマンドの間に，以下のように書いてください．

@example
@group
@@ifset @var{flag}
@var{conditional-text}
@@end ifset
@end group
@end example

@c For example, you can create one document that has two variants, such as
@c a manual for a `large' and `small' model:
@c 
例えば，`large'と`small'モデルに対するマニュアルのような，二つの形態があ
る一つのドキュメントを作成することが可能です．

@cindex shrubbery
@example
@c You can use this machine to dig up shrubs
@c without hurting them.
@c 
潅木を傷つけずに掘り出すために，
この機械を使用することが可能です．

@@set large

@@ifset large
@c It can also dig up fully grown trees.
@c 
それは，十分大きく育った木も掘り出すことも可能です．
@@end ifset

@c Remember to replant promptly @dots{}
@c 
すぐに植え直すことを忘れないでください@dots{}
@end example

@noindent
@c In the example, the formatting commands will format the text between
@c @code{@@ifset large} and @code{@@end ifset} because the @code{large}
@c flag is set.
@c 
例では，書式化コマンドは，@code{large}フラグが設定されているので，
@code{@@ifset large}と@code{@@end ifset}の間のテキストを書式化します．
@refill

@c When @var{flag} is cleared, the Texinfo formatting commands do
@c @emph{not} format the text between @code{@@ifset @var{flag}} and
@c @code{@@end ifset}; that text is ignored and does not appear in either
@c printed or Info output.
@c 
@var{flag}がクリアされているとき，Texinfo書式化コマンドは@code{@@ifset
@var{flag}}と@code{@@end ifset}の間のテキストを書式化@emph{しません}．テ
キストは無視され，印刷された出力にもInfo出力にも現れません．

@c For example, if you clear the flag of the preceding example by writing
@c an @code{@@clear large} command after the @code{@@set large} command
@c (but before the conditional text), then the Texinfo formatting commands
@c ignore the text between the @code{@@ifset large} and @code{@@end ifset}
@c commands.  In the formatted output, that text does not appear; in both
@c printed and Info output, you see only the lines that say, ``You can use
@c this machine to dig up shrubs without hurting them.  Remember to replant
@c promptly @dots{}''.
@c 
例えば前の例で，@code{@@set large}コマンドの後(で，条件テキストの前)に
@code{@@clear large}コマンドを書いてフラグをクリアする場合，Texinfo書式
化コマンドは，@code{@@ifset large}と@code{@@end ifset}コマンドの間のテキ
ストを無視します．書式化された出力では，``潅木を傷つけずに掘り出すために，
この機械を使用することが可能です．すぐに植え直すことを忘れないでください
@dots{}''という行のみ見えるでしょう．

@findex ifclear
@c If a flag is cleared with an @code{@@clear @var{flag}} command, then
@c the formatting commands format text between subsequent pairs of
@c @code{@@ifclear} and @code{@@end ifclear} commands.  But if the flag
@c is set with @code{@@set @var{flag}}, then the formatting commands do
@c @emph{not} format text between an @code{@@ifclear} and an @code{@@end
@c ifclear} command; rather, they ignore that text.  An @code{@@ifclear}
@c command looks like this:
@c 
@code{@@clear @var{flag}}コマンドでフラグがクリアされている場合，書式化
コマンドは@code{@@ifclear}と@code{@@end ifclear}コマンドの組の間のテキス
トを書式化します．しかし@code{@@set @var{flag}}でフラグが設定されている
場合，書式化コマンドは@code{@@ifclear}と@code{@@end ifclear}コマンドの間
のテキストを書式化@emph{しません}．というよりはむしろ，それらのテキスト
を無視します．@code{@@ifclear}コマンドは以下のようにします．

@example
@@ifclear @var{flag}
@end example


@node value Example
@c @subsection @code{@@value} Example
@subsection @code{@@value}の例

@c You can use the @code{@@value} command to minimize the number of places
@c you need to change when you record an update to a manual.  @xref{GNU
@c Sample Texts}, for an example of this same principle can work with
@c Automake distributions, and full texts.
@c 
@code{@@value}コマンドを，マニュアル更新時に変更する必要がある部分の数を
最小限にするために使用することが可能です．Automakeの配布物を用いた同じ原
理の例とその完全なテキストは，@xref{GNU Sample Texts}.

@c Here is an example adapted from @ref{Top,, Overview, make, The GNU Make
@c Manual}):
@c 
@ref{Top,, Overview, make, The GNU Make Manual})からの適用例は以下のよう
になります．

@enumerate
@item
@c Set the flags:
@c 
フラグを設定します．

@example
@group
@@set EDITION 0.35 Beta
@@set VERSION 3.63 Beta
@@set UPDATED 14 August 1992
@@set UPDATE-MONTH August 1992
@end group
@end example

@item
@c Write text for the @code{@@copying} section (@pxref{copying}):
@c 
@code{@@copying}セクション(@pxref{copying})に対するテキストを書きます．

@example
@group
@@copying
This is Edition @@value@{EDITION@},
last updated @@value@{UPDATED@},
of @@cite@{The GNU Make Manual@},
for @@code@{make@}, version @@value@{VERSION@}.

Copyright @dots{}

Permission is granted @dots{}
@@end copying
@end group
@end example

@item
@c Write text for the title page, for people reading the printed manual:
@c 
印刷されたマニュアルの読者に対し，タイトルページのためのテキストを書きま
す．

@example
@group
@@titlepage
@@title GNU Make
@@subtitle A Program for Directing Recompilation
@@subtitle Edition @@value@{EDITION@}, @dots{}
@@subtitle @@value@{UPDATE-MONTH@}
@@page
@@insertcopying
@dots{}
@@end titlepage
@end group
@end example

@noindent
@c (On a printed cover, a date listing the month and the year looks less
@c fussy than a date listing the day as well as the month and year.)
@c 
(印刷されたカバーでは，月と年だけでなくその日までリストアップした日付で
なく，月と年をリストアップした日付でも曖昧ではないでしょう．)

@item
@c Write text for the Top node, for people reading the Info file:
@c 
Infoファイルの読者に対し，Topノードに対するテキストを書きます．

@example
@group
@@ifnottex
@@node Top
@@top Make

@@insertcopying
@dots{}
@@end ifnottex
@end group
@end example

@c After you format the manual, the @code{@@value} constructs have been
@c expanded, so the output contains text like this:
@c 
マニュアルを書式化後，@code{@@value}の構成物は展開されるので，出力物には
以下のようなテキストが含まれています．

@example
@group
This is Edition 0.35 Beta, last updated 14 August 1992,
of `The GNU Make Manual', for `make', Version 3.63 Beta.
@end group
@end example
@end enumerate

@c When you update the manual, you change only the values of the flags; you
@c do not need to edit the three sections.
@c 
マニュアルを更新したとき，フラグの値のみを変更してください．三つのセクショ
ンを編集する必要はありません．


@node Internationalization
@c @chapter Internationalization
@chapter 国際化

@cindex Internationalization
@c Texinfo has some support for writing in languages other than English,
@c although this area still needs considerable work.
@c 
Texinfoは，英語以外の言語で書くためのサポートもありますが，この領域は，
まだ重要な仕事を必要とします．

@c For a list of the various accented and special characters Texinfo
@c supports, see @ref{Inserting Accents}.
@c 
Texinfoがサポートする，さまざまなアクセントと特別な文字のリストは，
@ref{Inserting Accents}を参照してください．

@menu
* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.
@end menu


@node documentlanguage
@c @section @code{@@documentlanguage @var{cc}}: Set the Document Language
@section @code{@@documentlanguage @var{cc}}: ドキュメントの言語の設定

@findex documentlanguage
@cindex Language, declaring
@cindex Document language, declaring

@c The @code{@@documentlanguage} command declares the current document
@c language.  Write it on a line by itself, with a two-letter ISO-639
@c language code following (list is included below).  If you have a
@c multilingual document, the intent is to be able to use this command
@c multiple times, to declare each language change.  If the command is not
@c used at all, the default is @code{en} for English.
@c 
@code{@@documentlanguage}コマンドは，現在のドキュメント言語を宣言します．
単独行に，二文字のISO-639言語コードを続けてください(リストは以下に含まれ
ています)．複数言語のドキュメントがある場合，目的は，それぞれの言語に変
更を宣言するため，何回もこのコマンドを使用することで可能となります．コマ
ンドが全く使用されていない場合，デフォルトは英語の@code{en}です．

@cindex @file{txi-@var{cc}.tex}
@c At present, this command is ignored in Info and HTML output.  For
@c @TeX{}, it causes the file @file{txi-@var{cc}.tex} to be read (if it
@c exists).  Such a file appropriately redefines the various English words
@c used in @TeX{} output, such as `Chapter', `See', and so on.
@c 
現在，このコマンドはInfoとHTML出力では無視されます．@TeX{}に対して，それ
はファイル@file{txi-@var{cc}.tex}を読み込ませます(存在する場合)．そのよ
うなファイルは，適切に@TeX{}出力で使用されている`Chapter'，`See'等のよう
な様々な英単語を再定義します．

@cindex Hyphenation patterns, language-dependent
@c It would be good if this command also changed @TeX{}'s ideas of the
@c current hyphenation patterns (via the @TeX{} primitive
@c @code{\language}), but this is unfortunately not currently implemented.
@c 
このコマンドが，@TeX{}の現在のハイフネーションパターン思考を(@TeX{}プリ
ミティブの@code{\language}で)変更すると良いのですが，これは残念ながら，
現在は実装されていません．

@cindex ISO 639 codes
@cindex Language codes
@c Hereare the valid language codes, from ISO-639.
@c 
ISO-639からの有効な言語コードは以下のようになります．

@multitable @columnfractions .07 .26 .07 .26 .07 .26
@item
@code{aa} @tab Afar @tab
@code{ab} @tab Abkhazian @tab
@code{af} @tab Afrikaans
@item
@code{am} @tab Amharic @tab
@code{ar} @tab Arabic @tab
@code{as} @tab Assamese
@item
@code{ay} @tab Aymara @tab
@code{az} @tab Azerbaijani @tab
@code{ba} @tab Bashkir
@item
@code{be} @tab Byelorussian @tab
@code{bg} @tab Bulgarian @tab
@code{bh} @tab Bihari
@item
@code{bi} @tab Bislama @tab
@code{bn} @tab Bengali; Bangla @tab
@code{bo} @tab Tibetan
@item
@code{br} @tab Breton @tab
@code{ca} @tab Catalan @tab
@code{co} @tab Corsican
@item
@code{cs} @tab Czech @tab
@code{cy} @tab Welsh @tab
@code{da} @tab Danish
@item
@code{de} @tab German @tab
@code{dz} @tab Bhutani @tab
@code{el} @tab Greek
@item
@code{en} @tab English @tab
@code{eo} @tab Esperanto @tab
@code{es} @tab Spanish
@item
@code{et} @tab Estonian @tab
@code{eu} @tab Basque @tab
@code{fa} @tab Persian
@item
@code{fi} @tab Finnish @tab
@code{fj} @tab Fiji @tab
@code{fo} @tab Faroese
@item
@code{fr} @tab French @tab
@code{fy} @tab Frisian @tab
@code{ga} @tab Irish
@item
@code{gd} @tab Scots Gaelic @tab
@code{gl} @tab Galician @tab
@code{gn} @tab Guarani
@item
@code{gu} @tab Gujarati @tab
@code{ha} @tab Hausa @tab
@code{he} @tab Hebrew
@item
@code{hi} @tab Hindi @tab
@code{hr} @tab Croatian @tab
@code{hu} @tab Hungarian
@item
@code{hy} @tab Armenian @tab
@code{ia} @tab Interlingua @tab
@code{id} @tab Indonesian
@item
@code{ie} @tab Interlingue @tab
@code{ik} @tab Inupiak @tab
@code{is} @tab Icelandic
@item
@code{it} @tab Italian @tab
@code{iu} @tab Inuktitut @tab
@code{ja} @tab Japanese
@item
@code{jw} @tab Javanese @tab
@code{ka} @tab Georgian @tab
@code{kk} @tab Kazakh
@item
@code{kl} @tab Greenlandic @tab
@code{km} @tab Cambodian @tab
@code{kn} @tab Kannada
@item
@code{ks} @tab Kashmiri @tab
@code{ko} @tab Korean @tab
@code{ku} @tab Kurdish
@item
@code{ky} @tab Kirghiz @tab
@code{la} @tab Latin @tab
@code{ln} @tab Lingala
@item
@code{lt} @tab Lithuanian @tab
@code{lo} @tab Laothian @tab
@code{lv} @tab Latvian, Lettish
@item
@code{mg} @tab Malagasy @tab
@code{mi} @tab Maori @tab
@code{mk} @tab Macedonian
@item
@code{ml} @tab Malayalam @tab
@code{mn} @tab Mongolian @tab
@code{mo} @tab Moldavian
@item
@code{mr} @tab Marathi @tab
@code{ms} @tab Malay @tab
@code{mt} @tab Maltese
@item
@code{my} @tab Burmese @tab
@code{na} @tab Nauru @tab
@code{ne} @tab Nepali
@item
@code{nl} @tab Dutch @tab
@code{no} @tab Norwegian @tab
@code{oc} @tab Occitan
@item
@code{om} @tab (Afan) Oromo @tab
@code{or} @tab Oriya @tab
@code{pa} @tab Punjabi
@item
@code{pl} @tab Polish @tab
@code{ps} @tab Pashto, Pushto @tab
@code{pt} @tab Portuguese
@item
@code{qu} @tab Quechua @tab
@code{rm} @tab Rhaeto-Romance @tab
@code{rn} @tab Kirundi
@item
@code{ro} @tab Romanian @tab
@code{ru} @tab Russian @tab
@code{rw} @tab Kinyarwanda
@item
@code{sa} @tab Sanskrit @tab
@code{sd} @tab Sindhi @tab
@code{sg} @tab Sangro
@item
@code{sh} @tab Serbo-Croatian @tab
@code{si} @tab Sinhalese @tab
@code{sk} @tab Slovak
@item
@code{sl} @tab Slovenian @tab
@code{sm} @tab Samoan @tab
@code{sn} @tab Shona
@item
@code{so} @tab Somali @tab
@code{sq} @tab Albanian @tab
@code{sr} @tab Serbian
@item
@code{ss} @tab Siswati @tab
@code{st} @tab Sesotho @tab
@code{su} @tab Sundanese
@item
@code{sv} @tab Swedish @tab
@code{sw} @tab Swahili @tab
@code{ta} @tab Tamil
@item
@code{te} @tab Telugu @tab
@code{tg} @tab Tajik @tab
@code{th} @tab Thai
@item
@code{ti} @tab Tigrinya @tab
@code{tk} @tab Turkmen @tab
@code{tl} @tab Tagalog
@item
@code{tn} @tab Setswana @tab
@code{to} @tab Tonga @tab
@code{tr} @tab Turkish
@item
@code{ts} @tab Tsonga @tab
@code{tt} @tab Tatar @tab
@code{tw} @tab Twi
@item
@code{ug} @tab Uighur @tab
@code{uk} @tab Ukrainian @tab
@code{ur} @tab Urdu
@item
@code{uz} @tab Uzbek @tab
@code{vi} @tab Vietnamese @tab
@code{vo} @tab Volapuk
@item
@code{wo} @tab Wolof @tab
@code{xh} @tab Xhosa @tab
@code{yi} @tab Yiddish
@item
@code{yo} @tab Yoruba @tab
@code{za} @tab Zhuang @tab
@code{zh} @tab Chinese
@item
@code{zu} @tab Zulu
@end multitable


@node documentencoding
@c @section @code{@@documentencoding @var{enc}}: Set Input Encoding
@section @code{@@documentencoding @var{enc}}: 入力エンコードの設定

@findex documentencoding
@cindex Encoding, declaring
@cindex Input encoding, declaring
@cindex Document input encoding

@c The @code{@@documentencoding} command declares the input document
@c encoding.  Write it on a line by itself, with a valid encoding
@c specification following, such as @samp{ISO-8859-1}.
@c 
@code{@@documentencoding}コマンドは，入力ドキュメントのエンコードを宣言
します．単独行に，@samp{ISO-8859-1}のような有効なエンコード指定を続けて
書いてください．

@cindex http-equiv, and charset
@cindex meta HTML tag, and charset
@c At present, this is used only in HTML output from @code{makeinfo}.  If a
@c document encoding @var{enc} is specified, it is used in a
@c @samp{<meta>} tag included in the @samp{<head>} of the output:
@c 
現在，これは@command{makeinfo}のHTML出力のみで使用されています．ドキュメ
ントエンコード@var{enc}が指定されている場合，出力の@samp{<head>}に含まれ
ている@samp{<meta>}タグで使用されます．

@example
<meta http-equiv="Content-Type" content="text/html;
     charset=@var{enc}">
@end example


@node Defining New Texinfo Commands
@c @chapter Defining New Texinfo Commands
@chapter 新しいTexinfoコマンドの定義
@cindex Macros
@cindex Defining new Texinfo commands
@cindex New Texinfo commands, defining
@cindex Texinfo commands, defining new
@cindex User-defined Texinfo commands

@c Texinfo provides several ways to define new commands:
@c 
Texinfoは，新しいコマンドを定義する様々なコマンドを提供します．

@itemize @bullet
@item
@c A Texinfo @dfn{macro} allows you to define a new Texinfo command as any
@c sequence of text and/or existing commands (including other macros).  The
@c macro can have any number of @dfn{parameters}---text you supply each
@c time you use the macro.
@c 
Texinfo@dfn{マクロ(macro)}では，テキストと/または既存のコマンド(他のマク
ロを含む)の列として，新しいTexinfoコマンドの定義が可能です．マクロは，あ
らゆる数の@dfn{パラメータ(parameters)} --- マクロの使用と同時に提供する
テキスト --- を取ることが可能です．

@c Incidentally, these macros have nothing to do with the @code{@@defmac}
@c command, which is for documenting macros in the subject of the manual
@c (@pxref{Def Cmd Template}).
@c 
さらに，これらのマクロは@code{@@defmac}コマンドと関係が無く，それは，マ
ニュアルのサブジェクトでドキュメント化されるマクロです(@pxref{Def Cmd
Template})．

@item
@c @samp{@@alias} is a convenient way to define a new name for an existing
@c command.
@c 
@samp{@@alias}は，既存のコマンドに対する新しい名前を定義する便利な方法で
す．

@item
@c @samp{@@definfoenclose} allows you to define new commands with
@c customized output in the Info file.
@c 
@samp{@@definfoenclose}で，Infoファイルのカスタマイズされた出力で新しい
コマンドの定義が可能です．

@end itemize

@menu
* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.
@end menu


@node Defining Macros
@c @section Defining Macros
@section マクロの定義
@cindex Defining macros
@cindex Macro definitions

@findex macro
@c You use the Texinfo @code{@@macro} command to define a macro, like this:
@c 
マクロを定義するため，以下のようにTexinfoの@code{@@macro}コマンドを使用
します．

@example
@@macro @var{macroname}@{@var{param1}, @var{param2}, @dots{}@}
@var{text} @dots{} \@var{param1}\ @dots{}
@@end macro
@end example

@c The @dfn{parameters} @var{param1}, @var{param2}, @dots{} correspond to
@c arguments supplied when the macro is subsequently used in the document
@c (described in the next section).
@c 
@dfn{パラメータ(parameters)}の@var{param1}，@var{param2}，@dots{}は，後
でマクロをドキュメントで使用するとき(次のセクションで記述します)に供給さ
れる引数に対応します．

@c For a macro to work with @TeX{}, @var{macroname} must consist entirely
@c of letters: no digits, hyphens, underscores, or other special characters.
@c 
マクロが@TeX{}で動作するため，@var{macroname}は完全に文字から成り立って
いる必要があります．数字，ハイフン，アンダースコア，または他の特別な文字
を含めてはいけません．

@c If a macro needs no parameters, you can define it either with an empty
@c list (@samp{@@macro foo @{@}}) or with no braces at all (@samp{@@macro
@c foo}).
@c 
マクロがパラメータを必要としない場合，空のリスト(@samp{@@macro foo
@{@}})，またはカッコ無し(@samp{@@macro foo})で定義することが可能です．

@cindex Body of a macro
@cindex Mutually recursive macros
@cindex Recursion, mutual
@c The definition or @dfn{body} of the macro can contain most Texinfo
@c commands, including previously-defined macros.  Not-yet-defined macro
@c invocations are not allowed; thus, it is not possible to have mutually
@c recursive Texinfo macros.  Also, a macro definition that defines another
@c macro does not work in @TeX{} due to limitations in the design of
@c @code{@@macro}.
@c 
定義やマクロの@dfn{本体(body)}は，前に定義されたマクロを含め，ほとんどの
Texinfoコマンドを含めることが可能です．まだ定義されていないマクロの呼び
出しはできません．このため，相互に繰り返されるTexinfoマクロを持つことは
不可能です．また，他のマクロを定義するマクロ定義は，@code{@@macro}の設計
の制限のため，@TeX{}では動作しません．

@cindex Parameters to macros
@c In the macro body, instances of a parameter name surrounded by
@c backslashes, as in @samp{\@var{param1}\} in the example above, are
@c replaced by the corresponding argument from the macro invocation.  You
@c can use parameter names any number of times in the body, including zero.
@c 
マクロの本体では，上記の例では@samp{\@var{param1}\}のようにバックスラッ
シュで囲まれているパラメータ名のインスタンスは，マクロ呼び出しでの対応す
る引数で置換されます．パラメータ名は，ゼロ回を含め何度でも本体で使用可能
です．

@cindex Backslash in macros
@c To get a single @samp{\} in the macro expansion, use @samp{\\}.  Any
@c other use of @samp{\} in the body yields a warning.
@c 
マクロ式での単一の@samp{\}を得るため，@samp{\\}を使用してください．ほか
のあらゆる本体での@samp{\}の使用は警告されます．

@cindex Spaces in macros
@cindex Whitespace in macros
@c The newlines after the @code{@@macro} line and before the @code{@@end
@c macro} line are ignored, that is, not included in the macro body.  All
@c other whitespace is treated according to the usual Texinfo rules.
@c 
@code{@@macro}行の後と@code{@@end macro}行の前の改行は無視されるので，マ
クロ本体に含まれません．全ての他の空白は通常のTexinfoの規則に従って扱わ
れます．

@cindex Recursive macro invocations
@findex rmacro
@c To allow a macro to be used recursively, that is, in an argument to a
@c call to itself, you must define it with @samp{@@rmacro}, like this:
@c 
マクロを再帰的に使用可能にするため，すなわち，引数としてそれ自身を呼び出
すため，以下のように@samp{@@rmacro}で定義する必要があります．

@example
@@rmacro rmac @{arg@}
a\arg\b
@@end rmacro
@dots{}
@@rmac@{1@@rmac@{text@}2@}
@end example

@c This produces the output `a1atextb2b'.  With @samp{@@macro} instead of
@c @samp{@@rmacro}, an error message is given.
@c 
これは，出力`a1atextb2b'を生成します．@samp{@@rmacro}の代わりに
@samp{@@macro}を用いた場合，エラーメッセージが表示されるでしょう．

@findex unmacro
@cindex Macros, undefining
@cindex Undefining macros
@c You can undefine a macro @var{foo} with @code{@@unmacro @var{foo}}.
@c It is not an error to undefine a macro that is already undefined.
@c For example:
@c 
@code{@@unmacro @var{foo}}を用いて，マクロ@var{foo}を未定義にすることが
可能です．既に未定義にされたマクロを未定義にすることはエラーではありませ
ん．例えば以下のようにします．

@example
@@unmacro foo
@end example


@node Invoking Macros
@c @section Invoking Macros
@section マクロの呼び出し
@cindex Invoking macros
@cindex Expanding macros
@cindex Running macros
@cindex Macro invocation

@c After a macro is defined (see the previous section), you can use
@c (@dfn{invoke}) it in your document like this:
@c 
マクロの定義後(前のセクションを参照してください)，以下のようにドキュメン
トで使用(@dfn{呼び出し(invoke)})可能です．

@example
@@@var{macroname} @{@var{arg1}, @var{arg2}, @dots{}@}
@end example

@noindent
@c and the result will be just as if you typed the body of
@c @var{macroname} at that spot.  For example:
@c 
そして，結果はその場所に@var{macroname}本体を入力したかのようになります．
例えば以下のようにします．

@example
@@macro foo @{p, q@}
Together: \p\ & \q\.
@@end macro
@@foo@{a, b@}
@end example

@noindent
@c produces:
@c 
以下を生成します．

@display
Together: a & b.
@end display

@cindex Backslash, and macros
@c Thus, the arguments and parameters are separated by commas and delimited
@c by braces; any whitespace after (but not before) a comma is ignored.
@c The braces are required in the invocation (but not the definition), even
@c when the macro takes no arguments, consistent with all other Texinfo
@c commands.  For example:
@c 
このため，引数とパラメータはカンマで分けられ，カッコで範囲を制限します．
カンマの後(前は違います)のあらゆる空白は無視されます．マクロが引数を取ら
ない場合でもカッコは呼び出しで(定義では違います)要求され，他の全ての
Texinfoコマンドとの一貫性を保ちます．

@example
@@macro argless @{@}
@c No arguments here.
@c 
ここに引数はありません．
@@end macro
@@argless@{@}
@end example

@noindent
@c produces:
@c 
以下を生成します．

@display
@c No arguments here.
@c 
ここに引数はありません．
@end display

@cindex Comma, in macro arguments
@cindex Braces, in macro arguments
@c To insert a comma, brace, or backslash in an argument, prepend a
@c backslash, as in
@c 
カンマ，カッコ，またはバックスラッシュを引数に挿入するため，以下のように
バックスラッシュを前置します．

@example
@@@var{macname} @{\\\@{\@}\,@}
@end example

@noindent
@c which will pass the (almost certainly error-producing) argument
@c @samp{\@{@},} to @var{macname}.  However, commas in parameters, even
@c if escaped by a backslash, might cause trouble in @TeX{}.
@c 
それは，引数@samp{\@{@},}を@var{macname}に渡します(ほとんど確実にエラー
を生成します)．しかし，カッコ内のカンマはバックスラッシュでエスケープさ
れていても．@TeX{}で問題になるでしょう．

@c If the macro is defined to take a single argument, and is invoked
@c without any braces, the entire rest of the line after the macro name is
@c supplied as the argument.  For example:
@c 
マクロが単一の引数を取るように定義されていて，カッコ無しで呼び出された場
合，マクロ名の後の行の残り全体は引数として供給されます．例えば，以下のよ
うになります．

@example
@@macro bar @{p@}
Twice: \p\ & \p\.
@@end macro
@@bar aah
@end example

@noindent
@c produces:
@c 
以下を生成します．

@c Sorry for cheating, but let's not require macros to process the manual.
@display
Twice: aah & aah.
@end display

@c If the macro is defined to take a single argument, and is invoked with
@c braces, the braced text is passed as the argument, regardless of
@c commas.  For example:
@c 
マクロが単一の引数を取るように定義されていて，カッコ付で呼び出された場合，
カンマにかかわらずカッコ付のテキストは引数として渡されます．例えば以下の
ようになります．

@example
@@macro bar @{p@}
Twice: \p\ & \p\.
@@end macro
@@bar@{a,b@}
@end example

@noindent
@c produces:
@c 
以下を生成します．

@display
Twice: a,b & a,b.
@end display


@node Macro Details
@c @section Macro Details
@section マクロの詳細
@cindex Macro details
@cindex Details of macro usage

@c Due to unavoidable disparities in the @TeX{} and @command{makeinfo}
@c implementations, Texinfo macros have the following limitations.
@c 
@TeX{}と@command{makeinfo}の実装には避けることのできない相違があるので，
Texinfoマクロは以下の制限があります．

@itemize @bullet
@item
@c All macros are expanded inside at least one @TeX{} group.  This means
@c that @code{@@set} and other such commands will have no effect inside a
@c macro.
@c 
マクロは少なくとも一つの@TeX{}グループに展開されます．これは，
@code{@@set}とその他の類似のコマンドはマクロで効果がないことを意味します．

@item
@c Macros containing a command which must be on a line by itself, such as a
@c conditional, cannot be invoked in the middle of a line.
@c 
条件文のような単独行となるコマンドを含むマクロは，行の中間で呼び出すこと
は不可能です．

@item
@c Commas in macro arguments, even if escaped by a backslash, don't
@c always work.
@c 
マクロ引数内のカンマは，バックスラッシュでエスケープされている場合でも，
常に動作するわけではありません．

@item
@c The @TeX{} implementation cannot construct macros that define macros in
@c the natural way.  To do this, you must use conditionals and raw @TeX{}.
@c For example:
@c 
@TeX{}の実装では，自然な方法でマクロを定義するマクロを構築できません．こ
うするためには，条件文と生の@TeX{}を使用します．例えば以下のようにします．

@example
@@ifnottex
@@macro ctor @{name, arg@}
@@macro \name\
something involving \arg\ somehow
@@end macro
@@end macro
@@end ifnottex
@@tex
\gdef\ctor#1@{\ctorx#1,@}
\gdef\ctorx#1,#2,@{\def#1@{something involving #2 somehow@}@}
@@end tex
@end example

@item
@c It is best to avoid comments inside macro definitions.
@c 
マクロ定義の中でコメントを避けることは最善です．

@end itemize

@c If some macro feature causes errors when producing the printed version
@c of a manual, try expanding the macros with @command{makeinfo} by
@c invoking @command{texi2dvi} with the @samp{-E} option; see @ref{Format
@c with texi2dvi}.
@c 
マニュアルの印刷バージョンを生成しているとき，マクロ機能でエラーが生じる
場合，@command{texi2dvi}を@option{-E}オプションを用いて呼び出し，
@command{makeinfo}でマクロの展開を試みてください．@ref{Format with
texi2dvi}を参照してください．

@node alias
@section @samp{@@alias @var{new}=@var{existing}}
@cindex Aliases, command
@cindex Command aliases
@findex alias

@c The @samp{@@alias} command defines a new command to be just like an
@c existing one.  This is useful for defining additional markup names, thus
@c preserving semantic information in the input even though the output
@c result may be the same.
@c 
@samp{@@alias}コマンドは，新しいコマンドを既存のものと同じように定義しま
す．これは追加のマークアップ名の定義に便利で，このため出力結果が同じであっ
ても，入力の意味論的な情報を維持します．

@c Write the @samp{@@alias} command on a line by itself, followed by the
@c new command name, an equals sign, and the existing command name.
@c Whitespace around the equals sign is ignored.  Thus:
@c 
@samp{@@alias}コマンドを単独行に書き，新しいコマンド名，等号，そして既存
のコマンド名を続けてください．等号の周りの空白は無視されます．このため以
下のようにします．
@example
@@alias @var{new} = @var{existing}
@end example

@c For example, if your document contains citations for both books and
@c some other media (movies, for example), you might like to define a
@c macro @code{@@moviecite@{@}} that does the same thing as an ordinary
@c @code{@@cite@{@}} but conveys the extra semantic information as well.
@c You'd do this as follows:
@c 
例えば，ドキュメントが本と他のメディア(例えば動画)の両方への引用を含んで
いる場合，通常の@code{@@cite@{@}}と同じことを行いますが，同じような余分
な意味論的情報をもたらすマクロ@code{@@moviecite@{@}}を定義したい可能性が
あります．このため以下のようにします．

@example
@@alias moviecite = cite
@end example

@c Macros do not always have the same effect due to vagaries of argument
@c parsing.  Also, aliases are much simpler to define than macros.  So the
@c command is not redundant.  (It was also heavily used in the Jargon File!)
@c 
気まぐれな引数の解析のため，マクロは常に同じ結果となるわけではありません．
また，別名はマクロより定義が簡単です．そのため，コマンドは重複しません．
(また，専門語ファイルで大量に使用されました！)

@c Aliases must not be recursive, directly or indirectly.
@c 
別名は，直接的や間接的に，再帰的してはいけません．

@node definfoenclose
@c @section @samp{definfoenclose}: Customized Highlighting
@section @samp{definfoenclose}: 強調のカスタマイズ
@cindex Highlighting, customized
@cindex Customized highlighting
@findex definfoenclose

@c A @code{@@definfoenclose} command may be used to define a highlighting
@c command for Info, but not for @TeX{}.  A command defined using
@c @code{@@definfoenclose} marks text by enclosing it in strings that
@c precede and follow the text.  You can use this to get closer control of
@c your Info output.
@c 
@code{@@definfoenclose}コマンドは，Infoに対しては使用し@TeX{}に対しては
使用しない強調コマンドの定義として使用してもかまいません．
@code{@@definfoenclose}で定義されたコマンドは，前後のテキストの文字列内
の，そのコマンドで囲んだテキストに印を付けます．Info出力に似た制御を行な
うためこれを使用することも可能です．

@c Presumably, if you define a command with @code{@@definfoenclose} for Info,
@c you will create a corresponding command for @TeX{}, either in
@c @file{texinfo.tex}, @file{texinfo.cnf}, or within an @samp{@@iftex} in
@c your document.
@c 
おそらく，Infoに対し@code{@@definfoenclose}でコマンドを定義する場合，
@file{texinfo.tex}，@file{texinfo.cnf}，またはドキュメントの
@samp{@@iftex}の中で@TeX{}に対し対応するコマンドを作成することになるでしょ
う．

@c Write a @code{@@definfoenclose} command on a line and follow it with
@c three arguments separated by commas.  The first argument to
@c @code{@@definfoenclose} is the @@-command name (without the @code{@@});
@c the second argument is the Info start delimiter string; and the third
@c argument is the Info end delimiter string.  The latter two arguments
@c enclose the highlighted text in the Info file.  A delimiter string may
@c contain spaces.  Neither the start nor end delimiter is required.  If
@c you do not want a start delimiter but do want an end delimiter, you must
@c follow the command name with two commas in a row; otherwise, the Info
@c formatting commands will naturally misinterpret the end delimiter string
@c you intended as the start delimiter string.
@c 
@code{@@definfoenclose}コマンドを一行で書き，カンマで区切られた三つの引
数を続けてください．@code{@@definfoenclose}の最初の引数は(@code{@@}がな
い) @@-コマンド名です．二番目の引数はInfoを開始するデリミタ文字列です．
そして，三番目の引数はInfoを終了するデリミタ文字列です．デリミタ文字列は
スペースを含めてもかまいません．開始と終了のデリミタは必須ではありません．
開始デリミタが不要で，終了デリミタが欲しい場合，コマンド名で同じ行に二つ
のカンマを続ける必要があります．そうしない場合，Info書式化コマンドは，当
然，終了デリミタ文字列を開始デリミタ文字列だと誤って解釈します．

@c If you do a @code{@@definfoenclose} on the name of a pre-defined macro
@c (such as @code{@@emph}, @code{@@strong}, @code{@@t}, or @code{@@i}), the
@c enclosure definition will override the built-in definition.
@c 
(@code{@@emph}，@code{@@strong}，@code{@@t}，または@code{@@i}のように)前
もって定義されているマクロ名で@code{@@definfoenclose}する場合，囲まれた
定義は組込み定義に優先されます．

@c An enclosure command defined this way takes one argument in braces; this
@c is intended for new markup commands (@pxref{Marking Text}).
@c 
囲みコマンドはカッコ内の一つの引数を取り，以下のように定義されます．これ
は，新しいマークアップコマンドを意図しています(@pxref{Marking Text})．

@findex phoo
@c For example, you can write:
@c 
例えば，以下のように書くことが可能です．

@example
@@definfoenclose phoo,//,\\
@end example

@noindent
@c near the beginning of a Texinfo file to define @code{@@phoo} as an Info
@c formatting command that inserts `//' before and `\\' after the argument
@c to @code{@@phoo}.  You can then write @code{@@phoo@{bar@}} wherever you
@c want `//bar\\' highlighted in Info.
@c 
@code{@@phoo}の引数の前に`//'，後ろに`\\'を挿入するInfo書式化コマンドと
して@code{@@phoo}を定義するために，Texinfoファイルの最初の方に書きます．
そして，Infoで強調された`//bar\\'が必要な場所ならどこでも，
@code{@@phoo@{bar@}}を書くことが可能です．

@c Also, for @TeX{} formatting, you could write 
@c 
また，@TeX{}書式化で以下のように書くことも可能でしょう．

@example
@@iftex
@@global@@let@@phoo=@@i
@@end iftex
@end example

@noindent
@c to define @code{@@phoo} as a command that causes @TeX{} to typeset the
@c argument to @code{@@phoo} in italics.
@c 
@code{@@phoo}を@TeX{}に@code{@@phoo}の引数をイタリック対で植字させるコマ
ンドとして@code{@@phoo}を定義します．

@c Each definition applies to its own formatter: one for @TeX{}, the other
@c for @code{texinfo-format-buffer} or @code{texinfo-format-region}.  The
@c @code{@@definfoenclose} command need not be within @samp{@@ifinfo}, but
@c the raw @TeX{} commands do need to be in @samp{@@iftex}.
@c 
それぞれの定義は独自のフォーマッタに適用さます．一つは@TeX{}に対し，もう1 
つは@code{texinfo-format-buffer}や@code{texinfo-format-region}に対するも
のです．@code{@@definfoenclose}コマンドは@samp{@@ifinfo}の中に書く必要は
ありませんが，生の@TeX{}コマンドは@samp{@@iftex}の中に書く必要があります．

@findex headword
@c Here is another example: write
@c 
もう一つの例です．以下のように書きます．

@example
@@definfoenclose headword, , :
@end example

@noindent
@c near the beginning of the file, to define @code{@@headword} as an Info
@c formatting command that inserts nothing before and a colon after the
@c argument to @code{@@headword}.
@c 
@code{@@headword}の引数の前には何も挿入せず，後にコロンを挿入するInfo書
式化コマンドとして@code{@@headword}を定義するために，ファイルの最初の方
に書いてください．

@c @samp{@@definfoenclose} definitions must not be recursive, directly or
@c indirectly.
@c 
@samp{@@definfoenclose}定義は，直接的または間接的に，再帰的してはいけま
せん．


@node Hardcopy
@c @chapter Formatting and Printing Hardcopy
@chapter 書式化とハードコピーの出力
@cindex Format and print hardcopy
@cindex Printing hardcopy
@cindex Hardcopy, printing it
@cindex Making a printed manual
@cindex Sorting indices
@cindex Indices, sorting
@cindex @TeX{} index sorting
@pindex texindex

@c There are three major shell commands for making a printed manual from a
@c Texinfo file: one for converting the Texinfo file into a file that will be
@c printed, a second for sorting indices, and a third for printing the
@c formatted document.  When you use the shell commands, you can either
@c work directly in the operating system shell or work within a shell
@c inside GNU Emacs.
@c 
Texinfoファイルから印刷されたマニュアルを作成するため，三つの主なシェル
コマンドがあります．一つは，Texinfoファイルを印刷されるファイルに変換す
るもので，二つ目は索引をソートするもので，三つ目は書式化されたドキュメン
トを印刷するものです．シェルコマンドを使用するとき，オペレーティングシス
テムのシェルで直接実行したり，GNU Emacs内部のシェルで実行したりすること
が可能です．

@c If you are using GNU Emacs, you can use commands provided by Texinfo
@c mode instead of shell commands.  In addition to the three commands to
@c format a file, sort the indices, and print the result, Texinfo mode
@c offers key bindings for commands to recenter the output buffer, show the
@c print queue, and delete a job from the print queue.
@c 
GNU Emacsを使用している場合，シェルコマンドの代わりにTexinfoモードで提供
されているコマンドを使用することが可能です．ファイルを書式化したり，索引
をソートしたり，結果を印刷したりする三つのコマンドの加え，Texinfoモード
は，出力バッファを更新したり，印刷のキューを表示したり，印刷キューからジョ
ブを削除したりするコマンドに対するキーバインドを提案します．

@menu
* Use TeX::                     Use @TeX{} to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        @TeX{} formatting requirements summary.
* Preparing for TeX::           What to do before you use @TeX{}.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                               of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.
@end menu

@node Use TeX
@c @section Use @TeX{}
@section @TeX{}の使用

@c The typesetting program called @TeX{} is used for formatting a Texinfo
@c file.  @TeX{} is a very powerful typesetting program and, if used correctly,
@c does an exceptionally good job.  (@xref{Obtaining TeX, , How to Obtain
@c @TeX{}}, for information on how to obtain @TeX{}.)
@c 
@TeX{}と呼ばれる植字プログラムは，Texinfoファイルの書式化に使用します．
@TeX{}は非常に強力な植字プログラムで，正しく使用すると，非常に良い仕事を
します．(@TeX{}の入手方法の詳細は，@xref{Obtaining TeX, , How to Obtain
@TeX{}}.)

@c The standalone @code{makeinfo} program and Emacs functions
@c @code{texinfo-format-region} and @code{texinfo-format-buffer} commands
@c read the very same @@-commands in the Texinfo file as does @TeX{}, but
@c process them differently to make an Info file (@pxref{Creating an Info
@c File}).
@c 
スタンドアローンの@code{makeinfo}プログラムとEmacsの関数の
@code{texinfo-format-region}と@code{texinfo-format-buffer}コマンドは，
@TeX{}のように，Texinfoファイルの@@-コマンドを全く同じように読み込みます
が，Infoファイルの作成とは異なる処理を行います(@pxref{Creating an Info
File})．


@node Format with tex/texindex
@c @section Format with @code{tex} and @code{texindex}
@section @code{tex}と@code{texindex}での書式化
@cindex Shell formatting with @code{tex} and @code{texindex}
@cindex Formatting with @code{tex} and @code{texindex}
@cindex DVI file

@c Format the Texinfo file with the shell command @code{tex} followed by
@c the name of the Texinfo file.  For example:
@c 
Texinfoファイルを，シェルコマンド@code{tex}にTexinfoファイル名を続けて書
式化します．例えば，以下のようにします．

@example
tex foo.texi
@end example

@noindent
@c @TeX{} will produce a @dfn{DVI file} as well as several auxiliary
@c files containing information for indices, cross references, etc.  The
@c DVI file (for @dfn{DeVice Independent} file) can be printed on virtually
@c any device (see the following sections).
@c 
@TeX{}は，索引や相互参照等の情報を含むいくつかの追加ファイルと， 
@dfn{DVIファイル(DVI file)}を生成します．DVIファイル(@dfn{DeVice
Independent}ファイル)は，事実上あらゆるデバイスに出力可能です(以下のセク
ションを参照してください)．

@pindex texindex
@c The @code{tex} formatting command itself does not sort the indices; it
@c writes an output file of unsorted index data.  (The @code{texi2dvi}
@c command automatically generates indices; @pxref{Format with texi2dvi,,
@c Format with @code{texi2dvi}}.)  To generate a printed index after
@c running the @code{tex} command, you first need a sorted index to work
@c from.  The @code{texindex} command sorts indices.  (The source file
@c @file{texindex.c} comes as part of the standard Texinfo distribution,
@c among other places.)@refill
@c 
@code{tex}書式化コマンド自身は索引をソートしません．それは，ソートされて
いない索引データの出力を書き出します．(@code{texi2dvi}コマンドは，自動的
に索引を生成します．@pxref{Format with texi2dvi,, Format with
@code{texi2dvi}}.)@code{tex}コマンド実行後，印刷する索引を生成するため，
最初に索引をソートする必要があります．@code{texindex}コマンドは索引をソー
トします．(ソースファイル@file{texindex.c}は，他の場所から得られることも
ありますが，標準的なTexinfo配布物の一部となっています．)@refill

@cindex Names of index files
@cindex Index file names
@c The @code{tex} formatting command outputs unsorted index files under
@c names that obey a standard convention: the name of your main input file
@c with any @samp{.tex} (or similar, @pxref{tex invocation,,, web2c,
@c Web2c}) extension removed, followed by the two letter names of indices.
@c For example, the raw index output files for the input file
@c @file{foo.texinfo} would be @file{foo.cp}, @file{foo.vr}, @file{foo.fn},
@c @file{foo.tp}, @file{foo.pg} and @file{foo.ky}.  Those are exactly the
@c arguments to give to @code{texindex}.
@c 
@code{tex}書式化コマンドは，標準的な慣習に従う名前でソートされていない索
引ファイルを出力します．@samp{.tex}(または類似のもので，@pxref{tex
invocation,,, web2c, Web2c})が付いている主な入力ファイルの名前の拡張子は
削除され，索引名の二文字が続きます．例えば，入力ファイル
@file{foo.texinfo}に対する生の索引出力ファイルは，@file{foo.cp}，
@file{foo.vr}，@file{foo.fn}，@file{foo.tp}，@file{foo.pg}，そして
@file{foo.ky}です．それらは，正確に@code{texindex}に与える引数です．

@need 1000
@cindex Wildcards
@cindex Globbing
@c Instead of specifying all the unsorted index file names explicitly, you
@c can use @samp{??} as shell wildcards and give the command in this
@c form:
@c 
全てのソートされていない索引ファイル名を明示的に指定する代わりに，
@samp{??}をシェルワイルドカードとして使い，以下の形式でコマンドに与える
ことも可能です．

@example
texindex foo.??
@end example

@noindent
@c This command will run @code{texindex} on all the unsorted index files,
@c including any that you have defined yourself using @code{@@defindex}
@c or @code{@@defcodeindex}.  (You may execute @samp{texindex foo.??}
@c even if there are similarly named files with two letter extensions
@c that are not index files, such as @samp{foo.el}.  The @code{texindex}
@c command reports but otherwise ignores such files.)
@c 
このコマンドは，@code{texindex}を全てのソートされていない索引ファイルで
実行し，それには，@code{@@defindex}や@code{@@defcodeindex}を使用して独自
に定義したものも含まれます．(たとえ，@samp{foo.el}のように，索引ファイル
ではない二文字の拡張子を持つ似た名前のファイルがある場合でも，
@samp{texindex foo.??}を実行してもかまいません．@code{texindex}コマンド
は，そのようなファイルを無視したことを報告します．)

@c For each file specified, @code{texindex} generates a sorted index file
@c whose name is made by appending @samp{s} to the input file name.  The
@c @code{@@printindex} command looks for a file with that name
@c (@pxref{Printing Indices & Menus}).  @code{texindex} does not alter the
@c raw index output file.
@c 
それぞれ指定したファイルに対し，@code{texindex}は入力ファイルに@samp{s} 
を付けた名前を持つソートされた索引ファイルを生成します．
@code{@@printindex}コマンドは，その名前でファイルを探します
(@pxref{Printing Indices & Menus})．@code{texindex}は生の索引出力ファイ
ルを変更しません．

@c After you have sorted the indices, you need to rerun the @code{tex}
@c formatting command on the Texinfo file.  This regenerates the DVI file,
@c this time with up-to-date index entries.
@c 
索引のソート後，@code{tex}書式化コマンドをTexinfoファイルで再実行する必
要があります．これはDVIファイルを再生成し，このとき索引項目は更新されま
す．

@c Finally, you may need to run @code{tex} one more time, to get the page
@c numbers in the cross-references correct.
@c 
最終的に，相互参照で正しいページ番号を得るために，@code{tex}をもう一度実
行する必要があります．

@c To summarize, this is a five step process:
@c 
要約すると，これは五段階の処理です．

@enumerate
@item
@c Run @code{tex} on your Texinfo file.  This generates a DVI file (with
@c undefined cross-references and no indices), and the raw index files
@c (with two letter extensions).
@c 
Texinfoファイルで@code{tex}を実行してください．これは(相互参照が定義され
ておらず，索引のない)DVIファイルと，(二文字の拡張子を持つ)生の索引ファイ
ルを生成します．

@item
@c Run @code{texindex} on the raw index files.  This creates the
@c corresponding sorted index files (with three letter extensions).
@c 
生の索引ファイルで@code{texindex}を実行してください．これで，適切にソー
トされた(三文字の拡張子の)索引ファイルを生成します．

@item
@c Run @code{tex} again on your Texinfo file.  This regenerates the DVI
@c file, this time with indices and defined cross-references, but with page
@c numbers for the cross-references from last time, generally incorrect.
@c 
@code{tex}を再びTexinfoファイルで実行してください．これでDVIファイルを生
成し，索引と定義された相互参照はこのとき再生成しますが，相互参照のページ
番号は一般に正しくないので最後に再生成します．

@item
@c Sort the indices again, with @code{texindex}.
@c 
@code{texindex}で再び索引をソートしてください．

@item
@c Run @code{tex} one last time.  This time the correct page numbers are
@c written for the cross-references.
@c 
@code{tex}を最後に一度実行してください．このとき相互参照に対し，正しいペー
ジ番号を書き出します．
@end enumerate

@pindex texi2dvi
@c Alternatively, it's a one-step process: run @code{texi2dvi}
@c (@pxref{Format with texi2dvi}).
@c 
別の方法として，ワンステップで処理します．@code{texi2dvi}(@pxref{Format
with texi2dvi})を実行してください．

@c You need not run @code{texindex} each time after you run @code{tex}.  If
@c you do not, on the next run, the @code{tex} formatting command will use
@c whatever sorted index files happen to exist from the previous use of
@c @code{texindex}.  This is usually ok while you are debugging.
@c 
@code{tex}の実行後，毎回@code{texindex}を実行する必要はありません．実行
しない場合は，次の実行時に，@code{tex}書式化コマンドはソートされているか
どうかにかかわらず，たまたま存在する前回の@code{texindex}の使用から得ら
れる索引ファイルを使用します．これは，通常デバッグ中は問題ありません．

@cindex Auxiliary files, avoiding
@findex novalidate
@cindex Pointer validation, suppressing
@cindex Chapters, formatting one at a time
@c Sometimes you may wish to print a document while you know it is
@c incomplete, or to print just one chapter of a document.  In that case,
@c the usual auxiliary files that @TeX{} creates and warnings @TeX{} gives
@c when cross-references are not satisfied are just nuisances.  You can
@c avoid them with the @code{@@novalidate} command, which you must give
@c @emph{before} the @code{@@setfilename} command
@c (@pxref{setfilename,,@code{@@setfilename}}).  Thus, the beginning of
@c your file would look approximately like this:
@c 
完全でないと分かっているドキュメントを印刷したり，ドキュメントの一つの章
だけ印刷したい場合もあります．その場合，通常の@TeX{}が作成した追加ファイ
ルと，相互参照が十分でないとき@TeX{}が与える警告は厄介になります．
@code{@@novalidate}コマンドでこれを避けることができ，それは
@code{@@setfilename}コマンド(@pxref{setfilename,,@code{@@setfilename}}) 
の@emph{前で}与える必要があります．このため，ファイルの最初はおそらく以
下のようになります．

@example
\input texinfo
@@novalidate
@@setfilename myfile.info
@dots{}
@end example

@noindent
@c @code{@@novalidate} also turns off validation in
@c @code{makeinfo}, just like its @code{--no-validate} option
@c (@pxref{Pointer Validation}).
@c 
@code{@@novalidate}も，@code{--no-validate}オプション(@pxref{Pointer
Validation})を与えたように@code{makeinfo}で有効に停止します．


@node Format with texi2dvi
@c @section Format with @code{texi2dvi}
@section @code{texi2dvi}での書式化
@pindex texi2dvi @r{(shell script)}

@c The @code{texi2dvi} command automatically runs both @code{tex} and
@c @code{texindex} as many times as necessary to produce a DVI file with
@c sorted indices and all cross-references resolved.  It simplifies the
@c @code{tex}---@code{texindex}---@code{tex}---@code{tex} sequence
@c described in the previous section.
@c 
@code{texi2dvi}コマンドは，自動的に@code{tex}と@code{texindex}の両方を，
ソートされた索引や相互参照が解決されているDVIファイルを生成するのに必要
な回数実行します．それは，前のセクションで記述された，
@code{tex}---@code{texindex}---@code{tex}---@code{tex}の順番で単純化され
ています．

@c To run @code{texi2dvi} on an input file @file{foo.texi}, do this (where
@c @samp{prompt$ } is your shell prompt):
@c 
入力ファイル@file{foo.texi}で@code{texi2dvi}を実行するため，以下のように
してください(@samp{prompt$ }はシェルプロンプトです)．

@example
prompt$ @kbd{texi2dvi foo.texi}
@end example

@c As shown in this example, the input filenames to @code{texi2dvi} must
@c include any extension (@samp{.texi}, @samp{.texinfo}, etc.).  Under
@c MS-DOS and perhaps in other circumstances, you may need to run @samp{sh
@c texi2dvi foo.texi} instead of relying on the operating system to invoke
@c the shell on the @samp{texi2dvi} script.
@c 
この例で示したように，@code{texi2dvi}の入力ファイル名は(@samp{.texi}，
@samp{.texinfo}等の)拡張子を含める必要があります．MS-DOSやおそらく他の環
境では，オペレーティングシステムがシェルで@samp{texi2dvi}スクリプトを呼
び出すことを期待する代わりに，@samp{sh texi2dvi foo.texi}を実行する必要
があるかもしれません．

@c Perhaps the most useful option to @code{texi2dvi} is
@c @samp{--texinfo=@var{cmd}}.  This inserts @var{cmd} on a line by itself
@c after the @code{@@setfilename} in a temporary copy of the input file
@c before running @TeX{}.  With this, you can specify different printing
@c formats, such as @code{@@smallbook} (@pxref{smallbook}),
@c @code{@@afourpaper} (@pxref{A4 Paper}), or @code{@@pagesizes}
@c (@pxref{pagesizes}), without actually changing the document source.
@c (You can also do this on a site-wide basis with @file{texinfo.cnf};
@c @pxref{Preparing for TeX,,Preparing for @TeX{}}).
@c 
おそらく，@code{texi2dvi}の最も役に立つオプションは，
@samp{--texinfo=@var{cmd}}です．これは，@TeX{}を実行する前の一時的な入力
ファイルのコピーで，@code{@@setfilename}の行の後に@var{cmd}を単独行で挿
入します．こうすることで，@code{@@smallbook} (@pxref{smallbook})，
@code{@@afourpaper} (@pxref{A4 Paper})や，@code{@@pagesizes}
(@pxref{pagesizes})のように，異なる印刷書式を，実際にドキュメントソース
を変更することなく指定することが可能になります．(@file{texinfo.cnf}で，
サイト全体に対しこうすることもできます．@pxref{Preparing for
TeX,,Preparing for @TeX{}}.)

@c For a list of other options, run @samp{texi2dvi --help}.
@c 
他のオプションのリストは，@samp{texi2dvi --help}を実行してください．


@node Print with lpr
@c @section Shell Print Using @code{lpr -d}
@section @code{lpr -d}を使用したシェルでの印刷
@pindex lpr @r{(DVI print command)}

@c The precise command to print a DVI file depends on your system
@c installation.  Two common ones are @samp{dvips foo.dvi -o} and @samp{lpr
@c -d foo.dvi}.  
@c 
DVIファイルを印刷する正確なコマンドは，システムインストールの状態に依存
します．一般的なものは二つあり，それらは@samp{dvips foo.dvi -o}と
@samp{lpr -d foo.dvi}です．

@c For example, the following commands will (perhaps) suffice to sort the
@c indices, format, and print the @cite{Bison Manual}:
@c 
例えば，以下のコマンドで，(おそらく)@cite{Bison Manual}の索引のソート，
書式化，そして印刷には十分でしょう．

@example
@group
tex bison.texinfo
texindex bison.??
tex bison.texinfo
lpr -d bison.dvi
@end group
@end example

@noindent
@c (Remember that the shell commands may be different at your site; but
@c these are commonly used versions.)
@c 
(シェルコマンドはサイトにより異なる可能性があることを覚えておいてくださ
い．しかし，これらは通常使用されているバージョンです．)

@c Using the @code{texi2dvi} shell script (see the previous section):
@c 
@code{texi2dvi}シェルスクリプトを以下のように使用します(前のセクションを
参照してください)．

@example
@group
texi2dvi bison.texinfo
lpr -d bison.dvi
# or perhaps dvips bison.dvi -o
@end group
@end example

@cindex Shell printing, on MS-DOS/MS-Windows
@cindex Printing DVI files, on MS-DOS/MS-Windows
@pindex lpr@r{-d, replacements on MS-DOS/MS-Windows}
@c @code{lpr} is a standard program on Unix systems, but it is usually
@c absent on MS-DOS/MS-Windows.  Some network packages come with a
@c program named @code{lpr}, but these are usually limited to sending files
@c to a print server over the network, and generally don't support the
@c @samp{-d} option.  If you are unfortunate enough to work on one of these
@c systems, you have several alternative ways of printing DVI files:
@c 
@code{lpr}はUnixシステムの標準的なプログラムですが，通常
MS-DOS/MS-Windowsにはありません．ネットワークパッケージに@code{lpr}とい
う名のプログラムが付属していることもありますが，これらは通常，ネットワー
ク上のプリントサーバにファイルを送ることに機能が制限されていて，一般に，
@samp{-d}オプションはサポートされていません．不幸にも，これらのシステム
のいずれかで十分な仕事をしたい場合，DVIファイルを印刷する代わりの方法が
あります．

@itemize @bullet{}
@item
@c Find and install a Unix-like @code{lpr} program, or its clone.
@c If you can do that, you will be able to print DVI files just like
@c described above.
@c 
Unixライクの@code{lpr}プログラムや，そのクローンを見つけてインストールし
てください．そうする場合，DVIファイルを上記のようなスクリプトで印刷でき
ます．

@item
@c Send the DVI files to a network printer queue for DVI files.
@c Some network printers have special queues for printing DVI files.  You
@c should be able to set up your network software to send files to that
@c queue.  In some cases, the version of @code{lpr} which comes with your
@c network software will have a special option to send a file to specific
@c queues, like this:
@c 
DVIファイルをDVIファイルのネットワークプリンタのキューに送ってください．
ネットワークプリンタは，DVIファイルを印刷する特別なキューを持つものもあ
ります．キューにファイルを送るため，ネットワークソフトウェアを設定するこ
とが可能なはずです．場合によっては，ネットワークソフトウェア付属の
@code{lpr}のバージョンには，特別のキューにファイルを送るための以下のよう
な特別なオプションがあります．

@example
lpr -Qdvi -hprint.server.domain bison.dvi
@end example

@item
@c Convert the DVI file to a Postscript or PCL file and send it to your
@c local printer.  @xref{dvips invocation,,, dvips, Dvips}, and the man
@c pages for @code{dvilj}, for detailed description of these tools.  Once
@c the DVI file is converted to the format your local printer understands
@c directly, just send it to the appropriate port, usually @samp{PRN}.
@c 
DVIファイルをPostscriptやPCLファイルに変換し，ローカルプリンタに送ってく
ださい．これらのツールの記述の詳細は，@xref{dvips invocation,,, dvips,
Dvips}.  そして，@code{dvilj}のmanページを参照してください．DVIファイル
をローカルプリンタが直接理解できるフォーマットに変換してから，通常は
@samp{PRN}である適切なポートそれを送ってください．
@end itemize


@node Within Emacs
@c @section From an Emacs Shell
@section Emacsシェルからの実行
@cindex Print, format from Emacs shell
@cindex Format, print from Emacs shell
@cindex Shell, format, print from
@cindex Emacs shell, format, print from
@cindex GNU Emacs shell, format, print from

@c You can give formatting and printing commands from a shell within GNU
@c Emacs.  To create a shell within Emacs, type @kbd{M-x shell}.  In this
@c shell, you can format and print the document.  @xref{Hardcopy, , Format
@c and Print Hardcopy}, for details.
@c 
書式化と印刷のコマンドをGNU Emacs内部のシェルから与えることができます．
Emacs内部のシェルを作成するため，@kbd{M-x shell}を入力してください．この
シェルでドキュメントの書式化と印刷が可能です．詳細は，@xref{Hardcopy, ,
Format and Print Hardcopy}.

@c You can switch to and from the shell buffer while @code{tex} is
@c running and do other editing.  If you are formatting a long document
@c on a slow machine, this can be very convenient.@refill
@c 
@code{tex}を実行しているシェルバッファへ(から)切替えて，他を編集すること
が可能です．遅いマシンで長いドキュメントを書式化する場合，これは大変便利
です．@refill

@c You can also use @code{texi2dvi} from an Emacs shell.  For example,
@c here is how to use @code{texi2dvi} to format and print @cite{Using and
@c Porting GNU CC} from a shell within Emacs:
@c 
@code{texi2dvi}をEmacsシェルから実行することも可能です．例えば，Emacsの
内部シェルから，@cite{Using and Porting GNU CC}を書式化し印刷する，
@code{texi2dvi}の使用法は以下のようになります．

@example
@group
texi2dvi gcc.texinfo
lpr -d gcc.dvi
@end group
@end example
@ifinfo

@c @xref{Texinfo Mode Printing}, for more information about formatting
@c and printing in Texinfo mode.@refill
@c 
Texinfoモードでの書式化と印刷に関する詳細は，@xref{Texinfo Mode
Printing}.@refill
@end ifinfo


@node Texinfo Mode Printing, Compile-Command, Within Emacs, Hardcopy
@c @section Formatting and Printing in Texinfo Mode
@section Texinfoモードでの書式化と印刷
@cindex Region printing in Texinfo mode
@cindex Format and print in Texinfo mode
@cindex Print and format in Texinfo mode

@c Texinfo mode provides several predefined key commands for @TeX{}
@c formatting and printing.  These include commands for sorting indices,
@c looking at the printer queue, killing the formatting job, and
@c recentering the display of the buffer in which the operations
@c occur.@refill
@c 
Texinfoモードは，@TeX{}の書式化と印刷のための前もって定義されたキーコマ
ンドをいくつか提供しています．これらには，索引のソート，プリンタキューを
見ること，書式化ジョブの停止，そしてオペレーションが発生させているバッファ
の表示の更新のコマンドが含まれます．@refill

@table @kbd
@item C-c C-t C-b
@itemx M-x texinfo-tex-buffer
@c Run @code{texi2dvi} on the current buffer.@refill
@c 
現在のバッファで@code{texi2dvi}を実行します．@refill

@item C-c C-t C-r
@itemx M-x texinfo-tex-region
@c Run @TeX{} on the current region.@refill
@c 
現在の領域で@TeX{}を実行します．@refill

@item C-c C-t C-i
@itemx M-x texinfo-texindex
@c Sort the indices of a Texinfo file formatted with
@c @code{texinfo-tex-region}.@refill
@c 
@code{texinfo-tex-region}で書式化されたTexinfoファイルの索引をソートしま
す．@refill

@item C-c C-t C-p
@itemx M-x texinfo-tex-print
@c Print a DVI file that was made with @code{texinfo-tex-region} or
@c @code{texinfo-tex-buffer}.@refill
@c 
@code{texinfo-tex-region}や@code{texinfo-tex-buffer}で作成されたDVIファ
イルを印刷します．@refill

@item C-c C-t C-q
@itemx M-x tex-show-print-queue
@c Show the print queue.@refill
@c 
プリントキューを表示します．@refill

@item C-c C-t C-d
@itemx M-x texinfo-delete-from-print-queue
@c Delete a job from the print queue; you will be prompted for the job
@c number shown by a preceding @kbd{C-c C-t C-q} command
@c (@code{texinfo-show-tex-print-queue}).@refill
@c 
プリントキューからジョブを削除します．前もって@kbd{C-c C-t C-q}コマンド
(@code{texinfo-show-tex-print-queue})で調べたジョブ番号の入力を促されま
す．@refill

@item C-c C-t C-k
@itemx M-x tex-kill-job
@c Kill the currently running @TeX{} job started by either
@c @code{texinfo-tex-region} or @code{texinfo-tex-buffer}, or any other
@c process running in the Texinfo shell buffer.@refill
@c 
現在実行している，@code{texinfo-tex-region}や@code{texinfo-tex-buffer}で
開始された@TeX{}ジョブや，Texinfoシェルバッファで実行している他のあらゆ
るプロセスを停止します．@refill

@item C-c C-t C-x
@itemx M-x texinfo-quit-job
@c Quit a @TeX{} formatting job that has stopped because of an error by
@c sending an @key{x} to it.  When you do this, @TeX{} preserves a record
@c of what it did in a @file{.log} file.@refill
@c 
@key{x}を送られて，エラーで停止した書式化のジョブを終了します．こうする
とき，@TeX{}は行ったことの記録を@file{.log}ファイルに保存します．@refill

@item C-c C-t C-l
@itemx M-x tex-recenter-output-buffer
@c Redisplay the shell buffer in which the @TeX{} printing and formatting
@c commands are run to show its most recent output.@refill
@c 
@TeX{}の印刷と書式化コマンドを実行しているシェルバッファを，最新出力を表
示させるため再表示します．@refill
@end table

@need 1000
@c Thus, the usual sequence of commands for formatting a buffer is as
@c follows (with comments to the right):@refill
@c 
このため，バッファを書式化するコマンドの通常の順序は，以下のようになりま
す(右はコメントです)．@refill

@example
@group
@c C-c C-t C-b             @r{Run @code{texi2dvi} on the buffer.}
@c C-c C-t C-p             @r{Print the DVI file.}
@c C-c C-t C-q             @r{Display the printer queue.}
@c 
C-c C-t C-b             @r{バッファで@code{texi2dvi}を実行．}
C-c C-t C-p             @r{DVIファイルを印刷．}
C-c C-t C-q             @r{プリンタキューの表示．}
@end group
@end example

@c The Texinfo mode @TeX{} formatting commands start a subshell in Emacs
@c called the @file{*tex-shell*}.  The @code{texinfo-tex-command},
@c @code{texinfo-texindex-command}, and @code{tex-dvi-print-command}
@c commands are all run in this shell.
@c 
Texinfoモードの@TeX{}書式化コマンドは，@file{*tex-shell*}と呼ばれるEmacs 
のサブシェルを開始します．@code{texinfo-tex-command}，
@code{texinfo-texindex-command}，そして@code{tex-dvi-print-command}コマ
ンドは，全てこのシェルで実行されます．

@c You can watch the commands operate in the @samp{*tex-shell*} buffer,
@c and you can switch to and from and use the @samp{*tex-shell*} buffer
@c as you would any other shell buffer.@refill
@c 
コマンドオペレーションを@samp{*tex-shell*}バッファで見ることが可能で，他
のシェルバッファで行うように，@samp{*tex-shell*}バッファに/から切替えて
使用することが可能です．@refill

@need 1500
@c The formatting and print commands depend on the values of several variables.
@c The default values are:@refill
@c 
書式化と印刷コマンドは，いくつかの変数の値に依存します．デフォルト値は以
下のとおりです．@refill

@example
@group
    @r{Variable}                              @r{Default value}

texinfo-texi2dvi-command                  "texi2dvi"
texinfo-tex-command                       "tex"
texinfo-texindex-command                  "texindex"
texinfo-delete-from-print-queue-command   "lprm"
texinfo-tex-trailer                       "@@bye"
tex-start-of-header                       "%**start"
tex-end-of-header                         "%**end"
tex-dvi-print-command                     "lpr -d"
tex-show-queue-command                    "lpq"
@end group
@end example

@c You can change the values of these variables with the @kbd{M-x
@c edit-options} command (@pxref{Edit Options, , Editing Variable Values,
@c emacs, The GNU Emacs Manual}), with the @kbd{M-x set-variable} command
@c (@pxref{Examining, , Examining and Setting Variables, emacs, The GNU
@c Emacs Manual}), or with your @file{.emacs} initialization file
@c (@pxref{Init File, , , emacs, The GNU Emacs Manual}).@refill
@c 
これらの変数の値を，@kbd{M-x edit-options}コマンド(@pxref{Edit Options,
, Editing Variable Values, emacs, The GNU Emacs Manual})の使用や，
@kbd{M-x set-variable}コマンド(@pxref{Examining, , Examining and Setting
Variables, emacs, The GNU Emacs Manual})の使用や，@file{.emacs}初期化ファ
イル(@pxref{Init File, , , emacs, The GNU Emacs Manual})を使用して変更す
ることが可能です．@refill

@cindex Customize Emacs package (@t{Development/Docs/Texinfo})
@c Beginning with version 20, GNU Emacs offers a user-friendly interface,
@c called @dfn{Customize}, for changing values of user-definable variables.
@c @xref{Easy Customization, , Easy Customization Interface, emacs, The GNU
@c Emacs Manual}, for more details about this.  The Texinfo variables can
@c be found in the @samp{Development/Docs/Texinfo} group, once you invoke
@c the @kbd{M-x customize} command.
@c 
バージョン20から始まるGNU Emacsは，@dfn{カスタマイズ(Customize)}と呼ばれ
る，ユーザフレンドリーなインターフェースを提供していて，それはユーザ定義
可能な変数の値を変えるためのものです．詳細は，@xref{Easy Customization,
, Easy Customization Interface, emacs, The GNU Emacs Manual}.  Texinfo変
数は，@kbd{M-x customize}コマンドで呼び出すと，
@samp{Development/Docs/Texinfo} グループで見つかります．


@node Compile-Command
@c @section Using the Local Variables List
@section ローカル変数リストの使用
@cindex Local variables
@cindex Compile command for formatting
@cindex Format with the compile command

@c Yet another way to apply the @TeX{} formatting command to a Texinfo file
@c is to put that command in a @dfn{local variables list} at the end of the
@c Texinfo file.  You can then specify the @code{tex} or @code{texi2dvi}
@c commands as a @code{compile-command} and have Emacs run it by typing
@c @kbd{M-x compile}.  This creates a special shell called the
@c @file{*compilation*} buffer in which Emacs runs the compile command.
@c For example, at the end of the @file{gdb.texinfo} file, after the
@c @code{@@bye}, you could put the following:@refill
@c 
@TeX{}書式化コマンドをTexinfoファイルに適用するための更にもう一つの方法
は，Texinfoファイルの終りで@dfn{ローカル変数リスト(local variables
list)}にそれらのコマンドを書く方法です．@code{tex}や@code{texi2dvi}コマ
ンドを@code{compile-command}のコマンドとして指定し，@kbd{M-x compile}の
入力でEmacsに実行させることが可能です．これで@file{*compilation*}バッファ
と呼ばれる特別なシェルを作成し，その中でEmacsはコンパイルコマンドを実行
します．例えば，@file{gdb.texinfo}ファイルの終りに，@code{@@bye}の後で，
以下を書くことが可能です．@refill

@example
@group
Local Variables:
compile-command: "texi2dvi gdb.texinfo"
End:
@end group
@end example

@noindent
@c This technique is most often used by programmers who also compile programs
@c this way; see @ref{Compilation, , , emacs, The GNU Emacs Manual}.@refill
@c 
この手法は，この方法でプログラムをコンパイルするプログラマが，最もよく使
用します．@ref{Compilation, , , emacs, The GNU Emacs Manual}を参照してく
ださい．@refill


@node Requirements Summary
@c @section @TeX{} Formatting Requirements Summary
@section @TeX{}書式化の必要条件の要約
@cindex Requirements for formatting
@cindex Minimal requirements for formatting
@cindex Formatting requirements

@c Every Texinfo file that is to be input to @TeX{} must begin with a
@c @code{\input} command and must contain an @code{@@setfilename} command:
@c 
@TeX{}に入力される全てのTexinfoファイルは，@code{\input}コマンドで始まり，
@code{@@setfilename}コマンドを含んでいる必要があります．

@example
\input texinfo
@@setfilename @var{arg-not-used-by-@TeX{}}
@end example

@noindent
@c The first command instructs @TeX{} to load the macros it needs to
@c process a Texinfo file and the second command opens auxiliary files.
@c 
最初のコマンドは，@TeX{}にTexinfoファイルの処理に必要なマクロをロードす
るよう指示し，二番目のコマンドは補助ファイルを開きます．

@c Every Texinfo file must end with a line that terminates @TeX{}'s
@c processing and forces out unfinished pages:
@c 
全てのTexinfoファイルは，@TeX{}の処理を終了し未完成のページを強制排出す
る行で終る必要があります．

@example
@@bye
@end example

@c Strictly speaking, these lines are all a Texinfo file needs to be
@c processed successfully by @TeX{}.
@c 
厳密にいうと，これらの行が，全てのTexinfoファイルを@TeX{}で成功裏に処理
するため必要な全てとなります．

@c Usually, however, the beginning includes an @code{@@settitle} command to
@c define the title of the printed manual, an @code{@@setchapternewpage}
@c command, a title page, a copyright page, and permissions.  Besides an
@c @code{@@bye}, the end of a file usually includes indices and a table of
@c contents.  (And of course most manuals contain a body of text as well.)
@c 
しかし通常は，最初に印刷されたマニュアルのタイトルを定義する
@code{@@settitle}コマンド，@code{@@setchapternewpage}コマンド，タイトル
ページ，著作権ページ，そして許可を含んでいます．@code{@@bye}の他に，ファ
イルの終りは通常，索引と目次を含んでいます．(そして，もちろんほとんどの
マニュアルは本文も同様に含んでいます．)

@c For more information, see:
@c 
詳細は，以下を参照してください．
@itemize @bullet
@item @ref{settitle, , @code{@@settitle}}
@item @ref{setchapternewpage, , @code{@@setchapternewpage}}
@item @ref{Headings, ,Page Headings}
@item @ref{Titlepage & Copyright Page}
@item @ref{Printing Indices & Menus}
@item @ref{Contents}
@end itemize


@node Preparing for TeX
@c @section Preparing for @TeX{}
@section @TeX{}に対する準備
@cindex Preparing for @TeX{}
@cindex @TeX{} input initialization
@cindex @code{TEXINPUTS} environment variable
@vindex TEXINPUTS
@cindex @b{.profile} initialization file
@cindex @b{.cshrc} initialization file
@cindex Initialization file for @TeX{} input

@c @TeX{} needs to know where to find the @file{texinfo.tex} file that the
@c @samp{\input texinfo} command on the first line reads.  The
@c @file{texinfo.tex} file tells @TeX{} how to handle @@-commands; it is
@c included in all standard GNU distributions.
@c 
@TeX{}は，最初の行の@samp{\input texinfo}コマンドで，@file{texinfo.tex}
ファイルを探す場所を知る必要があります．@file{texinfo.tex}は，@TeX{}に
@@-コマンドの処理方法を伝えます．それは，全ての標準的なGNU配布物に含まれ
ています．

@pindex texinfo.tex@r{, installing}

@c Usually, the installer has put the @file{texinfo.tex} file in the
@c default directory that contains @TeX{} macros when GNU Texinfo, Emacs or
@c other GNU software is installed.  In this case, @TeX{} will find the
@c file and you do not need to do anything special.  If this has not been
@c done, you can put @file{texinfo.tex} in the current directory when you
@c run @TeX{}, and @TeX{} will find it there.
@c 
通常インストーラは，@file{texinfo.tex}ファイルをGNU Texinfo，Emacs，また
はその他のGNUのソフトウェアがインストールされるときに@TeX{}のマクロを含
めるデフォルトのディレクトリに書き込みます．この状況では，@TeX{}はファイ
ルを見つけるので，特別なことをする必要はありません．こうならない場合は，
@TeX{}を実行するとき，@file{texinfo.tex}をカレントディレクトリに配置する
ことが可能で，@TeX{}はそこで見つけます．

@pindex epsf.tex@r{, installing}
@c Also, you should install @file{epsf.tex}, if it is not already installed
@c from another distribution.  More details are at the end of the description
@c of the @code{@@image} command (@pxref{Images}).
@c 
また，他の配布物で@file{epsf.tex}がまだインストールされていない場合，
@file{epsf.tex}をインストールすべきです．詳細は，@code{@@image}コマンド
の記述の最後で説明しています(@pxref{Images})．

@pindex pdfcolor.tex@r{, installing}
@c Likewise for @file{pdfcolor.tex}, if it is not already installed and you
@c use pdftex.
@c 
@file{pdfcolor.tex}がまだインストールされておらず@command{pdftex}を使用
する場合も同様です．

@pindex texinfo.cnf @r{installation}
@cindex Customizing of @TeX{} for Texinfo
@cindex Site-wide Texinfo configuration file
@c Optionally, you may create an additional @file{texinfo.cnf}, and install
@c it as well.  This file is read by @TeX{} when the @code{@@setfilename}
@c command is executed (@pxref{setfilename,, @code{@@setfilename}}).  You can put any
@c commands you like there, according to local site-wide conventions.  They
@c will be read by @TeX{} when processing any Texinfo document.  For
@c example, if @file{texinfo.cnf} contains the line @samp{@@afourpaper}
@c (@pxref{A4 Paper}), then all Texinfo documents will be processed with
@c that page size in effect.  If you have nothing to put in
@c @file{texinfo.cnf}, you do not need to create it.
@c 
更に，追加ファイル@file{texinfo.cnf}を作成し，同様にインストールしてもか
まいません．このファイルは，@code{@@setfilename}コマンド
(@pxref{setfilename,, @code{@@setfilename}})が実行されたとき，@TeX{}に読
み込まれます．ローカルサイトの慣習で，好みのあらゆるコマンドをそこに書く
ことが可能です．それらは，@TeX{}がTexinfoドキュメントを処理しているとき
読み込まれます．例えば，@file{texinfo.cnf}が@samp{@@afourpaper}を含む場
合(@pxref{A4 Paper})，全てのTexinfoドキュメントは，実際にそのページサイ
ズで処理されます．@file{texinfo.cnf}に何も書かない場合，それを作成する必
要はありません．

@vindex TEXINPUTS
@c If neither of the above locations for these system files suffice for
@c you, you can specify the directories explicitly.  For
@c @file{texinfo.tex}, you can do this by writing the complete path for the
@c file after the @code{\input} command.  Another way, that works for both
@c @file{texinfo.tex} and @file{texinfo.cnf} (and any other file @TeX{}
@c might read), is to set the @code{TEXINPUTS} environment variable in your
@c @file{.cshrc} or @file{.profile} file.
@c 
上記の場所のこれらのシステムファイルが十分でない場合，明示的にディレクト
リを指定することが可能です．@file{texinfo.tex}に対し，@code{\input}コマ
ンドの後に完全なファイルパスを書くことで可能となります．
@file{texinfo.tex}と@file{texinfo.cnf}(とその他の@TeX{}が読み込むもの)の
両方を動作させるもう一つの方法は，@code{TEXINPUTS}環境変数を@file{.cshrc} 
や@file{.profile}ファイルで設定することです．

@c Which you use of @file{.cshrc} or @file{.profile} depends on
@c whether you use a Bourne shell-compatible (@code{sh}, @code{bash},
@c @code{ksh}, @dots{}) or C shell-compatible (@code{csh}, @code{tcsh})
@c command interpreter.  The latter read the @file{.cshrc} file for
@c initialization information, and the former read @file{.profile}.
@c 
@file{.cshrc}または@file{.profile}のどちらを使用するかは，Bourneシェル互
換(@code{sh}，@code{bash}，@code{ksh}，@dots{})，またはCシェル互換
(@code{csh}，@code{tcsh})のコマンドインタプリタのどちらを使用しているか
に依存します．後者は，@file{.cshrc}を初期化情報として読み込み，前者は
@file{.profile}を読み込みます．

@c In a @file{.cshrc} file, you could use the following @code{csh} command
@c sequence:
@c 
@file{.cshrc}ファイルで，以下の@code{csh}コマンド列を使用します．

@example
setenv TEXINPUTS .:/home/me/mylib:/usr/lib/tex/macros
@end example

@need 1000
@c In a @file{.profile} file, you could use the following @code{sh} command
@c sequence:
@c 
@file{.profile}ファイルで，以下の@code{sh}コマンド列を使用します．

@example
@group
TEXINPUTS=.:/home/me/mylib:/usr/lib/tex/macros
export TEXINPUTS
@end group
@end example

@c On MS-DOS/MS-Windows, you would say it like this@footnote{Note the use
@c of the @samp{;} character, instead of @samp{:}, as directory separator
@c on these systems.}:
@c 
MS-DOS/MS-Windowsでは，以下のようにします@footnote{これらのシステムで，
ディレクトリセパレータは，@samp{:}の代わりに@samp{;}文字を使用することに
注意してください．}．

@example
@group
set TEXINPUTS=.;d:/home/me/mylib;c:/usr/lib/tex/macros
@end group
@end example

@noindent
@c It is customary for DOS/Windows users to put such commands in the
@c @file{autoexec.bat} file, or in the Windows Registry.@refill
@c 
DOS/Windowsユーザーは，@file{autoexec.bat}ファイルやWindowsレジストリに，
そのようなコマンドを慣習的に書いています．

@noindent
@c These settings would cause @TeX{} to look for @file{\input} file first
@c in the current directory, indicated by the @samp{.}, then in a
@c hypothetical user's @file{me/mylib} directory, and finally in a system
@c directory @file{/usr/lib/tex/macros}.
@c 
これらの設定で，@TeX{}は@file{\input}ファイルを，最初に@samp{.}で示され
る現在のディレクトリで探し，それから仮にユーザーの@file{me/mylib}ディレ
クトリで探し，最後にシステムディレクトリ@file{/usr/lib/tex/macros}で探し
ます．

@cindex Dumping a .fmt file
@cindex Format file, dumping
@c Finally, you may wish to dump a @file{.fmt} file (@pxref{Memory dumps,,,
@c web2c, Web2c}) so that @TeX{} can load Texinfo faster.  (The
@c disadvantage is that then updating @file{texinfo.tex} requires
@c redumping.)  You can do this by running this command, assuming
@c @file{epsf.tex} is findable by @TeX{}:
@c 
最後に，@TeX{}がTexinfoをより速くロードできるように，@file{.fmt}ファイル
のダンプを望むかもしれません(@pxref{Memory dumps,,, web2c, Web2c})．
(@file{texinfo.tex}の更新は再ダンプを要求するので不利になります．)
@file{epsf.tex}が@TeX{}で検索可能だという仮定で，以下のコマンドを実行す
ることで可能になります．

@example
initex texinfo @@dump
@end example

@c (@code{dump} is a @TeX{} primitive.)  Then, move @file{texinfo.fmt} to
@c wherever your @code{.fmt} files are found; typically, this will be in the
@c subdirectory @file{web2c} of your @TeX{} installation.
@c 
(@code{dump}は@TeX{}プリミティブです．) そして，@file{texinfo.fmt}を
@code{.fmt}ファイルが見つかる場所に移動してください．一般にこれは，
@TeX{}をインストールしたサブディレクトリ@file{web2c}にあります．


@node Overfull hboxes
@section Overfull ``hboxes''
@cindex Overfull @samp{hboxes}
@cindex @samp{hboxes}, overfull
@cindex Final output

@c @TeX{} is sometimes unable to typeset a line without extending it into
@c the right margin.  This can occur when @TeX{} comes upon what it
@c interprets as a long word that it cannot hyphenate, such as an
@c electronic mail network address or a very long title.  When this
@c happens, @TeX{} prints an error message like this:
@c 
@TeX{}では，右のマージンまで拡張しなければ行を植字できないときもあります．
これは，電子メールのネットワークアドレスや非常に長いタイトルのように，ハ
イフネーションできない長い単語だと@TeX{}が解釈したとき生じます．これが生
じたとき，@TeX{}は以下のようなエラーメッセージを出力します．

@example
Overfull @@hbox (20.76302pt too wide)
@end example

@findex hbox
@noindent
@c (In @TeX{}, lines are in ``horizontal boxes'', hence the term, ``hbox''.
@c @samp{@@hbox} is a @TeX{} primitive not needed in the Texinfo language.)
@c 
(@TeX{}では，行は``水平ボックス''にあるので，``hbox''と言う言葉です．
@samp{@@hbox}は@TeX{}プリミティブで，Texinfo言語では必要ありません．)

@c @TeX{} also provides the line number in the Texinfo source file and
@c the text of the offending line, which is marked at all the places that
@c @TeX{} considered hyphenation.
@c @xref{Debugging with TeX, , Catching Errors with @TeX{} Formatting},
@c for more information about typesetting errors.
@c 
@TeX{}は，Texinfoソースファイルでの行番号と，違反している行のテキストを
表示し，それにはハイフネーションだと考えられる全ての位置に印があります．
植字エラーの詳細は，@xref{Debugging with TeX, , Catching Errors with
@TeX{} Formatting}.

@c If the Texinfo file has an overfull hbox, you can rewrite the sentence
@c so the overfull hbox does not occur, or you can decide to leave it.  A
@c small excursion into the right margin often does not matter and may not
@c even be noticeable.
@c 
Texinfoファイルに``overfull hbox''がある場合，文章をoverfull hboxが生じ
ないように書き直すことも，そのままにすることも可能です．小さな右のマージ
ンへのはみ出しは余り問題とならず，目立たない可能性もあります．

@c If you have many overfull boxes and/or an antipathy to rewriting, you
@c can coerce @TeX{} into greatly increasing the allowable interword
@c spacing, thus (if you're lucky) avoiding many of the bad line breaks,
@c like this:
@c 
overfull boxesが多く，書き直しに抵抗がある場合，@TeX{}で利用可能な印字空
間を大きく増加させることも可能で，そのため(運が良ければ)，以下のようにす
ることで多くの悪い行の分割が避けられるでしょう．

@findex \emergencystretch
@example
@@tex
\global\emergencystretch = .9\hsize
@@end tex
@end example

@noindent
@c (You should adjust the fraction as needed.)  This huge value for
@c @code{\emergencystretch} cannot be the default, since then the typeset
@c output would generally be of noticeably lower quality; the default
@c is @samp{.15\hsize}.  @code{\hsize} is the @TeX{} dimension
@c containing the current line width.
@c 
(必要なだけ分数を調節すべきです．) この@code{\emergencystretch}に対する
大きな値では，通常は植字の出力品質がひどく低下するので，デフォルトではあ
りません．デフォルトは@samp{.15\hsize}です．@code{\hsize}は，現在の行の
幅を含む@TeX{}の寸法です．

@cindex Black rectangle in hardcopy
@cindex Rectangle, black in hardcopy
@cindex Box, ugly black in hardcopy
@cindex Ugly black rectangles in hardcopy
@c For what overfull boxes you have, however, @TeX{} will print a large,
@c ugly, black rectangle beside the line that contains the overfull hbox
@c unless told otherwise.  This is so you will notice the location of the
@c problem if you are correcting a draft.
@c 
しかし，そうしない場合，存在するoverfull boxesに対し，@TeX{}は大きく醜い
overfull hboxを含む黒い長方形を行の端に印刷します．ドラフトを修正する場
合，これで問題の場所に気づくでしょう．

@findex finalout
@c To prevent such a monstrosity from marring your final printout, write
@c the following in the beginning of the Texinfo file on a line of its own,
@c before the @code{@@titlepage} command:
@c 
そのような奇形物が，最終的な出力物に出現することを阻止するため，Texinfo
ファイルの最初に，@code{@@titlepage}コマンドの前に，単独行で以下を書いて
ください．

@example
@@finalout
@end example


@node smallbook
@c @section Printing ``Small'' Books
@section ``小さな''本の印刷
@findex smallbook
@cindex Small book size
@cindex Book, printing small
@cindex Page sizes for books
@cindex Size of printed book

@c By default, @TeX{} typesets pages for printing in an 8.5 by 11 inch
@c format.  However, you can direct @TeX{} to typeset a document in a 7 by
@c 9.25 inch format that is suitable for bound books by inserting the
@c following command on a line by itself at the beginning of the Texinfo
@c file, before the title page:@refill
@c 
デフォルトで，@TeX{}は8.5x11インチの書式で印刷するためページに植字します．
しかし，以下のコマンドを単独行で，Texinfoファイルのタイトルページの前の
最初に挿入することで，製本に適した7x9.25インチの書式にするよう，@TeX{}に
命令可能です．@refill

@example
@@smallbook
@end example

@noindent
@c (Since many books are about 7 by 9.25 inches, this command might better
@c have been called the @code{@@regularbooksize} command, but it came to be
@c called the @code{@@smallbook} command by comparison to the 8.5 by 11 inch format.)
@c 
(多くの本はたいてい7x9.25インチなので，このコマンドは，
@code{@@regularbooksize}コマンドと呼ぶ方が良いかもしれませんが，8.5x11イ
ンチの書式との対比で@code{@@smallbook}コマンドと呼ばれるようになりました．)

@c If you write the @code{@@smallbook} command between the
@c start-of-header and end-of-header lines, the Texinfo mode @TeX{}
@c region formatting command, @code{texinfo-tex-region}, will format the
@c region in ``small'' book size (@pxref{Start of Header}).@refill
@c 
@code{@@smallbook}コマンドをstart-of-headerとend-of-header行の間に書く場
合，Texinfoモードの@TeX{}の領域書式化コマンド，@code{texinfo-tex-region} 
は，``小さな''本のサイズに領域を書式化します(@pxref{Start of Header})．
@refill

@c @xref{small}, for information about
@c commands that make it easier to produce examples for a smaller manual.
@c 
より小さなマニュアルを簡単に作成するコマンドの例の情報は，@xref{small}.

@c @xref{Format with texi2dvi}, and @ref{Preparing for TeX,,Preparing for
@c @TeX{}}, for other ways to format with @code{@@smallbook} that do not
@c require changing the source file.
@c 
ソースファイルを変更せず@code{@@smallbook}で書式化を行う方法は，
@xref{Format with texi2dvi}.  また，@ref{Preparing for TeX,,Preparing
for @TeX{}}を参照してください．


@node A4 Paper
@c @section Printing on A4 Paper
@section A4用紙への印刷
@cindex A4 paper, printing on
@cindex A5 paper, printing on
@cindex Paper size, A4
@cindex European A4 paper
@findex afourpaper

@c You can tell @TeX{} to format a document for printing on European size
@c A4 paper (or A5) with the @code{@@afourpaper} (or @code{@@afivepaper})
@c command.  Write the command on a line by itself near the beginning of
@c the Texinfo file, before the title page.  For example, this is how you
@c would write the header for this manual:
@c 
ヨーロッパサイズのA4(またはA5)用紙に印刷するため，ドキュメントの書式化を
@code{@@afourpaper} (または@code{@@afivepaper})コマンドで@TeX{}伝えるこ
とが可能です．Texinfoファイルの最初付近にタイトルページの前に，単独行で
コマンドを書いてください．例えば，このマニュアルのヘッダに書く方法は以下
のようになります．

@example
@group
\input texinfo    @@c -*-texinfo-*-
@@c %**start of header
@@setfilename texinfo
@@settitle Texinfo
@@afourpaper
@@c %**end of header
@end group
@end example

@c @xref{Format with texi2dvi}, and @ref{Preparing for TeX,,Preparing for
@c @TeX{}}, for other ways to format for different paper sizes that do not
@c require changing the source file.
@c 
ソースファイルの変更を必要とすることなく，異なる用紙サイズで書式化を行う
方法は，@xref{Format with texi2dvi}.  また，@ref{Preparing for
TeX,,Preparing for @TeX{}}を参照してください．

@findex afourlatex
@findex afourwide
@c You may or may not prefer the formatting that results from the command
@c @code{@@afourlatex}.  There's also @code{@@afourwide} for A4 paper in
@c wide format.
@c 
コマンド@code{@@afourlatex}の結果の書式化の方がいいかもしれませんし，ま
たそうでないかもしれません．A4用紙での幅広の書式のため，
@code{@@afourwide}もあります．

@node pagesizes
@c @section @code{@@pagesizes} [@var{width}][, @var{height}]: Custom Page Sizes
@section @code{@@pagesizes} [@var{width}][, @var{height}]: カスタムページサイズ
@findex pagesizes
@cindex Custom page sizes
@cindex Page sizes, customized
@cindex Text width and height
@cindex Width of text area
@cindex Height of text area
@cindex Depth of text area

@c You can explicitly specify the height and (optionally) width of the main
@c text area on the page with the @code{@@pagesizes} command.  Write this
@c on a line by itself near the beginning of the Texinfo file, before the
@c title page.  The height comes first, then the width if desired,
@c separated by a comma.  Examples:
@c 
ページの主なテキストの領域の高さと(オプションで)幅を，@code{@@pagesizes} 
コマンドで明示的に指定できます．Texinfoの最初付近で，タイトルページの前
に単独行で書いてください．最初が高さで必要なら幅をカンマで区切って書きま
す．以下が例です．

@example
@@pagesizes 200mm,150mm  @c for b5 paper
@end example
@noindent
@c and
@c 
そして以下も例です．
@example
@@pagesizes 11.5in      @c for legal paper
@end example

@cindex B5 paper, printing on
@cindex Legal paper, printing on
@c This would be reasonable for printing on B5-size paper.  To emphasize,
@c this command specifies the size of the @emph{text area}, not the size of
@c the paper (which is 250@dmn{mm} by 177@dmn{mm} for B5, 14@dmn{in} by
@c 8.5@dmn{in} for legal).
@c 
これは，B5サイズの用紙への印刷に対し妥当です．強調しますが，このコマンド
は@emph{テキストエリア}を指定するコマンドで，用紙サイズを指定しません
(250@dmn{mm}x177@dmn{mm}はB5で，14@dmn{in}x8.5@dmn{in}はleagalです)．

@cindex Margins on page, not controllable
@c To make more elaborate changes, such as changing any of the page
@c margins, you must define a new command in @file{texinfo.tex} (or
@c @file{texinfo.cnf}, @pxref{Preparing for TeX,,Preparing for @TeX{}}).
@c 
ページのマージンを変更するような，より精密な変更に対しては，
@file{texinfo.tex}(または，@file{texinfo.cnf}@pxref{Preparing for
TeX,,Preparing for @TeX{}})で新しいコマンドを定義する必要があります．

@c @xref{Format with texi2dvi}, and @ref{Preparing for TeX,,Preparing for
@c @TeX{}}, for other ways to specify @code{@@pagesizes} that do not
@c require changing the source file.
@c 
ソースファイルを変更せず@code{@@pagesizes}を指定する方法は，@xref{Format
with texi2dvi}.  また，@ref{Preparing for TeX,,Preparing for @TeX{}}を参
照してください．

@c @code{@@pagesizes} is ignored by @code{makeinfo}.
@c 
@code{@@pagesizes}は@code{makeinfo}では無視されます．


@node Cropmarks and Magnification
@c @section Cropmarks and Magnification
@section 断裁トンボと拡大
@findex cropmarks
@cindex Cropmarks for printing
@cindex Printing cropmarks
@c You can (attempt to) direct @TeX{} to print cropmarks at the corners of
@c pages with the @code{@@cropmarks} command.  Write the @code{@@cropmarks}
@c command on a line by itself between @code{@@iftex} and @code{@@end
@c iftex} lines near the beginning of the Texinfo file, before the title
@c page, like this:@refill
@c 
@code{@@cropmarks}コマンドで，@TeX{}にページの角に断裁トンボを印刷させ
(てみ)ることが可能です．タイトルページの前で，Texinfoファイルの最初の方
に，@code{@@iftex}と@code{@@end iftex}行の間に，単独行で，
@code{@@cropmarks}コマンドを以下のように書いてください．

@example
@group
@@iftex
@@cropmarks
@@end iftex
@end group
@end example

@c This command is mainly for printers that typeset several pages on one
@c sheet of film; but you can attempt to use it to mark the corners of a
@c book set to 7 by 9.25 inches with the @code{@@smallbook} command.
@c (Printers will not produce cropmarks for regular sized output that is
@c printed on regular sized paper.)  Since different printing machines work
@c in different ways, you should explore the use of this command with a
@c spirit of adventure.  You may have to redefine the command in
@c @file{texinfo.tex}.
@c 
このコマンドは，主にプリンタが複数ページを1枚のフィルムシートに植字する
ためのものですが，@code{@@smallbook}コマンドで，7x9.25インチに設定した本
の四隅に印を付けてみることも可能です．(通常の大きさの用紙に印刷するため
の通常の大きさの出力に対して，プリンタは断裁トンボを生成しません．)異な
る印刷機は異なる方法で動作するので，冒険心でこのコマンドを使用してみるべ
きです．@file{texinfo.tex}にコマンドを再定義する必要があるかもしれません．

@findex \mag @r{(raw @TeX{} magnification)}
@cindex Magnified printing
@cindex Larger or smaller pages
@c You can attempt to direct @TeX{} to typeset pages larger or smaller than
@c usual with the @code{\mag} @TeX{} command.  Everything that is typeset
@c is scaled proportionally larger or smaller.  (@code{\mag} stands for
@c ``magnification''.)  This is @emph{not} a Texinfo @@-command, but is a
@c plain @TeX{} command that is prefixed with a backslash.  You have to
@c write this command between @code{@@tex} and @code{@@end tex}
@c (@pxref{Raw Formatter Commands}).
@c 
@code{\mag}という@TeX{}コマンドで，通常より大きいまたは小さいページに
@TeX{}に植字させ(てみ)ることができます．植字される全てのものは，相対的に
大きくまたは小さく大きさを調整されます．(@code{\mag}は``magnification(拡
大)''を意味します．)これは，Texinfoの@@-コマンドでは@emph{ありません}が，
バックスラッシュを前置した，普通の@TeX{}コマンドです．このコマンドは，
@code{@@tex}と@code{@@end tex}の間に書く必要があります(@pxref{Raw
Formatter Commands})．

@c Follow the @code{\mag} command with an @samp{=} and then a number that
@c is 1000 times the magnification you desire.  For example, to print pages
@c at 1.2 normal size, write the following near the beginning of the
@c Texinfo file, before the title page:
@c 
以下の@samp{=}と数字が付いている@code{\mag}コマンドは，希望する倍率の
1000倍です．例えば通常サイズの1.2倍に印刷するため，タイトルページの前で，
Texinfoファイルの最初の方に以下のように書いてください．

@example
@group
@@tex
\mag=1200
@@end tex
@end group
@end example

@c With some printing technologies, you can print normal-sized copies that
@c look better than usual by giving a larger-than-normal master to your
@c print shop.  They do the reduction, thus effectively increasing the
@c resolution.
@c 
印刷技術によっては，印刷店に通常より大きなマスターを与えることで，より良
く見える通常サイズのコピーを印刷可能です．彼らはそれにより，効率的に解像
度をあげ，縮小します．

@c Depending on your system, DVI files prepared with a
@c nonstandard-@code{\mag} may not print or may print only with certain
@c magnifications.  Be prepared to experiment.
@c 
システムによっては，標準でない@code{\mag}を使用したDVIファイルは，印刷で
きなかったり，特定の拡大率でしか印刷できなかったりします．試してみたくだ
さい．


@node PDF Output
@c @section PDF Output
@section PDF出力
@cindex PDF output

@pindex pdftex
@c You can generate a PDF output file from Texinfo source by using the
@c @command{pdftex} program to process your file instead of plain
@c @command{tex}.  Just run @samp{pdftex foo.texi} instead of @samp{tex
@c foo.texi}, or give the @samp{--pdf} option to @command{texi2dvi}.
@c 
普通の@command{tex}の代わりに，ファイルを処理する@command{pdftex}プログ
ラムを使用することで，TexinfoソースファイルからPDF出力ファイルを生成する
ことが可能となります．@samp{tex foo.texi}の代わりに@samp{pdftex
foo.texi}を実行するか，@command{texi2dvi}に@samp{--pdf}オプションを与え
てください．

@c @dfn{PDF} stands for `Portable Document Format'. It was invented by
@c Adobe Systems some years ago for document interchange, based on their
@c PostScript language.  A @uref{http://www.foolabs.com/xpdf/, PDF reader}
@c for the X window system is freely available, as is the
@c @uref{http://partners.adobe.com/asn/developer/technotes/, definition of
@c the file format}.  Since PDF is a binary format, there are no
@c @samp{@@ifpdf} or @samp{@@pdf} commands as with the other output
@c formats.
@c 
@dfn{PDF}は`Portable Document Format(移植可能な文書のフォーマット)'を意
味しています．それは数年前に，ドキュメントの相互変換のために，PostScript
言語をベースにして，アドビシステムズで開発されました．X window systemに
対する@uref{http://www.foolabs.com/xpdf/, PDF reader}は，
@uref{http://partners.adobe.com/asn/developer/technotes/, definition of
the file format}でそのまま自由に利用することが可能です．PDFは，バイナリ
形式なので，他の出力形式のような@samp{@@ifpdf}や@samp{@@pdf}コマンドはあ
りません．

@c Despite the `portable' in the name, PDF files are nowhere near as
@c portable in practice as the plain ASCII formats (Info, HTML) that
@c Texinfo supports (DVI portability is arguable).  They also tend to be
@c much larger and do not support the bitmap fonts used by @TeX{} (by
@c default) very well.  Nevertheless, a PDF file does preserve an actual
@c printed document on a screen as faithfully as possible, so it has its place.
@c 
名前に`portable'があるにもかかわらず，PDFファイルはTexinfoがサポートする
普通のASCII形式の(InfoやHTML)程，実際には移植性がありません(DVIと比較し
た移植性は，議論の余地があります)．それらは，かなり大きくなりつつあり，
@TeX{}で(デフォルトで)非常によく使用されているビットマップフォントをサポー
トしていません．それにもかかわらず，PDFファイルは画面上のドキュメントを
できる限り忠実に実際の印刷物に対して維持するので，地位を保っています．

@c PDF support in Texinfo is fairly rudimentary.
@c 
TexinfoのPDFサポートはかなり基本的です．


@node Creating and Installing Info Files
@c @chapter Creating and Installing Info Files
@chapter Infoファイルの作成とインストール

@c This chapter describes how to create and install Info files.  @xref{Info
@c Files}, for general information about the file format itself.
@c 
この章は，Infoファイルの作成とインストールの方法を述べます．ファイルの書
式自身の一般的な情報は，@xref{Info Files}.

@menu
* Creating an Info File::       
* Installing an Info File::     
@end menu


@node Creating an Info File
@c @section Creating an Info File
@section Infoファイルの作成
@cindex Creating an Info file
@cindex Info, creating an online file
@cindex Formatting a file for Info

@c @code{makeinfo} is a program that converts a Texinfo file into an Info
@c file, HTML file, or plain text.  @code{texinfo-format-region} and
@c @code{texinfo-format-buffer} are GNU Emacs functions that convert
@c Texinfo to Info.
@c 
@code{makeinfo}は，TexinfoファイルをInfoファイル，HTMLファイル，またはプ
レーンテキストに変換するプログラムです．@code{texinfo-format-region}と，
@code{texinfo-format-buffer}は，TexinfoをInfoに変換するGNU Emacsの関数で
す．

@c For information on installing the Info file in the Info system,
@c @pxref{Installing an Info File}.
@c 
InfoファイルをInfoシステムにインストールする情報は，@pxref{Installing an
Info File}．

@menu
* makeinfo advantages::         @code{makeinfo} provides better error checking.
* Invoking makeinfo::           How to run @code{makeinfo} from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run @code{makeinfo} from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to @code{makeinfo}.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.
* makeinfo html::               Generating HTML output.
@end menu


@node makeinfo advantages
@c @subsection @code{makeinfo} Preferred
@subsection @code{makeinfo}の利点

@c The @code{makeinfo} utility creates an Info file from a Texinfo source
@c file more quickly than either of the Emacs formatting commands and
@c provides better error messages.  We recommend it.  @code{makeinfo} is a
@c C program that is independent of Emacs.  You do not need to run Emacs to
@c use @code{makeinfo}, which means you can use @code{makeinfo} on machines
@c that are too small to run Emacs.  You can run @code{makeinfo} in any one
@c of three ways: from an operating system shell, from a shell inside
@c Emacs, or by typing the @kbd{C-c C-m C-r} or the @kbd{C-c C-m C-b}
@c command in Texinfo mode in Emacs.
@c @refill
@c 
@code{makeinfo}ユーティリティは，Emacs書式化コマンドより速くTexinfoソー
スファイルからInfoファイルを作成し，より良いエラーメッセージを提供してい
ます．我々はそれを勧めています．@code{makeinfo}はEmacsから独立したCプロ
グラムです．@code{makeinfo}を使用するためにEmacsを実行する必要はなく，そ
のことは，Emacsを実行するには余りに非力なマシンでも@code{makeinfo}が実行
可能だということを意味しています．@code{makeinfo}は，三つの内の一つの方
法で実行可能です．それらは，オペレーティングシステムのシェルから，Emacs 
のシェルから，またはEmacsのTexinfoモードで@kbd{C-c C-m C-r}や@kbd{C-c
C-m C-b}コマンドを入力する方法です．@refill

@c The @code{texinfo-format-region} and the @code{texinfo-format-buffer}
@c commands are useful if you cannot run @code{makeinfo}.  Also, in some
@c circumstances, they format short regions or buffers more quickly than
@c @code{makeinfo}.@refill
@c 
@code{texinfo-format-region}と@code{texinfo-format-buffer}コマンドは，
@code{makeinfo}を実行不可能なとき役に立ちます．また，状況によって短い領
域やバッファを@code{makeinfo}より速く書式化します．@refill

@node Invoking makeinfo
@c @subsection Running @code{makeinfo} from a Shell
@subsection シェルから@code{makeinfo}を実行する

@c To create an Info file from a Texinfo file, type @code{makeinfo}
@c followed by the name of the Texinfo file.  Thus, to create the Info
@c file for Bison, type the following to the shell:
@c 
TexinfoファイルからInfoファイルを作成するため，@code{makeinfo}に続けて，
Texinfoファイルの名前を入力してください．このため，BisonのInfoファイルを
作成するためには，シェルで以下のように入力します．

@example
makeinfo bison.texinfo
@end example

@c (You can run a shell inside Emacs by typing @kbd{M-x shell}.)@refill
@c 
(@kbd{M-x shell}の入力で，Emacs内部でシェルを実行可能です．)@refill

@ifinfo
@c Sometimes you will want to specify options.  For example, if you wish
@c to discover which version of @code{makeinfo} you are using,
@c type:@refill
@c 
オプションを指定したい場合もあります．例えば，使用している
@code{makeinfo}のバージョンを知りたい場合は以下を入力してください．
@refill

@example
makeinfo --version
@end example

@c @xref{makeinfo options}, for more information.
@c 
詳細は，@xref{makeinfo options}.
@end ifinfo


@node makeinfo options
@c @subsection Options for @code{makeinfo}
@subsection @code{makeinfo}のオプション
@cindex @code{makeinfo} options
@cindex Options for @code{makeinfo}

@c The @code{makeinfo} command takes a number of options.  Most often,
@c options are used to set the value of the fill column and specify the
@c footnote style.  Each command line option is a word preceded by
@c @samp{--} or a letter preceded by @samp{-}.  You can use abbreviations
@c for the long option names as long as they are unique.@refill
@c 
@code{makeinfo}コマンドはいくつかのオプションをとります．最もよく使用さ
れるオプションは，列を補充する値を設定するためのものと，脚注スタイルを指
定するために使用するものです．それぞれのコマンド行のオプションは，
@samp{--} を前に置いた単語，または，@samp{-}を前に置いた文字です．長いオ
プション名は，唯一に決まる程長い場合は省略可能です．@refill

@c For example, you could use the following shell command to create an Info
@c file for @file{bison.texinfo} in which each line is filled to only 68
@c columns:@refill
@c 
例えば以下のシェルコマンドで，それそれの段の文字列を68文字で補充する
@file{bison.texinfo}に対するInfoファイルを作成するために，以下のようなシェ
ルコマンドを使用することが可能でしょう．@refill

@example
makeinfo --fill-column=68 bison.texinfo
@end example

@c You can write two or more options in sequence, like this:@refill
@c 
二つ以上のオプションを，以下のように続けて書くことが可能です．@refill

@example
makeinfo --no-split --fill-column=70 @dots{}
@end example

@noindent
@c This would keep the Info file together as one possibly very long
@c file and would also set the fill column to 70.@refill
@c 
これは，Infoファイルを，一つのおそらく大変長いファイルにまとめ，一段の文
字数を70文字に設定します．@refill

@c The options are:
@c 
オプションは，以下のとおりです．

@table @code

@item -D @var{var}
@opindex -D @var{var}
@c Cause the variable @var{var} to be defined.  This is equivalent to
@c @code{@@set @var{var}} in the Texinfo file (@pxref{set clear value}).
@c 
変数@var{var}を定義します．これは，Texinfoファイルでの@code{@@set
@var{var}}と同じです(@pxref{set clear value})．

@item --commands-in-node-names
@opindex --commands-in-node-names
@c Allow @code{@@}-commands in node names.  This is not recommended, as it
@c can probably never be implemented in @TeX{}.  It also makes
@c @code{makeinfo} much slower.  Also, this option is ignored when
@c @samp{--no-validate} is used.  @xref{Pointer Validation}, for more
@c details.
@c 
ノード名で@code{@@}コマンドを許可します．おそらく@TeX{}で実装できないの
で推奨しません．また，@code{makeinfo}も非常に遅くなります．また，このオ
プションは@samp{--no-validate}が使用されているときも無視されます．詳細は，
@xref{Pointer Validation}.

@item --docbook
@opindex --docbook
@c Generate DocBook output rather than Info.  
@c 
InfoではなくDocBook出力を生成します．

@item --enable-encoding
@opindex --enable-encoding
@c Output accented and special characters in Info or plain text output
@c based on @samp{@@documentencoding}.
@c 
@samp{@@documentencoding}を元に，Infoやプレーンテキスト出力にアクセント
付の文字と特殊文字を出力します．

@item --error-limit=@var{limit}
@itemx -e @var{limit}
@opindex --error-limit=@var{limit}
@opindex -e @var{limit}
@c Set the maximum number of errors that @code{makeinfo} will report
@c before exiting (on the assumption that continuing would be useless);
@c default 100.
@c 
終了までに@code{makeinfo}が報告するエラーの数の最大値を設定します(続けて
も意味が無いでしょう)．デフォルトは100です

@item --fill-column=@var{width}
@itemx -f @var{width}
@opindex --fill-column=@var{width}
@opindex -f @var{width}
@c Specify the maximum number of columns in a line; this is the right-hand
@c edge of a line.  Paragraphs that are filled will be filled to this
@c width.  (Filling is the process of breaking up and connecting lines so
@c that lines are the same length as or shorter than the number specified
@c as the fill column.  Lines are broken between words.) The default value
@c is 72.  Ignored with @samp{--html}.
@c 
一段の最大文字数を指定します．これは行の右端です．おそらくこの幅で補充す
るでしょう．(補充とは，段を補充し，指定した数と同じまたはそれより短い長
さにするため，行を切ったり繋げたりする処理です．行は単語で切られます．) 
デフォルト値は72です．@samp{--html}では無視されます．

@item --footnote-style=@var{style}
@itemx -s @var{style}
@opindex --footnote-style=@var{style}
@opindex -s @var{style}
@c Set the footnote style to @var{style}, either @samp{end} for the end
@c node style (the default) or @samp{separate} for the separate node style.
@c The value set by this option overrides the value set in a Texinfo file
@c by an @code{@@footnotestyle} command (@pxref{Footnotes}).  When the
@c footnote style is @samp{separate}, @code{makeinfo} makes a new node
@c containing the footnotes found in the current node.  When the footnote
@c style is @samp{end}, @code{makeinfo} places the footnote references at
@c the end of the current node.  Ignored with @samp{--html}.
@c 
脚注の形式を@var{style}に設定します．ノードの終りの形式のための
@samp{end}，またはノードを分ける形式の@samp{separate}のいずれかです．こ
のオプションで設定した値は，Texinfoファイルで@code{@@footnotestyle}コマ
ンド(@pxref{Footnotes})で設定した値に優先します．脚注形式が
@samp{separate}のとき，@code{makeinfo}は現在のノードで見つかった脚注を含
む新しいノードを作成します．脚注形式が@samp{end}のとき，@code{makeinfo} 
は現在のノードの終りに脚注の参照を置きます．@samp{--html}では無視されま
す．

@item --force
@itemx -F
@opindex --force
@opindex -F
@c Ordinarily, if the input file has errors, the output files are not
@c created.  With this option, they are preserved.
@c 
通常，入力ファイルにエラーがある場合，出力ファイルは作成されません．この
オプションを用いると，出力ファイルが提供されます．

@item --help
@itemx -h
@opindex --help
@opindex -h
@c Print a usage message listing all available options, then exit successfully.
@c 
利用可能なオプションをリストアップした使用方法のメッセージを出力し，正し
く終了します．

@item --html
@opindex --html
@c Generate HTML output rather than Info.  @xref{makeinfo html}.  By
@c default, the HTML output is split into one output file per source node,
@c and the split output is written into a subdirectory with the name of the
@c top-level info file.
@c 
Infoではなく，HTML出力物を生成します．@xref{makeinfo html}.  デフォルト
で，HTML出力はソースのノードごとに一つの出力ファイルに分割し，トップレベ
ルのInfoファイルの名前を用いたサブディレクトリに分割した出力を書き込みま
す．

@item -I @var{dir}
@opindex -I @var{dir}
@c Append @var{dir} to the directory search list for finding files that
@c are included using the @code{@@include} command.  By default,
@c @code{makeinfo} searches only the current directory.  If @var{dir} is
@c not given, the current directory @file{.} is appended.  Note that
@c @var{dir} can actually be a list of several directories separated by the
@c usual path separator character (@samp{:} on Unix, @samp{;} on
@c MS-DOS/MS-Windows).
@c 
@code{@@include}コマンドを使用してインクルードしているファイルを見つける
ためのディレクトリ検索リストに，@var{dir}を追加します．デフォルトで，
@code{makeinfo}はカレントディレクトリのみを探します．@var{dir}が与えられ
ていない場合，カレントディレクトリ@file{.}が追加されます．@var{dir}では，
通常のパスの分離文字(Unixの@samp{:}，MS-DOS/MS-Windowsの@samp{;})で分割
されている複数のディレクトリのリストが可能だということに注意してください．

@item --ifhtml
@itemx --ifinfo
@itemx --ifplaintext
@itemx --iftex
@itemx --ifxml
@opindex --ifhtml
@opindex --ifinfo
@opindex --ifplaintext
@opindex --iftex
@opindex --ifxml
@c For the specified format, process @samp{@@if@var{format}} and
@c @samp{@@@var{format}} commands even if not generating the given output
@c format.  For instance, if @option{--iftex} is specified, then
@c @samp{@@iftex} and @samp{@@tex} blocks will be read.  This can be useful
@c when postprocessing the output.
@c 
指定されたフォーマットに対し，該当する出力フォーマットを生成していない場
合でも@samp{@@if@var{format}}と@samp{@@@var{format}}コマンドを処理します．
例えば，@option{--iftex}が指定されている場合，@samp{@@iftex}と
@samp{@@tex}ブロックが読み込まれます．これは，出力を後処理するとき役に立
つはずです．

@item --macro-expand=@var{file}
@itemx -E @var{file}
@opindex --macro-expand=@var{file}
@opindex -E @var{file}
@c Output the Texinfo source with all the macros expanded to the named
@c file.  Normally, the results of macro expansion are used internally by
@c @code{makeinfo} and then discarded.  This option is used by
@c @command{texi2dvi} if you are using an old version of @file{texinfo.tex}
@c that does not support @code{@@macro}.
@c 
指名されたファイルに，全てのマクロを展開したTexinfoソースを出力します．
通常，マクロの展開の結果は@code{makeinfo}内部で使用された後に削除されま
す．このオプションは，@code{@@macro}をサポートしていない古いバージョンの
@file{texinfo.tex}を使用している場合，@command{texi2dvi}で使用されます．

@item --no-headers
@opindex --no-headers
@cindex Plain text output
@cindex ASCII text output
@cindex Generating plain text files
@cindex @file{INSTALL} file, generating
@cindex Node separators, omitting
@cindex Menus, omitting
@c For Info output, do not include menus or node separator lines in the
@c output.  This results in a simple plain text file that you can (for
@c example) send in email without complications, or include in a
@c distribution (as in an @file{INSTALL} file).
@c 
Info出力に対し，出力にメニューやノードの分離行を含めません．この結果は，
(例えば)添付することなく電子メールで送付したり，(@file{INSTALL}ファイル
のように)配布物に含めたりすることが可能な，単純なプレーンテキストファイ
ルになります．

@cindex Navigation links, omitting
@c For HTML output, likewise omit menus.  And if @samp{--no-split} is also
@c specified, do not include a navigation links at the top of each node
@c (these are never included in the default case of split output).
@c @xref{makeinfo html}.
@c 
HTML出力に対しても同様にメニューは削除されます．そして@samp{--no-split} 
も指定している場合，それぞれのノードのトップへのナビゲーションリンクは含
めません(これらはデフォルトの状況での分割された出力に含められることもあ
りません)．@xref{makeinfo html}.

@c In both cases, write to standard output by default (can still be
@c overridden by @option{-o}).
@c 
どちらの状況でも，デフォルトで標準出力に書き出します(@option{-o}で優先さ
せることも可能です)．

@item --no-ifhtml
@itemx --no-ifinfo
@itemx --no-ifplaintext
@itemx --no-iftex
@itemx --no-ifxml
@opindex --no-ifhtml
@opindex --no-ifinfo
@opindex --no-ifplaintext
@opindex --no-iftex
@opindex --no-ifxml
@c Do not process @samp{@@if@var{format}} and @samp{@@@var{format}}
@c commands even if generating the given format.  For instance, if
@c @option{--no-ifhtml} is specified, then @samp{@@ifhtml} and
@c @samp{@@html} blocks will not be read.
@c 
指定されたフォーマットに対し，該当する出力フォーマットを生成している場合
でも@samp{@@if@var{format}}と@samp{@@@var{format}}コマンドを処理しません．
例えば，@option{---no-ifhtml}が指定されている場合，@samp{@@ifhtml}と
@samp{@@html}ブロックは読み込まれません．

@item --no-split
@opindex --no-split
@cindex Splitting of output files
@cindex Output file splitting
@c Suppress the splitting stage of @code{makeinfo}.  By default, large
@c output files (where the size is greater than 70k bytes) are split into
@c smaller subfiles.  For Info output, each one is approximately 50k bytes.
@c For HTML output, each file contains one node (@pxref{makeinfo html}).
@c 
@code{makeinfo}での分割ステージを抑制します．デフォルトで，大きな出力ファ
イル(70kバイトより大きいサイズ)はより小さいサブファイルに分割されます．
Info出力に対しそれぞれ約50kバイトになります．HTML出力に対し，それぞれの
ファイルは一つのノードを含みます(@pxref{makeinfo html})．

@item --no-pointer-validate
@itemx --no-validate
@opindex --no-pointer-validate
@opindex --no-validate
@cindex Pointer validation, suppressing
@c Suppress the pointer-validation phase of @code{makeinfo}.  This can also
@c be done with the @code{@@novalidate} command (@pxref{Use TeX,,Use
@c @TeX{}}).  Normally, after a Texinfo file is processed, some consistency
@c checks are made to ensure that cross references can be resolved, etc.
@c @xref{Pointer Validation}.
@c 
@code{makeinfo}のポインタの有効化のステージを抑制します．これは，
@code{@@novalidate}コマンドでも可能です(@pxref{Use TeX,,Use @TeX{}})．通
常はTexinfoファイルが処理された後，相互参照が解決されていることを確かめ
るなどのため，一貫性の調査が行われます．@xref{Pointer Validation}.

@item --no-warn
@opindex --no-warn
@c Suppress warning messages (but @emph{not} error messages).  You might
@c want this if the file you are creating has examples of Texinfo cross
@c references within it, and the nodes that are referenced do not actually
@c exist.
@c 
警告メッセージ(エラーメッセージ@emph{ではない})を抑制します．作成したファ
イルにTexinfoの相互参照の例がある場合と，実際には存在しないノードの参照
がある場合にこうしたいもしれません．

@item --number-sections
@opindex --number-sections
@c Output chapter, section, and appendix numbers as in printed manuals.
@c 
印刷されたマニュアルでの，章，セクション，そして付録の番号を出力します．

@item --no-number-footnotes
@opindex --no-number-footnotes
@c Suppress automatic footnote numbering.  By default, @code{makeinfo}
@c numbers each footnote sequentially in a single node, resetting the
@c current footnote number to 1 at the start of each node.
@c 
自動的な脚注への番号付けを抑制します．デフォルトで@code{makeinfo}は，単
一ノード内のそれぞれの脚注に順番に番号付けを行い，それぞれのノードの開始
時に現在の脚注番号を1にリセットします．

@item --output=@var{file}
@itemx -o @var{file}
@opindex --output=@var{file}
@opindex -o @var{file}
@c Specify that the output should be directed to @var{file} and not to the
@c file name specified in the @code{@@setfilename} command found in the
@c Texinfo source (@pxref{setfilename}).  If @var{file} is @samp{-}, output
@c goes to standard output and @samp{--no-split} is implied.  For split
@c HTML output, @var{file} is the name for the directory into which all
@c HTML nodes are written (@pxref{makeinfo html}).
@c 
出力を，Texinfoソースで見つかる@code{@@setfilename}コマンドで指定したファ
イル名ではなく，@var{file}に指定します(@pxref{setfilename})．@var{file} 
が@samp{-}の場合は出力は標準出力になり，@samp{--no-split}が暗黙に指定さ
れます．分割されれたHTML出力では，@var{file}はすべてのHTMLファイルが書き
込まれるディレクトリの名前になります(@pxref{makeinfo html})．

@item -P @var{dir}
@opindex -P @var{dir}
@c Prepend @var{dir} to the directory search list for @code{@@include}.
@c If @var{dir} is not given, the current directory @file{.} is prepended.
@c See @samp{-I} for more details.
@c 
@code{@@include}に対するディレクトリ検索リストの前に@var{dir}を追加しま
す．@var{dir}が与えられない場合，カレントディレクトリ@file{.}が前に追加
されます．詳細は@samp{-I}を参照してください．

@item --paragraph-indent=@var{indent}
@itemx -p @var{indent}
@opindex --paragraph-indent=@var{indent}
@opindex -p @var{indent}
@c Set the paragraph indentation style to @var{indent}.  The value set by
@c this option overrides the value set in a Texinfo file by an
@c @code{@@paragraphindent} command (@pxref{paragraphindent}).  The value
@c of @var{indent} is interpreted as follows:
@c 
段落の字下げ形式を@var{indent}に設定します．このオプションで設定した値は，
Texinfoファイルで@code{@@paragraphindent}コマンドで設定した値に優先しま
す(@pxref{paragraphindent})．@var{indent}の値は，以下のように解釈されま
す．

@table @asis
@item @samp{asis}
@c Preserve any existing indentation at the starts of paragraphs.
@c 
段落の開始で，あらゆる字下げを保存します．

@item @samp{0} or @samp{none}
@c Delete any existing indentation.
@c 
既存の字下げを削除します．

@item @var{num}
@c Indent each paragraph by @var{num} spaces.
@c 
それぞれの段落を，@var{num}個の空白で字下げします．
@end table

@item --reference-limit=@var{limit}
@itemx -r @var{limit}
@opindex --reference-limit=@var{limit}
@opindex -r @var{limit}
@c Set the value of the number of references to a node that
@c @code{makeinfo} will make without reporting a warning.  If a node has more
@c than this number of references in it, @code{makeinfo} will make the
@c references but also report a warning.  The default is 1000.
@c 
@code{makeinfo}が警告を報告せずに作成する，ノード参照数の値を設定します．
ノードにこの数以上の参照がある場合，@code{makeinfo}は参照を作成しますが
警告を報告します．デフォルトは1000です．

@item --split-size=@var{num}
@opindex --split-size=@var{num}
@c Keep Info files to at most @var{num} characters; default is 50,000.
@c 
Infoファイルを最大@var{num}文字に保ちます．デフォルトは50,000文字です．

@item -U @var{var}
@c Cause @var{var} to be undefined.  This is equivalent to
@c @code{@@clear @var{var}} in the Texinfo file (@pxref{set clear value}).
@c 
@var{var}を未定義にします．これは，Texinfoファイルでの@code{@@clear
@var{var}}と同じです(@pxref{set clear value})．

@item --verbose
@opindex --verbose
@c Cause @code{makeinfo} to display messages saying what it is doing.
@c Normally, @code{makeinfo} only outputs messages if there are errors or
@c warnings.
@c 
@code{makeinfo}に，行っていることのメッセージを表示させます．通常
@code{makeinfo}は，エラーや警告がある場合のみメッセージを出力します．

@item --version
@itemx -V
@opindex --version
@opindex -V
@c Print the version number, then exit successfully.
@c 
バージョンナンバーを出力し，正しく終了します．

@item --xml
@opindex --xml
@c Generate XML output rather than Info.  
@c 
InfoではなくXML出力を生成します．

@end table


@node Pointer Validation
@c @subsection Pointer Validation
@subsection ポインタの照合
@cindex Pointer validation with @code{makeinfo}
@cindex Validation of pointers

@c If you do not suppress pointer validation with the @samp{--no-validate}
@c option or the @code{@@novalidate} command in the source file (@pxref{Use
@c TeX,,Use @TeX{}}), @code{makeinfo} will check the validity of the final
@c Info file.  Mostly, this means ensuring that nodes you have referenced
@c really exist.  Here is a complete list of what is checked:
@c 
@samp{--no-validate}オプションやソースファイルでの@code{@@novalidate} コ
マンド(@pxref{Use TeX,,Use @TeX{}})でポインタの照合を抑制しない場合，
@code{makeinfo}は最終的なInfoファイルの一貫性を調べます．ほとんどこれは，
参照したノードが本当に存在していることを確かめることを意味します．調べる
ものの完全なリストは以下のようになります．

@enumerate
@item
@c If a `Next', `Previous', or `Up' node reference is a reference to a
@c node in the current file and is not an external reference such as to
@c @file{(dir)}, then the referenced node must exist.@refill
@c 
`Next'，`Previous'，または`Up'ノードの参照が現在のファイルのノードへの参
照で，@file{(dir)}のような外部での参照ではない場合，参照されるノードが存
在する必要があります．@refill

@item
@c In every node, if the `Previous' node is different from the `Up' node,
@c then the node pointed to by the `Previous' field must have a `Next'
@c field which points back to this node.@refill
@c 
全てのノードで，`Previous'ノードが`Up'ノードと異なる場合，`Previous'フィー
ルドで指し示すノードには，このノードへ戻る`Next'フィールドが存在する必要
があります．@refill

@item
@c Every node except the `Top' node must have an `Up' pointer.@refill
@c 
`Top'ノード以外の全てのノードには，`Up'ポインタが存在する必要があります．
@refill

@item
@c The node referenced by an `Up' pointer must itself reference the current
@c node through a menu item, unless the node referenced by `Up'
@c has the form `(@var{file})'.
@c 
`Up'ポインタで参照されるノードは，`Up'で参照されるノードが`(@var{file})' 
でない限り，現在のノードのメニュー項目にそれ自身の参照が存在する必要があ
ります．

@item
@c If the `Next' reference of a node is not the same as the `Next' reference
@c of the `Up' reference, then the node referenced by the `Next' pointer
@c must have a `Previous' pointer that points back to the current node.
@c This rule allows the last node in a section to point to the first node
@c of the next chapter.@refill
@c 
ノードの`Next'の参照が`Up'の参照の`Next'の参照と同じでない場合，`Next' 
ポインタで参照されるノードには，現在のノードに戻る`Previous'ポインタが存
在する必要があります．この規則で，次の章の最初のノードを指し示しているセ
クションの最後のノードが可能になります．@refill

@item
@c Every node except `Top' should be referenced by at least one other node,
@c either via the `Previous' or `Next' links, or via a menu or a
@c cross-reference.@refill
@c 
`Top'以外の全てのノードは，`Previous'や`Next'のリンクや，メニューや相互
参照による，少なくとも一つの他のノードからの参照があるべきです．
@end enumerate

@cindex @@-commands in @@node, limited support
@c Some Texinfo documents might fail during the validation phase because
@c they use commands like @code{@@value} and @code{@@definfoenclose} in
@c node definitions and cross-references inconsistently.  Consider the
@c following example:
@c 
Texinfoドキュメントには，ノード定義で@code{@@value}と
@code{@@definfoenclose}のようなコマンドを使用したり，矛盾した相互参照に
対する照合のフェーズで失敗するものもあります．以下の例を考えます．

@example
@group
@@set nodename Node 1

@@node @@value@{nodename@}, Node 2, Top, Top

This is node 1.

@@node Node 2, , Node 1, Top

This is node 2.
@end group
@end example

@noindent
@c Here, the node ``Node 1'' was referenced both verbatim and through
@c @code{@@value}.
@c 
ここで，ノード``Node 1''はその単語と@code{@@value}の両方で参照されます．

@c By default, @code{makeinfo} fails such cases, because node names are not
@c fully expanded until they are written to the output file.  You should
@c always try to reference nodes consistently; e.g., in the above example,
@c the second @code{@@node} line should have also used @code{@@value}.
@c However, if, for some reason, you @emph{must} reference node names
@c inconsistently, and @code{makeinfo} fails to validate the file, you can
@c use the @samp{--commands-in-node-names} option to force @code{makeinfo}
@c to perform the expensive expansion of all node names it finds in the
@c document.  This might considerably slow down the program, though;
@c twofold increase in conversion time was measured for large documents
@c such as the Jargon file.
@c 
デフォルトでは，ノード名が出力ファイルに書かれるまでは完全に展開されない
ので，そのような場合@code{makeinfo}は失敗します．常に一貫してノード参照
するべきです．例えば上の例では，二番目の@code{@@node}行にも
@code{@@value} があるべきです．しかし，理由があって矛盾したノード名の参
照をする@emph{必要があり}，@code{makeinfo}がファイルの有効化に失敗した場
合，@code{makeinfo}がドキュメントで見つかる全てのノード名を展開するよう
な負荷の高い作業を実行をするよう，@samp{--commands-in-node-names}オプショ
ンを使用することが可能です．しかしこれは，プログラムがかなり遅くなります．
変換時間の2倍の増加が，Jargonファイルのような大きなファイルで測定されま
した．

@cindex @@value in @@node lines
@c The support for @code{@@}-commands in @code{@@node} directives is not
@c general enough to be freely used.  For example, if the example above
@c redefined @code{nodename} somewhere in the document, @code{makeinfo}
@c will fail to convert it, even if invoked with the
@c @samp{--commands-in-node-names} option.
@c 
@code{@@node}ディレクティブでの@code{@@}-コマンドのサポートは，自由に使
える程には一般的に十分ではありません．例えば上の例では，ドキュメントのど
こかで@code{nodename}が再定義される場合，たとえ
@samp{--commands-in-node-names}をオプションを呼び出していても
@code{makeinfo}は変換に失敗します．

@c @samp{--commands-in-node-names} has no effect if the @samp{--no-validate}
@c option is given.
@c 
@samp{--no-validate}が与えられた場合，@samp{--commands-in-node-names}は
効果がありません．


@node makeinfo in Emacs
@c @subsection Running @code{makeinfo} Within Emacs
@subsection Emacs内部で@code{makeinfo}を実行する
@cindex Running @code{makeinfo} in Emacs
@cindex @code{makeinfo} inside Emacs
@cindex Shell, running @code{makeinfo} in

@c You can run @code{makeinfo} in GNU Emacs Texinfo mode by using either the
@c @code{makeinfo-region} or the @code{makeinfo-buffer} commands.  In
@c Texinfo mode, the commands are bound to @kbd{C-c C-m C-r} and @kbd{C-c
@c C-m C-b} by default.@refill
@c 
@code{makeinfo-region}や@code{makeinfo-buffer}コマンドを使用することで，
GNU Emacs Texinfoモードで@code{makeinfo}を実行することが可能です．
Texinfoモードでは，コマンドはデフォルトで，@kbd{C-c C-m C-r}と@kbd{C-c
C-m C-b}に割り当てられています．@refill

@table @kbd
@item C-c C-m C-r
@itemx M-x makeinfo-region
@c Format the current region for Info.@refill
@c 
現在の領域をInfoに書式化します．@refill
@findex makeinfo-region

@item C-c C-m C-b
@itemx M-x makeinfo-buffer
@c Format the current buffer for Info.@refill
@c 
現在のバッファをInfoに書式化します．@refill
@findex makeinfo-buffer
@end table

@c When you invoke either @code{makeinfo-region} or
@c @code{makeinfo-buffer}, Emacs prompts for a file name, offering the
@c name of the visited file as the default.  You can edit the default
@c file name in the minibuffer if you wish, before pressing @key{RET} to
@c start the @code{makeinfo} process.@refill
@c 
@code{makeinfo-region}や@code{makeinfo-buffer}を呼び出すとき，Emacsはファ
イル名のためプロンプトを出し，デフォルトとして訪問されたファイルの名前を
提示します．希望があれば，@code{makeinfo}処理を始める@key{RET}を押す前に，
ミニバッファのデフォルトファイル名を編集できます．@refill

@c The Emacs @code{makeinfo-region} and @code{makeinfo-buffer} commands
@c run the @code{makeinfo} program in a temporary shell buffer.  If
@c @code{makeinfo} finds any errors, Emacs displays the error messages in
@c the temporary buffer.@refill
@c 
Emacsの@code{makeinfo-region}と@code{makeinfo-buffer}コマンドは，一時的
なシェルバッファで@code{makeinfo}プログラムを実行します．@code{makeinfo} 
がエラーを見つけた場合，Emacsはエラーメッセージを一時的なバッファに表示
します．@refill

@cindex Errors, parsing
@cindex Parsing errors
@findex next-error
@c You can parse the error messages by typing @kbd{C-x `}
@c (@code{next-error}).  This causes Emacs to go to and position the
@c cursor on the line in the Texinfo source that @code{makeinfo} thinks
@c caused the error.  @xref{Compilation, , Running @code{make} or
@c Compilers Generally, emacs, The GNU Emacs Manual}, for more
@c information about using the @code{next-error} command.@refill
@c 
@kbd{C-x `}(@code{next-error})の入力で，エラーメッセージを解析することが
可能です．これでEmacsは，@code{makeinfo}がエラーとしたTexinfoソースの行
にカーソルを移動します．@code{next-error}コマンドの使用の詳細は，
@xref{Compilation, , Running @code{make} or Compilers Generally, emacs,
The GNU Emacs Manual}.@refill

@c In addition, you can kill the shell in which the @code{makeinfo}
@c command is running or make the shell buffer display its most recent
@c output.@refill
@c 
さらに，@code{makeinfo}コマンドを実行しているシェルを殺したり，シェルバッ
ファに最新の出力を表示させたりすることも可能です．@refill

@table @kbd
@item C-c C-m C-k
@itemx M-x makeinfo-kill-job
@findex makeinfo-kill-job
@c Kill the current running @code{makeinfo} job
@c (from @code{makeinfo-region} or @code{makeinfo-buffer}).@refill
@c 
(@code{makeinfo-region}や@code{makeinfo-buffer}から)@code{makeinfo}を実
行している，現在のジョブを殺します．@refill

@item C-c C-m C-l
@itemx M-x makeinfo-recenter-output-buffer
@findex makeinfo-recenter-output-buffer
@c Redisplay the @code{makeinfo} shell buffer to display its most recent
@c output.@refill
@c 
最新の出力を表示するため，@code{makeinfo}シェルバッファを再表示します．
@refill
@end table

@noindent
@c (Note that the parallel commands for killing and recentering a @TeX{}
@c job are @kbd{C-c C-t C-k} and @kbd{C-c C-t C-l}.  @xref{Texinfo Mode
@c Printing}.)@refill
@c 
(@TeX{}ジョブを殺したり再表示したりする類似のコマンドが，@kbd{C-c C-t
C-k}と@kbd{C-c C-t C-l}だと言うことに注意してください．@xref{Texinfo
Mode Printing}.)@refill

@c You can specify options for @code{makeinfo} by setting the
@c @code{makeinfo-options} variable with either the @kbd{M-x
@c edit-options} or the @kbd{M-x set-variable} command, or by setting the
@c variable in your @file{.emacs} initialization file.@refill
@c 
@kbd{M-x edit-options}や@kbd{M-x set-variable}コマンドで
@code{makeinfo-options}変数を設定することや，@file{.emacs}初期化ファイル
で変数を設定することで，@code{makeinfo}に対するオプションを指定できます．

@c For example, you could write the following in your @file{.emacs} file:@refill
@c 
例えば，以下のように@file{.emacs}ファイルに書きます．@refill

@example
@group
(setq makeinfo-options
     "--paragraph-indent=0 --no-split
      --fill-column=70 --verbose")
@end group
@end example

@c If you write these three cross references using xref, you see
@c three references to the same named manual, which looks strange.
@iftex
@c For more information, see @ref{makeinfo options, , Options for
@c @code{makeinfo}}, as well as ``Editing Variable Values,'' ``Examining
@c and Setting Variables,'' and ``Init File'' in @cite{The GNU Emacs
@c Manual}.
@c 
詳細は，@ref{makeinfo options, , Options for @code{makeinfo}}と，
@cite{The GNU Emacs Manual}の``Editing Variable Values,''，``Examining
and Setting Variables,''と``Init File''を参照してください．
@end iftex
@noindent
@ifinfo
@c For more information, see@*
@c @ref{Edit Options, , Editing Variable Values, emacs, The GNU Emacs Manual},@*
@c @ref{Examining, , Examining and Setting Variables, emacs, The GNU Emacs Manual},@*
@c @ref{Init File, , , emacs, The GNU Emacs Manual}, and@*
@c @ref{makeinfo options, , Options for @code{makeinfo}}.
@c 
詳細は，@* @ref{Edit Options, , Editing Variable Values, emacs, The GNU
Emacs Manual}，@* @ref{Examining, , Examining and Setting Variables,
emacs, The GNU Emacs Manual}，@* @ref{Init File, , , emacs, The GNU
Emacs Manual}，そして@* @ref{makeinfo options, , Options for
@code{makeinfo}}を参照してください．
@end ifinfo

@node texinfo-format commands
@comment  node-name,  next,  previous,  up
@c @subsection The @code{texinfo-format@dots{}} Commands
@subsection @code{texinfo-format@dots{}}コマンド
@findex texinfo-format-region
@findex texinfo-format-buffer

@c In GNU Emacs in Texinfo mode, you can format part or all of a Texinfo
@c file with the @code{texinfo-format-region} command.  This formats the
@c current region and displays the formatted text in a temporary buffer
@c called @samp{*Info Region*}.@refill
@c 
GNU EmacsのTexinfoモードで@code{texinfo-format-region}コマンドを使用して，
Texinfoファイルの一部または全体を書式化することが可能です．これは，現在
の領域を書式化し，@samp{*Info Region*}と呼ばれる一時的なバッファに書式化
されたテキストを表示します．@refill

@c Similarly, you can format a buffer with the
@c @code{texinfo-format-buffer} command.  This command creates a new
@c buffer and generates the Info file in it.  Typing @kbd{C-x C-s} will
@c save the Info file under the name specified by the
@c @code{@@setfilename} line which must be near the beginning of the
@c Texinfo file.@refill
@c 
同様に，@code{texinfo-format-buffer}コマンドでバッファを書式化します．こ
のコマンドは新しいバッファを作成し，その中にInfoファイルを生成します．
@kbd{C-x C-s}と入力すると，Texinfoの最初の方の@code{@@setfilename}行で指
定された名前でInfoファイルを保存します．@refill

@table @kbd
@item C-c C-e C-r
@itemx @code{texinfo-format-region}
@c Format the current region for Info.
@c 
現在の領域をInfoに書式化します．
@findex texinfo-format-region

@item C-c C-e C-b
@itemx @code{texinfo-format-buffer}
@c Format the current buffer for Info.
@c 
現在のバッファをInfoに書式化します．
@findex texinfo-format-buffer
@end table

@c The @code{texinfo-format-region} and @code{texinfo-format-buffer}
@c commands provide you with some error checking, and other functions can
@c provide you with further help in finding formatting errors.  These
@c procedures are described in an appendix; see @ref{Catching Mistakes}.
@c However, the @code{makeinfo} program is often faster and
@c provides better error checking (@pxref{makeinfo in Emacs}).@refill
@c 
@code{texinfo-format-region}と@code{texinfo-format-buffer}コマンドは，い
くつかのエラー調査を提供し，その他の関数は，書式化のエラーを見つける上で
それ以上の助けとなるものを提供するはずです．これらの手続きは付録で記述さ
れています．@ref{Catching Mistakes}を参照してください．しかし，
@code{makeinfo}プログラムはより速い場合が多く，より多くのエラー調査を提
供します(@pxref{makeinfo in Emacs})．@refill

@node Batch Formatting
@comment  node-name,  next,  previous,  up
@c @subsection Batch Formatting
@subsection 書式化のバッチ処理
@cindex Batch formatting for Info
@cindex Info batch formatting

@c You can format Texinfo files for Info using @code{batch-texinfo-format}
@c and Emacs Batch mode.  You can run Emacs in Batch mode from any shell,
@c including a shell inside of Emacs.  (@xref{Command Switches, , Command
@c Line Switches and Arguments, emacs, The GNU Emacs Manual}.)@refill
@c 
@code{batch-texinfo-format}とEmacsバッチモードを使用して，Texinfoファイ
ルをInfoファイルに書式化することが可能です．Emacsの内部シェルを含む，あ
らゆるシェルからバッチモードでEmacsを実行することが可能です．
(@xref{Command Switches, , Command Line Switches and Arguments, emacs,
The GNU Emacs Manual}.)@refill

@c Here is a shell command to format all the files that end in
@c @file{.texinfo} in the current directory:
@c 
以下は，カレントディレクトリの@file{.texinfo}で終る全てのファイルを書式
化するためのシェルコマンドです．

@example
emacs -batch -funcall batch-texinfo-format *.texinfo
@end example

@noindent
@c Emacs processes all the files listed on the command line, even if an
@c error occurs while attempting to format some of them.@refill
@c 
Emacsは，コマンド行でリストアップされた全てのファイルを，たとえ書式化中
にエラーが発生しても処理します．@refill

@c Run @code{batch-texinfo-format} only with Emacs in Batch mode as shown;
@c it is not interactive.  It kills the Batch mode Emacs on completion.@refill
@c 
@code{batch-texinfo-format}は，表示してあるようにEmacsのBatchモードだけ
で実行してください．それは対話的ではありません．成功するとバッチモードの
Emacsを強制終了します．@refill

@c @code{batch-texinfo-format} is convenient if you lack @code{makeinfo}
@c and want to format several Texinfo files at once.  When you use Batch
@c mode, you create a new Emacs process.  This frees your current Emacs, so
@c you can continue working in it.  (When you run
@c @code{texinfo-format-region} or @code{texinfo-format-buffer}, you cannot
@c use that Emacs for anything else until the command finishes.)@refill
@c 
@code{batch-texinfo-format}は，@code{makeinfo}がない場合と，一度に複数の
Texinfoファイルを書式化したい場合に便利です．バッチモードを使用するとき，
新しいEmacsプロセスを作成します．これは現在のEmacsとは無関係なので，そこ
で仕事を続けることが可能です．(@code{texinfo-format-region}や
@code{texinfo-format-buffer}を実行しているときは，コマンドが終了するまで
他のこと行なうためEmacsを使用することは不可能です．)@refill

@node Tag and Split Files
@comment  node-name,  next,  previous,  up
@c @subsection Tag Files and Split Files
@subsection タグファイルとスプリットファイル
@cindex Making a tag table automatically
@cindex Tag table, making automatically

@c If a Texinfo file has more than 30,000 bytes,
@c @code{texinfo-format-buffer} automatically creates a tag table
@c for its Info file;  @code{makeinfo} always creates a tag table.  With
@c a @dfn{tag table}, Info can jump to new nodes more quickly than it can
@c otherwise.@refill
@c 
Texinfoファイルが30,000バイト以上の場合，@code{texinfo-format-buffer}は
Infoファイルに対し自動的にタグ表を作成します．@code{makeinfo}は，常にタ
グ表を作成します．@dfn{タグ表(tag table)}を用いることで，Infoは新しいノー
ドへ他より速く移動可能です．@refill

@cindex Indirect subfiles
@c In addition, if the Texinfo file contains more than about 70,000
@c bytes, @code{texinfo-format-buffer} and @code{makeinfo} split the
@c large Info file into shorter @dfn{indirect} subfiles of about 50,000
@c bytes each.  Big files are split into smaller files so that Emacs does
@c not need to make a large buffer to hold the whole of a large Info
@c file; instead, Emacs allocates just enough memory for the small, split-off
@c file that is needed at the time.  This way, Emacs avoids wasting
@c memory when you run Info.  (Before splitting was implemented, Info
@c files were always kept short and @dfn{include files} were designed as
@c a way to create a single, large printed manual out of the smaller Info
@c files.  @xref{Include Files}, for more information.  Include files are
@c still used for very large documents, such as @cite{The Emacs Lisp
@c Reference Manual}, in which each chapter is a separate file.)@refill
@c 
さらに，Texinfoファイルが70,000バイト以上の場合，
@code{texinfo-format-buffer}と@code{makeinfo}は，大きなInfoファイルをそ
れぞれ50,000バイト程度のより小さい@dfn{間接的な(indirect)}サブファイルに
分割します．大きなファイル全体を保持する大きなバッファをEmacsが作成しな
くてもよいように，大きなファイルは小さなファイルに分割されます．代わりに
Emacsは，分割された小さなファイルが必要とするだけのメモリを確保します．
このようにして，EmacsはInfo実行中のメモリの無駄を避けます．(分割が実装さ
れる前は，Infoファイルは常に短いままになっていて，@dfn{インクルードファ
イル(include files)}は小さなInfoファイルから単一の大きな印刷マニュアルを
作成する方法として設計されていました．詳細は@xref{Include Files}.  イン
クルードファイルは，@cite{The Emacs Lisp Reference Manual}のような，大変
大きなドキュメントのためにまだ使用されて，そこでは，それぞれの章は別々の
ファイルになっています．)@refill

@c When a file is split, Info itself makes use of a shortened version of
@c the original file that contains just the tag table and references to
@c the files that were split off.  The split-off files are called
@c @dfn{indirect} files.@refill
@c 
ファイルが分割されるとき，Info自身は，タグ表と分割されたファイルへの参照
を含む元ファイルの短縮バージョンを利用します．分割されたファイルは，
@dfn{間接的な(indirect)}ファイルと呼ばれます．@refill

@c The split-off files have names that are created by appending @w{@samp{-1}},
@c @w{@samp{-2}}, @w{@samp{-3}} and so on to the file name specified by the
@c @code{@@setfilename} command.  The shortened version of the original file
@c continues to have the name specified by @code{@@setfilename}.@refill
@c 
分割されたファイルは，@code{@@setfilename}コマンドで指定したファイル名に，
@w{@samp{-1}}，@w{@samp{-2}}，@w{@samp{-3}}などを追加して作成された名前
をになります．元ファイルの短縮バージョンは，@code{@@setfilename}で指定さ
れた名前を持ち続けます．@refill

@c At one stage in writing this document, for example, the Info file was saved
@c as the file @file{test-texinfo} and that file looked like this:@refill
@c 
このドキュメントを書いている段階で，例えばInfoファイルはファイル
@file{test-texinfo}として保存され，そのファイルは以下のようになっていま
す．

@example
@group
Info file: test-texinfo,    -*-Text-*-
produced by texinfo-format-buffer
from file: new-texinfo-manual.texinfo

^_
Indirect:
test-texinfo-1: 102
test-texinfo-2: 50422
@end group
@group
test-texinfo-3: 101300
^_^L
Tag table:
(Indirect)
Node: overview^?104
Node: info file^?1271
@end group
@group
Node: printed manual^?4853
Node: conventions^?6855
@dots{}
@end group
@end example

@noindent
@c (But @file{test-texinfo} had far more nodes than are shown here.)  Each of
@c the split-off, indirect files, @file{test-texinfo-1},
@c @file{test-texinfo-2}, and @file{test-texinfo-3}, is listed in this file
@c after the line that says @samp{Indirect:}.  The tag table is listed after
@c the line that says @samp{Tag table:}. @refill
@c 
(しかし，@file{test-texinfo}ファイルは，ここで見るよりはるかに多くのノー
ドがあります．)それぞれの分割された間接的なファイル@file{test-texinfo-1}，
@file{test-texinfo-2}，そして@file{test-texinfo-3}は，このファイルの
@samp{Indirect:}以下の行でリストアップされます．タグ表は，@samp{Tag
table:}以下の行でリストアップされます．@refill

@c In the list of indirect files, the number following the file name
@c records the cumulative number of bytes in the preceding indirect files,
@c not counting the file list itself, the tag table, or the permissions
@c text in each file.  In the tag table, the number following the node name
@c records the location of the beginning of the node, in bytes from the
@c beginning of the (unsplit) output.
@c 
間接的なファイルのリストで，ファイル名に続く番号は前の間接的なファイルに
累積バイト数を記録し，ファイルリスト自身のバイト数，タグ表，またはそれぞ
れのファイルの許可テキストは記録しません．タグ表では，ノード名に続く数は
ノードの開始位置を(分割されていない)出力の最初からのバイトを記録します．

@c If you are using @code{texinfo-format-buffer} to create Info files,
@c you may want to run the @code{Info-validate} command.  (The
@c @code{makeinfo} command does such a good job on its own, you do not
@c need @code{Info-validate}.)  However, you cannot run the @kbd{M-x
@c Info-validate} node-checking command on indirect files.  For
@c information on how to prevent files from being split and how to
@c validate the structure of the nodes, see @ref{Using
@c Info-validate}.@refill
@c 
Infoファイルを作成するため@code{texinfo-format-buffer}を使用している場合，
@code{Info-validate}コマンドを実行したくなるかもしれません．
(@code{makeinfo}コマンドはそれ自身良い仕事をするので，
@code{Info-validate}は不要です．)しかし，@kbd{M-x Info-validate}ノード
チェックコマンドを，間接ファイルでは使用することは不可能です．ファイルを
分割から避ける方法や，ノードの構造の有効化の方法の情報は，@ref{Using
Info-validate}を参照してください．@refill


@node makeinfo html
@c @subsection Generating HTML
@subsection HTMLの生成
@cindex HTML

@c Besides generating output in the Info format, you can use the
@c @samp{--html} option to generate output in HTML format, for installation
@c on a web site (for example).  By default, the HTML output is split at
@c node level.
@c 
Info書式での出力を生成するだけでなく，@samp{--html}オプションを使用して，
(例えば)ウェブサイトに配置するために，HTMLフォーマットで出力を生成するこ
とが可能です．デフォルトで，HTML出力はノードのレベルで分割されています．

@c When splitting, the HTML output files are written into a subdirectory.
@c The subdirectory is named according to the name from
@c @code{@@setfilename} with any extension removed; for example, HTML
@c output for @code{@@setfilename emacs.info} would be written into a
@c subdirectory named @samp{emacs}.  If that directory cannot be created
@c for any reason, then @samp{.html} is appended to the directory name, as
@c in @samp{emacs.html} (this is necessary because sometimes the info file
@c is named without an extension, e.g., @samp{texinfo}).  If the
@c @samp{@var{name}.html} directory can't be created either,
@c @code{makeinfo} gives up.  In any case, the top-level output file within
@c the directory is always named @samp{index.html}.
@c 
分割時に，HTML出力ファイルはサブディレクトリに書き出されます．サブディレ
クトリは，拡張子が削除された@code{@@setfilename}の名前に一致して命名され
ます．例えば，@code{@@setfilename emacs.info}に対するHTML出力は，
@samp{emacs}という名前のサブディレクトリに書き出されます．何らかの理由で
ディレクトリが作成できない場合，@samp{emacs.html}のようにディレクトリ名
に@samp{.html}が追加されます(Infoファイルは，例えば@samp{texinfo}のよう
に拡張子無しで命名されることもあるので，これは必要です)．
@samp{@var{name}.html}ディレクトリも作成できない場合，@code{makeinfo}は
あきらめます．あらゆる状況で，ディレクトリのトップレベルの出力ファイルは，
常に@samp{index.html}と命名されます．

@c Monolithic output (@code{--no-split}) is named according to
@c @code{@@setfilename} or @code{--outfile}.  Cross-document node
@c references are not supported in monolithic HTML.
@c 
分割されない出力(@code{--no-split})は，@code{@@setfilename}や
@code{--outfile}によって命名されます．ドキュメントを跨ったノード参照は，
分割されないHTMLではサポートされていません．

@c Texinfo input marked up with the @code{@@ifhtml} command will produce
@c output only with the @samp{--html} option supplied.  Input marked up
@c with the @code{@@html} is passed literally to the output (suppressing
@c the normal escaping of input @samp{<}, @samp{>} and @samp{&} characters
@c which have special significance in HTML).  Similarly for the
@c @option{--xml} option and @code{@@ifxml} and @code{@@xml} sections.
@c 
@code{@@ifhtml}コマンドで印が付いているされたTexinfo入力は，
@samp{--html}オプションが供給されたときだけ出力物を生成します．
@code{@@html}でマークアップされた入力は，そのまま出力に渡されます(HTMLで
特別重要な，入力の@samp{<}，@samp{>}と@samp{&}文字の，通常のエスケープ文
字は抑制されます．)@option{--xml}オプションと，@code{@@ifxml}と
@code{@@xml}セクションと同様です．

@c The @samp{--footnote-style} option is currently ignored for HTML output;
@c footnotes are linked to the end of the output file.
@c 
@samp{--footnote-style}オプションは，HTML出力では現在は無視されます．脚
注は出力ファイルの終りにリンクされます．

@c The HTML generated is mostly standard (i.e., HTML 2.0, RFC-1866).  The
@c exception is that HTML 3.2 tables are generated from the
@c @code{@@multitable} command, but tagged to degrade as well as possible
@c in browsers without table support.  The HTML 4 @samp{lang} attribute on
@c the @samp{<html>} attribute is also used.  Please report output from an
@c error-free run of @code{makeinfo} which has browser portability problems
@c as a bug.
@c 
生成されたHTMLはほとんど標準的です(いわゆる，HTML 2.0, RFC-1866)．例外と
して，HTML 3.2の表が，@code{@@multitable}コマンドで生成されますが，表を
サポートしていないブラウザでも分解可能なようにタグ付けされています．
@samp{<html>}属性のHTML 4 @samp{lang}属性も使用されます．ブラウザの互換
性の問題がある@code{makeinfo}でエラーが無かった実行結果の出力を，バグと
して報告してください．

@c Navigation bars are inserted at the start of nodes, similarly to Info
@c output.  The @samp{--no-headers} option will suppress this if used with
@c @samp{--no-split}.  Header @code{<link>} elements in split output can
@c support info-like navigation with browsers like Lynx and @w{Emacs W3}
@c which implement this @w{HTML 1.0} feature.  @samp{@@xref} commands to
@c other documents are generated assuming the other document is available
@c in split HTML form, and installed in the same HTML documentation tree,
@c at @file{../<info-document>/}.
@c 
ナビゲーションバーが，Info出力に似たものとしてノードの始まりに挿入されま
す．@samp{--no-headers}オプションは，@samp{--no-split}を使用している場合，
これを抑制します．分割された出力物のヘッダの@code{<link>}の要素は，Lynx 
と@w{HTML 1.0}の機能で実装されている@w{Emacs W3}のようなブラウザで，info 
のようなナビゲートをサポートしています．他のドキュメントに対する
@samp{@@xref}コマンドは，他のドキュメントがHTML 形式で利用可能であるとし
て生成され，同じHTMLドキュメントツリーの@file{../<info-document>/}にイン
ストールされます．


@node Installing an Info File
@c @section Installing an Info File
@section Infoファイルのインストール
@cindex Installing an Info file
@cindex Info file installation
@cindex @file{dir} directory for Info installation

@c Info files are usually kept in the @file{info} directory.  You can read
@c Info files using the standalone Info program or the Info reader built
@c into Emacs.  (@inforef{Top, info, info}, for an introduction to Info.)
@c 
Infoファイルは，通常@file{info}ディレクトリに置かれます．Infoファイルを，
スタンドアローンのInfoプログラムやEmacs組込みのInfoリーダーを使用して読
むことが可能です．(Infoの紹介は，@inforef{Top, info, info-ja}.)

@menu
* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking install-info::       @code{install-info} options.
@end menu


@node Directory File
@c @subsection The Directory File @file{dir}
@subsection ディレクトリファイル@file{dir}

@c For Info to work, the @file{info} directory must contain a file that
@c serves as a top level directory for the Info system.  By convention,
@c this file is called @file{dir}.  (You can find the location of this file
@c within Emacs by typing @kbd{C-h i} to enter Info and then typing
@c @kbd{C-x C-f} to see the pathname to the @file{info} directory.)
@c 
Infoを動作させるため，@file{info}ディレクトリには，Infoシステムのための
トップレベルディレクトリを提供するファイルを含める必要があります．慣習的
に，このファイルは@file{dir}と呼ばれます．(このファイルの場所は，Emacsで
Infoモードに入るため@kbd{C-h i}と入力し，@file{info}ディレクトリへのパス
名を見るため@kbd{C-x C-f}を入力すると分かります．)

@c The @file{dir} file is itself an Info file.  It contains the top level
@c menu for all the Info files in the system.  The menu looks like
@c this:@refill
@c 
@file{dir}ファイルはそれ自身がInfoファイルです．それは，システム全ての
Infoファイルに対するトップレベルメニューを含んでいます．メニューは以下の
ようになってます．@refill

@example
@group
* Menu:
* Info:    (info).     Documentation browsing system.
* Emacs:   (emacs).    The extensible, self-documenting
                      text editor.
* Texinfo: (texinfo).  With one source file, make
                      either a printed manual using
                      @@TeX@{@} or an Info file.
@dots{}
@end group
@end example

@c Each of these menu entries points to the `Top' node of the Info file
@c that is named in parentheses.  (The menu entry does not need to
@c specify the `Top' node, since Info goes to the `Top' node if no node
@c name is mentioned.  @xref{Other Info Files, , Nodes in Other Info
@c Files}.)@refill
@c 
これらのメニューの項目のそれぞれが，丸カッコに名前があるInfoファイルの
`Top'ノードを示します．(Infoはノード名を指定されない場合，`Top'ノードへ
行くので，このメニュー項目は`Top'ノードを指定する必要はありません．
@xref{Other Info Files, , Nodes in Other Info Files}.)@refill

@c Thus, the @samp{Info} entry points to the `Top' node of the
@c @file{info} file and the @samp{Emacs} entry points to the `Top' node
@c of the @file{emacs} file.@refill
@c 
このため，@samp{Info}項目は@file{info}ファイルの`Top'ノードを示し，
@samp{Emacs}項目は@file{emacs}ファイルの`Top'ノードを示します．@refill

@c In each of the Info files, the `Up' pointer of the `Top' node refers
@c back to the @code{dir} file.  For example, the line for the `Top'
@c node of the Emacs manual looks like this in Info:@refill
@c 
それぞれのInfoファイルでは，`Top'ノードの`Up'ポインタは@code{dir}ファイ
ルへの参照です．例えば，Emacsマニュアルの`Top'ノードの行は，Infoファイル
では以下のようになっています．@refill

@example
File: emacs  Node: Top, Up: (DIR), Next: Distrib
@end example

@noindent
@c In this case, the @file{dir} file name is written in upper case
@c letters---it can be written in either upper or lower case.  This is not
@c true in general, it is a special case for @file{dir}.
@c 
この状況では，@file{dir}ファイル名は大文字で書かれています --- それは，
大文字または小文字で書くことが可能です．これは一般に真ではなく，
@file{dir}の場合だけ特別です．


@node New Info File
@c @subsection Listing a New Info File
@subsection 新しいInfoファイルをリストアップする
@cindex Adding a new Info file
@cindex Listing a new Info file
@cindex New Info file, listing it in @file{dir} file
@cindex Info file, listing a new
@cindex @file{dir} file listing

@c To add a new Info file to your system, you must write a menu entry to
@c add to the menu in the @file{dir} file in the @file{info} directory.
@c For example, if you were adding documentation for GDB, you would write
@c the following new entry:@refill
@c 
新しいInfoファイルをシステムに加えるため，@file{info}ディレクトリの
@file{dir}ファイルのメニューを加える，メニュー項目を書く必要があります．
例えばGDBのドキュメントを加える場合，以下の新しい項目を書きます．@refill

@example
* GDB: (gdb).           The source-level C debugger.
@end example

@noindent
@c The first part of the menu entry is the menu entry name, followed by a
@c colon.  The second part is the name of the Info file, in parentheses,
@c followed by a period.  The third part is the description.
@c 
メニュー項目の最初の部分はメニュー項目名でコロンが続きます．二番目の部分
はInfoファイル名で，丸カッコの中にあり，ピリオドが続きます．三番目の部分
は記述です．

@c The name of an Info file often has a @file{.info} extension.  Thus, the
@c Info file for GDB might be called either @file{gdb} or @file{gdb.info}.
@c The Info reader programs automatically try the file name both with and
@c without @file{.info}@footnote{On MS-DOS/MS-Windows systems, Info will
@c try the @file{.inf} extension as well.}; so it is better to avoid
@c clutter and not to write @samp{.info} explicitly in the menu entry.  For
@c example, the GDB menu entry should use just @samp{gdb} for the file
@c name, not @samp{gdb.info}.
@c 
Infoファイルの名前には，@file{.info}拡張子があることが多いです．そのため，
GDBのInfoファイルは@file{gdb}または@file{gdb.info}と呼んでもかまわないで
しょう．Infoリーダープログラムは，自動的に@file{.info}の有無の両方を試し
ます．@footnote{MS-DOS/MS-Windowsシステムでは，Infoは同様に，@file{.inf} 
拡張子も試します．}バラバラになるのを避けるために，メニュー項目に明示的
に@samp{.info}を書かない方が良いでしょう．例えばGDBメニュー項目は，ファ
イル名に@samp{gdb.info}ではなく@samp{gdb}だけを使用すべきです．


@node Other Info Directories
@c @subsection Info Files in Other Directories
@subsection 他のディレクトリのInfoファイル
@cindex Installing Info in another directory
@cindex Info installed in another directory
@cindex Another Info directory
@cindex @file{dir} files and Info directories

@c If an Info file is not in the @file{info} directory, there are three
@c ways to specify its location:@refill
@c 
Infoファイルが@file{info}ディレクトリに無い場合，その場所を指定する三つ
の方法があります．@refill

@enumerate
@item
@c Write the pathname in the @file{dir} file as the second part of the menu.
@c 
@file{dir}ファイルで，メニューの二番目の部分にパス名を書いてください．

@item
@c If you are using Emacs, list the name of the file in a second @file{dir}
@c file, in its directory; and then add the name of that directory to the
@c @code{Info-directory-list} variable in your personal or site
@c initialization file.
@c 
Emacsを使用している場合，そのディレクトリで，二番目の@file{dir}にファイ
ル名をリストアップしてください．そして，個人やサイトの初期化ファイルで，
@code{Info-directory-list}変数にそのディレクトリ名の指定を加えてください．

@c This variable tells Emacs where to look for @file{dir} files (the files
@c must be named @file{dir}).  Emacs merges the files named @file{dir} from
@c each of the listed directories.  (In Emacs version 18, you can set the
@c @code{Info-directory} variable to the name of only one
@c directory.)@refill
@c 
この変数は，Emacsに@file{dir}ファイルを探す場所を伝えます(ファイルは
@file{dir}と名付ける必要があります)．Emacsは，それぞれリストアップされた
ディレクトリからの，@file{dir}と名付けられたファイルをマージします．
(Emacsバージョン18では，@code{Info-directory}変数で一つのディレクトリ名
のみ設定することが可能です．)@refill

@item
@c Specify the Info directory name in the @code{INFOPATH} environment
@c variable in your @file{.profile} or @file{.cshrc} initialization file.
@c (Only you and others who set this environment variable will be able to
@c find Info files whose location is specified this way.)
@c 
Infoディレクトリ名を，@file{.profile}や@file{.cshrc}初期化ファイルで，
@code{INFOPATH}環境変数で指定してください．(この環境変数を設定した人だけ，
この方法で指定した場所のInfoファイルを見つけることができます．)
@end enumerate

@c For example, to reach a test file in the @file{/home/bob/info}
@c directory, you could add an entry like this to the menu in the
@c standard @file{dir} file:@refill
@c 
例えば，@file{/home/bob/info}ディレクトリのテストファイルにたどり着くよ
うに，標準@file{dir}ファイルのメニューに，以下のように項目を加えることも
可能でしょう．@refill

@example
* Test: (/home/bob/info/info-test).  Bob's own test file.
@end example

@noindent
@c In this case, the absolute file name of the @file{info-test} file is
@c written as the second part of the menu entry.@refill
@c 
この状況では，@file{info-test}ファイルの絶対的なファイル名は，メニュー項
目の二番目の部分に書かれます．@refill

@c Alternatively, you could write the following in your @file{.emacs} file:
@c 
別の方法として，@file{.emacs}ファイルに以下のように書くことも可能でしょ
う．

@vindex Info-directory-list
@example
@group
(require 'info)
(setq Info-directory-list
 (cons (expand-file-name "/home/bob/info")
       Info-directory-list))
@end group
@end example

@c This tells Emacs to merge the system @file{dir} file with the @file{dir}
@c file in @file{/home/bob/info}.  Thus, Info will list the
@c @file{/home/bob/info/info-test} file as a menu entry in the
@c @file{/home/bob/info/dir} file.  Emacs does the merging only when
@c @kbd{M-x info} is first run, so if you want to set
@c @code{Info-directory-list} in an Emacs session where you've already run
@c @code{info}, you must @code{(setq Info-dir-contents nil)} to force Emacs
@c to recompose the @file{dir} file.
@c 
これは，Emacsにシステムの@file{dir}ファイルを，@file{/home/bob/info}ディ
レクトリの@file{dir}ファイルとマージするよう伝えます．このためInfoは，
@file{/home/bob/info/dir}ファイルのメニュー項目のように，
@file{/home/bob/info/info-test}ファイルをリストアップします．Emacsは，
@kbd{M-x info}を最初に実行したときのみマージするので，既に@code{info}を
実行しているEmacsのセッションで@code{Info-directory-list}設定したい場合，
Emacsに@file{dir}ファイルを再構成させるため@code{(setq Info-dir-contents
nil)}する必要があります．

@vindex INFOPATH
@c Finally, you can tell Info where to look by setting the @code{INFOPATH}
@c environment variable in your shell startup file, such as @file{.cshrc},
@c @file{.profile} or @file{autoexec.bat}.  If you use a Bourne-compatible
@c shell such as @code{sh} or @code{bash} for your shell command
@c interpreter, you set the @code{INFOPATH} environment variable in the
@c @file{.profile} initialization file; but if you use @code{csh} or
@c @code{tcsh}, you set the variable in the @file{.cshrc} initialization
@c file.  On MS-DOS/MS-Windows systems, you must set @code{INFOPATH} in
@c your @file{autoexec.bat} file or in the Registry.  Each type of shell
@c uses a different syntax.
@c 
最後に，@file{.cshrc}，@file{.profile}や，@file{autoexec.bat}のような，
シェルのスタートアップファイルで@code{INFOPATH}環境変数を設定することで
Infoに探す場所を伝えることが可能です．シェルコマンドインタプリタとして
@code{sh}や@code{bash}のようなBourne互換シェルを使用している場合，
@code{INFOPATH}環境変数を@file{.profile}初期化ファイルで設定します．しか
し，@code{csh}や@code{tcsh}を使用している場合，@file{.cshrc}初期化ファイ
ルで変数を設定します．MS-DOS/MS-Windowsシステムでは，@code{INFOPATH}を
@file{autoexec.bat}ファイルかレジストリで設定する必要があります．それぞ
れのシェルで構文は異なります．

@itemize @bullet
@item
@c In a @file{.cshrc} file, you could set the @code{INFOPATH}
@c variable as follows:@refill
@c 
@file{.cshrc}ファイルで，@code{INFOPATH}変数を以下のようにして設定します．
@refill

@smallexample
setenv INFOPATH .:~/info:/usr/local/emacs/info
@end smallexample

@item
@c In a @file{.profile} file, you would achieve the same effect by
@c writing:@refill
@c 
@file{.profile}ファイルに以下を書くことで，同じ効果を得ます．@refill

@smallexample
INFOPATH=.:$HOME/info:/usr/local/emacs/info
export INFOPATH
@end smallexample

@item
@pindex autoexec.bat
@c In a @file{autoexec.bat} file, you write this command@footnote{Note the
@c use of @samp{;} as the directory separator, and a different syntax for
@c using values of other environment variables.}:
@c 
@file{autoexec.bat}ファイルで，以下のコマンドを書きます．@footnote{ディ
レクトリの区切りとして@samp{;}を使用することと，他の環境変数の値の使用と
は構文が違うことに注意してください．}

@smallexample
set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info
@end smallexample
@end itemize

@noindent
@c The @samp{.} indicates the current directory as usual.  Emacs uses the
@c @code{INFOPATH} environment variable to initialize the value of Emacs's
@c own @code{Info-directory-list} variable.  The stand-alone Info reader
@c merges any files named @file{dir} in any directory listed in the
@c @env{INFOPATH} variable into a single menu presented to you in the node
@c called @samp{(dir)Top}.
@c 
@samp{.}は，通常カレントディレクトリを示します．Emacsは，@code{INFOPATH} 
環境変数をEmacs自身の@code{Info-directory-list}変数の初期化に使用します．
スタンドアローンのInfoリーダーは，@env{INFOPATH}変数でリストアップされた
あらゆるディレクトリの@file{dir}という名のファイルを，@samp{(dir)Top}と
呼ばれるノードに現れる単一のメニューにマージします．

@cindex colon, last in @env{INFOPATH}
@c However you set @env{INFOPATH}, if its last character is a
@c colon@footnote{On MS-DOS/MS-Windows systems, use semi-colon instead.}, this
@c is replaced by the default (compiled-in) path.  This gives you a way to
@c augment the default path with new directories without having to list all
@c the standard places.  For example (using @code{sh} syntax):
@c 
しかし，@env{INFOPATH}を設定しても，最後の文字がコロン
@footnote{MS-DOS/MS-Windowsシステムは，代わりにセミコロンを使います．}の
場合，これはデフォルトの(compiled-in)パスに置換されます．これは，全ての
標準の場所をリストアップすること無く，新しいディレクトリでデフォルトのパ
スを増やす方法となります．例えば以下のようにします(@code{sh}構文使用)．

@example
INFOPATH=/local/info:
export INFOPATH
@end example

@noindent
@c will search @file{/local/info} first, then the standard directories.
@c Leading or doubled colons are not treated specially.
@c 
これで，@file{/local/info}が最初で，それから標準ディレクトリを探します．
最初や二重のコロンは，特別扱いしません．

@cindex @file{dir} file, creating your own
@c When you create your own @file{dir} file for use with
@c @code{Info-directory-list} or @env{INFOPATH}, it's easiest to start by
@c copying an existing @file{dir} file and replace all the text after the
@c @samp{* Menu:} with your desired entries.  That way, the punctuation and
@c special CTRL-_ characters that Info needs will be present.
@c 
@code{Info-directory-list}や@env{INFOPATH}で利用する独自の@file{dir}ファ
イルを作成するとき，既存の@file{dir}ファイルをコピーから初め，@samp{*
Menu:}以下のテキストを必要な項目で置換するのが最も簡単な方法です．その方
法では，Infoが必要とする句読点と特別なCTRL-_文字が残ります．


@node Installing Dir Entries
@c @subsection Installing Info Directory Files
@subsection Infoディレクトリファイルのインストール

@c When you install an Info file onto your system, you can use the program
@c @code{install-info} to update the Info directory file @file{dir}.
@c Normally the makefile for the package runs @code{install-info}, just
@c after copying the Info file into its proper installed location.
@c 
Infoファイルをシステムにインストールするとき，プログラム
@code{install-info}をInfoディレクトリファイル@file{dir}の更新に使用する
ことが可能です．通常，パッケージのmakefileは，Infoファイルを適切なインス
トール先にコピーした直後に@code{install-info}を実行します．

@findex dircategory
@findex direntry
@c In order for the Info file to work with @code{install-info}, you include
@c the commands @code{@@dircategory} and
@c @code{@@direntry}@dots{}@code{@@end direntry} in the Texinfo source
@c file.  Use @code{@@direntry} to specify the menu entries to add to the
@c Info directory file, and use @code{@@dircategory} to specify which part
@c of the Info directory to put it in.  Here is how these commands are used
@c in this manual:
@c 
Infoファイルが@code{install-info}で動作するように，コマンド
@code{@@dircategory}と@code{@@direntry}@dots{}@code{@@end direntry}を，
Texinfoソースファイルに含めます．Infoディレクトリファイルに加えるメニュー
項目を指定するため，@code{@@direntry}を使用してください．このマニュアル
でこれらのコマンドを使用している例は以下のようになります．

@smallexample
@@dircategory Texinfo documentation system
@@direntry
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. @dots{}
@dots{}
@@end direntry
@end smallexample

@c Here's what this produces in the Info file:
@c 
これでInfoファイルに生成されたものは，以下のようになります．

@smallexample
INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo: (texinfo).           The GNU documentation format.
* install-info: (texinfo)Invoking install-info. @dots{}
@dots{}
END-INFO-DIR-ENTRY
@end smallexample

@noindent
@c The @code{install-info} program sees these lines in the Info file, and
@c that is how it knows what to do.
@c 
@code{install-info}プログラムは，Infoファイルのこれらの行を見て，そして
なすべきことを知ることになります．

@c Always use the @code{@@direntry} and @code{@@dircategory} commands near
@c the beginning of the Texinfo input, before the first @code{@@node}
@c command.  If you use them later on in the input, @code{install-info}
@c will not notice them.
@c 
常に@code{@@direntry}と@code{@@dircategory}コマンドを，Texinfo入力の最初
に，最初の@code{@@node}コマンドの前で使用してください．入力ファイルの後
の方で使用する場合，@code{install-info}はそれらに注意を払いません．

@c If you use @code{@@dircategory} more than once in the Texinfo source,
@c each usage specifies the `current' category; any subsequent
@c @code{@@direntry} commands will add to that category.  
@c 
@code{@@dircategory}をTexinfoソースファイルで1回以上使用する場合，それぞ
れの使用されたものは`current'カテゴリーを指定します．それに続く
@code{@@direntry}コマンドはそのカテゴリーを追加します．

@cindex Free Software Directory
@cindex Dir categories, choosing
@cindex Categories, choosing
@c When choosing the categories for @code{@@dircategory}, we recommend
@c consulting the @uref{Free Sofware Directory,
@c http://www.gnu.org/directory}.  If your program is not listed there, or
@c listed incorrectly or incompletely, please report the situation to the
@c directory maintainers (@email{bug-directory@@gnu.org}) so that the
@c category names can be kept in sync.
@c 
@code{@@dircategory}に対するカテゴリを選択するとき，@uref{Free Sofware
Directory, http://www.gnu.org/directory}を考慮することを推奨します．プロ
グラムがそこにリストアップされていない場合や，間違っていたり不完全なまま
リストアップされている場合，カテゴリ名が同期をとれるように，ディレクトリ
管理者(@email{bug-directory@@gnu.org})にその状況を報告してください．

@c Here are a few examples:
@c 
以下はその例です．
@display
Emacs
Localization
Printing
Software Libraries
@end display

@cindex Invoking nodes, including in dir file
@c Each `Invoking' node for every program installed should have a
@c corresponding @code{@@direntry}.  This lets users easily find the
@c documentation for the different programs they can run, as with the
@c traditional @command{man} system.
@c 
インストールされるすべてのプログラムのそれぞれの`Invoking'ノードは，
@code{@@direntry}に対応すべきです．これで，伝統的な@command{man}システム
のように，実行可能なそれぞれのプログラムに対するドキュメントを，ユーザは
容易に見つけることができます．


@node Invoking install-info
@c @subsection Invoking @command{install-info}
@subsection @command{install-info}の呼び出し
@pindex install-info

@c @code{install-info} inserts menu entries from an Info file into the
@c top-level @file{dir} file in the Info system (see the previous sections
@c for an explanation of how the @file{dir} file works).  It's most often
@c run as part of software installation, or when constructing a @file{dir} file
@c for all manuals on a system.  Synopsis:
@c 
@code{install-info}は，InfoファイルからInfoシステムのトップレベルの
@file{dir}ファイルにメニュー項目を挿入します(@file{dir}ファイルの動作の
説明は，前のセクションを参照してください)．それは，ソフトウェアのインス
トールの一部として，またシステムのマニュアル全体に対し，@file{dir}ファイ
ルを構築するときよく実行されます．構文は以下のようになります．

@example
install-info [@var{option}]@dots{} [@var{info-file} [@var{dir-file}]]
@end example

@c If @var{info-file} or @var{dir-file} are not specified, the options
@c (described below) that define them must be.  There are no compile-time
@c defaults, and standard input is never used.  @code{install-info} can
@c read only one Info file and write only one @file{dir} file per invocation.
@c 
@var{info-file}や@var{dir-file}を指定しない場合，(以下で述べる)それらを
定義するオプションが必要です．コンパイル時のデフォルトは無く，標準入力は
使用しません．@code{install-info}は，呼び出し毎に一つのInfoファイルのみ
読み込み，一つの@file{dir}にのみ書き込みます．

@cindex @file{dir}, created by @code{install-info}
@c If @var{dir-file} (however specified) does not exist,
@c @code{install-info} creates it if possible (with no entries).
@c 
@var{dir-file}(が指定されていても)存在しない場合，@code{install-info}は
(項目の無い)@var{dir-file}を可能な場合は作成します．

@cindex Compressed files, reading
@cindex Dir files, compressed
@c If any input file is compressed with @code{gzip} (@pxref{Invoking
@c gzip,,,gzip, Gzip}), @code{install-info} automatically uncompresses it
@c for reading.  And if @var{dir-file} is compressed, @code{install-info}
@c also automatically leaves it compressed after writing any changes.
@c If @var{dir-file} itself does not exist, @code{install-info} tries to
@c open @file{@var{dir-file}.gz}.
@c 
入力ファイルが，@code{gzip}で圧縮されている場合(@pxref{Invoking
gzip,,,gzip, Gzip})，@code{install-info}は自動的に読み込みのために解凍し
ます．そして，@var{dir-file}が圧縮されている場合も，@code{install-info} 
は自動的に変更を書き込んだ後，圧縮された状態にします．@var{dir-file}自身
が無い場合，@code{install-info}は@file{@var{dir-file}.gz}を開こうとしま
す．

@c Options:
@c 
オプションです．

@table @code
@item --delete
@opindex --delete
@c Delete the entries in @var{info-file} from @var{dir-file}.  The file
@c name in the entry in @var{dir-file} must be @var{info-file} (except for
@c an optional @samp{.info} in either one).  Don't insert any new entries.
@c 
@var{dir-file}から@var{info-file}の項目を削除します．@var{dir-file}の項
目のファイル名は@var{info-file}にする必要があります(その中の，オプション
の@samp{.info}は例外です)．新しい項目は挿入しません．

@item --dir-file=@var{name}
@itemx -d @var{name}
@opindex --dir-file=@var{name}
@opindex -d @var{name}
@c Specify file name of the Info directory file.  This is equivalent to
@c using the @var{dir-file} argument.
@c 
Infoディレクトリファイルのファイル名を指定します．これは，@var{dir-file} 
引数を使用することと同じです．

@item --entry=@var{text}
@itemx -e @var{text}
@opindex --entry=@var{text}
@opindex -e @var{text}
@c Insert @var{text} as an Info directory entry; @var{text} should have the
@c form of an Info menu item line plus zero or more extra lines starting
@c with whitespace.  If you specify more than one entry, they are all
@c added.  If you don't specify any entries, they are determined from
@c information in the Info file itself.
@c 
Infoディレクトリ項目として@var{text}を挿入します．@var{text}は，Infoメ
ニュー項目行にゼロ以上の空白で始まる行を追加した書式にすべきです．一つ以
上の項目を指定する場合，全て追加されます．項目を指定しない場合，Infoファ
イル自身の情報から決定します．

@item --help
@itemx -h
@opindex --help
@opindex -h
@c Display a usage message listing basic usage and all available options,
@c then exit successfully.
@c 
基本的な使用方と，利用可能な全てのオプションをリストアップした使用方法メッ
セージを表示し，正しく終了します．

@item --info-file=@var{file}
@itemx -i @var{file}
@opindex --info-file=@var{file}
@opindex -i @var{file}
@c Specify Info file to install in the directory.
@c Equivalent to using the @var{info-file} argument.
@c 
ディレクトリにインストールするInfoファイルを指定します．@var{info-file}
引数の使用と同じです．

@item --info-dir=@var{dir}
@itemx -D @var{dir}
@opindex --info-dir=@var{dir}
@opindex -D @var{dir}
@c Specify the directory where @file{dir} resides.
@c Equivalent to @samp{--dir-file=@var{dir}/dir}.
@c 
@file{dir}が位置するディレクトリを指定します．
@samp{--dir-file=@var{dir}/dir}と同じです．

@item --item=@var{text}
@opindex --item=@var{text}
@c Same as @samp{--entry=@var{text}}.  An Info directory entry is actually
@c a menu item.
@c 
@samp{--entry=@var{text}}と同じです．Infoディレクトリ項目は，実際にはメ
ニュー項目です．

@item --quiet
@opindex --quiet
@c Suppress warnings.
@c 
警告を抑制します．

@item --remove
@itemx -r
@opindex --remove
@opindex -r
@c Same as @samp{--delete}.
@c 
@samp{--delete}と同じです．

@item --section=@var{sec}
@itemx -s @var{sec}
@opindex --section=@var{sec}
@opindex -s @var{sec}
@c Put this file's entries in section @var{sec} of the directory.  If you
@c specify more than one section, all the entries are added in each of the
@c sections.  If you don't specify any sections, they are determined from
@c information in the Info file itself.
@c 
このファイルの項目を，ディレクトリのセクション@var{sec}に書きます．一つ以
上のセクションを指定した場合，Infoファイル自身の情報から決定されます．

@item --version
@itemx -V
@opindex --version
@opindex -V
@cindex version number, for install-info
@c Display version information and exit successfully.
@c 
バージョン情報を表示し，正しく終了します．

@end table


@node Command List
@c @appendix @@-Command List
@appendix @@-コマンドリスト
@cindex Alphabetical @@-command list
@cindex List of  @@-commands
@cindex @@-command list
@cindex Reference to @@-commands

@c Here is an alphabetical list of the @@-commands in Texinfo.  Square
@c brackets, @t{[}@w{ }@t{]}, indicate optional arguments; an ellipsis,
@c @samp{@dots{}}, indicates repeated text.
@c 
以下にTexinfoのアルファベット順の@@-コマンドリストがあります．角カッコ
@t{[}@w{ }@t{]}はオプションの引数を示します．省略@samp{@dots{}}は，繰り
返しテキストを示します．

@sp 1
@table @code
@item @@@var{whitespace}
@c An @code{@@} followed by a space, tab, or newline produces a normal,
@c stretchable, interword space.  @xref{Multiple Spaces}.
@c 
@code{@@}に続くスペース，タブ，または改行は，通常の伸縮可能な単語を区切
る空白を生成します．@xref{Multiple Spaces}.

@item @@!
@c Generate an exclamation point that really does end a sentence (usually
@c after an end-of-sentence capital letter).  @xref{Ending a Sentence}.
@c 
感嘆符を，文章の終りに実際に生成します(通常，文の終りの大文字の後です)．
@xref{Ending a Sentence}.

@item @@"
@itemx @@'
@c Generate an umlaut or acute accent, respectively, over the next
@c character, as in @"o and @'o.  @xref{Inserting Accents}.
@c 
次の文字の上に，@"o と@'oのように，ウムラートや鋭いアクセントを生成しま
す．@xref{Inserting Accents}.

@item @@*
@c Force a line break. Do not end a paragraph that uses @code{@@*} with
@c an @code{@@refill} command.  @xref{Line Breaks}.
@c 
強制改行します．@code{@@refill}コマンドで，@code{@@*}を用いている段落を
終了させないでください．@xref{Line Breaks}.

@item @@,@{@var{c}@}
@c Generate a cedilla accent under @var{c}, as in @,{c}.  @xref{Inserting
@c Accents}.
@c 
@var{c}の下に@,{c}のような，セディラアクセントを生成します．
@xref{Inserting Accents}.

@item @@-
@c Insert a discretionary hyphenation point.  @xref{- and hyphenation}.
@c 
任意のハイフネーションポイントを挿入します．@xref{- and hyphenation}.

@item @@.
@c Produce a period that really does end a sentence (usually after an
@c end-of-sentence capital letter).  @xref{Ending a Sentence}.
@c 
ピリオドを，文章の終りに実際に生成します(通常，文の終りの大文字の後です)．
@xref{Ending a Sentence}.

@item @@:
@c Indicate to @TeX{} that an immediately preceding period, question
@c mark, exclamation mark, or colon does not end a sentence.  Prevent
@c @TeX{} from inserting extra whitespace as it does at the end of a
@c sentence.  The command has no effect on the Info file output.
@c @xref{Not Ending a Sentence}.
@c 
@TeX{}に，直前のピリオド，疑問符，感嘆符，またはコロンで，文章が終らない
よう指示します．@TeX{}が文章の終りに行う，余分な空白を挿入することを妨げ
ます．このコマンドはInfoファイル出力に効果はありません．@xref{Not Ending
a Sentence}.

@item @@=
@c Generate a macron (bar) accent over the next character, as in @=o.
@c @xref{Inserting Accents}.
@c 
次の文字の上に長音記号(バー)アクセントを，@=oの用に生成します．
@xref{Inserting Accents}.

@item @@?
@c Generate a question mark that really does end a sentence (usually after
@c an end-of-sentence capital letter).  @xref{Ending a Sentence}.
@c 
疑問符を文の終りに実際に生成します(通常，文の終りの大文字の後です)．
@xref{Ending a Sentence}.

@item @@@@
@c Stands for an at sign, @samp{@@}.
@c @xref{Braces Atsigns, , Inserting @@ and braces}.
@c 
@samp{@@}という記号を意味します．@xref{Braces Atsigns, , Inserting @@
and braces}.

@item @@\
@c Stands for a backslash (@samp{\}) inside @code{@@math}.
@c @xref{math,,@code{math}}.
@c 
@code{@@math}内部のバックスラッシュ(@samp{\})を意味します．
@xref{math,,@code{math}}.

@item @@^
@itemx @@`
@c Generate a circumflex (hat) or grave accent, respectively, over the next
@c character, as in @^o and @`e.
@c @xref{Inserting Accents}.
@c 
曲折アクセント(ハット)や低アクセントを，それぞれ次の文字の上に，@^oと@`e
のように生成します．@xref{Inserting Accents}.

@item @@@{
@c Stands for a left brace, @samp{@{}.
@c @xref{Braces Atsigns, , Inserting @@ and braces}.
@c 
左カッコ@samp{@{}を意味します．@xref{Braces Atsigns, , Inserting @@ and
braces}.

@item @@@}
@c Stands for a right-hand brace, @samp{@}}.@*
@c @xref{Braces Atsigns, , Inserting @@ and braces}.
@c 
右カッコ@samp{@}}，@*を意味します．@xref{Braces Atsigns, , Inserting @@
and braces}.

@item @@~
@c Generate a tilde accent over the next character, as in @~N.
@c @xref{Inserting Accents}.
@c 
チルダアクセントを，次の文字の上に，@~Nのように生成します．
@xref{Inserting Accents}.

@item @@AA@{@}
@itemx @@aa@{@}
@c Generate the uppercase and lowercase Scandinavian A-ring letters,
@c respectively: @AA{}, @aa{}.  @xref{Inserting Accents}.
@c 
それぞれ大文字と小文字の，スカンジナビアのA-リング文字を生成します．
@AA{}，@aa{}です．@xref{Inserting Accents}.

@item @@acronym@{@var{abbrev}@}
@c Tag @var{abbrev} as an acronym, that is, an abbreviation written in all
@c capital letters, such as `NASA'.  @xref{acronym,, @code{acronym}}.
@c 
`NASA'のような，いわゆる，全て大文字で書かれている省略の頭文字としてタグ
@var{abbrev}を付けます．@xref{acronym,, @code{acronym}}.

@item @@AE@{@}
@itemx @@ae@{@}
@c Generate the uppercase and lowercase AE ligatures, respectively:
@c @AE{}, @ae{}.  @xref{Inserting Accents}.
@c 
それぞれ，大文字と小文字のAEの連字を生成します．@AE{}，@ae{}です．
@xref{Inserting Accents}.

@itemx @@afivepaper
@c Change page dimensions for the A5 paper size.  @xref{A4 Paper}.
@c 
ページの寸法をA5用紙のサイズに変更します．@xref{A4 Paper}.

@item @@afourlatex
@itemx @@afourpaper
@itemx @@afourwide
@c Change page dimensions for the A4 paper size.  @xref{A4 Paper}.
@c 
ページの寸法をA4用紙のサイズに変更します．@xref{A4 Paper}.

@item @@alias @var{new}=@var{existing}
@c Make the command @samp{@@@var{new}} an alias for the existing command
@c @samp{@@@var{existing}}.  @xref{alias}.
@c 
既存のコマンド@samp{@@@var{existing}}のエイリアスとして，新しいコマンド
@samp{@@@var{new}}を作成します．@xref{alias}.

@item @@anchor@{@var{name}@}
@c Define @var{name} as the current location for use as a cross-reference
@c target.  @xref{anchor,, @code{@@anchor}}.
@c 
相互参照のターゲットとして使用するため，@var{name}を現在の位置として定義
します．@xref{anchor,, @code{@@anchor}}.

@item @@appendix @var{title}
@c Begin an appendix.  The title appears in the table
@c of contents of a printed manual.  In Info, the title is
@c underlined with asterisks.  @xref{unnumbered & appendix, , The
@c @code{@@unnumbered} and @code{@@appendix} Commands}.@refill
@c 
付録を開始します．タイトルは印刷されたマニュアルの目次に現れます．Infoで
は，タイトルはアスタリスクで下線が付きます．@xref{unnumbered & appendix,
, The @code{@@unnumbered} and @code{@@appendix} Commands}.@refill

@item @@appendixsec @var{title}
@itemx @@appendixsection @var{title}
@c Begin an appendix section within an appendix.  The section title appears
@c in the table of contents of a printed manual.  In Info, the title is
@c underlined with equal signs.  @code{@@appendixsection} is a longer
@c spelling of the @code{@@appendixsec} command.  @xref{unnumberedsec
@c appendixsec heading, , Section Commands}.@refill
@c 
付録内の付録セクションを開始します．セクションのタイトルは印刷されたマニュ
アルの目次に現れます．Infoでは，タイトルは等号で下線が付きます．
@code{@@appendixsection}は@code{@@appendixsec}コマンドの長い綴のものです．
@xref{unnumberedsec appendixsec heading, , Section Commands}.@refill

@item @@appendixsubsec @var{title}
@c Begin an appendix subsection within an appendix.  The title appears
@c in the table of contents of a printed manual.  In Info, the title is
@c underlined with hyphens.  @xref{unnumberedsubsec appendixsubsec
@c subheading, , Subsection Commands}.@refill
@c 
付録内の付録サブセクションを開始します．タイトルは印刷されたマニュアルの
目次に現れます．Infoでは，タイトルはハイフンで下線が付きます．
@xref{unnumberedsubsec appendixsubsec subheading, , Subsection
Commands}.@refill

@item @@appendixsubsubsec @var{title}
@c Begin an appendix subsubsection within an appendix subsection.  The
@c title appears in the table of contents of a printed manual.  In Info,
@c the title is underlined with periods.  @xref{subsubsection,, The
@c `subsub' Commands}.@refill
@c 
付録サブセクション内の付録サブサブセクションを開始します．タイトルは印刷
されたマニュアルの目次に現れます．Infoでは，タイトルはピリオドで下線が付
きます．@xref{subsubsection,, The `subsub' Commands}.@refill

@item @@asis
@c Used following @code{@@table}, @code{@@ftable}, and @code{@@vtable} to
@c print the table's first column without highlighting (``as is'').
@c @xref{Two-column Tables, , Making a Two-column Table}.@refill
@c 
表の最初の列を(``他と比較して'')強調無しで印刷するため，@code{@@table}，
@code{@@ftable}と@code{@@vtable}に続けて使用します．@xref{Two-column
Tables, , Making a Two-column Table}.@refill

@item @@author @var{author}
@c Typeset @var{author} flushleft and underline it.  @xref{title
@c subtitle author, , The @code{@@title} and @code{@@author}
@c Commands}.@refill
@c 
@var{author}を左揃えに下線を引き植字します． @xref{title subtitle
author, , The @code{@@title} and @code{@@author} Commands}.@refill

@item @@b@{@var{text}@}
@c Print @var{text} in @b{bold} font.  No effect in Info.  @xref{Fonts}.@refill
@c 
@var{text}を@b{ボールド}フォントで印刷します．Infoでは効果がありません．
@xref{Fonts}.@refill

@ignore
@item @@br
Force a paragraph break.  If used within a line, follow @code{@@br}
with braces.  @xref{br, , @code{@@br}}.@refill
@end ignore

@item @@bullet@{@}
@c Generate a large round dot, or the closest possible
@c thing to one.  @xref{bullet, , @code{@@bullet}}.@refill
@c 
大きな丸い点や，それに最も近いものを生成します．@xref{bullet, ,
@code{@@bullet}}.@refill

@item @@bye
@c Stop formatting a file.  The formatters do not see the contents of a
@c file following an @code{@@bye} command.  @xref{Ending a File}.@refill
@c 
ファイルの書式化を停止します．書式化は@code{@@bye}コマンドに続くファイル
の内容を見ません．@xref{Ending a File}.@refill

@item @@c @var{comment}
@c Begin a comment in Texinfo.  The rest of the line does not appear in
@c either the Info file or the printed manual.  A synonym for
@c @code{@@comment}.  @xref{Comments, , Comments}.@refill
@c 
Texinfoでコメントを開始します．行の残りはInfoファイルにも印刷されたマニュ
アルにも現れません．@code{@@comment}の同義語です．@xref{Comments, ,
Comments}.@refill

@item @@cartouche
@c Highlight an example or quotation by drawing a box with rounded
@c corners around it.  Pair with @code{@@end cartouche}.  No effect in
@c Info.  @xref{cartouche, , Drawing Cartouches Around Examples}.)@refill
@c 
角が丸いボックスを描き，例や引用を強調します．@code{@@end cartouche}とペ
アになります．Infoでは効果はありません．@xref{cartouche, , Drawing
Cartouches Around Examples}.@refill

@item @@center @var{line-of-text}
@c Center the line of text following the command.
@c @xref{titlefont center sp, , @code{@@center}}.@refill
@c 
コマンドに続くテキスト行を中央揃えにします．@xref{titlefont center sp, ,
@code{@@center}}.@refill

@item @@centerchap @var{line-of-text}
@c Like @code{@@chapter}, but centers the chapter title.  @xref{chapter,,
@c @code{@@chapter}}.
@c 
@code{@@chapter}に似ていますが，章のタイトルを中央揃えにします．
@xref{chapter,, @code{@@chapter}}.

@item @@chapheading @var{title}
@c Print a chapter-like heading in the text, but not in the table of
@c contents of a printed manual.  In Info, the title is underlined with
@c asterisks.  @xref{majorheading & chapheading, , @code{@@majorheading}
@c and @code{@@chapheading}}.@refill
@c 
テキストに章のような見出しを印刷しますが，印刷されたマニュアルの目次には
現れません．Infoでは，タイトルはアスタリスクで下線が引かれます．
@xref{majorheading & chapheading, , @code{@@majorheading} and
@code{@@chapheading}}.@refill

@item @@chapter @var{title}
@c Begin a chapter.  The chapter title appears in the table of
@c contents of a printed manual.  In Info, the title is underlined with
@c asterisks.  @xref{chapter, , @code{@@chapter}}.@refill
@c 
章を開始します．章のタイトルは印刷されたマニュアルの目次に現れます．Info
では，タイトルはアスタリスクで下線が引かれます．@xref{chapter, ,
@code{@@chapter}}.@refill

@item @@cindex @var{entry}
@c Add @var{entry} to the index of concepts.  @xref{Index Entries, ,
@c Defining the Entries of an Index}.@refill
@c 
@var{entry}を概念の索引に加えます．@xref{Index Entries, , Defining the
Entries of an Index}.@refill

@item @@cite@{@var{reference}@}
@c Highlight the name of a book or other reference that lacks a
@c companion Info file.  @xref{cite, , @code{@@cite}}.@refill
@c 
Infoファイルの仲間に無い，本やその他の参照の名前を強調します．
@xref{cite, , @code{@@cite}}.@refill

@item @@clear @var{flag}
@c Unset @var{flag}, preventing the Texinfo formatting commands from
@c formatting text between subsequent pairs of @code{@@ifset @var{flag}}
@c and @code{@@end ifset} commands, and preventing
@c @code{@@value@{@var{flag}@}} from expanding to the value to which
@c @var{flag} is set.
@c @xref{set clear value, , @code{@@set} @code{@@clear} @code{@@value}}.@refill
@c 
Texinfo書式化コマンドが@code{@@ifset @var{flag}}と@code{@@end ifset}の組
の間のテキストの書式化するのを妨げるためと，@code{@@value@{@var{flag}@}} 
が@var{flag}が設定した値を展開するのを妨げるため，@var{flag}を解除します．
@xref{set clear value, , @code{@@set} @code{@@clear}
@code{@@value}}.@refill

@item @@code@{@var{sample-code}@}
@c Highlight text that is an expression, a syntactically complete token
@c of a program, or a program name.  @xref{code, , @code{@@code}}.@refill
@c 
式，プログラムの構文上の完全なトークン，またはプログラム名を強調します．
@xref{code, , @code{@@code}}.@refill

@item @@command@{@var{command-name}@}
@c Indicate a command name, such as @command{ls}.
@c @xref{command,, @code{@@command}}.
@c 
@command{ls}のような，コマンド名を示します．@xref{command,,
@code{@@command}}.

@item @@comment @var{comment}
@c Begin a comment in Texinfo.  The rest of the line does not appear in
@c either the Info file or the printed manual.  A synonym for @code{@@c}.
@c @xref{Comments}.
@c 
Texinfoでコメントを開始します．行の残りは，Infoファイルにも印刷されたマ
ニュアルにも現れません．@code{@@c}と同義語です．@xref{Comments}.

@item @@contents
@c Print a complete table of contents.  Has no effect in Info, which uses
@c menus instead.  @xref{Contents, , Generating a Table of
@c Contents}.@refill
@c 
目次を印刷します．Infoでは効果が無く，代わりにメニューが使用されます．
@xref{Contents, , Generating a Table of Contents}.@refill

@item @@copyright@{@}
@c Generate a copyright symbol.  @xref{copyright symbol,, @code{@@copyright@{@}}}.
@c 
著作権のシンボルを生成します．@xref{copyright symbol, ,
@code{@@copyright}}.@refill

@ignore
@item @@ctrl@{@var{ctrl-char}@}
Describe an @sc{ascii} control character.  Insert actual control character
into Info file.  @xref{ctrl, , @code{@@ctrl}}.@refill
@end ignore

@item @@defcodeindex @var{index-name}
@c Define a new index and its indexing command.  Print entries in an
@c @code{@@code} font.  @xref{New Indices, , Defining New
@c Indices}.@refill
@c 
新しい索引と索引コマンドを定義します．@code{@@code}フォントで項目を印刷
します．@xref{New Indices, , Defining New Indices}.@refill

@item @@defcv @var{category} @var{class} @var{name}
@itemx @@defcvx @var{category} @var{class} @var{name}
@c Format a description for a variable associated with a class in
@c object-oriented programming.  Takes three arguments: the category of
@c thing being defined, the class to which it belongs, and its name.
@c @xref{Definition Commands}, and @ref{deffnx,, Def Cmds in Detail}.
@c 
オブジェクト指向プログラムのクラスに結びつけられた変数の記述を書式化しま
す．三つの引数があります．定義されたもののカテゴリ，属するクラス，そして
その名前です．@xref{Definition Commands}.  また@ref{deffnx,, Def Cmds in
Detail}を参照してください．

@item @@deffn @var{category} @var{name} @var{arguments}@dots{}
@itemx @@deffnx @var{category} @var{name} @var{arguments}@dots{}
@c Format a description for a function, interactive command, or similar
@c entity that may take arguments.  @code{@@deffn} takes as arguments the
@c category of entity being described, the name of this particular
@c entity, and its arguments, if any.  @xref{Definition Commands}.@refill
@c 
関数，対話的コマンド，または類似の引数とされる構成要素の記述を書式化しま
す．@code{@@deffn}は引数として，記述される構成要素のカテゴリ，この特定の
構成要素の名前，そしてそのあらゆる引数を引数とします．@xref{Definition
Commands}.@refill

@item @@defindex @var{index-name}
@c Define a new index and its indexing command.  Print entries in a roman
@c font.  @xref{New Indices, , Defining New Indices}.@refill
@c 
新しい索引と索引コマンドを定義します．ローマンフォントで項目を印刷します．
@xref{New Indices, , Defining New Indices}.@refill

@item @@definfoenclose @var{newcmd}, @var{before}, @var{after},
@c Create new @@-command @var{newcmd} for Info that marks text by enclosing
@c it in strings that precede and follow the text.  @xref{definfoenclose}.
@c 
Infoのため，テキストの前後を文字列で囲みテキストに印を付ける，新しい@@- 
コマンド@var{newcmd}を作成します．@xref{definfoenclose}.

@item @@defivar @var{class} @var{instance-variable-name}
@itemx @@defivarx @var{class} @var{instance-variable-name}
@c This command formats a description for an instance variable in
@c object-oriented programming.  The command is equivalent to @samp{@@defcv
@c @{Instance Variable@} @dots{}}.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
このコマンドは，オブジェクト指向プログラミングのインスタンス変数の記述を
書式化します．このコマンドは，@samp{@@defcv @{Instance Variable@}
@dots{}}と同じです．@xref{Definition Commands}.  また@ref{deffnx,, Def
Cmds in Detail}を参照してください．

@item @@defmac @var{macroname} @var{arguments}@dots{}
@itemx @@defmacx @var{macroname} @var{arguments}@dots{}
@c Format a description for a macro.  The command is equivalent to
@c @samp{@@deffn Macro @dots{}}.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
マクロの記述を書式化します．このコマンドは@samp{@@deffn Macro @dots{}}と
同じです．@xref{Definition Commands}.  また@ref{deffnx,, Def Cmds in
Detail}を参照してください．

@item @@defmethod @var{class} @var{method-name} @var{arguments}@dots{}
@itemx @@defmethodx @var{class} @var{method-name} @var{arguments}@dots{}
@c Format a description for a method in object-oriented programming.  The
@c command is equivalent to @samp{@@defop Method @dots{}}.  Takes as
@c arguments the name of the class of the method, the name of the
@c method, and its arguments, if any.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
オブジェクト指向プログラミングのメソッドの記述を書式化します．このコマン
ドは@samp{@@defop Method @dots{}}と同じです．メソッドのクラス名，メソッ
ド名，そしてそのあらゆる引数を引数とします．@xref{Definition Commands}. 
また@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@defop @var{category} @var{class} @var{name} @var{arguments}@dots{}
@itemx @@defopx @var{category} @var{class} @var{name} @var{arguments}@dots{}
@c Format a description for an operation in object-oriented programming.
@c @code{@@defop} takes as arguments the overall name of the category of
@c operation, the name of the class of the operation, the name of the
@c operation, and its arguments, if any.  @xref{Definition
@c Commands}, and @ref{Abstract Objects}.
@c 
オブジェクト指向プログラミングのオペレーションの記述を書式化します．
@code{@@defop}は，オペレーションのカテゴリーの全体名，オペレーションのク
ラス名，オペレーション名，そしてあらゆる引数を引数とします．
@xref{Definition Commands}.  また@ref{Abstract Objects}を参照してくださ
い．

@item @@defopt @var{option-name}
@itemx @@defoptx @var{option-name}
@c Format a description for a user option.  The command is equivalent to
@c @samp{@@defvr @{User Option@} @dots{}}.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
ユーザーオプションの記述を書式化します．このコマンドは@samp{@@defvr
@{User Option@} @dots{}}と同じです．@xref{Definition Commands}.  また
@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@defspec @var{special-form-name} @var{arguments}@dots{}
@itemx @@defspecx @var{special-form-name} @var{arguments}@dots{}
@c Format a description for a special form.  The command is equivalent to
@c @samp{@@deffn @{Special Form@} @dots{}}.  @xref{Definition Commands},
@c and @ref{deffnx,, Def Cmds in Detail}.
@c 
スペシャルフォームの記述を書式化します．このコマンドは@samp{@@deffn
@{Special Form@} @dots{}}と同じです．@xref{Definition Commands}.  また
@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@deftp @var{category} @var{name-of-type} @var{attributes}@dots{}
@itemx @@deftpx @var{category} @var{name-of-type} @var{attributes}@dots{}
@c Format a description for a data type.  @code{@@deftp} takes as arguments
@c the category, the name of the type (which is a word like @samp{int} or
@c @samp{float}), and then the names of attributes of objects of that type.
@c @xref{Definition Commands}, and @ref{Data Types}.
@c 
データ型の記述を書式化します．@code{@@deftp}は，カテゴリー，型名
(@samp{int}や@samp{float}のような単語)，そしてその型のオブジェクトの属性
名を引数とします．@xref{Definition Commands}.  また@ref{Data Types}を参
照してください．

@item @@deftypefn @var{classification} @var{data-type} @var{name} @var{arguments}@dots{}
@itemx @@deftypefnx @var{classification} @var{data-type} @var{name} @var{arguments}@dots{}
@c Format a description for a function or similar entity that may take
@c arguments and that is typed.  @code{@@deftypefn} takes as arguments the
@c classification of entity being described, the type, the name of the
@c entity, and its arguments, if any.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
関数やその類似の，引数をとることが可能で入力も可能な構成要素の記述を書式
化します．@code{@@deftypefn}は，記述されている構成要素の分類，型，構成要
素の名前，そしてあらゆる引数を引数とします．@xref{Definition Commands}. 
また@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@deftypefun @var{data-type} @var{function-name} @var{arguments}@dots{}
@itemx @@deftypefunx @var{data-type} @var{function-name} @var{arguments}@dots{}
@c Format a description for a function in a typed language.
@c The command is equivalent to @samp{@@deftypefn Function @dots{}}.
@c @xref{Definition Commands}, and @ref{deffnx,, Def Cmds in Detail}.
@c 
入力された言語の関数の記述を書式化します．このコマンドは
@samp{@@deftypefn Function @dots{}}と同じです．@xref{Definition
Commands}.  また@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@deftypeivar @var{class} @var{data-type} @var{variable-name}
@itemx @@deftypeivarx @var{class} @var{data-type} @var{variable-name}
@c Format a description for a typed instance variable in object-oriented
@c programming. @xref{Definition Commands}, and @ref{Abstract Objects}.
@c 
オブジェクト指向プログラミングの入力されたインスタンス変数を書式化します．
@xref{Definition Commands}.  また@ref{Abstract Objects}を参照してくださ
い．

@item @@deftypemethod @var{class} @var{data-type} @var{method-name} @var{arguments}@dots{}
@itemx @@deftypemethodx @var{class} @var{data-type} @var{method-name} @var{arguments}@dots{}
@c Format a description for a typed method in object-oriented programming.
@c @xref{Definition Commands}, and @ref{deffnx,, Def Cmds in Detail}.
@c 
オブジェクト指向プログラミングの入力されたメソッドの記述を書式化します．
@xref{Definition Commands}.  また@ref{deffnx,, Def Cmds in Detail}を参照
してください．

@item @@deftypeop @var{category} @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
@itemx @@deftypeopx @var{category} @var{class} @var{data-type} @var{name} @var{arguments}@dots{}
@c Format a description for a typed operation in object-oriented programming.
@c @xref{Definition Commands}, and @ref{Abstract Objects}.
@c 
オブジェクト指向プログラミングの入力されたオペレーションの記述を書式化し
ます．@xref{Definition Commands}.  また@ref{Abstract Objects}を参照して
ください．

@item @@deftypevar @var{data-type} @var{variable-name}
@itemx @@deftypevarx @var{data-type} @var{variable-name}
@c Format a description for a variable in a typed language.  The command is
@c equivalent to @samp{@@deftypevr Variable @dots{}}.  @xref{Definition
@c Commands}, and @ref{deffnx,, Def Cmds in Detail}.
@c 
入力された言語の変数の記述を書式化します．このコマンドは
@samp{@@deftypevr Variable @dots{}}と同じです．@xref{Definition
Commands}.  また@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@deftypevr @var{classification} @var{data-type} @var{name}
@itemx @@deftypevrx @var{classification} @var{data-type} @var{name}
@c Format a description for something like a variable in a typed
@c language---an entity that records a value.  Takes as arguments the
@c classification of entity being described, the type, and the name of the
@c entity.  @xref{Definition Commands}, and @ref{deffnx,, Def Cmds in
@c Detail}.
@c 
入力された言語の変数のようなもの --- 値を記録する構成要素 --- の記述を書
式化します．引数として，記述された構成要素の分類，型，そして構成要素の名
前をとります．@xref{Definition Commands}.  また@ref{deffnx,, Def Cmds in
Detail} を参照してください．

@item @@defun @var{function-name} @var{arguments}@dots{}
@itemx @@defunx @var{function-name} @var{arguments}@dots{}
@c Format a description for functions.  The command is equivalent to
@c @samp{@@deffn Function @dots{}}.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
関数の記述を書式化します．このコマンドは@samp{@@deffn Function @dots{}} 
と同じです．@xref{Definition Commands}.  また@ref{deffnx,, Def Cmds in
Detail}を参照してください．

@item @@defvar @var{variable-name}
@itemx @@defvarx @var{variable-name}
@c Format a description for variables.  The command is equivalent to
@c @samp{@@defvr Variable @dots{}}.  @xref{Definition Commands}, and
@c @ref{deffnx,, Def Cmds in Detail}.
@c 
変数の記述を書式化します．このコマンドは@samp{@@defvr Variable @dots{}} 
と同じです．@xref{Definition Commands}.  また@ref{deffnx,, Def Cmds in
Detail}を参照してください．

@item @@defvr @var{category} @var{name}
@itemx @@defvrx @var{category} @var{name}
@c Format a description for any kind of variable.  @code{@@defvr} takes
@c as arguments the category of the entity and the name of the entity.
@c @xref{Definition Commands},
@c and @ref{deffnx,, Def Cmds in Detail}.
@c 
あらゆる変数に類するものの記述を書式化します．@code{@@defvr}は，構成要素
のカテゴリと構成要素の名前を引数とします．@xref{Definition Commands}. 
また@ref{deffnx,, Def Cmds in Detail}を参照してください．

@item @@detailmenu
@c Avoid @code{makeinfo} confusion stemming from the detailed node listing
@c in a master menu.  @xref{Master Menu Parts}.
@c 
マスターメニューでリストアップされている詳細なノードで生じる，
@code{makeinfo}の混乱を避けます．@xref{Master Menu Parts}.

@item @@dfn@{@var{term}@}
@c Highlight the introductory or defining use of a term.
@c @xref{dfn, , @code{@@dfn}}.@refill
@c 
用語使用の紹介や定義を強調します．@xref{dfn, , @code{@@dfn}}.@refill

@item @@dircategory @var{dirpart}
@c Specify a part of the Info directory menu where this file's entry should
@c go.  @xref{Installing Dir Entries}.
@c 
このファイルの項目へ行べきInfoディレクトリメニューを指定します．
@xref{Installing Dir Entries}.

@item @@direntry
@c Begin the Info directory menu entry for this file.  Pair with
@c @code{@@end direntry}.  @xref{Installing Dir Entries}.
@c 
このファイルのInfoディレクトリメニュー項目を開始します．@code{@@end
direntry}と対になります．@xref{Installing Dir Entries}.

@item @@display
@c Begin a kind of example.  Like @code{@@example} (indent text, do not
@c fill), but do not select a new font.  Pair with @code{@@end display}.
@c @xref{display, , @code{@@display}}.
@c 
例のようなものを開始します．@code{@@example}に似ていますが(テキストを字
下げし，全体に広がらない)新しいフォントを選択しません．@code{@@end
display}と対になります．@xref{display, , @code{@@display}}.

@item @@dmn@{@var{dimension}@}
@c Format a unit of measure, as in 12@dmn{pt}.  Causes @TeX{} to insert a
@c thin space before @var{dimension}.  No effect in Info.
@c @xref{dmn, , @code{@@dmn}}.
@c 
測定単位を12@dmn{pt}のように書式化します．@TeX{}は，@var{dimension}の前
にスペースを挿入します．Infoでは，効果はありません．@xref{dmn, ,
@code{@@dmn}}.

@item @@documentdescription
@c Set the document description text, included in the HTML output.  Pair
@c with @code{@@end documentdescription}.  @xref{documentdescription,,
@c @code{@@documentdescription}}.
@c 
HTML出力に含められるドキュメントを記述しているテキストを設定します．
@code{@@end documentdescription}と対になります．
@xref{documentdescription,, @code{@@documentdescription}}.

@item @@documentencoding @var{enc}
@c Declare the input encoding to be @var{enc}.
@c @xref{documentencoding,, @code{@@documentencoding}}.
@c 
入力エンコードを@var{enc}として宣言します．@xref{documentencoding,,
@code{@@documentencoding}}.

@item @@documentlanguage @var{CC}
@c Declare the document language as the two-character ISO-639 abbreviation
@c @var{CC}.  @xref{documentlanguage,, @code{@@documentlanguage}}.
@c 
ドキュメント言語を二文字のISO-639の省略型@var{CC}と宣言します．
@xref{documentlanguage,, @code{@@documentlanguage}}.

@item @@dotaccent@{@var{c}@}
@c Generate a dot accent over the character @var{c}, as in @dotaccent{o}.
@c @xref{Inserting Accents}.
@c 
文字@var{c}の上に@dotaccent{o}のようにドットアクセントを生成します．
@xref{Inserting Accents}.

@item @@dots@{@}
@c Insert an ellipsis: @samp{@dots{}}.
@c @xref{dots, , @code{@@dots}}.@refill
@c 
省略を意味する@samp{@dots{}}を挿入します．@xref{dots, , @code{@@dots}}.
@refill

@item @@email@{@var{address}[, @var{displayed-text}]@}
@c Indicate an electronic mail address.
@c @xref{email, , @code{@@email}}.
@c 
電子メールアドレスを示します．@xref{email, , @code{@@email}}.

@item @@emph@{@var{text}@}
@c Highlight @var{text}; text is displayed in @emph{italics} in printed
@c output, and surrounded by asterisks in Info.  @xref{Emphasis, ,
@c Emphasizing Text}.
@c 
@var{text}を強調します．テキストは印刷された出力で@emph{イタリック}で表
示され，Infoではアスタリスクが前後に付きます．@xref{Emphasis, ,
Emphasizing Text}.

@item @@end @var{environment}
@c Ends @var{environment}, as in @samp{@@end example}.  @xref{Formatting
@c Commands,,@@-commands}.
@c 
@var{environment}を@samp{@@end example}のように終了します．
@xref{Formatting Commands,,@@-commands}.

@item @@env@{@var{environment-variable}@}
@c Indicate an environment variable name, such as @env{PATH}.
@c @xref{env,, @code{@@env}}.
@c 
@env{PATH}のような環境変数名を示します．@xref{env,, @code{@@env}}.

@item @@enddots@{@}
@c Generate an end-of-sentence of ellipsis, like this @enddots{}
@c @xref{dots,,@code{@@dots@{@}}}.
@c 
文章の終りの省略を@enddots{}のように生成します．
@xref{dots,,@code{@@dots@{@}}}.

@item @@enumerate [@var{number-or-letter}]
@c Begin a numbered list, using @code{@@item} for each entry.
@c Optionally, start list with @var{number-or-letter}.  Pair with
@c @code{@@end enumerate}.  @xref{enumerate, ,
@c @code{@@enumerate}}.@refill
@c 
@code{@@item}を使用するそれぞれの項目に対し，番号付のリストを開始します．
オプションで@var{number-or-letter}を用いたリストを開始します．
@code{@@end enumerate}と対になります．@xref{enumerate, ,
@code{@@enumerate}}.@refill

@item @@equiv@{@}
@c Indicate to the reader the exact equivalence of two forms with a
@c glyph: @samp{@equiv{}}.  @xref{Equivalence}.@refill
@c 
glyphを用いて，@samp{@equiv{}}のように，二つ形式が正確に等しいことを読者
に示します．@xref{Equivalence}.@refill

@item @@error@{@}
@c Indicate to the reader with a glyph that the following text is
@c an error message: @samp{@error{}}.  @xref{Error Glyph}.@refill
@c 
glyphを用いて，@samp{@error{}}のように，以下のテキストがエラーメッセージ
だということを読者に示します．@xref{Error Glyph}.@refill

@item  @@evenfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
@itemx @@evenheading [@var{left}] @@| [@var{center}] @@| [@var{right}]
@c Specify page footings resp.@: headings for even-numbered (left-hand)
@c pages.  @xref{Custom Headings, ,
@c How to Make Your Own Headings}.@refill
@c 
偶数番号で(左側)ページのページフッタと見出しを指定します．@xref{Custom
Headings, , How to Make Your Own Headings}.@refill

@item @@everyfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
@itemx @@everyheading [@var{left}] @@| [@var{center}] @@| [@var{right}]
@c Specify page footings resp.@: headings for every page.  Not relevant to
@c Info.  @xref{Custom Headings, , How to Make Your Own Headings}.@refill
@c 
すべてのページのページフッタと見出しを指定します．Infoには関係しません．
@xref{Custom Headings, , How to Make Your Own Headings}.@refill

@item @@example
@c Begin an example.  Indent text, do not fill, and select fixed-width font.
@c Pair with @code{@@end example}.  @xref{example, ,
@c @code{@@example}}.@refill
@c 
例を開始します．テキストを字下げし，補充せず，等幅フォントを選択します．
@code{@@end example}と対になります．@xref{example, ,
@code{@@example}}.@refill

@item @@exampleindent @var{indent}
@c Indent example-like environments by @var{indent} number of spaces
@c (perhaps 0).  @xref{exampleindent,, Paragraph Indenting}.
@c 
例のような環境で，@var{indent}個のスペースで(おそらく0)字下げします．
@xref{exampleindent,, Paragraph Indenting}.

@item @@exclamdown@{@}
@c Produce an upside-down exclamation point.  @xref{Inserting Accents}.
@c 
上下逆の感嘆符を生成します．@xref{Inserting Accents}.

@item @@exdent @var{line-of-text}
@c Remove any indentation a line might have.  @xref{exdent, ,
@c Undoing the Indentation of a Line}.@refill
@c 
行が持つあらゆる字下げを削除します．@xref{exdent, , Undoing the
Indentation of a Line}.@refill

@item @@expansion@{@}
@c Indicate the result of a macro expansion to the reader with a special
@c glyph: @samp{@expansion{}}.
@c @xref{expansion, , @expansion{} Indicating an Expansion}.@refill
@c 
特別なglyph@samp{@expansion{}}で，マクロ展開の結果を読者に示します．
@xref{expansion, , @expansion{} Indicating an Expansion}.@refill

@item @@file@{@var{filename}@}
@c Highlight the name of a file, buffer, node, or directory.  @xref{file, ,
@c @code{@@file}}.@refill
@c 
ファイル，バッファ，ノードやディレクトリの名前を強調します．@xref{file,
, @code{@@file}}.@refill

@item @@finalout
@c Prevent @TeX{} from printing large black warning rectangles beside
@c over-wide lines.  @xref{Overfull hboxes}.@refill
@c 
@TeX{}が，幅を越えた行に大きな黒い警告の長方形を印刷するのを妨げます．
@xref{Overfull hboxes}.@refill

@item @@findex @var{entry}
@c Add @var{entry} to the index of functions.  @xref{Index Entries, ,
@c Defining the Entries of an Index}.@refill
@c 
@var{entry}を関数の索引に追加します．@xref{Index Entries, , Defining the
Entries of an Index}.@refill

@item @@flushleft
@itemx @@flushright
@c Left justify every line but leave the right end ragged.
@c Leave font as is.  Pair with @code{@@end flushleft}.
@c @code{@@flushright} analogous.
@c @xref{flushleft & flushright, , @code{@@flushleft} and
@c @code{@@flushright}}.@refill
@c 
全ての行を左寄せにしますが右端はバラバラになります．フォントはそのままで
す．@code{@@end flushleft}と対になります．@code{@@flushright}の同義語で
す．@xref{flushleft & flushright, , @code{@@flushleft} and
@code{@@flushright}}.@refill

@item @@footnote@{@var{text-of-footnote}@}
@c Enter a footnote.  Footnote text is printed at the bottom of the page
@c by @TeX{}; Info may format in either `End' node or `Separate' node style.
@c @xref{Footnotes}.@refill
@c 
脚注に挿入します．脚注のテキストは，@TeX{}ではページの底に印刷され，Info
はノードの`終り'か`分割した'形式で書式化されます．@xref{Footnotes}.
@refill

@item @@footnotestyle @var{style}
@c Specify an Info file's footnote style, either @samp{end} for the end
@c node style or @samp{separate} for the separate node style.
@c @xref{Footnotes}.@refill
@c 
Infoファイルの脚注形式を指定し，@samp{end}は終りに置くノード形式で，
@samp{separate}は分割したノード形式です．@xref{Footnotes}.@refill

@item @@format
@c Begin a kind of example.  Like @code{@@display}, but do not narrow the
@c margins.  Pair with @code{@@end format}.  @xref{example,,
@c @code{@@example}}.
@c 
例のようなものを開始します．@code{@@display}に似ていますが，マージンは狭
くなりません．@code{@@end format}と対になります．@xref{example,,
@code{@@example}}.

@item @@ftable @var{formatting-command}
@c Begin a two-column table, using @code{@@item} for each entry.
@c Automatically enter each of the items in the first column into the
@c index of functions.  Pair with @code{@@end ftable}.  The same as
@c @code{@@table}, except for indexing.  @xref{ftable vtable, ,
@c @code{@@ftable} and @code{@@vtable}}.@refill
@c 
それぞれの項目に対し，@code{@@item}を使用した二列の表を開始します．それ
ぞれの項目は，関数の索引の最初の列に自動的に挿入されます．@code{@@end
ftable}と対になります．索引に対する以外，@code{@@table}と同じです．
@xref{ftable vtable, , @code{@@ftable} and @code{@@vtable}}.@refill

@item @@group
@c Hold text together that must appear on one printed page.  Pair with
@c @code{@@end group}.  Not relevant to Info.  @xref{group, ,
@c @code{@@group}}.@refill
@c 
一つの印刷されたページに，一緒に現れる必要があるテキストを保ちます．
@code{@@end group}と対になります．Infoでは関係ありません．@xref{group, ,
@code{@@group}}.@refill

@item @@H@{@var{c}@}
@c Generate the long Hungarian umlaut accent over @var{c}, as in @H{o}.
@c 
@var{c}の上に長いハンガリーのウムラートを@H{o}のように生成します．

@item @@heading @var{title}
@c Print an unnumbered section-like heading in the text, but not in the
@c table of contents of a printed manual.  In Info, the title is
@c underlined with equal signs.  @xref{unnumberedsec appendixsec heading,
@c , Section Commands}.@refill
@c 
テキストに番号付けされていないセクションのような見出しを印刷しますが，印
刷された目次には印刷しません．Infoでは，タイトルは等号で下線が引かれます．
@xref{unnumberedsec appendixsec heading, , Section Commands}.@refill

@item @@headings @var{on-off-single-double}
@c Turn page headings on or off, and/or specify single-sided or double-sided
@c page headings for printing.  @xref{headings on off, , The
@c @code{@@headings} Command}.
@c 
印刷に対し，ページ見出しを付けたり消したりし，片面または両面のページ見出
しを指定したりします．@xref{headings on off, , The @code{@@headings}
Command}.

@item @@html
@c Enter HTML completely.  Pair with @code{@@end html}.  @xref{Raw
@c Formatter Commands}.
@c 
完全にHTMLモードに入ります．@code{@@end html}と対になります．@xref{Raw
Formatter Commands}.

@item @@hyphenation@{@var{hy-phen-a-ted words}@}
@c Explicitly define hyphenation points.  @xref{- and hyphenation,,
@c @code{@@-} and @code{@@hyphenation}}.
@c 
ハイフネーションポイントを明示的に定義します．@xref{- and hyphenation,,
@code{@@-} and @code{@@hyphenation}}.

@item @@i@{@var{text}@}
@c Print @var{text} in @i{italic} font.  No effect in Info.  @xref{Fonts}.
@c 
@var{text}を@i{イタリック}フォントで印刷します．Infoでは効果がありません．
@xref{Fonts}.

@item @@ifclear @var{flag}
@c If @var{flag} is cleared, the Texinfo formatting commands format text
@c between @code{@@ifclear @var{flag}} and the following @code{@@end
@c ifclear} command.
@c @xref{set clear value, , @code{@@set} @code{@@clear} @code{@@value}}.@refill
@c 
@var{flag}がクリアされている場合，Texinfo書式化コマンドは@code{@@ifclear
@var{flag}}とそれに続く@code{@@end ifclear}コマンドの間のテキストを書式
化します．@xref{set clear value, , @code{@@set} @code{@@clear}
@code{@@value}}.@refill

@item @@ifhtml
@itemx @@ifinfo
@c Begin a stretch of text that will be ignored by @TeX{} when it typesets
@c the printed manual.  @code{@@ifhtml} text appears only in the HTML
@c output.  @code{@@ifinfo} output appears in both Info and (for historical
@c compatibility) plain text output .  Pair with @code{@@end ifhtml}
@c resp.@: @code{@@end ifinfo}.  @xref{Conditionals}.
@c 
印刷されたマニュアルに植字するとき，@TeX{}が無視するテキストの展開を開始
します．@code{@@ifhtml}テキストはHTMLのみに現れます．@code{@@ifinfo}出力
はInfoと(歴史的な互換性のため)プレーンテキストの出力の両方に現れます．
@code{@@end ifhtml}と対になります．@code{@@end ifinfo}も同様になります．
@xref{Conditionals}.

@item @@ifnothtml
@itemx @@ifnotinfo
@itemx @@ifnotplaintext
@itemx @@ifnottex
@itemx @@ifnotxml
@c Begin a stretch of text that will be ignored in one output format but
@c not the others.  The text appears in the formats not specified:
@c @code{@@ifnothtml} text is omitted from html output, etc.  The exception
@c is @code{@@ifnotinfo} text, which is omitted from plain text output as
@c well as Info output.  Pair with the corresponding @code{@@end
@c ifnot@var{format}}.  @xref{Conditionals}.
@c 
一つの出力形式で無視され，他では無視されないテキストの展開を開始します．
テキストは指定されていないフォーマットだけに現れます．@code{@@ifnothtml} 
のテキストはHTML出力では削除される等のようになります．例外は
@code{@@ifnotinfo}のテキストで，それはInfo出力と同様にプレーンテキストの
出力からも削除されます．対応する@code{@@end ifnot@var{format}}と対になり
ます．@xref{Conditionals}.

@item @@ifplaintext
@c Begin a stretch of text that appears only in the plain text output.
@c Pair with @code{@@end ifplaintext}.  @xref{Conditionals}.
@c 
プレーンテキストの出力だけに現れるテキストの展開を開始します．
@code{@@end ifplaintext}と対になります．@xref{Conditionals}.

@item @@ifset @var{flag}
@c If @var{flag} is set, the Texinfo formatting commands format text
@c between @code{@@ifset @var{flag}} and the following @code{@@end ifset}
@c command.
@c @xref{set clear value, , @code{@@set} @code{@@clear} @code{@@value}}.@refill
@c 
@var{flag}が設定されている場合，Texinfo書式化コマンドは@code{@@ifset
@var{flag}}とそれに続く@code{@@end ifset}コマンドの間のテキストを書式化
します．@xref{set clear value, , @code{@@set} @code{@@clear}
@code{@@value}}.@refill

@item @@iftex
@c Begin a stretch of text that will not appear in the Info file, but
@c will be processed only by @TeX{}.  Pair with @code{@@end iftex}.
@c @xref{Conditionals, , Conditionally Visible Text}.@refill
@c 
Infoファイルに現れないが，@TeX{}のみで処理されるテキストの展開を開始しま
す．@code{@@end iftex}と対になります．@xref{Conditionals, ,
Conditionally Visible Text}.@refill

@item @@ifxml
@c Begin a stretch of text that appears only in the XML output.
@c Pair with @code{@@end ifxml}.  @xref{Conditionals}.
@c 
XML出力だけに現れるテキストの展開を開始します．@code{@@end ifxml}と対に
なります．@xref{Conditionals}.

@item @@ignore
@c Begin a stretch of text that will not appear in either the Info file
@c or the printed output.  Pair with @code{@@end ignore}.
@c @xref{Comments, , Comments and Ignored Text}.@refill
@c 
Infoファイルにも印刷物にも現れないテキストを展開します．@code{@@end
ignore}と対になります．@xref{Comments, , Comments and Ignored
Text}.@refill

@item @@image@{@var{filename}, [@var{width}], [@var{height}], [@var{alt}], [@var{ext}]@}
@c Include graphics image in external @var{filename} scaled to the given
@c @var{width} and/or @var{height}, using @var{alt} text and looking for
@c @samp{@var{filename}.@var{ext}} in HTML.  @xref{Images}.
@c 
外部の@var{filename}の画像を，与えられた@var{width}と/や@var{height}の大
きさで含め，HTMLでは@var{alt}テキストを使用し，
@samp{@var{filename}.@var{ext}}を探します．@xref{Images}.

@item @@include @var{filename}
@c Incorporate the contents of the file @var{filename} into the Info file
@c or printed document.  @xref{Include Files}.@refill
@c 
Infoファイルや印刷されたドキュメントに，ファイル@var{filename}の内容を取
り込みます．@xref{Include Files}.@refill

@item @@inforef@{@var{node-name}, [@var{entry-name}], @var{info-file-name}@}
@c Make a cross reference to an Info file for which there is no printed
@c manual.  @xref{inforef, , Cross references using
@c @code{@@inforef}}.@refill
@c 
印刷されたマニュアルには無い，Infoファイルへの相互参照を作成します．
@xref{inforef, , Cross references using @code{@@inforef}}.@refill

@item \input @var{macro-definitions-file}
@c Use the specified macro definitions file.  This command is used only
@c in the first line of a Texinfo file to cause @TeX{} to make use of the
@c @file{texinfo} macro definitions file.  The backslash in @code{\input}
@c is used instead of an @code{@@} because @TeX{} does not
@c recognize @code{@@} until after it has read the definitions file.
@c @xref{Texinfo File Header}.
@c 
指定されたマクロ定義ファイルを使用します．このコマンドは，@TeX{}が
@file{texinfo}マクロ定義ファイルを使用するよう，Texinfoファイルの最初の
行でのみ使用されます．定義ファイルを読むまで@TeX{}は@code{@@}を理解でき
ないので，@code{\input}のバックスラッシュが@code{@@}の代わりに使用されま
す．@xref{Texinfo File Header}.

@item @@item
@c Indicate the beginning of a marked paragraph for @code{@@itemize} and
@c @code{@@enumerate}; indicate the beginning of the text of a first column
@c entry for @code{@@table}, @code{@@ftable}, and @code{@@vtable}.
@c @xref{Lists and Tables}.@refill
@c 
@code{@@itemize}と@code{@@enumerate}に対し印が付けられた段落の最初を示し
ます．@code{@@table}，@code{@@ftable}，そして@code{@@vtable}に対し，最初
の列の項目のテキストの最初を示します．@xref{Lists and Tables}.@refill

@item @@itemize  @var{mark-generating-character-or-command}
@c Produce a sequence of indented paragraphs, with a mark inside the left
@c margin at the beginning of each paragraph.  Pair with @code{@@end
@c itemize}.  @xref{itemize, , @code{@@itemize}}.@refill
@c 
字下げされた段落の文章を作成し，それぞれの段落の最初に左のマージンの内部
に印をを付けます．@xref{itemize, , @code{@@itemize}}.@refill

@item @@itemx
@c Like @code{@@item} but do not generate extra vertical space above the
@c item text.  @xref{itemx, , @code{@@itemx}}.@refill
@c 
@code{@@item}に似ていますが，項目のテキストの上に余分な縦方向の空白を生
成しません．@xref{itemx, , @code{@@itemx}}.@refill

@item @@kbd@{@var{keyboard-characters}@}
@c Indicate text that is characters of input to be typed by
@c users.  @xref{kbd, , @code{@@kbd}}.@refill
@c 
ユーザが入力する文字のテキストを示します．@xref{kbd, , @code{@@kbd}}.
@refill

@item @@kbdinputstyle @var{style}
@c Specify when @code{@@kbd} should use a font distinct from @code{@@code}.
@c @xref{kbd, , @code{@@kbd}}.@refill
@c 
@code{@@kbd}が@code{@@code}と異なるフォントを使用するとき指定します．
@xref{kbd, , @code{@@kbd}}.@refill

@item @@key@{@var{key-name}@}
@c Indicate a name for a key on a keyboard.
@c @xref{key, , @code{@@key}}.@refill
@c 
キーボードのキーの名前を示します．@xref{key, , @code{@@key}}.@refill

@item @@kindex @var{entry}
@c Add @var{entry} to the index of keys.
@c @xref{Index Entries, , Defining the Entries of an Index}.@refill
@c 
キーの索引に@var{entry}を加えます．@xref{Index Entries, , Defining the
Entries of an Index}.@refill

@item @@L@{@}
@itemx @@l@{@}
@c Generate the uppercase and lowercase Polish suppressed-L letters,
@c respectively: @L{}, @l{}.
@c 
ポーランドの縮めたLの文字の，大文字と小文字を生成します．それぞれ@L{}，
@l{}です．

@c Possibly this can be tossed now that we have macros.  --karl, 16sep96.
@c Yes, let's toss it, it's pretty weird.  --karl, 15jun97.
@c @item @@global@@let@var{new-command}=@var{existing-command}
@c Equate a new highlighting command with an existing one.  Only for
@c @TeX{}.  Write definition inside of @code{@@iftex} @dots{} @code{@@end
@c iftex}.  @xref{Customized Highlighting}.@refill

@item @@lisp
@c Begin an example of Lisp code.  Indent text, do not fill, and select
@c fixed-width font.  Pair with @code{@@end lisp}.  @xref{lisp, , @code{@@lisp}}.
@c 
Lispコードの例を開始します．文字を字下げし，両端まで広げず，等幅フォント
を選択します．@code{@@end lisp}と対になります．@xref{lisp, ,
@code{@@lisp}}.

@item @@lowersections
@c Change subsequent chapters to sections, sections to subsections, and so
@c on. @xref{Raise/lower sections, , @code{@@raisesections} and
@c @code{@@lowersections}}.@refill
@c 
順番に，章をセクションに，セクションをサブセクションなどのように変更しま
す．@xref{Raise/lower sections, , @code{@@raisesections} and
@code{@@lowersections}}.@refill

@item @@macro @var{macroname} @{@var{params}@}
@c Define a new Texinfo command @code{@@@var{macroname}@{@var{params}@}}.
@c Only supported by @code{makeinfo} and @code{texi2dvi}.  @xref{Defining
@c Macros}.
@c 
新しいTexinfoコマンド@code{@@@var{macroname}@{@var{params}@}}を定義しま
す．@code{makeinfo}と@code{texi2dvi}のみでサポートされています．
@xref{Defining Macros}.

@item @@majorheading @var{title}
@c Print a chapter-like heading in the text, but not in the table of
@c contents of a printed manual.  Generate more vertical whitespace before
@c the heading than the @code{@@chapheading} command.  In Info, the chapter
@c heading line is underlined with asterisks.  @xref{majorheading &
@c chapheading, , @code{@@majorheading} and @code{@@chapheading}}.@refill
@c 
テキストで章のような見出しを印刷しますが，印刷されたマニュアルの目次には
印刷されません．@code{@@chapheading}コマンドより大きな縦方向の空白を見出
しの前に生成します．Infoでは，章の見出し行はアスタリスクで下線が引かれま
す．@xref{majorheading & chapheading, , @code{@@majorheading} and
@code{@@chapheading}}.@refill

@item @@math@{@var{mathematical-expression}@}
@c Format a mathematical expression.
@c @xref{math, , @code{@@math}: Inserting Mathematical Expressions}.
@c 
数式を書式化します．@xref{math, , @code{@@math}: Inserting Mathematical
Expressions}.

@item @@menu
@c Mark the beginning of a menu of nodes in Info.  No effect in a printed
@c manual.  Pair with @code{@@end menu}.  @xref{Menus}.@refill
@c 
Infoでノードメニューの最初に印を付けます．印刷されたマニュアルでは効果が
ありません．@code{@@end menu}と対になります．@xref{Menus}.@refill

@item @@minus@{@}
@c Generate a minus sign, `@minus{}'.  @xref{minus, , @code{@@minus}}.@refill
@c 
負の符号`@minus{}'を生成します．@xref{minus, , @code{@@minus}}.@refill

@item @@multitable @var{column-width-spec}
@c Begin a multi-column table.  Pair with @code{@@end multitable}.
@c @xref{Multitable Column Widths}.
@c 
複数列の表を開始します．@code{@@end multitable}と対になります．
@xref{Multitable Column Widths}.

@item @@need @var{n}
@c Start a new page in a printed manual if fewer than @var{n} mils
@c (thousandths of an inch) remain on the current page.  @xref{need, ,
@c @code{@@need}}.@refill
@c 
現在のページの残りが@var{n}ミル(千分の1インチ)より小さい場合，印刷された
マニュアルで新しいページを開始します．@xref{need, , @code{@@need}}.
@refill

@item @@node @var{name}, @var{next}, @var{previous}, @var{up}
@c Define the beginning of a new node in Info, and serve as a locator for
@c references for @TeX{}.  @xref{node, , @code{@@node}}.@refill
@c 
Infoで新しいノードの開始を定義し，@TeX{}に対し参照の位置を供給します．
@xref{node, , @code{@@node}}.@refill

@item @@noindent
@c Prevent text from being indented as if it were a new paragraph.
@c @xref{noindent, , @code{@@noindent}}.@refill
@c 
テキストが新しい段落であるかのように字下げするのを妨げます．
@xref{noindent, , @code{@@noindent}}.@refill

@item @@novalidate
@c Suppress validation of node references, omit creation of auxiliary files
@c with @TeX{}.  Use before @code{@@setfilename}.  @xref{Pointer Validation}.
@c 
ノード参照の有効化を抑制し，@TeX{}の追加ファイルの作成を削除します．
@code{@@setfilename}の前で使用します．@xref{Pointer Validation}.

@item @@O@{@}
@itemx @@o@{@}
@c Generate the uppercase and lowercase O-with-slash letters, respectively:
@c @O{}, @o{}.
@c 
大文字と小文字のスラッシュの付いたOの文字を生成します．それぞれ，@O{}，
@o{}です．

@item  @@oddfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
@itemx @@oddheading [@var{left}] @@| [@var{center}] @@| [@var{right}]
@c Specify page footings resp.@: headings for odd-numbered (right-hand)
@c pages.  @xref{Custom Headings, ,
@c How to Make Your Own Headings}.@refill
@c 
それぞれページのフッタと見出しを，それぞれ偶数番号の(右側の)ページに指定
します．@xref{Custom Headings, , How to Make Your Own Headings}.@refill

@item @@OE@{@}
@itemx @@oe@{@}
@c Generate the uppercase and lowercase OE ligatures, respectively:
@c @OE{}, @oe{}.  @xref{Inserting Accents}.
@c 
大文字と小文字のOEの抱き文字を生成します．それぞれ@OE{}，@oe{}です．
@xref{Inserting Accents}.

@item @@option@{@var{option-name}@}
@c Indicate a command-line option, such as @option{-l} or @option{--help}.
@c @xref{option,, @code{@@option}}.
@c 
@option{-l}や@option{--help}のようなコマンドラインオプションを示します．
@xref{option,, @code{@@option}}.

@item @@page
@c Start a new page in a printed manual.  No effect in Info.
@c @xref{page, , @code{@@page}}.@refill
@c 
印刷されたマニュアルで新しいページを開始します．Infoでは効果ありません．
@xref{page, , @code{@@page}}.@refill

@item @@pagesizes [@var{width}][, @var{height}]
@c Change page dimensions.  @xref{pagesizes}.
@c 
ページ寸法を変更します．@xref{pagesizes}.

@item @@paragraphindent @var{indent}
@c Indent paragraphs by @var{indent} number of spaces (perhaps 0); preserve
@c source file indentation if @var{indent} is @code{asis}.
@c @xref{paragraphindent,, Paragraph Indenting}.
@c 
@var{indent}個のスペース(おそらく0)で，段落の字下げを行います．
@var{indent}が@code{asis}の場合，ソースファイルの字下げを保持します．
@xref{paragraphindent,, Paragraph Indenting}.

@item @@pindex @var{entry}
@c Add @var{entry} to the index of programs.  @xref{Index Entries, , Defining
@c the Entries of an Index}.@refill
@c 
プログラムの索引に@var{entry}を加えます．@xref{Index Entries, , Defining
the Entries of an Index}.@refill

@item @@point@{@}
@c Indicate the position of point in a buffer to the reader with a
@c glyph: @samp{@point{}}.  @xref{Point Glyph, , Indicating
@c Point in a Buffer}.@refill
@c 
バッファでのポイントの位置を，読者にglyph@samp{@point{}}で示します．
@xref{Point Glyph, , Indicating Point in a Buffer}.@refill

@item @@pounds@{@}
@c Generate the pounds sterling currency sign.
@c @xref{pounds,,@code{@@pounds@{@}}}.
@c 
ポンド通貨記号を生成します．@xref{pounds,,@code{@@pounds@{@}}}.

@item @@print@{@}
@c Indicate printed output to the reader with a glyph:
@c @samp{@print{}}.  @xref{Print Glyph}.@refill
@c 
読者にglyph，@samp{@print{}}で印刷物を示します．@xref{Print
Glyph}.@refill

@item @@printindex @var{index-name}
@c Print an alphabetized two-column index in a printed manual or generate
@c an alphabetized menu of index entries for Info.  @xref{Printing
@c Indices & Menus}.@refill
@c 
アルファベット順の二列の索引を，印刷されたマニュアルで印刷したり，Infoで
索引項目のアルファベット順のメニューを生成したりします．@xref{Printing
Indices & Menus}.@refill

@item @@pxref@{@var{node-name}, [@var{entry}], [@var{topic-or-title}], [@var{info-file}], [@var{manual}]@}
@c Make a reference that starts with a lower case `see' in a printed
@c manual.  Use within parentheses only.  Do not follow command with a
@c punctuation mark---the Info formatting commands automatically insert
@c terminating punctuation as needed.  Only the first argument is mandatory.
@c @xref{pxref, , @code{@@pxref}}.@refill
@c 
小文字の`see'で始まる参照を印刷されたマニュアルに作成します．カッコ内の
みで使用します．句読点を使用してコマンドを続けないでください．Info書式化
コマンドは，必要な場合は自動的に終りの句読点を挿入します．最初の引数のみ
必要です．@xref{pxref, , @code{@@pxref}}.@refill

@item @@questiondown@{@}
@c Generate an upside-down question mark.  @xref{Inserting Accents}.
@c 
上下逆の疑問符を生成します．@xref{Inserting Accents}.

@item @@quotation
@c Narrow the margins to indicate text that is quoted from another real
@c or imaginary work.  Write command on a line of its own.  Pair with
@c @code{@@end quotation}.  @xref{quotation, ,
@c @code{@@quotation}}.@refill
@c 
実際のまたは想像上の成果物からの引用のテキストを表示するため，マージンを
狭くします．コマンドは単独行で書いてください．@code{@@end quotation}と組
になります．@xref{quotation, , @code{@@quotation}}.@refill

@item @@r@{@var{text}@}
@c Print @var{text} in @r{roman} font.  No effect in Info.
@c @xref{Fonts}.@refill
@c 
@var{text}を@r{roman}フォントで出力します．Infoでは効果がありません．
@xref{Fonts}.@refill

@item @@raisesections
@c Change subsequent sections to chapters, subsections to sections, and so
@c on.  @xref{Raise/lower sections, , @code{@@raisesections} and
@c @code{@@lowersections}}.@refill
@c 
順番に，セクションを章に，サブセクションをセクション等のように，変更しま
す．@xref{Raise/lower sections, , @code{@@raisesections} and
@code{@@lowersections}}.@refill

@item @@ref@{@var{node-name}, [@var{entry}], [@var{topic-or-title}], [@var{info-file}], [@var{manual}]@}
@c Make a reference.  In a printed manual, the reference does not start
@c with a `See'.  Follow command with a punctuation mark.  Only the first
@c argument is mandatory.  @xref{ref, , @code{@@ref}}.@refill
@c 
参照を作成します．印刷されたマニュアルでは`See'で始まりません．コマンド
に句読点を続けてください．最初の引数のみ必要です．@xref{ref, ,
@code{@@ref}}.@refill

@item @@refill
@c In Info, refill and indent the paragraph after all the other processing
@c has been done.  No effect on @TeX{}, which always refills.  This command
@c is no longer needed, since all formatters now automatically refill.
@c @xref{Refilling Paragraphs}.@refill
@c 
Infoでは，他の処理が終った後の段落の補充と字下げが行われます．@TeX{}では
効果がなく，常に補充されます．このコマンドは，全てのフォーマッターが自動
的に補充するのでもはや不要です．@xref{Refilling Paragraphs}.@refill

@item @@result@{@}
@c Indicate the result of an expression to the reader with a special
@c glyph: @samp{@result{}}.  @xref{result, , @code{@@result}}.@refill
@c 
式の結果を特別なglyph @samp{@result{}}を用いて読者に示します．
@xref{result, , @code{@@result}}.@refill

@item @@ringaccent@{@var{c}@}
@c Generate a ring accent over the next character, as in @ringaccent{o}.
@c @xref{Inserting Accents}.
@c 
リングアクセントを，@ringaccent{o}のように次の文字の上に生成します．
@xref{Inserting Accents}.

@item @@samp@{@var{text}@}
@c Highlight @var{text} that is a literal example of a sequence of
@c characters.  Used for single characters, for statements, and often for
@c entire shell commands.  @xref{samp, , @code{@@samp}}.@refill
@c 
文字が並んでいる，リテラルの例となるテキストを強調します．宣言とシェルコ
マンド全体に対し単一の文字を使用してください．@xref{samp, ,
@code{@@samp}}.@refill

@item @@sc@{@var{text}@}
@c Set @var{text} in a printed output in @sc{the small caps font} and
@c set text in the Info file in uppercase letters.
@c @xref{Smallcaps}.@refill
@c 
印刷物で，@var{text}を@sc{the small caps font}に設定し，Infoファイルでは
大文字に@var{text}を設定します．@xref{Smallcaps}.@refill

@item @@section @var{title}
@c Begin a section within a chapter.  In a printed manual, the section
@c title is numbered and appears in the table of contents.  In Info, the
@c title is underlined with equal signs.  @xref{section, ,
@c @code{@@section}}.@refill
@c 
章の中でセクションを開始します．印刷されたマニュアルでは，セクションタイ
トルは番号が付き，目次に現れます．Infoでは，タイトルは等号で下線が引かれ
ます．@xref{section, , @code{@@section}}.@refill

@item @@set @var{flag} [@var{string}]
@c Make @var{flag} active, causing the Texinfo formatting commands to
@c format text between subsequent pairs of @code{@@ifset @var{flag}} and
@c @code{@@end ifset} commands.  Optionally, set value of @var{flag} to
@c @var{string}.
@c @xref{set clear value, , @code{@@set} @code{@@clear} @code{@@value}}.
@c 
@var{flag}をアクティブにし，Texinfo書式化コマンドは@code{@@ifset
@var{flag}}と@code{@@end ifset}コマンドの組の間のテキストを書式化します．
オプションで，@var{flag}の値を@var{string}に設定します．@xref{set clear
value, , @code{@@set} @code{@@clear} @code{@@value}}.

@item @@setchapternewpage @var{on-off-odd}
@c Specify whether chapters start on new pages, and if so, whether on
@c odd-numbered (right-hand) new pages.  @xref{setchapternewpage, ,
@c @code{@@setchapternewpage}}.
@c 
新しいページで章を開始する時，その場合は，偶数番号(右側)の新しいページを
指定します．@xref{setchapternewpage, , @code{@@setchapternewpage}}.

@item @@setcontentsaftertitlepage
@c Put the table of contents after the @samp{@@end titlepage} even if the
@c @code{@@contents} command is not there.  @xref{Contents}.
@c 
@code{@@contents}コマンドがない場合でも，目次を@samp{@@end titlepage}の
後に書きます．@xref{Contents}.

@item @@setfilename @var{info-file-name}
@c Provide a name to be used by the Info file.  This command is essential
@c for @TeX{} formatting as well, even though it produces no output.
@c @xref{setfilename, , @code{@@setfilename}}.
@c 
Infoファイルが使用する名前を提供します．このコマンドは出力を生成しません
が，@TeX{}の書式化でも必要です．@xref{setfilename, ,
@code{@@setfilename}}.

@item @@setshortcontentsaftertitlepage
@c Place the short table of contents after the @samp{@@end titlepage}
@c command even if the @code{@@shortcontents} command is not there.
@c @xref{Contents}.
@c 
短い目次を@samp{@@end titlepage}コマンドの後に，そこに
@code{@@shortcontents}コマンドがない場合でも生成します．@xref{Contents}.

@item @@settitle @var{title}
@c Provide a title for page headers in a printed manual, and the default
@c document description for HTML @samp{<head>}.
@c @xref{settitle, , @code{@@settitle}}.@refill
@c 
印刷されたマニュアルのページヘッダにタイトルと，HTMLの@samp{<head>}に対
してデフォルトのドキュメントの記述を提供します．@xref{settitle, ,
@code{@@settitle}}.@refill

@item @@shortcontents
@c Print a short table of contents.  Not relevant to Info, which uses
@c menus rather than tables of contents.  A synonym for
@c @code{@@summarycontents}.  @xref{Contents, , Generating a Table of
@c Contents}.@refill
@c 
短い目次を印刷します．Infoには関係なく，それは目次ではなくメニューを使用
するためです．@code{@@summarycontents}の同義語です．@xref{Contents, ,
Generating a Table of Contents}.@refill

@item @@shorttitlepage @var{title}
@c Generate a minimal title page.  @xref{titlepage,,@code{@@titlepage}}.
@c 
最小限のタイトルページを生成します．
@xref{titlepage,,@code{@@titlepage}}.

@item @@smallbook
@c Cause @TeX{} to produce a printed manual in a 7 by 9.25 inch format
@c rather than the regular 8.5 by 11 inch format.  @xref{smallbook, ,
@c Printing Small Books}.  Also, see @ref{small}.
@c 
@TeX{}は，印刷されたマニュアルを8.5x11インチではなく7x9.25インチで生成し
ます．@xref{smallbook, , Printing Small Books}.  また，@ref{small}も参
照してください．

@item @@smalldisplay
@c Begin a kind of example.  Like @code{@@smallexample} (narrow margins, no
@c filling), but do not select the fixed-width font.  Pair with @code{@@end
@c smalldisplay}.  @xref{small}.
@c 
例のようなものを開始します．@code{@@smallexample} (マージンを狭くし，補
充しない)に似ていますが，等幅フォントを選択しません．@code{@@end
smalldisplay}と対になります．@xref{small}.

@item @@smallexample
@c Indent text to indicate an example.  Do not fill, select fixed-width
@c font, narrow the margins.  In printed manuals, print text in a smaller
@c font than with @code{@@example}.  Pair with @code{@@end smallexample}.
@c @xref{small}.
@c 
例を示すためテキストを字下げします．補充せず，等幅フォントを選択し，マー
ジンを狭くします．印刷されたマニュアルでは，@code{@@example}より小さいフォ
ントを選択します．@code{@@end smallexample}と対なります．@xref{small}.

@item @@smallformat
@c Begin a kind of example.  Like @code{@@smalldisplay}, but do not narrow
@c the margins.  Pair with @code{@@end smallformat}.  @xref{small}.
@c 
例のようなものを開始します．@code{@@smalldisplay}に似ていますが，マージ
ンを狭くしません．@code{@@end smallformat}と対になります．@xref{small}.

@item @@smalllisp
@c Begin an example of Lisp code.  Same as @code{@@smallexample}.  Pair
@c with @code{@@end smalllisp}.  @xref{small}.
@c 
Lispコードの例を開始します．@code{@@smallexample}と同じです．@code{@@end
smalllisp}と対なります．@xref{small}.

@item @@sp @var{n}
@c Skip @var{n} blank lines.  @xref{sp, , @code{@@sp}}.@refill
@c 
@var{n}個の空白行を省略します．@xref{sp, , @code{@@sp}}.@refill

@item @@ss@{@}
@c Generate the German sharp-S es-zet letter, @ss{}.  @xref{Inserting Accents}.
@c 
ドイツのエスツェット文字@ss{}を生成します．@xref{Inserting Accents}.

@item @@strong @{@var{text}@}
@c Emphasize @var{text} by typesetting it in a @strong{bold} font for the
@c printed manual and by surrounding it with asterisks for Info.
@c @xref{emph & strong, , Emphasizing Text}.@refill
@c 
印刷されたマニュアルで，植字を@strong{ボールド}フォントで行ったり，Info
でアスタリスクを周りに置くことで@var{text}を強調します．@xref{emph &
strong, , Emphasizing Text}.@refill

@item @@subheading @var{title}
@c Print an unnumbered subsection-like heading in the text, but not in
@c the table of contents of a printed manual.  In Info, the title is
@c underlined with hyphens.  @xref{unnumberedsubsec appendixsubsec
@c subheading, , @code{@@unnumberedsubsec} @code{@@appendixsubsec}
@c @code{@@subheading}}.@refill
@c 
テキストに番号付けされていないセクションのような見出しを印刷しますが，印
刷されたマニュアルの目次には印刷しません．Infoでは，タイトルはハイフンで
下線が引かれます．@xref{unnumberedsubsec appendixsubsec subheading, ,
@code{@@unnumberedsubsec} @code{@@appendixsubsec}
@code{@@subheading}}.@refill

@item @@subsection @var{title}
@c Begin a subsection within a section.  In a printed manual, the
@c subsection title is numbered and appears in the table of contents.  In
@c Info, the title is underlined with hyphens.  @xref{subsection, ,
@c @code{@@subsection}}.@refill
@c 
セクション内でサブセクションを開始します．印刷されたマニュアルでは，サブ
セクションタイトルは番号付けされ，目次に現れます．Infoでは，タイトルはハ
イフンで下線が引かれます．@xref{subsection, ,
@code{@@subsection}}.@refill

@item @@subsubheading @var{title}
@c Print an unnumbered subsubsection-like heading in the text, but not in
@c the table of contents of a printed manual.  In Info, the title is
@c underlined with periods.  @xref{subsubsection, , The `subsub'
@c Commands}.@refill
@c 
テキストの番号付けされていないサブサブセクションのような見出しを印刷しま
すが，印刷されたマニュアルの目次には印刷されません．Infoでは，タイトルは
ピリオドで下線が引かれます．@xref{subsubsection, , The `subsub'
Commands}.@refill

@item @@subsubsection @var{title}
@c Begin a subsubsection within a subsection.  In a printed manual,
@c the subsubsection title is numbered and appears in the table of
@c contents.  In Info, the title is underlined with periods.
@c @xref{subsubsection, , The `subsub' Commands}.@refill
@c 
サブセクション内でサブサブセクションを開始します．印刷されたマニュアルで
は，サブサブセクションのタイトルは番号付けされ，目次に現れます．Infoでは，
タイトルはピリオドで下線が引かれます．@xref{subsubsection, , The
`subsub' Commands}.@refill

@item @@subtitle @var{title}
@c In a printed manual, set a subtitle in a normal sized font flush to
@c the right-hand side of the page.  Not relevant to Info, which does not
@c have title pages.  @xref{title subtitle author, , @code{@@title}
@c @code{@@subtitle} and @code{@@author} Commands}.@refill
@c 
印刷されたマニュアルでは，ページの右寄せで通常のフォントサイズでサブタイ
トルを設定します．Infoでは関係なく，それにはタイトルページが無いためです．
@xref{title subtitle author, , @code{@@title} @code{@@subtitle} and
@code{@@author} Commands}.@refill

@item @@summarycontents
@c Print a short table of contents.  Not relevant to Info, which uses
@c menus rather than tables of contents.  A synonym for
@c @code{@@shortcontents}.  @xref{Contents, , Generating a Table of
@c Contents}.@refill
@c 
短い目次を印刷します．Infoでは関係なく，それは目次の代わりにメニューを使
用するためです．@code{@@shortcontents}の同義語です．@xref{Contents, ,
Generating a Table of Contents}.@refill

@item @@syncodeindex @var{from-index} @var{into-index}
@c Merge the index named in the first argument into the index named in
@c the second argument, printing the entries from the first index in
@c @code{@@code} font.  @xref{Combining Indices}.@refill
@c 
最初の引数で指名された索引を，二番目の引数で指名された索引に統合し，最初
の索引から@code{@@code}フォントで項目を印刷します．@xref{Combining
Indices}.@refill

@item @@synindex @var{from-index} @var{into-index}
@c Merge the index named in the first argument into the index named in
@c the second argument.  Do not change the font of @var{from-index}
@c entries.  @xref{Combining Indices}.@refill
@c 
最初の引数で指名された索引を二番目の引数で指名された索引に統合します．
@var{from-index}項目のフォントは変更しません．@xref{Combining
Indices}.@refill

@item @@t@{@var{text}@}
@c Print @var{text} in a @t{fixed-width}, typewriter-like font.
@c No effect in Info.  @xref{Fonts}.@refill
@c 
@var{text}をタイプライターのような等幅フォントで印刷します．Infoには効果
がありません．@xref{Fonts}.@refill

@item @@tab
@c Separate columns in a multitable.  @xref{Multitable Rows}.
@c 
列を複数列の表に分割します．@xref{Multitable Rows}.

@item @@table @var{formatting-command}
@c Begin a two-column table, using @code{@@item} for each entry.  Write
@c each first column entry on the same line as @code{@@item}.  First
@c column entries are printed in the font resulting from
@c @var{formatting-command}.  Pair with @code{@@end table}.
@c @xref{Two-column Tables, , Making a Two-column Table}.
@c Also see @ref{ftable vtable, , @code{@@ftable} and @code{@@vtable}},
@c and @ref{itemx, , @code{@@itemx}}.@refill
@c 
二列の表を開始し，それぞれの項目に対し@code{@@item}を使用します．それぞ
れの最初の列の項目を@code{@@item}と同じ行に書いてください．最初の列の項
目は，@var{formatting-command}の結果と同じフォントで印刷されます．
@code{@@end table}と対になります．@xref{Two-column Tables, , Making a
Two-column Table}.  また，@ref{ftable vtable, , @code{@@ftable} and
@code{@@vtable}}と@ref{itemx, , @code{@@itemx}}を参照してください．
@refill

@item @@TeX@{@}
@c Insert the logo @TeX{}.  @xref{TeX and copyright, , Inserting @TeX{}
@c and @copyright{}}.@refill
@c 
ロゴ@TeX{}を挿入します．@xref{TeX and copyright, , Inserting @TeX{} and
@copyright{}}.@refill

@item @@tex
@c Enter @TeX{} completely.  Pair with @code{@@end tex}.  @xref{Raw
@c Formatter Commands}.
@c 
完全に@TeX{}モードに入ります．@code{@@end tex}と対になります．@xref{Raw
Formatter Commands}.

@item @@thischapter
@itemx @@thischaptername
@itemx @@thisfile
@itemx @@thispage
@itemx @@thistitle
@c Only allowed in a heading or footing.  Stands for the number and name of
@c the current chapter (in the format `Chapter 1: Title'), the chapter name
@c only, the filename, the current page number, and the title of the
@c document, respectively.  @xref{Custom Headings, , How to Make Your Own
@c Headings}.@refill
@c 
見出しとフッタのみで利用可能です．現在の章の番号と名前を意味し(書式は，
`Chapter 1: Title')，章の名前のみ，ファイル名，現在のページ番号とドキュ
メントのタイトルに，それぞれ対応します．@xref{Custom Headings, , How to
Make Your Own Headings}.@refill

@item @@tie@{@}
@c Generate a normal interword space at which a line break is not allowed.
@c @xref{tie,, @code{@@tie@{@}}}.
@c 
改行が生じではならない場所に，単語内に普通のスペースを生成します．
@xref{tie,, @code{@@tie@{@}}}.

@item @@tieaccent@{@var{cc}@}
@c Generate a tie-after accent over the next two characters @var{cc}, as in
@c `@tieaccent{oo}'.  @xref{Inserting Accents}.
@c 
タイアクセントを次の二文字@var{cc}の上に`@tieaccent{oo}'のように生成しま
す．@xref{Inserting Accents}.

@item @@tindex @var{entry}
@c Add @var{entry} to the index of data types.  @xref{Index Entries, ,
@c Defining the Entries of an Index}.@refill
@c 
@var{entry}をデータ型の索引に加えます．@xref{Index Entries, , Defining
the Entries of an Index}.@refill

@item @@title @var{title}
@c In a printed manual, set a title flush to the left-hand side of the
@c page in a larger than normal font and underline it with a black rule.
@c Not relevant to Info, which does not have title pages.  @xref{title
@c subtitle author, , The @code{@@title} @code{@@subtitle} and
@c @code{@@author} Commands}.@refill
@c 
印刷されたマニュアルでは，タイトルを，右寄せで通常フォントより大きいもの
で黒い罫線で下線を引き配置します．Infoには関係なく，それはタイトルページ
が無いためです．@xref{title subtitle author, , The @code{@@title}
@code{@@subtitle} and @code{@@author} Commands}.@refill

@item @@titlefont@{@var{text}@}
@c In a printed manual, print @var{text} in a larger than normal font.
@c Not relevant to Info, which does not have title pages.
@c @xref{titlefont center sp, , The @code{@@titlefont} @code{@@center}
@c and @code{@@sp} Commands}.@refill
@c 
印刷されたマニュアルで，@var{text}を通常フォントより大きなもので印刷しま
す．Infoでは関係なく，それにはタイトルページが無いためです．
@xref{titlefont center sp, , The @code{@@titlefont} @code{@@center} and
@code{@@sp} Commands}.@refill

@item @@titlepage
@c Indicate to Texinfo the beginning of the title page.  Write command on
@c a line of its own.  Pair with @code{@@end titlepage}.  Nothing between
@c @code{@@titlepage} and @code{@@end titlepage} appears in Info.
@c @xref{titlepage, , @code{@@titlepage}}.@refill
@c 
Texinfoのタイトルぺージの最初を示します．コマンドを単独行に書いてくださ
い．Infoでは，@code{@@titlepage}と@code{@@end titlepage}の間には何も現れ
ません．@xref{titlepage, , @code{@@titlepage}}.@refill

@item @@today@{@}
@c Insert the current date, in `1 Jan 1900' style.  @xref{Custom
@c Headings, , How to Make Your Own Headings}.@refill
@c 
現在の日付を`1 Jan 1900'の形式で挿入します．@xref{Custom Headings, , How
to Make Your Own Headings}.@refill

@item @@top @var{title}
@c In a Texinfo file to be formatted with @code{makeinfo}, identify the
@c topmost @code{@@node} in the file, which must be written on the line
@c immediately preceding the @code{@@top} command.  Used for
@c @code{makeinfo}'s node pointer insertion feature.  The title is
@c underlined with asterisks.  Both the @code{@@node} line and the @code{@@top}
@c line normally should be enclosed by @code{@@ifnottex} and @code{@@end
@c ifnottex}.  In @TeX{} and @code{texinfo-format-buffer}, the @code{@@top}
@c command is merely a synonym for @code{@@unnumbered}.  @xref{makeinfo
@c Pointer Creation, , Creating Pointers with @code{makeinfo}}.
@c 
@code{makeinfo}で書式化するInfoファイルで，ファイルの最上位の
@code{@@node}を識別するもので，ファイルの最上位の@code{@@node}は
@code{@@top}コマンドの直前の行に書く必要があります．@code{makeinfo}のノー
ドポインタの挿入機能に対して使用されます．タイトルはアスタリスクで下線が
引かれます．@code{@@node}行と@code{@@top}行は，通常はどちらも
@code{@@ifnottex}と@code{@@end ifnottex} で囲むべきです．@TeX{}と
@code{texinfo-format-buffer}で，@code{@@top}コマンドは
@code{@@unnumbered}と単なる同義語です．@xref{makeinfo Pointer Creation,
, Creating Pointers with @code{makeinfo}}.

@item @@u@{@var{c}@}
@itemx @@ubaraccent@{@var{c}@}
@itemx @@udotaccent@{@var{c}@}
@c Generate a breve, underbar, or underdot accent, respectively, over or
@c under the character @var{c}, as in @u{o}, @ubaraccent{o},
@c @udotaccent{o}.  @xref{Inserting Accents}.
@c 
文字@var{c}の上や下に，@u{o}，@ubaraccent{o}，@udotaccent{o}のように，ブ
レーブ，下線，または下ドットのアクセントを生成します．@xref{Inserting
Accents}.

@item @@unnumbered @var{title}
@c In a printed manual, begin a chapter that appears without chapter
@c numbers of any kind.  The title appears in the table of contents of a
@c printed manual.  In Info, the title is underlined with asterisks.
@c @xref{unnumbered & appendix, , @code{@@unnumbered} and
@c @code{@@appendix}}.@refill
@c 
印刷されたマニュアルで，章番号のない章を開始します．タイトルは印刷された
マニュアルの目次に現れます．Infoでは，タイトルはアスタリスクで下線が引か
れます．@xref{unnumbered & appendix, , @code{@@unnumbered} and
@code{@@appendix}}.@refill

@item @@unnumberedsec @var{title}
@c In a printed manual, begin a section that appears without section
@c numbers of any kind.  The title appears in the table of contents of a
@c printed manual.  In Info, the title is underlined with equal signs.
@c @xref{unnumberedsec appendixsec heading, , Section Commands}.@refill
@c 
印刷されたマニュアルで，セクション番号がないセクションを開始します．タイ
トルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルは等号で
下線が引かれます．@xref{unnumberedsec appendixsec heading, , Section
Commands}.@refill

@item @@unnumberedsubsec @var{title}
@c In a printed manual, begin an unnumbered subsection within a
@c chapter.  The title appears in the table of contents of a printed
@c manual.  In Info, the title is underlined with hyphens.
@c @xref{unnumberedsubsec appendixsubsec subheading, ,
@c @code{@@unnumberedsubsec} @code{@@appendixsubsec}
@c @code{@@subheading}}.@refill
@c 
印刷されたマニュアルで，章の中に番号が無いサブセクションを開始します．タ
イトルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルはハイ
フンで下線が引かれます．@xref{unnumberedsubsec appendixsubsec
subheading, , @code{@@unnumberedsubsec} @code{@@appendixsubsec}
@code{@@subheading}}.@refill

@item @@unnumberedsubsubsec @var{title}
@c In a printed manual, begin an unnumbered subsubsection within a
@c chapter.  The title appears in the table of contents of a printed
@c manual.  In Info, the title is underlined with periods.
@c @xref{subsubsection, , The `subsub' Commands}.@refill
@c 
印刷されたマニュアルで，章の中に番号が無いサブサブセクションを開始します．
タイトルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルはピ
リオドで下線が引かれます．@xref{subsubsection, , The `subsub'
Commands}.@refill

@item @@uref@{@var{url}[, @var{displayed-text}][, @var{replacement}@}
@c Define a cross reference to an external uniform resource locator for the
@c World Wide Web.  @xref{uref, , @code{@@uref}}.@refill
@c 
相互参照を外部のワールドワイドウェブのユニフォームリソースロケータに定義
します．@xref{uref, , @code{@@uref}}.@refill

@item @@url@{@var{url}@}
@c Indicate text that is a uniform resource locator for the World Wide
@c Web.  @xref{url, , @code{@@url}}.@refill
@c 
ワールドワイドウェブのユニフォームリソースロケータとなるテキストを示しま
す．@xref{url, , @code{@@url}}.@refill

@item @@v@{@var{c}@}
@c Generate check accent over the character @var{c}, as in @v{o}.
@c @xref{Inserting Accents}.
@c 
文字@var{c}の上に@v{o}のようにチェックアクセントを生成します．
@xref{Inserting Accents}.

@item @@value@{@var{flag}@}
@c Replace @var{flag} with the value to which it is set by @code{@@set
@c @var{flag}}.
@c @xref{set clear value, , @code{@@set} @code{@@clear} @code{@@value}}.@refill
@c 
@var{flag}を@code{@@set @var{flag}}で設定された値で置換します．@xref{set
clear value, , @code{@@set} @code{@@clear} @code{@@value}}.@refill

@item @@var@{@var{metasyntactic-variable}@}
@c Highlight a metasyntactic variable, which is something that stands for
@c another piece of text.  @xref{var, , Indicating Metasyntactic
@c Variables}.@refill
@c 
それはもう一つのテキストの一部を示すメタ構文の変数を強調します．
@xref{var, , Indicating Metasyntactic Variables}.@refill

@item @@verb@{@var{delim} @var{literal} @var{delim}@}
@c Output @var{literal}, delimited by the single character @var{delim},
@c exactly as is (in the fixed-width font), including any whitespace or
@c Texinfo special characters.  @xref{verb,,@code{verb}}.
@c 
単一の文字@var{delim}で分離されている@var{literal}を，空白やTexinfoの特
殊文字が含めて，正確にそのまま(固定幅フォントで)出力します．
@xref{verb,,@code{verb}}.

@item @@verbatim
@c Output the text of the environment exactly as is (in the fixed-width
@c font).  Pair with @code{@@end verbatim}.  @xref{verbatim,,@code{verbatim}}.
@c 
囲まれているテキストをそのまま(固定幅フォントで)出力します．@code{@@end
verbatim}と対になります．@xref{verbatim,,@code{verbatim}}.

@item @@verbatiminclude @var{filename}
@c Output the contents of @var{filename} exactly as is (in the fixed-width font).
@c @xref{verbatiminclude,,@code{verbatiminclude}}.
@c 
@var{filename}の内容をそのまま(固定幅フォントで)出力します．
@xref{verbatiminclude,,@code{verbatiminclude}}.

@item @@vindex @var{entry}
@c Add @var{entry} to the index of variables.  @xref{Index Entries, ,
@c Defining the Entries of an Index}.@refill
@c 
@var{entry}を変数の索引に追加します．@xref{Index Entries, , Defining the
Entries of an Index}.@refill

@item @@vskip @var{amount}
@c In a printed manual, insert whitespace so as to push text on the
@c remainder of the page towards the bottom of the page.  Used in
@c formatting the copyright page with the argument @samp{0pt plus
@c 1filll}.  (Note spelling of @samp{filll}.)  @code{@@vskip} may be used
@c only in contexts ignored for Info.  @xref{Copyright}.
@c 
印刷されたマニュアルに，ページの残りのテキストをページの底まで押しやるよ
うな空白を挿入します．@samp{0pt plus 1filll}のような引数を使用して，著作
権のページの書式化に使用します．(@samp{filll}の綴に注意してください．)
@code{@@vskip}はInfoが無視する文だけで使用してもかまいません．
@xref{Copyright}.

@item @@vtable @var{formatting-command}
@c Begin a two-column table, using @code{@@item} for each entry.
@c Automatically enter each of the items in the first column into the
@c index of variables.  Pair with @code{@@end vtable}.  The same as
@c @code{@@table}, except for indexing.  @xref{ftable vtable, ,
@c @code{@@ftable} and @code{@@vtable}}.@refill
@c 
二列の表を開始し，それぞれの項目で@code{@@item}を使用します．最初の列の
それぞれの項目は，変数の索引に自動的に入ります．@code{@@end vtable}と対
になります．索引化以外@code{@@table}と同じです．@xref{ftable vtable, ,
@code{@@ftable} and @code{@@vtable}}.@refill

@item @@w@{@var{text}@}
@c Prevent @var{text} from being split across two lines.  Do not end a
@c paragraph that uses @code{@@w} with an @code{@@refill} command.
@c @xref{w, , @code{@@w}}.@refill
@c 
@var{text}が二行に分割されるのを妨げます．@code{@@refill}コマンドととも
にに@code{@@w}を使用して，段落を終了しないでください．@xref{w, ,
@code{@@w}}.@refill

@item @@xref@{@var{node-name}, [@var{entry}], [@var{topic-or-title}], [@var{info-file}], [@var{manual}]@}
@c Make a reference that starts with `See' in a printed manual.  Follow
@c command with a punctuation mark.  Only the first argument is
@c mandatory.  @xref{xref, , @code{@@xref}}.@refill
@c 
印刷されたマニュアルで，`See'で始まる参照を生成します．コマンドに句読点
を続けてください．最初の引数のみ必要です．@xref{xref, ,
@code{@@xref}}.@refill
@end table


@node Tips
@c @appendix Tips and Hints
@appendix 助言とヒント

@c Here are some tips for writing Texinfo documentation:@refill
@c 
Texinfoドキュメントを書くための助言として以下をあげます．@refill

@cindex Tips
@cindex Usage tips
@cindex Hints
@itemize @bullet
@item
@c Write in the present tense, not in the past or the future.
@c 
過去や未来ではなく，現在の時制で書いてください．

@item
@c Write actively!  For example, write ``We recommend that @dots{}'' rather
@c than ``It is recommended that @dots{}''.
@c 
積極的に書いてください！例えば，``それは推奨される@dots{}''より``我々は
推奨する@dots{}''と書いてください．

@item
@c Use 70 or 72 as your fill column.  Longer lines are hard to read.
@c 
段の補充は70または72を使用してください．長い行は読みにくいです．

@item
@c Include a copyright notice and copying permissions.
@c 
著作権の注意と著作権の許可を含めてください．
@end itemize

@c @subsubheading Index, Index, Index!
@subsubheading 索引，索引，索引！

@c Write many index entries, in different ways.
@c Readers like indices; they are helpful and convenient.
@c 
異なる方法で多くの索引項目を書いてください．読者は索引が好きです．それら
は役に立ち便利です．

@c Although it is easiest to write index entries as you write the body of
@c the text, some people prefer to write entries afterwards.  In either
@c case, write an entry before the paragraph to which it applies.  This
@c way, an index entry points to the first page of a paragraph that is
@c split across pages.
@c 
テキストの本体に書くように索引項目を書くのが最も簡単ですが，項目を後で書
くのを好む人もいます．どちらの場合でも，現れる段落の前に項目を書いてくだ
さい．この方法では，索引項目はページを跨ぐ段落の最初のページを示します．

@c Here are more hints we have found valuable:
@c 
我々が貴重だと分かったより多くのヒントには以下のものがあります．

@itemize @bullet
@item
@c Write each index entry differently, so each entry refers to a different
@c place in the document.
@c 
それぞれの項目が，ドキュメントの異なる場所を参照するように，それぞれの索
引項目を異なるように書いてください．

@item
@c Write index entries only where a topic is discussed significantly.  For
@c example, it is not useful to index ``debugging information'' in a
@c chapter on reporting bugs.  Someone who wants to know about debugging
@c information will certainly not find it in that chapter.
@c 
トピックが意味深く述べられているところにのみ，索引項目を書いてください．
例えば，バグレポートの章に``デバッグ情報''の索引があっても役に立ちません．
デバッグ情報を知りたい誰かは，きっとその章でそれを見つけられないでしょう．

@item
@c Consistently capitalize the first word of every concept index entry,
@c or else consistently use lower case.  Terse entries often call for
@c lower case; longer entries for capitalization.  Whichever case
@c convention you use, please use one or the other consistently!  Mixing
@c the two styles looks bad.
@c 
全ての概念の索引の索引項目の最初の単語を，一貫して大文字化するか，一貫し
て小文字を使用してください．簡潔な項目は小文字を要求します．長い項目は大
文字を要求します．大文字小文字のどちらを使用する場合でも，一貫して使用し
てください．二つの形式を混ぜると醜くなります．

@item
@c Always capitalize or use upper case for those words in an index for
@c which this is proper, such as names of countries or acronyms.  Always
@c use the appropriate case for case-sensitive names, such as those in C or
@c Lisp.
@c 
国や省略名のように，大文字化または大文字の使用が適切な場合は，索引の単語
に対し，常にそのようにしてください．CやLispのように大文字小文字の違いを
識別する名前に対し，適切なものを常に使用してください．

@item
@c Write the indexing commands that refer to a whole section immediately
@c after the section command, and write the indexing commands that refer to
@c a paragraph before that paragraph.
@c 
セクションコマンドの直後にセクション全体を参照する索引コマンドを書き，段
落の前に段落を参照する索引コマンドを書いてください．

@c In the example that follows, a blank line comes after the index
@c entry for ``Leaping'':
@c 
以下の例では，空白行が索引項目``Leaping''の後にあります．

@example
@group
@@section The Dog and the Fox
@@cindex Jumping, in general
@@cindex Leaping

@@cindex Dog, lazy, jumped over
@@cindex Lazy dog jumped over
@@cindex Fox, jumps over dog
@@cindex Quick fox jumps over dog
The quick brown fox jumps over the lazy dog.
@end group
@end example

@noindent
@c (Note that the example shows entries for the same concept that are
@c written in different ways---@samp{Lazy dog}, and @samp{Dog, lazy}---so
@c readers can look up the concept in different ways.)
@c 
(例で，同じ概念に対する項目を異なる方法で書いていることに注意してくださ
い --- @samp{Lazy dog}と@samp{Dog, lazy} --- それで読者は，異なる方法で
概念を見つけることが可能になります．)
@end itemize

@c @subsubheading Blank Lines
@subsubheading 空白行

@itemize @bullet
@item
@c Insert a blank line between a sectioning command and the first following
@c sentence or paragraph, or between the indexing commands associated with
@c the sectioning command and the first following sentence or paragraph, as
@c shown in the tip on indexing.  Otherwise, a formatter may fold title and
@c paragraph together.
@c 
セクションコマンドと最初に続く文や段落の間や，セクションコマンドに関連し
た索引コマンドと最初に続く文や段落の間に，索引のチップに書かれているよう
に空白行を挿入してください．そうしない場合，フォーマッタはタイトルと段落
を一緒にまとめるかもしれません．

@item
@c Always insert a blank line before an @code{@@table} command and after an
@c @code{@@end table} command; but never insert a blank line after an
@c @code{@@table} command or before an @code{@@end table} command.
@c 
@code{@@table}コマンドの前と@code{@@end table}コマンドの後に，空白行を常
に挿入してください．しかし，@code{@@table}コマンドの後と@code{@@end
table}コマンドの前には，空白行を決して挿入しないでください．

@need 1000
@c For example,
@c 
例えば，以下のようにします．

@example
@group
Types of fox:

@@table @@samp
@@item Quick
Jump over lazy dogs.
@end group

@group
@@item Brown
Also jump over lazy dogs.
@@end table

@end group
@group
@@noindent
On the other hand, @dots{}
@end group
@end example

@c Insert blank lines before and after @code{@@itemize} @dots{} @code{@@end
@c itemize} and @code{@@enumerate} @dots{} @code{@@end enumerate} in the
@c same way.
@c 
同じ方法で，@code{@@itemize} @dots{} @code{@@end itemize}の前後と，
@code{@@enumerate} @dots{} @code{@@end enumerate}の前後に空白行を挿入し
てください．
@end itemize

@c @subsubheading Complete Phrases
@subsubheading 完全なフレーズ

@c Complete phrases are easier to read than @dots{}
@c 
完全なフレーズは何よりも読み易く@enddots{}

@itemize @bullet
@item
@c Write entries in an itemized list as complete sentences; or at least, as
@c complete phrases.  Incomplete expressions @dots{} awkward @dots{} like
@c this.
@c 
完全な文として項目に分けられたリストを書いてください．または，少なくとも
完全なフレーズにしてください．不完全な表現@dots{}厄介です@dots{}は以下の
ようなものです．

@item
@c Write the prefatory sentence or phrase for a multi-item list or table as
@c a complete expression.  Do not write ``You can set:''; instead, write
@c ``You can set these variables:''.  The former expression sounds cut off.
@c 
複数の項目リストや表に対する前置きの文や文節は，完全な表現として書いてく
ださい．``You can set:''と書かないでください．代わりに``You can set
these variables:''と書いてください．前者の表現は切り離されているように感
じます．
@end itemize

@c @subsubheading Editions, Dates and Versions
@subsubheading エディション，日付と，バージョン

@c Include edition numbers, version numbers, and dates in the
@c @code{@@copying} text (for people reading the Texinfo file, and for the
@c legal copyright in the output files).  Then use @code{@@insertcopying}
@c in the @code{@@titlepage} section (for people reading the printed
@c output) and the Top node (for people reading the online output).
@c 
全てのマニュアルの三箇所に，エディションナンバー，バージョンナンバー，そ
して日付を，@code{@@copying}のテキストに含めてください(Texinfoファイルを
読む人のためと，出力ファイルの法的な著作権のためです)．そして，
@code{@@insertcopying}を@code{@@titlepage}セクション(印刷されたマニュア
ルを読む人のため)とTopノード(オンラインの出力を読む人のため)で使用してく
ださい．

@c It is easiest to do this using @code{@@set} and @code{@@value}.
@c @xref{value Example, , @code{@@value} Example}, and @ref{GNU Sample Texts}.
@c 
こうするためには，@code{@@set}と@code{@@value}を使用するのが最も簡単です．
@xref{value Example, , @code{@@value} Example}, and @ref{GNU Sample
Texts}.


@c @subsubheading Definition Commands
@subsubheading 定義コマンド

@c Definition commands are @code{@@deffn}, @code{@@defun},
@c @code{@@defmac}, and the like, and enable you to write descriptions in
@c a uniform format.@refill
@c 
定義コマンドは，@code{@@deffn}，@code{@@defun}，@code{@@defmac}とその同
類で，単一の書式で記述を書くことを可能にします．@refill

@itemize @bullet
@item
@c Write just one definition command for each entity you define with a
@c definition command.  The automatic indexing feature creates an index
@c entry that leads the reader to the definition.
@c 
定義コマンドで定義したそれぞれの構成要素に対し，定義コマンドを一つだけ書
いてください．自動的に索引を作成する機能によって，読者を定義に導く索引項
目を作成します．

@item
@c Use @code{@@table} @dots{} @code{@@end table} in an appendix that
@c contains a summary of functions, not @code{@@deffn} or other definition
@c commands.
@c 
@code{@@table} @dots{} @code{@@end table}を関数の概要を含む付録に使用し，
@code{@@deffn}や他の定義コマンドを使用しないでください．
@end itemize

@c @subsubheading Capitalization
@subsubheading 大文字化

@itemize @bullet
@item
@c Capitalize ``Texinfo''; it is a name.  Do not write the @samp{x} or
@c @samp{i} in upper case.
@c 
``Texinfo''を大文字化してください．それは名前です．@samp{x}や@samp{i}を
大文字で書かないでください．

@item
@c Capitalize ``Info''; it is a name.
@c 
``Info''を大文字化してください．それは名前です．

@item
@c Write @TeX{} using the @code{@@TeX@{@}} command.  Note the uppercase
@c @samp{T} and @samp{X}.  This command causes the formatters to
@c typeset the name according to the wishes of Donald Knuth, who wrote
@c @TeX{}.
@c 
@TeX{}は@code{@@TeX@{@}}コマンドを使用して書いてください．大文字の
@samp{T}と@samp{X}に注意してください．このコマンドは，@TeX{}を書いた
Donald Knuthに希望に従ってフォーマッタに植字させます．
@end itemize

@c @subsubheading Spaces
@subsubheading スペース

@c Do not use spaces to format a Texinfo file, except inside of
@c @code{@@example} @dots{} @code{@@end example} and similar commands.
@c 
@code{@@example} @dots{} @code{@@end example}と類似のコマンド内部以外で，
Texinfoファイルの書式化のためにスペースを使用しないでください．

@need 700
@c For example, @TeX{} fills the following:
@c 
例えば，@TeX{}は以下を補充します．

@example
@group
   @@kbd@{C-x v@}
   @@kbd@{M-x vc-next-action@}
@c       Perform the next logical operation
@c       on the version-controlled file
@c       corresponding to the current buffer.
@c 
      現在のバッファに対応する，
      バージョンで制御されたファイルで，
      次の論理オペレーションを実行する．
@end group
@end example

@need 950
@noindent
@c so it looks like this:
@c 
そのため以下のように見えます．

@iftex
@quotation
   @kbd{C-x v}
   @kbd{M-x vc-next-action}
@c       Perform the next logical operation on the version-controlled file
@c       corresponding to the current buffer.
@c 
      現在のバッファに対応する，バージョンで制御されたファイルで，
      次の論理オペレーションを実行する．
@end quotation
@end iftex
@ifinfo
@quotation
@c `C-x v' `M-x vc-next-action' Perform the next logical operation on the
@c version-controlled file corresponding to the current buffer.
@c 
`C-x v' `M-x vc-next-action' 現在のバッファに対応する，バージョンで制御
されたファイルで，次の論理オペレーションを実行する．
@end quotation
@end ifinfo

@noindent
@c In this case, the text should be formatted with
@c @code{@@table}, @code{@@item}, and @code{@@itemx}, to create a table.
@c 
この場合，テキストは，表を作成する@code{@@table}，@code{@@item}，そして
@code{@@itemx}で書式化するべきです．

@c @subsubheading @@code, @@samp, @@var, and @samp{---}
@subsubheading @@code，@@samp，@@var，そして@samp{---}

@itemize @bullet
@item
@c Use @code{@@code} around Lisp symbols, including command names.
@c For example,
@c 
コマンド名を含め，Lispシンボルの周りに@code{@@code}を使用してください．
例えば，以下のようにします．

@example
@c The main function is @@code@{vc-next-action@}, @dots{}
@c 
主な関数は@@code@{vc-next-action@}で，@dots{}
@end example

@item
@c Avoid putting letters such as @samp{s} immediately after an
@c @samp{@@code}.  Such letters look bad.
@c 
@samp{s}の様な文字を@samp{@@code}の直後に置くことを避けてください．その
ような文字は醜くなります．

@item
@c Use @code{@@var} around meta-variables.  Do not write angle brackets
@c around them.
@c 
メタ変数の周りに@code{@@var}を使用してください．それらの周りに，山カッコ
を書かないでください．

@item
@c Use three hyphens in a row, @samp{---}, to indicate a long dash.  @TeX{}
@c typesets these as a long dash and the Info formatters reduce three
@c hyphens to two.
@c 
長いダッシュ@samp{---}を示すため，続いている三つのハイフンを使用してくだ
さい．@TeX{}は，これらを長いダッシュとして植字し，Infoフォーマッタは，三
つのハイフンを二つに削減します．
@end itemize

@c @subsubheading Periods Outside of Quotes
@subsubheading 引用外部のピリオド

@c Place periods and other punctuation marks @emph{outside} of quotations,
@c unless the punctuation is part of the quotation.  This practice goes
@c against publishing conventions in the United States, but enables the
@c reader to distinguish between the contents of the quotation and the
@c whole passage.
@c 
句読点が引用の部分でない場合は，ピリオドとその他の句読点を引用の@emph{外
側}に置いてください．この実行は，合州国の出版の慣習に反しますが，読者は
引用の内容と文節全体との区別が可能となります．

@c For example, you should write the following sentence with the period
@c outside the end quotation marks:
@c 
例えば，終りの引用符の外側にピリオドを文に続けて書くべきです．

@example
Evidently, @samp{au} is an abbreviation for ``author''.
@end example

@noindent
@c since @samp{au} does @emph{not} serve as an  abbreviation for
@c @samp{author.} (with a period following the word).
@c 
@samp{au}は，@samp{author.}(単語に続くピリオドと一緒)の省略として提供さ
れて@emph{いません}．

@c @subsubheading Introducing New Terms
@subsubheading 新しい用語の紹介

@itemize @bullet
@item
@c Introduce new terms so that a reader who does not know them can
@c understand them from context; or write a definition for the term.
@c 
新しい用語を知らない読者が，それを内容から理解できるように紹介してくださ
い．または，用語の定義を書いてください．

@c For example, in the following, the terms ``check in'', ``register'' and
@c ``delta'' are all appearing for the first time; the example sentence should be
@c rewritten so they are understandable.
@c 
例えば，以下で用語``check in''，``register''，そして``delta''はすべて，
初めて現われます．例文を理解できるように書き換えるべきです．

@quotation
The major function assists you in checking in a file to your
version control system and registering successive sets of changes to
it as deltas.
@end quotation

@item
@c Use the @code{@@dfn} command around a word being introduced, to indicate
@c that the reader should not expect to know the meaning already, and
@c should expect to learn the meaning from this passage.
@c 
読者が既に意味を知っていることを期待すべきではなく，この文節から意味を学
ぶことを期待していることを示すため，@code{@@dfn}コマンドを紹介している単
語の周りに使用してください．
@end itemize

@c @subsubheading @@pxref

@c !!! maybe include this in the tips on pxref
@ignore
By the way, it is okay to use pxref with something else in front of
it within the parens, as long as the pxref is followed by the close
paren, and the material inside the parens is not part of a larger
sentence.  Also, you can use xref inside parens as part of a complete
sentence so long as you terminate the cross reference with punctuation.
@end ignore
@c Absolutely never use @code{@@pxref} except in the special context for
@c which it is designed: inside parentheses, with the closing parenthesis
@c following immediately after the closing brace.  One formatter
@c automatically inserts closing punctuation and the other does not.  This
@c means that the output looks right both in printed output and in an Info
@c file, but only when the command is used inside parentheses.
@c 
設計された特別な文脈(つまりカッコの中)以外で，@code{@@pxref}を絶対に使用
しないでください．カッコの内部で，閉じ弓カッコの直後に閉じカッコを使用し
ます．一つのフォーマッタは自動的に句読点を挿入し，もう一つはそうしません．
これは，印刷物とInfoファイルで出力は正しく見えますが，それはコマンドがカッ
コの中で使用されるときだけだということを意味します．

@c @subsubheading Invoking from a Shell
@subsubheading シェルからの呼び出し

@c You can invoke programs such as Emacs, GCC, and @code{gawk} from a
@c shell.  The documentation for each program should contain a section that
@c describes this.  Unfortunately, if the node names and titles for these
@c sections are all different, they are difficult for users to find.
@c 
Emacs，GCC，そして@code{gawk}のようなプログラムをシェルから呼び出すこと
が可能です．それぞれのプログラムのドキュメントには，このことを述べている
セクションを含むべきです．残念ながら，これらのセクションのノード名とタイ
トルが全く異なっている場合，ユーザがセクションを見つけるのは困難です．

@c So, there is a convention to name such sections with a phrase beginning
@c with the word `Invoking', as in `Invoking Emacs'; this way, users can
@c find the section easily.
@c 
そのため，そのようなセクションは，`Invoking Emacs'のように，単語
`Invoking'で始まる文節で命名するという慣習があります．この方法で，ユーザ
はセクションを簡単に見つけることが可能になります．@footnote{訳注:日本語
ではどうするべきかは知りません．}


@c @subsubheading ANSI C Syntax
@subsubheading ANSI Cの構文

@c When you use @code{@@example} to describe a C function's calling
@c conventions, use the ANSI C syntax, like this:@refill
@c 
C関数の呼び出しの慣習を記述するため@code{@@example}を使用するとき，以下
のようにANSI C構文を使用してください．

@example
void dld_init (char *@@var@{path@});
@end example

@noindent
@c And in the subsequent discussion, refer to the argument values by
@c writing the same argument names, again highlighted with
@c @code{@@var}.@refill
@c 
そしてそれに続く引数では，再び@code{@@var}で強調されている同じ引数名で引
数の値を参照してください．@refill

@need 800
@c Avoid the obsolete style that looks like this:@refill
@c 
以下のような，古いスタイルを避けてください．@refill

@example
#include <dld.h>

dld_init (path)
char *path;
@end example

@c Also, it is best to avoid writing @code{#include} above the
@c declaration just to indicate that the function is declared in a
@c header file.  The practice may give the misimpression that the
@c @code{#include} belongs near the declaration of the function.  Either
@c state explicitly which header file holds the declaration or, better
@c yet, name the header file used for a group of functions at the
@c beginning of the section that describes the functions.@refill
@c 
また，関数がヘッダファイルで宣言されていることを示すだけのため，宣言の上
に@code{#include}を書くことを避けるのが最善です．その方法では，関数宣言
の近くに@code{#include}があるという間違った印象を与えるかもしれません．
ヘッダファイルに宣言があることを明示的に宣言する，またはより良いものとし
て，関数を記述しているセクションの始めで，関数グループのために使用されて
いるヘッダファイルに名前をつけるかのどちらかにしてください．

@c @subsubheading Bad Examples
@subsubheading 悪い例

@c Here are several examples of bad writing to avoid:
@c 
避けるべき悪い書き方の例のいくつかは以下のようになります．

@c In this example, say, `` @dots{} you must @code{@@dfn}@{check
@c in@} the new version.''  That flows better.
@c 
この例で，`` @dots{} you must @code{@@dfn}@{check in@} the new
version.''と言っています．それで，より良くことが運びます．

@quotation
When you are done editing the file, you must perform a
@code{@@dfn}@{check in@}.
@end quotation

@c In the following example, say, ``@dots{} makes a unified interface such as VC
@c mode possible.''
@c 
以下の例では，``@dots{} makes a unified interface such as VC mode
possible.''と言っています．

@quotation
SCCS, RCS and other version-control systems all perform similar
functions in broadly similar ways (it is this resemblance which makes
a unified control mode like this possible).
@end quotation

@c And in this example, you should specify what `it' refers to:
@c 
そして，この例では，`it'が何を参照しているのか指定すべきです．

@quotation
If you are working with other people, it assists in coordinating
everyone's changes so they do not step on each other.
@end quotation

@c @subsubheading And Finally @dots{}
@subsubheading 終りに@dots{}

@itemize @bullet
@item
@c Pronounce @TeX{} as if the @samp{X} were a Greek `chi', as the last
@c sound in the name `Bach'.  But pronounce Texinfo as in `speck':
@c ``teckinfo''.
@c 
@samp{X}をギリシャの`chi'のように，名前`Bach'の最後の発音のように@TeX{} 
を発音してください．しかし，Texinfoは`speck'のように``teckinfo''と発音し
てください．

@item
@c Write notes for yourself at the very end of a Texinfo file after the
@c @code{@@bye}.  None of the formatters process text after the
@c @code{@@bye}; it is as if the text were within @code{@@ignore} @dots{}
@c @code{@@end ignore}.
@c 
@code{@@bye}の後のTexinfoファイルの終りに，独自の注釈を書いてください．
フォーマッタは@code{@@bye}の後のテキストを処理しません．それは，テキスト
が@code{@@ignore} @dots{} @code{@@end ignore}の内側にあるのと同じです．
@end itemize


@node Sample Texinfo Files
@c @appendix Sample Texinfo Files
@appendix Texinfoファイルの見本
@cindex Sample Texinfo files

@c The first example is from the first chapter (@pxref{Short Sample}),
@c given here in its entirety, without commentary.  The second
@c includes the full texts to be used in GNU manuals.
@c 
最初の例は，最初の章(@pxref{Short Sample})からのもので，以下はその全体を
コメント無しにしています．二番目は，GNUのマニュアルで使用される完全なテ
キストを含んでいます．

@menu
* Short Sample Texinfo File::   
* GNU Sample Texts::            
* Verbatim Copying License::            
* All-permissive Copying License::            
@end menu


@node Short Sample Texinfo File
@c @section Short Sample
@section 短い例
@cindex Sample Texinfo file, no comments

@c Here is a complete, short sample Texinfo file, without any commentary.
@c You can see this file, with comments, in the first chapter.  @xref{Short
@c Sample}.
@c 
コメントの無い完全なTexinfoファイルの短い見本は以下のようになります．最
初の章でコメント付きのこのファイルを見ることが可能です．@xref{Short
Sample}.

@c In a nutshell: The @command{makeinfo} program transforms a Texinfo
@c source file such as this into an Info file or HTML; and @TeX{} typesets
@c it for a printed manual.
@c 
概略:@command{makeinfo}プログラムは，以下のようなTexinfoソースファイルを
InfoファイルやHTMLファイルに変換します．そして，@TeX{}は印刷されたマニュ
アルに植字します．


@sp 1
@example
\input texinfo   @@c -*-texinfo-*-
@@c %**start of header
@@setfilename sample.info
@@settitle Sample Manual 1.0
@@c %**end of header

@@copying
This is a short example of a complete Texinfo file.

Copyright (C) 2002 Free Software Foundation, Inc.
@@end copying

@@titlepage
@@title Sample Title
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage

@@c Output the table of the contents at the beginning.
@@contents

@@ifnottex
@@node Top
@@top GNU Sample

@@insertcopying
@@end ifnottex

@@menu
* First Chapter::    The first chapter is the
                      only chapter in this sample.
* Index::            Complete index.
@@end menu


@@node First Chapter
@@chapter First Chapter

@@cindex chapter, first

This is the first chapter.
@@cindex index entry, another

Here is a numbered list.

@@enumerate
@@item
This is the first item.

@@item
This is the second item.
@@end enumerate


@@node Index
@@unnumbered Index

@@printindex cp

@@bye
@end example


@node GNU Sample Texts
@c @section GNU Sample Texts
@section GNUの見本のテキスト

@cindex GNU sample texts
@cindex Sample texts, GNU
@cindex Full texts, GNU

@c Following is a sample Texinfo document with the full texts that should
@c be used in GNU manuals.
@c 
以下はGNUマニュアルで使用されるべき完全なテキストを用いたTexinfoドキュメ
ントの見本です．

@c As well as the legal texts, it also serves as a practical example of how
@c many elements in a GNU system can affect the manual.  If you're not
@c familiar with all these different elements, don't worry.  They're not
@c required and a perfectly good manual can be written without them.
@c They're included here nonetheless because many manuals do (or could)
@c benefit from them.
@c 
法的なテキストと同様に，GNUシステムがマニュアルに影響を与える要素の数の
実際の例として提供しています．これら個別のすべての要素に慣れていなくても
心配しないでください．それらは要求されているわけではなく，完全な良いマニュ
アルではそれ無しで書かれているはずです．多くのマニュアルにはきっと(おそ
らく)利点となるので，それでも以下には含めています．

@c @xref{Short Sample}, for a minimal example of a Texinfo file.
@c @xref{Beginning a File}, for a full explanation of that minimal
@c example.
@c 
Texinfoファイルの最小限の例は@xref{Short Sample}.  最小限の例の完全な説
明は，@xref{Beginning a File}.

@c Here are some notes on the example:
@c 
以下は例の注意事項です．

@itemize @bullet
@item
@cindex $Id:
@cindex CVS $Id:
@cindex RCS $Id:
@cindex Documentation identification
@cindex Identification of documentation
@c The @samp{$Id:} comment is for the CVS (@pxref{Top,, Overview, cvs,
@c Concurrent Versions System}) or RCS (see rcsintro(1)) version control
@c systems, which expand it into a string such as:
@c 
@samp{$Id:}コメントは，CVSのため(@pxref{Top,, Overview, cvs, Concurrent
Versions System})，またはRCS(rcsintro(1)を参照してください)のバージョン
コントロールシステムのためで，それは以下のような文字列に展開されます．
@example
$Id: texinfo-ja.texi,v 1.1 2003/01/04 10:43:13 futoshi Exp $
@end example
@c (This is useful in all sources that use version control, not just manuals.)
@c You may wish to include the @samp{$Id:} comment in the @code{@@copying}
@c text, if you want a completely unambiguous reference to the
@c documentation version.
@c 
(これはマニュアルだけでなく，バージョンコントロールを使用するすべてのソー
スで役に立ちます．ドキュメントのバージョンを完全に明確に引用したい場合，
@code{@@copying}のテキストに@samp{$Id:}コメントを含めたいかもしれません．)

@item
@pindex automake@r{, and version info}
@vindex UPDATED @r{Automake variable}
@vindex VERSION @r{Automake variable}
@pindex time-stamp.el
@c The @file{version.texi} in the @code{@@include} command is maintained
@c automatically by Automake (@pxref{Top,, Introduction, automake, GNU
@c Automake}).  It sets the @samp{VERSION} and @samp{UPDATED} values used
@c elsewhere.  If your distribution doesn't use Automake, but you do use
@c Emacs, you may find the time-stamp.el package helpful (@pxref{Time
@c Stamps,,,emacs,The GNU Emacs Manual}).
@c 
@code{@@include}コマンドの@file{version.texi}は，Automakeで自動的に管理
されます(@pxref{Top,, Introduction, automake, GNU Automake})．それは，他
で使用されている@samp{VERSION}と@samp{UPDATED}の値を設定します．配布物で
Automakeを使用しておらず，Emacsは使用している場合，time-stamp.el パッケー
ジが役に立つことが分かるでしょう(@pxref{Time Stamps,,,emacs,The GNU
Emacs Manual})．

@item
@c The @code{@@syncodeindex} command reflects the recommendation to use
@c only one index where possible, to make it easier for readers to look up
@c index entries.
@c 
@code{@@syncodeindex}コマンドでは，読者が索引項目を探し易いようにするた
め，可能な場合は推奨されている一つの索引だけを使用するように考えます．

@item
@c The @code{@@dircategory} is for constructing the Info directory.
@c @xref{Installing Dir Entries}, which includes a variety of recommended
@c category names.
@c 
@code{@@dircategory}は，Infoディレクトリを構築するためのものです．推奨さ
れる様々なカテゴリの名前がある，@xref{Installing Dir Entries}.

@item
@c The `Invoking' node is a GNU standard to help users find the basic
@c information about command-line usage of a given program.  @xref{Manual
@c Structure Details,,,standards, GNU Coding Standards}.
@c 
`Invoking'ノードはGNUの標準で，該当するプログラムのコマンドラインの使用
方法についての基本的な情報を見つけたいユーザの役に立ちます．@xref{Manual
Structure Details,,,standards, GNU Coding Standards}.

@item
@cindex GNU Free Documentation License, including entire
@cindex Free Documentation License, including entire
@c It is best to include the entire GNU Free Documentation License in a GNU
@c manual, unless the manual is only a few pages long.  Of course this
@c sample is even shorter than that, but it includes the FDL anyway in
@c order to show one conventional way to do so.  The @file{fdl.texi} file
@c is available on the GNU machines and in the Texinfo and other GNU
@c source distributions.
@c 
マニュアルが数ページの長さでない限り，GNUのマニュアルにGNU Free
Documentation Licenseの項目を含めることは最善です．もちろんこの見本はそ
れより短いのですが，従来からそうしているためFDLを含めています．
@file{fdl.texi}ファイルは，GNUのマシン，Texinfo，そしてその他のGNUの配布
物で利用可能です．

@c The FDL provides for omitting itself under certain conditions, but in
@c that case the sample texts given here have to be modified.  @xref{GNU
@c Free Documentation License}.
@c 
FDLは，特定の条件の下でそれ自身を省略するために提供されていますが，その
場合，ここで与えられてテキストを編集する必要があります．@xref{GNU Free
Documentation License}.

@item
@c If your manual has invariant sections (again, see the license itself for
@c details), then don't forget to change the text here accordingly.
@c 
マニュアルに不変のセクションがある場合(もう一度，それ自身のライセンスを
詳細に見てください)，これに対応して変更することを忘れないでください．

@item
@c For documents that express your personal views, feelings or experiences,
@c it is more appropriate to use a license permitting only verbatim
@c copying, rather than the FDL.  @xref{Verbatim Copying License}.
@c 
個人的な見解，感情，または体験を表現するドキュメントに対しては，FDLでは
なく，文字通りそのままのコピーを許可するライセンスを使用する方が適切でしょ
う．@xref{Verbatim Copying License}.

@end itemize

@c Here is the sample document:
@c 
見本のドキュメントは以下のようになります．

@c We do the first part of this with @example instead of @verbatim
@c because the literal @setfilename and @include confuse Automake.  Argh.
@example
\input texinfo    @@c -*-texinfo-*-
@@comment $Id: texinfo-ja.texi,v 1.1 2003/01/04 10:43:13 futoshi Exp $
@@comment %**start of header
@@setfilename sample.info
@@include version.texi
@@settitle GNU Sample @@value@{VERSION@}
@@syncodeindex pg cp
@@comment %**end of header
@@copying
This manual is for GNU Sample
(version @@value@{VERSION@}, @@value@{UPDATED@}),
which is an example in the Texinfo documentation.

Copyright @@copyright@{@} 2002 Free Software Foundation, Inc.

@@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@@end quotation
@@end copying

@@dircategory Texinfo documentation system
@@direntry
* sample: (sample)Invoking sample.    
@@end direntry

@@titlepage
@@title GNU Sample
@@subtitle for version @@value@{VERSION@}, @@value@{UPDATED@}
@@author A.U. Thor (@@email@{bug-texinfo@@@@gnu.org@})
@@page
@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage

@@contents

@@ifnottex
@@node Top
@@top GNU Sample

@@insertcopying
@@end ifnottex

@@menu
* Invoking sample::
* Copying This Manual::
* Index::
@@end menu


@@node Invoking sample
@@chapter Invoking sample

@@pindex sample
@@cindex invoking @@command@{sample@}

This is a sample manual.  There is no sample program to
invoke, but if there was, you could see its basic usage
and command line options here.


@@node Copying This Manual
@@appendix Copying This Manual

@@menu
* GNU Free Documentation License::  License for copying this manual.
@@end menu

@@include fdl.texi


@@node Index
@@unnumbered Index

@@printindex cp

@@bye
@end example


@node Verbatim Copying License
@c @section Verbatim Copying License
@section 文字通りそのままのコピーライセンス

@cindex Verbatim copying license
@cindex License for verbatim copying

@c For software manuals and other documentation, it is important to use a
@c license permitting free redistribution and updating, so that when a free
@c program is changed, the documentation can be updated as well.
@c 
ソフトウェアのマニュアルとその他のドキュメントに対し，フリープログラムが
変更されたとき，ドキュメントも同様に更新することが可能になるように，自由
に再配布し更新する許可を与えるライセンスを使用することは重要です．

@c On the other hand, for documents that express your personal views,
@c feelings or experiences, it is more appropriate to use a license
@c permitting only verbatim copying.
@c 
言い替えると，個人的な見解，感情，そして経験を表現するドキュメントに対し
ては，文字通りそのままのコピーだけを許可するライセンスを使用する方がより
適切でしょう．

@c Here is sample text for such a license permitting verbatim copying only.
@c This is just the license text itself.  For a complete sample document,
@c see the previous sections.
@c 
字通りそのままのコピーだけを許可するようなライセンスの見本のテキストは以
下のようになります．これはライセンステキスト自身です．完全な見本のドキュ
メントは前のセクションを参照してください．

@verbatim
@copying
This document is a sample for allowing verbatim copying only.

Copyright @copyright{} 2002 Free Software Foundation, Inc.

@quotation
Permission is granted to make and distribute verbatim copies
of this entire document without royalty provided the
copyright notice and this permission notice are preserved.
@end quotation
@end copying
@end verbatim


@node All-permissive Copying License
@c @section All-permissive Copying License
@section 全く寛大なコピーライセンス

@cindex All-permissive copying license
@cindex License for all-permissive copying

@c For software manuals and other documentation, it is important to use a
@c license permitting free redistribution and updating, so that when a free
@c program is changed, the documentation can be updated as well.
@c 
ソフトウェアのマニュアルとその他のドキュメントに対し，フリープログラムが
変更されたとき，ドキュメントも同様に更新することが可能になるように，自由
に再配布し更新する許可を与えるライセンスを使用することは重要です．

@c On the other hand, for small supporting files, short manuals (under 300
@c lines long) and rough documentation (README files, INSTALL files, etc.),
@c the full FDL would be overkill.  They can use a simple all-permissive
@c license.
@c 
言い替えると，小さなサポートファイル，(300行以下の)短いマニュアル，そし
て(READMEファイル，INSTALLファイル等の)ラフなドキュメントに対しては，完
全なFDLは過剰でしょう．それらには単純にすべてを許可するライセンスを使用
することが可能です．

@c Here is sample text for such an all-permissive license.  This is just
@c the license text itself.  For a complete sample document, see the
@c previous sections.
@c 
すべてを許可するようなライセンスの見本のテキストは以下のようになります．
これはライセンステキスト自身です．完全な見本のドキュメントは前のセクショ
ンを参照してください．

@example
Copyright @copyright{} 2002 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end example


@node Include Files
@c @appendix Include Files
@appendix インクルードファイル
@cindex Include files

@c When @TeX{} or an Info formatting command sees an @code{@@include}
@c command in a Texinfo file, it processes the contents of the file named
@c by the command and incorporates them into the DVI or Info file being
@c created.  Index entries from the included file are incorporated into
@c the indices of the output file.
@c 
@TeX{}やInfo書式化コマンドが，Texinfoファイルの@code{@@include}コマンド
を見つけたとき，それはコマンドで名指しされたファイルの内容を処理し，作成
されているDVIやInfoファイルに組み入れます．インクルードファイルからの索
引項目は，出力ファイルの索引に組み入れられます．

@c Include files let you keep a single large document as a collection of
@c conveniently small parts.
@c 
インクルードファイルでは，便利な小さい部分の収集物として，単一な大きなド
キュメントを保持します．

@menu
* Using Include Files::         How to use the @code{@@include} command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                 menus when using included files.
* Include File Requirements::   What @code{texinfo-multiple-files-update} expects.
* Sample Include File::         A sample outer file with included files
                                 within it; and a sample included file.
* Include Files Evolution::     How use of the @code{@@include} command
                                 has changed over time.
@end menu

@node Using Include Files, texinfo-multiple-files-update, Include Files, Include Files
@c @section How to Use Include Files
@section インクルードファイルの使用方法
@findex include

@c To include another file within a Texinfo file, write the
@c @code{@@include} command at the beginning of a line and follow it on
@c the same line by the name of a file to be included.  For
@c example:@refill
@c 
他のファイルをTexinfoファイルにインクルードするため，@code{@@include}コ
マンドを行の最初に書き，同じ行にインクルードするファイル名を続けてくださ
い．例えば以下のようにします．@refill

@example
@@include buffers.texi
@end example

@c An included file should simply be a segment of text that you expect to
@c be included as is into the overall or @dfn{outer} Texinfo file; it
@c should not contain the standard beginning and end parts of a Texinfo
@c file.  In particular, you should not start an included file with a
@c line saying @samp{\input texinfo}; if you do, that phrase is inserted
@c into the output file as is.  Likewise, you should not end an included
@c file with an @code{@@bye} command; nothing after @code{@@bye} is
@c formatted.@refill
@c 
インクルードファイルは，単に，全体をインクルードするのを期待する，または，
@dfn{外部の(outer)}Texinfoファイルにあるテキストの一部にすべきです。それ
は，Texinfoファイルの標準的な始めと終りを含めるべきではありません．特に，
インクルードファイルを，@samp{\input texinfo}と述べている行から始めるべ
きではありません．そうする場合，その文節は出力ファイルにそのまま挿入され
ます．同様に，インクルードファイルを@code{@@bye}コマンドで終えるべきでは
ありません．@code{@@bye}以降は全く書式化されません．

@c In the past, you were required to write an @code{@@setfilename} line at the
@c beginning of an included file, but no longer.  Now, it does not matter
@c whether you write such a line.  If an @code{@@setfilename} line exists
@c in an included file, it is ignored.@refill
@c 
過去に，インクルードファイルの最初に@code{@@setfilename}行を書くことが要
求されていましたが，もはやそうでははありません．今では，そのような行を書
くかどうかは重要ではありません．@code{@@setfilename}行がインクルードファ
イルに存在する場合，それは無視されます．@refill

@c Conventionally, an included file begins with an @code{@@node} line that
@c is followed by an @code{@@chapter} line.  Each included file is one
@c chapter.  This makes it easy to use the regular node and menu creating
@c and updating commands to create the node pointers and menus within the
@c included file.  However, the simple Emacs node and menu creating and
@c updating commands do not work with multiple Texinfo files.  Thus you
@c cannot use these commands to fill in the `Next', `Previous', and `Up'
@c pointers of the @code{@@node} line that begins the included file.  Also,
@c you cannot use the regular commands to create a master menu for the
@c whole file.  Either you must insert the menus and the `Next',
@c `Previous', and `Up' pointers by hand, or you must use the GNU Emacs
@c Texinfo mode command, @code{texinfo-multiple-files-update}, that is
@c designed for @code{@@include} files.@refill
@c 
慣習的に，インクルードファイルは，@code{@@chapter}行が続く@code{@@node} 
行で始めます．それぞれのインクルードファイルは一つの章です．これで，通常
のノードとメニューを作成更新する，ノードポインタとメニューをインクルード
ファイルに作成するコマンドの使用が容易になります．しかし，単純なEmacsの
ノードとメニューを作成更新するコマンドは，複数のTexnfoファイルでは動作し
ません．このためそれらのコマンドを，インクルードファイルで始まる
@code{@@node}行の`Next'，`Previous'，そして`Up'ポインタを補充するために
使用することは不可能です．また，ファイル全体のマスターメニューを作成する
通常のコマンドも使用不可能です．メニューと`Next'，`Previous'，そして`Up' 
ポインタを手で挿入するか，GNU Emacs Texinfoモードのコマンド，
@code{texinfo-multiple-files-update}を使用する必要があり，それは
@code{@@include}ファイルに対し設計されています．@refill

@node texinfo-multiple-files-update, Include File Requirements, Using Include Files, Include Files
@section @code{texinfo-multiple-files-update}
@findex texinfo-multiple-files-update

@c GNU Emacs Texinfo mode provides the @code{texinfo-multiple-files-update}
@c command.  This command creates or updates `Next', `Previous', and `Up'
@c pointers of included files as well as those in the outer or overall
@c Texinfo file, and it creates or updates a main menu in the outer file.
@c Depending whether you call it with optional arguments, the command
@c updates only the pointers in the first @code{@@node} line of the
@c included files or all of them:@refill
@c 
GNU Emacs Texinfoモードは，@code{texinfo-multiple-files-update}コマンド
を提供しています．このコマンドは，インクルードファイルの`Next'，
`Previous'，そして`Up'ポインタを，外部や全体的なTexinfoファイルに対する
ものと同様に作成更新し，それは外部ファイルのメインメニューを作成更新しま
す．オプションの引数での呼び出しに依存して，コマンドはインクルードファイ
ルやそれら全ての最初の@code{@@node}行のポインタのみを更新します．@refill

@table @kbd
@item M-x texinfo-multiple-files-update
@c Called without any arguments:@refill
@c 
引数無しでの呼び出し．@refill

@itemize @minus
@item
@c Create or update the `Next', `Previous', and `Up' pointers of the
@c first @code{@@node} line in each file included in an outer or overall
@c Texinfo file.@refill
@c 
外部や全体的なTexnfoファイルでインクルードされる，それぞれのファイルの最
初の@code{@@node}行の，`Next'，`Previous'，そして`Up'ポインタの作成と更
新．@refill

@item
@c Create or update the `Top' level node pointers of the outer or
@c overall file.@refill
@c 
外部や全体的なファイルの`Top'レベルのノードポインタの作成と更新．@refill

@item
@c Create or update a main menu in the outer file.@refill
@c 
外部ファイルのメインメニューの作成と更新．@refill
@end itemize

@item C-u M-x texinfo-multiple-files-update
@c Called with @kbd{C-u} as a prefix argument:
@c 
前置引数として@kbd{C-u}で呼び出し．

@itemize @minus{}
@item
@c Create or update pointers in the first @code{@@node} line in each
@c included file.
@c 
それぞれのインクルードファイルの，最初の@code{@@node}行のポインタの作成
と更新．

@item
@c Create or update the `Top' level node pointers of the outer file.
@c 
外部ファイルの`Top'レベルノードポインタの作成と更新．

@item
@c Create and insert a master menu in the outer file.  The master menu
@c is made from all the menus in all the included files.@refill
@c 
外部ファイルのマスターメニューの作成と挿入．マスターメニューは，全てのイ
ンクルードファイルの全てのメニューから作成されます．@refill
@end itemize

@item C-u 8 M-x texinfo-multiple-files-update
@c Called with a numeric prefix argument, such as @kbd{C-u 8}:
@c 
@kbd{C-u 8}のような，数字の引数での呼び出し．

@itemize @minus
@item
@c Create or update @strong{all} the `Next', `Previous', and `Up' pointers
@c of all the included files.@refill
@c 
全てのインクルードファイルの，@strong{全ての}，`Next'，`Previous'，そし
て`Up'ポインタの作成と更新．@refill

@item
@c Create or update @strong{all} the menus of all the included
@c files.@refill
@c 
全てのインクルードファイルの@strong{全ての}メニューの作成と更新．
@refill

@item
@c Create or update the `Top' level node pointers of the outer or
@c overall file.@refill
@c 
外部や全体的なファイルの`Top'レベルノードポインタの作成と更新．@refill

@item
@c And then create a master menu in the outer file.  This is similar to
@c invoking @code{texinfo-master-menu} with an argument when you are
@c working with just one file.@refill
@c 
外部ファイルのマスターメニューの作成．これは，一つのファイルでの引数を持
つ@code{texinfo-master-menu}の呼び出しに似ています．@refill
@end itemize
@end table

@c Note the use of the prefix argument in interactive use: with a regular
@c prefix argument, just @w{@kbd{C-u}}, the
@c @code{texinfo-multiple-files-update} command inserts a master menu;
@c with a numeric prefix argument, such as @kbd{C-u 8}, the command
@c updates @strong{every} pointer and menu in @strong{all} the files and then inserts a
@c master menu.@refill
@c 
対話的な使用での前置引数の使用時の注意:通常の前置引数@w{@kbd{C-u}}を用い
ると，@code{texinfo-multiple-files-update}コマンドはマスターメニューを挿
入します．@kbd{C-u 8}のような数字の前置引数を用いると，コマンドは
@strong{全ての}ファイルの@strong{全ての}ポインタとメニューを更新し，マス
ターメニューを更新します．@refill


@node Include File Requirements
@c @section Include File Requirements
@section インクルードファイルの必要条件
@cindex Include file requirements
@cindex Requirements for include files

@c If you plan to use the @code{texinfo-multiple-files-update} command,
@c the outer Texinfo file that lists included files within it should
@c contain nothing but the beginning and end parts of a Texinfo file, and
@c a number of @code{@@include} commands listing the included files.  It
@c should not even include indices, which should be listed in an included
@c file of their own.@refill
@c 
@code{texinfo-multiple-files-update}コマンドの使用を計画している場合，そ
の中でインクルードファイルをリストアップしている外部のTexinfoファイルは，
Texinfoファイルの最初と最後の部分と，インクルードファイルをリストアップ
している@code{@@include}コマンド以外，何も含めるべきではありません．それ
には索引さえ含めるべきではなく，それはインクルードファイル自身にリストアッ
プすべきです．

@c Moreover, each of the included files must contain exactly one highest
@c level node (conventionally, @code{@@chapter} or equivalent),
@c and this node must be the first node in the included file.
@c Furthermore, each of these highest level nodes in each included file
@c must be at the same hierarchical level in the file structure.
@c Usually, each is an @code{@@chapter}, an @code{@@appendix}, or an
@c @code{@@unnumbered} node.  Thus, normally, each included file contains
@c one, and only one, chapter or equivalent-level node.@refill
@c 
さらに，それぞれのインクルードファイルは，正確に一つの最上位のノード(慣
習的に，@code{@@chapter}またはそれと同等のもの)を含む必要があり，このノー
ドはインクルードファイルの最初のノードにする必要があります．さらに，それ
ぞれのインクルードファイルの中の，それぞれのこれらの最上位レベルのノード
は，ファイル構造で同じ階層レベルにする必要があります．通常，それぞれ
@code{@@chapter}，@code{@@appendix}，または@code{@@unnumbered}にします．
このため，それぞれのインクルードファイルは，一つのかつ唯一の，章や同等の
レベルのノードを含みます．@refill

@c The outer file should contain only @emph{one} node, the `Top' node.  It
@c should @emph{not} contain any nodes besides the single `Top' node.  The
@c @code{texinfo-multiple-files-update} command will not process
@c them.@refill
@c 
外部ファイルは@emph{一つの}ノード，`Top'ノードのみを含みます．それは，単
一の`Top'ノードの他の，あらゆるノードを含むべきではありません．
@code{texinfo-multiple-files-update}コマンドは，それらを処理しません．
@refill

@node Sample Include File, Include Files Evolution, Include File Requirements, Include Files
@c @section Sample File with @code{@@include}
@section @code{@@include}を用いたファイルの見本
@cindex Sample @code{@@include} file
@cindex Include file sample
@cindex @code{@@include} file sample

@c Here is an example of a complete outer Texinfo file with @code{@@include} files
@c within it before running @code{texinfo-multiple-files-update}, which
@c would insert a main or master menu:@refill
@c 
メインまたはマスターメニューを挿入する
@code{texinfo-multiple-files-update}を実行する前の，その中に
@code{@@include}ファイルを用いた外部のTexinfoファイルの完全な例は以下の
ようになります．@refill

@example
@group
\input texinfo @@c -*-texinfo-*-
@c %**start of header
@@setfilename  include-example.info
@@settitle Include Example
@c %**end of header
@end group

@group
@@setchapternewpage odd
@@titlepage
@@sp 12
@@center @@titlefont@{Include Example@}
@@sp 2
@@center by Whom Ever
@end group

@group
@@page
@@vskip 0pt plus 1filll
Copyright @@copyright@{@} 2002 Free Software Foundation, Inc.
@@end titlepage
@end group

@group
@@ifinfo
@@node Top, First, , (dir)
@@top Master Menu
@@end ifinfo
@end group

@group
@@include foo.texinfo
@@include bar.texinfo
@@include concept-index.texinfo
@end group

@group
@@summarycontents
@@contents

@@bye
@end group
@end example

@c An included file, such as @file{foo.texinfo}, might look like this:
@c 
@file{foo.texinfo}のようなインクルードファイルは，以下のようになります．

@example
@group
@@node First, Second, , Top
@@chapter First Chapter

Contents of first chapter @dots{}
@end group
@end example

@c The full contents of @file{concept-index.texinfo} might be as simple as this:
@c 
完全な内容の@file{concept-index.texinfo}は，このように簡単になります．

@example
@group
@@node Concept Index
@@unnumbered Concept Index

@@printindex cp
@end group
@end example

@c The outer Texinfo source file for @cite{The GNU Emacs Lisp Reference
@c Manual} is named @file{elisp.texi}.  This outer file contains a master
@c menu with 417 entries and a list of 41 @code{@@include}
@c files.@refill
@c 
@cite{The GNU Emacs Lisp Reference Manual}の外部のTexinfoソースファイル
は，@file{elisp.texi}という名前です．外部ファイルは，417項目の外部ファイ
ルと，41の@code{@@include}リストを含んでいます．@refill


@node Include Files Evolution
@c @section Evolution of Include Files
@section インクルードファイルの進化

@c When Info was first created, it was customary to create many small
@c Info files on one subject.  Each Info file was formatted from its own
@c Texinfo source file.  This custom meant that Emacs did not need to
@c make a large buffer to hold the whole of a large Info file when
@c someone wanted information; instead, Emacs allocated just enough
@c memory for the small Info file that contained the particular
@c information sought.  This way, Emacs could avoid wasting memory.@refill
@c 
Infoが最初に作成されたとき，それは一つのサブジェクトに多くの小さなInfoファ
イルを作成することが慣習的でした．それぞれのInfoファイルは，その独自の
Texinfoファイルから書式化されました．この慣習は，情報が欲しいとき，大き
なInfoファイル全体を保つためにEmacsが大きなバッファを作成する必要がない
ことを意味します．その代わり，探している特定の情報を含む小さなInfoファイ
ルに対して，Emacsはちょうど十分なメモリを確保していました．@refill

@c References from one file to another were made by referring to the file
@c name as well as the node name. (@xref{Other Info Files, , Referring to
@c Other Info Files}.  Also, see @ref{Four and Five Arguments, ,
@c @code{@@xref} with Four and Five Arguments}.)@refill
@c 
一つのファイルから他への参照は，ノード名同様，ファイル名で参照されていま
した．(@xref{Other Info Files, , Referring to Other Info Files}.  また，
@ref{Four and Five Arguments, , @code{@@xref} with Four and Five
Arguments}を参照してください．)@refill

@c Include files were designed primarily as a way to create a single,
@c large printed manual out of several smaller Info files.  In a printed
@c manual, all the references were within the same document, so @TeX{}
@c could automatically determine the references' page numbers.  The Info
@c formatting commands used include files only for creating joint
@c indices; each of the individual Texinfo files had to be formatted for
@c Info individually.  (Each, therefore, required its own
@c @code{@@setfilename} line.)@refill
@c 
インクルードファイルは主に，単一の大きな印刷されたマニュアルを，複数のよ
り小さなInfoファイルから作成する方法として設計されました．印刷されたマニュ
アルでは，全ての参照は同じドキュメントにあり，それで@TeX{}は自動的に参照
ページ数を決定可能でした．Info書式化コマンドは，つながった索引を作成する
ためのみにインクルードファイルを使用していました．それぞれの個別の
Texinfoファイルは，個別のInfoに書式化する必要がありました．(それゆえ，そ
れぞれ独自の@code{@@setfilename}行が必要でした．)@refill

@c However, because large Info files are now split automatically, it is
@c no longer necessary to keep them small.@refill
@c 
しかし，現在大きなファイルは自動的に分割されるので，それはもはや小さいま
まにする必要がありません．@refill

@c Nowadays, multiple Texinfo files are used mostly for large documents,
@c such as @cite{The GNU Emacs Lisp Reference Manual}, and for projects
@c in which several different people write different sections of a
@c document simultaneously.@refill
@c 
最近，複数のTexinfoファイルは，@cite{The GNU Emacs Lisp Reference
Manual}のような大きなドキュメントのためと，複数の異なる人々がドキュメン
トの異なるセクションを同時に書くプロジェクトのための使用がほとんどです．
@refill

@c In addition, the Info formatting commands have been extended to work
@c with the @code{@@include} command so as to create a single large Info
@c file that is split into smaller files if necessary.  This means that
@c you can write menus and cross references without naming the different
@c Texinfo files.@refill
@c 
さらにInfo書式化コマンドは，必要な場合より小さく分割される単一の大きな
Infoファイルを作成するため，@code{@@include}コマンドで動作するように拡張
されています．これは，異なるTexinfoファイルを名指しせずにメニューや相互
参照を書くことが可能だということを意味します．@refill


@node Headings
@c @appendix Page Headings
@appendix ページ見出し
@cindex Headings
@cindex Footings
@cindex Page numbering
@cindex Page headings
@cindex Formatting headings and footings

@c Most printed manuals contain headings along the top of every page
@c except the title and copyright pages.  Some manuals also contain
@c footings.  (Headings and footings have no meaning to Info, which is
@c not paginated.)@refill
@c 
ほとんどの印刷されたマニュアルには，タイトルと著作権のページ以外の全ての
ページの上側に見出しがあります．フッタを含むマニュアルもあります．(見出
しとフッタはInfoでは意味がなく，それにはページが付いていないためです．)
@refill

@menu
* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.
@end menu

@node Headings Introduced, Heading Format, Headings, Headings
@ifinfo
@heading Headings Introduced
@heading 見出しの導入
@end ifinfo

@c Texinfo provides standard page heading formats for manuals that are
@c printed on one side of each sheet of paper and for manuals that are
@c printed on both sides of the paper.  Typically, you will use these
@c formats, but you can specify your own format if you wish.@refill
@c 
Texinfoは，それぞれの紙の片側に印刷されるマニュアルと，紙の両面に印刷さ
れるマニュアルに対して，標準的なページ見出しの書式を提供しています．通常
はこれらの書式を使用しますが，希望があれば独自の書式を指定することも可能
です．@refill

@c In addition, you can specify whether chapters should begin on a new
@c page, or merely continue the same page as the previous chapter; and if
@c chapters begin on new pages, you can specify whether they must be
@c odd-numbered pages.@refill
@c 
更に，章を新しいページで始めるか，前の章と同じページに続けるかを指定する
ことが可能です．そして，章を新しいページで始める場合，奇数番号のページか
ら始めるように指定することが可能です．@refill

@c By convention, a book is printed on both sides of each sheet of paper.
@c When you open a book, the right-hand page is odd-numbered, and
@c chapters begin on right-hand pages---a preceding left-hand page is
@c left blank if necessary.  Reports, however, are often printed on just
@c one side of paper, and chapters begin on a fresh page immediately
@c following the end of the preceding chapter.  In short or informal
@c reports, chapters often do not begin on a new page at all, but are
@c separated from the preceding text by a small amount of whitespace.@refill
@c 
慣習的に，本は紙の両面に印刷されます．本を開いたときは，右側のページが奇
数番号で，章は右側のページから始まります --- 前にある左側のページは必要
があれば空白のままになります．しかし，報告書は片面に印刷され，前の章が終っ
た直後に改ページされて章を開始することが多くなっています．短い情報的な報
告書では，全く新しいページで章を開始すること滅多に無く，小量の空白をテキ
ストの前に置くことで分離されています．@refill

@c The @code{@@setchapternewpage} command controls whether chapters begin
@c on new pages, and whether one of the standard heading formats is used.
@c In addition, Texinfo has several heading and footing commands that you
@c can use to generate your own heading and footing formats.@refill
@c 
@code{@@setchapternewpage}コマンドで，章を新しいページで始めるかどうかと，
標準的な見出しの書式の一つを使用するかどうかを制御します．Texinfoには，
独自の見出しとフッタの書式を生成するために使用可能な見出しとフッタのコマ
ンドがいくつかあります．@refill

@c In Texinfo, headings and footings are single lines at the tops and
@c bottoms of pages; you cannot create multiline headings or footings.
@c Each header or footer line is divided into three parts: a left part, a
@c middle part, and a right part.  Any part, or a whole line, may be left
@c blank.  Text for the left part of a header or footer line is set
@c flushleft; text for the middle part is centered; and, text for the
@c right part is set flushright.@refill
@c 
Texinfoでは，見出しとフッタはページの上側と下側の単一行です．複数行の見
出しとフッタを作成することは不可能です．それぞれのヘッダとフッタ行は三つ
の部分に分けられます．左側の部分，真中の部分，そして右側の部分です．あら
ゆる部分または行全体は，空白のままにしてもかまいません．ヘッダとフッタ行
の左の部分にあたるテキストは左寄せになります．真中の部分のテキストは中央
揃えされます．そして右の部分のテキストは右寄せになります．@refill

@node Heading Format, Heading Choice, Headings Introduced, Headings
@comment  node-name,  next,  previous,  up
@c @section Standard Heading Formats
@section 標準的な見出しの書式

@c Texinfo provides two standard heading formats, one for manuals printed
@c on one side of each sheet of paper, and the other for manuals printed
@c on both sides of the paper.
@c 
Texinfoは二つの標準的な見出しの書式を提供していて，一つは紙のそれぞれの
ページの片面に印刷されたマニュアルに対するもので，もう一つは紙の両面に印
刷されたマニュアルに対するものです．

@c By default, nothing is specified for the footing of a Texinfo file,
@c so the footing remains blank.@refill
@c 
デフォルトではTexinfoファイルのフッタは指定されず，フッタは空白のままで
す．@refill

@c The standard format for single-sided printing consists of a header
@c line in which the left-hand part contains the name of the chapter, the
@c central part is blank, and the right-hand part contains the page
@c number.@refill
@c 
片面印刷の標準的な書式は，左側の部分に章の名前を含み，真中の部分が空白で，
右側の部分がページ番号となっているヘッダから成り立ちます．@refill

@need 950
@c A single-sided page looks like this:
@c 
片面ページは以下のようになります．

@example
@group
  _______________________
 |                       |
 | chapter   page number |
 |                       |
 | Start of text ...     |
 | ...                   |
 |                       |

@end group
@end example

@c The standard format for two-sided printing depends on whether the page
@c number is even or odd.  By convention, even-numbered pages are on the
@c left- and odd-numbered pages are on the right.  (@TeX{} will adjust the
@c widths of the left- and right-hand margins.  Usually, widths are
@c correct, but during double-sided printing, it is wise to check that
@c pages will bind properly---sometimes a printer will produce output in
@c which the even-numbered pages have a larger right-hand margin than the
@c odd-numbered pages.)@refill
@c 
両面印刷の標準的な書式はページ番号が偶数か奇数かに依存します．慣習では，
偶数番号のページは左側，奇数番号のページは右側になります．(@TeX{}は，左
右の余白の幅を調整します．通常は，その幅で正しいのですが，両面印刷のとき
はページが正しく結びつけられているか調べた方が良いでしょう --- プリンタ
によっては，奇数ページの余白より右側の余白が大きくなる偶数ページで出力を
生成するものもあります．)@refill

@c In the standard double-sided format, the left part of the left-hand
@c (even-numbered) page contains the page number, the central part is
@c blank, and the right part contains the title (specified by the
@c @code{@@settitle} command).  The left part of the right-hand
@c (odd-numbered) page contains the name of the chapter, the central part
@c is blank, and the right part contains the page number.@refill
@c 
標準的な両面の書式では，左側(偶数番号)のページの左側の部分はページ番号を
含み，真中の部分は空白で，右側の部分は(@code{@@settitle}コマンドで指定さ
れた)タイトルを含みます．右側(奇数番号)のページの左側の部分は章の名前を
含み，真中の部分は空白で，右側の部分はページ番号を含みます．@refill

@need 750
@c Two pages, side by side as in an open book, look like this:@refill
@c 
両側に開いた本の二ページは，以下のようになります．@refill

@example
@group
  _______________________     _______________________
 |                       |   |                       |
 | page number     title |   | chapter   page number |
 |                       |   |                       |
 | Start of text ...     |   | More  text ...        |
 | ...                   |   | ...                   |
 |                       |   |                       |

@end group
@end example

@noindent
@c The chapter name is preceded by the word ``Chapter'', the chapter number
@c and a colon.  This makes it easier to keep track of where you are in the
@c manual.@refill
@c 
章の名前は，単語``Chapter''@footnote{訳注:これは@file{txi-??.tex}で変更
可能です．}，章の番号，そしてコロンが前置されます．これで，マニュアルの
現在の場所を記録し追跡することがより簡単になります．@refill

@node Heading Choice, Custom Headings, Heading Format, Headings
@comment  node-name,  next,  previous,  up
@c @section Specifying the Type of Heading
@section 見出しの形式の指定

@c @TeX{} does not begin to generate page headings for a standard Texinfo
@c file until it reaches the @code{@@end titlepage} command.  Thus, the
@c title and copyright pages are not numbered.  The @code{@@end
@c titlepage} command causes @TeX{} to begin to generate page headings
@c according to a standard format specified by the
@c @code{@@setchapternewpage} command that precedes the
@c @code{@@titlepage} section.@refill
@c 
@TeX{}は，@code{@@end titlepage}コマンドに至るまで，標準的なTexinfoファ
イルに対しページ見出しの生成を開始しません．このため，タイトルと著作権の
ページは番号が付きません．@code{@@end titlepage}コマンドは，
@code{@@titlepage}セクションの前にある@code{@@setchapternewpage}コマンド
で指定された標準的な書式によって，@TeX{}にページ見出しの生成を開始させま
す．@refill

@need 1000
@c There are four possibilities:@refill
@c 
可能性は四つあります．@refill

@table @asis
@c @item No @code{@@setchapternewpage} command
@c Cause @TeX{} to specify the single-sided heading format, with chapters
@c on new pages. This is the same as @code{@@setchapternewpage on}.@refill
@c 
@item @code{@@setchapternewpage}コマンド無し
章を新しいページで開始する片面見出しの書式を@TeX{}に指定します．これは，
@code{@@setchapternewpage on}と同じです．@refill

@item @code{@@setchapternewpage on}
@c Specify the single-sided heading format, with chapters on new pages.@refill
@c 
章を新しいページで開始する片面見出しの書式を指定します．@refill

@item @code{@@setchapternewpage off}
@c Cause @TeX{} to start a new chapter on the same page as the last page of
@c the preceding chapter, after skipping some vertical whitespace.  Also
@c cause @TeX{} to typeset for single-sided printing.  (You can override
@c the headers format with the @code{@@headings double} command; see
@c @ref{headings on off, , The @code{@@headings} Command}.)@refill
@c 
新しい章を，前の章のページの最後と同じページで，いくらか縦方向の空白を開
けて@TeX{}が開始します．また，@TeX{}は片面ページで植字します．
(@code{@@headings double}コマンドでヘッダの書式を優先することが可能です．
@ref{headings on off, , The @code{@@headings} Command}を参照してください．)
@refill

@item @code{@@setchapternewpage odd}
@c Specify the double-sided heading format, with chapters on new pages.@refill
@c 
章を新しいページで開始する両面の書式を指定します．@refill
@end table

@noindent
@c Texinfo lacks an @code{@@setchapternewpage even} command.@refill
@c 
Texinfoには@code{@@setchapternewpage even}コマンドはありません．@refill

@node Custom Headings,  , Heading Choice, Headings
@comment  node-name,  next,  previous,  up
@c @section How to Make Your Own Headings
@section 独自の見出しの作成方法

@c You can use the standard headings provided with Texinfo or specify
@c your own.  By default, Texinfo has no footers, so if you specify them,
@c the available page size for the main text will be slightly reduced.
@c 
Texinfoで提供される標準的な見出しを使用したり，独自のものを指定したりす
ることが可能です．デフォルトではTexinfoにはフッタが無いので，指定した場
合，主なテキストに対して利用可能なページサイズがわずかに減少します．

@c Texinfo provides six commands for specifying headings and
@c footings:
@c 
Texinfoは見出しとフッタを指定する六つのコマンドを提供します．
@itemize @bullet
@item
@c @code{@@everyheading} @code{@@everyfooting} generate page headers and
@c footers that are the same for both even- and odd-numbered pages.
@c 
@code{@@everyheading}と@code{@@everyfooting}は，偶数と奇数の番号のページ
の両方に，同じページヘッダとフッタを生成します．
@item
@c @code{@@evenheading} and @code{@@evenfooting} command generate headers
@c and footers for even-numbered (left-hand) pages.
@c 
@code{@@evenheading}と@code{@@evenfooting}コマンドは，偶数番号(左側)のペー
ジにヘッダとフッタを生成します．
@item
@c @code{@@oddheading} and @code{@@oddfooting} generate headers and footers
@c for odd-numbered (right-hand) pages.
@c 
@code{@@oddheading}と@code{@@oddfooting}コマンドは，奇数番号(右側)のペー
ジにヘッダとフッタを生成します．
@end itemize

@c Write custom heading specifications in the Texinfo file immediately
@c after the @code{@@end titlepage} command.
@c You must cancel the predefined heading commands with the
@c @code{@@headings off} command before defining your own
@c specifications.@refill
@c 
Texinfoファイルの@code{@@end titlepage}コマンド直後に，カスタムの見出し
指定を書いてください．前もって定義している見出しコマンドを，独自の指定を
定義する前に@code{@@headings off}コマンドで中止する必要があります．
@refill

@need 1000
@c Here is how to tell @TeX{} to place the chapter name at the left, the
@c page number in the center, and the date at the right of every header
@c for both even- and odd-numbered pages:@refill
@c 
偶数と奇数の番号のページの両方の全てのヘッダに，章の名前を左側に，ページ
番号を真中に，日付を右側に置くように@TeX{}に伝える方法は以下のようになり
ます．@refill

@example
@group
@@headings off
@@everyheading @@thischapter @@| @@thispage @@| @@today@{@}
@end group
@end example

@noindent
@c You need to divide the left part from the central part and the central
@c part from the right part by inserting @samp{@@|} between parts.
@c Otherwise, the specification command will not be able to tell where
@c the text for one part ends and the next part begins.@refill
@c 
真中の部分と左の部分，そして右の部分と真中の部分を，部分同士の間に
@samp{@@|}を挿入して分離する必要があります．そうしない場合，指定コマンド
は，一つのテキストの終りの部分と次の始めの部分の位置を伝えることができま
せん．@refill

@c Each part can contain text or @@-commands.  The text
@c is printed as if the part were within an ordinary paragraph in the
@c body of the page.  The @@-commands replace
@c themselves with the page number, date, chapter name, or
@c whatever.@refill
@c 
それぞれの部分には，テキストや@@-コマンドを含めることが可能です．本体の
ページの，通常の段落にある部分のようにテキストは印刷されます．@@-コマン
ドはページ番号，日付，章の名前，または何にでも，それ自身が置換されます．
@refill

@need 950
@c Here are the six heading and footing commands:@refill
@c 
六つの見出しとフッタのコマンドには以下のものがあります．@refill

@findex everyheading
@findex everyfooting
@table @code
@item @@everyheading @var{left} @@| @var{center} @@| @var{right}
@itemx @@everyfooting @var{left} @@| @var{center} @@| @var{right}

@c The `every' commands specify the format for both even- and odd-numbered
@c pages.  These commands are for documents that are printed on one side
@c of each sheet of paper, or for documents in which you want symmetrical
@c headers or footers.@refill
@c 
`every'コマンドは，偶数と奇数の番号のページ両方の書式を指定します．これ
らのコマンドは，それぞれの紙の片面に印刷されるドキュメントや，対称なヘッ
ダとフッタにしたいドキュメントに対するものです．@refill

@findex evenheading
@findex evenfooting
@findex oddheading
@findex oddfooting
@item @@evenheading @var{left} @@| @var{center} @@| @var{right}
@itemx @@oddheading  @var{left} @@| @var{center} @@| @var{right}

@itemx @@evenfooting @var{left} @@| @var{center} @@| @var{right}
@itemx @@oddfooting  @var{left} @@| @var{center} @@| @var{right}

@c The `even' and `odd' commands specify the format for even-numbered
@c pages and odd-numbered pages.  These commands are for books and
@c manuals that are printed on both sides of each sheet of paper.
@c 
`even'と`odd'コマンドは，偶数番号のページと奇数番号のページの書式を指定
します．これらのコマンドは，本と，それぞれの紙の両面に印刷されるマニュア
ルに対するものです．
@end table

@c Use the @samp{@@this@dots{}} series of @@-commands to
@c provide the names of chapters
@c and sections and the page number.  You can use the
@c @samp{@@this@dots{}} commands in the left, center, or right portions
@c of headers and footers, or anywhere else in a Texinfo file so long as
@c they are between @code{@@iftex} and @code{@@end iftex} commands.@refill
@c 
章とセクションの名前とページ番号を供給するため，@samp{@@this@dots{}}シリー
ズの@@-コマンドを使用してください．見出しフッタの，左揃え，中央揃え，右
揃えの中や，@code{@@iftex}と@code{@@end iftex}コマンドの間の部分以外の
Texinfoファイルで，@samp{@@this@dots{}}コマンドを使用することも可能です．

@need 1000
@c Here are the @samp{@@this@dots{}} commands:@refill
@c 
@samp{@@this@dots{}}コマンドは以下のようになります．@refill

@table @code
@findex thispage
@item @@thispage
@c Expands to the current page number.@refill
@c 
現在のページ番号を展開します．@refill
@c !!! Karl Berry says that `thissection' can fail on page breaks.
@ignore
@item @@thissection
Expands to the name of the current section.@refill
@end ignore

@findex thischaptername
@item @@thischaptername
@c Expands to the name of the current chapter.@refill
@c 
現在の章の名前を展開します．@refill

@findex thischapter
@item @@thischapter
@c Expands to the number and name of the current
@c chapter, in the format `Chapter 1: Title'.@refill
@c 
現在の章の番号と名前を，書式`Chapter 1: Title'に展開します．@refill

@findex thistitle
@item @@thistitle
@c Expands to the name of the document, as specified by the
@c @code{@@settitle} command.@refill
@c 
ドキュメントの名前を@code{@@settitle}で指定されているものに展開します．
@refill

@findex thisfile
@item @@thisfile
@c For @code{@@include} files only: expands to the name of the current
@c @code{@@include} file.  If the current Texinfo source file is not an
@c @code{@@include} file, this command has no effect.  This command does
@c @emph{not} provide the name of the current Texinfo source file unless
@c it is an @code{@@include} file.  (@xref{Include Files}, for more
@c information about @code{@@include} files.)@refill
@c 
@code{@@include}ファイルに対してのみです．現在の@code{@@include}ファイル
の名前に展開します．現在のTexinfoソースファイルが@code{@@include}ファイ
ルではない場合，このコマンドには効果がありません．@code{@@include}ファイ
ルではない場合，このコマンドは現在のTexinfoソースファイルの名前を提供
@emph{しません}．( @code{@@include}ファイルの詳細は，@xref{Include
Files}.)@refill
@end table

@noindent
@c You can also use the @code{@@today@{@}} command, which expands to the
@c current date, in `1 Jan 1900' format.@refill
@c 
@code{@@today@{@}}コマンドも使用可能で，それは現在の日付を`1 Jan 1900'の
書式で展開します．@refill
@findex today

@c Other @@-commands and text are printed in a header or footer just as
@c if they were in the body of a page.  It is useful to incorporate text,
@c particularly when you are writing drafts:@refill
@c 
その他の@@-コマンドとテキストは，ページの本体に書かれているかのようにヘッ
ダとフッタに印刷されます．それは，特にドラフトを書いているとき，テキスト
を組み入れることに役立ちます．

@example
@group
@@headings off
@@everyheading @@emph@{Draft!@} @@| @@thispage @@| @@thischapter
@@everyfooting @@| @@| Version: 0.27: @@today@{@}
@end group
@end example

@c Beware of overlong titles: they may overlap another part of the
@c header or footer and blot it out.@refill
@c 
余りに長いタイトルへの注意: それらは他のヘッダやフッタの部分に重なり，隠
してしまう可能性があります．@refill


@node Catching Mistakes
@c @appendix Formatting Mistakes
@appendix 書式化の失敗
@cindex Structure, catching mistakes in
@cindex Nodes, catching mistakes
@cindex Catching mistakes
@cindex Correcting mistakes
@cindex Mistakes, catching
@cindex Problems, catching
@cindex Debugging the Texinfo structure

@c Besides mistakes in the content of your documentation, there are two
@c kinds of mistake you can make with Texinfo: you can make mistakes with
@c @@-commands, and you can make mistakes with the structure of the nodes
@c and chapters.
@c 
ドキュメントの内容のミス以外に，Texinfoで犯すミスは二種類あるはずです．
@@-コマンドでミスを犯し，ノードと章の構造でミスを犯します．

@c Emacs has two tools for catching the @@-command mistakes and two for
@c catching structuring mistakes.@refill
@c 
Emacsには@@-コマンドのミスを捕らえる二つのツールと，構造のミスを捕らえる
二つの方法があります．@refill

@c For finding problems with @@-commands, you can run @TeX{} or a region
@c formatting command on the region that has a problem; indeed, you can
@c run these commands on each region as you write it.@refill
@c 
@@-コマンドの問題を見つけるため，問題の有る領域で@TeX{}や領域の書式化コ
マンドを実行することが可能です．これらのコマンドを，書いているときにそれ
ぞれの領域で本当に実行することが可能です．@refill

@c For finding problems with the structure of nodes and chapters, you can use
@c @kbd{C-c C-s} (@code{texinfo-show-structure}) and the related @code{occur}
@c command and you can use the @kbd{M-x Info-validate} command.@refill
@c 
ノードと章の構造の問題を見つけるため，@kbd{C-c C-s}
(@code{texinfo-show-structure})に関連する@code{occur}コマンドを使用する
ことが可能で，そして，@kbd{M-x Info-validate}を使用することが可能です．
@refill

@menu
* makeinfo Preferred::          @code{makeinfo} finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with @TeX{} formatting.
* Using texinfo-show-structure::  How to use @code{texinfo-show-structure}.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.
@end menu

@node makeinfo Preferred, Debugging with Info, Catching Mistakes, Catching Mistakes
@ifinfo
@heading @code{makeinfo} Find Errors
@heading @code{makeinfo}が見つけるエラー
@end ifinfo

@c The @code{makeinfo} program does an excellent job of catching errors
@c and reporting them---far better than @code{texinfo-format-region} or
@c @code{texinfo-format-buffer}.  In addition, the various functions for
@c automatically creating and updating node pointers and menus remove
@c many opportunities for human error.@refill
@c 
@code{makeinfo}プログラムはエラーを捕らえそれらを報告する優れた仕事を行
います --- @code{texinfo-format-region}や@code{texinfo-format-buffer}よ
り遥かに優れています．さらに，自動的にノードポインタとメニューを作成更新
する様々な機能は，ヒューマンエラーの発生の多くを取り除きます．@refill

@c If you can, use the updating commands to create and insert pointers
@c and menus.  These prevent many errors.  Then use @code{makeinfo} (or
@c its Texinfo mode manifestations, @code{makeinfo-region} and
@c @code{makeinfo-buffer}) to format your file and check for other
@c errors.  This is the best way to work with Texinfo.  But if you
@c cannot use @code{makeinfo}, or your problem is very puzzling, then you
@c may want to use the tools described in this appendix.@refill
@c 
ポインタとメニューを作成したり挿入したりする更新コマンドを，できる限り使
用してください．そして，@code{makeinfo}(または，Texinfoモードの表現の
@code{makeinfo-region}と@code{makeinfo-buffer})を，ファイルを書式化した
り他のエラーを調べるために使用してください．これは，Texinfoで仕事をする
ための最善の方法です．しかし，@code{makeinfo}を使用できない，または，問
題が大変難問な場合，この付録で記述されているツールを使用したいと思うかも
しれません．@refill

@node Debugging with Info, Debugging with TeX, makeinfo Preferred, Catching Mistakes
@comment  node-name,  next,  previous,  up
@c @section Catching Errors with Info Formatting
@section Infoの書式化でエラーを捕らえる
@cindex Catching errors with Info formatting
@cindex Debugging with Info formatting

@c After you have written part of a Texinfo file, you can use the
@c @code{texinfo-format-region} or the @code{makeinfo-region} command to
@c see whether the region formats properly.@refill
@c 
Texinfoファイルの一部を書いた後，領域の書式化が正確かどうかを見るために，
@code{texinfo-format-region}や@code{makeinfo-region}コマンドを使用するこ
とが可能です．@refill

@c Most likely, however, you are reading this section because for some
@c reason you cannot use the @code{makeinfo-region} command; therefore, the
@c rest of this section presumes that you are using
@c @code{texinfo-format-region}.@refill
@c 
しかしほとんどの場合，とある理由で@code{makeinfo-region}コマンドが使えな
いためにこのセクションを読んでいることでしょう．それゆえ，このセクション
の残りは，@code{texinfo-format-region}の使用を想定します．@refill

@c If you have made a mistake with an @@-command,
@c @code{texinfo-format-region} will stop processing at or after the
@c error and display an error message.  To see where in the buffer the
@c error occurred, switch to the @samp{*Info Region*} buffer; the cursor
@c will be in a position that is after the location of the error.  Also,
@c the text will not be formatted after the place where the error
@c occurred (or more precisely, where it was detected).@refill
@c 
@@-コマンドでミスを犯した場合，@code{texinfo-format-region}はエラー時ま
たはその後で処理を停止し，エラーメッセージを表示します．エラーが発生した
バッファを見るために，@samp{*Info Region*}バッファに切替えてください．カー
ソルはエラーの位置の後にあります．また，エラーが発生した(または，より正
確にはそれが検出された)後，テキストは書式化されません．@refill

@c For example, if you accidentally end a menu with the command @code{@@end
@c menus} with an `s' on the end, instead of with @code{@@end menu}, you
@c will see an error message that says:@refill
@c 
例えば偶然，@code{@@end menu}の代わりに最後に`s'が付いたコマンド
@code{@@end menus}でメニューを終了した場合，以下のようなエラーメッセージ
を得るでしょう．@refill

@example
@@end menus is not handled by texinfo
@end example

@noindent
@c The cursor will stop at the point in the buffer where the error
@c occurs, or not long after it.  The buffer will look like this:@refill
@c 
カーソルはバッファ内の，エラーが発生した場所やそこからそう遠くない場所で
止まります．バッファは以下のようになります．@refill

@example
@group
---------- Buffer: *Info Region* ----------
* Menu:

* Using texinfo-show-structure::  How to use
                                 `texinfo-show-structure'
                                 to catch mistakes.
* Running Info-Validate::         How to check for
                                 unreferenced nodes.
@@end menus
@point{}
---------- Buffer: *Info Region* ----------
@end group
@end example

@c The @code{texinfo-format-region} command sometimes provides slightly
@c odd error messages.  For example, the following cross reference fails to format:@refill
@c 
@code{texinfo-format-region}コマンドは，ちょっと変わったエラーメッセージ
を提供することもあります．例えば，書式化で相互参照の追跡で失敗したとしま
す．@refill

@example
(@@xref@{Catching Mistakes, for more info.)
@end example

@noindent
@c In this case, @code{texinfo-format-region} detects the missing closing
@c brace but displays a message that says @samp{Unbalanced parentheses}
@c rather than @samp{Unbalanced braces}.  This is because the formatting
@c command looks for mismatches between braces as if they were
@c parentheses.@refill
@c 
この場合，@code{texinfo-format-region}は，足りない閉じカッコを検出してい
ますが，メッセージは，@samp{Unbalanced braces}ではなく@samp{Unbalanced
parentheses}になります．これは，書式化コマンドが弓カッコの不一致を，それ
があたかもカッコであるかのように探すためです．@refill

@c Sometimes @code{texinfo-format-region} fails to detect mistakes.  For
@c example, in the following, the closing brace is swapped with the
@c closing parenthesis:@refill
@c 
@code{texinfo-format-region}はミスの検出に失敗するときもあります．例えば，
以下では，閉じカッコと閉じ弓カッコが置き換わっています．@refill

@example
(@@xref@{Catching Mistakes), for more info.@}
@end example

@noindent
@c Formatting produces:
@c 
書式化では以下を生成します．
@example
(*Note for more info.: Catching Mistakes)
@end example

@c The only way for you to detect this error is to realize that the
@c reference should have looked like this:@refill
@c 
このエラーを検出する唯一の方法は，以下のように参照を実現することです．
@refill

@example
(*Note Catching Mistakes::, for more info.)
@end example

@c Incidentally, if you are reading this node in Info and type @kbd{f
@c @key{RET}} (@code{Info-follow-reference}), you will generate an error
@c message that says:
@c 
ついでに，Infoでこのノードを読んでいて，@kbd{f @key{RET}}
(@code{Info-follow-reference})を入力した場合，以下のエラーメッセージを生
成するでしょう．

@example
No such node: "Catching Mistakes) The only way @dots{}
@end example

@noindent
@c This is because Info perceives the example of the error as the first
@c cross reference in this node and if you type a @key{RET} immediately
@c after typing the Info @kbd{f} command, Info will attempt to go to the
@c referenced node.  If you type @kbd{f catch @key{TAB} @key{RET}}, Info
@c will complete the node name of the correctly written example and take
@c you to the `Catching Mistakes' node.  (If you try this, you can return
@c from the `Catching Mistakes' node by typing @kbd{l}
@c (@code{Info-last}).)
@c 
これは，Infoがエラーの例を，このノードの最初の相互参照として提供するため
で，Infoの@kbd{f}コマンドの直後に@key{RET}を入力した場合，Infoは参照ノー
ドに行こうと試みるでしょう．@kbd{f catch @key{TAB} @key{RET}}と入力した
場合，Infoは正確に書かれている例のノード名を認知し，`Catching Mistakes' 
ノードへ連れて行くでしょう．(これを試みる場合，@kbd{l}(@code{Info-last}) 
を入力し，`Catching Mistakes'に戻ることができます．)

@c !!! section on using Elisp debugger ignored.
@ignore
Sometimes @code{texinfo-format-region} will stop long after the
original error; this is because it does not discover the problem until
then.  In this case, you will need to backtrack.@refill

@c menu
@c * Using the Emacs Lisp Debugger::  How to use the Emacs Lisp debugger.
@c end menu

@c node Using the Emacs Lisp Debugger
@c appendixsubsec Using the Emacs Lisp Debugger
@c index Using the Emacs Lisp debugger
@c index Emacs Lisp debugger
@c index Debugger, using the Emacs Lisp

If an error is especially elusive, you can turn on the Emacs Lisp
debugger and look at the backtrace; this tells you where in the
@code{texinfo-format-region} function the problem occurred.  You can
turn on the debugger with the command:@refill

@example
M-x set-variable @key{RET} debug-on-error @key{RET} t @key{RET}
@end example

@noindent
and turn it off with

@example
M-x set-variable @key{RET} debug-on-error @key{RET} nil @key{RET}
@end example

Often, when you are using the debugger, it is easier to follow what is
going on if you use the Emacs Lisp files that are not byte-compiled.
The byte-compiled sources send octal numbers to the debugger that may
look mysterious.  To use the uncompiled source files, load
@file{texinfmt.el} and @file{texinfo.el} with the @kbd{M-x load-file}
command.@refill

The debugger will not catch an error if @code{texinfo-format-region}
does not detect one.  In the example shown above,
@code{texinfo-format-region} did not find the error when the whole
list was formatted, but only when part of the list was formatted.
When @code{texinfo-format-region} did not find an error, the debugger
did not find one either. @refill

However, when @code{texinfo-format-region} did report an error, it
invoked the debugger.  This is the backtrace it produced:@refill

@example
---------- Buffer: *Backtrace* ----------
Signalling: (search-failed "[@},]")
 re-search-forward("[@},]")
 (while ...)
 (let ...)
 texinfo-format-parse-args()
 (let ...)
 texinfo-format-xref()
 funcall(texinfo-format-xref)
 (if ...)
 (let ...)
 (if ...)
 (while ...)
 texinfo-format-scan()
 (save-excursion ...)
 (let ...)
 texinfo-format-region(103370 103631)
* call-interactively(texinfo-format-region)
---------- Buffer: *Backtrace* ----------
@end example

The backtrace is read from the bottom up.
@code{texinfo-format-region} was called interactively; and it, in
turn, called various functions, including @code{texinfo-format-scan},
@code{texinfo-format-xref} and @code{texinfo-format-parse-args}.
Inside the function @code{texinfo-format-parse-args}, the function
@code{re-search-forward} was called; it was this function that could
not find the missing right-hand brace.@refill

@xref{Lisp Debug, , Debugging Emacs Lisp, emacs, The GNU Emacs
Manual}, for more information.@refill
@end ignore

@node Debugging with TeX, Using texinfo-show-structure, Debugging with Info, Catching Mistakes
@comment  node-name,  next,  previous,  up
@c @section Catching Errors with @TeX{} Formatting
@section @TeX{}書式化でエラーを捕らえる
@cindex Catching errors with @TeX{} formatting
@cindex Debugging with @TeX{} formatting

@c You can also catch mistakes when you format a file with @TeX{}.@refill
@c 
@TeX{}でファイルを書式化しているときにミスを捕らえることも可能です．
@refill

@c Usually, you will want to do this after you have run
@c @code{texinfo-format-buffer} (or, better, @code{makeinfo-buffer}) on
@c the same file, because @code{texinfo-format-buffer} sometimes displays
@c error messages that make more sense than @TeX{}.  (@xref{Debugging
@c with Info}, for more information.)@refill
@c 
通常，@code{texinfo-format-buffer}は，@TeX{}より有意義なエラーメッセージ
を表示するときもあるので，同じファイルで@code{texinfo-format-buffer}(や，
それより良い@code{makeinfo-buffer})を実行後にこうしたいと思うことでしょ
う．(@xref{Debugging with Info}, for more information.)@refill

@c For example, @TeX{} was run on a Texinfo file, part of which is shown
@c here:@refill
@c 
例えば，Texinfoファイルで@TeX{}を実行した時の一部を以下に示します．
@refill

@example
---------- Buffer: texinfo.texi ----------
name of the Texinfo file as an extension.  The
@@samp@{??@} are `wildcards' that cause the shell to
substitute all the raw index files.  (@@xref@{sorting
indices, for more information about sorting
indices.)@@refill
---------- Buffer: texinfo.texi ----------
@end example

@noindent
@c (The cross reference lacks a closing brace.)
@c @TeX{} produced the following output, after which it stopped:@refill
@c 
(相互参照に閉じカッコがありません．)@TeX{}は停止した後，以下の出力を生成
します．@refill

@example
---------- Buffer: *tex-shell* ----------
Runaway argument?
@{sorting indices, for more information about sorting
indices.) @@refill @@ETC.
! Paragraph ended before @@xref was complete.
<to be read again>
                  @@par
l.27

?
---------- Buffer: *tex-shell* ----------
@end example

@c In this case, @TeX{} produced an accurate and
@c understandable error message:
@c 
この状況では，@TeX{}は正確で理解可能なエラーメッセージを生成しました．

@example
Paragraph ended before @@xref was complete.
@end example

@noindent
@c @samp{@@par} is an internal @TeX{} command of no relevance to Texinfo.
@c @samp{l.27} means that @TeX{} detected the problem on line 27 of the
@c Texinfo file.  The @samp{?} is the prompt @TeX{} uses in this
@c circumstance.@refill
@c 
@samp{@@par}は，Texinfoと関係が無い@TeX{}の内部コマンドです．@samp{l.27} 
は，@TeX{}が問題をTexinfoファイルの27行で検出したという意味です．
@samp{?}は，この状況で@TeX{}が使用するプロンプトです．@refill

@c Unfortunately, @TeX{} is not always so helpful, and sometimes you must
@c truly be a Sherlock Holmes to discover what went wrong.@refill
@c 
残念ながら@TeX{}は常に役に立つ訳ではなく，間違ったものを発見するために，
本当にシャーロック ホームズになる必要があります．@refill

@c In any case, if you run into a problem like this, you can do one of three
@c things.@refill
@c 
いずれにせよ，このような問題に遭遇した場合，三つのことを行うことが可能で
す．@refill

@enumerate
@item
@c You can tell @TeX{} to continue running and ignore just this error by
@c typing @key{RET} at the @samp{?} prompt.@refill
@c 
@samp{?}プロンプトで@key{RET}を入力することで，実行を続けこのエラーを無
視するよう@TeX{}に伝えることが可能です．@refill

@item
@c You can tell @TeX{} to continue running and to ignore all errors as best
@c it can by typing @kbd{r @key{RET}} at the @samp{?} prompt.@refill
@c 
@samp{?}プロンプトで@kbd{r @key{RET}}を入力することで，実行を続け，最善
の方法として全てのエラーを無視するよう@TeX{}に伝えることが可能です．
@refill

@c This is often the best thing to do.  However, beware: the one error
@c may produce a cascade of additional error messages as its consequences
@c are felt through the rest of the file.  To stop @TeX{} when it is
@c producing such an avalanche of error messages, type @kbd{C-c} (or
@c @kbd{C-c C-c}, if you are running a shell inside Emacs).
@c 
これは最善のことが多くなっています．しかし，用心してください．その結果が
ファイルの残り全体となるように考え，一つのエラーが更なるエラーメッセージ
として連続して生成される可能性が有ります．そのようなエラーメッセージの雪
崩を生成している時に@TeX{}を止めるため，@kbd{C-c}(または，Emacsの内部シェ
ルで実行している場合は@kbd{C-c C-c})を入力してください．

@item
@c You can tell @TeX{} to stop this run by typing @kbd{x @key{RET}}
@c at the @samp{?} prompt.@refill
@c 
@samp{?}プロンプトで@kbd{x @key{RET}}を入力することで，この実行を停止す
るよう@TeX{}に伝えることが可能です．@refill
@end enumerate

@c If you are running @TeX{} inside Emacs, you need to switch to the shell
@c buffer and line at which @TeX{} offers the @samp{?} prompt.
@c 
Emacs内部で@TeX{}を実行している場合，シェルバッファと@TeX{}が@samp{?}プ
ロンプトを出している行を切替える必要があります．

@c Sometimes @TeX{} will format a file without producing error messages even
@c though there is a problem.  This usually occurs if a command is not ended
@c but @TeX{} is able to continue processing anyhow.  For example, if you fail
@c to end an itemized list with the @code{@@end itemize} command, @TeX{} will
@c write a DVI file that you can print out.  The only error message that
@c @TeX{} will give you is the somewhat mysterious comment that@refill
@c 
@TeX{}は，問題があってもエラーメッセージを生成せずにファイルを書式化する
ときもあります．これは通常，コマンドが終っていないが@TeX{}は処理を続けら
れる場合に生じます．例えば，@code{@@end itemize}コマンドで項目分けリスト
を終了するのに失敗した場合，@TeX{}は印刷出力可能なDVIファイルを書き出し
ます．@TeX{}が与えるエラーメッセージは幾分不可思議な以下のようなコメント
だけです．@refill

@example
(@@end occurred inside a group at level 1)
@end example

@noindent
@c However, if you print the DVI file, you will find that the text
@c of the file that follows the itemized list is entirely indented as if
@c it were part of the last item in the itemized list.  The error message
@c is the way @TeX{} says that it expected to find an @code{@@end}
@c command somewhere in the file; but that it could not determine where
@c it was needed.@refill
@c 
しかし，DVIファイルを印刷した場合，項目分けリストに続くファイルのテキス
トが，項目分けリストの最後の項目の部分であるかのように全部字下げされてい
ることが分かります．エラーメッセージは，@TeX{}がファイルで@code{@@end} 
コマンドを見つかることを期待していたが，必要とされる場所を特定できなかっ
たということです．@refill

@c Another source of notoriously hard-to-find errors is a missing
@c @code{@@end group} command.  If you ever are stumped by
@c incomprehensible errors, look for a missing @code{@@end group} command
@c first.@refill
@c 
エラーが見つけにくいと悪名高いもう一つのソースは，@code{@@end group}コマ
ンドが無いことです．理解できないエラーで困惑している場合，最初に
@code{@@end group}コマンドが無いものを探してください．@refill

@c If the Texinfo file lacks header lines,
@c @TeX{} may stop in the
@c beginning of its run and display output that looks like the following.
@c The @samp{*} indicates that @TeX{} is waiting for input.@refill
@c 
Texinfoファイルにヘッダが足りない場合，@TeX{}は実行の最初で停止し，以下
のような出力を表示します．@samp{*}は@TeX{}が入力を待っていることを示して
います．@refill

@example
This is TeX, Version 3.14159 (Web2c 7.0)
(test.texinfo [1])
*
@end example

@noindent
@c In this case, simply type @kbd{\end @key{RET}} after the asterisk.  Then
@c write the header lines in the Texinfo file and run the @TeX{} command
@c again. (Note the use of the backslash, @samp{\}.  @TeX{} uses @samp{\}
@c instead of @samp{@@}; and in this circumstance, you are working
@c directly with @TeX{}, not with Texinfo.)@refill
@c 
この状況では，アスタリスクの後で@kbd{\end @key{RET}}を単純に入力してくだ
さい．そして，Texinfoファイルのヘッダ行を書き，もう一度@TeX{}コマンドを
実行してください．(バックスラッシュ@samp{\}の使用に注意してください．
@TeX{}は@samp{@@}の代わりに@samp{\}を使用します．そしてこの状況では，
Texinfoではなく直接@TeX{}で作業しているのです．)@refill

@node Using texinfo-show-structure, Using occur, Debugging with TeX, Catching Mistakes
@comment  node-name,  next,  previous,  up
@c @section Using @code{texinfo-show-structure}
@section @code{texinfo-show-structure}の使用
@cindex Showing the structure of a file
@findex texinfo-show-structure

@c It is not always easy to keep track of the nodes, chapters, sections, and
@c subsections of a Texinfo file.  This is especially true if you are revising
@c or adding to a Texinfo file that someone else has written.@refill
@c 
Texinfoファイルの，ノード，章，セクション，そしてサブセクションの記録追
跡は，常に簡単なわけではありません．これは，他人が書いたTexinfoファイル
を修正追加している場合は，特に真になります．@refill

@c In GNU Emacs, in Texinfo mode, the @code{texinfo-show-structure}
@c command lists all the lines that begin with the @@-commands that
@c specify the structure: @code{@@chapter}, @code{@@section},
@c @code{@@appendix}, and so on.  With an argument (@w{@kbd{C-u}}
@c as prefix argument, if interactive),
@c the command also shows the @code{@@node} lines.  The
@c @code{texinfo-show-structure} command is bound to @kbd{C-c C-s} in
@c Texinfo mode, by default.@refill
@c 
GNU EmacsのTexinfoモードでは，@code{texinfo-show-structure}コマンドは，
構造を指定する@@-コマンドで始まる全ての行をリストアップします．
@code{@@chapter}，@code{@@section}，@code{@@appendix}等です．引数(対話的
な場合は，前置引数@w{@kbd{C-u}})を用いることで，コマンドは@code{@@node} 
行も表示します．@code{texinfo-show-structure}コマンドは，Texinfoモードで
@kbd{C-c C-s}に，デフォルトでバインドされています．@refill

@c The lines are displayed in a buffer called the @samp{*Occur*} buffer,
@c indented by hierarchical level.  For example, here is a part of what was
@c produced by running @code{texinfo-show-structure} on this manual:@refill
@c 
行は，@samp{*Occur*}と呼ばれるバッファに，階層レベルで字下げされて表示さ
れます．例えば以下は，このマニュアルでの@code{texinfo-show-structure}を
実行したものが生成したものの一部になります．@refill

@example
@group
Lines matching "^@@\\(chapter \\|sect\\|subs\\|subh\\|
unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
in buffer texinfo.texi.
@dots{}
4177:@@chapter Nodes
4198:    @@heading Two Paths
4231:    @@section Node and Menu Illustration
4337:    @@section The @@code@{@@@@node@} Command
4393:        @@subheading Choosing Node and Pointer Names
4417:        @@subsection How to Write an @@code@{@@@@node@} Line
4469:        @@subsection @@code@{@@@@node@} Line Tips
@dots{}
@end group
@end example

@c This says that lines 4337, 4393, and 4417 of @file{texinfo.texi} begin
@c with the @code{@@section}, @code{@@subheading}, and @code{@@subsection}
@c commands respectively.  If you move your cursor into the @samp{*Occur*}
@c window, you can position the cursor over one of the lines and use the
@c @kbd{C-c C-c} command (@code{occur-mode-goto-occurrence}), to jump to
@c the corresponding spot in the Texinfo file.  @xref{Other Repeating
@c Search, , Using Occur, emacs, The GNU Emacs Manual}, for more
@c information about @code{occur-mode-goto-occurrence}.@refill
@c 
これは，@file{texinfo.txi}ファイルの4337，4393，そして4417行が，それぞれ
@code{@@section}，@code{@@subheading}，そして@code{@@subsection}で始まっ
ていることを告げています．カーソルを@samp{*Occur*}ウィンドウに移動した場
合，Texinfoファイルで対応する場所にジャンプするため，行の一つにカーソル
を置き，@kbd{C-c C-c}コマンド(@code{occur-mode-goto-occurrence})を使用す
ることで可能となります．@code{occur-mode-goto-occurrence}に関する詳細は，
@xref{Other Repeating Search, , Using Occur, emacs, The GNU Emacs
Manual}.@refill

@c The first line in the @samp{*Occur*} window describes the @dfn{regular
@c expression} specified by @var{texinfo-heading-pattern}.  This regular
@c expression is the pattern that @code{texinfo-show-structure} looks for.
@c @xref{Regexps, , Using Regular Expressions, emacs, The GNU Emacs Manual},
@c for more information.@refill
@c 
@samp{*Occur*}ウィンドウの最初の行は，@var{texinfo-heading-pattern}で指
定された@dfn{正規表現(regular expression)}の記述です．この正規表現は，
@code{texinfo-show-structure}が探すパターンです．詳細は，@xref{Regexps,
, Using Regular Expressions, emacs, The GNU Emacs Manual}.@refill

@c When you invoke the @code{texinfo-show-structure} command, Emacs will
@c display the structure of the whole buffer.  If you want to see the
@c structure of just a part of the buffer, of one chapter, for example,
@c use the @kbd{C-x n n} (@code{narrow-to-region}) command to mark the
@c region.  (@xref{Narrowing, , , emacs, The GNU Emacs Manual}.)  This is
@c how the example used above was generated.  (To see the whole buffer
@c again, use @kbd{C-x n w} (@code{widen}).)@refill
@c 
@code{texinfo-show-structure}コマンドを呼び出すとき，Emacsはバッファ全体
の構造を表示します．バッファの一部のみ，例えば一つの章の構造を見たい場合，
領域をマークするため@kbd{C-x n n} (@code{narrow-to-region})コマンドを使
用してください．(@xref{Narrowing, , , emacs, The GNU Emacs Manual}.)これ
は，上記の生成で使用された例の方法です．(再びバッファ全体を見るため，
@kbd{C-x n w} (@code{widen})を使用してください．)@refill

@c If you call @code{texinfo-show-structure} with a prefix argument by
@c typing @w{@kbd{C-u C-c C-s}}, it will list lines beginning with
@c @code{@@node} as well as the lines beginning with the @@-sign commands
@c for @code{@@chapter}, @code{@@section}, and the like.@refill
@c 
@w{@kbd{C-u C-c C-s}}と入力して，前置引数を用いて
@code{texinfo-show-structure}を呼び出す場合，@code{@@chapter}，
@code{@@section}のような@@-サインコマンドで始まる行と同様に，
@code{@@node}で始まる行をリストアップします．@refill

@c You can remind yourself of the structure of a Texinfo file by looking at
@c the list in the @samp{*Occur*} window; and if you have mis-named a node
@c or left out a section, you can correct the mistake.@refill
@c 
@samp{*Occur*}ウィンドウのリストを見ることで，Texinfoファイルの構造を思
い出すことが可能です．そして，間違った名前のノードや飛ばしたセクションが
ある場合，ミスを修正することが可能です．@refill

@node Using occur, Running Info-Validate, Using texinfo-show-structure, Catching Mistakes
@comment  node-name,  next,  previous,  up
@c @section Using @code{occur}
@section @code{occur}の使用
@cindex Occurrences, listing with @code{@@occur}
@findex occur

@c Sometimes the @code{texinfo-show-structure} command produces too much
@c information.  Perhaps you want to remind yourself of the overall structure
@c of a Texinfo file, and are overwhelmed by the detailed list produced by
@c @code{texinfo-show-structure}.  In this case, you can use the @code{occur}
@c command directly.  To do this, type@refill
@c 
@code{texinfo-show-structure}コマンドが，余りに多い情報を生成するときも
あります．おそらく，Texinfoファイルの全体的な構造を思い出したいとき，
@code{texinfo-show-structure}が生成した詳細なリストに圧倒されます．この
状況では，@code{occur}コマンドを直接使用することが可能です．こうするため，
以下のように入力します．@refill

@example
@kbd{M-x occur}
@end example

@noindent
@c and then, when prompted, type a @dfn{regexp}, a regular expression for
@c the pattern you want to match.  (@xref{Regexps, , Regular Expressions,
@c emacs, The GNU Emacs Manual}.)  The @code{occur} command works from
@c the current location of the cursor in the buffer to the end of the
@c buffer.  If you want to run @code{occur} on the whole buffer, place
@c the cursor at the beginning of the buffer.@refill
@c 
その後で，@dfn{regexp}の形式で入力を促されたとき，一致させたいパターンの
正規表現を入力してください．(@xref{Regexps, , Regular Expressions,
emacs, The GNU Emacs Manual}.)@code{occur}コマンドは，バッファの現在のカー
ソル位置からバッファの終りまで作用します．バッファ全体で@code{occur}を実
行したい場合，カーソルをバッファの最初に置いてください．@refill

@c For example, to see all the lines that contain the word
@c @samp{@@chapter} in them, just type @samp{@@chapter}.  This will
@c produce a list of the chapters.  It will also list all the sentences
@c with @samp{@@chapter} in the middle of the line.@refill
@c 
例えば，行の中に@samp{@@chapter}を含む全ての行を見たい場合，
@samp{@@chapter}を入力してください．これは章のリストを生成します．それは，
行の真中に@samp{@@chapter}がある文も全てリストアップします．@refill

@c If you want to see only those lines that start with the word
@c @samp{@@chapter}, type @samp{^@@chapter} when prompted by
@c @code{occur}.  If you want to see all the lines that end with a word
@c or phrase, end the last word with a @samp{$}; for example,
@c @samp{catching mistakes$}.  This can be helpful when you want to see
@c all the nodes that are part of the same chapter or section and
@c therefore have the same `Up' pointer.@refill
@c 
単語@samp{@@chapter}で始まるこれらの行のみを見たい場合，@code{occur}で入
力を促されたとき，@samp{^@@chapter}を入力してください．単語や文節で終る
全ての行を見たい場合，例えば@samp{catching mistakes$}のように，@samp{$} 
で単語の終りを終えてください．これは，同じ章やセクションの一部や，その理
由から同じ`Up'ポインタを持っている全てのノードを見たいとき役に立つはずで
す．@refill

@c @xref{Other Repeating Search, , Using Occur, emacs , The GNU Emacs Manual},
@c for more information.@refill
@c 
詳細は，@xref{Other Repeating Search, , Using Occur, emacs , The GNU
Emacs Manual}.@refill

@node Running Info-Validate,  , Using occur, Catching Mistakes
@comment  node-name,  next,  previous,  up
@c @section Finding Badly Referenced Nodes
@section 悪いノード参照を見つける
@findex Info-validate
@cindex Nodes, checking for badly referenced
@cindex Checking for badly referenced nodes
@cindex Looking for badly referenced nodes
@cindex Finding badly referenced nodes
@cindex Badly referenced nodes

@c You can use the @code{Info-validate} command to check whether any of
@c the `Next', `Previous', `Up' or other node pointers fail to point to a
@c node.  This command checks that every node pointer points to an
@c existing node.  The @code{Info-validate} command works only on Info
@c files, not on Texinfo files.@refill
@c 
あらゆる`Next'，`Previous'，`Up'やその他のノードポインタがノードを指し示
すことに失敗しているかどうかを調査するため，@code{Info-validate}を使用す
ることが可能です．このコマンドは，全てのノードポインタが存在するノードを
指し示していることを調べます．@code{Info-validate}コマンドは，Texinfoファ
イルではなくInfoファイルでのみ動作します．@refill

@c The @code{makeinfo} program validates pointers automatically, so you
@c do not need to use the @code{Info-validate} command if you are using
@c @code{makeinfo}.  You only may need to use @code{Info-validate} if you
@c are unable to run @code{makeinfo} and instead must create an Info file
@c using @code{texinfo-format-region} or @code{texinfo-format-buffer}, or
@c if you write an Info file from scratch.@refill
@c 
@code{makeinfo}プログラムは自動的にポインタの有効の調査を行うので，
@code{makeinfo}を使用している場合，@code{Info-validate}を使用する必要は
ありません．@code{makeinfo}が実行不可能で，その代わりに
@code{texinfo-format-region}や@code{texinfo-format-buffer}を使用している
場合や，スクラッチからInfoファイルを書く場合のみ，@code{Info-validate}を
使用する必要があります．@refill

@menu
* Using Info-validate::         How to run @code{Info-validate}.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.
@end menu

@node Using Info-validate, Unsplit, Running Info-Validate, Running Info-Validate
@c @subsection Running @code{Info-validate}
@subsection @code{Info-validate}の実行
@cindex Running @code{Info-validate}
@cindex Info validating a large file
@cindex Validating a large file

@c To use @code{Info-validate}, visit the Info file you wish to check and
@c type:@refill
@c 
@code{Info-validate}を使用するため，調査したいInfoファイルに移動し，以下
を入力してください．@refill

@example
M-x Info-validate
@end example

@noindent
@c Note that the @code{Info-validate} command requires an upper case
@c `I'.  You may also need to create a tag table before running
@c @code{Info-validate}.  @xref{Tagifying}.
@c 
@code{Info-validate}コマンドは大文字の`I'が要求されることに注意してくだ
さい．また，@code{Info-validate}を実行する前にタグ表を作成する必要がある
かもしれません．@xref{Tagifying}.

@c If your file is valid, you will receive a message that says ``File appears
@c valid''.  However, if you have a pointer that does not point to a node,
@c error messages will be displayed in a buffer called @samp{*problems in
@c info file*}.@refill
@c 
ファイルが有効な場合，``File appears valid''というメッセージを受け取りま
す．しかし，ノードを指し示さないポインタがある場合，@samp{*problems in
info file*}と呼ばれるバッファにエラーメッセージが表示されます．@refill

@c For example, @code{Info-validate} was run on a test file that contained
@c only the first node of this manual.  One of the messages said:@refill
@c 
例えば，@code{Info-validate}は，このマニュアルの最初のノードのみを含むテ
ストファイルで実行されたとします．メッセージの一つは以下のようになります．
@refill

@example
In node "Overview", invalid Next: Texinfo Mode
@end example

@noindent
@c This meant that the node called @samp{Overview} had a `Next' pointer that
@c did not point to anything (which was true in this case, since the test file
@c had only one node in it).@refill
@c 
この意味は，@samp{Overview}と呼ばれるノードに何も指し示さない`Next'ポイ
ンタがあるということを意味します(テストファイルには一つのノードしかない
ので，この場合はそうなります．)．@refill

@c Now suppose we add a node named @samp{Texinfo Mode} to our test case
@c but we do not specify a `Previous' for this node.  Then we will get
@c the following error message:@refill
@c 
さて，我々が@samp{Texinfo Mode}という名のノードをテストケースに加えます
が，このノードの`Previous'を指定しないとします．そのとき我々は以下のよう
なエラーメッセージを得ます．@refill

@example
In node "Texinfo Mode", should have Previous: Overview
@end example

@noindent
@c This is because every `Next' pointer should be matched by a
@c `Previous' (in the node where the `Next' points) which points back.@refill
@c 
これは，全ての`Next'ポインタは，戻るための(`Next'を示すノードにある)
`Previous'に一致すべきだからです．

@c @code{Info-validate} also checks that all menu entries and cross references
@c point to actual nodes.@refill
@c 
@code{Info-validate}は，全てのメニュー項目と相互参照が実際にノードを指し
示していることも調査します．@refill

@c @code{Info-validate} requires a tag table and does not work with files
@c that have been split.  (The @code{texinfo-format-buffer} command
@c automatically splits large files.)  In order to use @code{Info-validate}
@c on a large file, you must run @code{texinfo-format-buffer} with an
@c argument so that it does not split the Info file; and you must create a
@c tag table for the unsplit file.
@c 
@code{Info-validate}はタグ表が必要で，分割されたファイルでは動作しません．
(@code{texinfo-format-buffer}コマンドは，大きなファイルを自動的に分割し
ます．)大きなファイルで@code{Info-validate}を使用するため，Infoファイル
が分割されないように，引数を用いて@code{texinfo-format-buffer}を実行する
必要があります．そして，分割されていないファイルのためタグ表を作成する必
要があります．

@node Unsplit, Tagifying, Using Info-validate, Running Info-Validate
@comment  node-name,  next,  previous,  up
@c @subsection Creating an Unsplit File
@subsection 分割されないファイルの作成
@cindex Creating an unsplit file
@cindex Unsplit file creation

@c You can run @code{Info-validate} only on a single Info file that has a
@c tag table.  The command will not work on the indirect subfiles that
@c are generated when a master file is split.  If you have a large file
@c (longer than 70,000 bytes or so), you need to run the
@c @code{texinfo-format-buffer} or @code{makeinfo-buffer} command in such
@c a way that it does not create indirect subfiles.  You will also need
@c to create a tag table for the Info file.  After you have done this,
@c you can run @code{Info-validate} and look for badly referenced
@c nodes.@refill
@c 
@code{Info-validate}は，タグ表を持った単一のInfoファイルのでのみ実行可能
です．コマンドは，マスターファイルが分割されたとき生成されたサブファイル
では，間接的に動作しません．(70,000バイトかそれくらい以上の)大きなファイ
ルがある場合，間接的なサブファイルを生成しないような方法で
@code{texinfo-format-buffer}や@code{makeinfo-buffer}コマンドを実行する必
要があります．Infoファイルのためのタグ表も作成する必要があります．これを
行った後で@code{Info-validate}を実行し，悪い参照ノードを探すことが可能に
なります．@refill

@c The first step is to create an unsplit Info file.  To prevent
@c @code{texinfo-format-buffer} from splitting a Texinfo file into
@c smaller Info files, give a prefix to the @kbd{M-x
@c texinfo-format-buffer} command:@refill
@c 
第一段階は分割されないInfoファイルを作成することです．
@code{texinfo-format-buffer}がTexinfoファイルをより小さなInfoファイルに
分割することを避けるため，@kbd{M-x texinfo-format-buffer}コマンドに前置
引数を与えてください．@refill

@example
C-u M-x texinfo-format-buffer
@end example

@noindent
@c or else
@c 
または，以下のようにします．

@example
C-u C-c C-e C-b
@end example

@noindent
@c When you do this, Texinfo will not split the file and will not create
@c a tag table for it. @refill
@c 
こうしたとき，Texinfoはファイルを分割せず，そのタグ表を生成しません．
@refill
@cindex Making a tag table manually
@cindex Tag table, making manually

@node Tagifying, Splitting, Unsplit, Running Info-Validate
@c @subsection Tagifying a File
@subsection ファイルのタグ付け

@c After creating an unsplit Info file, you must create a tag table for
@c it.  Visit the Info file you wish to tagify and type:@refill
@c 
分割されていないInfoファイルを作成後，そのためのタグ表を作成する必要があ
ります．タグ付けしたいInfoファイルに移動し，以下を入力してください．
@refill

@example
M-x Info-tagify
@end example

@noindent
@c (Note the upper case @samp{I} in @code{Info-tagify}.)  This creates an
@c Info file with a tag table that you can validate.@refill
@c 
(@code{Info-tagify}の大文字の@samp{I}に注意してください．)これで，有効化
が可能なタグ表を持つInfoファイルを作成します．@refill

@c The third step is to validate the Info file:@refill
@c 
第三段階はInfoファイルを確認することです．@refill

@example
M-x Info-validate
@end example

@noindent
@c (Note the upper case @samp{I} in @code{Info-validate}.)
@c In brief, the steps are:@refill
@c 
(@code{Info-validate}の大文字の@samp{I}に注意してください．)簡単にいうと，
ステップは以下のようになります．@refill

@example
@group
C-u M-x texinfo-format-buffer
M-x Info-tagify
M-x Info-validate
@end group
@end example

@c After you have validated the node structure, you can rerun
@c @code{texinfo-format-buffer} in the normal way so it will construct a
@c tag table and split the file automatically, or you can make the tag
@c table and split the file manually.@refill
@c 
ノード構造を有効にした後，通常の方法で@code{texinfo-format-buffer}を再実
行し，そしてそれでタグ表を構築しファイルを自動的に分割する，または手動で
タグ表と分割されたファイルを作成することができます．@refill

@node Splitting,  , Tagifying, Running Info-Validate
@comment  node-name,  next,  previous,  up
@c @subsection Splitting a File Manually
@subsection ファイルを手動で分割
@cindex Splitting an Info file manually
@cindex Info file, splitting manually

@c You should split a large file or else let the
@c @code{texinfo-format-buffer} or @code{makeinfo-buffer} command do it
@c for you automatically.  (Generally you will let one of the formatting
@c commands do this job for you.  @xref{Creating an Info File}.)@refill
@c 
大きなファイルを分割したり，@code{texinfo-format-buffer}や
@code{makeinfo-buffer}コマンドで自動的にそれを行ったりすべきです．(一般
的に，書式化コマンドの一つでこの仕事を行います．@xref{Creating an Info
File}.)@refill

@c The split-off files are called the indirect subfiles.@refill
@c 
分割されたファイルは，間接的なサブファイルと呼ばれています．@refill

@c Info files are split to save memory.  With smaller files, Emacs does not
@c have make such a large buffer to hold the information.@refill
@c 
Infoファイルはメモリを節約するため分割されます．小さなファイルでは，
Emacsは情報を保つため大きなバッファを作成しません．@refill

@c If an Info file has more than 30 nodes, you should also make a tag
@c table for it. @xref{Using Info-validate}, for information
@c about creating a tag table.  (Again, tag tables are usually created
@c automatically by the formatting command; you only need to create a tag
@c table yourself if you are doing the job manually.  Most likely, you
@c will do this for a large, unsplit file on which you have run
@c @code{Info-validate}.)@refill
@c 
Infoファイルが30ノード以上ある場合，そのためにタグ表も作成すべきです．タ
グ表作成の詳細は，@xref{Using Info-validate}.  (また，通常タグ表は，書式
化コマンドで自動的に作成されます．手動で作業をした場合のみ，タグ表を作成
する必要があります．ほとんどの場合，@code{Info-validate}で作業した大きな
分割されていないファイルでこれを行います．)@refill

@c Info-split is autoloaded in `loaddefs.el' in Emacs 18.51
@ignore
Before running @code{Info-split}, you need to load the @code{info} library
into Emacs by giving the command @kbd{M-x load-library @key{RET} info
@key{RET}}.
@end ignore

@c Visit the Info file you wish to tagify and split and type the two
@c commands:@refill
@c 
タグ付けと分割を行いたいファイルに移動し，二つのコマンドを入力してくださ
い．@refill

@example
M-x Info-tagify
M-x Info-split
@end example

@noindent
@c (Note that the @samp{I} in @samp{Info} is upper case.)@refill
@c 
(@samp{Info}の@samp{I}が大文字であることに注意してください．)@refill

@c When you use the @code{Info-split} command, the buffer is modified into a
@c (small) Info file which lists the indirect subfiles.  This file should be
@c saved in place of the original visited file.  The indirect subfiles are
@c written in the same directory the original file is in, with names generated
@c by appending @samp{-} and a number to the original file name.@refill
@c 
@code{Info-split}コマンドを使用するとき，バッファは間接的なサブファイル
を列挙する(小さな)Infoファイルに編集されます．このファイルは，移動した元
ファイルに保存されます．間接的なサブファイルは，元ファイルと同じディレク
トリに書き込まれ，元ファイル名に@samp{-}と数字が追加されたファイル名にな
ります．@refill

@c The primary file still functions as an Info file, but it contains just
@c the tag table and a directory of subfiles.@refill
@c 
プライマリファイルはInfoファイルとして機能しますが，それはタグ表とサブファ
イルのディレクトリだけを含みます．@refill


@node Refilling Paragraphs
@c @appendix Refilling Paragraphs
@appendix 段落の補充
@cindex Refilling paragraphs
@cindex Filling paragraphs
@cindex Paragraphs, filling
@findex refill

@c The @code{@@refill} command refills and, optionally, indents the first
@c line of a paragraph.@footnote{Perhaps the command should have been
@c called the @code{@@refillandindent} command, but @code{@@refill} is
@c shorter and the name was chosen before indenting was possible.} The
@c @code{@@refill} command is no longer important, but we describe it here
@c because you once needed it.  You will see it in many old Texinfo
@c files.@refill
@c 
@code{@@refill}コマンドは補充し，オプションで段落の最初の行を字下げを行
ないます．@footnote{おそらくコマンドは，@code{@@refillandindent}コマンド
と呼ばれるべきですが，@code{@@refill}はより短く，名前は字下げが可能にな
る前に選ばれていました．}@code{@@refill}コマンドはもはや重要ではありませ
んがかつて必要だったので，我々はそれをここで記述します．多くの古い
Texinfoファイルで見ることになるでしょう．@refill

@c Without refilling, paragraphs containing long @@-constructs may look
@c bad after formatting because the formatter removes @@-commands and
@c shortens some lines more than others.  In the past, neither the
@c @code{texinfo-format-region} command nor the
@c @code{texinfo-format-buffer} command refilled paragraphs
@c automatically.  The @code{@@refill} command had to be written at the
@c end of every paragraph to cause these formatters to fill them.  (Both
@c @TeX{} and @code{makeinfo} have always refilled paragraphs
@c automatically.)  Now, all the Info formatters automatically fill and
@c indent those paragraphs that need to be filled and indented.@refill
@c 
補充がない場合，長い@@-構成物を含む段落は，フォーマッタが@@-コマンドを削
除することで他の行より短くなるものもあるので，書式化後見栄えが悪くなりま
す．以前は，@code{texinfo-format-region}コマンドや
@code{texinfo-format-buffer}コマンドは，段落を自動的に補充しませんでした．
@code{@@refill}コマンドを全ての段落の終りに，これらのフォーマッタがそれ
を補充するように書く必要がありました．(@TeX{}と@code{makeinfo}の両方が，
常に段落を自動的に補充していました．)現在は，全てのInfoフォーマッタは補
充と字下げが必要なそれらの段落を自動的に補充し字下げします．@refill

@c The @code{@@refill} command causes @code{texinfo-format-region} and
@c @code{texinfo-format-buffer} to refill a paragraph in the Info file
@c @emph{after} all the other processing has been done.  For this reason,
@c you can not use @code{@@refill} with a paragraph containing either
@c @code{@@*} or @code{@@w@{ @dots{} @}} since the refilling action will
@c override those two commands.@refill
@c 
@code{@@refill}コマンドは，全ての他の処理が終了した@emph{後}，
@code{texinfo-format-region}と@code{texinfo-format-buffer}にInfoファイル
の段落を補充させます．このため，@code{@@*}や@code{@@w@{ @dots{} @}}を含
む段落では，補充の動作がこれら二つのコマンドに優先されるので，
@code{@@refill}を使用することは不可能です．@refill

@c The @code{texinfo-format-region} and @code{texinfo-format-buffer}
@c commands now automatically append @code{@@refill} to the end of each
@c paragraph that should be filled.  They do not append @code{@@refill} to
@c the ends of paragraphs that contain @code{@@*} or @w{@code{@@w@{ @dots{}@}}}
@c and therefore do not refill or indent them.@refill
@c 
現在，@code{texinfo-format-region}と@code{texinfo-format-buffer}コマンド
は，@code{@@refill}を補充が必要なそれぞれの段落に自動的に加えます．
@code{@@*}や@w{@code{@@w@{ @dots{}@}}}を含む段落の終りに@code{@@refill} 
を加えないので，それらは補充も字下げもされません．@refill


@node Command Syntax
@c @appendix @@-Command Syntax
@appendix @@-コマンドの構文
@cindex @@-command syntax
@cindex Syntax, of @@-commands
@cindex Command syntax

@c The character @samp{@@} is used to start special Texinfo commands.
@c (It has the same meaning that @samp{\} has in plain @TeX{}.)  Texinfo
@c has four types of @@-command:@refill
@c 
文字@samp{@@}は，特別なTexinfoコマンドを開始するために使用されます．(そ
れは，プレーン@TeX{}に@samp{\}があるのと同じ意味です．)Texinfoは四つの形
式の@@-コマンドがあります．@refill

@table @asis
@c @item 1. Non-alphabetic commands.
@c These commands consist of an @@ followed by a punctuation mark or other
@c character that is not part of the alphabet.  Non-alphabetic commands are
@c almost always part of the text within a paragraph, and never take any
@c argument.  The two characters (@@ and the other one) are complete in
@c themselves; none is followed by braces.  The non-alphabetic commands
@c are: @code{@@.}, @code{@@:}, @code{@@*}, @code{@@@kbd{SPACE}},
@c @code{@@@kbd{TAB}}, @code{@@@kbd{NL}}, @code{@@@@}, @code{@@@{}, and
@c @code{@@@}}.@refill
@c 
@item 1. アルファベットでないコマンド．
これらのコマンドは，@@に句読点やアルファベット以外の文字が続いたものから
成り立ちます．アルファベットでないコマンドはほとんど，常に段落内のテキス
トの一部で，全く引数をとりません．二文字(@@ともう一文字)は，完全にそれ自
身になります．カッコは続きません．アルファベットでないコマンドは以下のも
のです．@code{@@.}，@code{@@:}，@code{@@*}，@code{@@@kbd{SPACE}}，
@code{@@@kbd{TAB}}，@code{@@@kbd{NL}}，@code{@@@@}，@code{@@@{}，そして
@code{@@@}}．@refill

@c @item 2. Alphabetic commands that do not require arguments.
@c These commands start with @@ followed by a word followed by left- and
@c right-hand braces.  These commands insert special symbols in the
@c document; they do not require arguments.  For example,
@c @code{@@dots@{@}} @result{} @samp{@dots{}}, @code{@@equiv@{@}}
@c @result{} @samp{@equiv{}}, @code{@@TeX@{@}} @result{} `@TeX{}',
@c and @code{@@bullet@{@}} @result{} @samp{@bullet{}}.@refill
@c 
@item 2. 引数をとらないアルファベットコマンド．
これらのコマンドは，@@で始まる，単語が続き，左右のカッコが続きます．これ
らのコマンドは，ドキュメントに特別なシンボルを挿入します．それらに引数は
必要ありません．例えば，@code{@@dots@{@}} @result{} @samp{@dots{}}，
@code{@@equiv@{@}} @result{} @samp{@equiv{}}，@code{@@TeX@{@}} @result{}
`@TeX{}'，そして@code{@@bullet@{@}} @result{} @samp{@bullet{}}です．
@refill

@c @item 3. Alphabetic commands that require arguments within braces.
@c These commands start with @@ followed by a letter or a word, followed by an
@c argument within braces.  For example, the command @code{@@dfn} indicates
@c the introductory or defining use of a term; it is used as follows: @samp{In
@c Texinfo, @@@@-commands are @@dfn@{mark-up@} commands.}@refill
@c 
@item 3. カッコ内に引数が必要なアルファベットコマンド．
これらのコマンドは，@@で始まり，文字や単語が続き，カッコ内に引数が続きま
す．例えば，コマンド@code{@@dfn}は用語の紹介や使用の定義を示します．それ
は以下のように使用されます．@samp{Texinfoでは，@@@@-コマンドは
@@dfn@{mark-up@}コマンドです．}@refill

@c @item 4. Alphabetic commands that occupy an entire line.
@c These commands occupy an entire line.  The line starts with @@,
@c followed by the name of the command (a word); for example, @code{@@center}
@c or @code{@@cindex}.  If no argument is needed, the word is followed by
@c the end of the line.  If there is an argument, it is separated from
@c the command name by a space.  Braces are not used.@refill
@c 
@item 4. 行全体を占有する，アルファベットコマンド．
これらのコマンドは行全体を占有します．行を@@で開始し，コマンドの名前(単
語)が続きます．例えば，@code{@@center}や@code{@@cindex}です．引数が必要
無い場合，単語は行の終りが続きます．引数がある場合，コマンド名とスペース
で分けられています．カッコは使用しません．@refill
@end table

@cindex Braces and argument syntax
@c Thus, the alphabetic commands fall into classes that have
@c different argument syntaxes.  You cannot tell to which class a command
@c belongs by the appearance of its name, but you can tell by the
@c command's meaning: if the command stands for a glyph, it is in
@c class 2 and does not require an argument; if it makes sense to use the
@c command together with other text as part of a paragraph, the command
@c is in class 3 and must be followed by an argument in braces;
@c otherwise, it is in class 4 and uses the rest of the line as its
@c argument.@refill
@c 
このため，アルファベットコマンドは，異なる引数の構文を持つクラスに分類さ
れます．その名前の外見からコマンドが属するクラスは分かりませんが，コマン
ドの意味は分かります．コマンドがglyphを意味する場合，それはクラス2で引数
はいりません．それが，段落の部分としての他のテキストと一緒に使用されるコ
マンドを意味する場合，コマンドはクラス3でカッコ内に引数が続きます．それ
以外の場合，それはクラス4で，その引数として行の残りを使用します．
@refill

@c The purpose of having a different syntax for commands of classes 3 and
@c 4 is to make Texinfo files easier to read, and also to help the GNU
@c Emacs paragraph and filling commands work properly.  There is only one
@c exception to this rule: the command @code{@@refill}, which is always
@c used at the end of a paragraph immediately following the final period
@c or other punctuation character.  @code{@@refill} takes no argument and
@c does @emph{not} require braces.  @code{@@refill} never confuses the
@c Emacs paragraph commands because it cannot appear at the beginning of
@c a line.@refill
@c 
クラス3と4のコマンドが異なる構文を持っている目的は，Texinfoファイルを読
み易くし，GNU Emacsの段落と補充コマンドが正確に動作する助けとするためで
す．この規則に一つの例外があります．それは@code{@@refill}コマンドで，そ
れは段落の終りで，最後のピリオドや句読点文字の直後に常に使用されます．
@code{@@refill}は引数をとらず，カッコは要求され@emph{ません}．
@code{@@refill}は，行の最初に現われないので，Emacs 段落コマンドは決して
混乱しません．@refill


@node Obtaining TeX
@c @appendix How to Obtain @TeX{}
@appendix @TeX{}の入手方法
@cindex Obtaining @TeX{}
@cindex @TeX{}, how to obtain

@c !!! Here is information about obtaining TeX.  Update it whenever.
@c !!! Also consider updating TeX.README on ftp.gnu.org.
@c     Updated by RJC on 1 March 1995, conversation with MacKay.
@c     Updated by kb@cs.umb.edu on 29 July 1996.
@c     Updated by kb@cs.umb.edu on 25 April 1997.
@c     Updated by kb@cs.umb.edu on 27 February 1998.
@c @TeX{} is freely redistributable.  You can obtain @TeX{} for Unix
@c systems via anonymous ftp or on physical media.  The core material
@c consists of the Web2c @TeX{} distribution (@uref{http://tug.org/web2c}).
@c 
@TeX{}は自由に再配布できます．anonymous ftpや物理媒体でUnixシステムのた
めの@TeX{}を入手可能です．核となる材料は，Web2c @TeX{}配布物から構成され
ます(@uref{http://tug.org/web2c})．

@c Instructions for retrieval by anonymous ftp and information on other
@c available distributions:
@c 
anonymous ftpで取得するための説明とその他の利用可能な配布物の情報は以下
の通りです．
@example
@uref{ftp://tug.org/tex/unixtex.ftp}
@uref{http://tug.org/unixtex.ftp}
@end example

@c The Free Software Foundation provides a core distribution on its Source
@c Code CD-ROM suitable for printing Texinfo manuals.  To order it, contact:
@c 
Free Software Foundationは，Texinfoマニュアルの印刷に適したソースコード
CD-ROMでの核となる配布物を提供します．注文するために以下に連絡してくださ
い．

@display
@group
Free Software Foundation, Inc.
59 Temple Place Suite 330
Boston, MA @ @ 02111-1307
USA
Telephone: @w{+1-617-542-5942}
Fax: (including Japan) @w{+1-617-542-2652}
Free Dial Fax (in Japan):
@w{ } @w{ } @w{ } 0031-13-2473 (KDD)
@w{ } @w{ } @w{ } 0066-3382-0158 (IDC)
Electronic mail: @code{gnu@@gnu.org}
@end group
@end display

@c Many other @TeX{} distributions are available; see
@c @uref{http://tug.org/}.
@c 
その他多くの@TeX{}配布物が利用可能です．@uref{http://tug.org/}を参照して
ください．


@c These are no longer ``new'', and the explanations
@c are all given elsewhere anyway, I think.  --karl, 25apr97.
@c So ignore the entire appendix.
@ignore
@c node New Features, Command and Variable Index, Obtaining TeX, Top
@c appendix Second Edition Features

@tex
% Widen the space for the first column so three control-character
% strings fit in the first column.  Switched back to default .8in
% value at end of chapter.
\global\tableindent=1.0in
@end tex

The second edition of the Texinfo manual describes more than 20 new
Texinfo mode commands and more than 50 previously undocumented Texinfo
@@-commands.  This edition is more than twice the length of the first
edition.@refill

Here is a brief description of the new commands.@refill

@c menu
* New Texinfo Mode Commands::   The updating commands are especially useful.
* New Commands::                Many newly described @@-commands.
@c end menu

@c node New Texinfo Mode Commands, New Commands, Obtaining TeX, Obtaining TeX
@c appendixsec New Texinfo Mode Commands

Texinfo mode provides commands and features especially designed for
working with Texinfo files.  More than 20 new commands have been
added, including commands for automatically creating and updating
both nodes and menus.  This is a tedious task when done by hand.@refill

The keybindings are intended to be somewhat mnemonic.@refill

@c subheading Update all nodes and menus

The @code{texinfo-master-menu} command is the primary command:

@table @kbd
@item C-c C-u m
@itemx M-x texinfo-master-menu
Create or update a master menu.
With @kbd{C-u} as a prefix argument,
first create or update all nodes
and regular menus.
@end table

@c subheading Update Pointers

@noindent
Create or update `Next', `Previous', and `Up' node pointers.@refill

@noindent
@xref{Updating Nodes and Menus}.

@table @kbd
@item C-c C-u C-n
@itemx M-x texinfo-update-node
Update a node.

@item C-c C-u C-e
@itemx M-x texinfo-every-node-update
Update every node in the buffer.
@end table

@c subheading Update Menus

@noindent
Create or update menus.@refill

@noindent
@xref{Updating Nodes and Menus}.

@table @kbd
@item C-c C-u C-m
@itemx M-x texinfo-make-menu
Make or update a menu.

@item C-c C-u C-a
@itemx M-x texinfo-all-menus-update
Make or update all the menus in a buffer.
With @kbd{C-u} as a prefix argument,
first update all the nodes.
@end table

@c subheading Insert Title as Description

@noindent
Insert a node's chapter or section title in the space for the
description in a menu entry line; position point so you can edit the
insert.  (This command works somewhat differently than the other
insertion commands, which insert only a predefined string.)@refill

@noindent
@xref{Inserting, Inserting Frequently Used Commands}.

@table @kbd
@item C-c C-c C-d
Insert title.
@end table

@c subheading Format for Info

@noindent
Provide keybindings both for the Info formatting commands that are
written in Emacs Lisp and for @code{makeinfo} that is written in
C.@refill

@noindent
@xref{Info Formatting}.

@noindent
Use the Emacs lisp @code{texinfo-format@dots{}} commands:

@table @kbd
@item C-c C-e C-r
Format the region.

@item C-c C-e C-b
Format the buffer.
@end table

@noindent
Use @code{makeinfo}:

@table @kbd
@item C-c C-m C-r
Format the region.

@item C-c C-m C-b
Format the buffer.

@item C-c C-m C-l
Recenter the @code{makeinfo} output buffer.

@item C-c C-m C-k
Kill the @code{makeinfo} formatting job.
@end table

@c subheading Typeset and Print

@noindent
Typeset and print Texinfo documents from within Emacs.@refill

@ifinfo
@noindent
@xref{Printing}.
@end ifinfo
@iftex
@noindent
@xref{Printing, , Formatting and Printing}.
@end iftex

@table @kbd
@item C-c C-t C-b
Run @code{texi2dvi} on the buffer.

@item C-c C-t C-r
Run @TeX{} on the region.

@item C-c C-t C-i
Run @code{texindex}.

@item C-c C-t C-p
Print the DVI file.

@item C-c C-t C-q
Show the print queue.

@item C-c C-t C-d
Delete a job from the print queue.

@item C-c C-t C-k
Kill the current @TeX{} formatting job.

@item C-c C-t C-x
Quit a currently stopped @TeX{} formatting job.

@item C-c C-t C-l
Recenter the output buffer.
@end table

@c subheading Other Updating Commands

@noindent
The ``other updating commands'' do not have standard keybindings because
they are used less frequently.@refill

@noindent
@xref{Other Updating Commands}.

@table @kbd
@item M-x texinfo-insert-node-lines
Insert missing @code{@@node} lines using
section titles as node names.

@item M-x texinfo-multiple-files-update
Update a multi-file document.
With a numeric prefix, such as @kbd{C-u 8},
update  @strong{every} pointer and
menu in @strong{all} the files and
then insert a master menu.

@item M-x texinfo-indent-menu-description
Indent descriptions in menus.

@item M-x texinfo-sequential-node-update
Insert node pointers in strict sequence.
@end table

@c no.de New Commands,  , New Texinfo Mode Commands, Obtaining TeX
@c appendix.sec New Texinfo @@-Commands

The second edition of the Texinfo manual describes more than 50
commands that were not described in the first edition.  A third or so
of these commands existed in Texinfo but were not documented in the
manual; the others are new.  Here is a listing, with brief
descriptions of them:@refill

@c subheading Indexing

@noindent
Create your own index, and merge indices.@refill

@noindent
@xref{Indices}.

@table @kbd
@item @@defindex @var{index-name}
Define a new index and its indexing command.
See also the @code{@@defcodeindex} command.

@c written verbosely to avoid overfull hbox
@item @@synindex @var{from-index} @var{into-index}
Merge the @var{from-index} index into the @var{into-index} index.
See also the @code{@@syncodeindex} command.
@end table

@c subheading Definitions

@noindent
Describe functions, variables, macros,
commands, user options, special forms, and other such artifacts in a
uniform format.@refill

@noindent
@xref{Definition Commands}.

@table @kbd
@item @@deffn @var{category} @var{name} @var{arguments}@dots{}
Format a description for functions, interactive
commands, and similar entities.

@item @@defvr, @@defop, @dots{}
15 other related commands.
@end table

@c subheading Glyphs

@noindent
Indicate the results of evaluation, expansion,
printed output, an error message, equivalence of expressions, and the
location of point.@refill

@noindent
@xref{Glyphs}.

@table @kbd
@item @@equiv@{@}
@itemx @equiv{}
Equivalence:

@item @@error@{@}
@itemx @error{}
Error message

@item @@expansion@{@}
@itemx @expansion{}
Macro expansion

@item @@point@{@}
@itemx @point{}
Position of point

@item @@print@{@}
@itemx @print{}
Printed output

@item @@result@{@}
@itemx @result{}
Result of an expression
@end table

@c subheading Page Headings

@noindent
Customize page headings.

@noindent
@xref{Headings}.

@table @kbd
@item @@headings @var{on-off-single-double}
Headings on or off, single, or double-sided.

@item @@evenfooting [@var{left}] @@| [@var{center}] @@| [@var{right}]
Footings for even-numbered (left-hand) pages.

@item @@evenheading, @@everyheading, @@oddheading, @dots{}
Five other related commands.

@item @@thischapter
Insert name of chapter and chapter number.

@item @@thischaptername, @@thisfile, @@thistitle, @@thispage
Related commands.
@end table

@c subheading Formatting

@noindent
Format blocks of text.

@noindent
@xref{Quotations and Examples}, and@*
@ref{Lists and Tables, , Making Lists and Tables}.

@table @kbd
@item @@cartouche
Draw rounded box surrounding text (not in Info).

@item @@enumerate @var{optional-arg}
Enumerate a list with letters or numbers.

@item @@exdent @var{line-of-text}
Remove indentation.

@item @@flushleft
Left justify.

@item @@flushright
Right justify.

@item @@format
Do not narrow nor change font.

@item @@ftable @var{formatting-command}
@itemx @@vtable @var{formatting-command}
Two-column table with indexing.

@item @@lisp
For an example of Lisp code.

@item @@smallexample
@itemx @@smalllisp
Like @@table and @@lisp @r{but for} @@smallbook.
@end table

@c subheading Conditionals

@noindent
Conditionally format text.

@noindent
@xref{set clear value, , @code{@@set} @code{@@clear} @code{@@value}}.@refill

@table @kbd
@item @@set @var{flag} [@var{string}]
Set a flag.  Optionally, set value
of @var{flag} to @var{string}.

@item @@clear @var{flag}
Clear a flag.

@item @@value@{@var{flag}@}
Replace with value to which @var{flag} is set.

@item @@ifset @var{flag}
Format, if @var{flag} is set.

@item @@ifclear @var{flag}
Ignore, if @var{flag} is set.
@end table

@c subheading @@heading series for Titles

@noindent
Produce unnumbered headings that do not appear in a table of contents.

@noindent
@xref{Structuring}.

@table @kbd
@item @@heading @var{title}
Unnumbered section-like heading not listed
in the table of contents of a printed manual.

@item @@chapheading, @@majorheading, @@c subheading, @@subsubheading
Related commands.
@end table

@need 1000
@c subheading Font commands

@need 1000
@noindent
@xref{Smallcaps}, and @*
@ref{Fonts}.

@table @kbd
@item @@r@{@var{text}@}
Print in roman font.

@item @@sc@{@var{text}@}
Print in @sc{small caps} font.
@end table

@c subheading Miscellaneous

@noindent
See @ref{title subtitle author, , @code{@@title} @code{@@subtitle} and @code{@@author} Commands},@*
see @ref{Customized Highlighting},@*
see @ref{Overfull hboxes},@*
see @ref{Footnotes},@*
see @ref{dmn, , Format a Dimension},@*
see @ref{Raise/lower sections, , @code{@@raisesections} and @code{@@lowersections}},@*
see @ref{math, , @code{@@math}: Inserting Mathematical Expressions}.@*
see @ref{minus, , Inserting a Minus Sign},@*
see @ref{paragraphindent, , Paragraph Indenting},@*
see @ref{Cross Reference Commands},@*
see @ref{title subtitle author, , @code{@@title} @code{@@subtitle} and @code{@@author}}, and@*
see @ref{Custom Headings, , How to Make Your Own Headings}.

@table @kbd
@item @@author @var{author}
Typeset author's name.

@c @item @@definfoenclose @var{new-command}, @var{before}, @var{after},
@c Define a highlighting command for Info.  (Info only.)

@item @@finalout
Produce cleaner printed output.

@item @@footnotestyle @var{end-or-separate}
Specify footnote style.

@item @@dmn@{@var{dimension}@}
Format a dimension.

@item @@global@@let@var{new-cmd}=@var{existing-cmd}
Define a highlighting command for @TeX{}. (@TeX{} only.)

@item @@lowersections
Reduce hierarchical level of sectioning commands.

@item @@math@{@var{mathematical-expression}@}
Format a mathematical expression.

@item @@minus@{@}
Generate a minus sign.

@item @@paragraphindent @var{asis-or-number}
Specify paragraph indentation.

@item @@raisesections
Raise hierarchical level of sectioning commands.

@item @@ref@{@var{node-name}, @r{[}@var{entry}@r{]}, @r{[}@var{topic-or-title}@r{]}, @r{[}@var{info-file}@r{]}, @r{[}@var{manual}@r{]}@}
Make a reference.  In the printed manual, the
reference does not start with the word `see'.

@item @@title @var{title}
Typeset @var{title} in the alternative
title page format.

@item @@subtitle @var{subtitle}
Typeset @var{subtitle} in the alternative
title page format.

@item @@today@{@}
Insert the current date.
@end table
@tex
% Switch width of first column of tables back to default value
\global\tableindent=.8in
@end tex
@end ignore


@node Copying This Manual
@c @appendix Copying This Manual
@appendix このマニュアルのコピーに付いて

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Command and Variable Index
@c @unnumbered Command and Variable Index
@unnumbered コマンドと変数の索引

@c This is an alphabetical list of all the @@-commands, assorted Emacs Lisp
@c functions, and several variables.  To make the list easier to use, the
@c commands are listed without their preceding @samp{@@}.@refill
@c 
これは，Emacs Lisp関数に関連して分類された全ての@@-コマンドと，いくつか
の変数のリストです．リストを使いやすくするために，コマンドは@samp{@@}を
取り除いてリストアップされています．@refill

@printindex fn


@node Concept Index
@c @unnumbered Concept Index
@unnumbered 概念の索引

@printindex cp


@bye
