\input texinfo    @c -*-texinfo-*-
@comment $Id: info-stnd-ja.texi,v 1.1 2003/01/04 10:43:13 futoshi Exp $
@comment %**start of header
@setfilename info-stnd-ja.info
@include info-stnd-v.texi
@settitle GNU Info @value{VERSION}
@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex ky cp
@comment %**end of header

@copying
This manual is for GNU Info (version @value{VERSION}, @value{UPDATED}),
a program for viewing documents in Info format (usually created from
Texinfo source files).

Copyright @copyright{} 1992, 1993, 1996, 1997, 1998, 1999, 2001, 2002
Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* info standaloneq(ja): (info-stnd-ja).        Read Info documents without Emacs.
* infokey(ja): (info-stnd-ja)Invoking infokey. Compile Info customizations.
@end direntry

@titlepage
@title GNU Info
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Brian J. Fox (bfox@@gnu.org)
@c 翻訳：西尾 太
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU Info

@insertcopying

This documentation is different from the documentation for the Info
reader that is part of GNU Emacs.  If you do not know how to use Info,
but have a working Info reader, you should read the Emacs documentation
first, as it includes more background information and a thorough tutorial.
@end ifnottex

@menu
* What is Info::                What is Info?
* Invoking Info::               Options you can pass on the command line.
* Cursor Commands::             Commands which move the cursor within a node.
* Scrolling Commands::          Commands for reading the text within a node.
* Node Commands::               Commands for selecting a new node.
* Searching Commands::          Commands for searching an Info file.
* Xref Commands::               Commands for selecting cross references.
* Window Commands::             Commands which manipulate multiple windows.
* Printing Nodes::              How to print out the contents of a node.
* Miscellaneous Commands::      A few commands that defy categories.
* Variables::                   How to change the default behavior of Info.
* Custom Key Bindings::         How to define your own key-to-command bindings.
* Copying This Manual::         The GNU Free Documentation License.
* Index::                       Global index containing keystrokes,
                                  command names, variable names,
                                  and general concepts.
@end menu


@node What is Info
@c @chapter What is Info?
@chapter Infoとは？

@c @dfn{Info} is a program which is used to view Info files on an ASCII
@c terminal.  @dfn{Info files} are the result of processing Texinfo files
@c with the program @code{makeinfo} or with one of the Emacs commands, such
@c as @code{M-x texinfo-format-buffer}.  Texinfo itself is a documentation
@c system that uses a single source file to produce both on-line
@c information and printed output.  You can typeset and print the files
@c that you read in Info.
@c 
@dfn{Info}とは，ASCII端末でInfoファイルを閲覧するために使用するプログラ
ムです．@dfn{Infoファイル(Info files)}とは，Texinfoをプログラム
@code{makeinfo}や@code{M-x texinfo-format-buffer}のようなEmacsコマンドの
一つで処理された結果生成されるものです．Texinfo自身は，単一ファイルから
オンラインの情報と印刷された出力の両方を生成するために使用されるドキュメ
ントシステムです．Infoで読んでいるファイルを，植字し印刷することが可能で
す．


@node Invoking Info
@c @chapter Invoking Info
@chapter Infoの呼び出し

@cindex Info, invoking
@cindex invoking Info
@cindex command line options
@cindex options, command line
@cindex arguments, command line

@c GNU Info accepts several options to control the initial node being
@c viewed, and to specify which directories to search for Info files.  Here
@c is a template showing an invocation of GNU Info from the shell:
@c 
GNU Infoは，閲覧する最初のノードを制御するため，そしてInfoファイルを探す
ディレクトリを指定するため，いくつかのオプションを受け入れます．シェルか
らGNU Infoの呼び出しを表しているテンプレートは以下のようになります．

@example
info [@var{option}]@dots{} [@var{menu-item}@dots{}]
@end example

@c The program accepts the following options:
@c 
プログラムは，以下のオプションを受け入れます．

@table @code
@anchor{--apropos}
@item --apropos=@var{string}
@cindex Searching all indices
@cindex Info files@r{, searching all indices}
@cindex Apropos@r{, in Info files}
@c Specify a string to search in every index of every Info file installed
@c on your system.  Info looks up the named @var{string} in all the indices
@c it can find, prints the results to standard output, and then exits.  If
@c you are not sure which Info file explains certain issues, this option is
@c your friend.  Note that if your system has a lot of Info files
@c installed, searching all of them might take some time.
@c 
システムにインストールされているすべてのInfoファイルの全ての索引で検索す
る文字列を指定します．Infoは，検索が可能な全ての索引で@var{string}で指名
されているものを探し，結果を標準出力に出力し，そして終了します．特定の問
題を説明しているInfoファイルが不確かな場合，このオプションが味方になりま
す．システムに多くのInfoファイルがインストールされている場合，全ての検索
に多少時間がかかることに注意してください．

@c You can invoke the apropos command from inside Info; see
@c @ref{Searching Commands}.
@c 
Info内部から適切なコマンドを呼び出すことが可能です．@ref{Searching
Commands}を参照してください．

@cindex directory path
@item --directory @var{directory-path}
@itemx -d @var{directory-path}
@c Prepend @var{directory-path} to the list of directory paths searched
@c when Info needs to find a file.  You may issue @code{--directory}
@c multiple times; once for each directory which contains Info files.  The
@c list of directories searched by Info is constructed from the value of
@c the environment variable @code{INFOPATH}; @code{--directory} causes the
@c named @var{directory-path} to be prepended to that list.  The value of
@c @code{INFOPATH} is a list of directories usually separated by a colon;
@c on MS-DOS/MS-Windows systems, the semicolon is used.  If you do not
@c define @code{INFOPATH}, Info uses a default path defined when Info was
@c built as the initial list of directories.  If the value of
@c @code{INFOPATH} ends with a colon (or semicolon on MS-DOS/MS-Windows),
@c the initial list of directories is constructed by appending the
@c build-time default to the value of @code{INFOPATH}.
@c 
Infoファイルを探す必要があるとき，検索するディレクトリのリストに
@var{directory-path}を前置します．複数回@code{--directory}を使用してもか
まいません．Infoファイルを含むそれぞれのディレクトリにつき一回です．Info 
が検索するディレクトリリストは，環境変数@code{INFOPATH}の値から成り立ち
ます．@code{--directory}は，@var{directory-path}で指名されたものを，その
リストに前置します．@code{INFOPATH}の値は，通常コロンで分けられたディレ
クトリリストです．MS-DOS/MS-Windowsシステムでは，セミコロンが使用されま
す．@code{INFOPATH}を定義していない場合，Infoは，ビルドされたときに定義
されたデフォルトパスをディレクトリの初期リストとして使用します．
@code{INFOPATH}がコロン(または，MS-DOS/MS-Windowsでのセミコロン)で終る場
合，ディレクトリの初期リストは，ビルド時のデフォルトに@code{INFOPATH}の
値を加えます．

@cindex keystrokes, recording
@cindex remembering user keystrokes
@item --dribble=@var{dribble-file}
@c Specify a file where all user keystrokes will be recorded.  This file
@c can be used later to replay the same sequence of commands, see the
@c @samp{--restore} option below.
@c 
全てのユーザのキーストロークを記録するファイルを指定します．このファイル
は，コマンドを同じ順序で再生するために後で使用することが可能です．以下の
@samp{--restore}オプションを参照してください．

@item --file @var{filename}
@itemx -f @var{filename}
@cindex Info file, selecting
@c Specify a particular Info file to visit.  By default, Info visits
@c the file @code{dir}; if you use this option, Info will start with
@c @code{(@var{filename})Top} as the first file and node.
@c 
閲覧する特定のInfoファイルを指定します．デフォルトで，Infoはファイル
@code{dir}を閲覧します．このオプションを使用した場合，Infoは最初のファイ
ルとノードとして，@code{(@var{filename})Top}で開始します．

@cindex relative Info file names
@cindex file names, relative
@cindex Info files, relative
@c If @var{filename} is an absolute file name, or begins with @file{./} or
@c @file{../}, Info looks for @var{filename} only in the directory of the
@c specified @var{filename}, and adds the directory of @var{filename} to
@c the value of @code{INFOPATH}.  In contrast, if @var{filename} is in the
@c form of a relative file name, but without the @file{./} or @file{../}
@c prefix, Info will only look for it in the directories specified in
@c @code{INFOPATH}.  In other words, Info does @emph{not} treat file names
@c which lack @file{./} and @file{../} prefix as relative to the current
@c directory.
@c 
@var{filename}が絶対パスのファイル名や，@file{./}や@file{../}で始まる場
合，Infoは@var{filename}を指定された@var{filename}のディレクトリのみで検
索し，@var{filename}のディレクトリを@code{INFOPATH}の値に追加します．対
照的に，@var{filename}が相対パスのファイル名の形式で，@file{./}や
@file{../} が前置されていない場合，Infoは@code{INFOPATH}で指定されたディ
レクトリのみで探します．言い換えると，Infoは@file{./}と@file{../}の前置
が無いファイル名をカレントディレクトリの相対パスにあるものとして扱い
@emph{ません}．

@cindex compressed Info files
@cindex files, compressed
@cindex Info files, compressed
@c In every directory Info tries, if @var{filename} is not found, Info
@c looks for it with a number of known extensions of Info files@footnote{
@c @file{.info}, @file{-info}, @file{/index}, and @file{.inf}.}.  For every
@c known extension, Info looks for a compressed file, if a regular file
@c isn't found.  Info supports files compressed with @code{gzip},
@c @code{bzip2}, @code{compress} and @code{yabba} programs; it calls
@c @code{gunzip}, @code{bunzip2}, @code{uncompress} and @code{unyabba},
@c accordingly, to decompress such files.  Compressed Info files are
@c assumed to have @file{.z}, @file{.gz}, @file{.bz2}, @file{.Z}, or
@c @file{.Y} extensions, possibly in addition to one of the known Info
@c files extensions@footnote{The MS-DOS version allows for the Info
@c extension, such as @code{.inf}, and the short compressed file
@c extensions, such as @file{.z} and @file{.gz}, to be merged into a single
@c extension, since DOS doesn't allow more than a single dot in the
@c basename of a file.  Thus, on MS-DOS, if Info looks for @file{bison},
@c file names like @file{bison.igz} and @file{bison.inz} will be found and
@c decompressed by @code{gunzip}.}.
@c 
Infoが試みる全てのディレクトリで@var{filename}が見付からない場合，Info 
はInfoファイルの数ある既知の拡張子@footnote{ @file{.info}，@file{-info}，
@file{/index}と，@file{.inf}.}でそれを探します．全ての既知の拡張子に対し，
通常のファイルが見付からない場合，Infoは圧縮されたファイルを探します．
Infoは，@code{gzip}，@code{bzip2}，@code{compress}，そして@code{yabba}プ
ログラムで圧縮されたファイルをサポートしています．そのようなファイルを展
開するために，それぞれ@code{gunzip}，@code{bunzip2}，@code{uncompress}，
そして@code{unyabba}を呼び出します．圧縮されたInfoファイルは，おそらく既
知のInfoファイルの拡張子の一つに，@file{.z}，@file{.gz}，@file{.bz2}，
@file{.Z}や，@file{.Y}の拡張子が追加されたものになっていると考えられます
@footnote{MS-DOS版では，DOSはファイルのベース名で一つのドット以外を許可
していないので，@code{.inf}のようなInfo拡張子と，@file{.z}と@file{.gz}の
ような短い圧縮ファイルの拡張子を，単一の拡張子に統合することを許可してい
ます．このためMS-DOSでは，Infoが@file{bison}を探す場合，@file{bison.igz} 
と@file{bison.inz}のようなファイル名を探し，@code{gunzip}で展開します．}．

@item --help
@itemx -h
@c Produces a relatively brief description of the available Info options.
@c 
利用可能なInfoオプションの比較的短い記述を生成します．

@item --index-search @var{string}
@cindex index search, selecting from the command line
@cindex online help, using Info as
@c After processing all command-line arguments, go to the index in the Info
@c file and search for index entries which matche @var{string}.  If such an
@c entry is found, the Info session begins with displaying the node pointed
@c to by the first matching index entry; press @kbd{,} to step through the
@c rest of the matching entries.  If no such entry exists, print @samp{no
@c entries found} and exit with nonzero status.  This can be used from
@c another program as a way to provide online help, or as a quick way of
@c starting to read an Info file at a certain node when you don't know the
@c exact name of that node.
@c 
全てのコマンドライン引数を処理した後，Infoファイルの索引に行き，
@var{string}に一致する索引項目を探します．そのような項目が見付かった場合，
Infoセッションは，最初に一致した項目が指し示しているノードの表示を開始し
ます．一致した項目の残りへ行くために@kbd{,}を押してください．そのような
項目が存在しない場合，@samp{no entries found}と出力し，ゼロではないステー
タスで終了します．これは，他のプログラムからのオンラインヘルプを供給する
方法として使用したり，正確なノード名を知らないとき，特定のノードでInfoファ
イルを読むことを開始する素早い方法として使用できます．

@c This command can also be invoked from inside Info; see @ref{Searching
@c Commands}.
@c 
このコマンドは，Info内部から呼び出すことも可能です．@ref{Searching
Commands}を参照してください．

@item --node @var{nodename}
@itemx -n @var{nodename}
@cindex node, selecting from the command line
@c Specify a particular node to visit in the initial file that Info
@c loads.  This is especially useful in conjunction with
@c @code{--file}@footnote{Of course, you can specify both the file and node
@c in a @code{--node} command; but don't forget to escape the open and
@c close parentheses and whitespace from the shell as in: @code{info --node
@c "(emacs)Buffers"}.}.  You may specify @code{--node} multiple times; for
@c an interactive Info, each @var{nodename} is visited in its own window,
@c for a non-interactive Info (such as when @code{--output} is given) each
@c @var{nodename} is processed sequentially.
@c 
Infoの初期ファイルで訪問する特定のノードを指定します．@code{--file}と一
緒に組み合わせると特に役に立ちます@footnote{もちろん，ファイルとノードの
両方を@code{--node}コマンドで指定することが可能です．しかし，@code{info
--node "(emacs)Buffers"}のように，シェルでは開きカッコと閉じカッコと空白
によるエスケープを忘れてはいけません．}．@code{--node}を複数回指定しても
かまいません．対話的なInfoでは，それぞれの@var{nodename}は独自のウィンド
ウで閲覧され，対話的でないInfo(@code{--output}が与えられたようなとき)で
は，それぞれの@var{nodename}は順番に処理されます．

@item --output @var{filename}
@itemx -o @var{filename}
@cindex file, outputting to
@cindex outputting to a file
@c Specify @var{filename} as the name of a file to which to direct output.
@c Each node that Info visits will be output to @var{filename} instead of
@c interactively viewed.  A value of @code{-} for @var{filename} specifies
@c the standard output.
@c 
直接出力するファイル名として@var{filename}を指定します．Infoで閲覧するそ
れぞれのノードは，対話的に閲覧するのではなく，@var{filename}に出力されま
す．@var{filename}に対する@code{-}の値で，標準出力を指定します．

@cindex colors in man pages
@cindex ANSI escape sequences in man pages
@item --raw-escapes
@itemx -R
@c Do not remove ANSI escape sequences from man pages.  Some versions of
@c Groff, the GNU document formatter, produce man pages with ANSI escape
@c sequences for bold, italics, and underlined characters, and for
@c colorized text.  By default, Info removes those escape sequences
@c before it displays the man page.  If your terminal supports these
@c escapes, use @code{--raw-escapes} to let the terminal handle them and
@c display the man pages with those attributes.
@c 
manページからANSIのエスケープシーケンスを削除しません．GNUドキュメント
フォーマッタのGroffのバージョンによっては，ボールド，イタリック，そして
下線が引かれた文字や，色付きの文字に対して，ANSIエスケープシーケンスを用
いたmanページを生成します．デフォルトでは，manページを表示する前に，Info 
はこれらのエスケープシーケンスを削除します．端末がこれらのエスケープシー
ケンスをサポートしている場合，端末にそれらを処理させ，manページをその属
性を用いて表示するために．@code{--raw-escapes}を使用してください．

@cindex replaying recorded keystrokes
@item --restore=@var{dribble-file}
@c Read keystrokes from @var{dribble-file}, presumably recorded during
@c previous Info session (see the description of the @samp{--dribble}
@c option above).  When the keystrokes in the files are all read, Info
@c reverts its input to the usual interactive operation.
@c 
これまでのInfoセッションの間に記録されている(上記の@samp{--dribble}オプ
ションの記述を参照してください)@var{dribble-file}からキーストロークを読
み出します．ファイルのキーストロークが全て読まれたとき，Infoは，その入力
を通常の対話的操作に戻します．

@anchor{--show-options}
@cindex command-line options, how to find
@cindex invocation description, how to find
@item --show-options
@itemx --usage
@itemx -O
@c This option causes Info to look for the node that describes how to
@c invoke the program and its command-line options, and begin the session
@c by displaying that node.  It is provided to make it easier to find the
@c most important usage information in a manual without the need to wade
@c through complex menu hierarchies.  The effect is similar to the
@c @code{M-x goto-invocation} command (@pxref{goto-invocation}) from inside
@c Info.
@c 
このオプションは，プログラムの呼び出し方とそのコマンドラインオプションを
記述しているノードを探し，そのノードを表示することように，Infoにセッショ
ンを開始させます．それは，複雑なメニュー階層を通り抜ける必要無く，マニュ
アルの最も重要な使用方法の情報を探すことを簡単するために提供されています．
その効果は，Info内部からの@code{M-x goto-invocation}コマンド
(@pxref{goto-invocation})に似ています．

@cindex speech synthesizers
@item --speech-friendly
@itemx -b
@c On MS-DOS/MS-Windows only, this option causes Info to use standard file
@c I/O functions for screen writes.  (By default, Info uses direct writes
@c to the video memory on these systems, for faster operation and colored
@c display support.)  This allows the speech synthesizers used by blind
@c persons to catch the output and convert it to audible speech.
@c 
MS-DOS/MS-Windowsのみで，このオプションで，Infoは標準ファイルI/O関数を使
用して画面に表示します．(デフォルトでは，オペレーションを高速し，カラー
ディスプレイをサポートするため，Infoはこれらのシステムで直接ビデオメモリ
に書き出します．)これで，目が見えない人が使用しているスピーチシンセサイ
ザーで出力を捕らえ，音声のスピーチに変換することが可能になります．

@item --subnodes
@cindex @code{--subnodes}, command line option
@c This option only has meaning when given in conjunction with
@c @code{--output}.  It means to recursively output the nodes appearing in
@c the menus of each node being output.  Menu items which resolve to
@c external Info files are not output, and neither are menu items which are
@c members of an index.  Each node is only output once.
@c 
このオプションは，@code{--output}と一緒に与えられたときのみ意味がありま
す．それは，出力されているそれぞれのノードのメニューに現われるノードを，
再帰的に出力することを意味します．外部Infoファイルが解決するメニュー項目
は出力されず，索引のメンバーとなっているメニュー項目もそうです．それぞれ
のノードは一度だけ出力されます．

@item --version
@cindex version information
@c Prints the version information of Info and exits.
@c 
Infoのバージョン情報を出力し終了します．

@anchor{--vi-keys}
@cindex vi-like key bindings
@cindex Less-like key bindings
@item --vi-keys
@c This option binds functions to keys differently, to emulate the key
@c bindings of @code{vi} and Less.  The default key bindings are generally
@c modeled after Emacs.
@c (@xref{Custom Key Bindings},
@c for a more general way of altering GNU Info's key bindings.)
@c 
このオプションは，@code{vi}とLessのキーバインドをエミュレートするために，
機能を異なるキーに割り当てます．デフォルトのキーバインドは，通常Emacs を
モデルにしています(GNU Infoのキーバインドを変更する一般的な方法の詳細は
@pxref{Custom Key Bindings})．

@item @var{menu-item}
@cindex menu, following
@anchor{command-line menu items}
@c Info treats its remaining arguments as the names of menu items.  The
@c first argument is a menu item in the initial node visited (generally
@c @code{dir}), the second argument is a menu item in the first argument's
@c node, etc.  You can easily move to the node of your choice by specifying
@c the menu names which describe the path to that node.  For example,
@c 
Infoはその残りの引数を，メニュー項目の名前として扱います．最初の引数は閲
覧しようとする初期ノードのメニュー項目で(通常は@code{dir})，二番目の引数
は最初の引数のノードのメニュー項目等のようになります．そのノードへのパス
を記述したメニュー名を指定することで，選択したノードに簡単に移動できます．
例えば以下のようにします．

@example
info emacs buffers
@end example

@noindent
@c first selects the menu item @samp{Emacs} in the node @samp{(dir)Top},
@c and then selects the menu item @samp{Buffers} in the node
@c @samp{(emacs)Top}.
@c 
最初にノード@samp{(dir)Top}のメニュー項目@samp{Emacs}を選択し，そしてノー
ド@samp{(emacs)Top}のメニュー項目@samp{Buffers}を選択します．
@end table

@c To avoid searching the @file{dir} files and just show some arbitrary
@c file, use @samp{-f} and the filename, as in @samp{info -f ./foo.info}.
@c 
@file{dir}ファイルの検索を避け，すぐに任意のファイルを表示させるため
@samp{-f}とファイル名を，@samp{info -f ./foo.info}のように使用してくださ
い．

@c The index search and the search for the node which describes program
@c invocation and command-line options begins @emph{after} processing all
@c the command-line menu items.  Therefore, the Info file searched for the
@c index or the invocation node is the file where Info finds itself after
@c following all the menu items given on the command line.  This is so
@c @samp{info emacs --show-options} does what you'd expect.
@c 
索引の検索とプログラムの呼び出しとコマンドラインオプションを記述している
ノードの検索は，全てのメニュー項目を処理した@emph{後に}開始します．この
ため，索引やノード呼び出しで検索されたInfoファイルは，コマンドラインで与
えられている全てのメニュー項目をたどった後にInfo自身が見つけたファイルに
なります．これは，@samp{info emacs --show-options}で期待したものになりま
す．

@c FIXME: the feature with lowercasing the file name isn't documented


@node Cursor Commands
@c @chapter Moving the Cursor
@chapter カーソルの移動
@cindex cursor, moving
@cindex moving the cursor

@c Many people find that reading screens of text page by page is made
@c easier when one is able to indicate particular pieces of text with some
@c kind of pointing device.  Since this is the case, GNU Info (both the
@c Emacs and standalone versions) have several commands which allow you to
@c move the cursor about the screen.  The notation used in this manual to
@c describe keystrokes is identical to the notation used within the Emacs
@c manual, and the GNU Readline manual.  @xref{Characters, , Character
@c Conventions, emacs, the GNU Emacs Manual}, if you are unfamiliar with the
@c notation@footnote{
@c Here's a short summary.  @kbd{C-@var{x}} means press the @kbd{CTRL} key
@c and the key @var{x}.  @kbd{M-@var{x}} means press the @kbd{META} key and
@c the key @var{x}.  On many terminals th @kbd{META} key is known as the
@c @kbd{ALT} key.  @kbd{SPC} is the space bar.  The other keys are usually
@c called by the names imprinted on them.}.
@c 
テキストページをページ単位で画面に表示されているのを読む際に，ある種のポ
インティングデバイスでテキストの特定の部分を示すことができれば，より読み
易いことを多くの人は知っています．こういうわけで，GNU Info(Emacsとスタン
ドアローンバージョンの両方)には，画面上でのカーソル移動が可能になるコマ
ンドもあります．キーストロークを記述するため，このマニュアルで使用される
表記方法は，EmacsマニュアルとGNU Readlineマニュアルで使用された表記方法
と同じです．その表記に慣れていない場合@footnote{短い概要は以下のようにな
ります．@kbd{C-@var{x}}は@kbd{CTRL}キーと@var{x}を押すことを意味します．
@kbd{M-@var{x}}は@kbd{META}キーと@var{x}キーを押すことを意味します．多く
の端末で@kbd{META}キーは@kbd{ALT}キーとして知られています．@kbd{SPC}キー
はスペースバーです．他のキーは，通常それらに表示されている名前で呼ばれま
す．}，@xref{Characters, , Character Conventions, emacs, the GNU Emacs
Manual}.

@c The following table lists the basic cursor movement commands in Info.
@c Each entry consists of the key sequence you should type to execute the
@c cursor movement, the @code{M-x}@footnote{@code{M-x} is also a command; it
@c invokes @code{execute-extended-command}.  @xref{M-x, , Executing an
@c extended command, emacs, the GNU Emacs Manual}, for more detailed
@c information.} command name (displayed in parentheses), and a short
@c description of what the command does.  All of the cursor motion commands
@c can take a @dfn{numeric} argument (see @ref{Miscellaneous Commands,
@c @code{universal-argument}, to find out how to supply them}.  With a
@c numeric argument, the motion commands are simply executed that
@c many times; for example, a numeric argument of 4 given to
@c @code{next-line} causes the cursor to move down 4 lines.  With a
@c negative numeric argument, the motion is reversed; an argument of -4
@c given to the @code{next-line} command would cause the cursor to move
@c @emph{up} 4 lines.
@c 
以下の表では，Infoでカーソルを移動する基本的なコマンドをリストアップして
います．それぞれの項目は，カーソル移動を実行するため入力するキーの順序，
@code{M-x}@footnote{@code{M-x}もコマンドです．それは
@code{execute-extended-command}を呼び出します．詳細は，@xref{M-x, ,
Executing an extended command, emacs, the GNU Emacs Manual}.}コマンド名
(カッコ内に表示)，そしてコマンドが行うことの短い記述から成り立っています．
全てのカーソル移動コマンドは，@dfn{数値(numeric)}の引数をとります
(@ref{Miscellaneous Commands, @code{universal-argument}, to find out how
to supply them}を参照してください)．数字の引数を用いることで，移動コマン
ドを単純に複数回実行します．例えば，@code{next-line}に4という数字の引数
が与えられた場合，カーソルは四行下に移動します．負の数字の引数を用いるこ
とで，移動は逆になります．-4が@code{next-line}に与えられると，カーソルは
四行@emph{上に}移動します．

@table @asis
@item @key{C-n} (@code{next-line})
@itemx @key{DOWN} (an arrow key)
@kindex C-n
@kindex DOWN (an arrow key)
@findex next-line
@c Move the cursor down to the next line.
@c 
カーソルを次の行に進めます．

@item @key{C-p} (@code{prev-line})
@itemx @key{UP} (an arrow key)
@kindex C-p
@kindex UP (an arrow key)
@findex prev-line
@c Move the cursor up to the previous line.
@c 
カーソルを前の行に戻します．

@item @key{C-a} (@code{beginning-of-line})
@itemx @key{Home} (on DOS/Windows only)
@kindex C-a, in Info windows
@kindex Home
@findex beginning-of-line
@c Move the cursor to the start of the current line.
@c 
カーソルを現在の行頭に戻します．

@item @key{C-e} (@code{end-of-line})
@itemx @key{End} (on DOS/Windows only)
@kindex C-e, in Info windows
@kindex End
@findex end-of-line
@c Move the cursor to the end of the current line.
@c 
カーソルを現在の行末に進めます．

@item @key{C-f} (@code{forward-char})
@itemx @key{RIGHT} (an arrow key)
@kindex C-f, in Info windows
@kindex RIGHT (an arrow key)
@findex forward-char
@c Move the cursor forward a character.
@c 
カーソルを次の文字に進めます．

@item @key{C-b} (@code{backward-char})
@itemx @key{LEFT} (an arrow key)
@kindex C-b, in Info windows
@kindex LEFT (an arrow key)
@findex backward-char
@c Move the cursor backward a character.
@c 
カーソルを前の文字に戻します．

@item @key{M-f} (@code{forward-word})
@itemx @kbd{C-@key{RIGHT}} (on DOS/Windows only)
@kindex M-f, in Info windows
@kindex C-RIGHT
@findex forward-word
@c Move the cursor forward a word.
@c 
カーソルを一単語先に進めます．

@item @key{M-b} (@code{backward-word})
@itemx @kbd{C-@key{LEFT}} (on DOS/Windows only)
@kindex M-b, in Info windows
@kindex C-LEFT
@findex backward-word
@c Move the cursor backward a word.
@c 
カーソルを一単語前に戻します．

@item @key{M-<} (@code{beginning-of-node})
@itemx @key{C-@key{Home}} (on DOS/Windows only)
@itemx @key{b}
@itemx @key{M-b}, vi-like operation
@kindex b, in Info windows
@kindex M-<
@kindex C-Home
@kindex M-b, vi-like operation
@findex beginning-of-node
@c Move the cursor to the start of the current node.
@c 
カーソルを現在のノードの最初に戻します．

@item @key{M->} (@code{end-of-node})
@itemx @key{C-@key{End}} (on DOS/Windows only)
@itemx @key{e}
@kindex M->
@kindex e, in Info windows
@kindex C-End
@findex end-of-node
@c Move the cursor to the end of the current node.
@c 
カーソルを現在のノードの終りに進めます．

@item @key{M-r} (@code{move-to-window-line})
@kindex M-r
@findex move-to-window-line
@c Move the cursor to a specific line of the window.  Without a numeric
@c argument, @code{M-r} moves the cursor to the start of the line in the
@c center of the window.  With a numeric argument of @var{n}, @code{M-r}
@c moves the cursor to the start of the @var{n}th line in the window.
@c 
カーソルをウィンドウの指定した行に移動します．数字の引数が無い場合，
@code{M-r}はカーソルをウィンドウの真中の行の最初に移動します．@var{n}の
数字の引数を用いた場合，@code{M-r}はウィンドウの@var{n}番目の行の最初に
カーソルを移動します．
@end table


@node Scrolling Commands
@c @chapter Moving Text Within a Window
@chapter ウィンドウでのテキストの移動
@cindex scrolling

@c Sometimes you are looking at a screenful of text, and only part of the
@c current paragraph you are reading is visible on the screen.  The
@c commands detailed in this section are used to shift which part of the
@c current node is visible on the screen.
@c 
画面いっぱいのテキストを見ているときもあり，現在読んでいる段落の一部のみ
が画面に表示されてることがあります．このセクションで詳述されるコマンドは，
画面に表示されている現在のノードの部分をずらすために使用されます．

@c Scrolling commands are bound differently when @samp{--vi-keys} operation
@c is in effect (@pxref{--vi-keys}).  These key bindings are designated
@c with ``vi-like operation''.
@c 
@samp{--vi-keys}オペレーションが効果があるとき(@pxref{--vi-keys})，スク
ロールコマンドの割り当てが異なっています．これらのキーバインドは，``viの
ような操作''で設計されています．

@table @asis
@item @key{SPC} (@code{scroll-forward})
@kindex SPC, in Info windows
@findex scroll-forward
@c Shift the text in this window up.  That is, show more of the node which
@c is currently below the bottom of the window.  With a numeric argument,
@c show that many more lines at the bottom of the window; a numeric
@c argument of 4 would shift all of the text in the window up 4 lines
@c (discarding the top 4 lines), and show you four new lines at the bottom
@c of the window.  Without a numeric argument, @key{SPC} takes the bottom
@c two lines of the window and places them at the top of the window,
@c redisplaying almost a completely new screenful of lines.  If you are at
@c the end of a node, @key{SPC} takes you to the ``next'' node, so that you can
@c read an entire manual from start to finish by repeating @key{SPC}.
@c 
このウィンドウでテキストを上にずらしします．すなわち，現在ウィンドウの下
にあるノードをより多く表示します．数字の引数を用いた場合，ウィンドウの下
にある，さらに多くの行を表示します．数字の引数が4の場合，ウィンドウの全
てのテキストは四行上に移動し(上の四行は削除し)，ウィンドウの下に新しい四
行を表示します．数字の引数が無い場合，@key{SPC}は，ウィンドウの下の二行
をウインドウの上に持っていき，画面全体をほとんど新しい行で完全に再表示し
ます．ノードの終りにいる場合，繰り返し@key{SPC}を押すことでマニュアル全
体の最初から最後まで読むことができるように，@key{SPC}で``next(次の)''ノー
ドへ移動します．

@c The default scroll size is one screen-full, but it can be changed by
@c invoking the (@code{scroll-forward-page-only-set-window}) command,
@c @samp{z} under @samp{--vi-keys}, with a numeric argument.
@c 
デフォルトのスクロールサイズは一画面ですが，数字の引数を用いた，
(@code{scroll-forward-page-only-set-window})コマンド，@samp{--vi-keys} 
では@samp{z}の呼び出しで変更することが可能です．

@item @key{NEXT} (an arrow key) (@code{scroll-forward-page-only})
@itemx @key{C-v}
@itemx @key{C-f}, vi-like operation
@itemx @key{f}, vi-like operation
@itemx @key{M-SPC}, vi-like operation
@kindex NEXT
@kindex C-v
@kindex C-f, vi-like operation
@kindex f, vi-like operation
@kindex M-SPC, vi-like operation
@findex scroll-forward-page-only
@c Shift the text in this window up.  This is identical to the @key{SPC}
@c operation above, except that it never scrolls beyond the end of the
@c current node.
@c 
このウィンドウのテキストを上に移動します．これは，現在のノードの終りを越
えてまでスクロールしない以外，上記の@key{SPC}の処理と同じです．

@kindex PageDown
@c The @key{NEXT} key is known as the @key{PageDown} key on some
@c keyboards.
@c 
@key{NEXT}キーは@key{PageDown}キーとして知られているキーボードもあります．

@item @key{z} (@code{scroll-forward-page-only-set-window}, vi-like operation)
@kindex z, vi-like operation
@findex scroll-forward-page-only-set-window
@c Scroll forward, like with @key{NEXT}, but if a numeric argument is
@c specified, it becomes the default scroll size for subsequent
@c @code{scroll-forward} and @code{scroll-backward} commands and their
@c ilk.
@c 
@key{NEXT}のように前方にスクロールしますが，数字の引数が指定されている場
合，それは次の@code{scroll-forward}と@code{scroll-backward}コマンド，そ
してそれと同等のコマンドのデフォルトスクロールサイズとなります．

@item @key{DEL} (@code{scroll-backward})
@kindex DEL, in Info windows
@findex scroll-backward
@c Shift the text in this window down.  The inverse of
@c @code{scroll-forward}.
@c If you are at the start of a node, @key{DEL} takes you to the
@c ``previous'' node, so that you can read an entire manual from finish to
@c start by repeating @key{DEL}.  The default scroll size can be changed by
@c invoking the (@code{scroll-backward-page-only-set-window}) command,
@c @samp{w} under @samp{--vi-keys}, with a numeric argument.
@c 
このウィンドウのテキストを下に移動します．@key{DEL}を繰り返すことでマニュ
アル全体の最後から最初まで読むことが可能になるように，@key{DEL}では
``previous''のノードに移動します．デフォルトのスクロールサイズは，数字の
引数を用いた，@code{scroll-backward-set-window}コマンド，
@samp{--vi-keys}では@samp{w}の呼び出しで変更可能です．

@itemx @key{PREVIOUS} (arrow key) (@code{scroll-backward-page-only})
@itemx @key{PRIOR} (arrow key)
@itemx @key{M-v}
@itemx @key{b}, vi-like operation
@itemx @key{C-b}, vi-like operation
@kindex PREVIOUS
@kindex M-v
@kindex b, vi-like operation
@kindex C-b, vi-like operation
@findex scroll-backward-page-only
@c Shift the text in this window down.  The inverse of
@c @code{scroll-forward-page-only}.  Does not scroll beyond the start of
@c the current node.  The default scroll size can be changed by invoking
@c the(@code{scroll-backward-page-only-set-window}) command, @samp{w} under
@c @samp{--vi-keys}, with a numeric argument.
@c 
このウィンドウのテキストを下に移動します．@code{scroll-forward}の逆です．
現在のノードの最初を越えてまでスクロールしません．デフォルトのスクロール
サイズは，数字の引数を用いた，
@code{scroll-backward-page-only-set-window}コマンド，@samp{--vi-keys} で
は@samp{w}の呼び出しで変更可能です．

@item @key{w} (@code{scroll-backward-page-only-set-window}, vi-like operation)
@kindex w, vi-like operation
@findex scroll-backward-page-only-set-window
@c Scroll backward, like with @key{PREVIOUS}, but if a numeric argument is
@c specified, it becomes the default scroll size for subsequent
@c @code{scroll-forward} and @code{scroll-backward} commands.
@c 
@key{PREVIOUS}のように後方にスクロールしますが，数字の引数が指定される場
合，それはそれ以降の@code{scroll-forward}と@code{scroll-backward}コマン
ドのデフォルトスクロールサイズになります．

@item @key{C-n} (@code{down-line}, vi-like operation)
@itemx @key{C-e}, vi-like operation
@itemx @key{RET}, vi-like operation
@itemx @key{LFD}, vi-like operation
@itemx @key{DOWN}, vi-like operation
@kindex C-n, vi-like operation
@kindex C-e, vi-like operation
@kindex RET, vi-like operation
@kindex LFD, vi-like operation
@kindex DOWN, vi-like operation
@findex down-line
@c Scroll forward by one line.  With a numeric argument, scroll forward
@c that many lines.
@c 
一行前方にスクロールします．数字の引数を用いた場合，複数行前方にスクロー
ルします．

@item @key{C-p} (@code{up-line}, vi-like operation)
@itemx @key{UP}, vi-like operation
@itemx @key{y}, vi-like operation
@itemx @key{k}, vi-like operation
@itemx @key{C-k}, vi-like operation
@itemx @key{C-y}, vi-like operation
@kindex C-p, vi-like operation
@kindex UP, vi-like operation
@kindex y, vi-like operation
@kindex k, vi-like operation
@kindex C-k, vi-like operation
@kindex C-y, vi-like operation
@findex up-line
@c Scroll backward one line.  With a numeric argument, scroll backward that
@c many lines.
@c 
一行後方にスクロールします．数字の引数を用いた場合，複数行後方にスクロー
ルします．

@item @key{d} (@code{scroll-half-screen-down}, vi-like operation)
@itemx @key{C-d}, vi-like operation
@kindex d, vi-like operation
@kindex C-d, vi-like operation
@findex scroll-half-screen-down
@c Scroll forward by half of the screen size.  With a numeric argument,
@c scroll that many lines.  If an argument is specified, it becomes the new
@c default number of lines to scroll for subsequent @samp{d} and @samp{u}
@c commands.
@c 
画面の半分のサイズを前方にスクロールします．数字の引数を用いた場合，複数
行スクロールします．引数が指定された場合，それは，それ以降の@samp{d}と
@samp{u}コマンドに対する，新しいデフォルトの行数になります．

@item @key{u} (@code{scroll-half-screen-up}, vi-like operation)
@itemx @key{C-u}, vi-like operation
@kindex u, vi-like operation
@kindex C-u, vi-like operation
@findex scroll-half-screen-up
@c Scroll back by half of the screen size.  With a numeric argument,
@c scroll that many lines.  If an argument is specified, it becomes the new
@c default number of lines to scroll for subsequent @samp{u} and @samp{d}
@c commands.
@c 
画面の半分のサイズ後方にスクロールします．数字の引数を用いた場合，複数行
スクロールします．引数が指定された場合，それは，それ以降の@samp{d}と
@samp{u}コマンドに対する，新しいデフォルトの行数になります．
@end table

@cindex scrolling through node structure
@c The @code{scroll-forward} and @code{scroll-backward} commands can also
@c move forward and backward through the node structure of the file.  If
@c you press @key{SPC} while viewing the end of a node, or @key{DEL} while
@c viewing the beginning of a node, what happens is controlled by the
@c variable @code{scroll-behavior}.  @xref{Variables,
@c @code{scroll-behavior}}, for more information.
@c 
@code{scroll-forward}と@code{scroll-backward}コマンドは，ファイルのノー
ド構造全体を前方にも後方にも移動可能です．ノードの終りを見ているときに
@key{SPC}を押した場合や，ノードの始め見ているときに@key{DEL}押した場合は，
変数@code{scroll-behavior}で制御されるようになります．詳細は，
@xref{Variables, @code{scroll-behavior}}.

@c The @code{scroll-forward-page-only} and @code{scroll-backward-page-only}
@c commands never scroll beyond the current node.
@c 
@code{scroll-forward-page-only}と@code{scroll-backward-page-only}コマン
ドは，現在のノードを越えてまでスクロールしません．

@kindex PageUp
@c The @key{PREVIOUS} key is the @key{PageUp} key on many keyboards.  Emacs
@c refers to it by the name @key{PRIOR}.  When you use @key{PRIOR} or
@c @key{PageUp} to scroll, Info never scrolls beyond the beginning of the
@c current node.
@c 
@key{PREVIOUS}キーは，多くのキーボードでは@key{PageUp}キーです．Emacsは
名前@key{PRIOR}でそれを参照します．@key{PRIOR}や@key{PageUp}をスクロール
に使用するとき，Infoは現在のノードの最初までしかスクロールしません．

@kindex BS (backspace)
@c If your keyboard lacks the @key{DEL} key, look for a key called
@c @key{BS}, or @samp{BackSpace}, sometimes designated with an arrow which
@c points to the left, which should perform the same function.
@c 
@key{DEL}キーが無い場合，@key{BS}，または，同じ機能を実行する，左矢印で
デザインされていることもある@samp{BackSpace}を探してください．

@table @asis
@item @key{C-l} (@code{redraw-display})
@kindex C-l
@findex redraw-display
@c Redraw the display from scratch, or shift the line containing the cursor
@c to a specified location.  With no numeric argument, @samp{C-l} clears
@c the screen, and then redraws its entire contents.  Given a numeric
@c argument of @var{n}, the line containing the cursor is shifted so that
@c it is on the @var{n}th line of the window.
@c 
最初から画面を再描画したり，カーソルを含む行を指定した位置にシフトします．
数字の引数が無い場合，@samp{C-l}は画面を消去し，内容全体を再描画します．
数字の引数@var{n}が与えられている場合，カーソルを含む行がウィンドウの
@var{n}番目の行になるようにシフトされます．

@item @kbd{C-x @key{w}} (@code{toggle-wrap})
@kindex C-w
@findex toggle-wrap
@c Toggles the state of line wrapping in the current window.  Normally,
@c lines which are longer than the screen width @dfn{wrap}, i.e., they are
@c continued on the next line.  Lines which wrap have a @samp{\} appearing
@c in the rightmost column of the screen.  You can cause such lines to be
@c terminated at the rightmost column by changing the state of line
@c wrapping in the window with @code{C-x w}.  When a line which needs more
@c space than one screen width to display is displayed, a @samp{$} appears
@c in the rightmost column of the screen, and the remainder of the line is
@c invisible.  When long lines are truncated, the modeline displays the
@c @samp{$} character near its left edge.
@c 
現在のウィンドウで行の折り返しの状態を変更します．通常は画面より長い行を
@dfn{折り返し(wrap)}，すなわち次の行に続けます．折り返された行では，画面
の右端の列に@samp{\}が現われます．@code{C-x w}を用いてウィンドウの行の折
り返しの状態を変更することで，そのような行を右端の列で終端させることが可
能です．表示するための一画面の幅より多くの空間を必要とする行を表示すると
き，画面の右端の列に@samp{$}が現われ，行の残りは見えません．長い行が切り
取られるとき，モードラインの左端付近に@samp{$}文字を表示します．
@end table


@node Node Commands
@c @chapter Selecting a Node
@chapter ノードの選択
@cindex nodes, selection of

@c This section details the numerous Info commands which select a new node
@c to view in the current window.
@c 
このセクションでは，現在のウィンドウで閲覧する新しいノードを選択するため
の，数多くのInfoコマンドを詳述します．

@c The most basic node commands are @samp{n}, @samp{p}, @samp{u}, and
@c @samp{l}.  Note that the commands to select nodes are mapped differently
@c when @samp{--vi-keys} is in effect; these keybindings are designated
@c below as ``vi-like operation''.
@c 
最も基本的なノードコマンドは，@samp{n}，@samp{p}，@samp{u}と@samp{l}です．
ノードを選択するコマンドは，@samp{--vi-keys}の効果があるときは異なったマッ
ピングがなされていることに注意してください．これらのキーバインドは
``vi-like operation''を基にして設計されています．

@c When you are viewing a node, the top line of the node contains some Info
@c @dfn{pointers} which describe where the next, previous, and up nodes
@c are.  Info uses this line to move about the node structure of the file
@c when you use the following commands:
@c 
ノードを見ているとき，ノードのトップ行は，next，previous，そしてupノード
の場所を記述する，Info@dfn{ポインタ(pointers)}も含んでいます．以下のコマ
ンドを使用するとき，ファイルのノード構造に相対的に移動するため，Infoはこ
の行を使用します．

@table @asis
@item @key{n} (@code{next-node})
@itemx @kbd{C-@key{NEXT}} (on DOS/Windows only)
@itemx @kbd{C-x @key{n}}, vi-like operation
@kindex n
@kindex C-NEXT
@kindex C-x n, vi-like operation
@findex next-node
@c Select the `Next' node.
@c 
`Next'ノードを選択します．

@kindex C-PgDn
@c The @key{NEXT} key is known as the @key{PgDn} key on some
@c keyboards.
@c 
@key{NEXT}キーは@key{PgDn}キーとして知られているキーボードもあります．

@item @key{p} (@code{prev-node})
@itemx @kbd{C-@key{PREVIOUS}} (on DOS/Windows only)
@kindex p
@kindex C-PREVIOUS
@findex prev-node
@c Select the `Prev' node.
@c 
`Prev'のノードを選択します．

@kindex C-PgUp
@c The @key{PREVIOUS} key is known as the @key{PgUp} key on some
@c keyboards.
@c 
@key{PREVIOUS}キーは@key{PgUp}キーとして知られているキーボードもあります．

@item @key{u} (@code{up-node})
@itemx @kbd{C-@key{UP}} (an arrow key on DOS/Windows only)
@itemx @kbd{C-x @key{u}}, vi-like operation
@kindex u
@kindex C-UP
@kindex C-x u, vi-like operation
@findex up-node
@c Select the `Up' node.
@c 
`Up'ノードを選択します．
@end table

@c You can easily select a node that you have already viewed in this window
@c by using the @samp{l} command -- this name stands for "last", and
@c actually moves backwards through the history of visited nodes for this
@c window.  This is handy when you followed a reference to another node,
@c possibly to read about a related issue, and would like then to resume
@c reading at the same place where you started the excursion.
@c 
@samp{l}コマンド -- この名前は"last"を意味します -- を使用することで，こ
のウィンドウで既に見たノードを簡単に選択することが可能で，このウィンドウ
で閲覧したノードの履歴から，実際に前に戻ります．おそらく関係する記述を読
むために他のノードへの参照をたどり，移動を開始したのと同じ場所を再び読み
たいときこれは役に立つでしょう．

@c Each node where you press @samp{l} is discarded from the history.  Thus,
@c by the time you get to the first node you visited in a window, the
@c entire history of that window is discarded.
@c 
@samp{l}を押したとき，それぞれのノードは履歴を削除します．このため，ウィ
ンドウで最初に訪れたノードに戻ったとき，ウィンドウのすべての履歴が削除さ
れます．

@table @asis
@item @key{l} (@code{history-node})
@itemx @key{C-@key{CENTER}} (on DOS/Windows only)
@itemx @key{'}, vi-like operation
@kindex l
@kindex C-CENTER
@kindex ', vi-like operation
@findex history-node
@c Pop the most recently selected node in this window from the node
@c history.
@c 
このウィンドウのノードの履歴から，最も最近選択したノードを引き出します．
@end table

@c Two additional commands make it easy to select the most commonly
@c selected nodes; they are @samp{t} and @samp{d}.
@c 
二つの追加のコマンドで，最も一般的に選択されるノードの選択が簡単になりま
す．それらは@samp{t}と@samp{d}です．

@table @asis
@item @key{t} (@code{top-node})
@itemx @key{M-t}, vi-like operation
@kindex t
@kindex M-t, vi-like operation
@findex top-node
@c Select the node @samp{Top} in the current Info file.
@c 
現在のInfoファイルで，ノード@samp{Top}を選択します．

@item @key{d} (@code{dir-node})
@itemx @key{M-d}, vi-like operation
@kindex d
@kindex M-d, vi-like operation
@findex dir-node
@c Select the directory node (i.e., the node @samp{(dir)}).
@c 
ディレクトリノード(すなわち，ノード@samp{(dir)})を選択します．
@end table

@c Here are some other commands which immediately result in the selection
@c of a different node in the current window:
@c 
現在のウィンドウで，異なるノードの選択を結果がすぐさま得られるその他のコ
マンドもあり，それらは以下のものです．

@table @asis
@item @key{<} (@code{first-node})
@itemx @key{g}, vi-like operation
@kindex <
@kindex g, vi-like operation
@findex first-node
@c Selects the first node which appears in this file.  This node is most
@c often @samp{Top}, but it does not have to be.  With a numeric argument
@c @var{N}, select the @var{N}th node (the first node is node 1).  An
@c argument of zero is the same as the argument of 1.
@c 
このファイルで最初に現われるノードを選択します．このノードは，@samp{Top} 
が最も多くなっていますが，そうである必要はありません．数字の引数@var{N} 
を用いた場合，(最初のノードを1として)@var{N}番目のノードを選択します．ゼ
ロの引数は1の引数と同じです．

@item @key{>} (@code{last-node})
@itemx @key{G}, vi-like operation
@kindex >
@kindex G, vi-like operation
@findex last-node
@c Select the last node which appears in this file.  With a numeric argument
@c @var{N}, select the @var{N}th node (the first node is node 1).  An
@c argument of zero is the same as no argument, i.e., it selects the last
@c node.
@c 
このファイルの最後に現われるノードを選択します．数字の引数@var{N}を用い
た場合，(最初のノードを1として)@var{N}番目のノードを選択します．ゼロの引
数は引数が無いものと同じで，すなわち，最後のノードを選択します．

@item @key{]} (@code{global-next-node})
@kindex ]
@findex global-next-node
@c Move forward or down through node structure.  If the node that you are
@c currently viewing has a @samp{Next} pointer, that node is selected.
@c Otherwise, if this node has a menu, the first menu item is selected.  If
@c there is no @samp{Next} and no menu, the same process is tried with the
@c @samp{Up} node of this node.
@c 
ノード構造を進める，または下に移動します．現在見ているノードに
@samp{Next}ポインタがある場合，そのノードが選択されます．それ以外の場合，
このノードにメニューがある場合は最初のメニュー項目が選択されます．
@samp{Next}とメニューが無い場合，このノードの@samp{Up}ノードで同じ処理を
試みます．

@item @key{[} (@code{global-prev-node})
@kindex [
@findex global-prev-node
@c Move backward or up through node structure.  If the node that you are
@c currently viewing has a @samp{Prev} pointer, that node is selected.
@c Otherwise, if the node has an @samp{Up} pointer, that node is selected,
@c and if it has a menu, the last item in the menu is selected.
@c 
ノード構造を戻る，または上に移動します．現在見ているノードに@samp{Prev} 
ポインタがある場合，そのノードが選択されます．それ以外の場合，@samp{Up} 
ポインタがある場合はそのノードが選択され，メニューがある場合は，メニュー
の最後の項目が選択されます．
@end table

@c You can get the same behavior as @code{global-next-node} and
@c @code{global-prev-node} while simply scrolling through the file with
@c @key{SPC} and @key{DEL}; @xref{Variables, @code{scroll-behavior}}, for
@c more information.
@c 
ファイル全体を，@key{SPC}と@key{DEL}で単純にスクロールしている間，
@code{global-next-node}と@code{global-prev-node}で同じ動作を行なうことが
可能です．詳細は，@xref{Variables, @code{scroll-behavior}}.

@table @asis
@anchor{goto-node}
@item @key{g} (@code{goto-node})
@itemx @kbd{C-x @key{g}}, vi-like operation
@kindex g
@kindex C-x g, vi-like operation
@findex goto-node
@c Read the name of a node and select it.  While reading the node name,
@c completion (@pxref{The Echo Area, completion}) is only done for the
@c nodes which reside in one of the Info files that were loaded in the
@c current Info session; if the desired node resides in some other file,
@c you must type the node exactly as it appears in that Info file, and you
@c must include the Info file of the other file.  For example,
@c 
ノード名を読み込みそれを選択します．ノード名を読み込んでいるとき，現在の
InfoセクションでロードされているInfoファイルに存在しているノードに対して
のみ補完が行われます(@pxref{The Echo Area, completion})．他のファイルに
存在するノードが必要な場合，そのInfoファイルに存在するノードを正確に入力
し，他のファイルのInfoファイルを含める必要があります．例えば以下のように
します．

@example
@code{g(emacs)Buffers}
@end example

@c finds the node @samp{Buffers} in the Info file @file{emacs}.
@c 
これでInfoファイル@file{emacs}で@samp{Buffers}を探します．

@anchor{goto-invocation}
@item @key{O} (@code{goto-invocation}
@itemx @key{I}
@kindex O
@kindex I
@findex goto-invocation
@cindex finding the Invocation node
@c Read the name of a program and look for a node in the current Info file
@c which describes the invocation and the command-line options for that
@c program.  The default program name is derived from the name of the
@c current Info file.  This command does the same as the
@c @samp{--show-options} command-line option (@pxref{--show-options}), but
@c it also allows to specify the program name; this is important for those
@c manuals which describe several programs.
@c 
プログラム名を読み込み，現在のInfoファイルで，プログラムの呼び出しとコマ
ンドラインオプションを記述しているノードを探します．デフォルトプログラム
名は現在のInfoファイル名から得られます．このコマンドは
@samp{--show-options}コマンドラインオプションと同じですが，それは常にプ
ログラム名を指定することが可能です．これは，複数のプログラムを記述してい
るマニュアルに対して重要です．

@c If you need to find the Invocation node of a program that is documented
@c in another Info file, you need to visit that file before invoking
@c @samp{I}.  For example, if you are reading the Emacs manual and want to
@c see the command-line options of the @code{makeinfo} program, type @kbd{g
@c (texinfo) @key{RET}} and then @kbd{I makeinfo @key{RET}}.  If you don't
@c know what Info file documents the command, or if invoking @samp{I}
@c doesn't display the right node, go to the @samp{(dir)} node (using the
@c @samp{d} command) and invoke @samp{I} from there.
@c 
他のInfoファイルのプログラムの呼び出しのノードを見つける必要がある場合，
@samp{I}を呼び出す前に，そのファイルに移動する必要があります．例えば，
Emacsマニュアルを読んでいて，@code{makeinfo}プログラムのコマンドラインオ
プションを見たい場合，@kbd{g (texinfo) @key{RET}}とし，その後で@kbd{I
makeinfo @key{RET}}を入力する必要があります．そのコマンドを説明している
Infoファイルを知らない場合，(@samp{d}コマンドを使用して)@samp{(dir)} ノー
ドへ行き，そこで@samp{I}を呼び出してください．

@item @key{G} (@code{menu-sequence})
@kindex G
@findex menu-sequence
@cindex menu, following, from inside Info
@c Read a sequence of menu entries and follow it.  Info prompts for a
@c sequence of menu items separated by commas.  (Since commas are not
@c allowed in a node name, they are a natural choice for a delimiter in a
@c list of menu items.)  Info then looks up the first item in the menu of
@c the node @samp{(dir)} (if the @samp{(dir)} node cannot be found, Info
@c uses @samp{Top}).  If such an entry is found, Info goes to the node it
@c points to and looks up the second item in the menu of that node, etc.
@c In other words, you can specify a complete path which descends through
@c the menu hierarchy of a particular Info file starting at the
@c @samp{(dir)} node.  This has the same effect as if you typed the menu
@c item sequence on Info's command line, see @ref{command-line menu items,,
@c Info command-line arguments processing}.  For example,
@c 
メニュー項目の順番を読み込み，それをたどります．Infoは，カンマで分けられ
たメニュー項目を順番にプロンプトを出します．(カンマはノード名で許可され
ていないので，それらはメニュー項目のリストでのデリミタとして当然の選択で
す．)Infoは，ノード@samp{(dir)}のメニューで最初の項目を調べます
(@samp{(dir)}ノードが見つからない場合，Infoは@samp{Top}を使用します)．そ
のような項目が見つかった場合，Infoはそれが指し示すノードへ行き，そのノー
ドのメニュー項目の二番目の項目を調べる等のようにします．言い換えると，
@samp{(dir)}ノードで開始する特定のInfoファイルの，メニュー階層を下ってい
く，完全なパスを指定することが可能です．これは，Infoのコマンドラインでメ
ニュー項目の順序を入力したのと同じ効果があります．@ref{command-line menu
items,, Info command-line arguments processing}を参照してください．例え
ば，以下のようにします．

@example
 @kbd{G Texinfo,Overview,Reporting Bugs @key{RET}}
@end example

@noindent
@c displays the node @samp{Reporting Bugs} in the Texinfo manual.  (You
@c don't actually need to type the menu items in their full length, or in
@c their exact letter-case.  However, if you do type the menu items
@c exactly, Info will find it faster.)
@c 
これは，Texinfoマニュアルのノード@samp{Reporting Bugs}を表示します．(メ
ニュー項目の全部，または大文字小文字を正確に区別して，メニュー項目を実際
に入力する必要はありません．しかし，正確にメニュー項目を入力した場合，見
つけるのが速くなります．)

@c If any of the menu items you type are not found, Info stops at the last
@c entry it did find and reports an error.
@c 
入力したメニュー項目が見つからない場合，Infoは見つかった最後の項目で停止
し，エラーを報告します．

@item @kbd{C-x @key{k}} (@code{kill-node})
@kindex C-x k
@findex kill-node
@c Kill a node.  The node name is prompted for in the echo area, with a
@c default of the current node.  @dfn{Killing} a node means that Info tries
@c hard to forget about it, removing it from the list of history nodes kept
@c for the window where that node is found.  Another node is selected in
@c the window which contained the killed node.
@c 
ノードをキルします．デフォルトとして現在のノードを用いて，ノード名がエコー
エリアにプロンプトとして出力されます．@dfn{キルする(Killing)}とは，ノー
ドが見つかったウィンドウに対して記録してある，Infoに忘れさせることが難し
いノードの履歴のリストから，それを削除することを意味します．キルされたノー
ドを含んでいるウィンドウに別のノードが選択されます．

@item @kbd{C-x C-f} (@code{view-file})
@kindex C-x C-f
@findex view-file
@c Read the name of a file and selects the entire file.  The command
@c 
ファイル名を読み込み，ファイル全体を選択します．そのコマンドは，以下のよ
うにします．
@example
@code{C-x C-f @var{filename}}
@end example
@c is equivalent to typing
@c 
これは以下の入力と同じです．
@example
@code{g(@var{filename})*}
@end example

@item @kbd{C-x C-b} (@code{list-visited-nodes})
@kindex C-x C-b
@findex list-visited-nodes
@c Make a window containing a menu of all of the currently visited nodes.
@c This window becomes the selected window, and you may use the standard
@c Info commands within it.
@c 
現在訪問している全てのノードのメニューを含んでいるウィンドウを作成します．
このウィンドウが選択されたウィンドウになり，そこで標準的なInfoコマンドを
使用してもかまいません．

@item @kbd{C-x @key{b}} (@code{select-visited-node})
@kindex C-x b
@findex select-visited-node
@c Select a node which has been previously visited in a visible window.
@c This is similar to @samp{C-x C-b} followed by @samp{m}, but no window is
@c created.
@c 
訪問しているウィンドウで前回訪問したノードを選択します．@samp{C-x C-b}に
@samp{m}を続けたものに似ていますが，ウィンドウは作成されません．
@end table


@node Searching Commands
@c @chapter Searching an Info File
@chapter Infoファイルを探す
@cindex searching

@c GNU Info allows you to search for a sequence of characters throughout an
@c entire Info file, search through the indices of an Info file, or find
@c areas within an Info file which discuss a particular topic.
@c 
GNU Infoで，Infoファイルの項目全体を文字の順番で検索したり，Infoファイル
の索引全体を検索したり，特定のトピックを議論しているInfoファイル内の領域
を見つけたりすることが可能になります．

@table @asis
@item @key{s} (@code{search})
@itemx @key{/}
@kindex s
@kindex /
@findex search
@c Read a string in the echo area and search for it.  If the string
@c includes upper-case characters, the Info file is searched
@c case-sensitively; otherwise Info ignores the letter case.  With a
@c numeric argument of @var{N}, search for @var{N}th occurrence of the
@c string.  Negative arguments search backwards.
@c 
エコーエリアの文字列を読み込み，それを検索します．大文字を含む文字列の場
合，Infoファイルは大文字小文字を識別します．それ以外の場合は，大文字小文
字を無視します．数字@var{N}の引数を用いた場合，文字列で@var{N}番目に見つ
かったものを検索します．負の引数は後方検索します．

@item @key{?} (@code{search-backward}, vi-like operation)
@kindex ?, vi-like operation
@findex search-backward
@c Read a string in the echo area and search backward through the Info file
@c for that string.  If the string includes upper-case characters, the Info
@c file is searched case-sensitively; otherwise Info ignores the letter
@c case.  With a numeric argument of @var{N}, search for @var{N}th
@c occurrence of the string.  Negative arguments search forward.
@c 
エコーエリアの文字列を読み込み，Infoファイル全体を後方に文字列を検索しま
す．大文字を含む文字列の場合，Infoファイルは大文字小文字を識別します．そ
れ以外の場合は，大文字小文字を無視します．数字@var{N}の引数を用いた場合，
文字列で@var{N}番目に発生したものを検索します．負の引数は前方検索します．

@item @key{S} (@code{search-case-sensitively}
@kindex S
@findex search-case-sensitively
@cindex search, case-sensitive
@cindex case-sensitive search
@c Read a string in the echo area and search for it case-sensitively, even
@c if the string includes only lower-case letters.  With a numeric argument
@c of @var{N}, search for @var{N}th occurrence of the string.  Negative
@c arguments search backwards.
@c 
エコーエリアの文字列を読み込み，文字列が小文字しか含まない場合でも，大文
字小文字を識別してそれを検索します．数字@var{N}の引数を用いた場合，文字
列で@var{N}番目に発生したものを検索します．負の引数は後方検索します．

@item @kbd{C-x @key{n}} (@code{search-next})
@itemx @key{n}, vi-like operation
@kindex C-x n
@kindex n, vi-like operation
@findex search-next
@cindex repeated search
@c Search for the same string used in the last search command, in the same
@c direction, and with the same case-sensitivity option.  With a numeric
@c argument of @var{N}, search for @var{N}th next occurrence.
@c 
前回検索コマンドで使用したのと同じ文字列を，同じ方向で，同じ大文字小文字
識別オプションで検索します．数字@var{N}の引数を用いた場合，文字列で
@var{N}番目に発生したものを検索します．

@item @kbd{C-x @key{N}} (@code{search-previous})
@itemx @key{N}, vi-like operation
@kindex C-x N
@kindex n, vi-like operation
@findex search-previous
@c Search for the same string used in the last search command, and with the
@c same case-sensitivity option, but in the reverse direction.  With a
@c numeric argument of @var{N}, search for @var{N}th previous occurrence.
@c 
前回検索コマンドで使用したのと同じ文字列を，同じ大文字小文字識別オプショ
ンで，逆方向に検索します．数字@var{N}の引数を用いた場合，文字列で@var{N} 
番目に発生したものを検索します．

@item @key{C-s} (@code{isearch-forward})
@kindex C-s
@findex isearch-forward
@cindex incremental search
@c Interactively search forward through the Info file for a string as you
@c type it.  If the string includes upper-case characters, the search is
@c case-sensitive; otherwise Info ignores the letter case.
@c 
入力している文字列を，Infoファイル全体を対話的に前方に検索します．大文字
を含む文字列の場合，Infoファイルは大文字小文字を識別します．それ以外の場
合は，大文字小文字を無視します．

@item @key{C-r} (@code{isearch-backward})
@kindex C-r
@findex isearch-backward
@c Interactively search backward through the Info file for a string as
@c you type it.  If the string includes upper-case characters, the search
@c is case-sensitive; otherwise Info ignores the letter case.
@c 
入力している文字列を，Infoファイル全体を対話的に後方に検索します．大文字
を含む文字列の場合，Infoファイルは大文字小文字を識別します．それ以外の場
合は，大文字小文字を無視します．

@item @key{i} (@code{index-search})
@kindex i
@findex index-search
@cindex index, searching
@cindex searching, in the indices
@c Look up a string in the indices for this Info file, and select a node
@c where the found index entry points to.
@c 
Infoファイルの索引で文字列を調べ，見つかった索引項目が指し示しているノー
ドを選択します．

@item @key{,} (@code{next-index-match})
@kindex ,
@findex next-index-match
@c Move to the node containing the next matching index item from the last
@c @samp{i} command.
@c 
前回の@samp{i}コマンドから，次に一致している索引項目を含むノードに移動し
ます．

@item @kbd{M-x index-apropos}
@findex index-apropos
@c Grovel the indices of all the known Info files on your system for a
@c string, and build a menu of the possible matches.
@c 
文字列に対し，システム上の既知のInfoファイルすべての索引から，可能な限り
一致したメニューを構築します．
@end table

@c The most basic searching command is @samp{s} or @samp{/}
@c (@code{search}).  The @samp{s} command prompts you for a string in the
@c echo area, and then searches the remainder of the Info file for an
@c occurrence of that string.  If the string is found, the node containing
@c it is selected, and the cursor is left positioned at the start of the
@c found string.  Subsequent @samp{s} commands show you the default search
@c string within @samp{[} and @samp{]}; pressing @key{RET} instead of
@c typing a new string will use the default search string.  Under
@c @samp{--vi-keys} (@pxref{--vi-keys}), using the @samp{n} or @samp{N}
@c commands is a faster way of searching for the same string.
@c 
最も基本的な検索コマンドは，@samp{s}や@samp{/}(@code{search})です．
@samp{s}コマンドはエコーエリアに文字列の入力を促すプロンプトを表示し，そ
れ以降のInfoファイルでその文字列を探します．文字列が見つかった場合，含ま
れているノードが選択され，カーソルは見つかった文字列の最初に位置します．
次の@samp{s}コマンドは，@samp{[}と@samp{]}の間にデフォルトの検索文字列を
表示します．新しい文字列の代わりに@key{RET}を押すと，検索文字列にデフォ
ルトを使用します．@samp{--vi-keys} (@pxref{--vi-keys})では，@samp{n}や
@samp{N})コマンドを使用すると，同じ文字列をより速く検索します．

@c @dfn{Incremental searching} is similar to basic searching, but the
@c string is looked up while you are typing it, instead of waiting until
@c the entire search string has been specified.
@c 
@dfn{インクリメンタル検索(Incremental searching)}は，基本的な検索に似て
いますが，検索文字列を完全に指定されるまで待つ代わりに，文字列が入力して
いる間にも調査されます．

@cindex search, and case-sensitivity
@cindex case-sensitivity, and search
@c Both incremental and non-incremental search by default ignore the case
@c of letters when comparing the Info file text with the search string.
@c However, an uppercase letter in the search string makes the search
@c case-sensitive.  You can force a case-sensitive non-incremental search,
@c even for a string that includes only lower-case letters, by using the
@c @samp{S} command (@code{search-case-sensitively}).  The @samp{n} and
@c @samp{N} commands operate case-sensitively if the last search command
@c was @samp{S}.
@c 
インクリメンタルと非インクリメンタル検索の両方で，Infoファイルのテキスト
と検索文字列を比較しているとき，デフォルトで大文字小文字を無視します．し
かし，検索文字列に大文字を使用すると，検索は大文字小文字を識別します．小
文字のみの入力の場合でも，大文字小文字の識別を非インクリメンタル検索で行
いたい場合，@samp{S}コマンド(@code{search-case-sensitively})を使用してく
ださい)．@samp{n}と@samp{N}コマンドは，前回の検索コマンドが@samp{S}の場
合，大文字小文字を識別した操作を行います．

@c The most efficient means of finding something quickly in a manual is
@c the @samp{i} command (@code{index-search}).  This command prompts for
@c a string, and then looks for that string in all the indices of the
@c current Info manual.  If it finds a matching index entry, it displays
@c the node to which that entry refers and prints the full text of the
@c entry in the echo area.  You can press @samp{,}
@c (@code{next-index-match}) to find more matches.  A good Info manual
@c has all of its important concepts indexed, so the @samp{i} command
@c lets you use a manual as a reference.
@c 
マニュアルで素早く何かを見つける最も効果的な方法は@samp{i}コマンド
(@code{index-search})です．このコマンドは，文字列の入力を促すプロンプト
を表示し，その文字列を現在のInfoマニュアルのすべての索引で探します．索引
の項目で一致するものが見つかった場合，項目が参照しているノードを表示し，
エコーエリアに項目の完全なテキストを出力します．更に一致するものを探すた
め@samp{,} (@code{next-index-match})を入力することも可能です．優れたInfo 
マニュアルには，概念の索引に重要なものがすべて存在しているので，@samp{i} 
コマンドで，マニュアルをリファレンスとして使用できるようになります．

@c If you don't know what manual documents something, try the @kbd{M-x
@c index-apropos}.  It prompts for a string and then looks up that string
@c in all the indices of all the Info documents installed on your system.
@c It can also be invoked from the command line; see @ref{--apropos}.
@c 
説明しているマニュアルが何か分からない場合は，@kbd{M-x index-apropos}を
試してみてください．それで文字列の入力を促すプロンプトが表示され，その文
字列をシステムにインストールされているすべてのInfoドキュメントのすべての
索引で探します．コマンドラインで呼び出すことも可能です．@ref{--apropos} 
を参照してください．


@node Xref Commands
@c @chapter Selecting Cross References
@chapter 相互参照の選択

@c We have already discussed the @samp{Next}, @samp{Prev}, and @samp{Up}
@c pointers which appear at the top of a node.  In addition to these
@c pointers, a node may contain other pointers which refer you to a
@c different node, perhaps in another Info file.  Such pointers are called
@c @dfn{cross references}, or @dfn{xrefs} for short.
@c 
ノードのトップに現われる@samp{Next}，@samp{Prev}，@samp{Up}ポインタに関
しては，既に議論してきました．これらのポインタに以外に，ノードには，おそ
らく他のInfoファイルの他のノードを参照する，他のポインタを含んでいるかも
しれません．そのようなポインタは，@dfn{相互参照(cross references)}，また
は短く@dfn{xrefs}と呼ばれています．

@menu
* Parts of an Xref::            What a cross reference is made of.
* Selecting Xrefs::             Commands for selecting menu or note items.
@end menu

@node Parts of an Xref, Selecting Xrefs,  , Xref Commands
@c @section Parts of an Xref
@section Xrefの部分

@c Cross references have two major parts: the first part is called the
@c @dfn{label}; it is the name that you can use to refer to the cross
@c reference, and the second is the @dfn{target}; it is the full name of
@c the node that the cross reference points to.
@c 
相互参照には，二つの主要な部分があります．最初の部分は，@dfn{ラベル
(label)}と呼ばれます．それは相互参照で使用する名前です．二番目の部分は
@dfn{ターゲット(target)}です．それは，相互参照が示す完全な名前です．

@c The target is separated from the label by a colon @samp{:}; first the
@c label appears, and then the target.  For example, in the sample menu
@c cross reference below, the single colon separates the label from the
@c target.
@c 
ターゲットはコロン@samp{:}でラベルと分けられています．最初にラベルが現わ
れ，その後にターゲットが現われます．例えば，以下の簡単なメニューの相互参
照では，一つのコロンがラベルとターゲットを分けています．

@example
* Foo Label: Foo Target.        More information about Foo.
@end example

@c Note the @samp{.} which ends the name of the target.  The @samp{.} is
@c not part of the target; it serves only to let Info know where the target
@c name ends.
@c 
ターゲットの名前の終りの@samp{.}に注意してください．@samp{.}はターゲット
の一部ではありません．それはInfoにターゲットの終りの位置を教えるためだけ
に与えられています．

@c A shorthand way of specifying references allows two adjacent colons to
@c stand for a target name which is the same as the label name:
@c 
参照を指定する短い方法は，ラベル名と同じターゲット名を意味する二つの隣接
したコロンで可能です．

@example
* Foo Commands::                Commands pertaining to Foo.
@end example

@c In the above example, the name of the target is the same as the name of
@c the label, in this case @code{Foo Commands}.
@c 
上記の例では，ターゲットの名前はラベルの名前と同じで，この場合は
@code{Foo Commands}です．

@c You will normally see two types of cross reference while viewing nodes:
@c @dfn{menu} references, and @dfn{note} references.  Menu references
@c appear within a node's menu; they begin with a @samp{*} at the beginning
@c of a line, and continue with a label, a target, and a comment which
@c describes what the contents of the node pointed to contains.
@c 
ノードを見ているとき，通常二つの形式の相互参照を見ることになるでしょう．
@dfn{menu}参照と@dfn{note}参照です．menu参照はノードのメニューに現われま
す．それらは行頭の@samp{*}で始まり，ラベル，ターゲット，そして指し示して
いるポインタの内容を記述しているコメントを含みます．

@c Note references appear within the body of the node text; they begin with
@c @code{*Note}, and continue with a label and a target.
@c 
note参照は，ノードテキストの本体に現われます．それらは@code{*Note}で始ま
り，ラベルとターゲットを含みます．

@c Like @samp{Next}, @samp{Prev}, and @samp{Up} pointers, cross references
@c can point to any valid node.  They are used to refer you to a place
@c where more detailed information can be found on a particular subject.
@c Here is a cross reference which points to a node within the Texinfo
@c documentation:  @xref{xref, , Writing an Xref, texinfo, the Texinfo
@c Manual}, for more information on creating your own texinfo cross
@c references.
@c 
@samp{Next}，@samp{Prev}，そして@samp{Up}ポインタのように，相互参照はあ
らゆる有効なノードを指し示しています．それらは，より詳細な情報を見つける
ことが可能な特定のサブジェクトの位置を参照するために使用されます．
Texinfoドキュメントのノードを指し示す相互参照は以下のものです．相互参照
を作成する詳細は，@xref{xref, , Writing an Xref, texinfo-ja, the Texinfo
Manual}.

@node Selecting Xrefs,  , Parts of an Xref, Xref Commands
@c @section Selecting Xrefs
@section Xrefの選択

@c The following table lists the Info commands which operate on menu items.
@c 
以下の表で，メニュー項目を操作するInfoコマンドをリストアップします．

@table @asis
@item @key{1} (@code{menu-digit})
@itemx @key{2} @dots{} @key{9}
@itemx @key{M-1}, vi-like operation
@itemx @key{M-2} @dots{} @key{M-9}, vi-like operation
@cindex 1 @dots{} 9, in Info windows
@cindex M-1 @dots{} M-9, vi-like operation
@kindex 1 @dots{} 9, in Info windows
@kindex M-1 @dots{} M-9, vi-like operation
@findex menu-digit
@c Within an Info window, pressing a single digit, (such as @samp{1}),
@c selects that menu item, and places its node in the current window.
@c For convenience, there is one exception; pressing @samp{0} selects the
@c @emph{last} item in the node's menu.  When @samp{--vi-keys} is in
@c effect, digits set the numeric argument, so these commands are remapped
@c to their @samp{M-} varieties.  For example, to select the last menu
@c item, press @key{M-0}.
@c 
Infoウィンドウ内部で，(@samp{1}のような)単一の数字を押すと，メニュー項目
を選択し，現在のウィンドウをそのノードへ移動します．便利にするため，一つ
の例外があります．@samp{0}を押すと，ノードのメニューの@emph{最後の}項目
を選択します．@samp{--vi-keys}が効果がある場合，数字は数の引数を設定し，
そのためこれらのコマンドは@samp{M-}の種類に再配置されます．例えば，最後
のメニュー項目を選択するため，@key{M-0}を押してください．

@item @key{0} (@code{last-menu-item})
@itemx @key{M-0}, vi-like operation
@kindex 0, in Info windows
@kindex M-0, vi-like operation
@findex last-menu-item
@c Select the last item in the current node's menu.
@c 
現在のノードのメニューで，最後の項目を選択します．

@item @key{m} (@code{menu-item})
@kindex m
@findex menu-item
@c Reads the name of a menu item in the echo area and selects its node.
@c Completion is available while reading the menu label.  @xref{The Echo
@c Area, completion}.
@c 
エコーエリアでメニュー項目の名前を読み込み，そのノードを選択します．補完
はメニューラベルを読んでいるとき，利用可能です．@xref{The Echo Area,
completion}.

@item @kbd{M-x find-menu}
@findex find-menu
@c Move the cursor to the start of this node's menu.
@c 
カーソルをノードのメニューの最初に移動します．
@end table

@c This table lists the Info commands which operate on cross references.
@c 
以下の表で，相互参照を操作するInfoコマンドをリストアップします．

@table @asis
@item @key{f} (@code{xref-item})
@itemx @key{r}
@item @key{M-f}, vi-like operation
@itemx @kbd{C-x @key{r}}, vi-like operation
@kindex f
@kindex r
@kindex M-f, vi-like operation
@kindex C-x r, vi-like operation
@findex xref-item
@c Reads the name of a note cross reference in the echo area and selects
@c its node.  Completion is available while reading the cross reference
@c label.  @xref{The Echo Area, completion}.
@c 
エコーエリアで，相互参照のメモの名前を読み込み，そのノードを選択します．
補完は相互参照ラベルを読んでいるとき，利用可能です．@xref{The Echo Area,
completion}.
@end table

@c Finally, the next few commands operate on menu or note references alike:
@c 
終りに，次のいくつかのコマンドは，menuやnote参照のようなものを処理します．

@table @asis
@item @key{TAB} (@code{move-to-next-xref})
@kindex TAB, in Info windows
@findex move-to-next-xref
@c Move the cursor to the start of the next nearest menu item or note
@c reference in this node.  You can then use @key{RET}
@c (@code{select-reference-this-line}) to select the menu or note reference.
@c 
カーソルを次の最隣のメニュー項目やこのノードのnote参照の最初に移動します．
メニューやnote参照を選択するため，それから@key{RET}
(@code{select-reference-this-line})を使用することが可能です．

@item @key{M-TAB} (@code{move-to-prev-xref})
@itemx @key{Shift-@key{TAB}} (on DOS/Windows only)
@kindex M-TAB, in Info windows
@findex move-to-prev-xref
@c Move the cursor the start of the nearest previous menu item or note
@c reference in this node.
@c 
カーソルを，最隣の前のメニュー項目やこのノードのnote参照に移動します．

@kindex Shift-TAB, in Info windows
@kindex BackTab, in Info windows
@c On DOS/Windows only, the @kbd{Shift-@key{TAB}} key is an alias for
@c @kbd{M-@key{TAB}}.  This key is sometimes called @samp{BackTab}.
@c 
DOS/Windowsのみで，@kbd{Shift-@key{TAB}}キーは@kbd{M-@key{TAB}}の代用と
なります．このキーは@samp{BackTab}と呼ばれることもあります．

@item @key{RET} (@code{select-reference-this-line})
@itemx @key{M-g}, vi-like operation
@kindex RET, in Info windows
@kindex M-g, vi-like operation
@findex select-reference-this-line
@c Select the menu item or note reference appearing on this line.
@c 
この行に現われる，メニュー項目やnote参照を選択します．
@end table


@node Window Commands
@c @chapter Manipulating Multiple Windows
@chapter 複数のウィンドウの操作
@cindex windows, manipulating

@c A @dfn{window} is a place to show the text of a node.  Windows have a
@c view area where the text of the node is displayed, and an associated
@c @dfn{mode line}, which briefly describes the node being viewed.
@c 
@dfn{ウィンドウ(window)}は，ノードのテキストを表示する場所です．ウィンド
ウはノードのテキストを表示するビューエリアと，関連付けられた@dfn{モード
行(mode line)}があり，それは見ているノードの短い記述です．

@c GNU Info supports multiple windows appearing in a single screen; each
@c window is separated from the next by its modeline.  At any time, there
@c is only one @dfn{active} window, that is, the window in which the cursor
@c appears.  There are commands available for creating windows, changing
@c the size of windows, selecting which window is active, and for deleting
@c windows.
@c 
GNU Infoは，単一画面上での複数のウィンドウの表示をサポートします．それぞ
れのウィンドウは，モード行で次のものと分けられています．@dfn{アクティブ
(active)}なウィンドウは常に一つだけあり，それはカーソルがあるウィンドウ
です．ウィンドウの作成，ウィンドウサイズの変更，アクティブにするウィンド
ウの選択，そしてウィンドウの削除のため，利用可能なコマンドがあります．

@menu
* The Mode Line::               What appears in the mode line?
* Basic Windows::               Manipulating windows in Info.
* The Echo Area::               Used for displaying errors and reading input.
@end menu

@node The Mode Line, Basic Windows,  , Window Commands
@c @section The Mode Line
@section モード行

@c A @dfn{mode line} is a line of inverse video which appears at the bottom
@c of an Info window.  It describes the contents of the window just above
@c it; this information includes the name of the file and node appearing in
@c that window, the number of screen lines it takes to display the node,
@c and the percentage of text that is above the top of the window.  It can
@c also tell you if the indirect tags table for this Info file needs to be
@c updated, and whether or not the Info file was compressed when stored on
@c disk.
@c 
@dfn{モード行(mode line)}とは，Infoウィンドウの下の方に現われる反転表示
の行です．それは，そのすぐ上のウィンドウの内容を説明します．この情報は，
ファイルとウィンドウに現われているノードの名前，ノードを表示するため消費
している画面の行数，そして，ウィンドウの上にあるテキストの百分率表示を含
んでいます．それは，このInfoファイルに対する間接的なタグ表を更新する必要
があるかどうかと，ディスク保存時にInfoファイルが圧縮されていたかどうかを
伝えます．

@c Here is a sample mode line for a window containing an uncompressed file
@c named @file{dir}, showing the node @samp{Top}.
@c 
ノード@samp{Top}を表示している，@file{dir}と名付けられた圧縮されていない
ファイルを含んでいるウィンドウのモード行の例は以下のようになります．

@example
@group
-----Info: (dir)Top, 40 lines --Top-------------------------------------
            ^^   ^   ^^^        ^^
          (file)Node #lines    where
@end group
@end example

@c When a node comes from a file which is compressed on disk, this is
@c indicated in the mode line with two small @samp{z}'s.  In addition, if
@c the Info file containing the node has been split into subfiles, the name
@c of the subfile containing the node appears in the modeline as well:
@c 
ノードがディスク上の圧縮されているファイルにあるとき，モード行に二つの小
さい@samp{z}が示されます．さらに，ノードを含んでいるInfoファイルがサブファ
イルに分けられている場合，ノードを含むサブファイルの名前も，同様にモード
行に現われます．

@example
--zz-Info: (emacs)Top, 291 lines --Top-- Subfile: emacs-1.Z-------------
@end example

@c Truncation of long lines (as opposed to wrapping them to the next
@c display line, @pxref{Scrolling Commands, toggle-wrap}) is indicated by a
@c @samp{$} at the left edge of the mode line:
@c 
長い行の折り返し(同様に次の行折り返されるもの，@pxref{Scrolling
Commands, toggle-wrap})は，モード行の左端に@samp{$}で示されます．

@example
--$--Info: (texinfo)Top, 480 lines --Top-- Subfile: texinfo-1-----------
@end example

@c When Info makes a node internally, such that there is no corresponding
@c info file on disk, the name of the node is surrounded by asterisks
@c (@samp{*}).  The name itself tells you what the contents of the window
@c are; the sample mode line below shows an internally constructed node
@c showing possible completions:
@c 
ディスク上に対応するInfoファイルが無いような内部ノードをInfoが作成する場
合，ノード名は周りにアスタリスク(@samp{*})が付きます．名前自身はウィンド
ウの内容を伝えます．以下のモード行の見本は，おそらく完了を示している内部
に構成されているノードを表示しています．

@example
-----Info: *Completions*, 7 lines --All---------------------------------
@end example

@node Basic Windows, The Echo Area, The Mode Line, Window Commands
@c @section Window Commands
@section ウィンドウコマンド

@c It can be convenient to view more than one node at a time.  To allow
@c this, Info can display more than one @dfn{window}.  Each window has its
@c own mode line (@pxref{The Mode Line}) and history of nodes viewed in that
@c window (@pxref{Node Commands, , @code{history-node}}).
@c 
一度に一つ以上のノードが見れると便利なはずです．こうするため，Infoは一つ
以上の@dfn{ウィンドウ(window)}を表示することが可能です．それぞれのウィン
ドウには，独自のモード行(@pxref{The Mode Line})があり，そのウィンドウで
見たノードの履歴があります(@pxref{Node Commands, , @code{history-node}})．

@table @asis
@item @kbd{C-x @key{o}} (@code{next-window})
@cindex windows, selecting
@kindex C-x o
@findex next-window
@c Select the next window on the screen.  Note that the echo area can only be
@c selected if it is already in use, and you have left it temporarily.
@c Normally, @samp{C-x o} simply moves the cursor into the next window on
@c the screen, or if you are already within the last window, into the first
@c window on the screen.  Given a numeric argument, @samp{C-x o} moves over
@c that many windows.  A negative argument causes @samp{C-x o} to select
@c the previous window on the screen.
@c 
画面の次のウィンドウを選択します．現在使用中かつ一時的にそのままにしてい
る場合のみ，エコーエリアが選択可能だということに注意してください．通常，
@samp{C-x o}では，画面の次のウィンドウにカーソルを移動し，最後のウィンド
ウに既にいる場合は画面の最初のウィンドウにカーソルを移動します．数字の引
数を与えた場合，@samp{C-x o}は複数のウィンドウを移動します．負の引数で，
@samp{C-x o}は画面の前のウィンドウを選択します．

@item @kbd{M-x prev-window}
@findex prev-window
@c Select the previous window on the screen.  This is identical to
@c @samp{C-x o} with a negative argument.
@c 
画面の前のウィンドウを選択します．これは，負の引数での@samp{C-x o}と同じ
です．

@item @kbd{C-x @key{2}} (@code{split-window})
@cindex windows, creating
@kindex C-x 2
@findex split-window
@c Split the current window into two windows, both showing the same node.
@c Each window is one half the size of the original window, and the cursor
@c remains in the original window.  The variable @code{automatic-tiling}
@c can cause all of the windows on the screen to be resized for you
@c automatically, please @pxref{Variables, , automatic-tiling} for more
@c information.
@c 
現在のウィンドウを二つに分け，両方とも同じノードを表示します．それぞれの
ウィンドウは元のウィンドウの半分の大きさになり，カーソルは元のウィンドウ
に残ります．変数@code{automatic-tiling}で，画面の全てのウィンドウの大き
さを自動的に変更します．詳細は，@ref{Variables, , automatic-tiling}を参
照してください．

@item @kbd{C-x @key{0}} (@code{delete-window})
@cindex windows, deleting
@kindex C-x 0
@findex delete-window
@c Delete the current window from the screen.  If you have made too many
@c windows and your screen appears cluttered, this is the way to get rid of
@c some of them.
@c 
現在のウィンドウを画面から削除します．余りに多くのウィンドウを作成し，画
面がバラバラになった場合にそのいくつかを取り除く方法です．

@item @kbd{C-x @key{1}} (@code{keep-one-window})
@kindex C-x 1
@findex keep-one-window
@c Delete all of the windows excepting the current one.
@c 
現在のウィンドウ以外全てを削除します．

@item @kbd{ESC @key{C-v}} (@code{scroll-other-window})
@kindex ESC C-v, in Info windows
@findex scroll-other-window
@c Scroll the other window, in the same fashion that @samp{C-v} might
@c scroll the current window.  Given a negative argument, scroll the
@c "other" window backward.
@c 
現在のウィンドウを@samp{C-v}でスクロールするのと同じように，他のウィンド
ウをスクロールします．負の引数を与えた場合，他のウィンドウは後方にスクロー
ルします．

@item @kbd{C-x @key{^}} (@code{grow-window})
@kindex C-x ^
@findex grow-window
@c Grow (or shrink) the current window.  Given a numeric argument, grow
@c the current window that many lines; with a negative numeric argument,
@c shrink the window instead.
@c 
現在のウィンドウを大きく(または小さく)します．数字の引数の場合，現在のウィ
ンドウを複数行大きくします．負の引数の場合，代わりにウィンドウを小さくし
ます．

@item @kbd{C-x @key{t}} (@code{tile-windows})
@cindex tiling
@kindex C-x t
@findex tile-windows
@c Divide the available screen space among all of the visible windows.
@c Each window is given an equal portion of the screen in which to display
@c its contents.  The variable @code{automatic-tiling} can cause
@c @code{tile-windows} to be called when a window is created or deleted.
@c @xref{Variables, , @code{automatic-tiling}}.
@c 
表示されている全てのウィンドウの利用可能な空間を分割します．それぞれのウィ
ンドウは，画面で均等に分割され内容を表示します．変数
@code{automatic-tiling}で，ウィンドウを作成したり削除したりしたとき
@code{tile-windows}は呼び出されます．@xref{Variables, ,
@code{automatic-tiling}}.
@end table

@node The Echo Area,  , Basic Windows, Window Commands
@c @section The Echo Area
@section エコーエリア
@cindex echo area

@c The @dfn{echo area} is a one line window which appears at the bottom of
@c the screen.  It is used to display informative or error messages, and to
@c read lines of input from you when that is necessary.  Almost all of the
@c commands available in the echo area are identical to their Emacs
@c counterparts, so please refer to that documentation for greater depth of
@c discussion on the concepts of editing a line of text.  The following
@c table briefly lists the commands that are available while input is being
@c read in the echo area:
@c 
@dfn{エコーエリア(echo area)}は，画面の底に現われる一行のウィンドウです．
それは情報やエラーのメッセージの表示と，入力が必要なときそれを読み込むた
めに使用されます．エコーエリアで利用可能なコマンドのほとんど全ては，
Emacsでそれに対応する物と同じなので，テキストの行の編集の概念をより深く
説明しているドキュメントを参照してください．以下の表は，エコーエリアで入
力が読み込まれるとき，利用可能なコマンドの短いリストです．

@table @asis
@item @key{C-f} (@code{echo-area-forward})
@itemx @key{RIGHT} (an arrow key)
@itemx @key{M-h}, vi-like operation
@kindex C-f, in the echo area
@kindex RIGHT, in the echo area
@kindex M-h, in the echo area, vi-like operation
@findex echo-area-forward
@c Move forward a character.
@c 
一文字先に進めます．

@item @key{C-b} (@code{echo-area-backward})
@itemx @key{LEFT} (an arrow key)
@itemx @key{M-l}, vi-like operation
@kindex LEFT, in the echo area
@kindex C-b, in the echo area
@kindex M-l, in the echo area, vi-like operation
@findex echo-area-backward
@c Move backward a character.
@c 
一文字後に戻します．

@item @key{C-a} (@code{echo-area-beg-of-line})
@itemx @key{M-0}, vi-like operation
@kindex C-a, in the echo area
@kindex M-0, in the echo area, vi-like operation
@findex echo-area-beg-of-line
@c Move to the start of the input line.
@c 
入力行の最初に移動します．

@item @key{C-e} (@code{echo-area-end-of-line})
@itemx @key{M-$}, vi-like operation
@kindex C-e, in the echo area
@kindex M-$, vi-like operation
@findex echo-area-end-of-line
@c Move to the end of the input line.
@c 
入力行の最後に移動します．

@item @key{M-f} (@code{echo-area-forward-word})
@itemx @key{C-@key{RIGHT}} (DOS/Windows only)
@itemx @key{M-w}, vi-like operation
@kindex M-f, in the echo area
@kindex M-w, in the echo area, vi-like operation
@findex echo-area-forward-word
@c Move forward a word.
@c 
一単語先に進めます．

@kindex C-RIGHT, in the echo area
@c On DOS/Windows, @kbd{C-@key{RIGHT}} moves forward by words.
@c 
DOS/Windowsで，@kbd{C-@key{RIGHT}}は一単語づつ先に進めます．

@item @key{M-b} (@code{echo-area-backward-word})
@itemx @key{C-@key{LEFT}} (DOS/Windows only)
@kindex M-b, in the echo area
@findex echo-area-backward-word
@c Move backward a word.
@c 
一単語後に戻します．

@kindex C-LEFT, in the echo area
@c On DOS/Windows, @kbd{C-@key{LEFT}} moves backward by words.
@c 
DOS/Windowsで，@kbd{C-@key{LEFT}}は一単語づつ後に戻します．

@item @key{C-d} (@code{echo-area-delete})
@itemx @key{M-x}, vi-like operation
@kindex C-d, in the echo area
@kindex M-x, in the echo area, vi-like operation
@findex echo-area-delete
@c Delete the character under the cursor.
@c 
カーソルの下の文字を削除します．

@item @key{DEL} (@code{echo-area-rubout})
@kindex DEL, in the echo area
@findex echo-area-rubout
@c Delete the character behind the cursor.
@c 
カーソルの前の文字を削除します．

@c On some keyboards, this key is designated @key{BS}, for
@c @samp{BackSpace}.  Those keyboards will usually bind @key{DEL} in the
@c echo area to @code{echo-area-delete}.
@c 
同じキーボードで，このキーは@samp{BackSpace}に対する@key{BS}として設計さ
れています．これらのキーボードは，通常，@key{DEL}をエコーエリアでの
@code{echo-area-delete}に結びつけられています．

@item @key{C-g} (@code{echo-area-abort})
@itemx @key{C-u}, vi-like operation
@kindex C-g, in the echo area
@kindex C-u, in the echo area, vi-like operation
@findex echo-area-abort
@c Cancel or quit the current operation.  If completion is being read, this
@c command discards the text of the input line which does not match any
@c completion.  If the input line is empty, it aborts the calling function.
@c 
現在の処理を中止または終了します．補完が読み込まれている場合，このコマン
ドは補完に一致しない入力行のテキストを削除します．入力行が空の場合，呼び
出している機能を中止します．

@item @key{RET} (@code{echo-area-newline})
@kindex RET, in the echo area
@findex echo-area-newline
@c Accept (or forces completion of) the current input line.
@c 
現在の入力行を受け入れ(または強制補完し)ます．

@item @key{C-q} (@code{echo-area-quoted-insert})
@itemx @key{C-v}, vi-like operation
@kindex C-q, in the echo area
@kindex C-v, in the echo area, vi-like operation
@findex echo-area-quoted-insert
@c Insert the next character verbatim.  This is how you can insert control
@c characters into a search string, for example, or the @samp{?} character
@c when Info prompts with completion.
@c 
次の文字をそのまま挿入します．これは例えば，検索文字列に制御文字や，Info 
が補完を促しているときの@samp{?}文字の入力を可能にする方法です．

@item @var{printing character} (@code{echo-area-insert})
@kindex printing characters, in the echo area
@findex echo-area-insert
@c Insert the character.  Characters that have their 8th bit set, and not
@c bound to @samp{M-} commands, are also inserted verbatim; this is useful
@c for terminals which support Latin scripts.
@c 
文字を挿入します．八番目のビットセットで，@samp{M-}コマンドに結び付かな
い文字も，そのまま挿入されます．これはラテンスクリプトをサポートしている
端末で，役に立ちます．

@item @key{M-TAB} (@code{echo-area-tab-insert})
@itemx @key{Shift-@key{TAB}} (on DOS/Windows only)
@kindex M-TAB, in the echo area
@kindex Shift-TAB, in the echo area
@findex echo-area-tab-insert
@c Insert a TAB character.
@c 
タブ文字を挿入します．

@kindex Shift-TAB, in the echo area
@kindex BackTab, in the echo area
@c On DOS/Windows only, the @kbd{Shift-@key{TAB}} key is an alias for
@c @kbd{M-@key{TAB}}.  This key is sometimes called @samp{BackTab}.
@c 
DOS/Windowsのみで，@kbd{Shift-@key{TAB}}は@kbd{M-@key{TAB}}の代わりにな
ります．このキーは，@samp{BackTab}と呼ばれることもあります．

@item @key{C-t} (@code{echo-area-transpose-chars})
@kindex C-t, in the echo area
@findex echo-area-transpose-chars
@c Transpose the characters at the cursor.
@c 
カーソルの文字を置き換えます．
@end table

@c The next group of commands deal with @dfn{killing}, and @dfn{yanking}
@c text@footnote{
@c Some people are used to calling these operations @dfn{cut} and
@c @dfn{paste}, respectively.}.   For an in-depth discussion of killing and
@c yanking, see @ref{Killing, , Killing and Deleting, emacs, the GNU Emacs
@c Manual}.
@c 
次のコマンドのグループは，テキストの@dfn{キル(killing)}と@dfn{ヤンク
(yanking)}に対応します@footnote{これらの処理を@dfn{カット(cut)}と@dfn{ペー
スト(paste)}と呼ぶ人もいます．}．キルとヤンクの詳細は，@ref{Killing, ,
Killing and Deleting, emacs, the GNU Emacs Manual}を参照してください．

@table @asis
@item @key{M-d} (@code{echo-area-kill-word})
@itemx @key{M-X}, vi-like operation
@kindex M-d, in the echo area
@kindex M-X, in the echo area, vi-like operation
@findex echo-area-kill-word
@c Kill the word following the cursor.
@c 
カーソルに続く単語をキルします．

@item @key{M-DEL} (@code{echo-area-backward-kill-word})
@itemx @key{M-@key{BS}}
@kindex M-DEL, in the echo area
@findex echo-area-backward-kill-word
@c Kill the word preceding the cursor.
@c 
カーソルの前の単語をキルします．

@kindex M-BS, in the echo area
@c On some keyboards, the @code{Backspace} key is used instead of
@c @code{DEL}, so @code{M-@key{Backspace}} has the same effect as
@c @code{M-@key{DEL}}.
@c 
キーボードによっては，@code{Backspace}キーが@code{DEL}の代わりに使用され
ているので，@code{M-@key{Backspace}}は@code{M-@key{DEL}}と同じ効果があり
ます．

@item @key{C-k} (@code{echo-area-kill-line})
@kindex C-k, in the echo area
@findex echo-area-kill-line
@c Kill the text from the cursor to the end of the line.
@c 
カーソルから行末までのテキストをキルします．

@item @kbd{C-x @key{DEL}} (@code{echo-area-backward-kill-line})
@kindex C-x DEL, in the echo area
@findex echo-area-backward-kill-line
@c Kill the text from the cursor to the beginning of the line.
@c 
カーソルから行頭までのテキストをキルします．

@item @key{C-y} (@code{echo-area-yank})
@kindex C-y, in the echo area
@findex echo-area-yank
@c Yank back the contents of the last kill.
@c 
最後にキルした内容をヤンクします．

@item @key{M-y} (@code{echo-area-yank-pop})
@kindex M-y, in the echo area
@findex echo-area-yank-pop
@c Yank back a previous kill, removing the last yanked text first.
@c 
前にキルしたものをヤンクし，最後にヤンクしたテキストを最初に移動します．
@end table

@cindex completion
@c Sometimes when reading input in the echo area, the command that needed
@c input will only accept one of a list of several choices.  The choices
@c represent the @dfn{possible completions}, and you must respond with one
@c of them.  Since there are a limited number of responses you can make,
@c Info allows you to abbreviate what you type, only typing as much of the
@c response as is necessary to uniquely identify it.  In addition, you can
@c request Info to fill in as much of the response as is possible; this
@c is called @dfn{completion}.
@c 
エコーエリアで入力を読み込んでいるとき，入力が必要なコマンドがいくつかの
選択リストの中から一つだけ受け入れる場合もあります．選択は@dfn{可能な補
完(possible completions)} を表し，その中の一つを返答する必要があります．
作成可能な返答には多くのリストがあるので，Infoで入力を省略することを可能
になり，唯一に識別するのに必要な量だけ返答を入力します．さらに，Infoに可
能性のある返答を補充するように要求することも可能です．これは@dfn{補完
(completion)}と呼ばれます．

@c The following commands are available when completing in the echo area:
@c 
以下のコマンドは，エコーエリアでの補完を可能にします．

@table @asis
@item @key{TAB} (@code{echo-area-complete})
@itemx @key{SPC}
@kindex TAB, in the echo area
@kindex SPC, in the echo area
@findex echo-area-complete
@c Insert as much of a completion as is possible.
@c 
可能な限り補完を挿入します．

@item @key{?} (@code{echo-area-possible-completions})
@kindex ?, in the echo area
@findex echo-area-possible-completions
@c Display a window containing a list of the possible completions of what
@c you have typed so far.  For example, if the available choices are:
@c 
今まで入力したものの可能な補完のリストを含むウィンドウを表示します．例え
ば，利用可能な選択が以下の場合を考えます．

@example
@group
bar
foliate
food
forget
@end group
@end example

@noindent
@c and you have typed an @samp{f}, followed by @samp{?}, Info will pop up a
@c window showing a node called @samp{*Completions*} which lists the
@c possible completions like this:
@c 
@samp{f}に続けて@samp{?}を入力すると，Infoは，以下のような可能な補完をリ
ストアップする，@samp{*Completions*}と呼ばれるノードを表示するウィンドウ
を表示します．

@example
@group
3 completions:
foliate         food
forget
@end group
@end example

@noindent
@c i.e., all of the choices which begin with @samp{f}.  Pressing @key{SPC}
@c or @key{TAB} would result in @samp{fo} appearing in the echo area, since
@c all of the choices which begin with @samp{f} continue with @samp{o}.
@c Now, typing @samp{l} followed by @samp{TAB} results in @samp{foliate}
@c appearing in the echo area, since that is the only choice which begins
@c with @samp{fol}.
@c 
すなわち，@samp{f}で始まる選択の全てです．@key{SPC}や@key{TAB}を押すと，
選択の全ては@samp{f}で始まり@samp{o}が続くので，エコーエリアに@samp{fo} 
が結果として現われます．今，@samp{TAB}に続けて@samp{l}を入力すると，
@samp{fol}で始まる選択は@samp{foliate}だけなので，それが結果としてエコー
エリアに現われます．

@item @key{ESC C-v} (@code{echo-area-scroll-completions-window})
@kindex ESC C-v, in the echo area
@findex echo-area-scroll-completions-window
@c Scroll the completions window, if that is visible, or the "other"
@c window if not.
@c 
補完ウィンドウを，それが見えていて"他の"ウィンドウが見えない場合，スクロー
ルします．
@end table


@node Printing Nodes
@c @chapter Printing Nodes
@chapter ノードの印刷
@cindex printing

@c In general, we recommend that you use @TeX{} to format the document and
@c print sections of it, by running @code{tex} on the Texinfo source file.
@c However, you may wish to print out the contents of a node as a quick
@c reference document for later use, or if you don't have @TeX{} installed.
@c Info provides you with a command for doing this.
@c 
一般に，我々はドキュメントを書式化しそのセクションを印刷するため，
Texinfoソースファイルで@code{tex}を実行するように，@TeX{}を使用すること
を勧めます．しかし，後で使用するためのクイックリファレンスドキュメントと
してノードの内容を出力したり，@TeX{}がインストールされていない場合もあり
ます．Infoはこうするためのコマンドを提供します．

@table @asis
@item @kbd{M-x print-node}
@findex print-node
@cindex INFO_PRINT_COMMAND, environment variable
@c Pipe the contents of the current node through the command in the
@c environment variable @code{INFO_PRINT_COMMAND}.  If the variable does not
@c exist, the node is simply piped to @code{lpr} (on DOS/Windows, the
@c default is to print the node to the local printer device, @file{PRN}).
@c 
現在のノードの内容を，環境変数@code{INFO_PRINT_COMMAND}のコマンドにパイ
プで渡します．変数が定義されていない場合，ノードは単に@code{lpr}にパイプ
で渡します(DOS/Windowsではデフォルトで，ノードを印刷するローカルプリンタ
デバイス@file{PRN}です)．

@cindex printing nodes to the local printer
@cindex local printer device
@c The value of @code{INFO_PRINT_COMMAND} may begin with the @samp{>}
@c character, as in @samp{>/dev/printer}, in which case Info treats the
@c rest as the name of a file or a device.  Instead of piping to a command,
@c Info opens the file, writes the node contents, and closes the file,
@c under the assumption that text written to that file will be printed by
@c the underlying OS.
@c 
文字で始めてもかまわず，その場合Infoはフィルタやデバイスの名前として残り
を扱います．パイプコマンドの代わりに，OSで印刷されるファイルのためにテキ
ストを書いているという仮定の元で，Infoはファイルを開き，ノードの内容を書
き込みファイルを閉じます．
@end table


@node Miscellaneous Commands
@c @chapter Miscellaneous Commands
@chapter 雑多なコマンド

@c GNU Info contains several commands which self-document GNU Info:
@c 
GNU Infoは，GNU Infoそれ自身を説明するコマンドをいくつか含んでいます．

@table @asis
@item @kbd{M-x describe-command}
@cindex functions, describing
@cindex commands, describing
@findex describe-command
@c Read the name of an Info command in the echo area and then display a
@c brief description of what that command does.
@c 
エコーエリアのInfoコマンドの名前を読み込み，そのコマンドが行うことの短い
説明を表示します．

@item @kbd{M-x describe-key}
@cindex keys, describing
@findex describe-key
@c Read a key sequence in the echo area, and then display the name and
@c documentation of the Info command that the key sequence invokes.
@c 
エコーエリアのキーの並びを読み込み，それから，そのキーの並びが呼び出す
Infoコマンドの名前とドキュメントを表示します．

@item @kbd{M-x describe-variable}
@c Read the name of a variable in the echo area and then display a brief
@c description of what the variable affects.
@c 
エコーエリアの変数を読み込み，それから変数が影響を与えるものの短いドキュ
メントを表示します．

@item @kbd{M-x where-is}
@findex where-is
@c Read the name of an Info command in the echo area, and then display
@c a key sequence which can be typed in order to invoke that command.
@c 
エコーエリアのInfoコマンドを読み込み，それから，そのコマンドを呼び出すた
めに入力するキーの順番を表示します．

@item @key{C-h} (@code{get-help-window})
@itemx @key{?}
@itemx @key{F1} (on DOS/Windows only)
@itemx h, vi-like operation
@kindex C-h
@kindex ?, in Info windows
@kindex F1
@kindex h, vi-like operation
@findex get-help-window
@c Create (or Move into) the window displaying @code{*Help*}, and place
@c a node containing a quick reference card into it.  This window displays
@c the most concise information about GNU Info available.
@c 
@code{*Help*}を表示するウィンドウを作成(またはそれに移動)し，その中のク
イックリファレンスカードを含むノードに移動します．このウィンドウは，GNU
Infoが利用可能なもっとも簡潔な情報を表示します．

@item @key{h} (@code{get-info-help-node})
@itemx @key{M-h}, vi-like operation
@kindex h
@kindex M-h, vi-like operation
@findex get-info-help-node
@c Try hard to visit the node @code{(info)Help}.  The Info file
@c @file{info.texi} distributed with GNU Info contains this node.  Of
@c course, the file must first be processed with @code{makeinfo}, and then
@c placed into the location of your Info directory.
@c 
ノード@code{(info)Help}を訪問するため，懸命に試行します．GNU Infoで配布
されるInfoファイル@file{info.texi}は，このノードを含んでいます．もちろん，
最初にファイルを@code{makeinfo}で処理する必要があり，Infoディレクトリの
位置にそれを配置する必要があります．
@end table

@c Here are the commands for creating a numeric argument:
@c 
数字の引数を作成するコマンドには以下のものがあります．

@table @asis
@item @key{C-u} (@code{universal-argument})
@cindex numeric arguments
@kindex C-u
@findex universal-argument
@c Start (or multiply by 4) the current numeric argument.  @samp{C-u} is
@c a good way to give a small numeric argument to cursor movement or
@c scrolling commands; @samp{C-u C-v} scrolls the screen 4 lines, while
@c @samp{C-u C-u C-n} moves the cursor down 16 lines.  @samp{C-u} followed
@c by digit keys sets the numeric argument to the number thus typed:
@c @kbd{C-u 1 2 0} sets the argument to 120.
@c 
現在の数字の引数を開始(または四倍)します．@samp{C-u}は，カーソル移動やス
クロールコマンドへ，小さな数字の引数を与える良い方法です．@samp{C-u C-v} 
は四行画面をスクロールし，@samp{C-u C-u C-n}は16行カーソルを下に移動しま
す．数字のキーが続く@samp{C-u}は，以下のように入力された数字を数字の引数
として設定します．@kbd{C-u 1 2 0}は引数を120に設定します．

@item @key{M-1} (@code{add-digit-to-numeric-arg})
@itemx @key{1}, vi-like operation
@itemx @key{M-2} @dots{} @key{M-9}
@itemx @key{2} @dots{} @key{9}, vi-like operation
@itemx @key{M-0}
@itemx @key{0}, vi-like operation
@kindex M-0 @dots{} M-9
@kindex 0 @dots{} 9, vi-like operation
@findex add-digit-to-numeric-arg
@c Add the digit value of the invoking key to the current numeric
@c argument.  Once Info is reading a numeric argument, you may just type
@c the digits of the argument, without the Meta prefix.  For example, you
@c might give @samp{C-l} a numeric argument of 32 by typing:
@c 
現在の数字の引数に呼び出したキーの数値を加えます．一度Infoが数字の引数を
読み込むと，メタキー無しで引数の数字を入力してもかまいません．例えば，
@samp{C-l}に32を数字の引数として与える場合，以下のようにします．

@example
@kbd{C-u 3 2 C-l}
@end example

@noindent
@c or
@c 
または以下のようにします．

@example
@kbd{M-3 2 C-l}
@end example

@item @key{M--} (@code{add-digit-to-numeric-arg}
@itemx @key{-}
@kindex M--
@kindex -
@cindex negative arguments
@cindex arguments, negative
@cindex numeric arguments, negative
@c To make a negative argument, type @kbd{-}.  Typing @kbd{-} alone makes a
@c negative argument with a value of -1.  If you continue to type digit or
@c Meta-digit keys after @kbd{-}, the result is a negative number produced
@c by those digits.
@c 
負の引数を作成するため，@kbd{-}を入力してください．単独の@kbd{-}の入力は，
-1の値の負の引数を作成します．@kbd{-}の後に数字やメタキーと数字を続けた
場合，結果はそれらの数字を負の数字にして生成されます．

@c @kbd{-} doesn't work when you type in the echo area, because you need to
@c be able to insert the @samp{-} character itself; use @kbd{M--} instead,
@c if you need to specify negative arguments in the echo area.
@c 
@samp{-}文字自身を挿入可能にする必要があるので，エコーエリアで入力すると
き@kbd{-}は動作しません．エコーエリアで負の引数を指定する必要がある場合，
代わりに@kbd{M--}を使用してください．
@end table

@c @samp{C-g} is used to abort the reading of a multi-character key
@c sequence, to cancel lengthy operations (such as multi-file searches) and
@c to cancel reading input in the echo area.
@c 
@samp{C-g}は，複数の文字の並びの読み込みを中止するため，(複数ファイルの
検索のような)長い処理をキャンセルするため，そして，エコーエリアの有力を
キャンセルするために使用されます．

@table @asis
@item @key{C-g} (@code{abort-key})
@itemx @key{C-u}, vi-like operation
@cindex cancelling typeahead
@cindex cancelling the current operation
@kindex C-g, in Info windows
@kindex C-u cancels typeahead, vi-like operation
@findex abort-key
@c Cancel current operation.
@c 
現在の処理をキャンセルします．
@end table

@c The @samp{q} command of Info simply quits running Info.  Under
@c @samp{--vi-keys} (@pxref{--vi-keys}), you can also exit with @samp{:q}
@c or @samp{ZZ}.
@c 
Infoの@samp{q}コマンドは，単にInfoの実行を終了します．@samp{--vi-keys}
(@pxref{--vi-keys})の元では，@samp{:q}や@samp{ZZ}でも終了可能です．

@table @asis
@item @key{q} (@code{quit})
@itemx @kbd{C-x C-c}
@itemx @kbd{:q}, vi-like operation
@itemx @kbd{ZZ}, vi-like operation
@cindex quitting
@kindex q
@kindex C-x C-c
@kindex ZZ, vi-like operation
@findex quit
@c Exit GNU Info.
@c 
GNU Infoを終了します．
@end table

@c If the operating system tells GNU Info that the screen is 60 lines tall,
@c and it is actually only 40 lines tall, here is a way to tell Info that
@c the operating system is correct.
@c 
オペレーティングシステムが，画面の高さが60行だとGNU Infoに伝え，実際には
高さが40行しかない場合，オペレーティングシステムが正しいということをInfo 
に伝える方法は以下のものです．

@table @asis
@item @kbd{M-x set-screen-height}
@findex set-screen-height
@cindex screen, changing the height of
@c Read a height value in the echo area and set the height of the
@c displayed screen to that value.
@c 
エコーエリアの高さの値を読み込んで，表示される画面の高さをその値に設定し
ます．
@end table

@c On MS-DOS/MS-Windows, this command actually tries to change the
@c dimensions of the visible screen to the value you type in the echo
@c area.
@c 
MS-DOS/MS-Windowsでは，このコマンドは，実際に見ている画面の大きさを，エ
コーエリアに入力した値に変更しようとします．

@c Finally, Info provides a convenient way to display footnotes which might
@c be associated with the current node that you are viewing:
@c 
終りに，現在見ているノードに関連する脚注を表示するための便利な方法を，
Infoは供給します．

@table @asis
@item @key{ESC C-f} (@code{show-footnotes})
@kindex ESC C-f
@findex show-footnotes
@cindex footnotes, displaying
@c Show the footnotes (if any) associated with the current node in another
@c window.  You can have Info automatically display the footnotes
@c associated with a node when the node is selected by setting the variable
@c @code{automatic-footnotes}.  @xref{Variables, , @code{automatic-footnotes}}.
@c 
現在のノードに関連する脚注を(存在する場合は)もう一つのウィンドウに表示し
ます．変数@code{automatic-footnotes}を設定することで，ノードを選択したと
きノードに関連した脚注を，Infoに自動的に表示させることが可能です．
@end table


@node Variables
@c @chapter Manipulating Variables
@chapter 変数の操作

@c GNU Info contains several @dfn{variables} whose values are looked at by
@c various Info commands.  You can change the values of these variables,
@c and thus change the behavior of Info to more closely match your
@c environment and Info file reading manner.
@c 
GNU Infoは，様々なInfoコマンドがその値を調べる，いくつかの@dfn{変数
(variables)}を含んでいます．それらの変数の値を変更することが可能で，この
ため，環境やInfo ファイルの読み込み方をより適切にするため，Infoの動作を
変更することが可能です．

@c There are two ways to set the value of a variable: interactively, using
@c the @code{set-variable} command described below, or in the @code{#var}
@c section of the @code{.infokey} file.  @xref{Custom Key Bindings}.
@c 
変数の値を変更する方法は二つあります．対話的なものとして，以下で記述する
@code{set-variable}コマンドを使用するか，@code{.infokey}ファイルの
@code{#var}のセクションを使用します．

@table @asis
@item @kbd{M-x set-variable}
@cindex variables, setting
@findex set-variable
@c Read the name of a variable, and the value for it, in the echo area and
@c then set the variable to that value.  Completion is available when
@c reading the variable name (@pxref{The Echo Area, completion}); often,
@c completion is available when reading the value to give to the variable,
@c but that depends on the variable itself.  If a variable does @emph{not}
@c supply multiple choices to complete over, it expects a numeric value.
@c 
エコーエリアで変数名とその値を読み込み，そして，変数にその値を設定します．
変数名を読み込んでいるとき，補完が利用可能です(@pxref{The Echo Area,
completion})．変数に与える値の読み込みで，補完が利用可能なことも多いので
すが，それは変数自身に依存します．変数が，完全に完了するための複数の選択
を供給@emph{しない}場合，それは数字の値を期待します．

@item @kbd{M-x describe-variable}
@cindex variables, describing
@findex describe-variable
@c Read the name of a variable in the echo area and then display a brief
@c description of what the variable affects.
@c 
エコーエリアの変数名を読み込み，その変数が影響を与えるものの短い記述を表
示します．
@end table

@c Here is a list of the variables that you can set in Info.
@c 
Infoで設定可能な変数のリストは以下のようになります．

@table @code
@item automatic-footnotes
@vindex automatic-footnotes
@c When set to @code{On}, footnotes appear and disappear automatically;
@c else, they appear at the bottom of the node text.  This variable is
@c @code{Off} by default.  When a node is selected, a window containing
@c the footnotes which appear in that node is created, and the footnotes
@c are displayed within the new window.  The window that Info creates to
@c contain the footnotes is called @samp{*Footnotes*}.  If a node is
@c selected which contains no footnotes, and a @samp{*Footnotes*} window
@c is on the screen, the @samp{*Footnotes*} window is deleted.  Footnote
@c windows created in this fashion are not automatically tiled so that
@c they can use as little of the display as is possible.
@c 
@code{On}に設定したとき，脚注は自動的に表示されたり消えたりします．そう
でない場合，それはノードテキストの下に表示されます．この変数は@code{Off} 
がデフォルトです．ノードが選択されたとき，ノードにある脚注を含んでいるウィ
ンドウが作成され，脚注はその新しいウィンドウに表示されます．脚注を含める
ためにInfoが作成したウィンドウは，@samp{*Footnotes*} と呼ばれます．脚注
を含まないノードが選択され，@samp{*Footnotes*}ウィンドウが画面にある場合，
@samp{*Footnotes*}ウィンドウは削除されます．この流儀で作成された脚注のウィ
ンドウは，表示をできるだけ小さくして使用することを可能にするため，自動的
に並べ換えされません．

@item automatic-tiling
@vindex automatic-tiling
@c When set to @code{On}, creating or deleting a window resizes other
@c windows.  This variable is @code{Off} by default.  Normally, typing
@c @samp{C-x 2} divides the current window into two equal parts.  When
@c @code{automatic-tiling} is set to @code{On}, all of the windows are
@c resized automatically, keeping an equal number of lines visible in each
@c window.  There are exceptions to the automatic tiling; specifically, the
@c windows @samp{*Completions*} and @samp{*Footnotes*} are @emph{not}
@c resized through automatic tiling; they remain their original size.
@c 
@code{On}に設定したとき，ウィンドウの作成と削除で，他のウィンドウの大き
さを変更します．この変数は@code{Off}がデフォルトです．通常，@samp{C-x 2} 
の入力で現在のウィンドウを均等に二分割します．@code{automatic-tiling}が
@code{On}に設定されているとき，全てのウィンドウの大きさは自動的に変更さ
れ，それぞれのウィンドウの表示行数が同じに保たれます．自動的な並べ換えに
は例外があります．特に，ウィンドウ@samp{*Completions*}と
@samp{*Footnotes*}は自動的に並べ換え@emph{されません}．それらは元の大き
さのままです．

@item errors-ring-bell
@vindex errors-ring-bell
@c When set to @code{On}, errors cause the bell to ring.  The default
@c setting of this variable is @code{On}.
@c 
@code{On}に設定したとき，エラー時にベルをならします．この変数のデフォル
ト設定は@code{On}です．

@item gc-compressed-files
@vindex gc-compressed-files
@c When set to @code{On}, Info garbage collects files which had to be
@c uncompressed.  The default value of this variable is @code{Off}.
@c Whenever a node is visited in Info, the Info file containing that node
@c is read into core, and Info reads information about the tags and nodes
@c contained in that file.  Once the tags information is read by Info, it
@c is never forgotten.  However, the actual text of the nodes does not need
@c to remain in core unless a particular Info window needs it.  For
@c non-compressed files, the text of the nodes does not remain in core when
@c it is no longer in use.  But de-compressing a file can be a time
@c consuming operation, and so Info tries hard not to do it twice.
@c @code{gc-compressed-files} tells Info it is okay to garbage collect the
@c text of the nodes of a file which was compressed on disk.
@c 
@code{On}に設定したとき，Infoは展開する必要があったファイルのガベージコ
レクションを実行します．この値のデフォルト値は@code{Off}です．Infoでノー
ドを訪問するときはいつでも，ノードを含むInfoファイルはコア部分に読み込ま
れ，Infoはそのファイルに含まれているタグとノードに関する情報を読み込みま
す．Infoが一度タグ情報を読み込むと，それを決して忘れません．しかし，ノー
ドの実際のテキストは，特定のInfoウィンドウが必要としない限り，コア部分に
残す必要はありません．圧縮されていないファイルに対して，ノードのテキスト
が使用されなくなった時点でコア部分に残されません．しかし，ファイルの圧縮
解除は時間がかかる処理なので，Infoは再び行おうとはしません．
@code{gc-compressed-files}で，ディスク上の圧縮されたファイルのノードのテ
キストをガベージコレクションしてもいいことをInfoに伝えます．

@item ISO-Latin
@cindex ISO Latin characters
@vindex ISO-Latin
@c When set to @code{On}, Info accepts and displays ISO Latin characters.
@c By default, Info assumes an ASCII character set.  @code{ISO-Latin} tells
@c Info that it is running in an environment where the European standard
@c character set is in use, and allows you to input such characters to
@c Info, as well as display them.
@c 
@code{On}に設定したとき，InfoはISOラテン文字を表示しようとします．デフォ
ルトで，InfoはASCII文字集合だと考えます．@code{ISO-Latin}はInfoに，ヨー
ロッパ標準文字集合が使用されている環境だと伝え，Infoにそのような文字を入
力することを許可し，また表示も同様に許可されます．

@item scroll-behavior
@vindex scroll-behavior
@c Control what happens when forward scrolling is requested at the end of
@c a node, or when backward scrolling is requested at the beginning of a
@c node.  The default value for this variable is @code{Continuous}.  There
@c are three possible values for this variable:
@c 
前方スクロールがノードの終りを告げたときや，後方スクロールがノードの最初
を告げたときに生じることを制御します．この変数のデフォルト値は
@code{Continuous}です．この変数には，三つの利用可能な値があります．

@table @code
@item Continuous
@c Try to get the first item in this node's menu, or failing that, the
@c @samp{Next} node, or failing that, the @samp{Next} of the @samp{Up}.
@c This behavior is identical to using the @samp{]}
@c (@code{global-next-node}) and @samp{[} (@code{global-prev-node})
@c commands.
@c 
このノードのメニューの最初の項目に行こうとし，失敗すると@samp{Next}，失
敗すると@samp{Up}の@samp{Next}に行こうとします．この動作は，@samp{]}
(@code{global-next-node})と@samp{[} (@code{global-prev-node})コマンドと
同じです．

@item Next Only
@c Only try to get the @samp{Next} node.
@c 
@samp{Next}ノードに行こうとするだけです．

@item Page Only
@c Simply give up, changing nothing.  If @code{scroll-behavior} is
@c @code{Page Only}, no scrolling command can change the node that is being
@c viewed.
@c 
単にギブアップし，何も変更しません．@code{scroll-behavior}が@code{Page
Only}の場合，スクロールコマンドは見ているノードを変更できません．
@end table

@item scroll-step
@vindex scroll-step
@c The number of lines to scroll when the cursor moves out of the window.
@c Scrolling happens automatically if the cursor has moved out of the
@c visible portion of the node text when it is time to display.  Usually
@c the scrolling is done so as to put the cursor on the center line of the
@c current window.  However, if the variable @code{scroll-step} has a
@c nonzero value, Info attempts to scroll the node text by that many lines;
@c if that is enough to bring the cursor back into the window, that is what
@c is done.  The default value of this variable is 0, thus placing the
@c cursor (and the text it is attached to) in the center of the window.
@c Setting this variable to 1 causes a kind of "smooth scrolling" which
@c some people prefer.
@c 
カーソルがウィンドウの外に移動したとき，スクロールする行数です．ノードの
テキストを表示するとき，それが見える位置の外にカーソルが移動した場合，自
動的にスクロールされます．通常スクロールは，カーソルを現在のウィンドウの
真中にカーソルがあるように行われます．しかし，変数@code{scroll-step}がゼ
ロではない値を持つ場合，Infoはノードのテキストのスクロールを何行も試みま
す．スクロールがカーソルをウィンドウの中にもたらすのに十分な場合，そのよ
うにスクロールされます．変数のデフォルト値は0で，このためカーソル(と，対
応するテキストは)はウィンドウの真中に配置されます．この変数を1に設定する
と，それが好きな人もいる"スムーズスクロール"のようなものになります．

@item show-index-match
@vindex show-index-match
@c When set to @code{On}, the portion of the matched search string is
@c highlighted in the message which explains where the matched search
@c string was found.  The default value of this variable is @code{On}.
@c When Info displays the location where an index match was found,
@c (@pxref{Searching Commands, , @code{next-index-match}}), the portion of the
@c string that you had typed is highlighted by displaying it in the inverse
@c case from its surrounding characters.
@c 
@code{On}に設定したとき，検索文字に一致した部分は，検索した文字の一致が
見つかったところで，それを説明するメッセージを強調します．この変数のデフォ
ルト値は@code{On}です．Infoが索引の一致を見つけたところを表示するとき
(@pxref{Searching Commands, , @code{next-index-match}})，入力した文字の
部分は周りの文字の反転表示で強調されます．

@item visible-bell
@vindex visible-bell
@c When set to @code{On}, GNU Info attempts to flash the screen instead of
@c ringing the bell.  This variable is @code{Off} by default.  Of course,
@c Info can only flash the screen if the terminal allows it; in the case
@c that the terminal does not allow it, the setting of this variable has no
@c effect.  However, you can make Info perform quietly by setting the
@c @code{errors-ring-bell} variable to @code{Off}.

@code{On}に設定したとき，GNU Infoはベルをならす代わりに，画面を点滅させ
ようとします．この変数は，@code{Off}がデフォルトです．もちろん，Infoは端
末が許す場合のみ，画面を点滅させることが可能です．端末でそれが不可能な場
合，この変数の設定は効果がありません．しかし，@code{errors-ring-bell}変
数を@code{Off}に設定することで，Infoに静かに動作させることが可能です．

@end table


@node Custom Key Bindings
@c @chapter Customizing Key Bindings and Variables
@chapter キーバインドと変数のカスタマイズ

@cindex default key bindings, overriding
@cindex overriding default key bindings
@cindex customizing key bindings
@cindex key bindings, customizing
@cindex infokey
@cindex .info
@cindex .infokey
@cindex _info file (MS-DOS)

@c For those whose editor/pager of choice is not Emacs and who are not
@c entirely satisfied with the --vi-keys option (@pxref{--vi-keys}), GNU
@c Info provides a way to define different key-to-command bindings and
@c variable settings from the defaults described in this document.
@c 
Emacs以外のエディタやページャを選択していて，@samp{--vi-keys}オプション
(@pxref{--vi-keys})で完全には満足しない人々のために，GNU Infoはこのドキュ
メントで記述されているものとは異なるキーバインドの定義と変数の設定を行な
う方法を提供しています．

@c On startup, GNU Info looks for a configuration file in the invoker's
@c HOME directory called @file{.info}@footnote{Due to the limitations of
@c DOS filesystems, the MS-DOS version of Info looks for a file
@c @file{_info} instead.  If the @env{HOME} variable is not defined, Info
@c additionally looks in the current directory.}.  If it is present, and
@c appears to contain Info configuration data, and was created with the
@c current version of the @code{infokey} command, then Info adopts the
@c key bindings and variable settings contained therein.
@c 
開始時に，GNU Infoは呼び出しを行なっている人の@samp{HOME}ディレクトリで
@file{.info}@footnote{DOSのファイルシステムの制限のため，MS-DOSバージョ
ンのInfoでは，代わりに@file{_info}ファイルを探します．@env{HOME}変数が定
義されていない場合，Infoは現在のディレクトリでも探します．}と呼ばれるファ
イルを探します．存在する場合で，Infoのコンフィグレーションデータが含まれ
ていて，現在のバージョンの@code{infokey}コマンドで作成されている場合，
Infoはキーバインドと変数の設定としてそこにあるものを適用します．

@c The @file{.info} file contains compact, non-textual data for reasons of
@c efficiency and because its design was lifted wholesale from the GNU Less
@c program, which also does it that way.  It must be created by compiling a
@c textual source file using the @code{infokey} command.
@c 
@file{.info}は効率をあげるため，そしてその設計をGNU Lessプログラムから大
量に持ってきているため，同じようにコンパクトな，テキストではないデータを
含んでいます．それは，@code{infokey}コマンドを使用して，テキストのソース
ファイルをコンパイルして作成する必要があります．

@menu
* Invoking infokey::
* infokey source format::
@end menu


@node Invoking infokey
@c @section Invoking @command{infokey}
@section @command{infokey}の呼び出し

@cindex invoking infokey
@cindex infokey, invoking
@cindex _infokey file (MS-DOS)

@c @command{infokey} compiles a source file
@c (@file{$HOME/.infokey}@footnote{This file is named @file{_infokey} in
@c the MS-DOS version, and is looked for in the current directory if
@c @env{HOME} is undefined.} by default) containing Info customizations
@c into a binary format (@file{$HOME/.info} by default).  GNU Info reads
@c the binary file at startup to override the default key bindings and
@c variable definitions.  Synopsis:
@c 
@command{infokey}は，Infoのカスタマイズ方法を含んでいるソースファイル(デ
フォルトは@file{$HOME/.infokey}@footnote{MS-DOSバージョンではこのファイ
ルは@file{_infokey}と命名されていて，@env{HOME}が定義されていない場合は，
カレントディレクトリで探します．})を，バイナリフォーマット(デフォルトは
@file{$HOME/.info})にコンパイルします．デフォルトのキーバインドと変数定
義に優先させるため，GNU Infoは開始時にバイナリファイルを読み込みます．構
文は以下のとおりです．

@example
infokey [@var{option}@dots{}] [@var{input-file}]
@end example

@c Besides the standard @option{--help} and @option{--version}, the only
@c option is @option{--output @var{file}}.  This tells @command{infokey} to
@c write the binary data to @var{file} instead of @file{$HOME/.info}.
@c 
標準的な@option{--help}と@option{--version}以外では，唯一のオプションと
して@option{--output @var{file}}があります．これで@command{infokey}にバ
イナリデータを書き込む@file{$HOME/.info}の代わりの@var{file}を伝えます．


@node infokey source format
@c @section @command{infokey} source format
@section @command{infokey}のソースの書式

@cindex infokey source format
@cindex .infokey source format
@cindex format of .infokey source

@c The format of the source file read by @command{infokey} is most easily
@c illustrated by example.  For instance, here is a sample @file{.infokey}
@c source file suitable for aficionados of @command{vi} or @command{less}:
@c 
@command{infokey}で読み込まれるソースファイルの書式は，例で説明するのが
最も簡単です．例えば，@command{vi}や@command{less}の愛好者に適しているサ
ンプルの@file{.infokey}のソースファイルは以下のようになります．

@example
#info
j       next-line
k       prev-line
l       forward-char
h       backward-char
\kd     next-line
\ku     prev-line
\kr     forward-char
\kl     backward-char
\       scroll-forward
\kD     scroll-forward-page-only
b       scroll-backward
\kU     scroll-backward-page-only
g       beginning-of-node
\kh     beginning-of-node
G       end-of-node
\ke     end-of-node
\t      select-reference-this-line
-       history-node
n       next-node
p       prev-node
u       up-node
t       top-node
d       dir-node
#var
scroll-step=1
@end example

@c The source file consists of one or more @dfn{sections}.
@c Each section starts with a line that identifies the type of section.
@c Possible sections are:
@c 
ソースファイルは一つ以上の@dfn{セクション(sections)}から成り立ちます．そ
れぞれのセクションはセクションの形式を識別する行で開始します．利用可能な
セクションは以下のとおりです．

@table @code
@item #info
@c Key bindings for Info windows.
@c The start of this section is indicated by a line containing just
@c @code{#info} by itself.  If this is the first section in the source
@c file, the @code{#info} line can be omitted.  The rest of this section
@c consists of lines of the form:
@c 
Infoウィンドウに対するキーバインドです．このセクションの始めは，
@code{#info}のみの単独行で示されています．これがソースファイルの最初のセ
クションの場合，@code{#info}行は省略可能です．このセクションの残りは，以
下の形式の行から成り立っています．

@example
@var{string} whitespace @var{action} [ whitespace [ # comment ] ] newline
@end example

@c Whitespace is any sequence of one or more spaces and/or tabs.  Comment
@c is any sequence of any characters, excluding newline.  @var{string} is
@c the key sequence which invokes the action.  @var{action} is the name of
@c an Info command.  The characters in @var{string} are interpreted
@c literally or prefixed by a caret (@code{^}) to indicate a control
@c character.  A backslash followed by certain characters specifies input
@c keystrokes as follows:
@c 
空白は，一つ以上のスペースそして/またはタブです．コメントは，改行以外の
文字列です．@var{string}は動作を呼び出すキーの順序です．@var{string}内の
文字は，そのまま解釈されるか，コントロール文字を示すキャレット(@code{^}) 
が前置されているものとして解釈されます．特定の文字が続いているバックスラッ
シュは，以下のキーストロークを指定します．

@table @code
@item \b
@c Backspace
@c 
バックスペース
@item \e
@c Escape (ESC)
@c 
エスケープ(ESC)
@item \n
@c Newline
@c 
改行
@item \r
@c Return
@c 
リターン
@item \t
@c Tab
@c 
タブ
@item \ku
@c Up arrow
@c 
上矢印
@item \kd
@c Down arrow
@c 
下矢印
@item \kl
@c Left arrow
@c 
左矢印
@item \kr
@c Right arrow
@c 
右矢印
@item \kU
Page Up
@item \kD
Page Down
@item \kh
HOME
@item \ke
END
@item \kx
Delete (DEL)
@item \m@var{x}
@c Meta-@var{x} where @var{x} is any character as described above.
@c 
Meta-@var{x}で，@var{x}は上で記述されている文字．
@end table

@c Backslash followed by any other character indicates that character is to
@c be taken literally.  Characters which must be preceded by a backslash
@c include caret, space, tab, and backslash itself.
@c 
それ以外の文字が続いているバックスラッシュは，その文字そのものを示します．
バックスラッシュを前置する必要がある文字には，キャレット，スペース，タブ，
そしてバックスラッシュ自身が含まれます．

@item #echo-area
@c Key bindings for the echo area.
@c The start of this section is indicated by a line containing just
@c @code{#echo-area} by itself.  The rest of this section has a syntax
@c identical to that for the key definitions for the Info area, described
@c above.
@c 
エコーエリアに対するキーバインドです．このセクションの始めは，
@code{#echo-area}のみの単独行で示されます．このセクションの残りには，上
で記述したInfoエリアに対するキーの定義と同一の構文があります．

@item #var
@c Variable initializations.
@c The start of this section is indicated by a line containing just
@c @code{#var} by itself.  Following this line is a list of variable
@c assignments, one per line.  Each line consists of a variable name
@c (@xref{Variables},) followed by @code{=} followed by a value.
@c There may be no white space between the variable name and the @code{=},
@c and all characters following the @code{=}, including white space,
@c are included in the value.
@c 
変数の初期化です．このセクションの始めは，@code{#var}のみの単独行で示さ
れます．これに続く行は，一行ごとに値を割り当てるリストです．それぞれの行
は，変数名(@pxref{Variables})，それに続く@code{=}，それに続く値から成り
立ちます．変数名と@code{=}の間の空白は書かなくてもよく，@code{=}に続くす
べての文字列は，空白を含めて値に含まれます．
@end table

@c Blank lines and lines starting with @code{#} are ignored, except for
@c the special section header lines.
@c 
空白行と@code{#}で始まる行は，特殊なセクションヘッダ行以外は無視されます．

@c Key bindings defined in the @file{.info} file take precedence over GNU
@c Info's default key bindings, whether or not @samp{--vi-keys} is used.  A
@c default key binding may be disabled by overriding it in the @file{.info}
@c file with the action @code{invalid}.  In addition, @emph{all} default
@c key bindings can be disabled by adding this line @emph{anywhere} in the
@c relevant section:
@c 
@file{.info}ファイルで定義されたキーバインドは，GNU Infoのデフォルトに優
先され，それは@samp{--vi-keys}が使用されているかどうかによりません．デフォ
ルトのキーバインドは，アクション@code{invalid}を用いている@file{.info}ファ
イルで優先することで利用不可能にしてもかまいません．さらに，@emph{すべて
の}デフォルトのキーバインドは，関連するセクションの@emph{どこかに}以下の
行を追加することで，利用不可能にすることができます．

@example
#stop
@end example

@c This will cause GNU Info to ignore all the default key commands for that
@c section.
@c 
これでGNU Infoは，そのセクションに対するすべてのデフォルトキーコマンドを
無視します．

@c Beware: @code{#stop} can be dangerous.  Since it disables all default
@c key bindings, you must supply enough new key bindings to enable all
@c necessary actions.  Failure to bind any key to the @code{quit} command,
@c for example, can lead to frustration.
@c 
注意：@code{#stop}は危険です．それはすべてのデフォルトのキーバインドを利
用不可能にするので，必要なすべての動作を利用可能にするために，新しいキー
バインドを十分に提供する必要があります．例えば，@code{quit}コマンドのキー
バインドに失敗するとどうにもなりません．

@c The order in which key bindings are defined in the @file{.info} file is
@c not important, except that the command summary produced by the
@c @code{get-help-window} command only displays the @emph{first} key that
@c is bound to each command.
@c 
@code{get-help-window}コマンドで生成されるコマンドの概要が，それぞれのコ
マンドに割り当てられている@emph{最初の}キーしか表示しないこと以外，
@file{.info}ファイルでキーバインドを定義する順番は重要ではありません．


@c the following is incomplete
@ignore
@c node Info for Sys Admins
@c chapter Info for System Administrators

This text describes some common ways of setting up an Info hierarchy
from scratch, and details the various options that are available when
installing Info.  This text is designed for the person who is installing
GNU Info on the system; although users may find the information present
in this section interesting, none of it is vital to understanding how to
use GNU Info.

@menu
* Setting the INFOPATH::        Where are my Info files kept?
* Editing the DIR node::        What goes in `DIR', and why?
* Storing Info files::          Alternate formats allow flexibility in setups.
* Using `localdir'::            Building DIR on the fly.
* Example setups::              Some common ways to organize Info files.
@end menu

@c node Setting the INFOPATH
@c section Setting the INFOPATH

Where are my Info files kept?

@c node Editing the DIR node
@c section Editing the DIR node

What goes in `DIR', and why?

@c node Storing Info files
@c section Storing Info files

Alternate formats allow flexibility in setups.

@c node Using `localdir'
@c section Using `localdir'

Building DIR on the fly.

@c node Example setups
@c section Example setups

Some common ways to organize Info files.
@end ignore


@node Copying This Manual
@c @appendix Copying This Manual
@appendix このマニュアルのコピー

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@c @appendix Index
@appendix 索引

@printindex cp

@bye
