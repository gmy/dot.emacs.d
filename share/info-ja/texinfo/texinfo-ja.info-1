これは texinfo-ja.info、texinfo-ja.texi より makeinfo
バージョン 4.8 によって作成されました。

  This manual is for GNU Texinfo (version 4.3, 14 November 2002), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo(ja): (texinfo-ja).           The GNU documentation format.
* install-info(ja): (texinfo-ja)Invoking install-info. Update info/dir entries.
* texi2dvi(ja): (texinfo-ja)Format with texi2dvi.      Print Texinfo documents.
* texindex(ja): (texinfo-ja)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo(ja): (texinfo-ja)Invoking makeinfo.         Translate Texinfo source.
END-INFO-DIR-ENTRY


File: texinfo-ja.info,  Node: Top,  Next: Copying Conditions,  Up: (dir)

Texinfo
*******

This manual is for GNU Texinfo (version 4.3, 14 November 2002), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

このマスターメニューの最初の部分で，このInfoドキュメントの主なノードをリ
ストアップしていて，それには@-コマンドと概念の索引が含まれています．メ
ニューの残りはすべて，このドキュメントの下位レベルのノードです．

* Menu:

* Copying Conditions::          Your rights.
* Overview::                    Texinfo in brief.
* Texinfo Mode::                How to use Texinfo mode.
* Beginning a File::            What is at the beginning of a Texinfo file?
* Ending a File::               What is at the end of a Texinfo file?
* Structuring::                 How to create chapters, sections, subsections,
                                  appendices, and other parts.
* Nodes::                       How to write nodes.
* Menus::                       How to write menus.
* Cross References::            How to write cross references.
* Marking Text::                How to mark words and phrases as code,
                                  keyboard input, meta-syntactic
                                  variables, and the like.
* Quotations and Examples::     How to write quotations, examples, etc.
* Lists and Tables::            How to write lists and tables.
* Indices::                     How to create indices.
* Insertions::                  How to insert @-signs, braces, etc.
* Breaks::                      How to force and prevent line and page breaks.
* Definition Commands::         How to describe functions and the like
                                  in a uniform manner.
* Conditionals::                How to specify text for either TeX or Info.
* Internationalization::
* Defining New Texinfo Commands::
* Hardcopy::                    How to convert a Texinfo file to a file
                                  for printing and how to print that file.
* Creating and Installing Info Files::
* Command List::                All the Texinfo @-commands.
* Tips::                        Hints on how to write a Texinfo document.
* Sample Texinfo Files::        Complete examples, including full texts.
* Include Files::               How to incorporate other Texinfo files.
* Headings::                    How to write page headings and footings.
* Catching Mistakes::           How to find formatting mistakes.
* Refilling Paragraphs::        All about paragraph refilling.
* Command Syntax::              A description of @-Command syntax.
* Obtaining TeX::               How to Obtain TeX.
* Copying This Manual::         The GNU Free Documentation License.
* Command and Variable Index::  A menu containing commands and variables.
* Concept Index::               A menu covering many topics.

 --- 詳細なノードのリスト ---

Texinfoの概要

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.

Texinfoモードを使用する

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.

ノードとメニューを更新する

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.

Texinfoファイルを開始する

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                   have the right to use and share software.

Texinfoファイルのヘッダ

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.

ドキュメントに対する許可

* copying::                 Declare the document's copying permissions.
* insertcopying::           Where to insert the permissions.

タイトルと著作権のページ

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                 and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                 and `@author' commands.
* Copyright::                   How to write the copyright notice and
                                 include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                 copyright pages.
* headings on off::             An option for turning headings on and off
                                 and double or single sided printing.

`Top'ノードとマスターメニュー

* Top Node Example::
* Master Menu Parts::

大域的なドキュメントコマンド

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* exampleindent::               Specify environment indentation.

Texinfoファイルを終える

* Printing Indices & Menus::    How to print an index in hardcopy and
                                 generate index menus in Info.
* Contents::                    How to create a table of contents.
* File End::                    How to mark the end of a file.

章の構造

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The `@top' command, part of the `Top' node.
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.

ノード

* Two Paths::                   Different commands to structure
                                 Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.

`@node'コマンド

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an `@node' line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the `@top' command.

メニュー

* Menu Location::               Put a menu in a short node.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.

相互参照

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.

`@xref'

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with four and five arguments.

単語と文節に印を付ける

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.

定義やコマンド等を示す

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* acronym::                     Indicating acronyms.
* url::                         Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.

テキストの強調

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.

引用と例

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Forms for `@smallbook'.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.

リストと表

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.

二列の表の作成

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.

複数列の表

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.

索引

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                 of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.

索引の統合

* syncodeindex::                How to merge two indices, using `@code'
                                 font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                 default font of the merged-to index.

特別な挿入

* Braces Atsigns::              How to insert braces, `@'.
* Inserting Space::             How to insert the right amount of space
                                 within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                 and the copyright symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                 expansion of macros, errors, etc.
* Footnotes::                   How to include footnotes.
* Images::                      How to include graphics.

@とカッコの挿入

* Inserting An Atsign::         How to insert `@'.
* Inserting Braces::            How to insert `{' and `}'.

スペースの挿入

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.

省略と黒点の挿入

* dots::                        How to insert dots ...
* bullet::                      How to insert a bullet.

TeXと著作権シンボルの挿入

* tex::                         How to insert the TeX logo.
* copyright symbol::            How to use `@copyright{}'.

例のためのglyph

* Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.

glyphの概要

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::

脚注

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.

改行，改ページの作成と阻止

* Break Commands::              Summary of break-related commands.
* Line Breaks::                 Forcing line breaks.
* - and hyphenation::           Helping TeX with hyphenation points.
* w::                           Preventing unwanted line breaks in text.
* tie::                         Inserting an unbreakable but varying space.
* sp::                          Inserting blank lines.
* page::                        Forcing the start of a new page.
* group::                       Preventing unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.

定義コマンド

* Def Cmd Template::            How to structure a description using a
                                 definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::

定義コマンド

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.

表示されるテキストの条件

* Conditional Commands::        Specifying text for HTML, Info, or TeX.
* Conditional Not Commands::    Specifying text for not HTML, Info, or TeX.
* Raw Formatter Commands::      Using raw TeX or HTML commands.
* set clear value::             Designating which text to format (for
                                 all output formats); and how to set a
                                 flag to a string that you can insert.

`@set'，`@clear'，そして`@value'

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.

国際化

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.

新しいTexinfoコマンドの定義

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.

ハードコピーの書式化と印刷

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                               of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.

Infoファイルの作成とインストール

* Creating an Info File::
* Installing an Info File::

Infoファイルの作成

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.
* makeinfo html::               Generating HTML output.

Infoファイルのインストール

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking install-info::       `install-info' options.

Texinfoファイルの見本

* Short Sample Texinfo File::
* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::

インクルードファイル

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                 menus when using included files.
* Include File Requirements::   What `texinfo-multiple-files-update' expects.
* Sample Include File::         A sample outer file with included files
                                 within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                 has changed over time.

ページ見出し

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.

書式化の失敗

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.

悪いノード参照を見つける

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.

このマニュアルのコピーについて

* GNU Free Documentation License::  License for copying this manual.

     ドキュメントはSexに似ていて，いいときはとってもいいし，ダメなときは何も
     しないのと一緒だね． --Dick Brandon


File: texinfo-ja.info,  Node: Copying Conditions,  Next: Overview,  Prev: Top,  Up: Top

Texinfoのコピー条件
*******************

Texinfoに関連する，現在配布されているプログラムには，`makeinfo'，
`info'，`texindex'，そして`texinfo.tex'が含まれています．
これらのプログラムは"フリー(free)"です．これは，誰でも自由に使用し，
自由を基本として自由に再配布できるということを意味します．Texinfo関連の
プログラムはパブリックドメインではありません．著作権があり配布に関して制
限がありますが，これらの制限は，良心的で協力的な市民が望むものを全て認め
るよう設計されています．許可されないことは，あなたから得たこれらのプログ
ラムのあらゆるバージョンを，他の人が共有することの妨害を試みることです．

具体的には，我々はTexinfoに関連するプログラムのコピーを与える権利をあな
たが持っていることを確かめたいと思っていて，それらの権利とは，あなたがソー
スコードを受け取るか，欲しい場合は入手可能だということ，これらのプログラ
ムを変更したり新しいフリーのプログラムにその一部を使用したりできること，
そして，これらのことを知っているということです．

皆がそのような権利を持っていることを確認するため，我々は，あなたが他の誰
かから権利を奪うことを禁止する必要があります．例えば，あなたがTexinfoに
関連するプログラムを配布する場合，あなたは，あなたが持つ全ての権利を与え
る必要があります．そして，ソースコードを受け取る，または得られることを確
かめる必要があります．そして，権利について教える必要があります．

また我々自身を守るため，Texinfoに関連するプログラムに対し保証が無いとい
うことを全ての人が理解することを確実にする必要があります．プログラムが誰
かに編集されて渡された場合，受け取ったものが我々が配布したものではないの
で，他人が招いたあらゆる問題が我々の判断の影響を受けていないことを受け取っ
た人が知っていて欲しいと思います．

Texinfoに関連する，現在配布されているプログラムに対するライセンスの正確
な状態は，一緒に配布されるGeneral Public Licensesで見つかります．このマ
ニュアルは，特にGNU Free Documentation Licenseでカバーされています
(*note GNU Free Documentation License::)．


File: texinfo-ja.info,  Node: Overview,  Next: Texinfo Mode,  Prev: Copying Conditions,  Up: Top

1 Texinfoの概要
***************

"Texinfo"(1) (*note Overview-Footnote-1::)
は，オンラインの情報と印刷物の両方を作成するため，単一ファイルを用いたド
キュメントシステムです．これは，一つをオンライン情報，もう一つを印刷物，
といった異なる二つのドキュメントを書く代わりに，一つのドキュメントを書く
だけで良いということを意味します．それゆえ，ワークが修正されたとき，一つ
のドキュメントだけを修正するだけですみます．

* Menu:

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.


File: texinfo-ja.info,  Node: Overview-Footnotes,  Up: Overview

  (1) "Texinfo"の最初の音節は，"hex"ではなく，
"speck"のように発音します．この奇妙な発音はTeXの発音が由来ですが，
同じではありません．実際には，単語TeXの`X'は英文字"ex"ではなく
ギリシャ文字"chi"となります．TeXの`X'は名前の`Bach'の最後の音
のように発音してください．しかし，Texinfoは`x'を`k'のように発音して
ください．"Texinfo"を大文字"T"とそれ以外は小文字で綴ってください．


File: texinfo-ja.info,  Node: Reporting Bugs,  Next: Using Texinfo,  Up: Overview

1.1 バグの報告
==============

我々は，Texinfoシステム，プログラム，ドキュメント，インストール，その他
あらゆる面で，バグの報告と提案を歓迎します．それらを電子メールで，
<bug-texinfo@gnu.org>に送ってください．Texinfoの最新バージョンは，
`ftp://ftp.gnu.org/gnu/texinfo/'と世界中のミラーサイトで入手可能で す．

管理者が問題を再現するため，バグの報告に十分な情報を含めてください．一般
的に言って以下を意味します．

   *
     Texinfoのバージョンナンバーと一緒に配布されるプログラムやマニュアル．

   * ハードウェアとオペレーティングシステムの名前とバージョン．

   * バグの再現に必要な入力ファイルの内容．

   * 問題の記述とエラー出力のサンプル．

   * `configure'に与えた普通ではないオプション．

   * その他，役に立ちそうなもの．

必要かどうか疑わしい場合はそれを含めてください．重要なものを除くより多く
を含める方が良いでしょう．

  パッチは最も歓迎しますが，できれば`diff -c'(*note Overview:
(diffutils)Top.)で作成し， `ChangeLog'の項目(*note Change Log:
(emacs)Change Log.)を含めてください．

パッチを送るとき，可能であればメッセージを符号化したり分割したりしないで
ください．たとえ大きくても，小さいものがたくさんあるより，一つのプレーン
テキストになっている方が簡単に扱えます． GNU shar
(ftp://ftp.gnu.org/gnu/sharutils/)は，電子メールで複数の
バイナリファイルをまとめる便利な方法です．


File: texinfo-ja.info,  Node: Using Texinfo,  Next: Info Files,  Prev: Reporting Bugs,  Up: Overview

1.2 Texinfoを使用する
=====================

Texinfoを使用し，普通の本のような形態の印刷ドキュメントの作成が可能で，
それは，章，セクション，相互参照，そして索引が含まれます．同じTexinfoの
ソースファイルから，ノード，メニュー，相互参照，そして索引を用いた，メ
ニュー駆動形式のオンラインInfoファイルを作成することが可能です．また，同
じソースファイルから，ウェブブラウザの利用に適したHTML出力ファイルやXML
ファイルを作成することも可能です．`The GNU Emacs Manual'は，このマ
ニュアル同様，Texinfo ファイルの良い例です．

  印刷ドキュメントを作成するTexinfoソースファイルを，TeX植字プログラム
を使用して処理します(しかし，Texinfo言語はTeXの普通の言語のプレーン
TeXと比べてかなり異なっていて，より厳密になっています)．これは，本や
レポートのように植字して印刷することが可能なDVIファイルを作成します
(*note Hardcopy::)．

  Infoファイルを出力するため，Texinfoソースファイルを，`makeinfo'ユー
ティリティか，Emacsの`texinfo-format-buffer'コマンドで処理してくだ
さい．結果をInfoツリーにインストールすることが可能です(*note Installing
an Info File::)．

  HTMLファイルを出力するために，Texinfoソースファイルで`makeinfo
--html'を実行してください．(例えば)結果をウェブサイトに配置することが可
能です．

  XMLファイルを出力するために，Texinfoソースファイルで`makeinfo
--xml'を実行してください．DocBook(XMLの特殊な形式)を出力するために，
`makeinfo --docbook'を実行してください．DocbookからTexinfo_に_
変換したい場合は，`http://docbook2X.sourceforge.net/'を参照してくだ
さい．

もしあなたがプログラマで，Texinfoに対する出力フォーマットの追加項目を実
装し，GNU プロジェクトに貢献したいというのは素晴らしいことです．しかし，
好みのフォーマットfooのに対して個別に書かれている変換フィルタ
`texi2foo'を書かないでください！ そうすることで，その作業を行なうの
も困難ですが，その後のメンテナンスで余分な仕事が発生します．なぜなら，
Texinfo言語は拡張と更新が続いているためです．その代わりの最善のアプロー
チは，`makeinfo'を，現在Info，プレーンテキスト，HTML，XML，そして
DocBook を生成しているように，新しいフォーマットを生成するよう修正するこ
とです．

  TeXは，ほとんど全てのプリンタで動作します．Infoは，ほとんど全てのコン
ピュータ端末で動作します．HTML出力はほとんど全てのブラウザで動作します．
このため，Texinfoはほとんどの全てのコンピュータユーザが利用可能です．

  TexinfoソースファイルはプレーンのASCIIファイルで，テキストと，植字
と書式化のプログラムに何を行なうのかを伝える"@-コマンド
(@-commands)"(`@' を前置する単語)から成り立っています．Texinfoファ
イルをテキストエディタで編集してもかまいませんが，GNU Emacsを使用すると
便利で，それはそのエディタにはTexinfoモードという特別なモードがあり，そ
れは様々なTexinfoに関する機能を提供しているためです．(*Note Texinfo
Mode::.)

Texinfoソースファイルを書く前に，ノード，メニュー，相互参照，そしてその
他の，例えばこのマニュアルの読み方を学ぶべきです．

オンラインヘルプと印刷マニュアルの両方を作成するため，Texinfoを使用する
ことが可能です．さらにTexinfoは自由に再配布できます．この理由のため，
TexinfoはGNUプロジェクトの公式はドキュメントフォーマットになっています．
詳細は，GNU documentation web page (http://www.gnu.org/doc/)で利用
可能です．

  時々，伝統的なUnix
manページをTexinfoから生成できるようにして欲しいと提
案されます．これはサポートされる可能性は今のところ高くはなく，それはman
ページには非常に厳密な伝統的な書式があるためです．`makeinfo'を
troffフォーマットを出力するよう単に拡張するだけでは不十分です．それゆえ，
良いmanページを出力するには，良いユーザへのチュートリアルと良いリファレ
ンスマニュアルを書き出す通常のTexinfoアプリケーションと比較すると，完全
に異なるソースが必要になります．このことは，生成されたmanページが，異な
る出力形式に対し，異なる方法で，同じ情報を文章にするという，Texinfoのデ
ザインの目的に矛盾します．manページを直接書く方が良いでしょう．

  manページがまだ存在していてそれをサポートしたい場合，プログラム
`help2man'が役に立つかもしれません．それは，プログラムの
`--help'出力から伝統的なmanページを生成します．これは現在，Texinfo
プログラム自身のmanページの生成に実際に使用されています．それはGNUのソフ
トウェアで，Brendan O'Deaによって書かれていて，
`ftp://ftp.gnu.org/gnu/help2man/'で利用可能です．


File: texinfo-ja.info,  Node: Info Files,  Next: Printed Books,  Prev: Using Texinfo,  Up: Overview

1.3 Infoファイル
================

Infoファイルは，Infoドキュメントを読むプログラムが処理できるように書式化
されたTexinfoファイルです．(`makeinfo'と
`texinfo-format-buffer'は，TexinfoファイルをInfoファイルに変換する，
二つのコマンドです．)

  Infoファイルは，"ノード(nodes)"と呼ばれる部品に分けられ，それぞれが
一つのトピックの説明を含んでいます．それぞれのノードは名前を持っていて，
ユーザが読むテキストと他のノードへポインタを含み，ノードは名前で識別され
ます．Infoプログラムは一度に一つのノードを表示し，ユーザが他の関連するノー
ドへ移動できるコマンドを提供しています．

  *note info: (info)Top, for more information about using Info.

Infoファイルのそれぞれのノードには，ノードのトピックのサブトピックを記述
している子ノードがいくつかあります．子ノードの名前は，親ノードの"メ
ニュー(menu)"でリストアップされています．これで，Infoコマンドを使用して
一つの子ノードに移動することができます．一般にInfoファイルは本のような構
成になっています．ノードが章の論理レベルの場合，子ノードはセクションレベ
ルです．同様にセクションの子ノードはサブセクションレベルです．

一つの親の全ての子どもは，`Next'と`Previous'で双方向に連鎖していて，お互
いにリンクされています．`Next'ポインタは次のセクションへのリンクを提供し，
`Previous'ポインタは前のセクションへのリンクを提供します．これは，章のセ
クションレベルにあるノードは，お互いにリンクされていることを意味します．
通常，連鎖の順番は親のメニューでの子の順番と同じです．それぞれの子ノード
は，親ノード名を`Up'ポインタに記録しています．最後の子ノードは`Next'ポイ
ンタが無く，最初の子ノードは`Previous'と`Up'ポインタ両方が親になります．
(1) (*note Info Files-Footnote-1::)

ノードが章やセクションやそれに類するものに対応しているような，Infoファイ
ルの本のような構造は，必要条件ではなく慣習の問題です．ノードの，`Up'，
`Previous'と，`Next'ポインタは他のノードを示し，メニューは他のノードを含
んでいます．このため，ノードの構造は方向性のあるグラフにすべきです．しか
し，印刷された本やレポートの章とセクションの構造に対応した構造に準拠して
いるため，通常は，より理解しやすいでしょう．

メニューと，`Next'，`Previous'，そして`Up'ポインタに加え，Infoは参照と呼
ばれるもう一つの種類のポインタを提供していて，それはテキスト中に点在して
いるはずです．これは通常，階層構造に適さないリンクを現す最善の方法です．

通常，印刷された出力物の章とセクションの構造に，ノードが一致するようにド
キュメントを設計します．しかし，議論の材料に対しては正しくないときもよく
あります．そのため，TexinfoはInfoファイルに対するノード構造と，印刷され
た出力物に対するセクション構造を指定する別のコマンドを使います．

一般に，慣習で`Top'と命名されているノードを通じてInfoファイルに入ります．
このノードは通常，ファイルの目的の短い概要とファイルの残り全体の大きなメ
ニューを含んでいます．このノードを起点として，ノードからノードへ移動する
ことで組織的にファイルを横断したり，メインメニューに列挙されたノードを指
定して移動したり，索引メニューで検索して欲しい情報があるノードに直接行く
ことが可能になっています．また，スタンドアローンInfoプログラムで，コマン
ドラインで特定のメニューアイテムを指定することができます(*note Top:
(info-ja)Top.)．

  印刷されたマニュアルのように，順番通りInfoファイルを読みたい場合，
<SPC>を繰り返し押したり，アドバンスInfoコマンド`g *'でファイル全
体を利用することができます．(*note Advanced Info commands:
(info-ja)Expert.)

  `info'ディレクトリの`dir'ファイルは，Infoシステム全体の出発点
としての役目を果たします．そこから，完全なInfoシステムの，それぞれのドキュ
メントの`Top'ノードに行くことができます．

URIでInfoを参照したい場合，以下で例示された(非公式な)構文を使用すること
が可能です．これはEmacs/W3で動作します．以下が例です．
     info:///usr/info/emacs#Dissociated%20Press
     info:emacs#Dissociated%20Press
     info://localhost/usr/info/emacs#Dissociated%20Press

  `info'プログラム自身は，あらゆる種類のURIに続きません．


File: texinfo-ja.info,  Node: Info Files-Footnotes,  Up: Info Files

  (1) ドキュメントには，最初の子に`Previous'ポインタが無いものもあり
ます．時々，最後の子が`Next'ポインタとして次の上のレベルのノード名を持つ
ものもあります．


File: texinfo-ja.info,  Node: Printed Books,  Next: Formatting Commands,  Prev: Info Files,  Up: Overview

1.4 印刷された本
================

Texinfoファイルは，印刷された本やマニュアルのように書式化し植字すること
が可能です．こうするためにはTeXが必要で，それは強力で洗練された植字プ
ログラムで，Donald Knuthによって書かれました． (1) (*note Printed
Books-Footnote-1::)

Texinfoをベースにした本は，他の植字方法での印刷物に似ています．タイトル
ページ，著作権ページ，目次，序文，章のようなもの，番号が有るまたは無いセ
クションとサブセクション，相互参照，脚注，そして索引があるはずです．

オンライン情報に変換するつもりがなく，本を書くためにTexinfoを使用するこ
とが可能です．印刷された小説を書くためにTexinfoを使用することも可能で，
メモを書くこともできますが，電子メールの方がもっと簡単なので，これ以外へ
の適用は勧められません．

  TeXは，一般的な植字を目的としたプログラムです．Texinfoは，Texinfoファ
イルを植字するときにTeXが使用する情報(定義と"マクロ(macros)")を含
むファイル`texinfo.tex'を提供しています．(`texinfo.tex'は，
TeXにTexinfoの@-コマンドをTeXコマンドに変換する方法を伝え，そして
TeXは植字ドキュメントを作成するための処理が可能となります．)
`texinfo.tex'は，ドキュメントを印刷するための仕様書を含んでいます．
`texinfo.tex'の最新バージョンは，
`ftp://ftp.gnu.org/gnu/texinfo.tex'で取得できます．

  合州国では，ドキュメントは縦横8.5インチx11インチ(216mmx
280mmがデフォルトサイズ)で印刷されることが最も多くなっています．こ
れはデフォルトの大きさです．しかし，7インチx9.25インチ
(178mmx235mmの`@smallbook'サイズ)や，ヨーロッパのA4サ
イズの紙(`@afourpaper')でも印刷可能です．(*Note Printing "Small" Books:
smallbook.  また，*Note Printing on A4 Paper: A4 Paper.
も参照してください．)

  `texinfo.tex'で変数を変えることで，印刷されたドキュメントのサイズを
変えることが可能です．さらに，書式化される印刷されたドキュメントでスタイ
ルを変えることも可能です．例えば，サイズや使用しているフォント，それそれ
の段落に対する字下げの量，ハイフネーションされた単語の度合と，それに類す
るものを変えることが可能です．仕様書を変更することで，本を格調高く古臭く
真面目に見せたり，気楽に若々しく陽気に見せたりすることも可能です．

  TeXは自由に配布できます．それは，WEBと呼ばれるPascalのスーパーセット
で書かれていて，Pascalでも(TeX配布物と同梱の変換プログラムを使用しな
がら)Cでもコンパイルすることが可能です．(TeXの詳細は，*Note TeX Mode:
(emacs)TeX Mode.)

  TeXは非常に強力で，非常に多くの機能があります．Texinfoファイルは，
Info形式の文字のみの端末と，植字された本の両方で情報を表現できるので，
Texinfoがサポートする書式化コマンドは必然的に制限されます．

  TeXのコピーを入手するために，*Note How to Obtain TeX: Obtaining
TeX.を参照してください．


File: texinfo-ja.info,  Node: Printed Books-Footnotes,  Up: Printed Books

  (1) TeXを持っていない場合， `texi2roff'
(ftp://tug.org/texi2roff.tar.gz)プログラムを使用
することも可能です．TexinfoはTeXで使用するために設計されているので，
`texi2roff'はここでは述べません．`texi2roff'は，標準のGNU配布
物ではなく，このマニュアルで述べているすべてのTexinfoの機能を管理したり
更新したりしていません．


File: texinfo-ja.info,  Node: Formatting Commands,  Next: Conventions,  Prev: Printed Books,  Up: Overview

1.5 @-コマンド
==============

Texinfoファイルでは，TeXに印刷されるマニュアルの植字法を伝えたり，
`makeinfo'と`texinfo-format-buffer'にInfoファイルの作成方法を
伝えるコマンドには，`@'が前につきます．それらは"@-コマンド
(@-commands)"と呼ばれています．例えば，`@node'はコードを示すコマ
ンドで，`@chapter'は章の最初を示すコマンドです．

     *注意してください:*全ての@-コマンドは，`@TeX{}'コマンド
     以外，全体を小文字で書く必要があります．

Texinfoの@-コマンドは，厳密に制限された構成物の集合です．厳密な制限で，
Texinfoファイルを，TeXとInfoファイルに変換するコードの両方が理解する
ことを可能にします．Infoファイルを英数字を表示する端末で表示することが可
能です．同様に，TeXで生成した出力を様々なプリンタで印刷することも可能
です．

  実行することや受けとる引数に依存して，(1) (*note Formatting
Commands-Footnote-1::)それ自身の行や，
文の一部として，@-コマンドを書く必要があります．

   * `@quotation'のようなコマンドを，行の最初に，行の唯一のテキストとし
     て書いてください．(`@quotation'は，字下げ環境を開始します．)

   * `@chapter'のようなコマンドをコマンドの引数が続く行の最初に，この場
     合は行の残りが章のタイトルになるように書いてください．

   * `@dots{}'のようなコマンドを，通常は文中ですが，好きなところに書
     いてください．(`@dots{}'はドット...を作成します)

   * `@code{SAMPLE-CODE}'のようなコマンドを，好きなところに(通
     常は文中ですが)，引数と一緒に，この例ではカッコの中にSAMPLE-CODEの
     ように書いてください．(`@code'はコードとしてテキストに印を付けます．)

   * `@example'のようなコマンドを単独行に書いてください．本文はそれ以降
     の行に書いてください．そして，併せて`@end'コマンドを，この場合は本
     文の後に単独行に書いてください．(`@example'...`@end
     example'は字下げし，例として本体のテキストを植字します．)このような環境
     コマンドの字下げは通常問題ありませんが，複雑で定義しにくい環境での余分な
     スペースは出力に余分なスペースを生成するので注意してください．

一般的な規則として，他のテキストの間に混ぜる場合，コマンドにはカッコが必
要です．しかし行の始まり場合は不要です．`@:'のようなアルファベット
でないコマンドは，規則に対し例外でカッコを必要としません．

Texinfoの経験を積むにつれ，異なるコマンドに書き方をすぐに覚えられるでしょ
う．コマンドの書き方を異なる方法にしているので，全てのコマンドが同じ構文
に正確に従うことに比較すると，より簡単にTexinfoファイルを書いたり読んだ
りできるでしょう．(@-コマンド構文の詳細は，*Note @-Command Syntax:
Command Syntax.を参照してください．)


File: texinfo-ja.info,  Node: Formatting Commands-Footnotes,  Up: Formatting Commands

  (1) 単語"引数(argument)"
は数学での使用法から来ていて，二人の論争には関係ありません．それは，コマ
ンドに与えた情報を参照します．`オックスフォード英語辞典'によると，
単語は"明らかにする，証明する(to make clear, prove)"というラテン語か
ら生じました．このため，`証明として提出された証拠'と言う意味で，それは
`提出された情報'と言われていて，数学的な意味から導かれました．由来の他の
筋では，単語は，`他人がした反対の断言に，反対する方法で断言すること'と言
う意味から来ていて，`argument' の意味を論争に導きました．


File: texinfo-ja.info,  Node: Conventions,  Next: Comments,  Prev: Formatting Commands,  Up: Overview

1.6 一般的な構文の慣習
======================

このセクションでは，全てのTexinfoドキュメントで使用されている一般的な慣
習を記述しています．

   * `@'，`{'，そして`}'を除き，印刷可能な全てのASCII
     文字はTexinfoファイルに書くことが可能で，それはそれ自身を意味します．
     `@'はコマンドを導入するエスケープ文字ですが，`{'と`}'
     は特定のコマンドの引数を囲むためだけに使用されます．これらの特別な文字を
     ドキュメントに書くため，`@'文字を，`@@'，`@{'，そし
     て`@}'のように，その前に書いてください．

   * 引用の初めと終りに，シングル引用符文字を二重にした
     ``...''を使用することはTeXの習慣です．この慣習に
     Texinfoファイルも従うべきです．TeXは，
     二重にしたシングル引用符文字を右と左の二重引用符に変換し，Infoは二重にし
     たシングル引用符文字を，ASCIIの二重引用符"に変換します．
     ``...''は"..."になります．

   * 行では，三つのハイフン`---'を--のようなダッシュに対して使用してくだ
     さい．TeXでは，一つまたは二つのハイフンは，通常の植字のダッシュより小
     さいダッシュを印刷します．Infoでは，画面表示で三つのダッシュを二つにしま
     す．

   *
     印刷されたマニュアルで段落の字下げを避けるため，その段落の前にコマンド
     `@noindent'を書いてください．

   * `@iftex'と`@end iftex'コマンドでTexinfoファイルの領域を
     区切る場合，その領域は印刷されたコピーだけに現れます．その領域で，Infoで
     は使用不可能なプレーンTeXの特定のコマンドを使用することが可能です．反
     対に，`@ifnottex'と`@end ifnottex'で囲まれたテキストは，
     TeX_以外の_すべての出力形式に現れます．

     それぞれの出力形式(`html'，`info'，`plaintext')にも，同様
     のコマンドの対があります．*Note Conditionals::.

     *注意:*タブ文字を(逐語的なモード(verbatim mode)以外の)Texinfoファ
     イルで使用しないでください！
     TeXは，可変幅のフォントを使用し，それは
     全ての環境で動作するように，タブを適切に定義することは現実的ではないこと
     を意味します．従って，TeXはタブを単一のスペースとして扱うので，タブの
     ように見えません．さらに，`makeinfo'はタブに対し特別なことをしない
     ので，例えば入力ファイルのタブ文字は出力で異なる字下げとして現れるかもし
     れません．

     この問題を避けるためTexinfoモードは，<TAB>キーを押したとき，GNU
     Emacsに多数のスペースを挿入させます．

     また，タブを一つの領域の複数のスペースに変換するため，Emacsで
     `untabify'を実行することも可能です．


File: texinfo-ja.info,  Node: Comments,  Next: Minimum,  Prev: Conventions,  Up: Overview

1.7 コメント
============

Infoファイルや印刷されたマニュアルに現れないコメントを，Texinfoファイル
に`@comment'コマンドを使用して書くことが可能です(省略された
`@c'でもかまいません)．そのようなコメントは，Texinfoファイルを修正
する人のためです．`@comment'や`@c'に続く行の全てのテキストは
コメントです．行の残りはInfoファイルにも印刷されたマニュアルにも現れませ
ん．

  `@comment'や`@c'を行の途中にたびたび書くことも可能で，
`@comment'や`@c'コマンドの後のテキストのみが現れません．しか
し，`@settitle'と`@setfilename'のようなコマンドは行全体に作
用します．`@comment'や`@c'を，そのようなコマンドを用いている
行では使用することは不可能です．

  Infoファイルや印刷されたマニュアルに現れないテキストの長い範囲を，
`@ignore'と`@end ignore'コマンドを使用して書くことが可能です．
行の最初からそれぞれのコマンドを始めながら，単独行にこれらのコマンドをそ
れぞれ書いてください．これら二つのコマンドの間のテキストは処理された出力
物に現れません．`@ignore'と`@end ignore'をコメントを書くため
に使用することが可能です．

  `@ignore'や，偽の`@ifset'や`@ifclear'の条件式で囲まれ
ているテキストは，書式化された出力に寄与しないという意味で無視されます．
しかし，TeXと`makeinfo'は，ソースファイルのテキストの無視を
_停止する_ときを知るために，無視されたテキストを解析します．つまり，
無視されているテキストに無効なTexinfoコマンドがある場合，エラーメッセー
ジが発生するかもしれません．


File: texinfo-ja.info,  Node: Minimum,  Next: Six Parts,  Prev: Comments,  Up: Overview

1.8 Texinfoファイルが必要とするもの
===================================

慣習では，Texinfoファイルの名前は，(優先順で)拡張子`.texinfo'，
`.texi'，`.txi'，または`.tex'で終ります．長い拡張子が好ま
れるのは，人が読むときファイルの性質がより明確に記述されるためです．短い
拡張子は，長いファイル名を扱えないオペレーティングシステムのためです．

印刷されたマニュアルやInfoファイルのため，Texinfoファイルは以下のような
行で始める*必要があります*．

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

ファイルの内容はこの始まりに続き，Texinfoファイルは以下の行で終る
*必要があります*．

     @bye

以下で説明します．

   * `\input texinfo'行はTeXに`texinfo.tex'ファイルを使用するよ
     うに伝え，それは，Texinfoの@-コマンドをTeXの植字コマンドに変換する方
     法をTeXに伝えます．(バックスラッシュ，`\'を使用することに注意し
     てください．これは，TeXに対して正しいものです．)

   * `@setfilename'行はInfoファイルの名前を提供し，TeXに補助ファイル
     を開くよう伝えます．*`@setfilename'以前のすべての文字は無視
     されます！*

   * `@settitle'行は，印刷されたマニュアルのページヘッダ(やフッタ) のタ
     イトルを指定し，HTML形式の`<head>'の記述のデフォルトになります．厳
     密に言うと，`@settitle'はオプションです -- ドキュメントのタイトル
     が`Untitled'でも気にしなければね．

   * ファイルの終りの行の`@bye'は，フォーマッタにファイルの終りを伝え，
     書式化を停止するように伝えます．


一般的には予備のフォーマットを全く使用しないでしょうが，Texinfoファイル
の最初に以下のような，モード設定とヘッダの始まりとヘッダの終りを含めるで
しょう．

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL
     @c %**end of header

最初の行の`-*-texinfo-*-'で，Emacsはファイル編集時にTexinfoモードに
切替えます．

  `@setfilename'と`@settitle'行の周りにある`@c'行はオプ
ションですが，ファイルの一部でTeXやInfoを実行するために必要です．(詳
細は*Note Start of Header::.)

さらに通常は，Texinfoファイルに，タイトルページ，索引，そしてそれに似た
ものを提供し，それらすべてはこのマニュアルで説明しています．しかし，短い
ドキュメントでは役に立つ最小限のものは，始めの三行と終りの一行だけです．


File: texinfo-ja.info,  Node: Six Parts,  Next: Short Sample,  Prev: Minimum,  Up: Overview

1.9 Texinfoファイルの六つの部品
===============================

一般に，Texinfoファイルは最初と最後の最小限以上のものから成り立っていま
す -- 通常は以下でリストアップしている六つの部品から成り立ちます．これ
らは以下のセクションで完全に記述しています．

1. ヘッダ
     "ヘッダ(Header)"は，ファイルに名前を付け，TeXで使用する定義ファイ
     ルと，その他の管理する仕事を伝えます．

2. 要約の記述と著作権
     "要約の記述と著作権(Summary and Copyright)"の部分では，Infoファイル
     に対するドキュメントの記述，著作権通知，そしてコピーの許可から成り立ちま
     す．この部分は，Infoファイルにのみフォーマッタが配置するように，
     `@ifinfo'と`@end ifinfo'コマンドで囲まれています．

3. タイトルと著作権
     "タイトルと著作権(Title and Copyright)"の部分は，印刷されたマニュア
     ルに対するタイトルと著作権のページから成り立ちます．この部分は
     `@titlepage'と`@end titlepage'コマンドで囲む必要があります．
     タイトルと著作権のページは，印刷されたマニュアルのみに現れます．

4. `Top'ノードとマスターメニュー
     `Top'ノードはオンラインの出力を開始します．それは印刷されたマニュアルに
     は現れません．上記の部分同様に，コピーの許可をここに含めることを推奨しま
     す．そしてそれは，少なくとも章をリストアップしているトップレベルのメニュー
     を含んでいて，おそらく"マスターメニュー(Master Menu)"は，ドキュメン
     ト全体のノードをリストアップしています．

5. 本体
     ドキュメントの"本体(Body)"は，伝統的な本や，百科辞典のように構造化さ
     れていますが，自由な形式でもかまいません．

6. 終り
     "終り(End)"の部分は，索引を印刷したり目次を生成したりするコマンドと，
     単独行の`@bye'コマンドから成り立っています．


File: texinfo-ja.info,  Node: Short Sample,  Next: History,  Prev: Six Parts,  Up: Overview

1.10 Texinfoの短いサンプル
==========================

非常に短いが完全なTexinfoファイルは以下のようになり，前のセクションの六
つの慣習的な部分が列挙されているので，Texinfoソースをどのように表現する
のかが実際に分かるでしょう．ファイルの最初の三つの部分は`\input
texinfo'から`@end titlepage'までで，他より恐ろしく(?)(1) (*note Short
Sample-Footnote-1::)見えます．素材のほとんどが標準的な常套
句です．マニュアルを書くとき，単純にこの部分を適切な名前に変更してくださ
い．

  ここでリストアップしているコマンドの完全なドキュメントは， *Note
Beginning a File::.  GNUのマニュアルで使用されている完全なテキスト
は，*Note GNU Sample Texts::.

  以下では，サンプルテキストは_字下げ_されています．そこでのコメント
はそうなっていません．散らかっているコメントの無い完全なファイルは，
*Note Short Sample Texinfo File::で示されています．

Part 1: ヘッダ
--------------

ヘッダはInfoファイルにも印刷物にも現れません．それは様々な変数を設定し，
それにはInfoファイルの名前とヘッダで使用されているタイトルが含まれていま
す．

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

Part 2: 要約の記述と著作権
--------------------------

実際のマニュアルには，それを配布するライセンスに対応して，ここにより多く
のテキストを含んでいます．*Note GNU Sample Texts::.

     @copying
     This is a short example of a complete Texinfo file, version 1.0.

     Copyright @copyright{} 2002 Free Software Foundation, Inc.
     @end copying

Part 3: タイトルページ，目次，著作権
------------------------------------

タイトルページの部分はオンラインの出力には現れず，印刷されたマニュアルの
みに現れます．我々はもう一度書く代わりに，前のセクションから許可のテキス
トを含めるために，`@insertcopying'コマンドを使用しています．それは
タイトルページの裏側に出力します．`@contents'コマンドは目次を生成
します．

     @titlepage
     @title Sample Title

     @c The following two commands start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @c Output the table of contents at the beginning.
     @contents

Part 4: `Top'ノードとマスターメニュー
-------------------------------------

`Top'ノードは，Infoファイルのマスターメニューを含んでいます．印刷された
マニュアルはメニューではなく目次を使用するので，マスターメニューはオンラ
インの出力だけに現れます．我々は，読書への利便性のためコピーに関するテキ
ストも再び含めています．そして，コピーに関するテキストはマニュアルの短い
記述の一部で始まっているので，他のテキストは不要です．

     @ifnottex
     @node Top
     @end ifnottex

     @insertcopying

     @menu
     * First Chapter::    The first chapter is the
                            only chapter in this sample.
     * Index::            Complete index.
     @end menu

Part 5: ドキュメントの本体
--------------------------

本体の部分はドキュメントの全ての部分を含んでいますが，索引と目次は含まれ
ていません．この例は，列挙されたリストを含んでいるノードと章を示していま
す．

     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first

     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate

Part 6: ドキュメントの終り
--------------------------

終りの部分は，それ自身が番号付けされていない章とノードとして索引を生成す
るコマンドと，ドキュメントの終りを示す`@bye'コマンドを含んでいます．

     @node Index
     @unnumbered Index

     @printindex cp

     @bye

その結果
--------

サンプルの最初の章の内容のサンプルは以下のように見えます．


     This is the first chapter.

     Here is a numbered list.

       1. This is the first item.

       2. This is the second item.


File: texinfo-ja.info,  Node: Short Sample-Footnotes,  Up: Short Sample

  (1) 訳 注:原文は，look more intimidating


File: texinfo-ja.info,  Node: History,  Prev: Short Sample,  Up: Overview

1.11 歴史
=========

Richard M. StallmanがTexinfoフォーマットを発明し，最初のプロセッサを書
き，このマニュアルのEdition 1.0を作成しました．Robert J. Chassell
は，このマニュアルにかなりの修正と拡張を行ない，Edition 1.1を開始しまし
た．Brian Foxは，バージョン3.8まで，スタンドアローンのTexinfo配布物に責
任があり，`makeinfo'と`info'プログラムを書きました．Karl BerryはTexinfo
3.8 から更新し，マニュアルのEdition 2.22を始めました．

この仕事の開発を助けてくれた全てに人々，特に数え切れないパッチを提供して
くれた，疲れを知らないEli Zaretskii とAndreas Schwabに感謝します．
Franc,ois PinardとDavid D. Zuhnは飽きること無く，間違いと曖昧さ
を記録し報告してくれました．Zack Weinbergは，`texinfo.tex'でマクロ
構文を実装するという，不可能ともいえることを行いました．幾度となくほとん
ど似ているエディションの退屈な査読に対し，Melissa Weisshausに特別な感謝
を送ります．その他，何十人もがパッチと提案を提供してくれ，それは
`ChangeLog'ファイルで多いに感謝しています．我々の間違いは，我々自身
のものです．

  ちょっとした歴史:1970年代のCMUで，Brian
Reidは印刷のためにドキュメントを
マークアップするプログラムとScribeという名前の書式を開発しました．それは，
Texinfoが行っている，`@'文字をコマンド導入に使用していました．結果
として，書式化というよりむしろドキュメントの内容を記述するために真剣に検
討されていて，その考えは全面的にTexinfoで適用されています．

一方，MITの人々は他のものを開発し，それはBolioと呼ばれる余り違わない書式
でした．これは，植字の言語としてTeXを使用するように変更され，BoTeX
になりました．最初ののBoTeXのバージョンは0.02で1984年10月31日だったと
思います．

  BoTeXは，印刷されたドキュメントに対するマークアップ言語としてのみ利用
可能で，オンラインドキュメントに対してはできませんでした．Richard
Stallman (RMS)は，BolioとBoTeXの両方で仕事をしました．彼は，Infoと呼
ばれる気のきいたオンラインヘルプ書式を開発し，Texinfoを作成するため，
BoTeXとInfoを組合せ，オンラインと印刷されたハードコピーの両方で読める
ようにしたテキストのためのマークアップ言語となりました．


File: texinfo-ja.info,  Node: Texinfo Mode,  Next: Beginning a File,  Prev: Overview,  Up: Top

2 Texinfoモードを使用する
*************************

Texinfoファイルは，どんなテキストエディタを選んで編集してもかまいません．
Texinfoファイルは，他のASCIIファイルと差がありません．しかし，GNU
EmacsにはTexinfoモードと呼ばれる特別なモードがあり，仕事が楽になるよう
Emacsコマンドとツールを提供しています．

  この章では，GNU
EmacsのTexinfoモードの機能について述べ，Texinfo書式化言
語の特徴は述べません．そのため，このマニュアルを始めからそのまま読んでい
る場合，この章は軽く流し，詳細にTexinfoフォーマット言語を述べている章を
読み終えた後，ここに戻りたくなるかもしれません．

* Menu:

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.


File: texinfo-ja.info,  Node: Texinfo Mode Overview,  Next: Emacs Editing,  Prev: Texinfo Mode,  Up: Texinfo Mode

Texinfo Mode Overview
=====================

Texinfoモードの概要
===================

Texinfoモードは，Texinfoファイルで作業するための特別な機能を提供していま
す．以下のようなことが可能です．

   * よく使用される@-コマンドの挿入．

   * `@node'行の自動生成．

   * Texinfoソースファイルの構造を表示．

   *
     ノードの，`Next'，`Previous'，そして`Up'ポインタの自動的な作成と更新．

   * メニューの自動的な作成と更新．

   * マスターメニューの自動作成．

   * Infoに対するファイルの一部または全部の書式化．

   * ファイルの一部または全部の植字と印刷．

恐らく，最も役に立つ機能の二つは，よく使用する@-コマンドの挿入とノードポ
インタとメニューの作成です．


File: texinfo-ja.info,  Node: Emacs Editing,  Next: Inserting,  Prev: Texinfo Mode Overview,  Up: Texinfo Mode

2.1 通常のGNU Emacs編集コマンド
===============================

ほとんどの状況で，通常のテキストモードのコマンドは，Texinfoモードでもテ
キストモード同様に動作します．Texinfoモードは，新しい編集コマンドとツー
ルを，GNU Emacsの一般的な優れた編集能力に追加します．主な違いは，内容に
関係します．Texinfoモードでは，段落を分離する変数と構文の表は，単独行の
Texinfoコマンドが不注意で段落内に含まれないように再定義されています．こ
のため，`M-q' (`fill-paragraph')コマンドは段落を再定義しますが，
隣接している索引コマンドを段落内に混ぜません．

  さらに，Texinfoモードでは，`page-delimiter'に
`texinfo-chapter-level-regexp'の値を設定します．デフォルトでこれは，
章や付録のような等価物に対するコマンドに一致する正規表現です．ページの分
離にこの値を用いることで，`C-x ]'(`forward-page')と`C-x
['(`backward-page')コマンドで，章のタイトルから章のタイトルへ移動し
たり，`C-x p'(`narrow-to-page')コマンドで章を小さくすることが可
能となります．(ページコマンドの詳細は，*Note Pages: (emacs)Pages.)

  Texinfoファイルには望みの名前を付けてもかまいませんが，慣習で，
`.texinfo'，`.texi'，`.txi'，または`.tex'といった拡
張子の一つで終ります．長い拡張子は明示的なので好まれますが，短い拡張子は
ファイル名の長さに制限があるオペレーティングシステムに必要です．GNU
Emacsは，`.texinfo'，`.texi'，または`.txi'の拡張子を持つ
ファイルのとき，自動的にTexinfoモードに入ります．また，
`-*-texinfo-*-'を最初の行に持つファイルのときも，Texinfoモードに切
り替わります．他のモードからTexinfoモードに切替えたい場合は，`M-x
texinfo-mode'と入力してください．

他のEmacsの機能のように，望みのままにTexinfoモードをカスタマイズしたり拡
張したりすることが可能です．特にキーバインドは非常に簡単に変更できます．
以下で，デフォルトと標準的なキーバインドを述べます．


File: texinfo-ja.info,  Node: Inserting,  Next: Showing the Structure,  Prev: Emacs Editing,  Up: Texinfo Mode

2.2 よく使用されるコマンドの挿入
================================

Texinfoモードは，よく使用する様々な@-コマンドをバッファに挿入するコマン
ドを提供しています．これらのコマンドでキーストロークを減らすことができま
す．

  挿入コマンドは，`C-c'を2度の後，@-コマンドの最初の文字を入力し呼び
出します．

`C-c C-c c'
`M-x texinfo-insert-@code'
     `@code{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c d'
`M-x texinfo-insert-@dfn'
     `@dfn{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c e'
`M-x texinfo-insert-@end'
     `@end'を挿入し，`example'や`table'といった，以下に続く正し
     い単語を推測します．(このコマンドはネストされたリストを正確に処理しません
     が，すぐ前のリストに適切な単語を挿入します．)

`C-c C-c i'
`M-x texinfo-insert-@item'
     `@item'を挿入し，次の行の始めにカーソルを配置します．

`C-c C-c k'
`M-x texinfo-insert-@kbd'
     `@kbd{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c n'
`M-x texinfo-insert-@node'
     `@node'と，`Next'，`Previous'，そして`Up'ノードに対し，連続したリ
     ストのコメント行を挿入します．`@node'の後にポイントは配置されます．

`C-c C-c o'
`M-x texinfo-insert-@noindent'
     `@noindent'を挿入し，次の行の最初にカーソルを配置します．

`C-c C-c s'
`M-x texinfo-insert-@samp'
     `@samp{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c t'
`M-x texinfo-insert-@table'
     `@table'とその後に`SPC'を挿入し，<SPC>の後にカーソルを配置 します．

`C-c C-c v'
`M-x texinfo-insert-@var'
     `@var{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c x'
`M-x texinfo-insert-@example'
     `@example'を挿入し，次の行の最初にカーソルを配置します．

`C-c C-c {'
`M-x texinfo-insert-braces'
     `{}'を挿入し，カッコの間にカーソルを挿入します．

`C-c C-c }'
`C-c C-c ]'
`M-x up-list'
     前後の閉じたカッコの間を移動します．`C-c C-c ]'は`C-c C-c }'よ
     り簡単ですが，後者の方が覚えやすいです．それで二つのキーバインドとなりま
     す．(また，`C-f'の入力でカッコの間から出ることも可能です．)

  _存在する_単語の周りに，`@code{...}'のようなコマン
ドを書くため，単語の前にカーソルを配置し，`C-u 1 C-c C-c c'と入力し
てください．これで，簡単に既存のプレーンテキストを編集できるようになりま
す．プレフィクス引数の値は，一単語の場合は`1'，2単語の場合は`2'
等のように，カッコの間に含めるそれ以降の単語の数をEmacsに伝えます．前の
単語を囲むために負の引数を使用してください．プレフィクス引数を指定しない
場合，Emacsは@-コマンド文字列を挿入し，カーソルをカッコの間に配置します．
この機能は，`@kbd'と`@var'のような，一つの単語や一行内の単語
を操作する@-コマンドに対してのみ動作します．

  この挿入コマンドの組は，`GNU Emacs Manual'と`GDB Manual'で使用
されている，異なる@-コマンドの頻度の解析後に作成されました．独自の挿入
コマンドを加えたい場合，キーにキーボードマクロをバインドしたり，省略を使
用したり，`texinfo.el'のコードを拡張することが可能です．

  `C-c C-c C-d'(`texinfo-start-menu-description')は，他の挿入コマ
ンドとは異なる挿入コマンドです．それは，メニュー項目行の記述のためのスペー
スに，ノードのセクションや章のタイトルを挿入します．(メニュー項目は三つ
の部品があり，それは項目名，ノード名，そして記述です．ノード名のみ要求さ
れますが，記述はノードが関係するものの説明を補助します．*Note The Parts
of a Menu: Menu Parts.)

  `texinfo-start-menu-description'を使用するため，メニュー項目行にポ
イントをおき，`C-c C-c C-d'を入力してください．コマンドはノード名に
付属するタイトルを探してコピーし，タイトルを記述として挿入します．編集可
能なように，それは挿入されたテキストの始めにポイントを配置します．メニュー
項目行に記述が含まれている場合，この機能はタイトルを挿入しません．

このコマンドは記述を書くためだけに役立ちます．それは仕事を全部しません．
タイトルはノード名と同じ単語を使いたがるものですが，役に立つ記述にするに
は，異なる単語を使用すべきなので，挿入されたテキストを編集する必要があり
ます．


File: texinfo-ja.info,  Node: Showing the Structure,  Next: Updating Nodes and Menus,  Prev: Inserting,  Up: Texinfo Mode

2.3 ファイルのセクションの構造を見る
====================================

`C-c C-s'コマンド(`texinfo-show-structure')を使用して，Texinfo
ファイルのセクションの構造を表示することが可能です．このコマンドは，
`@chapter'や`@section'のような，@-コマンドで始まる行をリス
トアップし，Texinfoファイルのセクションの構造を表示します．それは，結果
として目次を構成します．これらの行は，`*Occur*'と呼ばれる別のバッファ
に表示されます．そのバッファでTexinfoファイルの関連する場所に移動するた
め，行の一つにカーソルを配置し`C-c C-c'コマンド
(`occur-mode-goto-occurrence')を使用することが可能です．

`C-c C-s'
`M-x texinfo-show-structure'
     Texinfoファイルの`@chapter'，`@section'，そしてそれに類似し
     た行を表示します．

`C-c C-c'
`M-x occur-mode-goto-occurrence'
     `*Occur*'バッファのカーソルの下の行に関連する，Texinfoファイルの行
     に移動します．

  `C-u C-c C-s'を入力し，プレフィクス引数を付けて
`texinfo-show-structure'を呼び出す場合，`@chapter'，
`@section'，そしてこれに類する@-コマンドがある行だけでなく，
`@node'行もリストアップします．`@node'行の，`Next'，
`Previous'，そして`Up'ポインタが正しいかどうか調査するため，
`texinfo-show-structure'にプレフィクスを付けて使用することが可能で す．

マニュアルの作業中，現在の章の構造のみに興味があることもよくあります．こ
の場合，`C-x n n'(`narrow-to-region')コマンドを使用し，興味があ
るバッファの領域を区別することが可能で，`texinfo-show-structure'は
その領域のみで動作します．再びバッファの領域全体を見るため，`C-x n w'(`widen')を使用してください．(コマンドの制限は，
*Note Narrowing: (emacs)Narrowing.)

  `texinfo-show-structure'コマンドの提供に加えて，Texinfoモードは，章
レベルの@-コマンドに一致するページ分離変数の値を設定します．これで，
`C-x ]'(`forward-page')と`C-x [' (`backward-page')コマ
ンドを前後の章に移動するために使用したり，`C-x p'
(`narrow-to-page')コマンドを章を小さくするために使用したりすること
が可能です．ページコマンドの詳細は，*Note Pages: (emacs)Pages.


File: texinfo-ja.info,  Node: Updating Nodes and Menus,  Next: Info Formatting,  Prev: Showing the Structure,  Up: Texinfo Mode

2.4 ノードとメニューの更新
==========================

Texinfoモードは，自動的にメニューとノードポインタを作成し更新するコマン
ドを提供しています．コマンドは"更新"コマンドと呼ばれ，その理由は，作業
後にTexinfoファイルを更新するため最もよく使用されているためです．しかし，
`Next'，`Previous'，そして`Up'ポインタを，何も持たない`@node'行に
挿入したり，何も持たないファイルでメニューを作成したりするために使用する
ことが可能です．

更新コマンドを使用しない場合，メニューとノードポインタを手で書く必要があ
り，それは退屈な仕事です．

* Menu:

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.


File: texinfo-ja.info,  Node: Updating Commands,  Next: Updating Requirements,  Prev: Updating Nodes and Menus,  Up: Updating Nodes and Menus

更新コマンド
------------

  以下を行なうために，更新コマンドを使用することが可能です．

   *
     ノードに，`Next'，`Previous'，そして`Up'ポインタを挿入したり更新したりし
     ます．

   * セクションに対するメニューを挿入したり更新したりします．

   * Texinfoソースファイルのためのマスターメニューを作成します．

Texinfoの一部や全体の，全てのノードとメニューを更新するためにそのコマン
ドを使用することも可能です．

更新コマンドは慣習に従っているTexinfoファイルでしか動作せず，それは本に
似た階層構造をしているものです．そのようなファイルでの構造的なコマンド行
は，`Top'`@node'行以外のそれぞれの`@node'行に続ける必要があ
ります．("構造的なコマンド行(structuring command line)"は，
`@chapter'，`@section' や，他の似たコマンドで始まる行です．)

  `@node'行の直後に続く行や，単一の`@comment'行や，単一の
`@ifinfo'行の後に続く行に，構造的なコマンド行を書くことが可能です．
`@node'行と構造的なコマンド行の間には，一行以上挿入できません．
`@comment'行や`@ifinfo'行のみ挿入できます．

  バッファ全体で動作するコマンドには，`@chapter'や，同等のレベルコマ
ンドを用いているノードが続く`Top'ノードが必要です．メニュー更新コマンド
は，`@chapter'レベルのノードしか持たないTexinfoファイルに対して，
メインやマスターメニューを作成しません！メニュー更新コマンドは，低レベル
のノードの_の中に_メニューを作成するだけです．章のメニューを作成す
vるために`Top'ノードを提供する必要があります．

メニュー更新コマンドは現在のバッファ内のノードを参照しないので，他のInfo
ファイルを参照するメニュー項目を削除します．これは欠陥です．メニュー項目
を使用するのではなく，他のInfoファイルを参照する相互参照を使用することが
可能です．更新コマンドは相互参照に影響しません．

Texinfoモードは，よく使用される五つの更新コマンドがあります．二つは，単一
ノード(や領域)のノードポインタやメニューを更新します．二つは，ファイルの
全てのノードポインタとメニューを更新します．もう一つは，
`texinfo-master-menu'コマンドで，完全なファイルのマスターメニューを
作成し，さらにTexinfoファイル全体の全てのノードとメニューを更新します．

  `texinfo-master-menu'コマンドは，主要なコマンドです．

`C-c C-u m'
`M-x texinfo-master-menu'
     全ての他のメニューを含むマスターメニューを作成更新します(既存のメニュー
     があれば，その記述を含めます)．

     引数(対話的な場合は，プレフィクス引数，`C-u,')を用いることで，マスター
     メニューを構築する前に，バッファの全ての通常のメニューを最初に作成更新し
     ます．(マスターメニューについては,*Note The Top Node and Master
     Menu: The Top Node.)

     `texinfo-master-menu'を動作させるため，Texinfoファイルは，`Top'ノー
     ドと，少なくとも一つのサブシーケンスノードがある必要があります．

     広範囲でTexinfoファイルを編集後，以下を入力します．

          C-u M-x texinfo-master-menu
     または
          C-u C-c C-u m

     これで，一度に全てのノードとメニューを，完全に更新します．

他の主要な更新コマンドは小さな仕事をし，人間がノードやメニューをTexinfo
ファイルに書くように設計されています．

  以下のコマンドです．

`C-c C-u C-n'
`M-x texinfo-update-node'
     `Next'，`Previous'，そして`Up'ポインタを，ポインタがあるノード(例えば，
     `@node'行をポイントの前)に挿入します．`@node'行に，`Next'，
     `Previous'，または`Up'ポインタがある場合，古いポインタは削除され新しいも
     のが挿入されます．引数(対話的な場合，`C-u'プレフィクス引数)を用いる
     ことで，このコマンドは領域の全ての`@node'行を更新します(それは，ポ
     イントとマークの間のテキストです)．

`C-c C-u C-m'
`M-x texinfo-make-menu'
     ポイントがあるノードのメニューを作成更新します．引数(対話的な場合は，
     `C-u'プレフィクス引数)を用いることで，コマンドは領域内またはその一部
     のノードに対しメニューを作成更新します．

     `texinfo-make-menu'が既存のメニューを更新する場合は，メニューの記述
     は常に新しいメニューに挿入されます．これは，既存のメニューから同じノード
     名を持つ新しいメニュー項目に記述をコピーすることで行います．ノードメニュー
     が異なる場合，記述は新しいメニューにコピーされません．

`C-c C-u C-e'
`M-x texinfo-every-node-update'
     バッファ内の全てのノードに対し，`Next'，`Previous'，そして`Up'ポインタを
     挿入する，または更新します．

`C-c C-u C-a'
`M-x texinfo-all-menus-update'
     バッファ内の全てのメニューを作成するまたは更新します．引数(対話的な場合
     はプレフィクス引数`C-u')を用いることで，メニューで作業する前に，最初
     に全てのノードを挿入更新します．

     マスターメニューがある場合，`texinfo-all-menus-update'コマンドはそ
     れを更新します．しかし，メニューが無い場合，コマンドは新しいマスターメ
     ニューを作成しません．(そのためには，`texinfo-master-menu'コマンド
     を使用してください．)

     マスターメニューを作成するメリットが無いドキュメントで作業する場合，以下
     のように入力できます．

          C-u C-c C-u C-a
     または
          C-u M-x texinfo-all-menus-update

     これで，全てのノードとメニューを更新します．

  `texinfo-column-for-description'変数は，メニューの記述を字下げする
列数を指定します．デフォルトで値は32ですが，24以下にした方が便利なときが
多いです．`M-x edit-options'コマンド(*note Editing Variable Values:
(emacs)Edit Options.)や，`M-x set-variable' コマンド(*note Examining
and Setting Variables:
(emacs)Examining.)で変数を設定することが可能です．

  また，`texinfo-indent-menu-description'を既存のメニューでの記述の字
下げの列の指定に使用することも可能です．終りに，希望があれば
`texinfo-insert-node-lines'コマンドを，ファイルに足りない
`@node'行を挿入するために使用することが可能です．(詳細は *Note Other
Updating Commands::.)


File: texinfo-ja.info,  Node: Updating Requirements,  Next: Other Updating Commands,  Prev: Updating Commands,  Up: Updating Nodes and Menus

2.4.1 更新の必要条件
--------------------

更新コマンドを使用するためには，章，セクション，サブセクション，そしてそ
れに類するものを用いて，Texinfoファイルを階層的に組織化する必要がありま
す．マニュアルの階層構造を構築するとき，一度に一階層以上`jump down'しな
いでください．章を`Top'ノードの次にすることは可能ですが，セクションは不
可能です．セクションを章の次にすることは可能ですが，サブセクションでは不
可能です．しかし，一度に何レベルでも`jump up'することは可能です -- 例え
ば，サブセクションから章にすることは可能です．

  それぞれの`@node'行は，`Top'ノードの行は例外として，
`@chapter'，`@section'，または`@unnumberedsubsec'のよ
うな，構造的なコマンドの行が続きます．

  それぞれの`@node'行や構造的なコマンド行は，以下のような組合せにす
る必要があります．

     @node     Comments,  Minimum, Conventions, Overview
     @comment  node-name, next,    previous,    up
     @section Comments

  または，(`@comment'行が無ければ)以下のようになります．

     @node Comments, Minimum, Conventions, Overview
     @section Comments

  または，(明示的なノードポインタが無ければ)以下のようになります．

     @node Comments
     @section Comments

この例では，`Comments'はノードとセクションの名前です．次のノードは
`Minimum'と呼ばれ，前のノードは`Conventions'と呼ばれます．`Comments'セク
ションは`Overview'ノードにあり，`Up'ポインタで指定されています．
(`@comment'行の代わりに，`@ifinfo'行を書いてもかまいません．)

  ファイルに`Top'ノードがある場合，それは，`top'や`Top'と呼ばれ，
ファイルの最初のノードにする必要があります．

メニュー更新コマンドは，章のセクションメニュー，セクションのサブセクショ
ンメニュー等を作成します．これは，章のメニューが欲しい場合，`Top'ノード
が必要だということを意味します．

  ところで，`makeinfo'コマンドは，`Next'，`Previous'，そして`Up'ポイ
ンタが無い階層的に組織化されたTexinfoファイルに対し，Infoファイルを作成
します．このため，Texinfoファイルが`makeinfo'で書式化されることが確
実な場合，ノード更新コマンドは不要です(`makeinfo'の詳細は， *note
Creating an Info File::)．しかし，`makeinfo'と
`texinfo-format-...'コマンドでは，どちらもファイルにメニューを
挿入する必要があります．


File: texinfo-ja.info,  Node: Other Updating Commands,  Prev: Updating Requirements,  Up: Updating Nodes and Menus

2.4.2 その他の更新コマンド
--------------------------

五つの主な更新コマンドに加え，Texinfoモードには，余り使用されていない更新
コマンドもあります．

`M-x texinfo-insert-node-lines'
     Texinfoファイルのある領域全体に`@node'が無い場所では，
     `@chapter'，`@section'，そしてその他のセクションコマンドの前
     に`@node'行を挿入します．

     引数(対話的な場合は，`C-u'プレフィクス引数)を使用することで，
     `texinfo-insert-node-lines'コマンドは，`@node'行を挿入するだ
     けでなく，対応するノードの名前として章やセクションのタイトルも挿入します．
     さらに，既存の名前が無い`@node'行に，ノード名としてタイトルを挿入
     します．ノード名は，セクションや章のタイトルより簡潔にすべきなので，挿入
     されたノード名を手作業で編集する必要があります．

     例えば，以下のようにして，バッファ全体を領域としてマークし，
     `@node'行とタイトルを全体に挿入します．

          C-x h C-u M-x texinfo-insert-node-lines

     このコマンドは，タイトルをノード名として`@node'行に挿入します．
     `texinfo-start-menu-description'コマンド(*note Inserting
     Frequently Used Commands:
     Inserting.)は，タイトルをメニュー項目に記述とし
     て挿入するという，異なる動作になります．しかし，どちらの場合でも挿入され
     たテキストを編集する必要があります．

`M-x texinfo-multiple-files-update'
     分割されているファイルから構築されたドキュメントで，ノードとメニューを更
     新します．プレフィクス引数`C-u'を使用することで，外部ファイルにマス
     ターメニューを作成し挿入します．`C-u 2'のように，数字のプレフィクス
     引数を使用することで，外部ファイルにマスターメニューを作成し挿入する前に，
     全てのメニューと全てのインクルードファイルの，全ての`Next'，`Previous'，
     そして`Up' ポインタを最初に更新します． *Note
     texinfo-multiple-files-update::.

`M-x texinfo-indent-menu-description'
     指定された列の位置に，メニューのすべての記述を字下げします．記述に対して
     より多くのスペースを与えるために，このコマンドを使用することが可能です．
     引数(対話的な場合，`C-u'引数)を使用することで，
     `texinfo-indent-menu-description' コマンドは，領域の全てのメニュー
     の記述をを字下げします．しかし，このコマンドは複数行の記述行の二番目と次
     に続く行を字下げしません．

`M-x texinfo-sequential-node-update'
     現在のノードの直前直後に，ノードの階層レベルに係わらず，`Next'や
     `Previous'ポインタとしてノード名を挿入します．これは，サブセクションの
     `Next'ノードが次の章になることを意味します．連続して並んだノードは，小説
     や順番に読んでいくドキュメントで役立ちます．(しかしInfoでは，`g *'
     コマンドでファイルを順番に見ることができ，順番に並んだノードは厳密には不
     要です．)引数(対話的な場合は，プレフィクス引数)を使用することで，
     `texinfo-sequential-node-update'コマンドは領域の全てのノードを更新
     します．


File: texinfo-ja.info,  Node: Info Formatting,  Next: Printing,  Prev: Updating Nodes and Menus,  Up: Texinfo Mode

2.5 Infoの書式化
================

Texinfoモードは，Infoに対してTexinfoファイルの一部または全体を書式化する
コマンドも提供しています．ドキュメントを書いているとき，ファイルの一部だ
け，すなわち領域を書式化したいことがよくあります．

  領域を書式化するために，`texinfo-format-region'や
`makeinfo-region'コマンドを使用することが可能です．

`C-c C-e C-r'
`M-x texinfo-format-region'
`C-c C-m C-r'
`M-x makeinfo-region'
     Infoに対し，現在の領域の書式化を行います．

  バッファ全体を書式化するために，`texinfo-format-buffer'や
`makeinfo-buffer'コマンドを使用することが可能です．

`C-c C-e C-b'
`M-x texinfo-format-buffer'
`C-c C-m C-b'
`M-x makeinfo-buffer'
     Infoに対し，現在のバッファを初期化します．

  例えば，Texinfoを書いた後で以下のように入力します．

     C-u C-c C-u m
または
     C-u M-x texinfo-master-menu

これで，全てのノードとメニューを更新します．そして，Infoファイルを作成す
るため以下のように入力します．

     C-c C-m C-b
または
     M-x makeinfo-buffer

  TeXやInfo書式化コマンドを動作させるため，ファイルには，ヘッダに
`@setfilename'行を含める_必要が_あります．

  Infoの書式化の詳細は，*Note Creating an Info File::.


File: texinfo-ja.info,  Node: Printing,  Next: Texinfo Mode Summary,  Prev: Info Formatting,  Up: Texinfo Mode

2.6 書式化と印刷
================

Texinfoファイルの植字と印刷は，最初に印刷するための(DVIと呼ばれる)ファイ
ルを作成しその後でファイルを印刷するという，複数のステップによる処理にな
ります．オプションで索引を作成することも可能です．こうするため，最初に
`tex'植字コマンドを実行した後，`texindex'コマンドを実行する必
要があります．そして，もう一度`tex'コマンドを実行する必要があります．
また別の方法として，必要な索引を自動的に作成する，`texi2dvi'コマン
ドを実行します(*note Format with texi2dvi::)．

ドキュメントを書いているとき，どのように見えるかを確認するため，ファイル
の一部だけを植字し印刷したいときがよくあります．
`texinfo-tex-region'と，この目的に関係するコマンドを使用することが
可能です．`texinfo-tex-buffer'コマンドは，バッファ全体の書式化に使
用してください．

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     バッファで`texi2dvi'を実行します．バッファでTeXの実行に追加し，
     このコマンドは，必要な場合は自動的に索引を作成更新します．

`C-c C-t C-r'
`M-x texinfo-tex-region'
     領域でTeXを実行します．

`C-c C-t C-i'
`M-x texinfo-texindex'
     `texinfo-tex-region'で書式化されたTexinfoファイルの索引をソートする
     ため，`texindex'を実行します．`texinfo-tex-region'コマンドは，
     自動的に`texindex'を実行しません．それは，`tex'植字コマンドを
     実行するだけです．`texindex'コマンドで生の索引ファイルをソートした
     後，`texinfo-tex-region'コマンドを2回実行する必要があります．(通常，
     領域を書式化したときは索引を書式化せず，バッファを書式化したときのみ行わ
     れます．現在は`texi2dvi'コマンドがあるので，このコマンドはほとんど，
     あるいは全く必要ありません．)

`C-c C-t C-p'
`M-x texinfo-tex-print'
     前もって，`texinfo-tex-buffer'や`texinfo-tex-region'で書式化さ
     れたファイル(またはファイルの一部)を印刷します．

  `texinfo-tex-region'や`texinfo-tex-buffer'が動作するように，ファ
イルを`\input texinfo'行で始める_必要_があり，そして
`@settitle'行を含める必要があります．ファイルは，単独の
`@bye'行で終える必要があります．(`texinfo-tex-region'を使用す
るとき，`@settitle'行を，start-of-headerとend-of-header行で囲む必
要があります．)

  `tex-show-print-queue'のような，他のTeXに関連するコマンドの記述
は，*Note Hardcopy::.


File: texinfo-ja.info,  Node: Texinfo Mode Summary,  Prev: Printing,  Up: Texinfo Mode

2.7 Texinfoモードの概要
=======================

Texinfoモードには，それぞれのコマンドの組には同じキーで始まるデフォルト
のキーバインドがあります．Texinfoモードのためにカスタムで作成された全て
のコマンドは`C-c'で始まります．キーは多少覚え易くなっています．

挿入コマンド
------------

挿入コマンドは，`C-c'を2度入力し，挿入する@-コマンドの最初の文字を
入力し呼び出します．(それは，`カスタム挿入'に対する`C-c C-i'の使用よ
り記憶力が必要かもしれませんが，`C-c C-c'は，素早く入力できます．)

     C-c C-c c       `@code'を挿入．
     C-c C-c d       `@dfn'を挿入．
     C-c C-c e       `@end'を挿入．
     C-c C-c i       `@item'を挿入．
     C-c C-c n       `@node'を挿入．
     C-c C-c s       `@samp'を挿入．
     C-c C-c v       `@var'を挿入．
     C-c C-c {       カッコを挿入．
     C-c C-c ]
     C-c C-c }       閉じたカッコの外へ移動．

     C-c C-c C-d     メニュー項目行で
                    記述のためのスペースに
                    ノードのセクションタイトルを挿入

構造の表示
----------

`texinfo-show-structure'コマンドは，小さな領域でよく使用されていま す．

     C-c C-s         全ての見出しをリストアップします．

マスター更新コマンド
--------------------

`texinfo-master-menu'コマンドはマスターメニューを作成します．そして，
ファイルの全てのノードとメニューの更新にも使用可能です．

     C-c C-u m
     M-x texinfo-master-menu
                    マスターメニューを作成更新します．

     C-u C-c C-u m   プレフィクス引数`C-u'を用いることで，
                    最初に全てのノードと普通のメニューを作成更新し，
                    そしてマスターメニューを作成する．

ポインタの更新
--------------

ポインタを更新するコマンドは，`C-c C-u'と入力してから，
`texinfo-update-node'に対する`C-n'，または，
`texinfo-every-node-update'に対する`C-e'を入力します．

     C-c C-u C-n     ノードの更新．
     C-c C-u C-e     バッファの全てのノードの更新．

メニューの更新
--------------

メニューの更新コマンドは，`C-c C-u'と入力してから，
`texinfo-make-menu'に対する`C-m'，または，
`texinfo-all-menus-update'に対する`C-a'を入力し呼び出してくださ
い．ノードとメニューの両方を同時に更新するため，`C-c C-u C-a'の前に
`C-u'を入力してください．


     C-c C-u C-m     メニューの作成更新．

     C-c C-u C-a     バッファの全ての
                    メニューの作成更新．

     C-u C-c C-u C-a プレフィクス引数`C-u'を用いることで，
                     最初に全てのノードを作成更新し
                     そして全てのメニューを作成更新します．

Infoの書式化
------------

Emacs Lispで書かれているInfoの書式化コマンドは，`C-c C-e'と入力して
から，領域に対し`C-r'，または，バッファ全体に対し`C-b'を入力しま す．

  Cで書かれていて，`makeinfo'プログラムをベースにしたInfoの書式化コマ
ンドは，`C-c C-m'と入力してから，領域に対し`C-r'，または，バッファ
全体に対し`C-b'を入力し呼び出します．

`texinfo-format...'コマンドを使用します．

     C-c C-e C-r     領域の書式化．
     C-c C-e C-b     バッファの書式化．

`makeinfo'を使用します．

     C-c C-m C-r     領域の書式化．
     C-c C-m C-b     バッファの書式化．
     C-c C-m C-l     `makeinfo'出力バッファの更新．
     C-c C-m C-k     `makeinfo'書式化の停止．

植字と印刷
----------

TeXの植字と印刷コマンドは，`C-c C-t'と入力してから，もう一つ制御コ
マンドを入力して呼び出します．`texinfo-tex-region'に対する`C-r'，
`texinfo-tex-buffer'に対する`C-b'等です．

     C-c C-t C-r     TeXを領域で実行．
     C-c C-t C-b     `texi2dvi'をバッファで実行．
     C-c C-t C-i     `texindex'の実行．
     C-c C-t C-p     DVIファイルの印刷．
     C-c C-t C-q     プリントキューの表示．
     C-c C-t C-d     プリントキューからジョブを削除．
     C-c C-t C-k     現在のTeX書式化の停止．
     C-c C-t C-x     現在停止中のTeX書式化を終了．
     C-c C-t C-l     出力バッファの更新．

その他の更新コマンド
--------------------

残りの更新コマンドは滅多に使用されないのでキーバインドはありません．

     M-x texinfo-insert-node-lines
                    領域に足りない`@node'行を挿入．
                    プレフィクス引数`C-u'を用いることで，
                    セクションタイトルをノード名として使用．

     M-x texinfo-multiple-files-update
                    複数ファイルのドキュメントの更新．
                    プレフィクス引数`C-u 2'を用いることで，
                    最初に全てのインクルードファイルを
                    作成更新．

     M-x texinfo-indent-menu-description
                    記述の字下げ．

     M-x texinfo-sequential-node-update
                    厳密な順序でノードポインタの挿入．


File: texinfo-ja.info,  Node: Beginning a File,  Next: Ending a File,  Prev: Texinfo Mode,  Up: Top

3 Texinfoファイルを始める
*************************

情報の部品は，Texinfoファイルの最初に提供する必要があり，それは，出力ファ
イルの名前，ドキュメントタイトル，そしてTopノードです．

  この章では，以前に見せた(*note Six
Parts::)最小限の完全なTexinfoソースファ イルを拡張していきます．

* Menu:

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                   have the right to use and share software.


File: texinfo-ja.info,  Node: Sample Beginning,  Next: Texinfo File Header,  Up: Beginning a File

3.1 Texinfoファイルの始まりのサンプル
=====================================

以下のサンプルは，必要なものを表示しています．以下で与えられている要素は，
それ以降のセクションで詳細に説明します．それ以外のコマンドで，Texinfoファ
イルの最初に含められることが多いものもありますが，ここにあるものが最も重
要です．

  GNUマニュアルで使用されている完全なテキストは，*Note GNU Sample
Texts::.

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFONAME.info
     @settitle NAME-OF-MANUAL VERSION
     @c %**end of header

     @copying
     This manual is for PROGRAM, version VERSION.

     Copyright @copyright{} YEARS COPYRIGHT-OWNER.

     @quotation
     Permission is granted to ...
     @end quotation
     @end copying

     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR

     @c  The following two commands
     @c  start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying

     Published by ...
     @end titlepage

     @c So the toc is printed in the right place.
     @contents

     @ifnottex
     @node Top
     @top TITLE

     @insertcopying
     @end ifnottex

     @menu
     * First Chapter::    Getting started ...
     * Second Chapter::          ...
      ...
     * Copying::          Your rights and freedoms.
     @end menu

     @node First Chapter
     @chapter First Chapter

     @cindex first chapter
     @cindex chapter, first
     ...


File: texinfo-ja.info,  Node: Texinfo File Header,  Next: Document Permissions,  Prev: Sample Beginning,  Up: Beginning a File

3.2 Texinfoファイルのヘッダ
===========================

Texinfoファイルは，InfoとTeXに必要な情報を提供する少なくとも三行から始
めます．これらは，`\input texinfo'行，`@settitle'行，そして
`@setfilename'行です．

  また，Texinfoファイルの一部でTeXを実行したい場合，`@settitle'と
`@setfilename'行を，start-of-headerとend-of-header行の間に書く必要
があります．start-of-headerとend-of-headerの行はオプションですが無害なの
で，常に含めた方が良いでしょう．

ドキュメント全体のの書式化に影響のあるコマンドは，ヘッダに含める価値があ
ります．例えば，`@synindex' (*note synindex::)はヘッダに含められる
ことが多いもう一つのコマンドです．見本のテキストの完全なものは， *Note
GNU Sample Texts::.

  このため，Texinfoファイルの始まりは以下のようになります．

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

* Menu:

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.


File: texinfo-ja.info,  Node: First Line,  Next: Start of Header,  Up: Texinfo File Header

3.2.1 Texinfoファイルの最初の行
-------------------------------

TeXに入力する，最上位となるすべてのTexinfoファイルは，以下の行で始め
る必要があります．

     \input texinfo   @c -*-texinfo-*-

この行は，二つの機能を提供します．

  1. ファイルがTeXで処理されるとき，`\input texinfo'コマンドは，
     Texinfoファイルを処理するため必要なマクロを，TeXにロードするよう伝え
     ます．これらは`texinfo.tex'と呼ばれるファイルにあり，TeXまたは
     Texinfo
     ソフトウェアのいずれかでシステムにインストールされているはずです．
     TeXはバックスラッシュ`\'をコマンドの始めの印として使用し，それは
     ちょうどTexinfoが使用する`@'のようなものです．`texinfo.tex'ファ
     イルは，`\'を`@'に切替えます．切替える前にTeXは`\'を
     要求し，それがファイルの最初に現れる理由です．

  2. ファイルをGNU Emacsで編集するとき，`-*-texinfo-*-'モード指定は，
     EmacsにTexinfoモードを使用するように伝えます．


File: texinfo-ja.info,  Node: Start of Header,  Next: setfilename,  Prev: First Line,  Up: Texinfo File Header

3.2.2 ヘッダの始まり
--------------------

start-of-header行は以下のようなTexinfoのコメントです．

     @c %**start of header

  Texinfoファイルの二行目に，start-of-header行を書いてください．
start-of-header行に続けて，`@setfilename'と`@settitle'行と，
オプションで`@smallbook'や`@footnotestyle'のようなドキュメン
ト全体に影響を与えるその他のコマンド行を書いてください．そして
end-of-header行が続きます(*note End of Header::)．

start-of-headerとend-of-headerの行で，Texinfoファイルの一部だけをInfoや
印刷物に書式化することが可能になります．*Note texinfo-format commands::.

  `%**'という奇妙な文字列は，他のコメントが偶然start-of-header行だと
思われないことを保証します．Emacs変数`tex-start-of-header'と/や
`tex-end-of-header'を設定することで，希望のものに変更することが可能
です．*Note Texinfo Mode Printing::.


File: texinfo-ja.info,  Node: setfilename,  Next: settitle,  Prev: Start of Header,  Up: Texinfo File Header

3.2.3 `@setfilename':出力ファイル名を設定する
---------------------------------------------

`makeinfo'やTeXのための主要な入力ファイルとして供給するため，
Texinfoファイルには以下の行を含める必要があります．

     @setfilename INFO-FILE-NAME

  `@setfilename'コマンドを行の最初に書き，同じ行にInfoファイル名を続
けてください．その行に他のものは書かないでください，その行のコマンド後は，
コメントであっても，全てファイル名の一部と考えられます．

  Info書式化コマンドは，`@setfilename'行の前に書かれている全てのもの
を無視し，それはファイルの最初の行(`\input'行)を出力に表示しません．

  `@setfilename'行で生成する出力ファイルの名前を指定します．この名前
はTexinfoファイルの名前とは異なるものにする必要があります．名前を選ぶ慣
習が二つあります．入力ファイル名から(`.texi'のような)拡張子を削除す
る，またはより望ましい`.info'拡張子で置換するいずれかを行なうことが
可能です．

  明示的な`.info'拡張子が好まれますが，オペレーティングシステムには，
長いファイル名を処理できないものもあります．指定したファイル名が十分短い
ときでも問題となるはずです．これは，Infoフォーマッタが長いInfoファイルを
短い間接的なサブファイルに分割し，`-1'，`-2'， ...，
`-10'，`-11'等を，元のファイルの名前に加えるためです (*note Tag Files
and Split Files: Tag and Split Files.)．例えば，サブ
ファイル名`texinfo.info-10'は，ファイル名に14文字の制限のある古いシ
ステムでは長過ぎます．そのため，このドキュメントのInfoファイル名は，
`texinfo.info'ではなく`texinfo'としています．`makeinfo'
を，MSーDOSのようなファイル名に重大な制限を加えるオペレーティングシステ
ムで実行するとき，それは元のファイル名から数文字削除し，サブファイルのサ
フィックスに十分なものだけ残し，そしてファイル名は，`texin-10'，
`gcc.i12'等になります．

  HTML出力を生成しているとき，`makeinfo'は拡張子を`html'に置換す
る，または，拡張子が無い場合は`.html'を追加します．

  `@setfilename'行は，TeXでマニュアルを植字するとき出力を作成しま
せんが，それにも関わらず不可欠です．それは，索引，相互参照，そしてその他
のTexinfoファイルで使用される追加ファイルを開き，システムに
`texinfo.cnf'ファイルがあれば，それも読み込みます(*note Preparing for
TeX: Preparing for TeX.)．


File: texinfo-ja.info,  Node: settitle,  Next: End of Header,  Prev: setfilename,  Up: Texinfo File Header

3.2.4 `@settitle':ドキュメントのタイトルを設定する
--------------------------------------------------

印刷されたマニュアルにするため，Texinfoファイルは，以下のような行を含め
る必要があります．

     @settitle TITLE

  `@settitle'コマンドを行の最初に書き，同じ行にタイトルを続けてくだ
さい．これは，TeXにヘッダやフッタで使用するタイトルを伝えます．その行
には他に何も書かないでください．コマンド以降のその行は，タイトルの一部と
考えられ，それには他の場所ではコメントになるもの含まれます．

  `@settitle'コマンドは，TeXで実際に出力を生成するすべてのものに
前置すべきです．

  `makeinfo'で生成されるHTMLファイルには，TITLEがドキュメン
トの`<title>'として提供され，`<head>'部分にあるデフォルトのド
キュメントの説明になります．それを変更する方法は， *Note
documentdescription::を参照してください．

  `@settitle'コマンドのタイトルは，通常タイトルページのタイトルと同
じですが，タイトルページに現れるタイトルに影響しません．このため，二つは
正確に一致する必要はありません．このため，`@settitle'コマンドのタ
イトルは，タイトルページに現れるタイトルの，短い，あるいは展開されたバー
ジョンにすることが可能です(*note `@titlepage': titlepage.)．

  慣習では，TeXでTexinfoファイルを両面出力物のための書式化するとき，タ
イトルは左側(偶数)のページの見出しに印刷され，現在の章のタイトルは右側
(奇数)のページの見出しに印刷されます．(TeXは，それぞれの
`@chapter'コマンドからの，それぞれの章のタイトルを記憶します．)デ
フォルトで，ページフッタは印刷されません．

  片面スタイルの場合でさえ，TeXは`@settitle'コマンド行を探し，マ
ニュアルタイトルを見出しに含める場合に備えます．

  TeXは，Texinfoファイルの`@end titlepage'以降や，見出しを付ける
`@headings'コマンド以降のテキストに対してのみ，ページ見出しを印刷
します(詳細は，*note The `@headings' Command: headings on off.)．

希望があれば，独自のカスタム見出しとフッタを作成することが可能です．この
処理の詳細な記述は，*Note Page Headings: Headings.


File: texinfo-ja.info,  Node: End of Header,  Prev: settitle,  Up: Texinfo File Header

3.2.5 ヘッダの終り
------------------

ヘッダ行に，以下のようなTexinfoコメントになっているend-of-headerを続
けてください．

     @c %**end of header

  *Note Start of Header::.


File: texinfo-ja.info,  Node: Document Permissions,  Next: Titlepage & Copyright Page,  Prev: Texinfo File Header,  Up: Beginning a File

3.3 ドキュメントの許可
======================

ドキュメントに対する著作権の注意とコピーの許可は，様々なTexinfo出力形式
で複数の場所に表す必要があります．このため，Texinfoはこのテキストを一度
宣言するコマンド(`@copying')と，適切な場所にテキストを挿入するため
のもう一つのコマンド(`@insertcopying')を提供しています．

* Menu:

* copying::                 Declare the document's copying permissions.
* insertcopying::           Where to insert the permissions.


File: texinfo-ja.info,  Node: copying,  Next: insertcopying,  Up: Document Permissions

3.3.1 `@copying':コピーの許可を宣言する
---------------------------------------

`@copying'コマンドは，ドキュメントのなるべく最初の部分で提供すべき
です．推奨される場所はヘッダの材料の(*note Texinfo File Header::)直後で
す．それは慣習的に，プログラムが何かという一つか二つの文，ドキュメント自
身の証明，そしてコピーの許可から成り立っています．骨組みの例は以下のよう
になります．

     @copying
     This manual is for PROGRAM (version VERSION, updated
     DATE), which ...

     Copyright @copyright{} YEARS COPYRIGHT-OWNER.

     @quotation
     Permission is granted to ...
     @end quotation
     @end copying

  `@quotation'は法的には重要性ではありません．前後関係の読み易さを改
善するために存在します．

  GNUのマニュアルで使用されている完全なテキストは，*Note GNU Sample
Texts::.  GNUやそれ以外のフリーなマニュアル自身を配布するライセンスは，
*Note GNU Free Documentation License::.
ドキュメントの付録としてライセン スを含める必要があります．

  `@copying'のテキストは，Info，HTML，そしてXMLの出力ファイルの最初
に，コメントとして出力されます．プレーンテキストやTeXでは，暗黙的に出
力され_ません_．コピーの情報を発行するための`@insertcopying'
の使用はお任せします．詳細は次のセクションを参照してください．

  `@copyright{}'は，丸の中の`c'の出力をサポートしている(印刷
とHTML)の出力形式ではそれを生成します．それ以外のフォーマット(Infoとプレー
ンテキスト)では，`(C)'を生成します．著作権の注意には，以下の法的に
定義された順番があります．

     Copyright (C) YEARS COPYRIGHT-OWNER.

単語`Copyright'は，たとえ他の言語でマニュアルが書かれている場合でも，常
に英語で書く必要があります．これは国際的な法律のためです．

年のリストは，バージョンが完了したすべての年を(たとえ連続した年にリリー
スされていたとしても)含めるべきです．範囲指定は許可されていません．それ
ぞれの年を，個別にカンマで分けながらすべて書き出す必要があります．

著作権の所有者(達)は，その作業に対して法的な著作権を保持するものです．作
業をFSFに上としている状況では，所有者は`Free Software Foundation, Inc.'
になります．

著作権の`行'は，ソースドキュメントと出力の両方で，実際に複数の行に跨って
分離されていてもかまいません．これは，ドキュメントに長い歴史があり，異な
る出版年が多いときよくあります．

  追加情報は，*Note Copyright Notices: (maintain)Copyright Notices.


File: texinfo-ja.info,  Node: insertcopying,  Prev: copying,  Up: Document Permissions

3.3.2 `@insertcopying':許可のテキストを含める
---------------------------------------------

`@insertcopying'コマンドは，単純に単独行に以下のように書きます．

     @insertcopying

  これは，`@copying'で前もって定義されているテキストを挿入します．法
的な要求に対処するため，印刷されたマニュアルの著作権のページで使用する必
要があります．

  マニュアルのTopノード(*note The Top Node::)で`@insertcopying'を使
用することを強く推奨しますが，それは法的には要求されていません．以下はそ
の理由です．

  `@copying'コマンド自身で，許可のテキストをInfoファイルの最初のノー
ドの_前に_現します．そのテキストは，それぞれのInfo出力ファイルの先
頭にも，法的な必要性からそのままコピーされます．この場所では，Infoを使用
してマニュアルを読んでいる人がこのテキストを見ることは_ありません_
(例外は，高度なInfoコマンド`g *'を使用しているときです)．そのため，
明示的に`@insertcopying'をTopノードに書くことで，マニュアルがフリー
だということが読者に対して明らかになります．

  同様に，`@copying'のテキストは，それぞれのHTML出力ファイルの先頭に，
コメントとして，自動的に含められます．また，このテキストは，(読者がHTML
のソースを見ない限り)見ることができません．そしてまたそのために，コピー
の許可を見えるようにし，フリーを押し進めていくために，
`@insertcopying'をTopノードに書くことが重要です．

  `@copying'で定義される許可のテキストは，XML出力ファイルの最初にも，
自動的に表示されます．


File: texinfo-ja.info,  Node: Titlepage & Copyright Page,  Next: The Top Node,  Prev: Document Permissions,  Up: Beginning a File

3.4 タイトルと著作権ページ
==========================

ハードコピーの出力では，マニュアルの名前と著作者は，通常はタイトルページ
に印刷されます．著作権情報は通常，タイトルページの裏に印刷されます．

タイトルと著作権ページは印刷されたマニュアルには現れますが，Infoファイル
には現れません．このため，Infoファイルで使用不可能な，分かりにくいTeX
植字コマンドを，いくつか使用することが可能です．さらに，Texinfoファイル
の始めのこの部分は，印刷されたマニュアルに現れる著作権の許可のテキストを
含んでいます．

プレーンテキスト出力に対し，タイトルページのような情報を含めたい場合もあ
るでしょう．単純に，`@ifplaintext'と`@end ifplaintext'の間に，
そのような導入素材を配置してください．`makeinfo'は，これをプレー
ンテキスト(`--no-headers')に書くときに，`@insertcopying'と一
緒に含めます．

* Menu:

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                 and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                 and `@author' commands.
* Copyright::                   How to write the copyright notice and
                                 include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                 copyright pages.
* headings on off::             An option for turning headings on and off
                                 and double or single sided printing.


File: texinfo-ja.info,  Node: titlepage,  Next: titlefont center sp,  Up: Titlepage & Copyright Page

3.4.1 `@titlepage'
------------------

タイトルページと，それに続く著作権ページのための材料は，
`@titlepage'の単独行で開始し，`@end titlepage'の単独行で終了 します．

  `@end titlepage'コマンドは，新しいページから始め，ページの番号付け
を開始します．(ページ見出し生成の詳細は，*Note Page Headings:
Headings.)番号付けされないページにしたいものは，`@titlepage'と `@end
titlepage'コマンドの間に書きます．
`@setcontentsaftertitlepage'コマンドで，目次をその場所に表示するこ
とが可能です(*note Contents::)．

  `@page'コマンドを使用することで，`@titlepage'と`@end
titlepage'コマンドで線引きをした領域での改ページが可能となり，一ページ以
上のページ付けされないものが作成可能となります．これは，著作権ページを作
成する方法です．(`@titlepage'コマンドは，おそらく
`@titleandadditionalpages'と名付けた方がいいのですが，それは長すぎ
ます！)

コンピュータプログラムのマニュアルを書くとき，マニュアルが適合するプログ
ラムのバージョンをタイトルページに書くべきです．マニュアルがプログラムよ
り変更頻度が高い，または，プログラムに依存しない場合，マニュアルのエディ
ション番号(1) (*note titlepage-Footnote-1::)を含める
べきです．これは，マニュアルがどのプログラムのバージョンに対するものかを，
読者が追跡する助けとなります(`Top'ノードは，この情報も含みます． *note
`@top': makeinfo top.)．

Texinfoでは，タイトルページの作成に対して二つの主な方法を提供しています．
一つの方法は，`@titlefont'，`@sp'，そして`@center'コマ
ンドを，ページの単語を中央揃えしたタイトルページを生成するために使います．

  二番目の方法は，`@title'，`@subtitle'，そして`@author'
コマンドを，タイトルの下に黒い罫線をつけてタイトルページを作成し，著作者
の行とサブタイトルテキストをページで右寄せするために使用します．この方法
では，タイトルページの実際の書式化を何も指定しません．テキストを望み通り
に指定し，Texinfoは書式化を行います．

どちらか一方の方法を使用する，または，両方を組み合わせてもかまいません．
以下のセクションでサンプルを参照してください．

非常に簡単なアプリケーションのためと，伝統的な本の前部の規格外のタイトル
ページのため，Texinfoはタイトルとしてその行の残りの部分を引数とする
`@shorttitlepage'コマンドも提供しています．引数は，ページにそれ自
身を植字し，次は空白のページになります．


File: texinfo-ja.info,  Node: titlepage-Footnotes,  Up: titlepage

  (1) 我々は，独立したマニュアルのバージョンを`edition'と
して，プログラムのバージョンを`version'として参照することが便利だと分か
りました．そうしない場合，慣習的にドキュメントとソフトウェアの両方を同じ
単語で言及することで，お互いに混乱しやすいことが分かりました．


File: texinfo-ja.info,  Node: titlefont center sp,  Next: title subtitle author,  Prev: titlepage,  Up: Titlepage & Copyright Page

3.4.2 `@titlefont'，`@center'，そして`@sp'
------------------------------------------

印刷されたドキュメントに対してタイトルページを作成するため，
`@titlefont'，`@sp'，そして`@center'コマンドを使用する
ことが可能です．(これは，Texinfoのタイトルページを作成する，二つの方法の
最初のものです．)

  タイトル自身に適した大きなフォントを選択するため，`@titlefont'コマ
ンドを使用してください．特に長いタイトルがある場合，一度以上
`@titlefont'を使用することが可能です．

  例えば，以下のようにします．

     @titlefont{Texinfo}

  残りのテキストを中央揃えにするため，行の最初に`@center'コマンドを
使用してください．このため以下のようにします．

     @center @titlefont{Texinfo}

例では，タイトル"Texinfo"は中央揃えされ，タイトルフォントで印刷されま
す．

  縦の空白を挿入するため，`@sp'コマンドを使用してください．例えば，
以下のようにします．

     @sp 2

これで印刷されたページに二行の空白行が挿入されます(`@sp'コマンドの
詳細は，*note `@sp': sp.)．

  この手法のテンプレートは，以下のようになります．

     @titlepage
     @sp 10
     @center @titlefont{NAME-OF-MANUAL-WHEN-PRINTED}
     @sp 2
     @center SUBTITLE-IF-ANY
     @sp 2
     @center AUTHOR
     ...
     @end titlepage

  例の空白は，8.5x11インチのマニュアルに適しています．


File: texinfo-ja.info,  Node: title subtitle author,  Next: Copyright,  Prev: titlefont center sp,  Up: Titlepage & Copyright Page

3.4.3 `@title'，`@subtitle'，そして`@author'
--------------------------------------------

垂直と水平方向に自動的な配置を行なうタイトルページを作成するため，
`@title'，`@subtitle'，そして`@author'コマンドを使用す
ることが可能です．これは前のセクションの記述とは異なり，`@sp'コマ
ンドは垂直方向の空白調整に必要です．

  `@title'，`@subtitle'，そして`@author'コマンドを行の最
初に，タイトル，サブタイトル，または著作者を続けて書いてください．

  `@title'コマンドは，ページの左揃えで通常より大きいフォントでタイト
ルの行を生成します．タイトルには黒い罫線の下線があります．一行のみ可能で
す．`@*'コマンドを，タイトルを二行に分けるために使用してはいけませ
ん．非常に長いタイトルを扱うため，`@title'と`@titlefont'の両
方を使用した方が便利だと分かるかもしれません．このセクションの最後の例を
参照してください．

  `@subtitle'コマンドは，通常の大きさのフォントでページの右側にサブ
タイトルを設定します．

  `@author'コマンドは，著作者達の名前を中間の大きさのフォントで，ペー
ジのその行の左揃えでタイトルページの下の近くに配置します．名前は，タイト
ルの下線より細い黒い罫線の下線があります．(黒い罫線は，`@author'コ
マンド行に，`@page'コマンド行が続く場合に表示されます．)

  `@author'コマンドを使用するための二つの方法があります．
`@author'コマンドで始まった行の残りの部分に，名前を書くことが可能 です．

     @author by Jane Smith and John Doe

または，二つ(またはそれ以上)のそれぞれの前に`@author'を使用して，名
前を書くことも可能です．

     @author Jane Smith
     @author John Doe

(下の名前のみ，黒い罫線の下線がつきます．)

  この方法のテンプレートは，以下のようになります．

     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR
     @page
     ...
     @end titlepage

  前のセクションで記述された`@titlefont'の方法と，ここで記述されてい
る`@title'の方法を組み合わせてもかまいません．これは，長いタイトル
の場合に便利です．現実的な例は以下のようになります．

     @titlepage
     @titlefont{GNU Software}
     @sp 1
     @title for MS-Windows and MS-DOS
     @subtitle Edition @value{e} for Release @value{cde}
     @author by Daniel Hagerty, Melissa Weisshaus
     @author and Eli Zaretskii

(ここでの`@value'の使用は，*Note value Example::で述べられています．)


File: texinfo-ja.info,  Node: Copyright,  Next: end titlepage,  Prev: title subtitle author,  Up: Titlepage & Copyright Page

3.4.4 著作権のページ
--------------------

国際的な条約で，本の著作権の注意は，タイトルページかタイトルページの裏に
書く必要があります．著作権の注意がタイトルページの裏にあるとき，そのペー
ジは慣習で番号が付きません．そのため，Texinfoでは，著作権のページの情報
を`@titlepage'と`@end titlepage'コマンドの間に書くべきです．

  `@page'コマンドを改ページに使用してください．著作権の注意と著作権
ページの他のテキストがページの下になるように，`@page'コマンドの後
に，以下のような魔法の呪文を使用してください．

     @vskip 0pt plus 1filll

これは，Info書式化コマンドがサポートしていないTeXコマンドです．
`@vskip'コマンドは空白を挿入します．`0pt plus 1filll'は，0ポ
イントの必須の空白を書き，以下のテキストをページの下に書くことに必要な追
加の空白を配置することを意味します．`filll'の三つの`l'を使用し
ていることに注意してください．これは正しい使い方です．

  著作権のテキスト自身を挿入するために，次に`@insertcopying'を書いて
ください(*note Document Permissions::)．

     @insertcopying

発行者のコピーについてのテキスト，ISBN番号，カバーアートのクレジット，そ
してそれ以外のそのような情報を続けてください．

  以下はこれらをすべてまとめて書き込んだ例です．

     @titlepage
     ...
     @page
     @vskip 0pt plus 1filll
     @insertcopying

     Published by ...

     Cover art by ...
     @end titlepage


File: texinfo-ja.info,  Node: end titlepage,  Next: headings on off,  Prev: Copyright,  Up: Titlepage & Copyright Page

3.4.5 見出しの生成
------------------

`@end titlepage'コマンドは，単独行に書く必要があります．タイトルと
著作権のページの終りの印付けをするだけでなく，TeXにページ見出しとペー
ジ番号の生成も開始させます．

他で述べた繰り返しですが，Texinfoには二つの標準ページ見出しの書式があり，
一つは紙のそれぞれの片側に印刷されたドキュメント(片面印刷)のためで，もう一
つはそれぞれの用紙の両側に印刷されたドキュメント(両面印刷)のためです．こ
れらの書式化を，異なる方法で指定することが可能です．

   * 従来の方法は，`@setchapternewpage'コマンドをタイトルページコマンド
     の前に書くもので，`@end titlepage'で要求された方法でページ見出しの
     生成を開始します(*note setchapternewpage::)．

   *
     他の方法として，生成されたものへのページ見出しを阻止したり，片面または両
     面印刷で開始したりするため，`@headings'コマンドを使用することが可
     能です．(`@headings'コマンドを，`@end titlepage'コマンドの直
     後に書いてください．詳細は，*Note The `@headings' Command:
     headings on off.)

   *
     または，独自のページ見出しとフッタの書式を指定できます．ページ見出しとフッ
     タの詳細は，*Note Page Headings: Headings.

ほとんどのドキュメントは標準的な片面または両面の書式で書式化され，両面印
刷のため`@setchapternewpage odd'を使用し，片面印刷のため
`@setchapternewpage'コマンドは使用しません．


File: texinfo-ja.info,  Node: headings on off,  Prev: end titlepage,  Up: Titlepage & Copyright Page

3.4.6 `@headings'コマンド
-------------------------

`@headings'コマンドは滅多に使用されません．それは，それぞれのペー
ジに印刷するページ見出しとフッタの種類を指定します．通常これは，
`@setchapternewpage'コマンドで制御されます．
`@setchapternewpage'コマンドが望まないことをしたり，独自の定義の前
に前もって定義されているページ見出しを止める場合のみ，`@headings'
コマンドが必要です．`@headings'コマンドを`@end titlepage' コ
マンドの直後に書いてください．

  以下のように，`@headings'を使用することが可能です．

`@headings off'
     ページ見出しの印刷を停止します．

`@headings single'
     片面印刷に適したページ見出しを開始します．

`@headings double'
`@headings on'
     両面印刷に適したページ見出しを開始します．二つのコマンド，
     `@headings on'と`@headings double'は同意語です．

`@headings singleafter'
`@headings doubleafter'
     現在のページを出力した後，それぞれ，`single'または`double'見出
     しを開始します．

`@headings on'
     ページ見出しを開始します．`@setchapternewpage on'の場合は
     `single'で，それ以外では`double'です．

  例えば，前の章の終りに続けて同じページで新しい章を開始するようTeXに伝
えるための`@titlepage'コマンドの前に，`@setchapternewpage
off'を書く場合を考えます．またこのコマンドは，片面印刷のページヘッダを
TeXに植字させます．両面印刷でTeXに植字させるため，`@end
titlepage'コマンドの後に`@headings double'を書いてください．

  `@end titlepage'コマンドを含む行の直後に単独行の`@headings
off'を書くことで，TeXのページ見出しの生成を停止できます．

     @end titlepage
     @headings off

`@headings off'コマンドは，`@end titlepage'コマンドに優先し，
それ以外の場合はTeXにページ見出しを印刷させます．

  ページ見出しとフッタの独自のスタイルを指定することも可能です．詳細は，
*Note Page Headings: Headings.


File: texinfo-ja.info,  Node: The Top Node,  Next: Global Document Commands,  Prev: Titlepage & Copyright Page,  Up: Beginning a File

3.5 `Top'ノードとマスターメニュー
=================================

`Top'ノードは，Infoマニュアルへの読者の入口です．そのため，マニュアルの
(バージョンナンバーを含めた)短い記述とコピーの許可を提供するため，
`@insertcopying'コマンド(*note Document Permissions::)で開始し，マ
ニュアル全体のマスターメニューで終えるべきです．もちろん，読者が役に立つ
と思われるその他の一般的な情報を含めるべきです．

  また，`@node Top'行(*note The `@top' Sectioning Command: makeinfo top
command.)の直後に，ドキュメントのタイトルを含む
`@top'セクションコマンド行を書くのも通常の方法です．

`Top'ノードの内容は，オンラインの出力だけに現れます．印刷されたマニュア
ルに現れるものが無いので，`@ifnottex'と`@end ifnottex'コマン
ドで囲まれています．(TeXは`@node'行もメニューも印刷しません．
Infoだけに現れます．厳密には，`@ifnottex'と`@end ifnottext'
でこれらの部分を囲む必要はありませんが，そうするのが最も簡単です．
*Note Conditionally Visible Text: Conditionals.)

* Menu:

* Top Node Example::
* Master Menu Parts::


File: texinfo-ja.info,  Node: Top Node Example,  Next: Master Menu Parts,  Up: The Top Node

3.5.1 Topノードの例
-------------------

以下はTopノードの例です．

     @ifnottex
     @node Top
     @top Sample Title

     @insertcopying

     Additional general information.

     @menu
     * First Chapter::
     * Second Chapter::
     ...
     * Index::
     @end menu


File: texinfo-ja.info,  Node: Master Menu Parts,  Prev: Top Node Example,  Up: The Top Node

3.5.2 マスターメニューの部分
----------------------------

"マスターメニュー(master menu)"は，ファイル全体のノードをリストアッ
プする詳細なメインメニューです．

  マスターメニューは，`@menu'と`@end menu'コマンドで囲まれてい
て，印刷されたドキュメントには現れません．

  一般に，マスターメニューはいくつかの部分に分かれています．

   *
     最初の部分は，Texinfoファイルの主なノードを含みます．章のノード，章のよ
     うなもののノード，そして付録です．

   * 二番目の部分は，索引のノードを含みます．

   *
     三番目の部分とそれに続く部分はその他の低レベルのノードで，章の順番のリス
     トを含みます．このように，中間メニューを通過するのではなく特定の情報を探
     すとき，探している人は特定のノードへ直接行くことが可能になります．これら
     のメニュー項目は必要ではありません．便利だと思う場合は追加してください．
     それらを使用する場合，`@detailmenu'を最初のものの前に書き， `@end
     detailmenu'を最後のものの後に書きます．そうしなければ
     `makeinfo'は混乱します．

メニューのそれぞれのセクションは記述行で紹介されています．アスタリスクで
始まらない行は，メニュー項目として扱われません．(詳細は，*Note Writing
a Menu::.)

例えば，このマニュアルのマスターメニューは，以下のようになっています(もっ
と多くの項目がありますが．)

     @menu
     * Copying Conditions::  Your rights.
     * Overview::            Texinfo in brief.
     ...
     * Command and Variable Index::
     * Concept Index::

     @detailmenu
     --- The Detailed Node Listing ---

     Overview of Texinfo

     * Reporting Bugs:: ...
     ...

     Beginning a Texinfo File

     * Sample Beginning:: ...
     ...
     @end detailmenu
     @end menu


File: texinfo-ja.info,  Node: Global Document Commands,  Next: Software Copying Permissions,  Prev: The Top Node,  Up: Beginning a File

3.6 大域的なドキュメントコマンド
================================

前のセクションで記述した基本的なコマンド以外に，以下のようなドキュメント
全体に影響のある，追加のコマンドがあります．それらが与えられる場合は，通
常はすべてTopノードの前で与えられます．

* Menu:

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* exampleindent::               Specify environment indentation.


File: texinfo-ja.info,  Node: documentdescription,  Next: setchapternewpage,  Up: Global Document Commands

3.6.1 `@documentdescription':概要のテキスト
-------------------------------------------

ドキュメントのHTML出力を生成しているとき，`makeinfo'はドキュメン
トの内容を与えるため，`<meta>'エレメントを`<head>'に書き出しま
す．デフォルトで，この"説明(description)"は，`@settitle'コマン ド(*note
settitle::)で与えられるドキュメントのタイトルです．これを変更す
るため，`@documentdescription'環境変数を以下のように使用してくださ い．

     @documentdescription
     descriptive text.
     @end documentdescription

これで，HTMLの`<head>'に以下のような出力を生成します．

     <meta name=description content="descriptive text.">

  `@documentdescription'は，ドキュメントの最初のノードの前に指定する
必要があります．


File: texinfo-ja.info,  Node: setchapternewpage,  Next: paragraphindent,  Prev: documentdescription,  Up: Global Document Commands

3.6.2 `@setchapternewpage':
---------------------------

公式に製本された本では，通常テキストは紙の両面に印刷され，章は右側のペー
ジから始まり，そして右のページは偶数番号です．しかし，短いレポートではテ
キストが紙の片面だけに印刷されることもよくあります．また短いレポートでは，
章で改ページしないときもありますが，小量の縦方向の空白の後，前の章の終り
と同じページで印刷されます．

  `@setchapternewpage'コマンドを，TeXが章を開始する方法と，紙の片
面や両面への印刷(一面や二面印刷)に対するヘッダの書式化の方法を指定するた
め，様々な引数で使用することが可能です．

  `@setchapternewpage'コマンドを，行の最初に引数を続けて書いてくださ
い．

例えば，それぞれの章を新しい偶数ページから始めるため，以下のように書きま
す．

     @setchapternewpage odd

  `@setchapternewpage'コマンドで，三つの選択肢の一つを指定することが可
能です．

`@setchapternewpage off'
     TeXは，直前の章と同じページで，いくつかの縦方向の空白を挟み，新しい章
     を植字します．また，TeXは片面印刷に対するページヘッダの書式化も行ない
     ます．

`@setchapternewpage on'
     TeXは，新しいページで章を開始させ，片面印刷に対するページヘッダで書式
     化します．これは，短いレポートや個人的な印刷で最もよく使用されている形式
     です．これはデフォルトです．

`@setchapternewpage odd'
     TeXは，新しい章を新しい偶数ページ(右側のページ)で開始させ，両面印刷に
     対する植字をします．これは，本やマニュアルで最もよく使用されている形式で
     す．

奇数番号のページで新しい章や本を開始する印刷の伝統はないので，Texinfoに
は`@setchapternewpage even'コマンドはありません．

  `@setchapternewpage'が設定するデフォルトのヘッダが好みではない場合，
`@headings'コマンドを用いて明示的に制御することが可能です． *Note The
`@headings' Command: headings on off.

  マニュアルや本の最初では，ページの番号付けはされません -- 例えば，本の
タイトルと著作権のページは番号付けされていません．慣習で，目次のページと
序章のページはローマ数字で番号付けされ，それはドキュメントの残りの部分と
連番にはなっていません．

  Infoファイルにはページが無いので，`@setchapternewpage'はそれに対し
効果はありません．

  要求される出力物がドキュメントの本質ではないため，
`@setchapternewpage'コマンドをマニュアルのソースに入れることを推奨
する気はありません．特定のハードコピーを実行する際，デフォルトオプション
(空白ページがない，全てのページで同じヘッダ)が不要な場合，お望みの出力を
指定するために`texi2dvi'に`--texinfo'オプション使用してく ださい．


File: texinfo-ja.info,  Node: paragraphindent,  Next: exampleindent,  Prev: setchapternewpage,  Up: Global Document Commands

3.6.3 段落の字下げ
------------------

Texinfoプロセッサは，それぞれの段落の最初の行の始めに空白を挿入し，それ
により段落を字下げします．この字下げを指定するために，
`@paragraphindent'コマンドを使用することが可能です．行の最初に
`@paragraphindent'コマンドを書き，`asis'や数字を続けてくださ い．

     @paragraphindent INDENT

  字下げは，INDENTの値に従います．

`asis'
     既存の字下げを変更しません(TeXでは実装されていません)．

`none'
0
     すべての字下げを取り消します．

N
     Info出力ではN個のスペース文字，TeXではN字下げします．


  INDENTのデフォルト値は三です．`@paragraphindent'は，HTML出力
では無視されます．

  `@paragraphindent'コマンドは，領域の書式化コマンドで指定されたよう
に段落を字下げするので，Texinfoファイルの最初に，end-of-header行の直前に
書くのが最善です．*Note Start of Header::.

  `texinfo-format-buffer'と`texinfo-format-region'の特別なところ
は，`@w'や`@*'コマンドを含む段落を字下げしない(または補充し
ない)ことです．詳細は，*Note Refilling Paragraphs::.


File: texinfo-ja.info,  Node: exampleindent,  Prev: paragraphindent,  Up: Global Document Commands

3.6.4 `@exampleindent':環境に応じた字下げ
-----------------------------------------

Texinfoプロセッサは，`@example'とそれに似たもので囲まれている部分
でそれぞれの行を字下げします．`@exampleindent'コマンドで字下げを指
定することが可能です．`@exampleindent'コマンドを行の始めに書き，
`asis'または数字のいずれかを続けてください．

     @exampleindent INDENT

  字下げは，INDENTの値に従います．

`asis'
     既存の字下げを変更しません(TeXでは実装されていません)．

0
     すべての字下げを取り消します．

N
     Info出力では，N個のスペース文字，TeXではN文字，囲まれた部
     分を字下げします．


  INDENTのデフォルト値は5です．`@exampleindent'はHTML出力では
無視されます．

  `@exampleindent'コマンドは，領域の書式化コマンドで指定されたように
段落を字下げするので，Texinfoファイルの最初に，end-of-header行の前に書く
のが最善です．*Note Start of Header::.


File: texinfo-ja.info,  Node: Software Copying Permissions,  Prev: Global Document Commands,  Up: Beginning a File

3.7 ソフトウェアのコピーの許可
==============================

Texinfoファイルに，文章化された"General Public License"と，配布情報と
ソフトウェアに対する免責を含むセクションがある場合，`Top'ノードの直後に
配置することを推奨します．General Public Licenseは，Project GNUのソフト
ウェアにとって非常に重要です．それは，万人に対するソフトウェアの使用と共
有の維持を保証します．

コピーと配布の情報と免責には，導入部分やマニュアルの最初の章が続きます．

導入部分はTexinfoの必須部分ではありませんが大変役に立ちます．理想的には，
ファイルが何に関係するするのかと，誰が興味を持って読むのかを，そこで明白
に簡潔に述べるべきです．ドキュメントの最初の方に書く人もいますが，一般に，
導入部分にはライセンスと情報の記述が続きます．通常の導入部分は，
`@unnumbered'セクションに書きます．(*Note The `@unnumbered' and
`@appendix' Commands: unnumbered & appendix.)


File: texinfo-ja.info,  Node: Ending a File,  Next: Structuring,  Prev: Beginning a File,  Up: Top

4 Texinfoファイルを終える
*************************

Texinfoファイルの終りには，索引を作成するコマンドと，(おそらく)完全なも
のと概要の目次を生成するコマンドを含めるべきです．最後に，処理する最終行
に印を付ける`@bye'コマンドを含んでいる必要があります．

  例えば，以下のようにします．

     @node Index
     @unnumbered Index

     @printindex cp

     @shortcontents
     @contents

     @bye

* Menu:

* Printing Indices & Menus::    How to print an index in hardcopy and
                                 generate index menus in Info.
* Contents::                    How to create a table of contents.
* File End::                    How to mark the end of a file.


File: texinfo-ja.info,  Node: Printing Indices & Menus,  Next: Contents,  Up: Ending a File

4.1 索引メニューと索引の印刷
============================

索引を印刷するということは，マニュアルやInfoファイルの一部としてそれを含
めることを意味します．これは，`@cindex'やその他の索引項目を生成す
るコマンドをTexinfoファイルで使用しているだけでは，自動的に発生しません．
それらは索引のため生データを蓄積します．索引を生成するため，
`@printindex'コマンドをドキュメントの索引を書きたい場所に含める必
要があります．また，印刷されたマニュアルを作成する過程でソートされた索引
ファイルを生成する際，生データをソートするために`texindex'と呼ばれ
るプログラム(*note Hardcopy::)を実行する必要もあります．ソートされた索引
ファイルは索引の印刷で実際に使用されます．

Texinfoは，前もって定義された六つの個別の形態の索引を提供していて，それ
ぞれ以下の表で示す二文字の省略を用いています．しかし，索引を統合したり
(*note Combining Indices::)，独自の索引を定義(*note New Indices::)しても
かまいません．

以下は前もって定義されている索引，その省略，そしてそれに対応する索引項目
コマンドです．

`cp'
     概念の索引(`@cindex')

`fn'
     関数の索引(`@findex')

`vr'
     変数の索引(`@index')

`ky'
     キーの索引(`@kindex')

`pg'
     プログラムの索引(`@pindex')

`tp'
     データ型の索引(`@tindex')

  `@printindex'コマンドは二文字の索引の省略を引数として，対応するソー
トされた索引ファイルを読み込み，索引内に適切に書式化します．

  `@printindex'コマンドは索引に対する章の見出しを生成しません．した
がって，章の見出しを提供し索引を目次に含めるため，適切なセクションや章コ
マンド(通常`@unnumbered')の前に`@printindex'コマンドを書くべ
きです．`@unnumbered'コマンドを`@node'行に前置してください．

  例えば，以下のようにします．

     @node Variable Index
     @unnumbered Variable Index

     @printindex vr

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

見つけ易くするため，概念の索引を最後に配置することを推奨します．また，読
者が見る場所を一つだけにするため，可能な限り索引を一つにすることを推奨し
ます(*note Combining Indices::)．


File: texinfo-ja.info,  Node: Contents,  Next: File End,  Prev: Printing Indices & Menus,  Up: Ending a File

4.2 目次の生成
==============

`@chapter'，`@section'，そしてその他の構造化コマンドは，目次
を作成する情報を供給していますが，実際の表をマニュアルに表示しません．こ
うするため，`@contents'と/または`@summarycontents'コマンドを
使用する必要があります．

`@contents'
     印刷されたマニュアルに目次を生成し，それは，全ての章，セクション，サブセ
     クションなど，付録や番号付けされない章まで含みます．`@heading'と同
     列のコマンドで生成された見出しは目次に現れません．

`@shortcontents'
`@summarycontents'
     (`@summarycontents'は`@shortcontents'と同義語です．)

     章，付録，そして番号付けされない章のみをリストアップした，短い，または，
     概要の目次を生成します．セクション，サブセクション，そしてサブサブセクショ
     ンは削除されます．長いマニュアルのみ，完全な目次への追加として短い目次が
     必要です．


どちらの目次コマンドも単独行に書くべきです．目次コマンドは，自動的に章の
ような見出しを最初の目次ページのトップに生成するので，その前に
`@unnumbered'のようなセクションコマンドを含めないでください．

Infoファイルは目次の代わりにメニューを使用するので，Indo書式化コマンドは，
目次コマンドを無視します．しかし，`makeinfo'で標準出力に出力を書い
ていない限り，目次は(`makeinfo --no-headers'で生成される)プレーンテ
キスト出力には含まれます．

  HTML出力を生成する際に`makeinfo'で短い目次を書いているとき，短い目
次のリンクは，ドキュメントのテキストではなく，完全な目次の対応する項目を
指し示します．完全な目次のリンクは，ドキュメントの主なテキストを指し示し
ます．

  目次コマンドは，ファイルの最後の索引(前のセクションを参照してください)
の後の`@bye'(次のセクションを参照してください)の直前，または，ファ
イルの最初の`@end titlepage'(*note titlepage::)の後に配置すること
が可能です．前者の利点は，行われた処理を参照するため，目次出力が常に更新
されることです．後者の利点は，目次が適切な場所に印刷されることで，DVIファ
イルを`dviselect'で再配列したり，紙を並べ変える必要が無くなりま す．

著者として，目次コマンドを好きなところに書くことが可能です．しかし，単に
マニュアルを印刷するだけのユーザは，たとえ著者が目次コマンドをドキュメン
トの最後に書いている場合でも，(ここで書かれているような，ほとんどの既存
のTexinfoドキュメントのように)目次をタイトルページの後に書きたいと思うか
もしれません．これは，`@setcontentsaftertitlepage'と/または，
`@setshortcontentsaftertitlepage'で指定することが可能です．最初の
ものは，`@end titlepage'の後に主な目次のみ印刷します．二番目のもの
は，短い目次と主な目次の両方を印刷します．どちらの場合でも，それに続く
`@contents'や`@shortcontents'は(`@end titlepage'がない
場合は)無視されます(`@end titlepage'．

  `@set...contentsaftertitlepage'を，ドキュメントの最初の方(例え
ば`@setfilename'の直後)に含める必要があります．ソースファイルの変
更無しでこれを指定するため`texi2dvi' (*note Format with
texi2dvi::)の使用を推奨します．例えば，以下のようにします．
     texi2dvi --texinfo=@setcontentsaftertitlepage foo.texi


File: texinfo-ja.info,  Node: File End,  Prev: Contents,  Up: Ending a File

4.3 ファイルの終りの`@bye'
==========================

`@bye'コマンドはTexinfoの処理を終了します．`@bye'以降を読み
込むフォーマッタは存在しません．`@bye'は単独行にすべきです．

  お望みなら，`@bye'行に注釈を続けてもかまいません．これらの注釈は書
式化されず，Infoや印刷されたマニュアルに現れません．それは，`@bye'
後のテキストが`@ignore'...`@end ignore'にあるかのように
なります．また，`@bye'行にEmacsに対するローカルな変数リストを続け
てもかまいません．詳細は，*Note Using Local Variables and the Compile
Command: Compile-Command.


File: texinfo-ja.info,  Node: Structuring,  Next: Nodes,  Prev: Ending a File,  Up: Top

5 章の構造
**********

"章の構造化(chapter structuring)"コマンドは，ドキュメントを，章，セ
クション，サブセクション，そしてサブサブセクションの階層構造に分けます．
これらのコマンドは，大きな見出しを生成します．それらは，印刷されたマニュ
アルの目次の情報も提供します(*note Generating a Table of Contents:
Contents.)．

  章の構造化コマンドはInfoノード構造を作成しないので，通常は`@node'
コマンドをそれぞれの章の構造化コマンドの直前に書くべきです (*note
Nodes::)．ノードの構造化コマンドを使用せず章の構造化コマンドを使
用するのは，おそらく，相互参照を含まないドキュメントやInfo形式に変換しな
いドキュメントを書く場合だけでしょう．

印刷可能なドキュメントではなく，InfoファイルのためだけにTexinfoファイル
を書くことはおそらくないでしょう．そうする場合でも，章の構造化コマンドを
それぞれのノードの見出しを作成するために -- 不要ですが -- 書いてもかま
いません．

* Menu:

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The `@top' command, part of the `Top' node.
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.


File: texinfo-ja.info,  Node: Tree Structuring,  Next: Structuring Command Types,  Up: Structuring

5.1 セクションのツリー構造
==========================

Texinfoファイルは通常，章，セクション，サブセクション，そしてそのような
ものからなる，本のような構造をしています．この構造は，上に根があり，レベ
ルに対応した，章，セクション，サブセクション，そしてサブサブセクションを
持つ木(または，さかさまの木)のように見えます．

それぞれ二つのセクションを持つ章が三つあるTexinfoファイルの図は以下のよう
になります．

                                       Top
                                        |
                  ---------------------------------------------
                 |                      |                      |
                1 章                   2 章                   3 章
                 |                      |                      |
            -----------            -----------            -----------
           |           |          |           |          |           |
      セクション  セクション セクション  セクション セクション  セクション
          1.1         1.2        2.1         2.2        3.1         3.2

  この構造を持つTexinfoファイルで，2章は以下のように開始します．

     @node    Chapter 2,  Chapter 3, Chapter 1, top
     @chapter Chapter 2

  章の構造化コマンドは以下のセクションで述べています．`@node'と
`@menu'コマンドは以下の章で述べています．(*Note Nodes::.  そして，
*Note Menus::を参照してください．)


File: texinfo-ja.info,  Node: Structuring Command Types,  Next: makeinfo top,  Prev: Tree Structuring,  Up: Structuring

5.2 構造化コマンドの形式
========================

章を構造化するコマンドは，四つのグループ，またはシリーズに分類され，それ
ぞれは，章，セクション，サブセクション，そしてサブサブセクションの階層レ
ベルに対応する構造化コマンドを含んでいます．

  四つのグループは，`@chapter'シリーズ，`@unnumbered'シリーズ，
`@appendix'シリーズ，そして`@heading'シリーズです．

それぞれのコマンドは，印刷されたページやInfoファイルで異なるタイトルを生
成します．いくつかのコマンドのみ，印刷された本やマニュアルの目次でリスト
アップされるタイトルを持ちます．

   * コマンドの`@chapter'と`@appendix'シリーズは，印刷されたもの
     や目次に番号や文字が付いた項目を生成します．

   * コマンドの`@unnumbered'シリーズは，印刷されたものや目次に番号無し
     の項目を生成します．特別な使用法がある`@top'コマンドは，このシリー
     ズのメンバーです(*note `@top': makeinfo top.)．

   * コマンドの`@heading'シリーズは，目次に現れない番号付けされない見出
     しを生成します．見出しコマンドは新しいページを開始しません．

   * `@majorheading'コマンドは，`@chapheading'の使用と似た結果を
     生成しますが，見出しの前に大きな縦方向の空白を生成します．

   * `@setchapternewpage'コマンドでは，`@chapter'，
     `@unnumbered'，そして`@appendix'コマンドは，印刷されたマニュ
     アルで新しいページを開始します．`@heading'コマンドではそうなりませ
     ん．

  四つの章の構造化コマンドのグループは以下のようになります．

番号付き       番号無し               文字と番号            番号無し
目次にある     目次にある             目次にある            目次から削除
               `@top'                                       `@majorheading'
`@chapter'     `@unnumbered'          `@appendix'           `@chapheading'
`@section'     `@unnumberedsec'       `@appendixsec'        `@heading'
`@subsection'  `@unnumberedsubsec'    `@appendixsubsec'     `@subheading'
`@subsubsection'`@unnumberedsubsubsec' `@appendixsubsubsec'  `@subsubheading'


File: texinfo-ja.info,  Node: makeinfo top,  Next: chapter,  Prev: Structuring Command Types,  Up: Structuring

5.3 `@top'
==========

`@top'コマンドは，Texinfoファイルの最初の`@node Top'行の後に
使用している特別なセクションコマンドです．`@top'コマンドは，
`makeinfo'フォーマッタに`Top'ノードを伝え，マニュアルで暗黙のポイン
タを使用する場合，それはノードツリーのルートとして使用することが可能です．
`@unnumbered'(*note `@unnumbered' and `@appendix': unnumbered &
appendix.)の植字効果と同じです．詳細は，*Note The `@top' Command:
makeinfo top command.を参照してください．

  `@top'ノードとそのメニュー(がある場合)は，InfoとHTML出力のみに現れ，
TeXに現れないようにするため，慣習で，`@ifnottex'環境になります．


File: texinfo-ja.info,  Node: chapter,  Next: unnumbered & appendix,  Prev: makeinfo top,  Up: Structuring

5.4 `@chapter'
==============

`@chapter'はドキュメントの章を識別します．行の最初にコマンドを，同
じ行に続けて章のタイトルを書いてください．

  例えば，このマニュアルのこの章は，"章の構造(Chapter Structuring)"とい
う項目です．`@chapter'行は以下のようになります．

     @chapter Chapter Structuring

  TeXでは，`@chapter'コマンドはドキュメントに章を作成し，章のタイ
トルを指定します．章は自動的に番号付けされます．

  Infoでは，`@chapter'コマンドはタイトルを単独行に現し，行の下にはア
スタリスクの挿入があります．このため，Infoで上の例は以下の出力を生成しま
す．

     Chapter Structuring
     *******************

  Texinfoはコマンド`@centerchap'も提供していて，それは
`@unnumbered'に似ていますが，印刷物でその引数を中央揃えします．こ
の種の形式上の選択は，通常Texinfoでは提案されません．


File: texinfo-ja.info,  Node: unnumbered & appendix,  Next: majorheading & chapheading,  Prev: chapter,  Up: Structuring

5.5 `@unnumbered'と`@appendix'
==============================

`@unnumbered'コマンドを，印刷されたマニュアルであらゆる種類の数字
が付かない章を作成するために使用してください．`@appendix'コマンド
を，印刷されたマニュアルで数字の代わりに文字でラベルが付く付録を作成する
ために使用してください．

  Infoファイル出力に対し，`@unnumbered'と`@appendix'コマンドは，
`@chapter'と同じです．タイトルは単独行で印刷され，下にアスタリスク
の行が付きます．(*Note `@chapter': chapter.)

  付録や番号を付けない章を作成するため，章の作成のように`@appendix'
や`@unnumbered'コマンドを行の最初から書き，同じ行にタイトルを続け
てください．


File: texinfo-ja.info,  Node: majorheading & chapheading,  Next: section,  Prev: unnumbered & appendix,  Up: Structuring

5.6 `@majorheading'，`@chapheading'
===================================

`@majorheading'と`@chapheading'コマンドで，ドキュメントの本
体に章のような見出しを書き出します．

  しかし，いずれのコマンドもTeXに番号付の見出しや目次項目を生成させませ
ん．また，どちらのコマンドも，TeXに印刷されたマニュアルで新しいページ
を開始させません．

  TeXでは，`@majorheading'コマンドは，`@chapheading'コマン
ドが生成するより大きな縦方向の空白を生成します．

  Infoでは，`@majorheading'と`@chapheading'コマンドは
`@chapter'と同じで，下にアスタリスクの行が付いた単独行にタイトルを
出力します．(*Note `@chapter': chapter.)


File: texinfo-ja.info,  Node: section,  Next: unnumberedsec appendixsec heading,  Prev: majorheading & chapheading,  Up: Structuring

5.7 `@section'
==============

印刷されたマニュアルでは，`@section'コマンドは章の中の番号付きのセ
クションとなります．セクションのタイトルは目次に現われます．Infoでは，
`@section'コマンドは`='で下線を引かれたテキストをタイトルとし
て提供します．

  このセクションは，`@section'コマンドが前置されていて，Texinfoファ
イルでは以下のように見えます．

     @section @code{@@section}

  セクションを作成するため，`@section'コマンドを行の最初に書き，同じ
行にセクションのタイトルを続けてください．

  このため，以下のようにします．

     @section This is a section

以下を生成します．

     This is a section
     =================

Infoでは，上記のようになります．


File: texinfo-ja.info,  Node: unnumberedsec appendixsec heading,  Next: subsection,  Prev: section,  Up: Structuring

5.8 `@unnumberedsec'，`@appendixsec'，`@heading'
================================================

`@unnumberedsec'，`@appendixsec'，そして`@heading'コマ
ンドはそれぞれ，`@section'コマンドの，番号無し，付録のようなもの，
そして見出しのようなものと同じです．(*Note `@section': section.)

`@unnumberedsec'
     `@unnumberedsec'コマンドは，番号無しの章の中や，通常の章や付録の中
     で，番号無しのセクションを提供するために使用できます．

`@appendixsec'
`@appendixsection'
     `@appendixsection'は，`@appendixsec'コマンドの長い綴です．二
     つは同じです． 

     慣習的に，`@appendixsec'や`@appendixsection'コマンドは，付録
     でのみ使用します．

`@heading'
     `@heading'コマンドは，章の形式の見出しで目次に現われないものに対し
     て，希望の場所でどこで使用してもかまいません．


File: texinfo-ja.info,  Node: subsection,  Next: unnumberedsubsec appendixsubsec subheading,  Prev: unnumberedsec appendixsec heading,  Up: Structuring

5.9 `@subsection'コマンド
=========================

サブセクションとセクションの関係は，セクションと章の関係のようなものです．
(*Note `@section': section.)Infoで，サブセクションのタイトルは，
`-'で下線が引かれます．例えば，以下のようになります．

     @subsection This is a subsection

以下を生成します．

     This is a subsection
     --------------------

印刷されたマニュアルでは，サブセクションは目次にリストアップされ，3レベ
ルの深さで番号が付きます．


File: texinfo-ja.info,  Node: unnumberedsubsec appendixsubsec subheading,  Next: subsubsection,  Prev: subsection,  Up: Structuring

5.10 `@subsection'のようなコマンド
==================================

`@unnumberedsubsec'，`@appendixsubsec'，そして
`@subheading'コマンドは，それぞれ，`@subsection'コマンドの，
番号無し，付録のようなもの，そして見出しのようなものと同じです． (*Note
`@subsection': subsection.)

  Infoでは，`@subsection'のようなコマンドはハイフンで下線が引かれた
タイトルを生成します．印刷されたマニュアルでは，`@subheading'コマ
ンドは，番号無しのものと目次に現われないもの以外サブセクションのような見
出しを生成します．同様に，`@unnumberedsubsec'コマンドは，サブセク
ションに似た番号がない見出しを生成し，`@appendixsubsec'コマンドは，
文字と数字でラベルが付いたサブセクションのような見出しを生成します．これ
らのコマンドは両方とも目次に現われる見出しを生成します．


File: texinfo-ja.info,  Node: subsubsection,  Next: Raise/lower sections,  Prev: unnumberedsubsec appendixsubsec subheading,  Up: Structuring

5.11 `subsub'コマンド
=====================

Texinfoでの四番目以下のレベルのセクションコマンドは，`subsub'コマンドで
す．以下のものがあります．

`@subsubsection'
     サブサブセクションとサブセクションの関係は，サブセクションとセクションの
     関係のようなものです．(*Note `@subsection': subsection.)印刷さ
     れたマニュアルで，サブサブセクションのタイトルは目次に現われ，四番目の深
     さのレベルで番号を付けられます．

`@unnumberedsubsubsec'
     番号付けされていないサブサブセクションのタイトルは，印刷されたマニュアル
     の目次に現われますが，番号はありません．それ以外で，番号付けされていない
     サブサブセクションはサブサブセクションと同じです．実際にInfoでは，番号付
     けされていないサブサブセクションは，普通のサブサブセクションのように見え
     ます．

`@appendixsubsubsec'
     慣習的に，付録コマンドは付録のためのみに使用され，印刷されたマニュアルで
     は文字と番号が適切に付けられます．それらは目次にも現われます．実際にInfo
     では，付録のサブサブセクションは普通のサブサブセクションのように見えます．

`@subsubheading'
     `@subsubheading'コマンドは，目次に現われない小さい見出しが必要なあ
     らゆる場所で使用できます．実際にInfoでは，サブサブ見出しは普通のサブサブ
     セクションの見出しのように見えます．

Infoでは，`subsub'タイトルはピリオドで下線が引かれます．例えば以下のよう
にします．

     @subsubsection This is a subsubsection

以下を生成します．

     This is a subsubsection
     .......................


File: texinfo-ja.info,  Node: Raise/lower sections,  Prev: subsubsection,  Up: Structuring

5.12 `@raisesections'と`@lowersections'
=======================================

`@raisesections'と`@lowersections'コマンドは，章，セクション，
サブセクションのようなものの，階層的レベルをあげたり下げたりします．
`@raisesections'コマンドは，セクションを章，サブセクションをセクショ
ンなどのように変更します．`@lowersections'コマンドは，章をセクショ
ン，セクションをサブセクションなどのように変更します．

他のTexinfoファイルの内部ファイルやインクルードファイルとなる，外部や単
独のTexinfoファイルとして書かれているテキストを含める場合，
`@lowersections'コマンドは役に立ちます．ファイルの最初にコマンドを
書くことで，すべての`@chapter'コマンドは`@section'コマンドで
あるかのように書式化され，すべての`@section'コマンドは
`@subsection'コマンドであるかのように書式化される等のようになりま す．

  `@raisesections'は，章の構造階層でコマンドを一階層あげます．

       変更前           変更後
     @subsection     @section,
     @section        @chapter,
     @heading        @chapheading,
              等々

  `@lowersections'は，章の構造階層でコマンドを一階層下げます．

       変更前           変更後
     @chapter        @section,
     @subsection     @subsubsection,
     @heading        @subheading,
              等々

  `@raisesections'や`@lowersections'コマンドは，Texinfoファイ
ルのそれ以降の章の構造化コマンドのみを変更します．`@raisesections'
や`@lowersections'コマンドは単独行に書いてください．

  `@lowersections'コマンドは，`@raisesections'コマンドでキャン
セルされ，逆も同様になります．一般的に，コマンドは以下のように使用します．

     @lowersections
     @include somefile.texi
     @raisesections

  `@raisesections'コマンドが無い場合，ドキュメントのそれ以降全てのセ
クションはレベルが下がります．

コマンドの繰り返しの使用で，階層レベルは一度に一段階づつ，上がったり下がっ
たりし続けます．

`章'を上に上げようとすると，章コマンドを再生成します．`サブサブセクショ
ン'を下に下げようとすると，サブサブセクションコマンドを再生成します．


File: texinfo-ja.info,  Node: Nodes,  Next: Menus,  Prev: Structuring,  Up: Top

6 ノード
********

"ノード(Nodes)"はTexinfoファイルの主要な部分です．それらは，それ自身
が階層的ではなく，ファイル構造でもありません．ノードは，他のノードの名前
を持つ"ノードポインタ(node pointers)"を含み，ノードをリストアップし
ている"メニュー(menus)" を含めることも可能です．Infoでは，移動コマン
ドで指示されたノードやメニューのノードリストへ移動することが可能です．ノー
ドポインタとメニューは，Info ファイルに，章，セクション，サブセクション
等のような構造を提供していて，それらは印刷された本に構造を提供しているも
のに似ています．

* Menu:

* Two Paths::                   Different commands to structure
                                 Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.


File: texinfo-ja.info,  Node: Two Paths,  Next: Node Menu Illustration,  Up: Nodes

6.1 二つのパス
==============

ノードとメニューコマンドと章の構造化コマンドは，専門的にはお互い独立して
います．

   *
     Infoでは，ノードとメニューコマンドは構造を提供しています．章の構造化コマ
     ンドは，下線で区切られた見出しを生成します --
     章ではアスタリスク，セク
     ションではハイフンのようになっています．それ以外は何もしません．

   *
     TeXでは，章の構造化コマンドは章とセクション番号と目次を生成します．ノー
     ドとメニューコマンドは，相互参照の情報を提供します．それ以外は何もしませ
     ん．

ノードポインタとメニューを，Infoファイルを好きなように構造化するために使
用することが可能です．Texinfoファイルで，Info出力が印刷物と異なるように
書くことも可能です．しかし，ほとんど全てのTexinfoファイルは，Info出力の
構造が印刷物の構造に対応するように書かれています．そうしなければ，読者は
不便で理解不能になります．

一般に，印刷物は章が主要な大枝でそこからセクションが枝を出している木のよ
うな階層構造です．同様に，ノードポインタとメニューは，Info出力で一致する
構造を作成するように組織化されています．


File: texinfo-ja.info,  Node: Node Menu Illustration,  Next: node,  Prev: Two Paths,  Up: Nodes

6.2 ノードとメニューの図
========================

前で示した，章が三つでそれぞれが二つのセクションを含むTexinfoファイル図
の，コピーは以下のようになります．

  "root"は図の最上部で，"leaves"が最下部です．これはそのような図を書く
慣習的な方法です．それは，さかさまの木を描きます．このため，ルートノード
は`Top'ノードと呼ばれ，`Up'ノードはルートに近い方向へ導きます．

                                       Top
                                        |
                  ---------------------------------------------
                 |                      |                      |
                1 章                   2 章                   3 章
                 |                      |                      |
            -----------            -----------            -----------
           |           |          |           |          |           |
      セクション  セクション セクション  セクション セクション  セクション
          1.1         1.2        2.1         2.2        3.1         3.2

  二章を開始するため，完全に書かれたコマンドは以下のようになります．

     @node     Chapter 2,  Chapter 3, Chapter 1, Top
     @comment  node-name,  next,      previous,  up

この`@node'行は，このノード名が"Chapter 2"で，`Next'ノードが "Chapter
3"で，`Previous'ノードが"Chapter 1"で，`Up'ノードが"Top"
だということを告げています．ドキュメントが階層的に組織化されている場合
(*note makeinfo Pointer Creation::)，これらのノード名を書くことを省略可
能ですが，ポインタの関係は得られます．

     *注意してください:*`Next'は，マニュアルで同じ階層レベルの次のノー
     ドを参照し，それは，Texinfoファイル内での次のノードである必要はありませ
     ん．Texinfoファイルでは，次のノードは下のレベルかもしません --
     例えば，
     セクションレベルノードは，章レベルのノードに続くことが多くあります．
     `Next' と`Previous'は，_同じ_階層レベルのノードを参照します．(`Top'
     ノードはこの規則の例外です．`Top'ノードはそのレベルでの唯一のノードなの
     で，`Next'は，以下にある最初のノードを参照し，それは通常，章や章レベルの
     ノードです．)

Infoを使用して，セクション2.1と2.2に行くため，2章の内部にメニューが必要
です．(*Note
Menus::.)以下のように，セクション2.1をはじめる前に，メニュー
を書きます．

        @menu
        * Sect. 2.1::    Description of this section.
        * Sect. 2.2::
        @end menu

  セクション2.1に対して，以下のように書いてください．

        @node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
        @comment  node-name, next,      previous,  up

Info書式では，ノードの`Next'と`Previous'ポインタは通常，同じレベルの他の
ノードへ導きます -- 章から章や，セクションからセクションのようになりま
す(ここまで見てきたように，`Previous'ポインタが上を指すこともあります)．
`Up'ポインタは通常，上のレベルのノードへ導きます(`Top'ノードに近い方向で
す)．`Menu'は下のレベルのノードへ導きます(`leaves'に近い方向です)．(相互
参照は，あらゆるレベルのノードを指し示します．*Note Cross
References::を参 照してください．)

  通常，`@node'コマンドと章の構造化コマンドは，索引コマンドと一緒に
順番に使用されます．(`@node'行に，指し示すものを覚えておくためのコ
メント行を続けてもかまいません．)

  このマニュアルの"Ending a Texinfo File"と呼ばれる章の最初は以下のよう
になっています．これには，`@node'行，それに続くコメント行，
`@chapter'行，そして索引行があります．

     @node    Ending a File, Structuring, Beginning a File, Top
     @comment node-name,     next,        previous,         up
     @chapter Ending a Texinfo File
     @cindex Ending a Texinfo file
     @cindex Texinfo file ending
     @cindex File ending


File: texinfo-ja.info,  Node: node,  Next: makeinfo Pointer Creation,  Prev: Node Menu Illustration,  Up: Nodes

6.3 `@node'コマンド
===================

"ノード(node)"とは，`@node'コマンドで始まり，次の`@node'
コマンドまで続くテキストの塊です．ノードの定義は章やセクションとは異なり
ます．章にセクションを含めてもかまいませんし，セクションにサブセクション
を含めてもかまいません．しかし，ノードにサブノードを含めることは不可能で
す．ノードのテキストは，ファイルの次の`@node'コマンドまで続くだけ
です．ノードは通常，章の構造化コマンドを一つだけ含み，それは
`@node'行に続けます．一方，印刷物ではノードは相互参照としてのみ使
用されるので，章やセクションに複数のノードを含めてもかまいません．実際，
章は通常，それぞれのセクション，サブセクション，そしてサブサブセクション
となる複数のノードを含んでいます．

  ノードを作成するため，`@node'コマンドを行の最初に書き，カンマで分
離した四つの引数を同じ行の残りに続けてください．最初の引数は必要です．そ
れはノードの名前です．次の引数は，順番で，`Next'，`Previous'，そして`Up'
ポインタの名前で，Texinfoドキュメントが階層的に組織化されている場合，省
略可能です(*note makeinfo Pointer Creation::)．

好みにより，それぞれの名前の前にスペースを挿入してもかまいません．スペー
スは無視されます．ノードの名前と，(存在する場合は)`Next'，`Previous'，そ
して`Up'ポインタの名前をすべて同じ行に書く必要があります．そうしない場合，
書式化は失敗します．(Infoのノードの詳細は，*note info: (info-ja)Top.)

  通常，章の構造化コマンド行を`@node'の直後に書き，例えば，それは
`@section'や`@subsection'です．(*Note Structuring Command Types::.)

     *注意してください:*GNU Emacs Texinfoモードの更新コマンドは，
     `@node'行が章の構造化コマンドに続いているTexinfoファイルでのみ動作
     します．*Note Updating Requirements::.

  TeXでは，相互参照で使用する名前を識別するために`@node'行を使用
します．このため，`@node'行を印刷のための書式化を行いたいTexinfo
ファイルに，たとえInfoで書式化するつもりがなくても書く必要があります．
(相互参照は，この文章の終りにあるようなもので，`@xref'とそれに関連
するコマンドで作成されます．*Note Cross
References::を参照してください．)

* Menu:

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an `@node' line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the `@top' command.


File: texinfo-ja.info,  Node: Node Names,  Next: Writing a Node,  Up: node

6.3.1 ノードとポインタの名前の選択
----------------------------------

ノード名はノードの識別子です．ポインタで他のノードに行くことが可能で，そ
れは単純にこれらのノード名から成り立っています．

通常，ノードの`Up'ポインタは，そのノードを記述しているメニューがあるノー
ドの名前を含みます．ノードの`Next'ポインタは，メニューでそのノードの次の
ノード名を含み，`Previous'ポインタは，メニューでそのノードの前のノード名
を含みます．ノードの`Previous'ノードが`Up'ノードと同じとき，両方のノード
は同じノード名を示します．

通常，Texinfoファイルの最初のノードは`Top'ノードで，その`Up'と`Previous'
ポインタは`dir'ファイルを指し示し，それはInfo全てのメインメニューを
含んでいます．

`Top'ノード自身は，マニュアルのメインまたはマスターメニューを含みます．
また，`Top'ノードに簡単なマニュアルの記述を含めると役に立ちます．Texinfo
ファイルの最初のノードの書き方の詳細は，*Note First Node::.

明示的に全てのポインタを指定したときでも，任意の順番でTexinfoソースファ
イルにノードを書くことができるということを意味するわけではありません！
TeXは，ノードポインタにかかわらずファイルを順番に処理するので，印刷物
に現したい順番にノードを書く必要があります．


File: texinfo-ja.info,  Node: Writing a Node,  Next: Node Line Tips,  Prev: Node Names,  Up: node

6.3.2 `@node'行の書き方
-----------------------

`@node'行の最も簡単な書き方は，`@node'を行の最初に書き，その
後にノード名を以下のように書く方法です．

     @node NODE-NAME

  GNU
Emacsを使用している場合，ポインタ名を挿入するために，Texinfoモードで
ノードの更新コマンドが提供されています．また，ポインタをTexinfoファイル
の外に置き，`makeinfo'でノードポインタを作成するInfoファイルに挿入
することも可能です．(*Note Texinfo Mode::.  また*Note makeinfo Pointer
Creation::を参照してください．)

代わりに，`Next'，`Previous'，そして`Up'ポインタを独自に挿入することも可
能です．こうする場合，Texinfoモードでキーボードコマンドの`C-c C-c n'
を使用すると便利だと思います．このコマンドは，`@node'と，適切な順
番でポインタ名をリストアップしたコメント行を挿入します．コメント行は，引
数がどのポインタに対するものかを，追跡記録するのに役立ちます．このコメン
ト行は，Texinfoに精通していない場合，特に便利です．

`Next'，`Previous'，そして`Up'ポインタがある，完全に書かれたノード行のテ
ンプレートは以下のようになります．

     @node NODE-NAME, NEXT, PREVIOUS, UP

  希望があれば，初稿では`@node'行を完全に無視することが可能で，その
後で`texinfo-insert-node-lines'コマンドを`@node'行を作成する
ために使用してください．しかし，この方法はお勧めしません．その部分を書く
と同時にそれ自身のノードに名前を付ける方が良く，そうすることで相互参照を
作成しやすくなります．相互参照が多数あることは，良いInfoファイルの特徴と
して特に重要です．

  `@node'行を挿入した後，すぐに@-コマンドを章やセクションに対し書き，
名前を挿入するべきです．次に(これが肝心！)，いくつかの索引項目を書いてく
ださい．通常，少なくとも二つ書き，索引でノードを参照する方法として，四つ
または五つあることもよくあります．これで，人々がノードをより容易に見つけ
られるようになります．


File: texinfo-ja.info,  Node: Node Line Tips,  Next: Node Line Requirements,  Prev: Writing a Node,  Up: node

6.3.3 `@node'行の助言
---------------------

ここに三つの提案があります．

   * 有益だが短いノード名を選んでみてください．

     Infoファイルでは，ファイル名，ノード名，そしてポインタ名は全て一行に挿入
     され，それはウィンドウの右端まで行くかもしれません．(これは，Infoの問題
     ではありませんが，醜いです．)

   *
     名前の始まりが他とは違うノード名を選んでみてください．これで，Infoの自動
     的な名前補完が使用しやすくなります．

   * 慣習的に，ノード名は，セクションや章のタイトルで --
     最初と重要な単語が 大文字になるように --
     大文字になります．他は違います．


File: texinfo-ja.info,  Node: Node Line Requirements,  Next: First Node,  Prev: Node Line Tips,  Up: node

6.3.4 `@node'行の必要事項
-------------------------

`@node'行でいくつかある必要事項は以下のようなものです．

   *
     全てのノード名は，単一のInfoファイルで唯一のものとする必要があります．

     重複するとInfo移動コマンドで混乱します．例えば，概要で全ての章を終える場
     合，それぞれの概要のノードを異なる名前にする必要があるという意味です．そ
     れぞれを一つの"概要"とすることはできません．しかし，章，セクション，そ
     してそれに類するもののタイトルは重複してもかまいません．このため，これら
     のセクションに対するノード名が全て異なっている限り，本のそれぞれの章を
     "概要"というセクションで終えることが可能です．

   * ポインタ名は，ノード名にする必要があります．

     ポインタが示すノードは，そのポインタを含むノードの前でも後でもかまいませ
     ん．

   * ノード名での@-コマンドは許可されていません，これには，`@'と
     `{'のような，`@'でエスケープされている句読点文字が含まれます．
     (これが役に立つときは滅多にないので，Texinfoではノード名で@-コマンド
     を使用することに対するサポートに制限があります．*Note Pointer
     Validation:: を参照してください．)

   * `(foo)bar'のようなノード名は，InfoリーダーがInfoファイル`foo'
     にあるノード`bar'だと解釈するので，ノード名でカッコを使用することは
     できません．

   * 残念ながら，ピリオド，カンマ，コロン，またはアポストロフィをノード名に使
     用することはできません．これらでTeXやInfoフォーマッタが混乱します．

     例えば，以下はこのマニュアルのセクションのタイトルです．

          @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}

     しかし，対応するノード名にはカンマと@がありません．

          unnumberedsec appendixsec heading

   * 大文字小文字の区別は重要です．


File: texinfo-ja.info,  Node: First Node,  Next: makeinfo top command,  Prev: Node Line Requirements,  Up: node

6.3.5 最初のノード
------------------

Texinfoファイルの最初のノードは，インクルードファイルは例外として
(*note Include Files::)，"トップ(Top)"ノードです．トップノードには，
ドキュメントの短い概要，コピーの許可，そしてマスターメニューを含めるべき
です．Topノードの内容と例の詳細は，*Note The Top Node::.

  Topノードで使用されているノードポインタの記述は以下のようになります．

   * トップノードは(`top'または`Top'と命名する必要があり)，`Up'ノー
     ドとして他のファイルのノード名を持つべきで，それはこのファイルへ導くメ
     ニューがあります．カッコでファイルを指定してください．

     通常，すべてのInfoファイルは，同じInfoディレクトリツリーにインストールさ
     れます．この状況では，Topノードの親として`(dir)'を使用してください．
     これは`(dir)top'を短くしたもので，`dir'のTopノードを指定し，そ
     れにはInoシステム全体のメインメニューが含まれています．

   * 一方，ユーザに対し動作が紛らわしいので，トップノードの`Previous'ノードを
     `(dir)'で定義しないでください．トップノードにいて，そこから戻るため
     に<DEL>を押した場合，`dir'ファイルの他の項目の真ん中に戻るので
     すが，それは読みたいものではないはずです．

   * Topノードの`Next'ノードは，ドキュメントの最初の章にすべきです．


  Infoファイルの`info'ディレクトリへのインストールの詳細は， *Note
Installing an Info File::.

具体的には，明示的なポインタを示す例は以下のようになります(texinfoモード
のコマンドで自動的に管理することが可能です)．

または，ポインタを完全に無くし，ツールに暗黙的に定義させることも可能です．
これは推奨されます．このため以下のようにします．

     @node Top


File: texinfo-ja.info,  Node: makeinfo top command,  Prev: First Node,  Up: node

6.3.6 `@top'セクションコマンド
------------------------------

特別なセクションコマンド`@top'は，`@node Top'行とともに使用
すべきです．`@top'セクションコマンドは，それがファイルの`Top'ノー
ドだという印を付けるよう`makeinfo'に伝えます．それは，ノードポイン
タを自動的に挿入するために`makeinfo'が必要とする情報を提供します．
`@top'コマンドを行の最初に書き，直後に`@node Top'行を続けて
ください．`@top'コマンドと同じ行の残りの部分にタイトルを書いてくだ
さい．

  Infoでは，`@top'セクションコマンドは，タイトルが単独行に現れるよう
にし，他のセクションコマンドと同様にアスタリスクを下に挿入します．

  TeXと`texinfo-format-buffer'では，`@top'セクションコマンド
は`@unnumbered'とほとんど同義語です．これらのフォーマッタは，
`@top'コマンドを要求せず，特別なことは何もしません．これらのフォー
マッタを使用するとき，`@chapter'や`@unnumbered'を `@node
Top'行の後に使用することも可能です．また，ポインタとメニュー
を作成更新するため，Texinfo更新コマンドを使用する時に`@chapter'や
`@unnumbered'を使用することも可能です．

  このため，具体的には，Topノードは以下のようにして開始します．

     @node Top
     @top Your Manual Title


File: texinfo-ja.info,  Node: makeinfo Pointer Creation,  Next: anchor,  Prev: node,  Up: Nodes

6.4 `makeinfo'でポインタを作成する
==================================

`makeinfo'プログラムは，階層的に組織化されているファイルに対し，自
動的にノードポインタを定義する機能があります．

この機能を利用するとき，`Next'，`Previous'，そして`Up'ポインタを，ノード
名の後に書く必要がありません．しかし，`@chapter'や`@section'
のようなセクションコマンドを，それぞれの切り詰めた`@node'行の直後
の行に書く必要があります(例外は，コメント行が間に入ることです)．

  さらに，`Top'`@node'行に，ファイルの`Top'ノードに印を付ける
`@top'で始まる行を続ける必要があります．*Note `@top': makeinfo top.

最後に，(`Top'ノード以外の)それぞれのノード名を，ノードの階層レベルの上
に，一つかそれ以上の階層レベルとなるメニューに書く必要があります．

  この`makeinfo'のノードポインタ挿入の機能は，手動やTexinfoモードのコ
マンドでメニューやポインタを更新する必要から開放します．(*Note Updating
Nodes and Menus::.)

ほとんどの状況で，この機能の利点を利用し，冗長にノードポインタを指定した
くはないでしょう．しかし，Texinfoドキュメントは，階層的に組織化されてい
ることや実際にセクションコマンドが完全に含まれていることを要求していませ
ん．例えば，印刷を目的としていないドキュメントの場合です．これらの状況で
は，明示的にポインタを指定する必要があります．


File: texinfo-ja.info,  Node: anchor,  Prev: makeinfo Pointer Creation,  Up: Nodes

6.5 `@anchor':相互参照のターゲット任意に定義する
================================================

"アンカー(anchor)"は，相互参照が参照可能な，まるでノードのようなドキュ
メント内の位置です．`@anchor'コマンドでアンカーを作成し，普通のカッ
コで分離された引数としてラベルを与えます．例えば，以下のようになります．
     This marks the @anchor{x-spot}spot.
     ...
     @xref{x-spot,,the spot}.

以下を生成します．

     This marks the spot.
     ...
     See [the spot], page 1.

  御覧のように，`@anchor'コマンド自身は出力を生成しません．この例は
アンカー`x-spot'だけを，単語`スポット'の直前に定義します．その後で，後述
の`@xref'や，その他の相互参照を使用して参照することが可能になりま
す．相互参照の詳細は，*Note Cross References::.

  `@anchor'コマンドを参照する位置の直前に置くのが最善です．そうする
ことで，読者の目はアンカーにジャンプしたとき正しいテキストに導かれます．
`@anchor'コマンドを単独行に置くことでソースの可読性が改善される場
合は，そうすることもできます．`@anchor'後のスペースは常に無視され ます．

アンカー名とノード名は衝突してはいけません．アンカーとノードは同じように
扱われることもあります．例えば，スタンドアローンInfoの`goto-node'コ
マンドは，アンカー名やノード名を引数としてとります． (*Note goto-node:
(info-stnd-ja)goto-node.)


File: texinfo-ja.info,  Node: Menus,  Next: Cross References,  Prev: Nodes,  Up: Top

7 メニュー
**********

"メニュー(Menus)"は，従属的なノードへのポインタを含みます． (1) (*note
Menus-Footnote-1::)Infoで
は，メニューをそのようなノードへ行くために使用します．メニューは印刷され
たマニュアルで効果がなく，それらには現れません．

慣習で，メニューを使用する読者がそれ以降のテキストを見ない可能性があるの
で，メニューはノードの終りに置かれます．さらに，メニューがあるノードは多
くのテキストを含むべきではありません．多くのテキストとメニューがある場合
は，テキストのほとんどを -- 数行以外全て -- 新しいサブノードに移動して
ください．そうしない場合，数行しか表示できない端末を使用している読者は，
メニューとそれに関連するテキストが見えません．実際問題として，メニューは
ノードの最初の20行以内に配置すべきです．

* Menu:

* Menu Location::               Put a menu in a short node.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.


File: texinfo-ja.info,  Node: Menus-Footnotes,  Up: Menus

  (1) メニューでは，階層構造にかかわらずあらゆるノードへ行くことがで
きます．異なるInfo ファイルのノードへ行くことすら可能です．しかし，GNU
Emacs Texinfoモードの更新コマンドは，従属的なノードのメニューしか作成し
ません．慣習で，相互参照は他のノードへの参照のために使用します．


File: texinfo-ja.info,  Node: Menu Location,  Next: Writing a Menu,  Prev: Menus,  Up: Menus

Menus Need Short Nodes
======================

短いノードが必要なメニュー
==========================

メニューの前の短いテキストは，印刷されたマニュアルで不様に見えるかもしれ
ません．これを避けるため，メニューをそのノードの最初の方に書き，メニュー
を`@node'行で続け，その後で`@heading'行を`@ifinfo'と `@end
ifinfo'の間に書くことが可能です．こうすることで，
`@node'行のメニューとタイトルはInfoファイルでしか現れず，印刷され
たドキュメントには現れません．

  例えば，前の二つの段落は，Infoのみのメニュー`@node'行と見出しが続き，
以下のように見えます．

     @menu
     * Menu Location::             Put a menu in a short node.
     * Writing a Menu::            What is a menu?
     * Menu Parts::                A menu entry has three parts.
     * Less Cluttered Menu Entry:: Two part menu entry.
     * Menu Example::              Two and three part entries.
     * Other Info Files::          How to refer to a different
                                    Info file.
     @end menu

     @node Menu Location, Writing a Menu, , Menus
     @ifinfo
     @heading Menus Need Short Nodes
     @end ifinfo

このドキュメントのTexinfoファイルは，1ダース以上のこの手続きの例を含んで
います．一つはこの章の最初にあります．もう一つはこの章の最初にあります．


File: texinfo-ja.info,  Node: Writing a Menu,  Next: Menu Parts,  Prev: Menu Location,  Up: Menus

7.1 メニューを書く
==================

メニューは，単独行の`@menu'コマンドと，それに続く項目行やメニュー
コメント行と，その後の単独行の`@end menu'コマンドから成り立ちます．

  メニューは，以下のようになります．

     @menu
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.
     @end menu

  メニューでは，`* 'で始まる全ての行は"メニュー項目(menu
entry)"です．(アスタリスクの後のスペースに注意してください．)`* 'で始まらない行もメニューに現すこともできます．そのような行はメニュー項
目ではなく，Info ファイルに現れるメニューのコメント行になります．上記の
例では，`Larger Units of Text'はメニューのコメント行です．
`* 'で始まる二行はメニュー 項目です．メニューのスペース文字はそのまま維持されます．これで，メニュー
を望み通りに書式化できます．


File: texinfo-ja.info,  Node: Menu Parts,  Next: Less Cluttered Menu Entry,  Prev: Writing a Menu,  Up: Menus

7.2 メニューの部品
==================

メニュー項目は，三つの部品があり，二番目のみ必要です．

  1. メニュー項目名(オプション)．

  2. ノード名(必須)．

  3. 項目の記述(オプション)．

  メニュー項目のテンプレートは以下のようになります．

     * MENU-ENTRY-NAME: NODE-NAME.   DESCRIPTION

メニュー項目名に，一つのコロンを続け，ノード名にタブ，カンマ，ピリオド，
または改行を続けてください．

  Infoでは，ユーザはノードを`m'(`Info-menu')コマンドで選択します．
メニュー項目名は，ユーザが`m'コマンドの後で入力するものです．

メニュー項目の三番目の部分は記述的な句または文です．メニュー項目名とノー
ド名は短い場合が多くなります．記述は，読者に何について書かれているノード
かを説明します．役立つ記述は，繰り返しではなくノード名への補完になります．
追加の記述は，二行以上に分けることができます．そうする場合，著作者は最初
(と他の全て)と同列にするより，二行目を字下げするほうを好みます．それはお
好みでお願いします．


File: texinfo-ja.info,  Node: Less Cluttered Menu Entry,  Next: Menu Example,  Prev: Menu Parts,  Up: Menus

7.3 バラバラでないメニュー項目
==============================

メニュー項目名とノード名が同じとき，行の最初でアスタリスクとスペースの直
後に名前を書き，名前に二つのコロンを続けることが可能です．

  例えば，以下のように書きます．

     * Name::                                    DESCRIPTION

以下の代わりです．

     * Name: Name.                               DESCRIPTION

メニューが見た目バラバラに散らばるので，可能な場合はノード名をメニュー項
目名として使用すべきです．


File: texinfo-ja.info,  Node: Menu Example,  Next: Other Info Files,  Prev: Less Cluttered Menu Entry,  Up: Menus

7.4 メニューの例
================

Texinfoでは，メニューは以下のようになります．

     @menu
     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.
     @end menu

これは，以下を生成します．

     * menu:

     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.

  Texinfoファイルで見られる例は以下のようになります．

     @menu
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.
     @end menu

これは，以下を生成します．

     * menu:
     Larger Units of Text

     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                      several files at once.

  この例ではメニューに二つの項目があります．`Files'はメニュー項目とそ
の名前で参照されるノード名です．`Multiples'はメニュー項目名です．そ
れは，`Buffers'という名前のノードで参照します．`Larger Units of
Text'はコメントです．それはメニューには現れますが項目ではありません．

  `Files'や`Buffers'でファイル名が指定されていないので，それらは
同じInfoファイルでのノード名にする必要があります．(*note Referring to
Other Info Files: Other Info Files.)．


File: texinfo-ja.info,  Node: Other Info Files,  Prev: Menu Example,  Up: Menus

7.5 他のInfoファイルへの参照
============================

ノード名の直前のカッコにファイル名を書くことで，Infoの読者が他のInfoファ
イルのノードへ行くことを可能にするメニュー項目を作成することが可能です．
この場合，三つの部分のメニュー項目の書式を使用するべきで，それで読者はファ
イル名を入力することを省略できます．

  書式は，以下のようになります．

     @menu
     * FIRST-ENTRY-NAME:(FILENAME)NODENAME.     DESCRIPTION
     * SECOND-ENTRY-NAME:(FILENAME)SECOND-NODE. DESCRIPTION
     @end menu

  例えば，`Emacs Manual'で直接`Outlining'と`Rebinding'ノー
ドを参照するため，メニューを以下のように書きます．

     @menu
     * Outlining: (emacs)Outline Mode. The major mode for
                                      editing outlines.
     * Rebinding: (emacs)Rebinding.    How to redefine the
                                      meaning of a key.
     @end menu

ノード名をリストアップせずファイル名だけにする場合，Infoは`Top'ノードを
参照しているものと推測します．

  Infoのメインメニューを含む`dir'ファイルには，ファイル名のみを列挙し
たメニュー項目があります．これで，それぞれのInfoドキュメントの`Top'ノー
ドへ直接行くことができます(*note Installing an Info File::)．

  例えば，以下のようになります．

     * Info: (info).         Documentation browsing system.
     * Emacs: (emacs).       The extensible, self-documenting
                            text editor.

(Infoシステムのための`dir'のトップレベルディレクトリは，Texinfoファ
イルではなくInfoファイルですが，メニュー項目はどちらの形式のファイルでも
同じように見えます．)

  GNU Emacs
Texinfoモードでのメニュー更新コマンドは，現在のバッファのノー
ドでのみ動作するので，他のファイルを参照するメニューを作成するために使用
することは不可能です．そのようなメニューは手で書く必要があります．


File: texinfo-ja.info,  Node: Cross References,  Next: Marking Text,  Prev: Menus,  Up: Top

8 相互参照
**********

"相互参照(Cross references)"は，同じまたは異なるTexinfoファイルの他
の部分へ読者を導くために使用します．Texinfoでは，ノードとアンカーが相互
参照が参照する場所です．

* Menu:

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.


File: texinfo-ja.info,  Node: References,  Next: Cross Reference Commands,  Prev: Cross References,  Up: Cross References

What References Are For
=======================

参照されるもの
==============

いつもではありませんが，ほとんどの印刷されたドキュメントは順番に読むよう
に設計されています．人々は，必要なとき提出されるべき情報を見つけるために，
前後にページをめくるのが嫌になります．

しかしドキュメントには，現在の文脈に対しては詳しすぎたり主要でなかったり
する情報もあります．そのような情報へのアクセスを提供するため相互参照を使
用してください．また，オンラインヘルプシステムやリファレンスマニュアルは．
小説とは異なります．そのようなドキュメントを最初から最後まで順番に読む人
はほとんどいません．代わりに，人々は必要なところを拾い読みします．このた
め，そのようなものでは，読者が読まなかった可能性のある他の情報を見つける
とき役に立つ相互参照を多く含めるべきです．

印刷されたマニュアルでは，完全に他のマニュアルでない限り，相互参照は結果
としてページ参照となり，他のマニュアルの場合は相互参照はマニュアルの名前
になります．

  Infoでは，相互参照は結果としてInfoの`f'コマンドに続いて使用可能な項
目となります．(*note Some advanced Info commands: (info)Help-Adv.)

  様々な相互参照コマンドは，ノード(やアンカー *note `@anchor':
anchor.)を相互参照の位置を定義するために使用しま
す．これはInfoの環境の話で，そこでの相互参照は指定した場所に移動します．
TeXもノードを相互参照の位置を定義するために使用しますが，動作は明白で
はありません．TeXがDVIファイルを生成するとき，それは，それぞれのノー
ドのページを記録し参照を作成する際にページ番号を使用します．このため，印
刷されるだけのマニュアルを書くだけでオンラインで使用しない場合でさえ，相
互参照する場所に名前をつけるために`@node'行を書く必要があります．


File: texinfo-ja.info,  Node: Cross Reference Commands,  Next: Cross Reference Parts,  Prev: References,  Up: Cross References

8.1 様々な相互参照コマンド
==========================

四つの様々な相互参照のコマンドがあります．

`@xref'
     印刷されたマニュアルでの`See ...'や，Infoでの相互参照の `*Note
     NAME: NODE.'を告げる文を開始するために使用されま す．

`@ref'
     文中や主に文の最後で使用します．Infoでは`@xref'と同じです．印刷さ
     れたマニュアルでは参照だけを生成し，前に`See'を生成しません．

`@pxref'
     Infoファイルや印刷された本に適した参照を生成するためカッコ内で使用します．
     印刷されたマニュアルでは小文字の`see'で始まります．(`p'は
     `parenthesis'です．)

`@inforef'
     Infoファイルでの参照を作成するために使用し，印刷されたマニュアルにはあり
     ません．

(`@cite'コマンドは，Infoと関係の無い本やマニュアルへの参照を作成す
るために使用され，それゆえ，指し示すノードはありません．*Note `@cite':
cite.)


File: texinfo-ja.info,  Node: Cross Reference Parts,  Next: xref,  Prev: Cross Reference Commands,  Up: Cross References

8.2 相互参照の部品
==================

相互参照のコマンドは一つの引数のみを要求し，それは参照するノード名です．
しかし，相互参照コマンドは四つの追加の引数を含むことができます．これらの
引数を使用することで，Infoに対する相互参照名，トピックの記述や印刷物での
セクションのタイトル，異なるInfoファイルの名前，そして異なる印刷されたマ
ニュアルの名前を提供することが可能になります．

  簡単な相互参照の例は以下のようになります．

     @xref{Node name}.

これは，以下を生成します．

     *Note Node name::.

そして，以下を生成します．

     See Section NNN [Node name], page PPP.

  完全な五つの部分を持つ相互参照は以下のようになります．

     @xref{Node name, Cross Reference Name, Particular Topic,
     info-file-name, A Printed Manual}, for details.

これは，以下を生成します．

     *Note Cross Reference Name: (info-file-name)Node name,
     for details.

Infoではこうなります．

     See section "Particular Topic" in A Printed Manual, for details.

印刷された本ではこうなります．

  相互参照に対する五つの利用可能な引数は，以下の通りです．

  1.
     ノードやアンカー名です(必須)．これは，相互参照がたどっていく場所です．印
     刷されたドキュメントでは，ノードの場所は同じドキュメント内を参照するため
     だけのページ参照を提供します．

  2.
     相互参照名がノード名と異なっている場合のInfo参照に対する相互参照名です．
     この引数を含める場合，それは相互参照の最初の部分になります．通常省略され
     ます．

  3.
     トピックの記述やセクション名です．これはよくセクションのタイトルになりま
     す．これは印刷されたマニュアルでの参照名として使用されます．省略された場
     合，ノード名が使用されます．

  4.
     参照先が現在のファイルと異なる場合，参照先があるInfoファイル名です．Info
     リーダは自動的に追加するので，ファイル名の`.info'接尾子は不要です．

  5. 異なるTexinfoファイルで印刷されたマニュアル名です．

  完全な五つの引数を持つ相互参照のテンプレートは，以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC,
     INFO-FILE-NAME, PRINTED-MANUAL-TITLE}.

  一つ，二つ，三つ，四つ，そして五つの引数を持つ相互参照は，`@xref'
の記述に続けて，別々に記述されます．

  相互参照では，`@node'行と正確に同じ方法で，同じように大文字小文字
を使用して，ノード名を書いてください．そうしない場合，フォーマッタは参照
を見つけることができません．

  段落で相互参照を書くこともできますが，InfoとTeXが，それぞれの様々なコ
マンドの出力をどのようにして書式化するのかに注意してください．それは，
`@xref'を文の最初に書く．`@pxref'をカッコ内でのみ書くなどで す．


File: texinfo-ja.info,  Node: xref,  Next: Top Node Naming,  Prev: Cross Reference Parts,  Up: Cross References

  `@xref'コマンドは文の最初での相互参照を生成します．Info書式化コマ
ンドはそれをInfo相互参照に変換し，Infoの`f'で他のノードへ直接行くこ
とが可能です．TeX植字コマンドは，それをページ参照や他の本やマニュアル
への参照に変換します．

* Menu:

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with four and five arguments.


File: texinfo-ja.info,  Node: Reference Syntax,  Next: One Argument,  Prev: xref,  Up: xref

参照のように見えるものと必要条件
--------------------------------

  よくあるInfo相互参照は，以下のようになります．

     *Note NODE-NAME::.

または，以下のようになります．

     *Note CROSS-REFERENCE-NAME: NODE-NAME.

TeXでは，相互参照は以下のようになります．

     See Section SECTION-NUMBER [NODE-NAME], page PAGE.

または，以下のようになります．

     See Section SECTION-NUMBER [TITLE-OR-TOPIC], page PAGE.

  `@xref'コマンドは，Infoファイルや印刷物でピリオドやカンマを相互参
照の終りに生成しません．ピリオドやカンマは自分で書く必要があります．
(1) (*note Reference Syntax-Footnote-1::)そうしない場合，参照の
終りを認識しません．(`@pxref'コマンドは異なる動作をします． *Note
`@pxref': pxref.)

     *注意してください:*ピリオドやカンマを，`@xref'に続ける
     *必要があります*．相互参照の終了で要求されます．このピリオドやカ
     ンマは，Infoファイルと印刷されたマニュアルの両方の出力に現れます．


  `@xref'はInfoをノード名で参照する必要があります．`@node'をノー
ドの定義に使用してください(*note Writing a Node::)．

  `@xref'はカッコ内に，カンマで分けられたいくつかの引数が続きます．
これらのカンマの前後の空白は無視されます．

相互参照はノード名のみ必要です．しかし，それは最大四つまで追加引数を含む
ことができます．これらの変数はそれぞれ，幾分異なるように見える相互参照を
生成します．

     *注意してください:*カンマは相互参照で引数を分離します．フォーマッ
     タがそれらをセパレータと間違えないように，タイトルや他の部分にそれらを含
     めるのを避けてください．


File: texinfo-ja.info,  Node: Reference Syntax-Footnotes,  Up: Reference Syntax

  (1) 訳注:日本語では句読点はカンマやピリオドではありません．この翻
訳では，全角のカンマとピリオドを使用しています．


File: texinfo-ja.info,  Node: One Argument,  Next: Two Arguments,  Prev: Reference Syntax,  Up: xref

8.2.1 一つの引数を用いた`@xref'
-------------------------------

`@xref'の最も簡単な形式は，同じInfoファイルの他のノード名を一つの引
数として持つものです．Infoフォーマッタは，Infoリーダが参照へジャンプでき
る出力を生成します．TeXはページとセクション番号を指定する出力を生成し
ます．

例えば，以下のようにします．

     @xref{Tropical Storms}.

これは，以下を生成します．

     *Note Tropical Storms::.

そして，以下を生成します．

     See Section 3.1 [Tropical Storms], page 24.

(前の例では，閉じカッコにピリオドが続くことに注意してください．)

  相互参照の後に，以下のように文節を書くことが可能です．

     @xref{Tropical Storms}, for more info.

それは，以下を生成します．

     *Note Tropical Storms::, for more info.

そして，以下を生成します．

     See Section 3.1 [Tropical Storms], page 24, for more info.

(前の例では，閉じカッコはカンマと文節が続き，それにはピリオドが続くこと
に注意してください．)


File: texinfo-ja.info,  Node: Two Arguments,  Next: Three Arguments,  Prev: One Argument,  Up: xref

8.2.2 二つの引数を用いた`@xref'
-------------------------------

二つの引数を用いた場合，二番目はInfo相互参照の名前として使用され，一方，最
初のものは相互参照が示すノード名のままです．

テンプレートは以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME}.

例えば，以下のようにします．

     @xref{Electrical Effects, Lightning}.

以下を生成します．

     *Note Lightning: Electrical Effects.

そして，以下を生成します．

     See Section 5.2 [Electrical Effects], page 57.

(前の例では，閉じカッコはピリオドが続き，ノード名が印刷され，相互参照は印
刷されないことに注意してください．)

  相互参照の後に，以下のように文節を続けることができます．

     @xref{Electrical Effects, Lightning}, for more info.

以下を生成します．
     *Note Lightning: Electrical Effects, for more info.

そして，以下を生成します．

     See Section 5.2 [Electrical Effects], page 57, for more info.

(前の例では，閉じカッコはカンマと文節が続き，それにはピリオドが続くことに
注意してください．)


File: texinfo-ja.info,  Node: Three Arguments,  Next: Four and Five Arguments,  Prev: Two Arguments,  Up: xref

8.2.3 三つの引数を用いた
------------------------

三番目の引数は，TeX出力のノード名を置換します．三番目の引数は，印刷物
でのセクション名にするか，セクションで述べられているトピックを述べるべき
です．参照を印刷したとき読みやすいように，頭文字を大文字にしたいことも多
いでしょう．構文や意味としてノード名が適切でないときは，三番目の引数を使
用してください．

相互参照のタイトルやトピックや，その他のあらゆるセクションで，カンマの配
置を避けることを覚えておいてください．フォーマッタは，カンマに従い引数の
相互参照を分けます．タイトルやセクションのカンマは，それを二つの引数に分
けます．参照では，タイトルをカンマ無しで"Clouds, Mist, and Fog"のよう
に書く必要があります．

  また，相互参照を終了するために，カンマやピリオドを`@xref'の閉じカッ
コの後に書くことを覚えておいてください．以下の例では，文節が終端のカンマ
に付きます．

テンプレートは以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC}.

例えば，以下のようにします．

     @xref{Electrical Effects, Lightning, Thunder and Lightning},
     for details.

以下を生成します．

     *Note Lightning: Electrical Effects, for details.

そして，以下を生成します．

     See Section 5.2 [Thunder and Lightning], page 57, for details.

三番目の引数が与えられていて，二番目が空の場合，三番目の引数が両方に与え
られます．(二つのカンマが並んで，二番目の引数が空だということを示してい
る方法に注意してください．)

     @xref{Electrical Effects, , Thunder and Lightning},
     for details.

以下を生成します．

     *Note Thunder and Lightning: Electrical Effects, for details.

そして，以下を生成します．

     See Section 5.2 [Thunder and Lightning], page 57, for details.

実際問題として，ノード名とセクションタイトルが同じ場合は，相互参照を最初
の引数で書き，ノード名とタイトルが異なる場合は，一番目と三番目の引数で書
くことが最善です．

  `The GNU Awk User's Guide'でいくつかの例は以下のようになっています．

     @xref{Sample Program}.
     @xref{Glossary}.
     @xref{Case-sensitivity, ,Case-sensitivity in Matching}.
     @xref{Close Output, , Closing Output Files and Pipes},
       for more information.
     @xref{Regexp, , Regular Expressions as Patterns}.


File: texinfo-ja.info,  Node: Four and Five Arguments,  Prev: Three Arguments,  Up: xref

8.2.4 四つと五つの引数を用いた`@xref'
-------------------------------------

相互参照では，四番目の引数はリファレンスが現れるファイルと異なるInfoファ
イルのアンカー名を指定し，五番目の引数は印刷されたマニュアルでのそのタイ
トルを指定します．

  カンマやピリオドを，相互参照を終了する`@xref'の閉じカッコに続ける
必要があることを覚えておいてください．以下の例では，終端のカンマに文節が
続きます．

テンプレートは以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC,
     INFO-FILE-NAME, PRINTED-MANUAL-TITLE}.

以下が例です．

     @xref{Electrical Effects, Lightning, Thunder and Lightning,
     weather, An Introduction to Meteorology}, for details.

以下を生成します．

     *Note Lightning: (weather)Electrical Effects, for details.

Infoファイルの名前はカッコで囲まれ，前にノード名があります．

印刷されたマニュアルでは，参照は以下のようになります．

     See section "Thunder and Lightning" in An Introduction to
     Meteorology, for details.

印刷されたマニュアルのタイトルは，イタリック体で植字されます．他のマニュ
アルを参照するときは，相互参照が参照するページをTeXは知ることができな
いので，ページ番号はありません．

  長いバージョンの`@xref'を使用するとき，二番目に引数を省略することも
よくあります．この場合，トピックを記述する三番目に引数はInfoでの相互参照
名として使用されます．

テンプレートは以下のようになります．

     @xref{NODE-NAME, , TITLE-OR-TOPIC, INFO-FILE-NAME,
     PRINTED-MANUAL-TITLE}, for details.

それは，以下を生成します．

     *Note TITLE-OR-TOPIC: (INFO-FILE-NAME)NODE-NAME, for details.

そして，以下を生成します．

     See section TITLE-OR-TOPIC in PRINTED-MANUAL-TITLE, for details.

例えば，以下のようにします．

     @xref{Electrical Effects, , Thunder and Lightning,
     weather, An Introduction to Meteorology}, for details.

以下を生成します．

     *Note Thunder and Lightning: (weather)Electrical Effects,
     for details.

そして，以下を生成します．

     See section "Thunder and Lightning" in An Introduction to
     Meteorology, for details.

滅多にありませんが，単一の印刷されたマニュアルにある他のInfoファイルへ参
照したいときもあります -- それは，複数のTexinfoファイルが同じTeXの実
行に組み込まれるにもかかわらず，別々のInfoファイルを作成するときです．こ
の場合，四番目の引数のみを指定し，五番目はその必要がありません．


File: texinfo-ja.info,  Node: Top Node Naming,  Next: ref,  Prev: xref,  Up: Cross References

8.3 `Top'ノードに名前を付ける
=============================

相互参照では，常にノードを名付ける必要があります．これは，マニュアル全体
を参照するために，`@xref'コマンドの最初の引数として書き込むことで
`Top'ノードを識別する必要があるということを意味します．(これは，メニュー
項目を書く方法と異なります．*Note Referring to Other Info Files: Other
Info Files.を参照してください．)同時に，印刷された相互参照で有意義なセク
ショントピックやタイトルを(単語`Top'の代わりに)提供するために，
`@xref'コマンドの三番目の引数として適切な項目を書く必要があります．

このため，`The GNU Make Manual'への相互参照を作成するために，以下の
ように書いてください．

     @xref{Top, , Overview, make, The GNU Make Manual}.

それは，以下を生成します．

     *Note Overview: (make)Top.

そして，以下を生成します．

     See section "Overview" in The GNU Make Manual.

この例では，`Top'が最初のノード名で，`Overview'がマニュアルの
最初のセクション名です．


File: texinfo-ja.info,  Node: ref,  Next: pxref,  Prev: Top Node Naming,  Up: Cross References

8.4 `@ref'
==========

`@ref'は印刷物で`See'を生成せず，参照のみを生成する以外，
`@xref'とほとんど同じです．これは，文の終りの部分にするとき役に立
ちます．

例えば，以下のようにします．

     For more information, see @ref{Hurricanes}.

以下を生成します．

     For more information, see *Note Hurricanes::.

そして，以下を生成します．

     For more information, see Section 8.2 [Hurricanes], page 123.

  `@ref'コマンドは，著者が表現する方法として，印刷されたマニュアルに
適しているが，Info書式では悪く見えるものを導き出すときもあります．使用者
が印刷物とInfo書式の両方で使用することを心に留めておいてください．

例えば，以下のようにします．

     Sea surges are described in @ref{Hurricanes}.

以下を生成します．

     Sea surges are described in Section 6.7 [Hurricanes], page 72.

以上は印刷されたマニュアルで，Infoでは以下のようになります．

     Sea surges are described in *Note Hurricanes::.

     *注意:*ピリオド，カンマ，または正しいカッコを，`@ref'コマン
     ドの後に二つ以上の引数とともに書く_必要があります_．そうしない場合，
     Infoは相互参照の項目を見つけることができず，相互参照を追う試みは失敗しま
     す．一般的な規則として，ピリオドやカンマを，全ての`@ref'コマンドの
     後に書くべきです(1) (*note
     ref-Footnote-1::)．これは，印刷されたマニュアルでもInfo出力
     でも最善に見えます．


File: texinfo-ja.info,  Node: ref-Footnotes,  Up: ref

  (1) 訳注:日本語の場合はカッコ悪くなるので，このマ
ニュアルではそうしていません


File: texinfo-ja.info,  Node: pxref,  Next: inforef,  Prev: ref,  Up: Cross References

8.5 `@pxref'
============

丸カッコの参照コマンド`@pxref'は，`@xref'とほとんど同じです
が，丸カッコの中で_のみ_使用し，コマンドの閉じカッコの後にカンマや
ピリオドを入力_しません_．コマンドは二つの点で`@xref'と異なり ます．

  1.
     TeXは印刷されたマニュアルに対し，大文字の`See'ではなく小文字の`see'を
     用いて参照を植字します．

  2.
     Info書式化コマンドでは，自動的に閉じコロンやピリオドで参照を終りにします．


書式化の一つの形式は自動的に閉じる句読点を挿入し，もう一つはそうしないの
で，`@pxref'は他の文の一部として丸カッコ内で_のみ_使用すべき
です．また，`@xref'で行うような，参照後に句読点を挿入すべきではあ
りません．

  `@pxref'は，印刷物とInfoファイルの両方で出力が正しく見え，丸カッコ
が正しく動作するように設計されています．印刷されたマニュアルでは，閉じる
カンマやピリオドは丸カッコ内の相互参照の後に続きません．そのような句読点
は間違いです．しかしInfoファイルでは，適切な閉じる句読点をInfoが終りとし
て認識できるように，相互参照に続ける必要があります．`@pxref'で，出
力の一つの形式に終端を置きそれ以外では置かないため，複雑な方法を使用する
ことから免除されます．

一つの引数を用いた丸カッコ相互参照は以下のようになります．

     ... storms cause flooding (@pxref{Hurricanes}) ...

それは，以下を生成します．

     ... storms cause flooding (*Note Hurricanes::) ...

そして，以下を生成します．

     ... storms cause flooding (see Section 6.7 [Hurricanes], page 72)
     ...

二つの引数を用いた丸カッコ相互参照は，以下のようなテンプレートになります．

     ... (@pxref{NODE-NAME, CROSS-REFERENCE-NAME}) ...

それは，以下を生成します．

     ... (*Note CROSS-REFERENCE-NAME: NODE-NAME.) ...

そして，以下を生成します．

     ... (see Section NNN [NODE-NAME], page PPP) ...

  `@pxref'は`@xref'のように，最大五つの引数を使用することが可能
です(*note `@xref': xref.)．

     *注意してください:*`@pxref'は，丸カッコの参照としてのみ使用
     してください．`@pxref'を文の文節として使用しようとしないでください．
     それは，Infoファイル，印刷物，またはその両方で悪く見えます．

     また，丸カッコ相互参照は文の終りでも最善のようです．文中に書くこともでき
     ますが，その場所はテキストの流れを分断します．


File: texinfo-ja.info,  Node: inforef,  Next: uref,  Prev: pxref,  Up: Cross References

8.6 `@inforef'
==============

`@inforef'は印刷されたマニュアルには無い，Infoファイルへの相互参照
に対して使用されます．印刷されたマニュアルでも，`@inforef'はInfo
ファイルでユーザが見えるような参照を生成します．

  このコマンドは，以下の順番で二つまたは三つの引数をとります．

  1. ノード名．

  2. 相互参照名(オプション)．

  3. Infoファイル名．

`@xref'のように引数はカンマで分けられます．また，`@xref'のよ
うに`}'の後でカンマやピリオドで参照を終端する必要もあります．

テンプレートは以下のようになります．

     @inforef{NODE-NAME, CROSS-REFERENCE-NAME, INFO-FILE-NAME},

以下のようにします．

     @inforef{Expert, Advanced Info commands, info},
     for more information.

以下を生成します．

     *Note Advanced Info commands: (info)Expert,
     for more information.

そして，以下を生成します．

     See Info file `info', node `Expert', for more information.

同様に，以下のようにします．

     @inforef{Expert, , info}, for more information.

以下を生成します．

     *Note (info)Expert::, for more information.

そして，以下を生成します．

     See Info file `info', node `Expert', for more information.

  `@inforef'の逆は`@cite'で，それはInfo形式がない印刷物を参照
するために使用します．*Note `@cite': cite.


File: texinfo-ja.info,  Node: uref,  Prev: inforef,  Up: Cross References

8.7 `@uref{URL[, TEXT][, REPLACEMENT]}'
=======================================

`@uref'は，ユニフォームリソースロケータ(url)への参照を生成します．
それは，一つの必須の引数urlと表示されるテキストを制御する二つの追加の引数
をとります．HTML出力では，`@uref'はたどることが可能なリンクを生成
します．

二番目の引数が指定されている場合，それは表示するテキストです(デフォルトは
url自身です)．InfoとDVI出力ではurlも出力され，HTML出力ではそうなりません．

一方，三番目の引数が指定されている場合もテキストは表示されますが，urlは全
ての書式で出力_されません_．これは，テキストがmanページのように既に
十分参考にされているとき役に立ちます．三番目の引数が与えられた場合，二番目
の引数は無視されます．

簡単な一つの引数の形式では，urlはターゲットとリンクのテキストの両方になり
ます．

     The official GNU ftp site is @uref{ftp://ftp.gnu.org/gnu}.

以下を生成します．
     The official GNU ftp site is `ftp://ftp.gnu.org/gnu'.

  二つの引数の形式の例です．
     The official @uref{ftp://ftp.gnu.org/gnu, GNU ftp site}
     holds programs and texts.

以下を生成します．
     The official GNU ftp site (ftp://ftp.gnu.org/gnu)
     holds programs and texts.

そして，Info出力はこのようになります．
     The official GNU ftp site (ftp://ftp.gnu.org/gnu)
     holds programs and texts.

HTML出力はこのようになります．
     The official <a href="ftp://ftp.gnu.org/gnu">GNU ftp site</a>
     holds programs and texts.

  三つの引数の形式の例です．
     The @uref{/man.cgi/1/ls,,ls(1)} program ...

以下を生成します．
     The ls(1) program ...

しかしHTMLでは，以下のようになります．
     The <a href="/man.cgi/1/ls">ls(1)</a> program ...

  人々がたどることが可能なリンクを作成せず，単にurlを示すため，
`@url'を使用してください(*note `@url': url.)．

  urlの明確な書式を表示することを好む人もいます．

     <URL:http://HOST/PATH>

好みにより，この形式を入力ファイルで使用することも可能です．テキストから
urlの検出を試みるあらゆるソフトウェアでは，便利にするために，
`<URL:'無しで検出する必要があるので，我々は余分な`<URL:'と
`>'を用い，出力をバラバラにすることは必要ないと思います．


File: texinfo-ja.info,  Node: Marking Text,  Next: Quotations and Examples,  Prev: Cross References,  Up: Top

9 単語と句の印付け
******************

Texinfoでは，様々な方法で単語や句に印を付けることが可能です．Texinfoフォー
マッタは，テキストの強調の方法を決定するためにこの情報を使用します．例え
ば，単語や句が，定義している事象，メタ構文の変数，またはプログラムで定義
されているシンボルであっても指定可能です．また，いくつかの異なる方法でテ
キストを強調することも可能です．

* Menu:

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.


File: texinfo-ja.info,  Node: Indicating,  Next: Emphasis,  Prev: Marking Text,  Up: Marking Text

9.1 定義，コマンド等を示す
==========================

Texinfoには，テキストの一部が言及しているものの種類を示すコマンドがあり
ます．例えば，メタ構文の変数は`@var'で，コードは`@code'で印
を付けられます．テキストの一部は，そのオブジェクトの種類を伝えるコマンド
でラベルが付くので，Texinfoフォーマッタでそのようなテキストへの準備を変
更することは簡単です．(Texinfoは_植字的な_書式化言語というよりはむ
しろ，_意図的な_書式化言語です．)

例えば，印刷されたマニュアルでは，コードは通常タイプライターのフォントで
図案化されます．`@code'はTeXに，このテキストをこのフォントで植
字するよう伝えます．しかし，TeXのコードの強調を他のフォントを使用する
よう変更することは簡単で，この変更はキーストロークの例を強調する方法に影
響しません．直接的な植字コマンドがファイルの本体で使用されていて，それを
変更したい場合，コードを変更して，他が変更されていないことを確かめるため，
全てのそれぞれの事象を調べる必要があります．

* Menu:

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* acronym::                     Indicating acronyms.
* url::                         Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.


File: texinfo-ja.info,  Node: Useful Highlighting,  Next: code,  Prev: Indicating,  Up: Indicating

役に立つ強調コマンド
--------------------

強調コマンドは，関数やファイル名のリストのような，ファイルからの便利な情
報を抽出するために使用することが可能です．例えば，Emacs Lisp(またはキー
ボードマクロ)でのプログラムを書くために，指定されたコマンドで印が付いて
いる単語と句が含まれているそれぞれの段落の後に，索引項目を挿入することも
可能です．まだ項目を作成していない場合，関数の索引を構築するためこれを行
うことが可能でしょう．

  コマンドは様々な目的を満たします．

`@code{SAMPLE-CODE}'
     プログラムの一部のリテラル例となるテキストを示します．

`@kbd{KEYBOARD-CHARACTERS}'
     キーボード入力を示します．

`@key{KEY-NAME}'
     キーボードのキーに対する慣習的な名前を示します．

`@samp{TEXT}'
     文字列のリテラル例となるテキストを示します．

`@var{METASYNTACTIC-VARIABLE}'
     メタ構文変数を示します．

`@env{ENVIRONMENT-VARIABLE}'
     環境変数を示します．

`@file{FILE-NAME}'
     ファイル名を示します．

`@command{COMMAND-NAME}'
     コマンド名を示します．

`@option{OPTION}'
     コマンドラインオプションを示します．

`@dfn{TERM}'
     用語使用の紹介や定義を示します．

`@cite{REFERENCE}'
     本の名前を示します．

`@acronym{ACRONYM}'
     頭文字を組み合わせた言葉を示します．

`@url{UNIFORM-RESOURCE-LOCATOR}'
     ワールドワイドウェブ(WWW)のユニフォームリソースロケータ(URL)を示します．

`@email{EMAIL-ADDRESS[, DISPLAYED-TEXT]}'
     電子メールアドレスを示します．



File: texinfo-ja.info,  Node: code,  Next: kbd,  Prev: Useful Highlighting,  Up: Indicating

9.1.1 `@code'{SAMPLE-CODE}
--------------------------

プログラムの一部と，全体が構文的なトークンからなるテキストを示すため，
`@code'コマンドを使用してください．カッコでテキストを囲ってくださ い．

  このため，`@code'をプログラム内部の式，プログラムで使用している変
数や関数の名前，またはプログラム言語のキーワードに対して使用すべきです．

  Texinfoのようなプログラム言語に似ている言語のコマンド名に対して
`@code'を使用してください．例えば，`@code'と`@samp'は，
Texinfoソースファイルで，それぞれ`@code{@@code}'と
`@code{@@samp}'と書くことで生成されます．

  文の最初に現れるとき，`@code'コマンドの中で単語の大文字小文字を変
えるのは正しくありません．ほとんどのコンピュータ言語は大文字小文字の違い
を識別します．例えばCでは，`Printf'は`printf'の識別子と異なり，
それはおそらくスペルミスです．大文字小文字の区別をしない言語でも，異なる
方法で綴られた識別子を見ると人間の読者は混乱します．一つの綴りを選び，そ
れを常に使用してください．全てが小文字で書かれたコマンド名で文を開始した
くない場合，文の配置替えをするべきです．

  印刷されたマニュアルでは，`@code'でTeXは引数をタイプライターフェ
イスのフォントで植字します．Infoファイルでは．Info書式化コマンドはシング
ルクォーテーションマークでテキストの周りを囲みます．

  例えば，以下のようにします．

     The function returns @code{nil}.

印刷されたマニュアルで，これは以下を生成します．

     The function returns `nil'.

  `@code'を使用しないほうが好ましい状況は，以下のものです．

   * `ls'のようなシェルコマンド名(`@command'を使用してください)．

   * `-c'のようなシェルオプション単独のとき(`@option'を使用してくだ
     さい)．

   * また，シェルコマンド全体は，`@code'より`@samp'を使用して書い
     た方が良く見えます．この場合，規則はより喜ばしい書式を選択するためです．

   * `TEXINPUTS'のような環境変数(`@env'を使用してください)．

   * 構文トークンより短い文字列．例えば，Emacs Lisp関数の`goto-char'の名
     前の一部の`goto-ch'に関して書く場合，`@samp'を使用すべきです．

   *
     一般的に，トークンで使用されている文字に関して書く場合です．例えば，関数
     名で使用可能な文字や印刷可能なシンボルを説明しているとき，`@code'
     を使用しないでください．(`@samp'を使用してください．)また，入力が
     プログラム言語のような言語で書かれていない場合，プログラムの入力と考えら
     れるテキストに印を付けるために`@code'を使用すべきではありません．
     例えば，GNU Emacsのキーストロークコマンドに対して`@code'を使用すべ
     きではありませんが(代わりに`@kbd'を使用してください)，キーストロー
     クコマンドが呼び出すEmacs Lispの関数名に対し`@code'を使用してもか
     まいません．


  `@command'，`@option'，そして`@env'は比較的最近導入さ
れたので，`@code'や`@samp'をコマンド名，オプション，そして環
境変数に使用することも可能です．新しいコマンドでより正確に印付けを表現で
きますが，より古いコマンドの使用でも実害は無く，もちろん長期存続のマニュ
アルはそうしています．


File: texinfo-ja.info,  Node: kbd,  Next: key,  Prev: code,  Up: Indicating

9.1.2 `@kbd'{KEYBOARD-CHARACTERS}
---------------------------------

ユーザが入力する文字に対し`@kbd'コマンドを使用してください．例えば，
文字`M-a'を記述するため，以下のように書いてください．

     @kbd{M-a}

文字`M-x shell'を記述するため，以下のように書いてください．

     @kbd{M-x shell}

  `@kbd'コマンドはInfoでは`@code'と同じ効果がありますが，印刷
されたマニュアルではデフォルトで異なるフォント(通常のタイプライターの代
わりに傾いたタイプライター)を生成し，そのため，ユーザはこれらのコンピュー
タの出力と，入力として仮定される文字とを区別可能です．

  `@kbd'の使用法がマニュアル間で異なるので，`@kbdinputstyle'コ
マンドでフォント切替えの制御が可能です．このコマンドはInfo出力で効果があ
りません．このコマンドを行の最初で，引数として一単語で以下の一つを書いて
ください． 
`code'
     常に`@kbd'に対し`@code'と同じフォントを使用します．

`example'
     `@example'とそれに似た環境のみで，`@kbd'に対し異なるフォント
     を使用します．

`distinct'
     (デフォルトで)常に`@kbd'に対し異なるフォントを使用します．

  `@kbd'コマンドのカッコの中に他の@-コマンドを埋め込むことが可能で
す．例えばここで，より冗長に記述すると，"`r'を押し，<RET>を押
してください"となるコマンドを記述した例があります．

     @kbd{r @key{RET}}

これは`r <RET>'を生成します．

  また，入力した文字を書き出すために`@kbd'コマンドを使用することも可
能です．例えば，以下のようにします．

     To give the @code{logout} command,
     type the characters @kbd{l o g o u t @key{RET}}.

これは以下を生成します．

     To give the `logout' command, type the characters `l o g o u t
     <RET>'.

(また，この例は明確にするためスペースを加えることが可能だということも示
しています．実際にスペース文字を入力文字の一つとして述べたい場合，そのた
めに`@key{SPC}'を書いてください．


File: texinfo-ja.info,  Node: key,  Next: samp,  Prev: kbd,  Up: Indicating

9.1.3 `@key'{KEY-NAME}
----------------------

`@key'コマンドをキーボード上のキーの慣習名に対し以下のように使用し
てください．

     @key{RET}

  入力された文字の並びが一つ以上の名前で記述されたキーを含むとき，
`@key'コマンドを，`@kbd'コマンドの引数内部で使用可能です．

  例えば，入力する`C-x <ESC>'を生成するために，以下のようにします．

     @kbd{C-x @key{ESC}}

  推奨されるキーの名前のリストは以下のものがあります． 

    SPC
          スペース

    RET
          リターン

    LFD
          Linefeed(しかし，最近のほとんどのキーボードはLinefeedキーが無いので，この
          文字`C-j'を呼ぶ方がいいでしょう)．

    TAB
          タブ

    BS
          バックスペース

    ESC
          エスケープ

    DEL
          デリート

    SHIFT
          シフト

    CTRL
          コントロール

    META
          メタ

  修飾キー名の`meta'や`ctrl'のような単語を扱う細別手法もあります．
`Meta-a'のような，修飾キーが使用されている文字を記述するとき，
`@kbd'コマンドを単独で使用してください．`@key'コマンドを使用
しないでください．しかし，修飾キーを単独で記述するときは`@key'コマ
ンドを使用してください．例えば，`Meta-a'を生成するため
`@kbd{Meta-a}'と書き，<META>を生成するため
`@key{META}'と書いてください．


File: texinfo-ja.info,  Node: samp,  Next: verb,  Prev: key,  Up: Indicating

9.1.4 `@samp'{TEXT}
-------------------

ファイル，文字列，パターンなどの内部の文字の並びの例や`sample'のリテラル
となるテキストを示すため，`@samp'コマンドを使用してください．テキ
ストをカッコで囲んでください．Infoファイルと印刷されたマニュアルの両方で，
シングル引用符の中にで引数が現れます．さらに，等幅フォントで印刷されます．

     To match @samp{foo} at the end of the line,
     use the regexp @samp{foo$}.

これは以下を生成します．

     To match `foo' at the end of the line, use the regexp `foo$'.

  単一の文字を記述するときはいつも，`@kbd'や`@key'がより適して
いない限り`@samp'を使用すべきです．また，Cの記述全体やシェルコマン
ド全体に対し`@samp'を使用することも可能です．この場合，
`@samp'は`@code'より良く見えます．基本的に，`@samp'は
`@code'，`@kbd'，または`@key'でカバーされていないあら
ゆるものに対する入れものです．

指定した文字列の一部の場合のみ，句読点をカッコ内に含めてください．句読点
が文字列の周りにある英語のテキストの一部の場合，カッコの外に句読点を書い
てください．例えば以下の文章では，カンマとピリオドはカッコの外側に置きま
す．

     In English, the vowels are @samp{a}, @samp{e},
     @samp{i}, @samp{o}, @samp{u}, and sometimes
     @samp{y}.

これは以下を生成します．

     In English, the vowels are `a', `e', `i', `o', `u',  and sometimes
     `y'.


File: texinfo-ja.info,  Node: verb,  Next: var,  Prev: samp,  Up: Indicating

9.1.5 `@verb'{<char>TEXT<char>}
-------------------------------

文字の並びをそのまま出力するために，`@verb'コマンドを使用してくだ さい．

  LaTeXの`\verb'コマンドのように，テキストそのままを，ユニークな分
離文字を使用して引用符で囲むことが可能です．囲まれているテキストは自身に
はカッコの中の分離文字も含まれます．テキストは固定幅フォントで出力されま
す．

     How many @verb{|@|}-escapes does one need to print this
     @verb{.@a @b @c.} string or @verb{+@'e?`!`{}\+} this?

以下を生成します．

     How many @-escapes does one need to print this
     @a @b @c string or these @'e?`{}!`\ this?

  これは，引数が通常のTexinfoのテキストになる`@samp'(前のセクション
を参照してください)と比較して，文字`@{}'は特別です．
`@verb'を用いた場合，選択した分離文字以外，特別な例外はありません．


File: texinfo-ja.info,  Node: var,  Next: env,  Prev: verb,  Up: Indicating

9.1.6 `@var'{METASYNTACTIC-VARIABLE}
------------------------------------

メタ構文変数を示すため，`@var'コマンドを使用してください．"メ
タ構文変数(metasyntactic variable)"は，テキストの一部と同類のものを意味
するものです．例えば，メタ構文変数を関数に渡される引数を記述するため関数
のドキュメントで使用すべきです．

  プログラム言語で，特定の変数の名前に対し`@var'を使用しないでくださ
い．これらはプログラムの特別な名前なので，それに対しては`@code'が
正しいものです(*note code::)．例えば，Emacs Lisp変数
`texinfo-tex-command'はメタ構文変数ではありません．それは，
`@code'を使用することで正確に書式化されます．

  環境変数に対しても`@var'を使用しないでください．それに対しては
`@env'が正しいものです(次のセクションを見てください)．

  Infoでの`@var'の効果は，引数の文字を全て大文字に変更します．印刷さ
れたマニュアルとHTML出力では引数は傾いて印刷されます．

  例えば，以下のようにします．

     To delete file @var{filename},
     type @samp{rm @var{filename}}.

以下を生成します．

     To delete file FILENAME, type `rm FILENAME'.

(`@var'は`@code'，`@samp'，`@file'などの間に現す
ことができることに注意してください．)

メタ構文変数は，スペース以外全て小文字で書き，読みやすくするためハイフン
を使用してください．このため，Texinfoマニュアルの初め方を表現するTexinfo
ソースは以下のようになります．

     \input texinfo
     @@setfilename @var{info-file-name}
     @@settitle @var{name-of-manual}

これは以下を生成します．

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

ドキュメント形式によっては，メタ構文変数は山カッコで表示するものもあり，
以下がその例です．

     ..., type rm <filename>

しかし，それはTexinfoが使用する形式ではありません．(もちろん，そうしたい
場合，`texinfo.tex'ソースを編集して，Info書式化コマンドを
`<...>'書式で出力させることもできます．)


File: texinfo-ja.info,  Node: env,  Next: file,  Prev: var,  Up: Indicating

9.1.7 `@env'{ENVIRONMENT-VARIABLE}
----------------------------------

GNUを含め，多くのオペレーティングシステムで使用される環境変数を示すため，
`@env'コマンドを使用してください．メタ構文変数に使用しないでくださ
い．代わりに`@var'を使用してください(前のセクションを参照してくだ
さい)．

  `@env'の効果は`@code'と同じです．例えば，以下のようにします．

     The @env{PATH} environment variable ...
  以下を生成します．

     The `PATH' environment variable ...


File: texinfo-ja.info,  Node: file,  Next: command,  Prev: env,  Up: Indicating

9.1.8 `@file'{FILE-NAME}
------------------------

ファイル，バッファ，またはディレクトリ名や，Infoでのノード名となるテキス
トを示すため，`@file'コマンドを使用してください．また，ファイル名
の接尾子にも使用可能です．プログラム言語のシンボルに対し`@file'を
使用しないでください．`@code'を使用してください．

  現在，`@file'の効果は`@samp'と同じです．例えば以下のようにし ます．

     The @file{.el} files are in
     the @file{/usr/local/emacs/lisp} directory.

以下を生成します．

     The `.el' files are in the `/usr/local/emacs/lisp' directory.


File: texinfo-ja.info,  Node: command,  Next: option,  Prev: file,  Up: Indicating

9.1.9 `@command'{COMMAND-NAME}
------------------------------

`ls'や`cc'のようなコマンド名を示すため，`@command' を使用してください．

  `@command'の効果は`@code'と同じです．例えば，以下のようにし ます．

     The command @command{ls} lists directory contents.
  以下を生成します．

     The command `ls' lists directory contents.

  `Emacs'や`Bison'のような新しい英単語にしたい場合，`@command'を使用
せず，通常のテキストのフォントでプログラム名を書くべきです．

  `ls -l'のようなシェルコマンドの呼び出し全体を書くとき，自分で判断し
て`@samp'または`@code'のどちらかを使用すべきです．


File: texinfo-ja.info,  Node: option,  Next: dfn,  Prev: command,  Up: Indicating

9.1.10 `@option'{OPTION-NAME}
-----------------------------

コマンドラインオプションを示すため，`@option'コマンドを使用してく
ださい．例えば， `-l'や，`--version'や， `--output=FILENAME'です．

  `@option'の効果は`@samp'と同じです．例えば以下のようにします．

     The option @option{-l} produces a long listing.
  以下を生成します．

     The option `-l' produces a long listing.

  表では，オプションを`@code'の中に書くと，より喜ばしい効果を生成し
ます．


File: texinfo-ja.info,  Node: dfn,  Next: cite,  Prev: option,  Up: Indicating

9.1.11 `@dfn'{TERM}
-------------------

技術用語の使用の紹介や定義を識別するため，`@dfn'コマンドを使用して
ください．もう一度使用する用語や読者が知っておくべき用語の紹介を意図した
引用部分でのみ，このコマンドを使用してください．最初に用語について述べる
ちょっとした記述は`@dfn'に値しません．コマンドは印刷されたマニュア
ルでイタリック体を生成し，Infoファイルでは2重引用符を生成します．例えば
以下のようにします．

     Getting rid of a file is called @dfn{deleting} it.

以下を生成します．

     Getting rid of a file is called "deleting" it.

一般的な規則として，用語の発生の定義を含む文は用語の定義にすべきです．文
はその定義を明示的にする必要はありませんが，定義情報を含めるべきです --
それで意味がはっきりします．


File: texinfo-ja.info,  Node: cite,  Next: acronym,  Prev: dfn,  Up: Indicating

9.1.12 `@cite'{REFERENCE}
-------------------------

Infoファイルの仲間にはない本の名前に対し`@cite'コマンドを使用して
ください．コマンドは印刷されたマニュアルでイタリック体を生成し，Infoファ
イルでは引用符を生成します．

本がTexinfoで書かれている場合，読者はInfoでそのような参照を簡単に追うこ
とが可能なので，相互参照を使用してください．*Note `@xref': xref.


File: texinfo-ja.info,  Node: acronym,  Next: url,  Prev: cite,  Up: Indicating

9.1.13 `@acronym'{ACRONYM}
--------------------------

`NASA'のように全て大文字で書かれている省略に対し，
`@acronym'を使用してください．省略は`@acronym{NASA}'のよう
にカッコ内に一つの引数で与えられます．形式の問題や特定の省略のため，
`@acronym{F.B.I.}'のようにピリオドを使用した方が良いかもしれませ ん．

  TeXとHTMLでは，引数は傾いた小さなフォントサイズで印刷されます．Infoや
プレーンテキスト出力では，このコマンドは何も変更しません．


File: texinfo-ja.info,  Node: url,  Next: email,  Prev: acronym,  Up: Indicating

9.1.14 `@url'{UNIFORM-RESOURCE-LOCATOR}
---------------------------------------

ワールドワイドウェブ(WWW)のユニフォームリソースロケータ(URL)を示すため，
`@url'コマンドを使用してください．これは，`@file'，
`@var'等に似ていて，純粋にマークアップのためのものです．それはHTML
形式でたどることが可能なリンクを生成しません(そのためには`@uref'
を使用してください．*note `@uref': uref.)．実際には存在しないURL
に対して役に立ちます．例えば，以下のようにします．

     For example, the url might be @url{http://example.org/path}.

それは，以下を生成します．
     For example, the url might be `http://example.org/path'.


File: texinfo-ja.info,  Node: email,  Prev: url,  Up: Indicating

9.1.15 `@email'{EMAIL-ADDRESS[, DISPLAYED-TEXT]}
------------------------------------------------

電子メールアドレスを示すため`@email'コマンドを使用してください．そ
れは引数として一つの必須のアドレスと，一つの追加引数で表示するテキストをと
ります(デフォルトではアドレス自身になります)．

  InfoとTeXでは，アドレスは山カッコで表示され，存在する場合は表示テキス
トが前に付きます．HTML出力では，`@email'は通常メール作成ウィンドウ
を生成する`mailto'リンクを生成します．例えば，以下のようにします．

     Send bug reports to @email{bug-texinfo@@gnu.org},
     suggestions to the @email{bug-texinfo@@gnu.org, same place}.
  以下を生成します．
     Send bug reports to <bug-texinfo@gnu.org>,
     suggestions to the same place <bug-texinfo@gnu.org>.


File: texinfo-ja.info,  Node: Emphasis,  Prev: Indicating,  Up: Marking Text

9.2 テキストの強調
==================

通常Texinfoは，テキストで単語が属するカテゴリに従って印付けされた単語に
対しフォントを変更します．例えば`@code'コマンドです．ほとんどの状
況で単語に印を付ける方法が最善です．しかし，カテゴリを示さずにテキストを
強調したいときもあります．Texinfoにはこのための二つのコマンドがあります．
またTexinfoには，TeXがテキストを植字するときのフォントを指定するコマ
ンドもいくつかあります．これらのコマンドはInfoでは効果が無く，その中の一
つ`@r'コマンドだけ，通常使用されます．

* Menu:

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.


File: texinfo-ja.info,  Node: emph & strong,  Next: Smallcaps,  Up: Emphasis

9.2.1 `@emph'{TEXT}と`@strong'{TEXT}
------------------------------------

`@emph'と`@strong'コマンドは，強調のためのものです．
`@strong'がより強調します．印刷物で，`@emph'は_italics_
を生成し，`@strong'は*bold*を生成します．

  例えば，以下のようにします．

     @quotation
     @strong{Caution:} @samp{rm * .[^.]*} removes @emph{all}
     files in the directory.
     @end quotation

以下を生成します．

         *Caution*: `rm * .[^.]*' removes _all_
         files in the directory.

  `@strong'コマンドは，前の例での単語`Caution'のような，効果が印刷要
素となるマーク以外では，滅多に使用されません．

  Info出力では，`@emph'はアンダースコア(`_')でテキストを囲み，
`@strong'はテキストの周りにアスタリスクを書きます．

     *注意:*`@strong'を単語`Note'で使用しないでください．
     Infoは相互参照との組み合わせと勘違いします．代わりに，*Please
     note*や*Caution*のような句を使用してください．


File: texinfo-ja.info,  Node: Smallcaps,  Next: Fonts,  Prev: emph & strong,  Up: Emphasis

9.2.2 `@sc'{TEXT}:小さな大文字フォント
--------------------------------------

テキストを，印刷物とHTMLでA SMALL CAPS FONTに設定し，Infoファイルで
大文字に設定するため，`@sc'コマンドを使用してください．(可能な場合)
小さい大文字にしたいテキストを以下のように小文字でカッコの間に書いてくだ
さい．

     The @sc{acm} and @sc{ieee} are technical societies.

これは以下を生成します．

     The ACM and IEEE are technical societies.

  TeXは，文字が`ページからはみ出る'ことを避けるように，小さい大文字フォ
ントで植字します．これは，小さい大文字のテキストを全て大文字にするより読
みやすくします．しかし通常は，どこでも大文字小文字を混ぜて使用する方が良
いでしょう．Info書式化コマンドは，全ての小さい大文字のテキストを大文字に
設定します．HTMLでは，テキストは大文字で小さいフォントで表現されます．

  `@sc'コマンドのカッコ内のテキストが大文字の場合，TeXはフルサイ
ズの大文字で植字します．今までそうしている場合，`@sc'で全て大文字
のテキストに印を付けるのは無駄なので，`makeinfo'がそのような使用
法に警告する場合は，省略してフルサイズの大文字を使用してください．

  また，ATO(`abort to orbit'を意味するNASA単語)のような専門用語
に対し小さな大文字フォントを使用することも可能です．

  Lispプログラムで使用される単語CDRのような専門用語で小さな大文字フォ
ントを使用することには微妙な点があります．この状況では，単語がリスト(リ
ストのCDR)の二番目のものとそれに続く要素を参照するときは小さな大文
字フォントを使用すべきですが，単語が同じ綴りのLisp関数を参照するときは
`@code'を使用すべきです．


File: texinfo-ja.info,  Node: Fonts,  Prev: Smallcaps,  Up: Emphasis

9.2.3 Infoではなく印刷時のフォント
----------------------------------

Texinfoには，Infoでは効果が無く印刷されたマニュアルでフォントの変更を指
定する，四つのフォントコマンドを提供しています．`@i'はitalicフォ
ント(TeXのバージョンによっては傾いたフォントが使用される)を要求し，
`@b'はboldフェイスを要求し，`@t'は`@code'で使用さ
れるタイプライター形式のフォントfixed-widthを要求し，そして，
`@r'はテキストの印刷での通常フォントのromanフォントを要求しま
す．すべての四つのコマンドは，それに続くカッコに囲まれた引数に適用します．

  `@r'コマンドのみがよく使用されます．例としてのプログラムで，コード
コメントを等幅フォントからローマンフォントに変更するため，`@r'コマ
ンドを使用することが可能です．これは，印刷された出力で見ためが良くなりま
す．

  例えば，以下のようにします．

     @lisp
     (+ 2 2)    ; @r{Add two plus two.}
     @end lisp

以下を生成します．

     (+ 2 2)    ; Add two plus two.

可能な場合，他の三つのフォントコマンドの使用を避けるべきです．その一つを
使用する必要がある場合，Texinfo言語ではおそらくギャップが生じます．


File: texinfo-ja.info,  Node: Quotations and Examples,  Next: Lists and Tables,  Prev: Marking Text,  Up: Top

10 引用と例
***********

引用と例は，テキストの塊が区切られた一つ以上の段落全体から成り立つテキス
トとなっていて，取り扱いが異なります．通常字下げされます．

Texinfoでは，引用や例は，常に行の最初に単独で@-コマンドを書くことから始
まり，行の最初に単独行で`@end'コマンドを書くことで終ります．例えば，
例を`@example'を行の最初に単独行で書くことで始め，行の始めに単独行
で`@end example'を書くことで終えます． 

* Menu:

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Forms for `@smallbook'.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.


File: texinfo-ja.info,  Node: Block Enclosing Commands,  Next: quotation,  Up: Quotations and Examples

10.1 ブロックで囲むコマンド
===========================

以下のものは次のセクションで更に説明しますが，引用と例のコマンドです．

`@quotation'
     引用されたテキストを示します．テキストは補充され，字下げされ，そしてデフォ
     ルトでローマンフォントで印刷されます．

`@example'
     コードとコマンドのようなものを例示します．テキストは等幅フォントで印刷さ
     れ，字下げされますが，補充されません．

`@verbatim'
     逐語的に出力されるテキストの一部に印をつけます．次の`@end
     verbatim'まで，置換される文字は無く，すべてのコマンドは無視されます．テ
     キストは固定幅フォントで出力され，字下げも補充もされません．余分なスペー
     スと空の行は重要で，タブは展開されます．

`@smallexample'
     TeXでこのコマンドがより小さいフォントでテキストを植字する以外，
     `@example' と同じです．

`@lisp'
     `@example'に似ていますが，特にLispコードの例示に対するものです．テ
     キストは等幅フォントで印刷され字下げされますが，補充されません．

`@smalllisp'
     `@example'に対する`@smallexample'のような`@lisp'に対す るものです．

`@display'
     例示のテキストを表示します．テキストは字下げされますが補充されず，フォン
     トの選択もされません(そのため，デフォルトでフォントはローマンです)．

`@smalldisplay'
     `@example'に対する`@smallexample'のような`@display'に
     対するものです．

`@format'
     `@display'(テキストは補充されずフォントの選択もありません)に似てい
     ますが，字下げされません．

`@smallformat'
     `@example'に対する`@smallexample'のような`@format'に対
     するものです．

  `@exdent'コマンドは，行の字下げを元に戻すため，上記の構成の中で使
用されます．

  `@flushleft'と`@flushright'コマンドは，補充されないテキスト
の左右のマージンを整えるために使用されます．

  `@noindent'は，それに続くテキストを新しい段落のように字下げするの
を妨げるため，上の構成の一つの後で使用してもかまいません．

  上の構成物の一つの中で角丸の四角を描いて例や引用を強調するため，
`@cartouche'コマンドを使用することが可能です．*Note Drawing Cartouches
Around Examples: cartouche.


File: texinfo-ja.info,  Node: quotation,  Next: example,  Prev: Block Enclosing Commands,  Up: Quotations and Examples

10.2 `@quotation'
=================

引用のテキストを，以下の場合以外は普通に処理します．

   *
     マージンがページの中心に近く，そのため引用全体を字下げできない場合．

   * 段落の最初の行が他の行以上に字下げできない場合．

   * 印刷物で，段落間の間隔が減らされている場合．

     これは`@quotation'コマンドと`@end quotation'コマンドの間に書
     かれているテキストの例です．`@quotation'コマンドは，他の(実際また
     は架空の)印刷された本から抜粋されたテキストを示すために，最もよく使用さ
     れます．

  `@quotation'コマンドは単独行のテキストとして書いてください．この行
は出力に現れません．引用の終りを，行の最初に`@end quotation'のみを
含む行で印を付けてください．`@end quotation'行は出力に現れません．
こうして，以下のようになります．

     @quotation
     This is
     a foo.
     @end quotation

以下を生成します．

     This is a foo.


File: texinfo-ja.info,  Node: example,  Next: verbatim,  Prev: quotation,  Up: Quotations and Examples

10.3 `@example': 例のテキスト
=============================

`@example'コマンドは，コンピュータの入力や出力のような実行している
テキスト以外の例を示すために使用されます．

     これは，`@example'コマンドと
     `@end example'コマンドの間に書かれている
     テキストの例です．
     字下げされますが補充されません．

     印刷されたマニュアルでは，テキストは等幅フォントで植字され，
     余分な空白と空白行は意味があります．Infoファイルでは，
     それぞれの行を五個のスペースで字下げされ，
     似たような結果が得られます．

  `@end example'コマンドを行の最初に単独行に書いてください．例の終り
に`@end example'コマンドで印を付け，それも行の最初に単独行で書いて
ください．

  例えば，以下のようにします．

     @example
     mv foo bar
     @end example

以下を生成します．

     mv foo bar

  `@example'と`@end example'を含む行は出力に現れません．出力の
見ためが良くなるように，`@example'の前に空白行を置き，もう一つの空
白行を`@end example'の後に置くべきです．始めの`@example'と終 りの`@end
example'の中の空白行は出力に現れることに注意してください．

     *注意:*(逐語的な環境以外の)例の行や問題となりうるTexinfoのあらゆ
     る場所でタブを使用しないでください！TexinfoのTeXの実装ではタブを一つの
     スペースとして扱い，表示されているようにはなりません．(必要な場合，Emacs
     でタブをその領域を占める複数のスペースに変換するため`M-x untabify'
     を使用することが可能です．)

  例は，論理的に言うと段落の"真中にある"ものと，例の後に字下げされずに続
けられるテキストとなります．`@noindent'コマンドはテキストの部分が
新しい段落のように字下げされるのを妨げます． (*Note noindent::.)

  (`@code'コマンドは文の中に埋め込まれるコードの例に使用されますが，
前後のテキストを区切りません．*Note `@code': code.)


File: texinfo-ja.info,  Node: verbatim,  Next: verbatiminclude,  Prev: example,  Up: Quotations and Examples

10.4 `@verbatim':リテラルテキスト
=================================

コンピュータの入力や出力のような，特殊な文字や解釈して欲しくないコマンド
を含む可能性のあるテキストを出力するために，`@verbatim'の環境を使
用してください(`@example'はそのテキストを通常のTexinfoコマンドとし
て解釈します)．これは，自動的に生成される出力をTexinfoマニュアルに含める
ときに特に役に立ちます．例は以下のようになります．見ることになる出力は，
`@verbatim'の前の行と`@end verbatim'の後の行も含めて，入力と
全く同じになります．


@c This is an example of text written in a @verbatim
@c block.  No character substitutions are made.  All commands
@c are ignored, until `<at>end verbatim'.
@c
これは，@verbatimブロックの例です．
文字の置換はありません．`<at>end verbatim'まで，
すべてのコマンドは無視されます．

@c In the printed manual, the text is typeset in a
@c fixed-width font, and not indented or filled.  All
@c spaces and blank lines are significant, including tabs.
@c
印刷されたマニュアルでは，テキストは固定幅フォントで植字され，
字下げも補充もされません．
すべてのスペースと空白行は，タブも含めて重要です．

  `@verbatim'コマンドを行の始めに単独行で書いてください．この行は出
力に現れません．verbatimブロックの終りを`@end verbatim'コマンドで
印を付け，これも行の始めから単独行にしてください．`@end verbatim'
も出力には現れません．

  例えば以下のようにします．

@verbatim
{
<tab>@command with strange characters: @'e
expand<tab>me
}
@end verbatim


以下を生成します．


{
       @command with strange characters: @'e
expand	me
}

  `@verbatim'と`@end verbatim'を含んでいる行は出力を生成しない
ので，通常は`@verbatim'の前の空白行と，`@end verbatim'の後に
も空白行を書くべきです．最初の`@verbatim'と終りの`@end
verbatim'の間の空白行は出力に現れます．


File: texinfo-ja.info,  Node: verbatiminclude,  Next: lisp,  Prev: verbatim,  Up: Quotations and Examples

10.5 `@verbatiminclude' FILE:ファイルをそのまま含める
=====================================================

`@verbatiminclude'コマンドでファイルの内容を正確にドキュメントに含
めることが可能です．

     @verbatiminclude FILENAME

  FILENAMEの内容は，verbatimで囲まれたように出力されます (*note
`@verbatim': verbatim.)．一般的に，ファイルはそのまま正確
に出力され，すべての特殊文字と空白はそのままになります．


File: texinfo-ja.info,  Node: lisp,  Next: small,  Prev: verbatiminclude,  Up: Quotations and Examples

10.6 `@lisp':Lispの例の印付け
=============================

`@lisp'コマンドはLispコードに対し使用します．それは
`@example'コマンドの類語です．

     これは，`@lisp'コマンドと
     `@end lisp'コマンドの間に書かれたテキストの例です．

  例の性質に関する情報を保護するため，`@example'の代わりに
`@lisp'を使用してください．例えば，TexinfoファイルにLispコードのみ
を評価しそれが全てである関数を書く場合，これは役に立ちます．Lispライブラ
リのようにTexinfoファイルを使用すること可能です．(1) (*note
lisp-Footnote-1::)

  `@lisp'の終りは，単独行の`@end lisp'で印を付けてください．


File: texinfo-ja.info,  Node: lisp-Footnotes,  Up: lisp

  (1)  C，Fortran
や他の言語に対し，類似の流儀で動作するようTexinfoを拡張することは簡単で
す．


File: texinfo-ja.info,  Node: small,  Next: display,  Prev: lisp,  Up: Quotations and Examples

10.7 `@small...'ブロックコマンド
================================

正規の`@example'と`@lisp'コマンドに加えて，Texinfoは
"small"という例のような形式のコマンドがあります．これらは，
`@smalldisplay'，`@smallexample'，`@smallformat'，そし
て`@smalllisp'です．

  TeXでは，`@small...'コマンドは，小さい例のコマンドより小さ
いフォントでテキストを植字します．したがって，長い行を含んでいる例の多く
は，短くする必要が無いように，ページに適したものになります．

  Infoでは，`@small...'コマンドは，"small"が無いコマンドと同じ です．

  `@small...'ブロックは，対応する`@end small...'で印を
付けてください．例えば`@smallexample'は`@end smallexample'と
対になります．

     これは，`@smallexample'と`@end smallexample'の間に書かれたテ
     キストの例です．Infoでは，このテキストは通常サイズで現れます．しかし
     7x9.25インチのマニュアルでは，このテキストは小さいフォントで現れます．

  `@small...'コマンドで，狭いページに適したものになるよう手動で
例を編集することなく，マニュアルの準備がより簡単になります．

  一般的な規則として，(例えば)`@example'または`@smallexample'
の一つのみを章の中で一貫して使用すると，印刷されたドキュメントはより良く
見えます．たまにだけ，二つの書式を混ぜるべきです．

  `@smallbook'コマンドの詳細は，*Note Printing "Small" Books: smallbook.


File: texinfo-ja.info,  Node: display,  Next: format,  Prev: small,  Up: Quotations and Examples

10.8 `@display'と`@smalldisplay'
================================

`@display'コマンドは，例のようなものを開始します．印刷されたマニュ
アルで`@display'は等幅フォントを選択しない以外は，`@example'
コマンドに似ています．実際，フォントを全く指定しないので，テキストは
`@display'コマンドを用いていないところに現れるものと同じフォントで
現れます．

     これは，`@display'コマンドと`@end display'コマンドの間に書かれ
     たテキストの例です．`@display'コマンドは，テキストを字下げしますが，
     補充しません．

  Texinfoは`@smalldisplay'コマンドも提供していて，それは
`@display'に似ていますが，`@smallbook'書式でより小さいフォン
トを使用します．*Note small::.


File: texinfo-ja.info,  Node: format,  Next: exdent,  Prev: display,  Up: Quotations and Examples

10.9 `@format'と`@smallformat'
==============================

`@format'コマンドは，印刷されたマニュアルで`@format'が等幅フォ
ントを選択せず，マージンを狭くしないこと以外は，`@example'に似てい
ます．

これは`@format'コマンドと`@end format'コマンドの間に書かれてい
るテキストの例です．
この例で分かるように，
`@format'コマンドは，テキストを補充しません．

  Texinfoは`@smallformat'も提供していて，それは，`@format'に似
ていますが，`@smallbook'書式でより小さいフォントを使用します． *Note
small::.


File: texinfo-ja.info,  Node: exdent,  Next: flushleft & flushright,  Prev: format,  Up: Quotations and Examples

10.10 `@exdent': 行の字下げの取り消し
=====================================

`@exdent'コマンドは行が持つ字下げを削除します．このコマンドは行の
最初に書き，同じ行にあるコマンドに続くテキストのみに適用されます．テキス
トの周りにカッコを使用しないでください．印刷されたマニュアルでは，
`@exdent'行のテキストはローマンフォントで印刷されます．

  `@exdent'は通常例の内部で使用されます．このため，以下のようになり
ます．

     @example
     この行は，@@exampleコマンドに続いています．
     @exdent この行は字下げされません．
     この行は字下げされていない行に続いています．
     @@end exampleは次の行にあります．
     @end group

以下を生成します．

     この行は，@exampleコマンドに続いています．
この行は字下げされません．
     この行は字下げされていない行に続いています．
     @end exampleは次の行にあります．

  実際は，`@exdent'コマンドは滅多に使用されません．通常幅に変えるた
め，通常は例を終りにしたり，ページをかえたりして，テキストを字下げしない
ようにします．


File: texinfo-ja.info,  Node: flushleft & flushright,  Next: noindent,  Prev: exdent,  Up: Quotations and Examples

10.11 `@flushleft'と`@flushright'
=================================

`@flushleft'と`@flushright'コマンドは，ページの左右のマージ
ンで行の終りを整えますが，テキストを補充しません．コマンドはカッコを使用
せず，単独行に書かれます．`@flushleft'と`@flushright'コマン
ドは，単独行の`@end flushleft'と`@end flushright'コマンドで
終りになります．

  例えば，以下のようにします．

     @flushleft
     このテキストは
     左揃えで書かれています．
     @end flushleft

以下を生成します．

     このテキストは
     左揃えで書かれています．

  `@flushright'は，手紙の返信先住所でよく使用される字下げの形式を生
成します．例えば，以下のようにします．

     @flushright
     これは，右揃えで書かれてたテキストの例です．
     @code{@flushright}コマンドは
     全ての行を右揃えにしますが，
     左端はバラバラのままです．
     @end flushright

以下を生成します．

                           これは，右揃えで書かれてたテキストの例です．
                                                `@flushright'コマンドは
                                           全ての行を右揃えにしますが，
                                             左端はバラバラのままです．


File: texinfo-ja.info,  Node: noindent,  Next: cartouche,  Prev: flushleft & flushright,  Up: Quotations and Examples

10.12 `@noindent': 字下げを行なわない
=====================================

例やその他の包含物は，段落を部分に切り分けます．通常，フォーマッタは例に
続くテキストを新しい段落として字下げします．時と場合によって
`@noindent'を行の最初に単独行に書いたり，それに続くテキストの前に
書くことで，これを妨げることが可能です．`@paragraphindent'を用いる
ことで，段落全体すべての字下げを行なわないことも可能です (*note
Paragraph Indenting: paragraphindent.)．

ほとんどの囲まれている部分で，コマンドの直後のスペースは無視されないので，
`@noindent'を単独行に書いた方が良いでしょう．囲まれている部分以外
では，行の最初に使用し，それにテキストを続けてもかまいません．

  例えば，以下のようにします．

     @example
     これは例です．
     @end example

     @noindent
     この行は，字下げされません．御覧のように，行の最初は
     その後も続けて全体が左寄せになっています．
     (この全体の例は，@code{@@display}と
     @code{@@end display}の間にあります．)

以下を生成します．


          これは例です．

     この行は，字下げされません．御覧のように，行の最初は
     その後も続けて全体が左寄せになっています．
     (この全体の例は，`@display'と`@end
     display'の間にあります．)

  Info出力で空白行の数を正確に調整するため，`@noindent'を含む行は，
空白行を生成せず，`@end example'行もそうしないことを覚えておいてく
ださい．

このマニュアルのTexinfoソースファイルでは，`以下を生成します'と書いてあ
るそれぞれの行の前に，`@noindent'が前置されています．

  `@noindent'コマンドの後にカッコを書かないでください．
`@noindent'は段落の外で使用されるので，それは不要です (*note Command
Syntax::)．


File: texinfo-ja.info,  Node: cartouche,  Prev: noindent,  Up: Quotations and Examples

10.13 `@cartouche':例の周りに枠を描く
=====================================

印刷されたマニュアルで，`@cartouche'コマンドは，その内容の周りに角
丸の箱を描きます．例や引用をより強調するために使用することが可能です．例
えば，例の一つの形式が強調のため枠で囲まれているマニュアルを書くことが可
能です．

  `@cartouche'は印刷されたマニュアルのみで効果があります．他の出力で
は効果がありません．

  例えば，以下のようにします．

     @example
     @cartouche
     % pwd
     /usr/local/share/emacs
     @end cartouche
     @end example

二行の例は，印刷されたマニュアルで，角丸の箱で囲まれます．


File: texinfo-ja.info,  Node: Lists and Tables,  Next: Indices,  Prev: Quotations and Examples,  Up: Top

11 リストと表
*************

Texinfoにはリストと表を作成する方法がいくつかあります．リストは黒丸また
は番号が付きます．二列の表は，最初の列の項目が強調されます．複数列の表も
サポートされています．

* Menu:

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.


File: texinfo-ja.info,  Node: Introducing Lists,  Next: itemize,  Prev: Lists and Tables,  Up: Lists and Tables

Introducing Lists
=================

リストの導入
============

Texinfoは，リストや表のテキストの字下げと，列挙されたリストの番号付けを
自動的に行います．この最後の機能は，リストを編集する場合に番号を付け直す
必要が無いので便利です．

  番号付のリストと表は，行の最初を適切な@-コマンドで開始し，単独行の対応
する`@end'コマンドで終了します．表と項目に分けられたリストのコマン
ドも，開始の@-コマンドと同じ行に書式化情報を書くことを要求します．

  例えば，`@enumerate'コマンドで列挙リストを開始し，`@end
enumerate'コマンドでリストを終了してください．項目分けリストを
`@itemize'コマンドで開始し，`@bullet'のような書式化コマンド
を同じ行に続け，`@end itemize'コマンドでリストを終了してください．

  リストのそれぞれの要素は，`@item'や`@itemx'コマンドに前置し ます．


異なる種類の表とリストの項目分けされたリストは以下のようになります．

   * 黒点有りと無しの項目分けされたリスト．

   * 番号や文字を使用した列挙リスト．

   * 強調のある二列の表．


同じ項目で列挙されたリストは以下のようになります．

  1. 黒点有りと無しの項目分けされたリスト．

  2. 番号や文字を使用した列挙リスト．

  3. 強調のある二列の表．


そして，同じ項目と@-コマンドの二列の表は以下のようになります．

`@itemize'
     黒点有りと無しの項目分けされたリスト．

`@enumerate'
     番号や文字を使用した列挙リスト．

`@table'
`@ftable'
`@vtable'
     強調のある二列の表．


File: texinfo-ja.info,  Node: itemize,  Next: enumerate,  Prev: Introducing Lists,  Up: Lists and Tables

11.1 `@itemize': 項目分けされたリストの作成
===========================================

`@itemize'コマンドは，印が必要なそれぞれの段落の最初に左のマージン
に黒丸や他の印を使用した，字下げされた段落の並びを生成します．

  行の 最初に`@itemize'を書き，項目分けされたリストを開始します．コ
マンドに続く同じ行に，文字やマークを生成するTexinfoコマンドを続けてくだ
さい．通常，`@itemize'の後に`@bullet'を書きますが，
`@minus'や結果としてInfoファイルで一文字を生成するあらゆるコマンド
や文字を使用することが可能です．全く印をを付けたくない場合は`@w'
を使用してください．(`@itemize'コマンド後に`@bullet'のような
コマンドを書く場合，`{}'を省略できます．)マークコマンドを指定しな
い場合はデフォルトは`@bullet'です．

  `@itemize'の後に，`@end itemize'の行まで．字下げされた段落自
身のテキストを書いてください．

  マージンに要求される印に対して，それぞれの段落の前に`@item'のみの
行を書いてください．`@item'にテキストを続けても構いません．

  通常，`@item'の前に空白行を書くべきです．これはInfoファイルにも空
白行を書きます．(TeXは，どちらの場合でも適切な空白を行間に挿入します．)
項目が非常に短いとき以外は，これらの空白行でリストの見ためが良くなります．

  `@itemize'の使用に続き，それが生成する出力の例は以下のようになりま
す．`@bullet'はInfoでは`*'，TeXでは丸い点を生成します．

     @itemize @bullet
     @item
     fooに対するいくつかのテキスト．

     @item
     barに対する
     いくつかのテキスト．
     @end itemize

これは，以下を生成します．

        * fooに対するいくつかのテキスト．

        * barに対する いくつかのテキスト．

項目分けされたリストには，他の項目分けされたリストを埋め込んでもかまいま
せん．黒点で印を付けたリストの中にダッシュで印を付けたリストを埋め込んだ
ものは以下のようになります．

     @itemize @bullet
     @item
     最初の項目．

     @itemize @minus
     @item
     内部の項目．

     @item
     二番目の内部の項目．
     @end itemize

     @item
     二番目の外部項目．
     @end itemize

これは，以下を生成します．

        * 最初の項目．

             - 内部の項目．

             - 二番目の内部の項目．

        * 二番目の外部項目．


File: texinfo-ja.info,  Node: enumerate,  Next: Two-column Tables,  Prev: itemize,  Up: Lists and Tables

11.2 `@enumerate': 数字や文字が付いたリストの作成
=================================================

`@enumerate'は，アイテムのラベルが黒丸の代わりに，連続した整数や文
字となる以外，`@itemize'に似ています(*note `@itemize': itemize.)．

  `@enumerate'コマンドを行の最初に書いてください．コマンドは引数を要
求しませんが，オプションとして数字または文字を受け入れます．引数を用いな
いと，`@enumerate'は数字`1'でリストを開始します．`3'のよ
うな数字の引数を用いると，コマンドはその番号からリストを開始します．
`a'または`A'のような大文字または小文字を用いると，コマンドはそ
の文字でリストを開始します．

項目分けされたリストと同じ方法で，列挙されたリストのテキストを書いてくだ
さい．列挙したいそれぞれの段落を始める前に，単独行に`@item'を置い
てください．`@item'で始まる行に他のテキストは一切書かないでくださ い．

リストの項目の間に空白行を書くべきです．一般にInfoファイルが読みやすくな
ります．

  引数の無い`@enumerate'の例は以下のようになります．

     @enumerate
     @item
     根本的な原因．

     @item
     直接の原因．
     @end enumerate

これは以下を生成します．

  1. 根本的な原因．

  2. 直接の原因．


  `3'を引数とした例は以下のようになります．

     @enumerate 3
     @item
     元となる原因．

     @item
     逆の原因．

     @item
     永続する原因．
     @end enumerate

これは以下を生成します．

  3. 元となる原因．

  4. 逆の原因．

  5. 永続する原因．


  選択肢に関する短い概要は以下のようになります．概要は，`a'の引数で
`@enumerate'を使用して組み立てられています．

  a. `@enumerate'

     引数を用いないと，番号付リストを生成し，それは数字の1で始まります．

  b. `@enumerate POSITIVE-INTEGER'

     (正の)数字の引数を用いると，その数字で番号付のリストを開始します．他の文
     章で中断されたリストを続けるために，これを使用することが可能です．

  c. `@enumerate UPPER-CASE-LETTER'

     大文字の引数を用いると，それぞれの項目がその大文字で始まる文字で印が付い
     たリストを開始します．

  d. `@enumerate LOWER-CASE-LETTER'

     小文字の引数を用いると，それぞれの項目がその小文字で始まる文字で印が付い
     たリストを開始します．

  アウトラインのように，番号付のリストを入れ子にすることも可能です．


File: texinfo-ja.info,  Node: Two-column Tables,  Next: Multi-column Tables,  Prev: enumerate,  Up: Lists and Tables

11.3 二列の表の作成
===================

`@table'は，`@itemize'(*note `@itemize': itemize.)に
似ていますが．それぞれの項目に対して名前や見出し行を指定できます．
`@table'コマンドは，二列の表を生成するために使用され，特に，用語集，
説明的な表示，そしてコマンドラインオプションの概要に役に立ちます．

* Menu:

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.


File: texinfo-ja.info,  Node: table,  Next: ftable vtable,  Prev: Two-column Tables,  Up: Two-column Tables

`@table'コマンドの使用
----------------------

二列の表を生成するために`@table'コマンドを使用してください．

  `@table'コマンドを行の最初に書き，同じ行に`@code'，
`@samp'，`@var'や，`@kbd'(*note Indicating::)のような
Texinfoの"表示"コマンドを引数として続けてください．これらのコマンドは
通常カッコで引数が続きますが，`@item'は引数を供給するので，この場
合は引数無しでコマンド名を使用します．このコマンドは，それぞれの項目の最
初の列になるテキストに適用され，強調方法を決定します．例えば，
`@code'は最初の列のテキストを`@code'コマンドで強調します．
(我々はコマンドラインオプションの`@table'に対し`@code'を勧め ます．)

  `@table'の引数として，`@asis'コマンドの使用を選択してもかま
いません．`@asis'は何もしないコマンドです．`@table'の後にこ
のコマンドを使用した場合，TeXとInfoの書式化コマンドは，最初の列の項目
を強調せず("そのまま")出力します．

  (`@table'コマンドは，ここでリストアップした以外のコマンドを用いて
作業してもかまいません．しかし，通常はカッコ内に引数をとるコマンドのみが
使用可能です．)

  それぞれの表の項目を，行の最初の`@item'コマンドで開始してください．
最初の列のテキストを`@item'コマンドと同じ行に書いてください．二番目
の列のテキストを`@item'行に続く行と，それ以降の行に書いてください．
(二番目の列の項目が空の場合，何も入力する必要はありません．)サポートする
テキストは好きな行数を書いてもかまいませんし，複数の段落にしてもかまいま
せん．しかし，`@item'と同じ行のテキストのみ，脚注も含めて，最初の
列に配置されます．

  通常，`@item'行の前に空白行を書くべきです．これはInfoファイルで空
白を書きます．項目が非常に短いとき以外は，空白行は見ためが良くなります．

  例えば，以下の表は最初の列を`@samp'で強調しています．

     @table @samp
     @item foo
     これは@samp{foo}に対する
     テキストです．

     @item bar
     @samp{bar}に対するテキストです．
     @end table

これは，以下を生成します．

`foo'
     これは`foo'に対する テキストです．

`bar'
     @samp{bar}に対するテキストです．

  二行以上の名前の項目を一つの塊のテキストでリストアップしたい場合，
`@itemx'コマンドを使用してください．(*Note `@itemx': itemx.)


File: texinfo-ja.info,  Node: ftable vtable,  Next: itemx,  Prev: table,  Up: Two-column Tables

11.3.1 `@ftable'と`@vtable'
---------------------------

`@ftable'と`@vtable'コマンドは，`@ftable'が自動的に表
の最初の列のそれぞれの項目を関数の索引に入れ，`@vtable'が自動的に
表の最初の列のそれぞれの項目を変数の索引に入れる以外，`@table'コマ
ンドと同じです．これは，索引作成の仕事を単純にします．`@item'コマ
ンドと同じ行の項目のみ索引になり，それらはその行の表示と全く同じ形式で索
引になります．索引の詳細は，*Note Indices::.

  `@ftable'や`@vtable'を使用している二列の表は，行の最初に@-コ
マンドを書くことで開始し，同じ行に引数として`@table'コマンドに対す
るものと全く同じものを，`@code'コマンドのようなTexinfoコマンドで続
けてください．そして，単独行で`@end ftable'や`@end vtable'コ
マンドを使用して終りにしてください．

  前のセクションの`@table'の例を参照してください．


File: texinfo-ja.info,  Node: itemx,  Prev: ftable vtable,  Up: Two-column Tables

11.3.2 `@itemx'
---------------

同じ項目で，最初の列の項目が二つ以上あり，それぞれを単独行に現したい場合，
`@itemx'コマンドを表の中で使用してください．`@itemx'を最初の
項目以外の全てに使用してください．`@itemx'は常に`@item'コマ
ンドに続けるべきです．`@itemx'コマンドは，最初の列のテキストの上に
余分な空白を生成しない以外は，`@item'と全く同じように動作します．

  例えば，以下のようにします．

     @table @code
     @item upcase
     @itemx downcase
     この二つの関数は，引数として文字や文字列を受け入れ，対応した大文字(小文字)
     の文字や文字列を返します．
     @end table

これは以下を生成します．

`upcase'
`downcase'
     この二つの関数は，引数として文字や文字列を受け入れ，対応した大文字(小文字)
     の文字や文字列を返します．

(この例は，二列の表に複数行をサポートしているテキストを表現していることに
注意してください．)


File: texinfo-ja.info,  Node: Multi-column Tables,  Prev: Two-column Tables,  Up: Lists and Tables

11.4 複数列の表
===============

`@multitable'で，それぞれの列が希望の幅を持つ，あらゆる数の列を持
つ表を構築することが可能となります．

  単独の`@multitable'行で列の幅を定義し，`@tab'コマンドで分け
られた列で，`@item'コマンドに続けて，実際の表のそれぞれの行を書き
ます．最終的に，`@end multitable'で表を終了します．詳細は以下のセ
クションにあります．

* Menu:

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.


File: texinfo-ja.info,  Node: Multitable Column Widths,  Next: Multitable Rows,  Up: Multi-column Tables

11.4.1 複数列の表の幅
---------------------

複数行の表の列の幅を二つの方法で定義することが可能です．行の長さを小数と
する方法，または行のプロトタイプを使用する方法です．二つの方法を混ぜたも
のはサポートしていません．どちらの場合でも，`@multitable'コマンド
と同じ行で幅は完全に定義されます．

  1. 行の長さ全体の小数として列の幅を指定するため，`@columnfractions'と
     (1より小さい)10進数を`@multitable'コマンドの後に以下のように書いて
     ください．

          @multitable @columnfractions .33 .33 .33

     小数部は上記がそうでないように，和が正確に1.0になる必要はありません．こ
     れで，行全体を満たす必要の無い表を生成することができます．好みで0を前置
     することが可能です．

  2. 行のプロトタイプを指定するため，それぞれの列で最も長い項目を，
     `@multitable'コマンドの後にカッコで囲んで書いてください．例えば，
     以下のようにします．

          @multitable {some text for column one} {for column two}

     最初の列は，`some text for column
     one'で植字される幅を持ち，二列目は`for column two'の幅を持ちます．

     プロトタイプ項目を表に書く必要はありません．

     この例で単純なテキストを使用しましたが，プロトタイプ項目にTexinfoコマン
     ドを含めることが可能です．`@code'のようなマークアップコマンドは，
     特に役に立つ可能性が高いものです．



File: texinfo-ja.info,  Node: Multitable Rows,  Prev: Multitable Column Widths,  Up: Multi-column Tables

11.4.2 複数列の表の行
---------------------

列の幅を定義する`@multitable'(前のセクション参照)の後で，
`@item'で複数列の表の本体にそれぞれの行を開始し，列項目を
`@tab'で分けます．改行は表の本体で特別扱いされず，必要な場所でソー
スファイルの入力行を改行してもかまいません．

  複数列の表の完全な例は以下のようになります(`The GNU Emacs Manual'か
らのテキストで，*note Splitting Windows: (emacs)Split Window.)．

     @multitable @columnfractions .15 .45 .4
     @item Key @tab Command @tab Description
     @item C-x 2
     @tab @code{split-window-vertically}
     @tab Split the selected window into two windows,
     with one above the other.
     @item C-x 3
     @tab @code{split-window-horizontally}
     @tab Split the selected window into two windows
     positioned side by side.
     @item C-Mouse-2
     @tab
     @tab In the mode line or scroll bar of a window,
     split that window.
     @end multitable

以下を生成します．

Key         Command                          Description
C-x 2       `split-window-vertically'        Split the selected window
                                             into two windows, with one
                                             above the other.
C-x 3       `split-window-horizontally'      Split the selected window
                                             into two windows positioned
                                             side by side.
C-Mouse-2                                    In the mode line or scroll
                                             bar of a window, split that
                                             window.


File: texinfo-ja.info,  Node: Indices,  Next: Insertions,  Prev: Lists and Tables,  Up: Top

12 索引
*******

Texinfoを使用すると，項目を手動で並べ替えしたりページ順に揃える必要も無
く索引を生成できます．索引では，項目はアルファベット順(1) (*note
Indices-Footnote-1::)に，それぞれの項目の記述を見つけ
る方法の情報と共にリストアップされます．印刷されたマニュアルでは，この情
報にはページ番号が含まれます．Infoファイルでは，この情報は参照された最初
のノードへ導くメニュー項目となります．

Texinfoは，前もって定義されている索引の種類も提供しています．関数の索引，
変数の索引，概念の索引などです．索引を統合したり，典型的な目的以外のため
に使用することができます．好みで独自の索引も定義可能です．

* Menu:

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                 of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.


File: texinfo-ja.info,  Node: Indices-Footnotes,  Up: Indices

  (1) 訳注:あ いうえお順には，現在対応していません．


File: texinfo-ja.info,  Node: Index Entries,  Next: Predefined Indices,  Prev: Indices,  Up: Indices

12.1 索引項目の作成
===================

索引項目を作成するとき，人々が何かを探す際に異なる方法で行なえるように考
えることは良いことです．何かを探すとき，人が変われば単語も_変わりま
す_．役に立つ索引には，人々が使用する可能性のある，全ての異なる単語で索
引にされた項目があります．例えば，ある読者は単語"Index"は一般的な概念
なので，索引の二文字の名前は"Indices, two-letter names"にあって当然だ
と考えるかもしれません．しかし，もう一人の読者は，二文字の名前の特定の概
念を覚えていて，"Two letter names for indices"としてリストアップされて
いる項目を探すかもしれません．良い索引は，両方の項目を持ち，それは両方の
読者を助けるでしょう．

植字のように，索引の構築は高度に熟練した専門的な芸術品で，自分で構築する
必要が無ければ正当に評価できない繊細なものです．

本の終りに索引を印刷する，またはInfoファイルで索引メニューを作成する方法
の情報は，*Note Printing Indices & Menus::.


File: texinfo-ja.info,  Node: Predefined Indices,  Next: Indexing Commands,  Prev: Index Entries,  Up: Indices

12.2 前もって定義されている索引
===============================

Texinfoは六つの前もって定義されている索引を提供しています．

   * "概念の索引(concept index)"は記述してある概念をリストアップします．

   * "関数の索引(function
     index)"は(ライブラリのエントリポイントのような)
     関数をリストアップします．

   * "変数の索引(variables index)"は(ライブラリのグローバル変数のような)
     変数をリストアップします．

   * "キーストロークの索引(keystroke index)"はキーボードコマンドをリスト
     アップします．

   * "プログラムの索引(program
     index)"はプログラム名をリストアップします．

   * "データ型の索引(data type
     index)"は(ヘッダファイルの構造体の定義のよ
     うな)データ型をリストアップします．

全てのマニュアルがこれらの全てを必要とするわけではなく，ほとんどのマニュ
アルはそのいくつかを使用します．このマニュアルには二つの索引があります．
概念の索引と，@-コマンドの索引(実際には関数索引ですが，章見出しでコマン
ド索引と呼ばれています)です．二つ以上の索引を，`@synindex'や
`@syncodeindex'コマンドを使用して，一つに統合することが可能です． *Note
Combining Indices::.


File: texinfo-ja.info,  Node: Indexing Commands,  Next: Combining Indices,  Prev: Predefined Indices,  Up: Indices

12.3 索引の項目の定義
=====================

索引を作成するデータは，Texinfoソースファイル中に散らばってる多くの個別
の索引コマンドからきます．それぞれのコマンドは，一つの項目を特定の索引に
加わるよう伝えます．書式化後，索引は現在のページ番号や参照するノード名を
与えます．

索引項目は，行の最初に索引コマンドを書き，残りの行に項目と続けることから
成り立ちます．

  例えば，このセクションは，概念索引のため五つの項目が続いています．

     @cindex Defining indexing entries
     @cindex Index entries
     @cindex Entries for an index
     @cindex Specifying index entries
     @cindex Creating index entries

  それぞれの前もって定義された索引は，それ自身の索引コマンドがあります
-- それは，概念索引に対する`@cindex'，関数索引に対する`@findex'
などです．

概念の索引項目は，テキストから成り立ちます．索引を書く最も良い方法は，簡
潔且つ明確な項目を選択することです．こうすることが可能な場合，項目が大文
字化されておらず，文の内部に現れるものを書く方が，索引は見栄えが良くなり
ます．(常に大文字で書かれる固有名前や頭字語を大文字化してください．)これ
は，我々がほとんどのGNUマニュアルの索引で使用する慣習している事実です．

簡潔且つ明確な項目を作成する方法を知らない場合，より長い明確なものを作成
してください -- 簡潔で紛らわしいものを作成しないでください．項目の多く
が数単語の場合，異なる慣習(それぞれの項目の最初の単語を大文字にする)を使
用した方が索引は良く見えます．しかし，CやLispの関数名やシェルコマンドの
ような大文字小文字を識別する名前を大文字化してはいけません．それはスペル
エラーとなります．

  どちらを慣習として使用した場合でも，それを慣習として使用してください！

概念の索引以外の索引の項目は，プログラム言語やプログラム名のシンボル名で
す．これらの名前は通常大文字小文字を識別するので，それらが要求する大文字
または小文字を使用してください．

デフォルトで，概念の索引の項目は小さなローマンフォントで印刷され，他の索
引の項目は`@code'フォントで印刷されます．項目の一部の印刷方法を，
ファイル名に対する`@file'や，強調に対する`@emph'のような (*note Marking
Text::)，通常のTexinfoコマンドで変更してもかまいません． 

  前もって定義されている六つの索引コマンドは以下のものがあります．

`@cindex CONCEPT'
     CONCEPTに対して概念の索引の項目を作成します．

`@findex FUNCTION'
     FUNCTIONに対して関数の索引の項目を作成します．

`@vindex VARIABLE'
     VARIABLEに対して変数の索引の項目を作成します．

`@kindex KEYSTROKE'
     KEYSTROKEに対してキー索引の項目を作成します．

`@pindex PROGRAM'
     PROGRAMに対してプログラムの索引の項目を作成します．

`@tindex DATA TYPE'
     DATA TYPEに対してデータ型の索引の項目を作成します．

     *注意:*索引項目にコロンを使用しないでください．Infoでは，コロンは
     ノード名と項目名を分離するので，項目自身のコロンでInfoは混乱します．メ
     ニュー項目の構造の詳細は，*Note The Parts of a Menu: Menu Parts.

それらの標準的な目的のために，前もって定義されている索引を実際に使用する
ことを要求されているわけではありません．例えば，Cプリプロセッサマクロの
索引を望む場合を考えます．それらに対し`@findex'コマンドを書くこと
で，それらを実際の関数に属する関数索引に書くことが可能です．そして，番号
付けされていない章として"関数の索引"を印刷するとき，タイトルに`関数と
マクロの索引'を与えることで読者に対しも全く矛盾しません．または，マクロ
を`@tindex'コマンドでデータ型に書き，それに適した索引タイトルを与
えると読者は理解できるでしょう．(*Note Printing Indices & Menus::.)


File: texinfo-ja.info,  Node: Combining Indices,  Next: New Indices,  Prev: Indexing Commands,  Up: Indices

12.4 索引の統合
===============

索引の一つがおかしいくらい小さいなどの理由から，関数と概念のように二つに
分離されている索引を統合したいこともあります．

  `@cindex'コマンドを`@findex'コマンドの代わりに書くことで関数
を概念ど索引に書き，`関数の索引'と印刷するのではなく`関数と概念の索引'
というタイトルで概念索引を印刷することで，一貫したマニュアルを生成するこ
とは可能でしょう．しかし，これは強力な手続きではありません．それはドキュ
メントが，分離されている関数の索引を持つように設計されていない他のドキュ
メントに挿入される場合のみ動作します．そのようなドキュメントにドキュメン
トを挿入した場合，ドキュメントの関数と他から持って来たものは一緒になりま
せん．また，関数名は概念の索引の右側に表示するため，`@code'のカッ
コの間にそれらの一つを個別に囲む必要もあります．

* Menu:

* syncodeindex::                How to merge two indices, using `@code'
                                 font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                 default font of the merged-to index.


File: texinfo-ja.info,  Node: syncodeindex,  Next: synindex,  Up: Combining Indices

12.4.1 `@syncodeindex'
----------------------

関数と概念を一つの索引に統合したいとき，関数を`@findex'で索引にし，
概念を`@cindex'で索引にし，そして関数の索引の項目を概念索引にリダ
イレクトするため`@syncodeindex'コマンドを使用すべきです． 

  `@syncodeindex'コマンドは二つの引数をとります．それらはリダイレク
ト元の索引名と，リダイレクト先の索引名です．テンプレートは以下のようにな
ります．

     @syncodeindex FROM TO

  この目的のため，索引には二文字の名前が与えられています．

`cp'
     概念の索引

`fn'
     関数の索引

`vr'
     変数の索引

`ky'
     キーの索引

`pg'
     プログラムの索引

`tp'
     データ型の索引

  `@syncodeindex'コマンドを，Texinfoファイルの最初にend-of-header行
の前または直後に書いてください．例えば，関数の索引を概念の索引に統合する
ため以下のように書いてください．

     @syncodeindex fn cp

これで，関数の索引にとして指定されている全ての項目は，代わりに概念索引に
統合されます．

変数の索引と関数の索引の両方を概念の索引に統合するため以下のように書きま
す．

     @syncodeindex vr cp
     @syncodeindex fn cp

  `@syncodeindex'コマンドは`from'索引(リダイレクトされる索引)からの
全ての項目を`@code'フォントにし，それは，項目がリダイレクト先の索
引で使用してデフォルトフォントが何であろうと優先します．このように，関数
名を関数索引から概念索引にリダイレクトする場合，全ての関数名は期待したよ
うに`@code'フォントで印刷されます．


File: texinfo-ja.info,  Node: synindex,  Prev: syncodeindex,  Up: Combining Indices

12.4.2 `@synindex'
------------------

`from'索引項目を`@code'フォントに置き換えない以外，
`@synindex'コマンドは`@syncodeindex'コマンドとほとんど同じで
す．その代わりにローマンフォントに置き換えます．このため，概念の索引を関
数の索引に統合するとき`@synindex'を使用します．

本の終りに索引を印刷したり，Infoファイルに索引メニューを作成する詳細は，
*Note Printing Indices & Menus::.


File: texinfo-ja.info,  Node: New Indices,  Prev: Combining Indices,  Up: Indices

12.5 新しい索引の定義
=====================

前もって定義されている索引に加えて，`@defindex'と
`@defcodeindex'コマンドを，新しい索引を定義するために使用してもか
まいません．これらのコマンドは，索引項目の印に使用する新しい索引を作成す
る@-コマンドを作成します．`@defindex'コマンドは以下のように使用し ます．

     @defindex NAME

  索引の名前は`au'のような二文字の単語にするべきです．例えば，以下のよ
うにします．

     @defindex au

  これは`au'索引と呼ばれる新しい索引を定義します．同時に，新しい索引
作成コマンド`@auindex'を作成し，索引項目の印付けに使用することが可
能になります．新しい索引コマンドを，前もって定義されている索引コマンドと
全く同じように使用してください．

  例えば，セクション見出しに概念索引項目と二つの`au'索引項目が続いた
例は以下のようになります．

     @section Cognitive Semantics
     @cindex kinesthetic image schemas
     @auindex Johnson, Mark
     @auindex Lakoff, George

(明らかに，`au'はここで"著者"の省略として提供されています．)
Texinfoは`index'を使用した索引の名前を連結して，新しい索引コマンド
を構成します．このため，`au'索引の定義は自動的に`@auindex'コ
マンドの作成を行います．

  前もって定義されている索引で使用したように，`@printindex'コマンド
を索引を印刷するために使用してください．例えば以下のようにします．

     @node Author Index, Subject Index, , Top
     @unnumbered Author Index

     @printindex au

  印刷物でローマンフォントの代わりに`@code'フォントで項目を印刷する
以外，`@defcodeindex'は`@defindex'コマンドに似ています．この
ように，それは`@cindex'コマンドより`@findex'コマンドに似てい ます．

  新しい索引をTexinfoファイルのend-of-headerの内部か直後に，あらゆる
`@synindex'や`@syncodeindex'コマンド(*note Texinfo File
Header::)の前で使用すべきです．


File: texinfo-ja.info,  Node: Insertions,  Next: Breaks,  Prev: Indices,  Up: Top

13 特別なものの挿入
*******************

Texinfoは，カッコのようなTexinfoで特別な意味を持つ文字を挿入するためと，
入力可能な単純な文字に対応しない他の画像要素に対するコマンドもいくつかあ
ります．

* Menu:

* Braces Atsigns::              How to insert braces, `@'.
* Inserting Space::             How to insert the right amount of space
                                 within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                 and the copyright symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                 expansion of macros, errors, etc.
* Footnotes::                   How to include footnotes.
* Images::                      How to include graphics.


File: texinfo-ja.info,  Node: Braces Atsigns,  Next: Inserting Space,  Prev: Insertions,  Up: Insertions

13.1 @とカッコの挿入
====================

`@'と弓カッコはTexinfoで特別な文字です．これらの文字がテキストに現
れるように挿入するため，Texinfoが誤解することを避けるため，`@'をこ
れらの文字の前に書く必要があります．

  これらのコマンドの後にカッコを書かないでください．それらは不要です．

* Menu:

* Inserting An Atsign::         How to insert `@'.
* Inserting Braces::            How to insert `{' and `}'.


File: texinfo-ja.info,  Node: Inserting An Atsign,  Next: Inserting Braces,  Prev: Braces Atsigns,  Up: Braces Atsigns

13.1.1 `@'を@@で挿入する
------------------------

`@@'は，印刷物やInfoで単一の`@'を意味します．

  `@@'コマンドの後にカッコを書かないでください．


File: texinfo-ja.info,  Node: Inserting Braces,  Prev: Inserting An Atsign,  Up: Braces Atsigns

13.1.2 `{'と`}'を@{と@}で挿入する
---------------------------------

`@{'は印刷物やInfoで単一の`{'を意味します．

  `@}'は印刷物やInfoで単一の`{'を意味します．

  `@{'や`@}'コマンドの後にカッコを書かないでください．


File: texinfo-ja.info,  Node: Inserting Space,  Next: Inserting Accents,  Prev: Braces Atsigns,  Up: Insertions

13.2 空白の挿入
===============

以下のセクションでは，文の中や後の様々な種類の空白を制御するコマンドを記
述します．

* Menu:

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.


File: texinfo-ja.info,  Node: Not Ending a Sentence,  Next: Ending a Sentence,  Up: Inserting Space

13.2.1 文を終了しない
---------------------

ピリオドや，感嘆符や疑問符が文の中か終りにあるかに依存して，植字されたピ
リオドの後に，少しまたは多くの空白が挿入されます．ピリオドが文を終るとき
と省略で使用されるときとを常に決定できるわけではないので，特別なコマンド
が必要な状況もあります．通常，Texinfoはピリオドの扱い方を推測できるので，
特別なコマンドは必要ありません．タイプライターを使用するときのようにピリ
オドを入力し，それは二つの空白をピリオド，疑問符，または感嘆符の後に文の
終りとして書くことを意味しています．

余分な空白を続けるべきではないピリオド，疑問符，感嘆符，またはコロンの後
に`@:'コマンドを使用してください．例えば，文の終りではない省略の
終りのピリオドの後に`@:'を使用してください．

  例えば，以下のようにします．

     The s.o.p.@: has three parts ...
     The s.o.p. has three parts ...

以下を生成します．

     The s.o.p. has three parts ...
     The s.o.p. has three parts ...

(ついでながら，`s.o.p.'は"Standard Operating Procedure"の略を意味
します．)

  `@:'はInfo出力で効果はありません．`@:'の後にカッコを置かない
でください．


File: texinfo-ja.info,  Node: Ending a Sentence,  Next: Multiple Spaces,  Prev: Not Ending a Sentence,  Up: Inserting Space

13.2.2 文を終える
-----------------

単一の大文字で終る文の終りのピリオドの代わりに`@.'，感嘆符の代わ
りに`@!'，そして疑問符の代わりに`@?'を使用してください．
そうしない場合，TeXは文字を省略だと考え，正しい文の終りの空白を挿入し
ません．例は以下のようになります．

     Give it to M.I.B. and to M.E.W@.  Also, give it to R.J.C@.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

以下を生成します．

     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

  Infoファイル出力では，`@.'は単なる`.'と同じです．
`@!'と`@?'も同様です．

  Texinfoの`@:'と`@.'のマージンは，Emacsの文の移動コマンド (*note
Sentences: (emacs)Sentences.)でうまく動作します．

  これらのコマンドの後にカッコを書かないでください．


File: texinfo-ja.info,  Node: Multiple Spaces,  Next: dmn,  Prev: Ending a Sentence,  Up: Inserting Space

13.2.3 複数のスペース
---------------------

通常TeXは，複数の空白文字(スペース，タブと，改行)を単一のスペースに縮
めます．一方Info出力では，改行をスペースにする以外，入力した通りの空白を
維持します．これは，Texinfoドキュメントの文の終りの二つのスペースを置く
ことが重要だという理由のためです．

例を目的としたり(プログラムが入力として複数の空白を扱うこと)，見出しやリ
ストの単純な見栄えのため，複数の連続した空白を実際に挿入したいこともあり
ます．Texinfoは三つのコマンドをサポートします．`@SPACE'，
`@TAB'，そして`@NL'で，それらは全て出力に単一の
スペースを挿入します．(ここでは，`@SPACE'は空白に続く
`@'文字，すなわち`@ 'を現し，`TAB'と`NL'はタブ文字と
文の終り，すなわち，`@'が行の最後の文字のときを現します．)

  例えば，以下のようにします．
     Spacey@ @ @ @
     example.

以下を生成します．

     Spacey    example.

  可能性のあるもう一つの`@SPACE'の利用法は， `@multitable'(*note
Multi-column Tables::)に包括されました．

  これらのコマンドにカッコを続けないでください．

  改行されないスペースを生成するために，*Note non-breakable space:
w.を参照 してください．


File: texinfo-ja.info,  Node: dmn,  Prev: Multiple Spaces,  Up: Inserting Space

13.2.4 `@dmn'{DIMENSION}: 寸法単位の書式化
------------------------------------------

寸法単位に対し，数字と省略の間に小さな空白または空白を全く置かないで，
`12pt'や`8.5in'を書きたいときもあります．こうする
ため，`@dmn'コマンドを使用することが可能です．このコマンドの見ため
は，TeXは適切な植字のためちょうどぴったりの空白を挿入します．Infoファ
イルでは空白が要求されないので，Info書式化コマンドでは空白を全く挿入しま
せん．

  `@dmn'コマンドを使用するため，数字を書き，間に空白を置かずそれに
`@dmn'続けてカッコ内に寸法単位を続けてください．例えば以下のように
します．

     A4 paper is 8.27@dmn{in} wide.

以下を生成します．

     A4 paper is 8.27in wide.

  全ての人がこの形式を使用するわけではありません．Texinfoファイルでは
`8.27@dmn{in}'より`8.27 in.@:'や`8.27 inches'
を好む人もいます．しかしこれらの場合，フォーマッタは数字と寸法単位の間に
改行を挿入するかもしれないので，`@w'(*note w::)を使用してください．
また，文中の省略の後にピリオドを書く場合，TeXが余分の空白を挿入するの
を避けるため，ここで見たように，ピリオドの後に`@:'を書いてください．
*Note Not Ending a Sentence::.


File: texinfo-ja.info,  Node: Inserting Accents,  Next: Dots Bullets,  Prev: Inserting Space,  Up: Insertions

13.3 アクセントの挿入
=====================

フローティングアクセントを挿入するためにTexinfoが提供しているコマンドの
表は以下のようになります．アルファベットでない名前のコマンドは引数の周り
にカッコをとりません(それは次の文字をとります)．(例外:`@,'は引数の
周りにカッコを_とります_．)これは，言語によってはアクセントがある文
字が普通のものもあるので，ソースを入力や査読で可能な限り便利にするためで
す．

コマンド          出力     意味するもの
@"o               o"       ウムラートアクセント
@'o               o'       アキュートアクセント
@,{c}             c,       セディラアクセント
@=o               o=       マクロン/オーバーバーアクセント
@^o               o^       サーカムフレックスアクセント
@`o               o`       グレーブアクセント
@~o               o~       チルダアクセント
@dotaccent{o}     o.       オーバードットアクセント
@H{o}             o''      ロングハンガリアンアクセント
@ringaccent{o}    o*       リングアクセント
@tieaccent{oo}    oo[      ティーアフターアクセント
@u{o}             o(       ブレーブアクセント
@ubaraccent{o}    o_       アンダーバーアクセント
@udotaccent{o}    .o       アンダードットアクセント
@v{o}             o<       ハケックやチェックアクセント

以下の表では，英語以外の言語で共通に使用される他の文字を挿入するTexinfo
コマンドをリストアップします．

@exclamdown{}       !       さかさまの !
@questiondown{}     ?       さかさまの ?
@aa{},@AA{}         aa,AA   丸を持つ a，A
@ae{},@AE{}         ae,AE   くっついた ae，AE
@dotless{i}         i       ドットの無い i
@dotless{j}         j       ドットの無い j
@l{},@L{}           /l,/L   押え付けられた L，l
@o{},@O{}           /o,/O   スラッシュ付の O，o
@oe{},@OE{}         oe,OE   くっついた oe，OE
@ss{}               ss      エスツェットや尖った S


File: texinfo-ja.info,  Node: Dots Bullets,  Next: TeX and copyright,  Prev: Inserting Accents,  Up: Insertions

13.4 省略と黒点の挿入
=====================

"省略(ellipsis)"(ドットの行)はピリオドの列として植字されないので，特
別なコマンドがTexinfoの省略で使用されます．`@bullet'コマンドも特別
です．それぞれのコマンドは，カッコの組`{}'が続き，コマンド名とカッ
コの間には空白を用いません．(続けて他のテキストを使用できるので，これら
のコマンドにはカッコを使用する必要があります．カッコが無い場合，フォーマッ
タは混乱するでしょう．詳細は，*Note @-Command Syntax: Command Syntax.)

* Menu:

* dots::                        How to insert dots ...
* bullet::                      How to insert a bullet.


File: texinfo-ja.info,  Node: dots,  Next: bullet,  Up: Dots Bullets

13.4.1 `@dots'{} (...)と`@enddots'{} (....)
-------------------------------------------

連続した三つの点になり，適切な空白がある`...'のような省略を生成する
ため，`@dots{}'コマンドを使用してください．入力ファイルに単純に
三つのピリオドを書かないでください．それはInfo出力では動作しますが，印刷
されたマニュアルではピリオドの間に間違った量の空白を生成します．

  同様に，`@enddots{}'コマンドは文の終りの省略(四つの点)を生成しま
す....


File: texinfo-ja.info,  Node: bullet,  Prev: dots,  Up: Dots Bullets

13.4.2 `@bullet'{} (*)
----------------------

大きな黒点やそれに近いものを生成するために`@bullet{}'を使用して
ください．Infoではアスタリスクが使用されます．

  これは黒点です:*

  `@itemize'で`@bullet'を使用するときは，`@itemize'が供
給するので，カッコを入力する必要はありません．(*Note `@itemize':
itemize.)


File: texinfo-ja.info,  Node: TeX and copyright,  Next: pounds,  Prev: Dots Bullets,  Up: Insertions

13.5 TeXと著作権シンボルの挿入
==============================

ロゴ`TeX'は特別な形での植字で，@-コマンドが必要です．著作権シンボル
`(C)'も特別です．それぞれのコマンドはカッコの組`{}'が続
き，コマンド名とカッコの間に空白は使用しません．

* Menu:

* tex::                         How to insert the TeX logo.
* copyright symbol::            How to use `@copyright{}'.


File: texinfo-ja.info,  Node: tex,  Next: copyright symbol,  Up: TeX and copyright

13.5.1 `@TeX'{} (TeX)
---------------------

`TeX'を生成するため`@TeX{}'コマンドを使用してください．印刷さ
れたマニュアルでは，これは三つの通常の文字と異なる特別なロゴとなります．
Infoではそれは`TeX'のように見えます．`@TeX{}'コマンドは
`T'と`X'が大文字となっている，Texinfoコマンドの中ではユニーク
なものです．


File: texinfo-ja.info,  Node: copyright symbol,  Prev: tex,  Up: TeX and copyright

13.5.2 `@copyright{}' ((C))
---------------------------

`(C)'を生成するために`@copyright{}'コマンドを使用してく
ださい．印刷されたマニュアルでは，これは丸の中の`c'になり，Infoでは
これは`(C)'になります．


File: texinfo-ja.info,  Node: pounds,  Next: minus,  Prev: TeX and copyright,  Up: Insertions

13.6 `@pounds'{} (#): ポンド英貨
================================

`#'を生成するために`@pounds{}'コマンドを使用してください．
印刷されたマニュアルでは，これは通貨ポンド銀貨のシンボルとなります．Info
では`#'になります．他の通貨シンボルは残念ながら利用不可能です．


File: texinfo-ja.info,  Node: minus,  Next: math,  Prev: pounds,  Up: Insertions

13.7 `@minus'{} (-): 負の記号の挿入
===================================

負記号を生成するために`@minus{}'コマンドを使用してください．等幅
フォントで，これは単一のハイフンですが，プロポーショナルフォントではシン
ボルは負記号の慣習的な長さになります--ハイフンより少し長く，em-dashより
短くなります．

     `-'は`@minus{}'で生成された負記号で，

     `-'は文字`-'で生成したハイフンで，

     `--'はテキストのem-dashです．

Infoで使用される等幅フォントでは，`@minus{}'はハイフンと同じです．

  幅の違いは，使用する等幅フォントで作成されないので，`@code'や
`@example'で`@minus{}'を使用すべきではありません．

  項目分けされたリストのそれぞれの項目をはじめる印を指定するために
`@minus'を使用するとき，カッコを入力する必要はありません (*note
`@itemize': itemize.)．


File: texinfo-ja.info,  Node: math,  Next: Glyphs,  Prev: minus,  Up: Insertions

13.8 `@math': 数式の挿入
========================

短い数式を`@math'コマンドで書くことができます．カッコの間に以下の
ように数式を書いてください．

     @math{(a + b)(a + b) = a^2 + 2ab + b^2}

これはInfoでは以下を生成します．

     (a + b)(a + b) = a^2 + 2ab + b^2

  このように，`@math'コマンドはInfo出力で効果がありません．
`makeinfo'は入力をそのまま再生成し，数学的な解釈を全く行ないませ ん．

  `@math'は`@tex'を暗黙に指定します．これは(上記の例のように)
上付文字と下付文字を書くことを可能にするだけでなく，あらゆるプレーンの
TeXの数学的なコントロールシーケンスを使用することも可能にします．これ
らのコマンドに対し`@'の代わりに`\'を使用するのは従来通りです．
以下のようにします．
     @math{\sin 2\pi \equiv \cos 3\pi}

InfoとHTMLでは以下のような入力になります．
     \sin 2\pi \equiv \cos 3\pi

  `\'は`@math'内部のエスケープ文字なので，文字通りのバックスラッ
シュを得るために`@\'を使用することが可能です(`\\'はTeXでは
動作しますが，Infoでは文字通り`\\'になるでしょう)．`\'は通常，
文字通り`\'を生成するので，`@\'は`@math'の外部では定義 されていません．

  等式を表示するために，現在はTeXを直接使用する必要があります (*note
Raw Formatter Commands::)．


File: texinfo-ja.info,  Node: Glyphs,  Next: Footnotes,  Prev: math,  Up: Insertions

13.9 例のためのglyph
====================

Texinfoでは，コードは`@example'と`@end example'や `@lisp'と`@end
lisp'で区切られた例として表示されることがよく
あります．そのような例では，`=>'や`==>'を使用
して，評価の結果や展開を示すことが可能です．同様に，印刷物，エラーメッセー
ジ，等式，そしてポイントの位置を示すglyphを挿入するコマンドがあります．

glyph挿入コマンドは，例の内部で使用する必要はありませんが，ほとんどのも
のはそうなっています．全てのglyph挿入コマンドには左右のカッコの組が続き
ます．

* Menu:

* Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.


File: texinfo-ja.info,  Node: Glyphs Summary,  Next: result,  Up: Glyphs

13.9.1 glyphの概要
------------------

個別のglyphコマンドには以下のものがあります．

=>
     `@result{}'は，式の結果を示します．

==>
     `@expansion{}'はマクロ展開の結果を表示します．

-|
     `@print{}'は出力の表示を示します．

error-->
     `@error{}'は次のテキストがエラーメッセージだということを示します．

==
     `@equiv{}'は，二つのフォームが正確に等しいことを示します．

-!-
     `@point{}'はポイントの場所を表示します．

* Menu:

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::


File: texinfo-ja.info,  Node: result,  Next: expansion,  Prev: Glyphs Summary,  Up: Glyphs

13.9.2 `@result{}' (=>): 評価結果を示す
---------------------------------------

式の評価の結果を示すため`@result{}'を使用してください．

  `@result{}'コマンドはInfoでは`=>'として，印刷物では
棒が二重の矢印として表示されます．

  このため，以下のようにします．

     (cdr '(1 2 3))
         => (2 3)

"`(cdr '(1 2 3))'を評価すると`(2 3)になる'"と読めるでしょう．


File: texinfo-ja.info,  Node: expansion,  Next: Print Glyph,  Prev: result,  Up: Glyphs

13.9.3 `@expansion{}' (==>): 展開を示す
---------------------------------------

式がマクロ呼び出しのとき，新しい式に展開します．`@expansion{}'コ
マンドで展開の結果を示すことができます．

  `@expansion{}'コマンドはInfoでは`==>'として，印刷
物では平らな長い矢印として表示されます．

  例えば，以下のようにします．

     @lisp
     (third '(a b c))
         @expansion{} (car (cdr (cdr '(a b c))))
         @result{} c
     @end lisp

以下を生成します．

     (third '(a b c))
         ==> (car (cdr (cdr '(a b c))))
         => c

以下のように読めるでしょう．

     `(third '(a b c))'は`(car (cdr (cdr '(a b c))))'の展開で，式の
     評価結果は`c'です．

この状況では，`@expansion{}'と`@result{}'コマンドが五個
の空白で字下げされている場合，例の見ためが良くなることもよくあります．


File: texinfo-ja.info,  Node: Print Glyph,  Next: Error Glyph,  Prev: expansion,  Up: Glyphs

13.9.4 `@print{}' (-|): 出力を示す
----------------------------------

式が実行中の出力を表示するときもあります．`@print{}'コマンドで印
刷物ということを示すことができます．

  `@print{}'コマンドはInfoでは`-|'とそれに似たものとし
て，印刷物では，水平のダッシュが垂直のバーにぶつかったものとして表示され
ます．

  以下の例では，印刷されたテキストは`-|'で示され，式の値は最後
の行に続いています．

     (progn (print 'foo) (print 'bar))
         -| foo
         -| bar
         => bar

Texinfoソースファイルで，この例は以下のように書きます．

     @lisp
     (progn (print 'foo) (print 'bar))
         @print{} foo
         @print{} bar
         @result{} bar
     @end lisp


File: texinfo-ja.info,  Node: Error Glyph,  Next: Equivalence,  Prev: Print Glyph,  Up: Glyphs

13.9.5 `@error{}' (error-->): エラーメッセージを示す
----------------------------------------------------

コードの一部は，評価したときエラーとなる可能性があります．
`@error{}'コマンドでエラーメッセージを示すことが可能です．

  `@error{}'コマンドはInfoでは`error-->'として，印刷物では四
角の中の`error'という単語として表示されます．

  このため以下のようにします．

     @lisp
     (+ 23 'x)
     @error{} Wrong type argument: integer-or-marker-p, x
     @end lisp

以下を生成します．

     (+ 23 'x)
     error--> Wrong type argument: integer-or-marker-p, x

これは，式を評価したとき，以下のエラーメッセージが出力されることを示しま
す．

     Wrong type argument: integer-or-marker-p, x

  `error-->'自身はエラーメッセージの一部ではありません．


File: texinfo-ja.info,  Node: Equivalence,  Next: Point Glyph,  Prev: Error Glyph,  Up: Glyphs

13.9.6 `@equiv{}' (==): 等価を示す
----------------------------------

二つの式が同一の結果を生成することもあります．`@equiv{}'コマンド
で，二つのフォームが正確に同一だということを示すことが可能です．

  `@equiv{}'コマンドはInfoでは`=='として，印刷物では三つ
の平行な水平な線として表示されます．

  このため以下のようにします．

     @lisp
     (make-sparse-keymap) @equiv{} (list 'keymap)
     @end lisp

以下を生成します．

     (make-sparse-keymap) == (list 'keymap)

これは，`(make-sparse-keymap)'の評価が`(list 'keymap)'の評価結
果と同一なものを生成することを示します．


File: texinfo-ja.info,  Node: Point Glyph,  Prev: Equivalence,  Up: Glyphs

13.9.7 `@point{}' (-!-): バッファのポイントを示す
-------------------------------------------------

Emacsバッファのテキストの例を見せる必要があることもあります．そのような
例では，バッファ名を含む二行のダッシュの間に問題のバッファ全体の内容を含
める慣習があります．

  バッファのテキストでポイントの場所を表示するため，`@point{}'コマ
ンドを使用することが可能です．(ポイントのシンボルは，もちろんバッファの
テキストの一部ではありません．それは，ポイントがある二文字の_間の_
場所を示します．)

  `@point{}'コマンドは，Infoでは`-!-'として，印刷物では
小さな五つの先端がある星として表示されます．

  以下の例は，単語`changed'を挿入するためのLispコマンドを評価した，前
後の`foo'バッファの内容を表示しています．

     ---------- Buffer: foo ----------
     This is the -!-contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
         => nil
     ---------- Buffer: foo ----------
     This is the changed -!-contents of foo.
     ---------- Buffer: foo ----------

  Texinfoソースファイルでは，例は以下のように書かれています．

     @example
     ---------- Buffer: foo ----------
     This is the @point{}contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
         @result{} nil
     ---------- Buffer: foo ----------
     This is the changed @point{}contents of foo.
     ---------- Buffer: foo ----------
     @end example


File: texinfo-ja.info,  Node: Footnotes,  Next: Images,  Prev: Glyphs,  Up: Insertions

13.10 脚注
==========

"脚注(footnote)"は，主要なテキストの紹介や説明を参照するためのもので
す．(1) (*note Footnotes-Footnote-1::)

* Menu:

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.


File: texinfo-ja.info,  Node: Footnotes-Footnotes,  Up: Footnotes

  (1) 脚注は主要なテキストを補完する，または詳細に述べるべきです
が，読者が主要なテキストを理解するために脚注を読む必要があるべきではあり
ません．脚注の徹底的な論議については，シカゴ大学出版によって出版された
`The Chicago Manual of Style'を参照してください．


File: texinfo-ja.info,  Node: Footnote Commands,  Next: Footnote Styles,  Up: Footnotes

13.10.1 脚注コマンド
--------------------

Texinfoでは脚注は`@footnote'で作成されます．このコマンドは直後に左
カッコが続き，その後に脚注のテキストが続き，そして終端の右カッコが続きま
す．脚注はどのような長さでも可能ですが(必要ならページに跨ります)，通常は
短いです．以下はテンプレートです．

     通常のテキスト@footnote{脚注のテキスト}

  このように，`@footnote'は脚注が付くテキストの直後に，余分な空白無
しにすべきです．そうしない場合，脚注の印は行を開始するでしょう．

  例えば，この節は見本の脚注(1) (*note Footnote
Commands-Footnote-1::)が続きます．
Texinfoソースファイルでは，以下のようになります．

     ...見本の脚注@footnote{これは見本の脚注です．}が続きます．Texinfo
     ソース...

御覧のように，ソースファイルには二つの句読点文字がお互いに隣り合っていま
す．この状況では`.};'が連続しています．これは一般的なので(最初のも
のは脚注の終りで，二番目のものは脚注がある文章に属しています)，奇妙に見
えても気にしないでください．

印刷されたマニュアルや本では，脚注の参照マークは小さい上付き数字です．脚
注のテキストは，ページの底に水平方向の線の下に現れます．

  Infoでは，脚注の参照マークは脚注番号が間にある一組のカッコで，`(1)'
のようになります．参照マークは，脚注のテキストへの相互参照のリンクが続き
ます．

HTML出力では，脚注参照は小さな上付き数字で，脚注テキストへのハイパーテキ
ストリンクとなります．

  ところで，`@table'に対する`@item'コマンドの引数の脚注は，(通
常)`@item'コマンドと同じ行にする必要があります．*Note Two-column
Tables::.


File: texinfo-ja.info,  Node: Footnote Commands-Footnotes,  Up: Footnote Commands

  (1) これは見本の脚注です．


File: texinfo-ja.info,  Node: Footnote Styles,  Prev: Footnote Commands,  Up: Footnotes

13.10.2 脚注スタイル
--------------------

Infoは二つの脚注スタイルがあり，脚注のテキストがある場所を決定します．

   *
     `End'ノードスタイルでは，一つのノードに対する全ての脚注は，そのノードの
     最後に置かれます．脚注は，ノードの残りと，その中で単語`Footnotes'が
     付いたダッシュの行で分けられます．それぞれの脚注は`(N)'の参照
     マークで開始します．

     ノードの終りのスタイルの，一つの脚注の例は以下のようになります．

          --------- Footnotes ---------

          (1)  Here is a sample footnote.

   *
     `Separate'ノードスタイルでは，一つのノードに対する全ての脚注は，自動的に
     構築された単独のノードに配置されます．この形式では"footnote
     reference"
     は，ノード本体にそれそれの`(N)'参照マークが続きます．脚注参照
     は実際には脚注ノードに到達する相互参照です．

     脚注のノード名は，脚注が含まれるノード名に`-Footnotes'を付けて
     構築されます．(従って，`Footnotes'に対する脚注のノードは
     `Footnotes-Footnotes'です！)脚注ノードは，その親ノードに戻るた
     めの，`Up'ノードポインタがあります．

     このマニュアルの最初の脚注が，分かれたノードスタイルで，Infoの書式化後ど
     のように見えるかを以下のように示します．

          File: texinfo.info  Node: Overview-Footnotes, Up: Overview

          (1) "Texinfo"の最初の音節は，"hex"ではなく，``speck''のように発音されま
          す．...

Texinfoファイルは，どちらかの脚注スタイルでInfoファイルに書式化されます．

  `@footnotestyle'コマンドを，Infoファイルの脚注スタイルを指定するた
めに使用してください．このコマンドは行の最初に書き，終りのノードスタイル
に対する`end'，または，分割ノードスタイルに対する`separate'を
引数として続けてください．

  例えば，以下のようにします．

     @footnotestyle end
  または，以下のようにします．
     @footnotestyle separate

  `@footnotestyle'コマンドは，Texinfoファイルの最初に，end-of-header
行の前か直後に書いてください．(`@footnotestyle'コマンドが
start-of-headerとend-of-header行の間に含まれる場合，領域の書式化コマンド
は脚注を指定したように書式化します．)

脚注スタイルを指定しない場合，書式化コマンドはデフォルトスタイルを使用し
ます．現在`texinfo-format-buffer'と`texinfo-format-region'は
`separate'スタイルを使用し，`makeinfo'は`end'スタイルを使用します．

  この章は二つの脚注を含んでいます．


File: texinfo-ja.info,  Node: Images,  Prev: Footnotes,  Up: Insertions

13.11 画像の挿入
================

`@image'コマンドで，外部ファイルで与えられた画像を挿入できます．

     @image{FILENAME, [WIDTH], [HEIGHT], [ALTTEXT], [EXTENSION]}

  FILENAME引数は必須で，処理によってサポートするフォーマットが異なる
ので，拡張子付けてはいけません．
   * TeXは`FILENAME.eps'ファイル(Encapsulated PostScript
     format)を読み込みます．

   * PDFTeXは`FILENAME.pdf'ファイル(アドビのPortable Document
     Format)を読み込み．

   * `makeinfo'はInfo出力に対し`FILENAME.txt'を(多かれ少な
     かれ`@example'のように)そのまま使用します．

   * `makeinfo'は，提供されている場合，オプションの五番目の引数を拡張
     子として使用します．例えば以下のようにします．

          @image{foo,,,,xpm}

     これで`makeinfo --html'のとき`foo.xpm'を試します．

     追加の五番目の引数を提供していない場合，`makeinfo ---html'は最初に
     `FILENAME.png'を試みます．存在しない場合は，
     `FILENAME.jpg'を試みます．どちらも存在しない場合は警告を出し
     ます．(ソフトウェア特許のためGIFフォーマットはサポートできません．)

  追加のWIDTHとHEIGHT引数は，画像のサイズを指定します(Info出力
では無視されます)．どちらも指定されない場合，画像はそのままの大きさで提
供されます(ファイルで与えられたもの)．一方のみが指定された場合，もう一方
はそれに比例して大きさを調整します．両方指定された場合，両方が重視され，
このため縦横比が変更され，元画像が歪む可能性があります．

  WIDTHはHEIGHTは有効なTeXの寸法単位を使用して指定できます．
すなわち以下を使用します．

pt
     ポイント(72.27pt = 1in)

pc
     パイカ(1pc = 12pt)

bp
     ビッグポイント(72bp = 1in)

in
     インチ

cm
     センチメートル(2.54cm = 1in)

mm
     ミリメートル(10mm = 1cm)

dd
     dido^tポイント(1157dd = 1238pt)

cc
     cicero (1cc = 12dd)

sp
     scaledポイント(65536sp = 1pt)

  例えば，以下は`ridt.eps'ファイルを高さ1インチで幅をそれに比例した大
きさに変更します．

     @image{ridt,,1in}

  `@image'がTeXで動作するように，ファイル`epsf.tex'をTeX
が見つけられるところに配置する必要があります．(標準の場所は
`TEXMF/tex/generic/dvips/epsf.tex'で，そこではTEXMFが
TeXのディレクトリツリーのルートになります．)このファイルはTexinfo配布
物に含まれていて，`ftp://tug.org/tex/epsf.tex'や他の場所でも利用可
能です．

  `@image'は図を表示する行で使用することが可能です．このため，表示し
ようとした場合，前のテキストに出力が入り込まないように，コマンドの前で残
りの空白行を確認してください．

  HTMLを生成しているとき，`makeinfo'はオプションの四番目の引数が提
供されている場合，それをインライン画像に対し"alt属性(alt attribute)"
を`@image'に設定します．提供されていない場合，`makeinfo'は
表示されている画像の完全な名前を使用します．


File: texinfo-ja.info,  Node: Breaks,  Next: Definition Commands,  Prev: Insertions,  Up: Top

14 改行，改ページの作成と阻止
*****************************

通常Texinfoファイルは，TeXとInfo書式化コマンドの一つの，両方で処理さ
れます．行，段落，ページの分割は，出力のどれかで`間違った'場所で発生する
こともあります．印刷されたマニュアルとInfoファイルの両方でテキストが正し
く見えるように確認する必要があります．

例えば印刷されたマニュアルでは，ページの分割は例の途中で不恰好に発生する
かもしれません．これを避けるため，テキストを2ページに分割することから守
るグループコマンドを使用してテキストを保つことができます．反対に，通常発
生しない場所で改ページを強制したい場合もあります．幸い，これらの問題は滅
多にありません．そうするときは，改行や改ページ，改行や改ページ防止，また
はページ作成コマンドを使用してください．

* Menu:

* Break Commands::              Summary of break-related commands.
* Line Breaks::                 Forcing line breaks.
* - and hyphenation::           Helping TeX with hyphenation points.
* w::                           Preventing unwanted line breaks in text.
* tie::                         Inserting an unbreakable but varying space.
* sp::                          Inserting blank lines.
* page::                        Forcing the start of a new page.
* group::                       Preventing unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.


File: texinfo-ja.info,  Node: Break Commands,  Next: Line Breaks,  Up: Breaks

14.1 改行，改ページコマンド
===========================

改行，改ページコマンドは，行や段落の分割や作成を許可します．

`@*'
     強制改行します．

`@sp N'
     N個の空白行を省略します．

`@-'
     任意のハイフンを挿入します．

`@hyphenation{HY-PHEN-A-TED WORDS}'
     HY-PHEN-A-TED WORDSのハイフネーションポイントを定義します．

  以下のコマンドは，テキストを単一行に維持します．

`@w{TEXT}'
     TEXTを改行やハイブネーションで二行に跨ることを避けます．

`@tie{}'
     改行が生じではならない場所に，単語内に普通のスペースを挿入します．

  Infoはページが無いので，ページコマンドは印刷物のみで適用されます．

`@page'
     印刷されたマニュアルで新しいページを開始します．

`@group'
     印刷された1ページに現れるよう，テキストを一緒に保ちます．

`@need MILS'
     当該ページに十分余白が無い場合，新しい印刷ページを開始します．


File: texinfo-ja.info,  Node: Line Breaks,  Next: - and hyphenation,  Prev: Break Commands,  Up: Breaks

14.2 `@*': 改行の生成
=====================

`@*'コマンドは，印刷されたマニュアルとInfoの両方で，強制的に改行し
ます．

  例えば，以下のようにします．

     この行は@* 2箇所で@*分割されます．

以下を生成します．

     この行は
      二箇所で
     分割されています．

(最初の`@*'コマンドの後のスペースは，次の行にそのまま運ばれること
に注意してください．)

  `@*'コマンドは，ファイルの著作権ページでよく使用されます．

     これは，Texinfoドキュメントのエディション2.0@*
     それは...

この状況では，`@*'コマンドは，TeXが醜い方法でページ全体に行を引
き延ばすことを阻止します．

     *注意してください:*`@*'コマンドの後にカッコを書かないでくだ
     さい．それらは不要です．

     `@*'コマンドを含む段落の終りに`@refill'コマンドを書かないで
     ください．それは改行の発生後に段落を補充し，改行の効果を否定します．



File: texinfo-ja.info,  Node: - and hyphenation,  Next: w,  Prev: Line Breaks,  Up: Breaks

14.3 `@-'と`@hyphenation': TeXのハイフネーションを助ける
========================================================

TeXのハイフネーションアルゴリズムは一般にかなり良いのですが，時々役に
立つハイフネーションポイントに失敗します．(滅多に無いことですが，間違っ
たハイフネーションを挿入します．)そのため，通常の語彙のドキュメントや良
く調整された印刷エディションのため，TeX出力を助けたいと思うかもしれま
せん．Texinfoはこのための二つのコマンドをサポートします．

`@-'
     任意のハイフン，すなわちTeXでハイフネーション可能な(が必須ではない)場
     所を挿入します．これはTeXがハイフネーションを失敗したため，overfull
     hbox(*note Overfull hboxes::)を警告されたとき特に便利です．TeXは
     `@-'を含む単語にハイフネーションポイント自身を挿入しません．

`@hyphenation{HY-PHEN-A-TED WORDS}'
     TeXにHY-PHEN-A-TED WORDSのハイフネーション方法を伝えます．御覧
     のように，`-'をそれぞれのハイフネーションポイントに置きます．例えば
     以下のようにします．
          @hyphenation{man-u-script man-u-scripts}
     TeXは，正しく一致した単語のときのみ指定されたハイフネーションポイント
     を使用するので，必要な変形を全て与えてください．

Info出力はハイフネーションしないので，これらのコマンドはそこでは意味があ
りません．


File: texinfo-ja.info,  Node: w,  Next: tie,  Prev: - and hyphenation,  Up: Breaks

14.4 `@w'{TEXT}: 改行を妨げる
=============================

`@w{TEXT}'はTEXTを出力し，TEXT内部での改行を妨 げます．

  `@w'コマンドを，長い名前や文節を行の終り付近でTeXが生成する自動
的にハイフネーションを避けるために使用することが可能です．例えば，以下の
ようにします．

     You can copy GNU software from @w{@samp{ftp.gnu.org}}.

以下を生成します．

     You can copy GNU software from `ftp.gnu.org'.

  改行されないスペースを生成するために`@w'を使用することも可能で，そ
れは単語内の普通のスペースの幅に修正されます．

     @w{ } @w{ } @w{ } indentation.

以下を生成します．

           indentation.

  `@w{ }'でのスペースは，改行不可のものと同様に間隔を広くした
り狭くしたりしません．例えば，手動で字下げを行なっている状況がそうしたい
場合でしょう．しかし，単語内に(印刷した出力で)伸び縮みする普通のスペース
が欲しいときもあります．次のセクションの`@tie'コマンドを見てくださ い．

