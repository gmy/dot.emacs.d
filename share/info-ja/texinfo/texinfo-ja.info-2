これは texinfo-ja.info、texinfo-ja.texi より makeinfo
バージョン 4.8 によって作成されました。

  This manual is for GNU Texinfo (version 4.3, 14 November 2002), a
documentation system that can produce both online information and a
printed manual from a single source.

  Copyright (C) 1988, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo(ja): (texinfo-ja).           The GNU documentation format.
* install-info(ja): (texinfo-ja)Invoking install-info. Update info/dir entries.
* texi2dvi(ja): (texinfo-ja)Format with texi2dvi.      Print Texinfo documents.
* texindex(ja): (texinfo-ja)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo(ja): (texinfo-ja)Invoking makeinfo.         Translate Texinfo source.
END-INFO-DIR-ENTRY


File: texinfo-ja.info,  Node: tie,  Next: sp,  Prev: w,  Up: Breaks

14.5 `@tie{}': 改行されないスペースを挿入する
=============================================

`@tie{}'コマンドは，単語内の改行を生じさせてはならない普通のスペー
スを生成します．段落内で使用されるコマンドのように，常に(空の)カッコを続
けて書いてください．例は以下のようになります．

     @TeX{} was written by Donald E.@tie{}Knuth.

以下を生成します．

     TeX was written by Donald E. Knuth.

  `@tie{}'と`@w{ }'には，二つの重要な違いがあります．

   * `@tie{}'が生成するスペースは，段落内の単語内の普通のスペースと一
     緒に，わずかに伸び縮みします．`@w{ }'で生成されたスペースは
     変化しません．

   * `@tie{}'では周りの単語のハイフネーションが許可されていますが，
     `@w{ }'それらの単語のハイフネーションを抑止します(TeXの技
     術的な理由のためで，それが`\hbox'を生成するからです)．



File: texinfo-ja.info,  Node: sp,  Next: page,  Prev: tie,  Up: Breaks

14.6 `@sp' N: 空白行の挿入
==========================

`@sp N'のみを含むもので始まる行は，印刷されたマニュアルと
Infoファイルの両方で，N個の空白行の空間を生成します．`@sp'は
段落の分割も強制します．例えば，以下のようにします．

     @sp 2

二行の空白行を生成します．

  `@sp'コマンドはタイトルページで最もよく使用されます．


File: texinfo-ja.info,  Node: page,  Next: group,  Prev: sp,  Up: Breaks

14.7 `@page': 新しいページの開始
================================

`@page'のみを含む行は印刷されたマニュアルで，新しいページを開始し
ます．このコマンドは，Infoファイルではページが無いので効果がありません．
`@page'コマンドは，著作権ページを開始するため，Texinfoファイルの
`@titlepage'セクションでよく使用されます．


File: texinfo-ja.info,  Node: group,  Next: need,  Prev: page,  Up: Breaks

14.8 `@group': 改ページを妨げる
===============================

`@group'コマンドは(単独行で)，`@example'やそれに類似した縦方
向に分割不可能なグループを開始するものの内部で使用され，それは印刷物では，
1ページに全体が現れます．グループは`@end group'のみを含む行で終了
します．この二つの行はそれ自身出力に現れず，Info出力では効果がありません．

  `@group'には様々な文脈で概念的な意味はありますが，現在の実装では，
`@example'とその変種の`@display'，`@format'，
`@flushleft'，そして`@flushright'のみで確実に動作します． *Note
Quotations and Examples::.  (これら全てのコマンドが共通に持つものは，
入力のそれぞれの行が出力を生成することです．)他の内容では，
`@group'は異常な縦の空白を生成するはずです．

  この書式の必要条件は，以下のように書くべきだということです．

     @example
     @group
     ...
     @end group
     @end example

このように，`@group'と`@end group'コマンドを用いて， `@example'と`@end
example'コマンドの中に書きます．

  `@group'コマンドは例を1ページにまとめるため，最もよく使用されます．
このTexinfoマニュアルには，100以上の例として，`@group'と `@end
group'で囲まれたテキストが含まれています．

グループの終了を忘れた場合，TeXを実行したとき，奇妙で不可解なエラーメッ
セージを得るかもしれません．これは，TeXがTexinfoファイルの残りを1ペー
ジを書こうとして，大量のテキストを処理するまでエラーメッセージの生成を開
始しないためです．TeXで理解できないエラーメッセージを得る場合， `@end
group'が無いところを探すことは，良い経験則です．


File: texinfo-ja.info,  Node: need,  Prev: group,  Up: Breaks

14.9 `@need MILS': 改ページを妨げる
===================================

`@need N'のみを含む行は，現在のページの残りがNミル(千
分の1インチ)以下の場合，印刷されたマニュアルで新しいページを開始します．
引数Nの周りにカッコを使用しないでください．`@need'コマンドは，
Infoはページが無いので，Infoでは効果はありません．

  この段落は，ページの残りが800ミル(10分の8インチ)以下の場合，TeXに新し
いページを開始するよう伝える，`@need'コマンドで処理されます．以下
のようにします．

     @need 800
     This paragraph is preceded by ...

  `@need'コマンドは孤立行(印刷ページの底の単一行)を避けるのに役立ち
ます．


File: texinfo-ja.info,  Node: Definition Commands,  Next: Conditionals,  Prev: Breaks,  Up: Top

15 定義コマンド
***************

`@deffn'コマンドと他の"定義コマンド(definition commands)"で，
関数，変数，マクロ，コマンド，ユーザーオプション，スペシャルフォーム，そ
してその他の一様な書式での人工物のようなものを記述可能になります．

  Infoファイルでは，定義は構成要素のカテゴリ -- `関数'，`変数'，またはあ
らゆるもの -- を定義の最初の行の始めに現し，構成要素の名前と引数が続き
ます．印刷されたマニュアルでは，コマンドはTeXに構成要素の名前とその引
数を左端のマージンに印刷させ，カテゴリを次に右端のマージンに印刷させます．
両方の出力形式で，定義の本体は字下げされます．また，構成要素の名前は適切
な索引に入ります．`@deffn'は関数の索引に名前が入り，`@defvr'
は変数の索引に入る等のようになります．

マニュアルは，与えられた名前に対し一つ以上の定義は不要で含めるべきではあ
りません．概要を含む付録は，定義コマンドより`@table'を使用すべきで す．

* Menu:

* Def Cmd Template::            How to structure a description using a
                                 definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::


File: texinfo-ja.info,  Node: Def Cmd Template,  Next: Optional Arguments,  Prev: Definition Commands,  Up: Definition Commands

15.1 定義のテンプレート
=======================

`@deffn'コマンドは，関数に似ている構成要素の定義に使用されます．
`@deffn'コマンドで定義を書くために，`@deffn'コマンドを行の最
初に書き，同じ行に構成要素のカテゴリ，構成要素自身の名前と，(存在する場
合は)引数を続けてください．そして，続く行に定義の本体を書いてください．
(本体に例を埋め込むこともできます．)終りに，単独行に書かれた`@end
deffn'コマンドで定義を終えてください．(他の定義コマンドも同じ書式が続き
ます．)

  定義のテンプレートは以下のようになります．

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

例えば，以下のようにします．

     @deffn Command forward-word count
     このコマンドは，ポイントを@var{count}語前に(または，@var{count}が
     負の場合は後ろに)移動します．...@end deffn

以下を生成します．

      -- Command: forward-word count
          このコマンドは，ポイントをCOUNT語前に(または，COUNTが負の場
          合は後ろに)移動します．...

  タイトルのようなカテゴリ名は大文字にしてください．`Interactive
Command'
といった文節のようにカテゴリ名に空白が含まれている場合，周りにカッコを書
いてください．例えば以下のようにします．

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

そうしない場合，二番目の単語は構成要素の名前と誤解されます．

  定義コマンドには，それ以外に一般的なものもあります．例えば，
`@deffn'コマンドは関数やそれに似たもの -- 引数を取る構成要素 --
に対する一般的な定義コマンドです．このコマンドを使用するときは，構成要素
が属するカテゴリを指定すべきです．`@deffn'コマンドには，三つの既に
定義されている専門的な変種の，`@defun'，`@defmac'，そして
`@defspec'を処理し，それらはカテゴリを指定します．それぞれ"関数"，
"マクロ"，そして"スペシャルフォーム"です．(Lispではスペシャルフォー
ムは関数に似た構成要素です．) `@defvr'コマンドも，変数の特定の種類
を記述するため専門分野に相違のあるものとして，前もって定義されたものがあ
ります．

  `@defun'のような専門的に定義されているものに対するテンプレートは，
カテゴリを指定する必要が無い以外，一般の定義のテンプレートに似ています．

     @defun NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end defun

このため以下のようにします．

     @defun buffer-end flag
     この関数は@var{flag}が1より小さい場合@code{(point-min)}を返し，そ
     れ以外では@code{(point-max)}を返します．...
     @end defun

以下を生成します．

      -- Function: buffer-end flag
          この関数はFLAGが1より小さい場合`(point-min)'を返し，それ以外
          では`(point-max)'を返します．...

定義の内部に`@example'の使用を含んでいる関数定義の詳細な例は， *Note
Sample Function Definition: Sample Function Definition.

  それ以外の特別なコマンドは，`@defun'のように動作します．

  実装が困難なため，`@deffn'内部とそれ以外のすべての定義コマンドの内
部にあるマクロは展開されないことに注意してください．


File: texinfo-ja.info,  Node: Optional Arguments,  Next: deffnx,  Prev: Def Cmd Template,  Up: Definition Commands

15.2 オプションと繰り返しの引数
===============================

オプションや繰り返しの引数を取る構成要素もあり，それは角カッコと丸カッコ
を使用する特有なglyphで指定されているかもしれません．例えば，スペシャ
ルフォームは，引数リストを簡単な関数より複雑な方法で分けられた引数に区切
ることもよくあります．

  角カッコで囲まれた引数はオプションです．このため[OPTIONAL-ARG]のよ
うな文節は，OPTIONAL-ARGがオプションだということを意味します．丸カッ
コに続く引数はオプションで，一度以上繰り返すこともできます．
このため，REPEATED-ARGS...は0以上の引数を意味します．いくつか
の引数がLispのリスト構造の追加のレベルにまとめられるとき，カッコが使用さ
れます．

  想像上のスペシャルフォームの例の`@defspec'の行は以下のようになります．

      -- Special Form: foobar (VAR [FROM TO [INC]]) BODY...

この例では，引数FROMとTOがオプションですが，両方とも有るか両
方とも無いことが必要です．それらが有る場合，INCも同様にオプション
で指定してかまいません．これらの引数はBODYと分けるため，リストに引
数VARでまとめられ，それは形式の残りの全ての要素を含みます．

  Texinfoソースファイルでは，この`@defspec'行は以下のように書かれま
す(この例のように二行以上には分割されません)．

     @defspec foobar (@var{var} [@var{from} @var{to}
         [@var{inc}]]) @var{body}@dots{}

関数はコマンドと変数の索引で`foobar'の下にリストアップされます．


File: texinfo-ja.info,  Node: deffnx,  Next: Def Cmds in Detail,  Prev: Optional Arguments,  Up: Definition Commands

15.3 二つ以上の`最初の'行
=========================

定義に対し二つ以上の`最初の'またはヘッダ行を作成するため，最初の
`@deffn'行に`@deffnx'で始まる行を続けてください．
`@deffnx'コマンドは，その行と前の行の間に余分な縦方向の空白を生成
しない以外，`@deffn'と同じように動作します．

  例えば以下のようにします．

     @deffn {Interactive Command} isearch-forward
     @deffnx {Interactive Command} isearch-backward
     この二つの検索コマンドは似ていて...
     @end deffn

以下を生成します．

 -- Interactive Command: isearch-forward
 -- Interactive Command: isearch-backward
     この二つの検索コマンドは似ていて...

  それぞれの定義コマンドには`x'が付きます．`@defunx'，
`@defvrx'，`@deftypefunx'などです．

  `x'の形式は`@itemx'と全く同じように動作します．*Note `@itemx':
itemx.を参照してください．


File: texinfo-ja.info,  Node: Def Cmds in Detail,  Next: Def Cmd Conventions,  Prev: deffnx,  Up: Definition Commands

15.4 定義コマンド
=================

Texinfoは1ダース以上の定義コマンドを提供していて，それらの全てをこのセ
クションで記述します．

  定義コマンドは自動的に構成要素の名前を適切な索引に入れます．例えば，
`@deffn'，`@defun'，そして`@defmac'は関数の索引に関数
名を入れます．`@defvr'と`@defvar'は変数の索引に変数名を入れ ます．

以下のほとんどの例はLispの例ですが，コマンドは他のプログラミング言語でも
使用可能です．

* Menu:

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.


File: texinfo-ja.info,  Node: Functions Commands,  Next: Variables Commands,  Prev: Def Cmds in Detail,  Up: Def Cmds in Detail

15.4.1 関数とそれに類似した構成要素
-----------------------------------

このセクションは関数やそれに類似した構成要素の記述のためのコマンドを記述
します．

`@deffn CATEGORY NAME ARGUMENTS...'
     `@deffn'コマンドは，関数，対話式コマンド，そして引数を取る類似の構
     成要素のための一般的な定義コマンドです．定義されている構成要素のカテゴリ
     を記述する用語を選択する必要があります．例えば，"関数"は，構成要素が関
     数の場合使用されます．`@deffn'コマンドは，行の最初に，同じ行に記述
     する構成要素のカテゴリ，この特定の構成要素の名前，そして，存在する場合そ
     の引数を続けます．単独行の`@end deffn'で定義を終了してください．

     例えば，定義を以下のようにします．

          @deffn Command forward-char nchars
          ポイントを@var{nchars}文字前に移動します．
          @end deffn

     これは，一つの引数NCHARSを持つ`forward-char'という名前の"コマ
     ンド"の，どちらかというと簡潔な定義を表示します．

     `@deffn'は，NCHARSのような引数名を`@var'が使用されてい
     るかのようにイタリックまたは大文字で印刷し，それは，これらの名前がメタ構
     文変数と考えるためです --
     それは実際の引数の値を意味します．記述のテキ
     ストで引数の値を述べるため，明示的に`@var'で引数名を書いてください．
     上記の例では，このように`@var{nchars}'を使用しています．

     `@deffn'のテンプレートは以下のとおりです．

          @deffn CATEGORY NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end deffn

`@defun NAME ARGUMENTS...'
     `@defun'コマンドは関数に対する定義コマンドです．`@defun'は，
     `@deffn Function ...'と同じです．

     例えば，以下のようにします．

          @defun set symbol new-value
          シンボル@var{symbol}の値を@var{new-value}に変更します．
          @end defun

     これは，引数がSYMBOLとNEW-VALUEの関数`set'の，どちらか
     というと簡潔な定義を表示します．`@defun'行の引数名は，`@var'
     で囲まれているかのように自動的にイタリックまたは大文字で現れます．単独行
     の`@end defun'で定義を終了してください．

     テンプレートは以下のとおりです．

          @defun FUNCTION-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defun

     `@defun'は関数索引に項目を生成します．

`@defmac NAME ARGUMENTS...'
     `@defmac'コマンドはマクロの定義コマンドです．`@defmac'は `@deffn
     Macro ...'と同じで，`@defun'のように動作します．

`@defspec NAME ARGUMENTS...'
     `@defspec'コマンドは，スペシャルフォームの定義コマンドです．(Lisp
     では，スペシャルフォームは関数によく似た構成要素です．*note
     Special Forms: (elisp)Special Forms.．)`@defspec'は `@deffn
     {Special Form} ...'と同じで，`@defun'のように 動作します．


File: texinfo-ja.info,  Node: Variables Commands,  Next: Typed Functions,  Prev: Functions Commands,  Up: Def Cmds in Detail

15.4.2 変数とそれに類似した構成要素
-----------------------------------

変数とそれに類似した構成要素を定義するためのコマンドは以下のものです．

`@defvr CATEGORY NAME'
     `@defvr'コマンドは変数のようなものの一般的な定義コマンドです --
     構成要素は値を記録します．定義された構成要素のカテゴリを記述するための，
     用語を選択する必要があります．例えば，"変数"は構成要素が変数の場合使用
     されます．`@defvr'コマンドを行の最初に書き，同じ行に構成要素のカテ
     ゴリと構成要素の名前を続けてください．

     タイトルのようにカテゴリ名を大文字にしてください．カテゴリ名が"User
     Option"のようにスペースを含む場合，カッコで囲んでください．そうしない場
     合，二番目の単語は構成要素の名前だと誤解されます．例えば，以下のようにし
     ます．

          @defvr {User Option} fill-column
          このバッファローカル変数は，
          補充された行の最大幅を指定します．
          ...
          @end defvr

     単独行の`@end defvr'で定義を終了してください．

     テンプレートは以下の通りです．

          @defvr CATEGORY NAME
          BODY-OF-DEFINITION
          @end defvr

     `@defvr'はNAMEに対し，変数索引の項目を作成します．

`@defvar NAME'
     `@defvar'コマンドは，変数の定義コマンドです．`@defvar'は `@defvr
     Variable ...'と同じです．

     例えば，以下のようにします．

          @defvar kill-ring
          ...
          @end defvar

     テンプレートは以下の通りです．

          @defvar NAME
          BODY-OF-DEFINITION
          @end defvar

     `@defvar'は，NAMEに対し変数索引の項目を作成します．

`@defopt NAME'
     `@defopt'コマンドは，"ユーザオプション(user options)"，すなは
     ち，ユーザが好みで変更する変数に対する定義コマンドです．Emacsは多くのそ
     のようなものがあります(*note Variables: (emacs)Variables.)．
     `@defopt'は`@defvr {User Option} ...'と同じで，
     `@defvar'のように動作します．


File: texinfo-ja.info,  Node: Typed Functions,  Next: Typed Variables,  Prev: Variables Commands,  Up: Def Cmds in Detail

15.4.3 型のある言語の関数
-------------------------

`@deftypefn'コマンドとその変形は，CやC++のような変数の型と関数を宣
言する必要がある言語の関数を記述するためのものです．

`@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...'
     `@deftypefn'コマンドは，関数と，引数を取るものや型のある類似の構成
     要素の定義コマンドです．`@deftypefn'は行の最初に書き，同じ行に記述
     される構成要素のカテゴリ，戻り値の型，この特定の構成要素の名前と，存在す
     る場合引数が続きます．

     例えば，以下のようにします．

          @deftypefn {Library Function} int foobar
            (int @var{foo}, float @var{bar})
          ...
          @end deftypefn

     ("..."の前のテキストは，二行で表示され，Texinfoファイルでは実際に
     は単一行です．)Infoでは以下を生成します．

          -- Library Function: int foobar (int FOO, float BAR)
          ...

     これは，`foobar'が"ライブラリ関数"で，それは`int'を返し，引
     数はFOO(`int')とBAR(`float')だということを意味しま す．

     `@deftypefn'で書いた引数名は，暗黙で`@var'にはなりません --
     `@deftypefn'の引数の実際の名前は，データ型名とキーワードで通常はバ
     ラバラなので，Texinfoは助けなしに見つけることができません．代わりに，
     `@var'を引数名の周りに明示的に書く必要があります．上の例では，引数
     名は`foo'と`bar'です．

     `@deftypefn'のテンプレートは以下の通りです．

          @deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS ...
          BODY-OF-DESCRIPTION
          @end deftypefn

     CATEGORYやDATA TYPEが1単語以上の場合，単一の引数にするためカッ
     コで囲む必要があることに注意してください．

     Adaのようなパッケージ言語のプロシージャを記述する場合，前の段落で記述さ
     れている慣習と幾分反対の方法として，`@deftypefn'の使用を手法として
     考えるかもしれません．

     例えば以下のようにします．

          @deftypefn stacks private push
                 (@var{s}:in out stack;
                 @var{n}:in integer)
          ...
          @end deftypefn

     (`@deftypefn'の引数は，三行に分割されていますが，実際のTexinfoファ
     イルでは単一行になります．)

     この例では，プロシージャは`プロシージャ'と分類するのではなくパッケージ
     `stacks'に属するものとして分類され，そのデータ型は`private'と
     して記述されます．(プロシージャの名前は`push'で，その引数はS
     とNです．)

     `@deftypefn'はNAMEに対し関数索引に項目を作成します．

`@deftypefun DATA-TYPE NAME ARGUMENTS...'
     `@deftypefun'コマンドは，型のある言語の関数のための特別な定義コマ
     ンドです．そのコマンドは`@deftypefn Function ...'と同じです．

     このため以下のようにします．

          @deftypefun int foobar (int @var{foo}, float @var{bar})
          ...
          @end deftypefun

     Infoでは以下を生成します．

          -- Function: int foobar (int FOO, float BAR)
          ...

     テンプレートは以下の通りです．

          @deftypefun TYPE NAME ARGUMENTS...
          BODY-OF-DESCRIPTION
          @end deftypefun

     `@deftypefun'はNAMEに対し関数索引に項目を作成します．



File: texinfo-ja.info,  Node: Typed Variables,  Next: Abstract Objects,  Prev: Typed Functions,  Up: Def Cmds in Detail

15.4.4 型のある言語の変数
-------------------------

型のある言語の変数は，型のある言語の関数に似た方法で処理されます．
*Note Typed Functions::.  一般的な定義コマンド`@deftypevr'は
`@deftypefn'に対応し，特別な定義コマンド`@deftypevar'は
`@deftypefun'に対応します．

`@deftypevr CATEGORY DATA-TYPE NAME'
     `@deftypevr'コマンドは，型のある言語の変数のようなもののための一般
     的な定義コマンドです--値を記録する構成要素です．定義される構成要素のカ
     テゴリを記述するための用語を選択する必要があります．例えば，"変数"は構
     成要素が変数の場合使用します．

     `@deftypevr'コマンドは，行の最初に書かれ，同じ行に記述される構成要
     素のカテゴリ，データの型，そして特定の構成要素の名前が続きます．

     例えば，以下のようにします．

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     Infoでは以下を生成します．

          -- Global Flag: int enable
          ...

     テンプレートは以下の通りです．

          @deftypevr CATEGORY DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevr

     `@deftypevr'は，NAMEに対し変数索引に項目を作成します．

`@deftypevar DATA-TYPE NAME'
     `@deftypevar'コマンドは，型のある言語の変数のための特別な定義コマ
     ンドです．`@deftypevar'は`@deftypevr Variable ...'と同じ です．

     例えば，以下のようにします．

          @deftypevar int fubar
          ...
          @end deftypevar

     Infoでは以下を生成します．

          -- Variable: int fubar
          ...

     テンプレートは以下の通りです．

          @deftypevar DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevar

     `@deftypevar'は，NAMEに対し，変数索引の項目を作成します．



File: texinfo-ja.info,  Node: Abstract Objects,  Next: Data Types,  Prev: Typed Variables,  Up: Def Cmds in Detail

15.4.5 オブジェクト指向プログラミング
-------------------------------------

オブジェクト指向プログラミングで使用するような，抽象的なオブジェクトに関
する記述を書式化するためのコマンドには以下のものがあります．クラスは抽象
的なオブジェクトの定義された型です．クラスのインスタンスはクラスの型を持
つ特定のオブジェクトです．インスタンス変数はクラスに属するがそれぞれのイ
ンスタンスが独自の値を持つ変数です．

定義では，クラス名はクラスに対するプログラミングシステムで本当に定義され
た名前の場合，`@code'をその周りに書くべきです．そうしない場合，通
常のテキストフォントで印刷されます．

`@defcv CATEGORY CLASS NAME'
     `@defcv'コマンドは，オブジェクト指向プログラミングで，クラスに関連
     する変数に対する一般的な定義コマンドです．`@defcv'コマンドは三つの
     引数をとります．定義している事柄のカテゴリ名，属するクラス，そしてその名
     前です．このようにします．

          @defcv {Class Option} Window border-pattern
          ...
          @end defcv

     これは，`Window'クラスの`border-pattern'クラスオプションの定義
     の最初の行の書き方を説明しています．

     テンプレートは以下の通りです．
          @defcv CATEGORY CLASS NAME
          ...
          @end defcv

     `@defcv'は変数索引に項目を作成します．

`@defivar CLASS NAME'
     `@defivar'コマンドは，オブジェクト指向プログラミングのインスタンス
     変数に対する定義コマンドです．`@defivar'は`@defcv {Instance
     Variable} ...'と同じです．

     テンプレートは以下の通りです．
          @defivar CLASS INSTANCE-VARIABLE-NAME
          BODY-OF-DEFINITION
          @end defivar

     `@defivar'は変数索引に項目を作成します．

`@deftypeivar CLASS DATA-TYPE NAME'
     `@deftypeivar'コマンドは，オブジェクト指向プログラミングの型を付け
     られたインスタンス変数に対する定義コマンドです．それは，`@defivar'
     に，インスタンス変数の型を指定するためのDATA-TYPEパラメータが付い
     たものに似ています．`@deftypeivar'は変数索引に項目を作成します．

`@defop CATEGORY CLASS NAME ARGUMENTS...'
     `@defop'コマンドは，オブジェクト指向プログラミングのメソッドに似た
     構成要素に対する定義コマンドです．これらの構成要素は関数のように引数を取
     りますが，オブジェクトの特定のクラスに関連付けされています．

     例えば，メソッドとしてクラスに関連付けされている"ラッパー(wrappers)"
     と呼ばれる概念を持つシステムもありますが，それは関数というよりマクロのよ
     うに動作します．`@defop Wrapper'をこれらの一つとしての記述に使用す
     ることが可能です．

     メソッドと"オペレーション(operations)"を分けた方が便利なときもありま
     す．オペレーションをメソッドの詳述と考えることができます．このため，ウィ
     ンドウシステムは全てのウィンドウクラスが`expose'と言う名前のメソッ
     ドを持つことを指定できます．我々は，このウィンドウシステムが一般的なウィ
     ンドウ上に`expose'オペレーションを定義していると言っているのです．
     特に，オペレーションは名前を持ち，引数のパターンも指定されています．全て
     のオペレーションを実装したメソッドは，オペレーションで使用されるアプリケー
     ションが実装したメソッドを知ることなくそれを行うので．同じ引数を受け入れ
     るようにする必要があります．

     メソッドよりオペレーションを説明した方がより意味があることもよくあります．
     例えば，ウィンドウアプリケーション開発者は，`expose'オペレーション
     を知っている必要がありますが，与えられたウィンドウのクラスが，このオペレー
     ションを実装した独自のメソッドを持つかどうかを考慮する必要はありません．
     このオペレーションを記述するため以下のように書きます．

          @defop Operation windows expose

     `@defop'コマンドは，行の最初に書かれ，同じ行にオペレーションのカテ
     ゴリの全体的な名前，オペレーションクラスの名前，オペレーションの名前，そ
     して，存在する場合その引数を続けます．

     テンプレートは以下の通りです．
          @defop CATEGORY CLASS NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defop

     `@defop'は``expose' on `windows''のような項目を，関数索
     引に作成します．

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     `@deftypeop'コマンドは，オブジェクト指向プログラミングの型付のオペ
     レーションに対する定義コマンドです．それは`@defop'に，メソッドの戻
     り値を指定するDATA-TYPEパラメータを加えたものに似ています．
     `@deftypeop'は関数索引に項目を作成します．

`@defmethod CLASS NAME ARGUMENTS...'
     `@defmethod'コマンドは，オブジェクト指向プログラミングのメソッドに
     対する定義コマンドです．メソッドは特定のオブジェクトのクラスとそのサブク
     ラスのためのオペレーションを実装する関数のようなものです．

     `@defmethod'は`@defop Method ...'と同じです．コマンドは
     行の最初に書かれ，メソッドのクラス名，メソッド名，そして存在する場合はそ
     の引数が続きます．

     例えば，以下のようにします．
          @defmethod `bar-class' bar-method argument
          ...
          @end defmethod

     これは，クラス`bar-class'の`bar-method'と呼ばれるメソッドに対
     する定義を説明しています．メソッドは引数を取ります．

     テンプレートは以下の通りです．

          @defmethod CLASS METHOD-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defmethod

     `@defmethod'は，関数索引に``bar-method' on `bar-class''
     のような項目を作成します．

`@deftypemethod CLASS DATA-TYPE NAME ARGUMENTS...'
     `@deftypemethod'コマンドは，C++やJavaのようなオブジェクト指向の型
     のある言語のメソッドのに対する定義コマンドです．それは，
     `@defmethod'コマンドにメソッドの戻り値を指定するための
     DATA-TYPEパラメータを追加したものに似ています．



File: texinfo-ja.info,  Node: Data Types,  Prev: Abstract Objects,  Up: Def Cmds in Detail

15.4.6 データの型
-----------------

データの型に対するコマンドには以下のものがあります．

`@deftp CATEGORY NAME ATTRIBUTES...'
     `@deftp'コマンドは，データの型に対する一般的な定義コマンドです．そ
     のコマンドは行の最初に書かれ，同じ行にカテゴリ，型の名前(`int'や
     `float'のようなもの)，そして型のオブジェクトの属性名が続きます．こ
     のため，このコマンドを`int'や`float'を記述するために使用するこ
     とが可能で，その場合，カテゴリとして`data type'を使用することも可能
     でしょう．(データの型は，実行可能なオペレーションを決定する目的に対する，
     特定のオブジェクトのカテゴリです．)

     例えばLispでは，"pair"は特定のデータの型に名前を付け，その型のオブジェ
     クトはCARとCDRと呼ばれる二つのスロットを持ちます．`pair'
     の定義の最初の行を書く方法は以下のようになります．

          @deftp {Data type} pair car cdr
          ...
          @end deftp

     テンプレートは以下の通りです．

          @deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...
          BODY-OF-DEFINITION
          @end deftp

     `@deftp'はデータの型の索引に項目を作成します．


File: texinfo-ja.info,  Node: Def Cmd Conventions,  Next: Sample Function Definition,  Prev: Def Cmds in Detail,  Up: Definition Commands

15.5 定義を書くための慣習
=========================

`@deffn'，`@defun'やその他の定義コマンドの一つを使用し定義を
書くとき，`forward-word'関数に対するCOUNT引数のように，意味を
示す引数の使用に注意してください．また，INTEGERのように引数名が型
名を含んでいる場合，引数が実際にその型であるよう注意してください．


File: texinfo-ja.info,  Node: Sample Function Definition,  Prev: Def Cmd Conventions,  Up: Definition Commands

15.6 関数定義の見本
===================

関数定義は，`@defun'と`@end defun'を使用します．関数名は
`@defun'コマンドの直後に続き，同じ行にパラメータリストが続きます．

  *Note Calling Functions: (elisp)Calling Functions.の
定義には以下のものがあります．

      -- Function: apply function &rest arguments
          `apply'はARGUMENTSでFUNCTIONを呼び出し，`funcall'
          に似ていますが，一点が異なります．ARGUMENTSの終りは，
          FUNCTION
          に与えられる単一の引数ではなく引数のリストです．我々は，
          このリストが他の引数に"append"されるとも言っています．

          `apply'はFUNCTION呼び出しの結果を返します．`funcall'のよ
          うに，FUNCTIONはLisp関数やプリミティブ関数である必要があります．ス
          ペシャルフォームとマクロは，`apply'では意味がありません．

               (setq f 'list)
                   => list
               (apply f 'x 'y 'z)
               error--> Wrong type argument: listp, z
               (apply '+ 1 2 '(3 4))
                   => 10
               (apply '+ '(1 2 3 4))
                   => 10

               (apply 'append '((a b c) nil (x y z) nil))
                   => (a b c x y z)

          `apply'を使用した興味深い例は，`mapcar'の記述で見付かります．


  Texinfoソースファイルでは，この例は以下のようになります．

     @defun apply function &rest arguments
     @code{apply}は@var{arguments}で@var{function}を呼び出し，
     @code{funcall}に似ていますが，1点異なります．@var{arguments}の終り
     は，@var{function}に与えられた単一の引数ではなく引数のリストです．我々
     は，このリストが他の引数に@dfn{加えられる}とも言っています．

     @code{apply}は@var{function}呼び出しの結果を返します．
     @code{funcall}のように，@var{function}はLisp関数やプリミティブ関数
     である必要があります．スペシャルフォームとマクロは，@code{apply}では
     意味がありません．

     @example
     (setq f 'list)
         @result{} list
     (apply f 'x 'y 'z)
     @error{} Wrong type argument: listp, z
     (apply '+ 1 2 '(3 4))
         @result{} 10
     (apply '+ '(1 2 3 4))
         @result{} 10

     (apply 'append '((a b c) nil (x y z) nil))
         @result{} (a b c x y z)
     @end example

     @code{apply}を使用した興味深い例は，@code{mapcar}の記述で見付かり
     ます．
     @end defun

このマニュアルでは，この関数は`apply'の下のコマンドと変数索引にリス
トアップされています．

通常の変数とユーザーオプションは，変数が引数を取らない以外，関数に対する
ものに似た書式を使用し記述されます．


File: texinfo-ja.info,  Node: Conditionals,  Next: Internationalization,  Prev: Definition Commands,  Up: Top

16 目に見えるテキストの条件
***************************

異なる出力フォーマットに対し，異なるテキストを使用するのが良いこともあり
ます．例えば，印刷されたマニュアルとInfo出力に対し異なるテキストを指定す
る，"条件コマンド(conditional commands)"を使用することができます．

  条件コマンドは入れ子状にしてはいけません．

  条件コマンドは，以下のカテゴリから成り立ちます．

   * HTML，Info，またはTeXのためのコマンド．

   * HTML，Info，またはTeXではないもののためのコマンド．

   * 生のTeXやHTMLコマンド．

   *
     全てのフォーマットに対しテキストを代入し，フラグが設定されているかクリア
     されているか試すもの．

* Menu:

* Conditional Commands::        Specifying text for HTML, Info, or TeX.
* Conditional Not Commands::    Specifying text for not HTML, Info, or TeX.
* Raw Formatter Commands::      Using raw TeX or HTML commands.
* set clear value::             Designating which text to format (for
                                 all output formats); and how to set a
                                 flag to a string that you can insert.


File: texinfo-ja.info,  Node: Conditional Commands,  Next: Conditional Not Commands,  Up: Conditionals

16.1 条件コマンド
=================

Texinfoには，特定の出力フォーマットにテキストを含める条件を利用可能にす
るために，それぞれの出力フォーマットに対して`@if...'で囲む方法
があります．

  `@ifinfo'は，印刷されたマニュアルに植字されるとき，TeXで無視さ
れるテキストの部分を開始します．テキストのその部分は，Infoファイル(歴史
的な互換性のため)とプレーンテキストの出力だけに現れます．`@ifinfo'
コマンドは単独行に書くべきです．単独行の`@end ifinfo'を含む行で，
Infoのみのテキストを終えるべきです．

  `@iftex'と`@end iftex'コマンドは，`@ifinfo'と `@end
ifinfo'コマンドに類似しています．それらは，テキストが印刷さ
れたマニュアルに現れ，Infoファイルに現れないように指定します．
`@ifhtml'と`@end ifhtml'も同様で，テキストがHTML出力だけに現
すように指定します．そして，`@ifplaintext'と`@end
ifplaintext'も同様で，テキストがプレーンテキストの出力だけに現れるように
指定します．そして，`@ifxml'と`@end ifxml'は，XML出力に対す るものです．

  例えば，以下のようにします．

     @iftex
     このテキストは，印刷されたマニュアルだけに現れます．
     @end iftex
     @ifinfo
     しかし，このテキストはInfo(またはプレーンテキスト)だけに現れます．
     @end ifinfo
     @ifhtml
     また，このテキストはHTMLだけに現れます．
     @end ifhtml
     @ifplaintext
     但し，このテキストはプレーンテキストだけに現れます．
     @end ifplaintext
     @ifxml
     そしてこれはXML出力だけに現れます．
     @end ifxml

上記の例は，以下の行を生成します．
しかし，このテキストはInfo(またはプレーンテキスト)だけに現れます．

読んでいるマニュアルのバージョンに依存して，入力行の一つのみ見えることに
注意してください．


File: texinfo-ja.info,  Node: Conditional Not Commands,  Next: Raw Formatter Commands,  Prev: Conditional Commands,  Up: Conditionals

16.2 条件の否定コマンド
=======================

`@ifnot...'コマンドで与えられたもの以外の，あらゆる出力フォー
マットに含まれるテキストを指定できます．
     @ifnothtml ... @end ifnothtml
     @ifnotinfo ... @end ifnotinfo
     @ifnotplaintext ... @end ifnotplaintext
     @ifnottex ... @end ifnottex
     @ifnotxml ... @end ifnotxml
  `@ifnot...'コマンドと`@end'コマンドは，実際のソースファ
イルでは単独行で現します．

  出力ファイルが与えられたフォーマットで作成されている場合，その領域は
_無視され_ます．それ以外の場合は含められます．

  (歴史的な互換性のため)一つの例外があります．`@ifnotinfo'テキストは，
Infoだけでなく，Infoとプレーンテキストの出力の両方で削除されます．テキス
トがInfoだけに現れてプレーンテキストに現れないように指定するため，以下の
ように`@ifnotplaintext'を指定してください．
     これはInfoにはありますが，プレーンテキストにはありません．

  これらのコマンドで限定された領域は，`@tex'で使用したような生のフォー
マッタソースではなく，`@iftex'で使用したような通常のTexinfoソース
にします(*note Raw Formatter Commands::)．


File: texinfo-ja.info,  Node: Raw Formatter Commands,  Next: set clear value,  Prev: Conditional Not Commands,  Up: Conditionals

16.3 生の書式化コマンド
=======================

`@iftex'と`@end iftex'で線引きされた領域の内部に，生のTeX
コマンドを埋め込むことが可能です．TeXが見るファイルの一部になるだけな
ので，Infoではこれらのコマンドは無視されます．TeXで使用されている
`\'を`@'に置換する必要がある以外，通常のTeXファイルで書い
ていたようなTeXコマンドを書くことが可能です．例えば，Texinfoファイル
の`@titlepage'セクションで，著作権ページを書式化するためのTeXコ
マンド`@vskip'を使用することが可能です．(`@titlepage'コマン
ドは，`@iftex'コマンドの使用と同じように，その領域を自動的にInfoに
無視させます．)

  しかし，プレーンTeXの多くの機能は，Texinfoが優先されるので動作しませ
ん．

  `@tex'と`@end tex'コマンドで領域を線引きすることで，プレーン
TeXを完全に入力し，TeXコマンドで`\'を使用することが可能です．
(`@tex'コマンドでも，`@iftex'コマンドのようにInfoは領域を無
視します．)唯一の例外は，`@end tex'を正確に認識できるよう，
`@'文字がまだコマンドを導入することです．

  例えばここに，プレーンTeXで書かれた数式があります．

     @tex
     $$ \chi^2 = \sum_{i=1}^N
              \left (y_i - (a + b x_i)
              \over \sigma_i\right)^2 $$
     @end tex

この例の出力は，印刷されたマニュアルにのみ現れます．Infoでこれを読んでい
る場合，印刷されたマニュアルに現れる等式は見ることはないでしょう．

  同様に，HTML出力のみに含まれる領域を線引きするため，`@ifhtml ... @end
ifhtml'を使用し，生のHTMLの領域に対し`@html ...  @end
html'を使用することができます(再びですが，例外的に`@'はまだ
エスケープ文字なので，`@end'コマンドを認識することが可能です．)

  同様に，XML出力のみに含まれる領域を線引きするため，`@ifxml ...  @end
ifxml'を使用し，生のXMLの領域に対し`@xml ... @end xml'
を使用することが可能です(再びですが，例外的に`@'はまだエスケープ文
字なので，`@end'コマンドを認識することが可能です．)


File: texinfo-ja.info,  Node: set clear value,  Prev: Raw Formatter Commands,  Up: Conditionals

16.4 `@set'，`@clear'，そして`@value'
=====================================

`@set'，`@clear'，`@ifset'，そして`@ifclear'コマ
ンドを用いて，直接Texinfo書式化コマンドにTexinfoファイルの一部を書式化さ
せたり無視させたりすることが可能です．

  短い説明は以下のとおりです．

`@set FLAG [VALUE]'
     変数FLAGを設定し，追加のVALUEが指定されている場合はそれに設
     定します．

`@clear FLAG'
     以前に定義されていたかどうかによらず，変数FLAGを未定義にします．

`@ifset FLAG'
     FLAGが設定されている場合，次の`@end ifset'コマンドまでのテキ
     ストを書式化します．FLAGがクリアされている場合，次の`@end
     ifset'コマンドまでのテキストは無視されます．

`@ifclear FLAG'
     FLAGが設定されている場合，次の`@end ifclear'コマンドまでのテ
     キストは無視されます．FLAGがクリアされている場合，次の`@end
     ifclear'コマンドまでのテキストを書式化します．

* Menu:

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.


File: texinfo-ja.info,  Node: set value,  Next: ifset ifclear,  Up: set clear value

16.4.1 `@set'と`@value'
-----------------------

フラグに対する値を指定するために`@set'コマンドを使用し，それは後に
`@value'コマンドで展開されます．

  "フラグ(flag)"は識別子です．一般的に，フラグ名には文字と数字のみを使
用し，`-'や`_'は使用しないことが最善です -- それらが動作する
文脈もありますが，TeXの制限のため全てが動作するわけではありません．

値は入力行の残りの文字による文字列で，あらゆるものを含めることが可能です．

  `@set'コマンドは以下のように書きます．

     @set foo これは文字列です．

これは，フラグ`foo'の値を"これは文字列です"に設定します．

  そのとき，Texinfoフォーマッタは`@value{FLAG}'コマンドを
FLAGに設定された文字列に置換します．このため`foo'が上記のよう
に設定されている場合，Texinfoフォーマッタは以下のように変換します．

     @value{foo}
上記を以下に変換
     これは文字列です

  `@value'コマンドを段落の中に書くことも可能です．しかし，
`@set'コマンドは単独行に書く必要があります．

  `@set'コマンドを以下のように書く場合を考えます．

     @set foo

文字列を指定していないので，`foo'の値は空の文字列になります．

  `@clear FLAG'で前に設定されたフラグをクリアする場合，それに
続く`@value{flag}'コマンドはエラーを報告します．

  例えば，以下のように`foo'を設定した場合を考えます．

     @set how-much very, very, very

そのとき，フォーマッタは以下のように変換します．

     It is a @value{how-much} wet day.
上記を以下変換
     It is a very, very, very wet day.

  以下のように書いた場合を考えます．

     @clear how-much

そのとき，フォーマッタは以下のように変換します．

     It is a @value{how-much} wet day.
上記を以下に変換
     It is a {No value for "how-much"} wet day.


File: texinfo-ja.info,  Node: ifset ifclear,  Next: value Example,  Prev: set value,  Up: set clear value

16.4.2 `@ifset'と`@ifclear'
---------------------------

FLAGが設定されているとき，Texinfo書式化コマンドは，それ以降の `@ifset
FLAG'と`@end ifset'コマンドの組の間にあるテキ
ストを書式化します．FLAGがクリアされているとき，Texinfo書式化コマ
ンドはテキストを書式化_しません_．`@ifclear'は同様に処理しま す．

  条件によって書式化されるテキストは，`@ifset FLAG'と `@end
ifset'コマンドの間に，以下のように書いてください．

     @ifset FLAG
     CONDITIONAL-TEXT
     @end ifset

例えば，`large'と`small'モデルに対するマニュアルのような，二つの形態があ
る一つのドキュメントを作成することが可能です．

     潅木を傷つけずに掘り出すために，
     この機械を使用することが可能です．

     @set large

     @ifset large
     それは，十分大きく育った木も掘り出すことも可能です．
     @end ifset

     すぐに植え直すことを忘れないでください...

例では，書式化コマンドは，`large'フラグが設定されているので， `@ifset
large'と`@end ifset'の間のテキストを書式化します．

  FLAGがクリアされているとき，Texinfo書式化コマンドは`@ifset
FLAG'と`@end ifset'の間のテキストを書式化_しません_．テ
キストは無視され，印刷された出力にもInfo出力にも現れません．

  例えば前の例で，`@set large'コマンドの後(で，条件テキストの前)に
`@clear large'コマンドを書いてフラグをクリアする場合，Texinfo書式
化コマンドは，`@ifset large'と`@end ifset'コマンドの間のテキ
ストを無視します．書式化された出力では，"潅木を傷つけずに掘り出すために，
この機械を使用することが可能です．すぐに植え直すことを忘れないでください
..."という行のみ見えるでしょう．

  `@clear FLAG'コマンドでフラグがクリアされている場合，書式化
コマンドは`@ifclear'と`@end ifclear'コマンドの組の間のテキス
トを書式化します．しかし`@set FLAG'でフラグが設定されている
場合，書式化コマンドは`@ifclear'と`@end ifclear'コマンドの間
のテキストを書式化_しません_．というよりはむしろ，それらのテキスト
を無視します．`@ifclear'コマンドは以下のようにします．

     @ifclear FLAG


File: texinfo-ja.info,  Node: value Example,  Prev: ifset ifclear,  Up: set clear value

16.4.3 `@value'の例
-------------------

`@value'コマンドを，マニュアル更新時に変更する必要がある部分の数を
最小限にするために使用することが可能です．Automakeの配布物を用いた同じ原
理の例とその完全なテキストは，*Note GNU Sample Texts::.

  *Note Overview: (make)Top.)からの適用例は以下のよう になります．

  1. フラグを設定します．

          @set EDITION 0.35 Beta
          @set VERSION 3.63 Beta
          @set UPDATED 14 August 1992
          @set UPDATE-MONTH August 1992

  2. `@copying'セクション(*note copying::)に対するテキストを書きます．

          @copying
          This is Edition @value{EDITION},
          last updated @value{UPDATED},
          of @cite{The GNU Make Manual},
          for @code{make}, version @value{VERSION}.

          Copyright ...

          Permission is granted ...
          @end copying

  3.
     印刷されたマニュアルの読者に対し，タイトルページのためのテキストを書きま
     す．

          @titlepage
          @title GNU Make
          @subtitle A Program for Directing Recompilation
          @subtitle Edition @value{EDITION}, ...
          @subtitle @value{UPDATE-MONTH}
          @page
          @insertcopying
          ...
          @end titlepage

     (印刷されたカバーでは，月と年だけでなくその日までリストアップした日付で
     なく，月と年をリストアップした日付でも曖昧ではないでしょう．)

  4. Infoファイルの読者に対し，Topノードに対するテキストを書きます．

          @ifnottex
          @node Top
          @top Make

          @insertcopying
          ...
          @end ifnottex

     マニュアルを書式化後，`@value'の構成物は展開されるので，出力物には
     以下のようなテキストが含まれています．

          This is Edition 0.35 Beta, last updated 14 August 1992,
          of `The GNU Make Manual', for `make', Version 3.63 Beta.

マニュアルを更新したとき，フラグの値のみを変更してください．三つのセクショ
ンを編集する必要はありません．


File: texinfo-ja.info,  Node: Internationalization,  Next: Defining New Texinfo Commands,  Prev: Conditionals,  Up: Top

17 国際化
*********

Texinfoは，英語以外の言語で書くためのサポートもありますが，この領域は，
まだ重要な仕事を必要とします．

  Texinfoがサポートする，さまざまなアクセントと特別な文字のリストは，
*Note Inserting Accents::を参照してください．

* Menu:

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.


File: texinfo-ja.info,  Node: documentlanguage,  Next: documentencoding,  Up: Internationalization

17.1 `@documentlanguage CC': ドキュメントの言語の設定
=====================================================

`@documentlanguage'コマンドは，現在のドキュメント言語を宣言します．
単独行に，二文字のISO-639言語コードを続けてください(リストは以下に含まれ
ています)．複数言語のドキュメントがある場合，目的は，それぞれの言語に変
更を宣言するため，何回もこのコマンドを使用することで可能となります．コマ
ンドが全く使用されていない場合，デフォルトは英語の`en'です．

  現在，このコマンドはInfoとHTML出力では無視されます．TeXに対して，それ
はファイル`txi-CC.tex'を読み込ませます(存在する場合)．そのよ
うなファイルは，適切にTeX出力で使用されている`Chapter'，`See'等のよう
な様々な英単語を再定義します．

  このコマンドが，TeXの現在のハイフネーションパターン思考を(TeXプリ
ミティブの`\language'で)変更すると良いのですが，これは残念ながら，
現在は実装されていません．

  ISO-639からの有効な言語コードは以下のようになります．

`aa'  Afar                 `ab' Abkhazian            `af' Afrikaans
`am'  Amharic              `ar' Arabic               `as' Assamese
`ay'  Aymara               `az' Azerbaijani          `ba' Bashkir
`be'  Byelorussian         `bg' Bulgarian            `bh' Bihari
`bi'  Bislama              `bn' Bengali; Bangla      `bo' Tibetan
`br'  Breton               `ca' Catalan              `co' Corsican
`cs'  Czech                `cy' Welsh                `da' Danish
`de'  German               `dz' Bhutani              `el' Greek
`en'  English              `eo' Esperanto            `es' Spanish
`et'  Estonian             `eu' Basque               `fa' Persian
`fi'  Finnish              `fj' Fiji                 `fo' Faroese
`fr'  French               `fy' Frisian              `ga' Irish
`gd'  Scots Gaelic         `gl' Galician             `gn' Guarani
`gu'  Gujarati             `ha' Hausa                `he' Hebrew
`hi'  Hindi                `hr' Croatian             `hu' Hungarian
`hy'  Armenian             `ia' Interlingua          `id' Indonesian
`ie'  Interlingue          `ik' Inupiak              `is' Icelandic
`it'  Italian              `iu' Inuktitut            `ja' Japanese
`jw'  Javanese             `ka' Georgian             `kk' Kazakh
`kl'  Greenlandic          `km' Cambodian            `kn' Kannada
`ks'  Kashmiri             `ko' Korean               `ku' Kurdish
`ky'  Kirghiz              `la' Latin                `ln' Lingala
`lt'  Lithuanian           `lo' Laothian             `lv' Latvian, Lettish
`mg'  Malagasy             `mi' Maori                `mk' Macedonian
`ml'  Malayalam            `mn' Mongolian            `mo' Moldavian
`mr'  Marathi              `ms' Malay                `mt' Maltese
`my'  Burmese              `na' Nauru                `ne' Nepali
`nl'  Dutch                `no' Norwegian            `oc' Occitan
`om'  (Afan) Oromo         `or' Oriya                `pa' Punjabi
`pl'  Polish               `ps' Pashto, Pushto       `pt' Portuguese
`qu'  Quechua              `rm' Rhaeto-Romance       `rn' Kirundi
`ro'  Romanian             `ru' Russian              `rw' Kinyarwanda
`sa'  Sanskrit             `sd' Sindhi               `sg' Sangro
`sh'  Serbo-Croatian       `si' Sinhalese            `sk' Slovak
`sl'  Slovenian            `sm' Samoan               `sn' Shona
`so'  Somali               `sq' Albanian             `sr' Serbian
`ss'  Siswati              `st' Sesotho              `su' Sundanese
`sv'  Swedish              `sw' Swahili              `ta' Tamil
`te'  Telugu               `tg' Tajik                `th' Thai
`ti'  Tigrinya             `tk' Turkmen              `tl' Tagalog
`tn'  Setswana             `to' Tonga                `tr' Turkish
`ts'  Tsonga               `tt' Tatar                `tw' Twi
`ug'  Uighur               `uk' Ukrainian            `ur' Urdu
`uz'  Uzbek                `vi' Vietnamese           `vo' Volapuk
`wo'  Wolof                `xh' Xhosa                `yi' Yiddish
`yo'  Yoruba               `za' Zhuang               `zh' Chinese
`zu'  Zulu                                                


File: texinfo-ja.info,  Node: documentencoding,  Prev: documentlanguage,  Up: Internationalization

17.2 `@documentencoding ENC': 入力エンコードの設定
==================================================

`@documentencoding'コマンドは，入力ドキュメントのエンコードを宣言
します．単独行に，`ISO-8859-1'のような有効なエンコード指定を続けて
書いてください．

  現在，これは`makeinfo'のHTML出力のみで使用されています．ドキュメ
ントエンコードENCが指定されている場合，出力の`<head>'に含まれ
ている`<meta>'タグで使用されます．

     <meta http-equiv="Content-Type" content="text/html;
          charset=ENC">


File: texinfo-ja.info,  Node: Defining New Texinfo Commands,  Next: Hardcopy,  Prev: Internationalization,  Up: Top

18 新しいTexinfoコマンドの定義
******************************

Texinfoは，新しいコマンドを定義する様々なコマンドを提供します．

   *
     Texinfo"マクロ(macro)"では，テキストと/または既存のコマンド(他のマク
     ロを含む)の列として，新しいTexinfoコマンドの定義が可能です．マクロは，あ
     らゆる数の"パラメータ(parameters)" -- マクロの使用と同時に提供する
     テキスト -- を取ることが可能です．

     さらに，これらのマクロは`@defmac'コマンドと関係が無く，それは，マ
     ニュアルのサブジェクトでドキュメント化されるマクロです(*note Def
     Cmd Template::)．

   * `@alias'は，既存のコマンドに対する新しい名前を定義する便利な方法で
     す．

   * `@definfoenclose'で，Infoファイルのカスタマイズされた出力で新しい
     コマンドの定義が可能です．


* Menu:

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.


File: texinfo-ja.info,  Node: Defining Macros,  Next: Invoking Macros,  Up: Defining New Texinfo Commands

18.1 マクロの定義
=================

マクロを定義するため，以下のようにTexinfoの`@macro'コマンドを使用
します．

     @macro MACRONAME{PARAM1, PARAM2, ...}
     TEXT ... \PARAM1\ ...
     @end macro

  "パラメータ(parameters)"のPARAM1，PARAM2，...は，後
でマクロをドキュメントで使用するとき(次のセクションで記述します)に供給さ
れる引数に対応します．

  マクロがTeXで動作するため，MACRONAMEは完全に文字から成り立って
いる必要があります．数字，ハイフン，アンダースコア，または他の特別な文字
を含めてはいけません．

  マクロがパラメータを必要としない場合，空のリスト(`@macro foo
{}')，またはカッコ無し(`@macro foo')で定義することが可能です．

  定義やマクロの"本体(body)"は，前に定義されたマクロを含め，ほとんどの
Texinfoコマンドを含めることが可能です．まだ定義されていないマクロの呼び
出しはできません．このため，相互に繰り返されるTexinfoマクロを持つことは
不可能です．また，他のマクロを定義するマクロ定義は，`@macro'の設計
の制限のため，TeXでは動作しません．

  マクロの本体では，上記の例では`\PARAM1\'のようにバックスラッ
シュで囲まれているパラメータ名のインスタンスは，マクロ呼び出しでの対応す
る引数で置換されます．パラメータ名は，ゼロ回を含め何度でも本体で使用可能
です．

  マクロ式での単一の`\'を得るため，`\\'を使用してください．ほか
のあらゆる本体での`\'の使用は警告されます．

  `@macro'行の後と`@end macro'行の前の改行は無視されるので，マ
クロ本体に含まれません．全ての他の空白は通常のTexinfoの規則に従って扱わ
れます．

マクロを再帰的に使用可能にするため，すなわち，引数としてそれ自身を呼び出
すため，以下のように`@rmacro'で定義する必要があります．

     @rmacro rmac {arg}
     a\arg\b
     @end rmacro
     ...
     @rmac{1@rmac{text}2}

  これは，出力`a1atextb2b'を生成します．`@rmacro'の代わりに
`@macro'を用いた場合，エラーメッセージが表示されるでしょう．

  `@unmacro FOO'を用いて，マクロFOOを未定義にすることが
可能です．既に未定義にされたマクロを未定義にすることはエラーではありませ
ん．例えば以下のようにします．

     @unmacro foo


File: texinfo-ja.info,  Node: Invoking Macros,  Next: Macro Details,  Prev: Defining Macros,  Up: Defining New Texinfo Commands

18.2 マクロの呼び出し
=====================

マクロの定義後(前のセクションを参照してください)，以下のようにドキュメン
トで使用("呼び出し(invoke)")可能です．

     @MACRONAME {ARG1, ARG2, ...}

そして，結果はその場所にMACRONAME本体を入力したかのようになります．
例えば以下のようにします．

     @macro foo {p, q}
     Together: \p\ & \q\.
     @end macro
     @foo{a, b}

以下を生成します．

     Together: a & b.

このため，引数とパラメータはカンマで分けられ，カッコで範囲を制限します．
カンマの後(前は違います)のあらゆる空白は無視されます．マクロが引数を取ら
ない場合でもカッコは呼び出しで(定義では違います)要求され，他の全ての
Texinfoコマンドとの一貫性を保ちます．

     @macro argless {}
     ここに引数はありません．
     @end macro
     @argless{}

以下を生成します．

     ここに引数はありません．

カンマ，カッコ，またはバックスラッシュを引数に挿入するため，以下のように
バックスラッシュを前置します．

     @MACNAME {\\\{\}\,}

それは，引数`\{},'をMACNAMEに渡します(ほとんど確実にエラー
を生成します)．しかし，カッコ内のカンマはバックスラッシュでエスケープさ
れていても．TeXで問題になるでしょう．

マクロが単一の引数を取るように定義されていて，カッコ無しで呼び出された場
合，マクロ名の後の行の残り全体は引数として供給されます．例えば，以下のよ
うになります．

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar aah

以下を生成します．

     Twice: aah & aah.

マクロが単一の引数を取るように定義されていて，カッコ付で呼び出された場合，
カンマにかかわらずカッコ付のテキストは引数として渡されます．例えば以下の
ようになります．

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar{a,b}

以下を生成します．

     Twice: a,b & a,b.


File: texinfo-ja.info,  Node: Macro Details,  Next: alias,  Prev: Invoking Macros,  Up: Defining New Texinfo Commands

18.3 マクロの詳細
=================

TeXと`makeinfo'の実装には避けることのできない相違があるので，
Texinfoマクロは以下の制限があります．

   * マクロは少なくとも一つのTeXグループに展開されます．これは，
     `@set'とその他の類似のコマンドはマクロで効果がないことを意味します．

   *
     条件文のような単独行となるコマンドを含むマクロは，行の中間で呼び出すこと
     は不可能です．

   *
     マクロ引数内のカンマは，バックスラッシュでエスケープされている場合でも，
     常に動作するわけではありません．

   *
     TeXの実装では，自然な方法でマクロを定義するマクロを構築できません．こ
     うするためには，条件文と生のTeXを使用します．例えば以下のようにします．

          @ifnottex
          @macro ctor {name, arg}
          @macro \name\
          something involving \arg\ somehow
          @end macro
          @end macro
          @end ifnottex
          @tex
          \gdef\ctor#1{\ctorx#1,}
          \gdef\ctorx#1,#2,{\def#1{something involving #2 somehow}}
          @end tex

   * マクロ定義の中でコメントを避けることは最善です．


マニュアルの印刷バージョンを生成しているとき，マクロ機能でエラーが生じる
場合，`texi2dvi'を`-E'オプションを用いて呼び出し，
`makeinfo'でマクロの展開を試みてください．*Note Format with
texi2dvi::を参照してください．


File: texinfo-ja.info,  Node: alias,  Next: definfoenclose,  Prev: Macro Details,  Up: Defining New Texinfo Commands

18.4 `@alias NEW=EXISTING'
==========================

`@alias'コマンドは，新しいコマンドを既存のものと同じように定義しま
す．これは追加のマークアップ名の定義に便利で，このため出力結果が同じであっ
ても，入力の意味論的な情報を維持します．

  `@alias'コマンドを単独行に書き，新しいコマンド名，等号，そして既存
のコマンド名を続けてください．等号の周りの空白は無視されます．このため以
下のようにします．
     @alias NEW = EXISTING

例えば，ドキュメントが本と他のメディア(例えば動画)の両方への引用を含んで
いる場合，通常の`@cite{}'と同じことを行いますが，同じような余分
な意味論的情報をもたらすマクロ`@moviecite{}'を定義したい可能性が
あります．このため以下のようにします．

     @alias moviecite = cite

気まぐれな引数の解析のため，マクロは常に同じ結果となるわけではありません．
また，別名はマクロより定義が簡単です．そのため，コマンドは重複しません．
(また，専門語ファイルで大量に使用されました！)

  別名は，直接的や間接的に，再帰的してはいけません．


File: texinfo-ja.info,  Node: definfoenclose,  Prev: alias,  Up: Defining New Texinfo Commands

18.5 `definfoenclose': 強調のカスタマイズ
=========================================

`@definfoenclose'コマンドは，Infoに対しては使用しTeXに対しては
使用しない強調コマンドの定義として使用してもかまいません．
`@definfoenclose'で定義されたコマンドは，前後のテキストの文字列内
の，そのコマンドで囲んだテキストに印を付けます．Info出力に似た制御を行な
うためこれを使用することも可能です．

  おそらく，Infoに対し`@definfoenclose'でコマンドを定義する場合，
`texinfo.tex'，`texinfo.cnf'，またはドキュメントの
`@iftex'の中でTeXに対し対応するコマンドを作成することになるでしょ う．

  `@definfoenclose'コマンドを一行で書き，カンマで区切られた三つの引
数を続けてください．`@definfoenclose'の最初の引数は(`@'がな い)
@-コマンド名です．二番目の引数はInfoを開始するデリミタ文字列です．
そして，三番目の引数はInfoを終了するデリミタ文字列です．デリミタ文字列は
スペースを含めてもかまいません．開始と終了のデリミタは必須ではありません．
開始デリミタが不要で，終了デリミタが欲しい場合，コマンド名で同じ行に二つ
のカンマを続ける必要があります．そうしない場合，Info書式化コマンドは，当
然，終了デリミタ文字列を開始デリミタ文字列だと誤って解釈します．

  (`@emph'，`@strong'，`@t'，または`@i'のように)前
もって定義されているマクロ名で`@definfoenclose'する場合，囲まれた
定義は組込み定義に優先されます．

囲みコマンドはカッコ内の一つの引数を取り，以下のように定義されます．これ
は，新しいマークアップコマンドを意図しています(*note Marking Text::)．

  例えば，以下のように書くことが可能です．

     @definfoenclose phoo,//,\\

`@phoo'の引数の前に`//'，後ろに`\\'を挿入するInfo書式化コマンドと
して`@phoo'を定義するために，Texinfoファイルの最初の方に書きます．
そして，Infoで強調された`//bar\\'が必要な場所ならどこでも，
`@phoo{bar}'を書くことが可能です．

  また，TeX書式化で以下のように書くことも可能でしょう．

     @iftex
     @global@let@phoo=@i
     @end iftex

`@phoo'をTeXに`@phoo'の引数をイタリック対で植字させるコマ
ンドとして`@phoo'を定義します．

  それぞれの定義は独自のフォーマッタに適用さます．一つはTeXに対し，もう1
つは`texinfo-format-buffer'や`texinfo-format-region'に対するも
のです．`@definfoenclose'コマンドは`@ifinfo'の中に書く必要は
ありませんが，生のTeXコマンドは`@iftex'の中に書く必要があります．

  もう一つの例です．以下のように書きます．

     @definfoenclose headword, , :

`@headword'の引数の前には何も挿入せず，後にコロンを挿入するInfo書
式化コマンドとして`@headword'を定義するために，ファイルの最初の方
に書いてください．

  `@definfoenclose'定義は，直接的または間接的に，再帰的してはいけま
せん．


File: texinfo-ja.info,  Node: Hardcopy,  Next: Creating and Installing Info Files,  Prev: Defining New Texinfo Commands,  Up: Top

19 書式化とハードコピーの出力
*****************************

Texinfoファイルから印刷されたマニュアルを作成するため，三つの主なシェル
コマンドがあります．一つは，Texinfoファイルを印刷されるファイルに変換す
るもので，二つ目は索引をソートするもので，三つ目は書式化されたドキュメン
トを印刷するものです．シェルコマンドを使用するとき，オペレーティングシス
テムのシェルで直接実行したり，GNU Emacs内部のシェルで実行したりすること
が可能です．

  GNU
Emacsを使用している場合，シェルコマンドの代わりにTexinfoモードで提供
されているコマンドを使用することが可能です．ファイルを書式化したり，索引
をソートしたり，結果を印刷したりする三つのコマンドの加え，Texinfoモード
は，出力バッファを更新したり，印刷のキューを表示したり，印刷キューからジョ
ブを削除したりするコマンドに対するキーバインドを提案します．

* Menu:

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                               of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.


File: texinfo-ja.info,  Node: Use TeX,  Next: Format with tex/texindex,  Up: Hardcopy

19.1 TeXの使用
==============

TeXと呼ばれる植字プログラムは，Texinfoファイルの書式化に使用します．
TeXは非常に強力な植字プログラムで，正しく使用すると，非常に良い仕事を
します．(TeXの入手方法の詳細は，*Note How to Obtain TeX: Obtaining TeX.)

  スタンドアローンの`makeinfo'プログラムとEmacsの関数の
`texinfo-format-region'と`texinfo-format-buffer'コマンドは，
TeXのように，Texinfoファイルの@-コマンドを全く同じように読み込みます
が，Infoファイルの作成とは異なる処理を行います(*note Creating an Info
File::)．


File: texinfo-ja.info,  Node: Format with tex/texindex,  Next: Format with texi2dvi,  Prev: Use TeX,  Up: Hardcopy

19.2 `tex'と`texindex'での書式化
================================

Texinfoファイルを，シェルコマンド`tex'にTexinfoファイル名を続けて書
式化します．例えば，以下のようにします．

     tex foo.texi

TeXは，索引や相互参照等の情報を含むいくつかの追加ファイルと，
"DVIファイル(DVI file)"を生成します．DVIファイル("DeVice
Independent"ファイル)は，事実上あらゆるデバイスに出力可能です(以下のセク
ションを参照してください)．

  `tex'書式化コマンド自身は索引をソートしません．それは，ソートされて
いない索引データの出力を書き出します．(`texi2dvi'コマンドは，自動的
に索引を生成します．*note Format with `texi2dvi': Format with
texi2dvi.)`tex'コマンド実行後，印刷する索引を生成するため，
最初に索引をソートする必要があります．`texindex'コマンドは索引をソー
トします．(ソースファイル`texindex.c'は，他の場所から得られることも
ありますが，標準的なTexinfo配布物の一部となっています．)

  `tex'書式化コマンドは，標準的な慣習に従う名前でソートされていない索
引ファイルを出力します．`.tex'(または類似のもので，*note tex
invocation: (web2c)tex
invocation.)が付いている主な入力ファイルの名前の拡張子は
削除され，索引名の二文字が続きます．例えば，入力ファイル
`foo.texinfo'に対する生の索引出力ファイルは，`foo.cp'，
`foo.vr'，`foo.fn'，`foo.tp'，`foo.pg'，そして
`foo.ky'です．それらは，正確に`texindex'に与える引数です．

  全てのソートされていない索引ファイル名を明示的に指定する代わりに，
`??'をシェルワイルドカードとして使い，以下の形式でコマンドに与える
ことも可能です．

     texindex foo.??

このコマンドは，`texindex'を全てのソートされていない索引ファイルで
実行し，それには，`@defindex'や`@defcodeindex'を使用して独自
に定義したものも含まれます．(たとえ，`foo.el'のように，索引ファイル
ではない二文字の拡張子を持つ似た名前のファイルがある場合でも，
`texindex foo.??'を実行してもかまいません．`texindex'コマンド
は，そのようなファイルを無視したことを報告します．)

  それぞれ指定したファイルに対し，`texindex'は入力ファイルに`s'
を付けた名前を持つソートされた索引ファイルを生成します．
`@printindex'コマンドは，その名前でファイルを探します (*note Printing
Indices & Menus::)．`texindex'は生の索引出力ファイ ルを変更しません．

  索引のソート後，`tex'書式化コマンドをTexinfoファイルで再実行する必
要があります．これはDVIファイルを再生成し，このとき索引項目は更新されま
す．

  最終的に，相互参照で正しいページ番号を得るために，`tex'をもう一度実
行する必要があります．

  要約すると，これは五段階の処理です．

  1. Texinfoファイルで`tex'を実行してください．これは(相互参照が定義され
     ておらず，索引のない)DVIファイルと，(二文字の拡張子を持つ)生の索引ファイ
     ルを生成します．

  2. 生の索引ファイルで`texindex'を実行してください．これで，適切にソー
     トされた(三文字の拡張子の)索引ファイルを生成します．

  3. `tex'を再びTexinfoファイルで実行してください．これでDVIファイルを生
     成し，索引と定義された相互参照はこのとき再生成しますが，相互参照のページ
     番号は一般に正しくないので最後に再生成します．

  4. `texindex'で再び索引をソートしてください．

  5.
     `tex'を最後に一度実行してください．このとき相互参照に対し，正しいペー
     ジ番号を書き出します．

  別の方法として，ワンステップで処理します．`texi2dvi'(*note Format
with texi2dvi::)を実行してください．

  `tex'の実行後，毎回`texindex'を実行する必要はありません．実行
しない場合は，次の実行時に，`tex'書式化コマンドはソートされているか
どうかにかかわらず，たまたま存在する前回の`texindex'の使用から得ら
れる索引ファイルを使用します．これは，通常デバッグ中は問題ありません．

完全でないと分かっているドキュメントを印刷したり，ドキュメントの一つの章
だけ印刷したい場合もあります．その場合，通常のTeXが作成した追加ファイ
ルと，相互参照が十分でないときTeXが与える警告は厄介になります．
`@novalidate'コマンドでこれを避けることができ，それは
`@setfilename'コマンド(*note `@setfilename': setfilename.)
の_前で_与える必要があります．このため，ファイルの最初はおそらく以
下のようになります．

     \input texinfo
     @novalidate
     @setfilename myfile.info
     ...

`@novalidate'も，`--no-validate'オプション(*note Pointer
Validation::)を与えたように`makeinfo'で有効に停止します．


File: texinfo-ja.info,  Node: Format with texi2dvi,  Next: Print with lpr,  Prev: Format with tex/texindex,  Up: Hardcopy

19.3 `texi2dvi'での書式化
=========================

`texi2dvi'コマンドは，自動的に`tex'と`texindex'の両方を，
ソートされた索引や相互参照が解決されているDVIファイルを生成するのに必要
な回数実行します．それは，前のセクションで記述された，
`tex'--`texindex'--`tex'--`tex'の順番で単純化され ています．

  入力ファイル`foo.texi'で`texi2dvi'を実行するため，以下のように
してください(`prompt$ 'はシェルプロンプトです)．

     prompt$ texi2dvi foo.texi

  この例で示したように，`texi2dvi'の入力ファイル名は(`.texi'，
`.texinfo'等の)拡張子を含める必要があります．MS-DOSやおそらく他の環
境では，オペレーティングシステムがシェルで`texi2dvi'スクリプトを呼
び出すことを期待する代わりに，`sh texi2dvi foo.texi'を実行する必要
があるかもしれません．

  おそらく，`texi2dvi'の最も役に立つオプションは，
`--texinfo=CMD'です．これは，TeXを実行する前の一時的な入力
ファイルのコピーで，`@setfilename'の行の後にCMDを単独行で挿
入します．こうすることで，`@smallbook' (*note smallbook::)，
`@afourpaper' (*note A4 Paper::)や，`@pagesizes' (*note
pagesizes::)のように，異なる印刷書式を，実際にドキュメントソース
を変更することなく指定することが可能になります．(`texinfo.cnf'で，
サイト全体に対しこうすることもできます．*note Preparing for TeX:
Preparing for TeX.)

  他のオプションのリストは，`texi2dvi --help'を実行してください．


File: texinfo-ja.info,  Node: Print with lpr,  Next: Within Emacs,  Prev: Format with texi2dvi,  Up: Hardcopy

19.4 `lpr -d'を使用したシェルでの印刷
=====================================

DVIファイルを印刷する正確なコマンドは，システムインストールの状態に依存
します．一般的なものは二つあり，それらは`dvips foo.dvi -o'と `lpr -d
foo.dvi'です．

  例えば，以下のコマンドで，(おそらく)`Bison Manual'の索引のソート，
書式化，そして印刷には十分でしょう．

     tex bison.texinfo
     texindex bison.??
     tex bison.texinfo
     lpr -d bison.dvi

(シェルコマンドはサイトにより異なる可能性があることを覚えておいてくださ
い．しかし，これらは通常使用されているバージョンです．)

  `texi2dvi'シェルスクリプトを以下のように使用します(前のセクションを
参照してください)．

     texi2dvi bison.texinfo
     lpr -d bison.dvi
     # or perhaps dvips bison.dvi -o

  `lpr'はUnixシステムの標準的なプログラムですが，通常
MS-DOS/MS-Windowsにはありません．ネットワークパッケージに`lpr'とい
う名のプログラムが付属していることもありますが，これらは通常，ネットワー
ク上のプリントサーバにファイルを送ることに機能が制限されていて，一般に，
`-d'オプションはサポートされていません．不幸にも，これらのシステム
のいずれかで十分な仕事をしたい場合，DVIファイルを印刷する代わりの方法が
あります．

   * Unixライクの`lpr'プログラムや，そのクローンを見つけてインストールし
     てください．そうする場合，DVIファイルを上記のようなスクリプトで印刷でき
     ます．

   *
     DVIファイルをDVIファイルのネットワークプリンタのキューに送ってください．
     ネットワークプリンタは，DVIファイルを印刷する特別なキューを持つものもあ
     ります．キューにファイルを送るため，ネットワークソフトウェアを設定するこ
     とが可能なはずです．場合によっては，ネットワークソフトウェア付属の
     `lpr'のバージョンには，特別のキューにファイルを送るための以下のよう
     な特別なオプションがあります．

          lpr -Qdvi -hprint.server.domain bison.dvi

   *
     DVIファイルをPostscriptやPCLファイルに変換し，ローカルプリンタに送ってく
     ださい．これらのツールの記述の詳細は，*Note dvips invocation:
     (dvips)dvips invocation.
     そして，`dvilj'のmanページを参照してください．DVIファイル
     をローカルプリンタが直接理解できるフォーマットに変換してから，通常は
     `PRN'である適切なポートそれを送ってください．


File: texinfo-ja.info,  Node: Within Emacs,  Next: Texinfo Mode Printing,  Prev: Print with lpr,  Up: Hardcopy

19.5 Emacsシェルからの実行
==========================

書式化と印刷のコマンドをGNU Emacs内部のシェルから与えることができます．
Emacs内部のシェルを作成するため，`M-x shell'を入力してください．この
シェルでドキュメントの書式化と印刷が可能です．詳細は，*Note Format and
Print Hardcopy: Hardcopy.

  `tex'を実行しているシェルバッファへ(から)切替えて，他を編集すること
が可能です．遅いマシンで長いドキュメントを書式化する場合，これは大変便利
です．

  `texi2dvi'をEmacsシェルから実行することも可能です．例えば，Emacsの
内部シェルから，`Using and Porting GNU CC'を書式化し印刷する，
`texi2dvi'の使用法は以下のようになります．

     texi2dvi gcc.texinfo
     lpr -d gcc.dvi

  Texinfoモードでの書式化と印刷に関する詳細は，*Note Texinfo Mode
Printing::.


File: texinfo-ja.info,  Node: Texinfo Mode Printing,  Next: Compile-Command,  Prev: Within Emacs,  Up: Hardcopy

19.6 Texinfoモードでの書式化と印刷
==================================

Texinfoモードは，TeXの書式化と印刷のための前もって定義されたキーコマ
ンドをいくつか提供しています．これらには，索引のソート，プリンタキューを
見ること，書式化ジョブの停止，そしてオペレーションが発生させているバッファ
の表示の更新のコマンドが含まれます．

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     現在のバッファで`texi2dvi'を実行します．

`C-c C-t C-r'
`M-x texinfo-tex-region'
     現在の領域でTeXを実行します．

`C-c C-t C-i'
`M-x texinfo-texindex'
     `texinfo-tex-region'で書式化されたTexinfoファイルの索引をソートしま
     す．

`C-c C-t C-p'
`M-x texinfo-tex-print'
     `texinfo-tex-region'や`texinfo-tex-buffer'で作成されたDVIファ
     イルを印刷します．

`C-c C-t C-q'
`M-x tex-show-print-queue'
     プリントキューを表示します．

`C-c C-t C-d'
`M-x texinfo-delete-from-print-queue'
     プリントキューからジョブを削除します．前もって`C-c C-t C-q'コマンド
     (`texinfo-show-tex-print-queue')で調べたジョブ番号の入力を促されま
     す．

`C-c C-t C-k'
`M-x tex-kill-job'
     現在実行している，`texinfo-tex-region'や`texinfo-tex-buffer'で
     開始されたTeXジョブや，Texinfoシェルバッファで実行している他のあらゆ
     るプロセスを停止します．

`C-c C-t C-x'
`M-x texinfo-quit-job'
     <x>を送られて，エラーで停止した書式化のジョブを終了します．こうする
     とき，TeXは行ったことの記録を`.log'ファイルに保存します．

`C-c C-t C-l'
`M-x tex-recenter-output-buffer'
     TeXの印刷と書式化コマンドを実行しているシェルバッファを，最新出力を表
     示させるため再表示します．

このため，バッファを書式化するコマンドの通常の順序は，以下のようになりま
す(右はコメントです)．

     C-c C-t C-b             バッファで`texi2dvi'を実行．
     C-c C-t C-p             DVIファイルを印刷．
     C-c C-t C-q             プリンタキューの表示．

  TexinfoモードのTeX書式化コマンドは，`*tex-shell*'と呼ばれるEmacs
のサブシェルを開始します．`texinfo-tex-command'，
`texinfo-texindex-command'，そして`tex-dvi-print-command'コマ
ンドは，全てこのシェルで実行されます．

  コマンドオペレーションを`*tex-shell*'バッファで見ることが可能で，他
のシェルバッファで行うように，`*tex-shell*'バッファに/から切替えて
使用することが可能です．

書式化と印刷コマンドは，いくつかの変数の値に依存します．デフォルト値は以
下のとおりです．

         Variable                              Default value

     texinfo-texi2dvi-command                  "texi2dvi"
     texinfo-tex-command                       "tex"
     texinfo-texindex-command                  "texindex"
     texinfo-delete-from-print-queue-command   "lprm"
     texinfo-tex-trailer                       "@bye"
     tex-start-of-header                       "%**start"
     tex-end-of-header                         "%**end"
     tex-dvi-print-command                     "lpr -d"
     tex-show-queue-command                    "lpq"

  これらの変数の値を，`M-x edit-options'コマンド(*note Editing Variable
Values: (emacs)Edit Options.)の使用や， `M-x
set-variable'コマンド(*note Examining and Setting Variables:
(emacs)Examining.)の使用や，`.emacs'初期化ファ イル(*note Init File:
(emacs)Init File.)を使用して変更す ることが可能です．

  バージョン20から始まるGNU Emacsは，"カスタマイズ(Customize)"と呼ばれ
る，ユーザフレンドリーなインターフェースを提供していて，それはユーザ定義
可能な変数の値を変えるためのものです．詳細は，*Note Easy Customization
Interface: (emacs)Easy Customization.  Texinfo変 数は，`M-x
customize'コマンドで呼び出すと， `Development/Docs/Texinfo'
グループで見つかります．


File: texinfo-ja.info,  Node: Compile-Command,  Next: Requirements Summary,  Prev: Texinfo Mode Printing,  Up: Hardcopy

19.7 ローカル変数リストの使用
=============================

TeX書式化コマンドをTexinfoファイルに適用するための更にもう一つの方法
は，Texinfoファイルの終りで"ローカル変数リスト(local variables
list)"にそれらのコマンドを書く方法です．`tex'や`texi2dvi'コマ
ンドを`compile-command'のコマンドとして指定し，`M-x compile'の
入力でEmacsに実行させることが可能です．これで`*compilation*'バッファ
と呼ばれる特別なシェルを作成し，その中でEmacsはコンパイルコマンドを実行
します．例えば，`gdb.texinfo'ファイルの終りに，`@bye'の後で，
以下を書くことが可能です．

     Local Variables:
     compile-command: "texi2dvi gdb.texinfo"
     End:

この手法は，この方法でプログラムをコンパイルするプログラマが，最もよく使
用します．*Note Compilation: (emacs)Compilation.を参照してく ださい．


File: texinfo-ja.info,  Node: Requirements Summary,  Next: Preparing for TeX,  Prev: Compile-Command,  Up: Hardcopy

19.8 TeX書式化の必要条件の要約
==============================

TeXに入力される全てのTexinfoファイルは，`\input'コマンドで始まり，
`@setfilename'コマンドを含んでいる必要があります．

     \input texinfo
     @setfilename ARG-NOT-USED-BY-TEX

最初のコマンドは，TeXにTexinfoファイルの処理に必要なマクロをロードす
るよう指示し，二番目のコマンドは補助ファイルを開きます．

  全てのTexinfoファイルは，TeXの処理を終了し未完成のページを強制排出す
る行で終る必要があります．

     @bye

  厳密にいうと，これらの行が，全てのTexinfoファイルをTeXで成功裏に処理
するため必要な全てとなります．

  しかし通常は，最初に印刷されたマニュアルのタイトルを定義する
`@settitle'コマンド，`@setchapternewpage'コマンド，タイトル
ページ，著作権ページ，そして許可を含んでいます．`@bye'の他に，ファ
イルの終りは通常，索引と目次を含んでいます．(そして，もちろんほとんどの
マニュアルは本文も同様に含んでいます．)

  詳細は，以下を参照してください．
   * *Note `@settitle': settitle.

   * *Note `@setchapternewpage': setchapternewpage.

   * *Note Page Headings: Headings.

   * *Note Titlepage & Copyright Page::

   * *Note Printing Indices & Menus::

   * *Note Contents::


File: texinfo-ja.info,  Node: Preparing for TeX,  Next: Overfull hboxes,  Prev: Requirements Summary,  Up: Hardcopy

19.9 TeXに対する準備
====================

TeXは，最初の行の`\input texinfo'コマンドで，`texinfo.tex'
ファイルを探す場所を知る必要があります．`texinfo.tex'は，TeXに
@-コマンドの処理方法を伝えます．それは，全ての標準的なGNU配布物に含まれ
ています．

  通常インストーラは，`texinfo.tex'ファイルをGNU Texinfo，Emacs，また
はその他のGNUのソフトウェアがインストールされるときにTeXのマクロを含
めるデフォルトのディレクトリに書き込みます．この状況では，TeXはファイ
ルを見つけるので，特別なことをする必要はありません．こうならない場合は，
TeXを実行するとき，`texinfo.tex'をカレントディレクトリに配置する
ことが可能で，TeXはそこで見つけます．

  また，他の配布物で`epsf.tex'がまだインストールされていない場合，
`epsf.tex'をインストールすべきです．詳細は，`@image'コマンド
の記述の最後で説明しています(*note Images::)．

  `pdfcolor.tex'がまだインストールされておらず`pdftex'を使用
する場合も同様です．

  更に，追加ファイル`texinfo.cnf'を作成し，同様にインストールしてもか
まいません．このファイルは，`@setfilename'コマンド (*note
`@setfilename': setfilename.)が実行されたとき，TeXに読
み込まれます．ローカルサイトの慣習で，好みのあらゆるコマンドをそこに書く
ことが可能です．それらは，TeXがTexinfoドキュメントを処理しているとき
読み込まれます．例えば，`texinfo.cnf'が`@afourpaper'を含む場 合(*note
A4 Paper::)，全てのTexinfoドキュメントは，実際にそのページサイ
ズで処理されます．`texinfo.cnf'に何も書かない場合，それを作成する必
要はありません．

上記の場所のこれらのシステムファイルが十分でない場合，明示的にディレクト
リを指定することが可能です．`texinfo.tex'に対し，`\input'コマ
ンドの後に完全なファイルパスを書くことで可能となります．
`texinfo.tex'と`texinfo.cnf'(とその他のTeXが読み込むもの)の
両方を動作させるもう一つの方法は，`TEXINPUTS'環境変数を`.cshrc'
や`.profile'ファイルで設定することです．

  `.cshrc'または`.profile'のどちらを使用するかは，Bourneシェル互
換(`sh'，`bash'，`ksh'，...)，またはCシェル互換
(`csh'，`tcsh')のコマンドインタプリタのどちらを使用しているか
に依存します．後者は，`.cshrc'を初期化情報として読み込み，前者は
`.profile'を読み込みます．

  `.cshrc'ファイルで，以下の`csh'コマンド列を使用します．

     setenv TEXINPUTS .:/home/me/mylib:/usr/lib/tex/macros

  `.profile'ファイルで，以下の`sh'コマンド列を使用します．

     TEXINPUTS=.:/home/me/mylib:/usr/lib/tex/macros
     export TEXINPUTS

  MS-DOS/MS-Windowsでは，以下のようにします(1) (*note Preparing for
TeX-Footnote-1::)．

     set TEXINPUTS=.;d:/home/me/mylib;c:/usr/lib/tex/macros

DOS/Windowsユーザーは，`autoexec.bat'ファイルやWindowsレジストリに，
そのようなコマンドを慣習的に書いています．

これらの設定で，TeXは`\input'ファイルを，最初に`.'で示され
る現在のディレクトリで探し，それから仮にユーザーの`me/mylib'ディレ
クトリで探し，最後にシステムディレクトリ`/usr/lib/tex/macros'で探し
ます．

  最後に，TeXがTexinfoをより速くロードできるように，`.fmt'ファイル
のダンプを望むかもしれません(*note Memory dumps: (web2c)Memory dumps.)．
(`texinfo.tex'の更新は再ダンプを要求するので不利になります．)
`epsf.tex'がTeXで検索可能だという仮定で，以下のコマンドを実行す
ることで可能になります．

     initex texinfo @dump

  (`dump'はTeXプリミティブです．) そして，`texinfo.fmt'を
`.fmt'ファイルが見つかる場所に移動してください．一般にこれは，
TeXをインストールしたサブディレクトリ`web2c'にあります．


File: texinfo-ja.info,  Node: Preparing for TeX-Footnotes,  Up: Preparing for TeX

  (1) これらのシステムで，
ディレクトリセパレータは，`:'の代わりに`;'文字を使用することに
注意してください．


File: texinfo-ja.info,  Node: Overfull hboxes,  Next: smallbook,  Prev: Preparing for TeX,  Up: Hardcopy

19.10 Overfull "hboxes"
=======================

TeXでは，右のマージンまで拡張しなければ行を植字できないときもあります．
これは，電子メールのネットワークアドレスや非常に長いタイトルのように，ハ
イフネーションできない長い単語だとTeXが解釈したとき生じます．これが生
じたとき，TeXは以下のようなエラーメッセージを出力します．

     Overfull @hbox (20.76302pt too wide)

(TeXでは，行は"水平ボックス"にあるので，"hbox"と言う言葉です．
`@hbox'はTeXプリミティブで，Texinfo言語では必要ありません．)

  TeXは，Texinfoソースファイルでの行番号と，違反している行のテキストを
表示し，それにはハイフネーションだと考えられる全ての位置に印があります．
植字エラーの詳細は，*Note Catching Errors with TeX Formatting:
Debugging with TeX.

  Texinfoファイルに"overfull hbox"がある場合，文章をoverfull hboxが生じ
ないように書き直すことも，そのままにすることも可能です．小さな右のマージ
ンへのはみ出しは余り問題とならず，目立たない可能性もあります．

  overfull boxesが多く，書き直しに抵抗がある場合，TeXで利用可能な印字空
間を大きく増加させることも可能で，そのため(運が良ければ)，以下のようにす
ることで多くの悪い行の分割が避けられるでしょう．

     @tex
     \global\emergencystretch = .9\hsize
     @end tex

(必要なだけ分数を調節すべきです．) この`\emergencystretch'に対する
大きな値では，通常は植字の出力品質がひどく低下するので，デフォルトではあ
りません．デフォルトは`.15\hsize'です．`\hsize'は，現在の行の
幅を含むTeXの寸法です．

  しかし，そうしない場合，存在するoverfull boxesに対し，TeXは大きく醜い
overfull hboxを含む黒い長方形を行の端に印刷します．ドラフトを修正する場
合，これで問題の場所に気づくでしょう．

そのような奇形物が，最終的な出力物に出現することを阻止するため，Texinfo
ファイルの最初に，`@titlepage'コマンドの前に，単独行で以下を書いて
ください．

     @finalout


File: texinfo-ja.info,  Node: smallbook,  Next: A4 Paper,  Prev: Overfull hboxes,  Up: Hardcopy

19.11 "小さな"本の印刷
======================

デフォルトで，TeXは8.5x11インチの書式で印刷するためページに植字します．
しかし，以下のコマンドを単独行で，Texinfoファイルのタイトルページの前の
最初に挿入することで，製本に適した7x9.25インチの書式にするよう，TeXに
命令可能です．

     @smallbook

(多くの本はたいてい7x9.25インチなので，このコマンドは，
`@regularbooksize'コマンドと呼ぶ方が良いかもしれませんが，8.5x11イ
ンチの書式との対比で`@smallbook'コマンドと呼ばれるようになりました．)

  `@smallbook'コマンドをstart-of-headerとend-of-header行の間に書く場
合，TexinfoモードのTeXの領域書式化コマンド，`texinfo-tex-region'
は，"小さな"本のサイズに領域を書式化します(*note Start of Header::)．

  より小さなマニュアルを簡単に作成するコマンドの例の情報は，*Note
small::.

  ソースファイルを変更せず`@smallbook'で書式化を行う方法は， *Note
Format with texi2dvi::.  また，*Note Preparing for TeX: Preparing for
TeX.を参照してください．


File: texinfo-ja.info,  Node: A4 Paper,  Next: pagesizes,  Prev: smallbook,  Up: Hardcopy

19.12 A4用紙への印刷
====================

ヨーロッパサイズのA4(またはA5)用紙に印刷するため，ドキュメントの書式化を
`@afourpaper' (または`@afivepaper')コマンドでTeX伝えるこ
とが可能です．Texinfoファイルの最初付近にタイトルページの前に，単独行で
コマンドを書いてください．例えば，このマニュアルのヘッダに書く方法は以下
のようになります．

     \input texinfo    @c -*-texinfo-*-
     @c %**start of header
     @setfilename texinfo
     @settitle Texinfo
     @afourpaper
     @c %**end of header

ソースファイルの変更を必要とすることなく，異なる用紙サイズで書式化を行う
方法は，*Note Format with texi2dvi::.  また，*Note Preparing for TeX:
Preparing for TeX.を参照してください．

  コマンド`@afourlatex'の結果の書式化の方がいいかもしれませんし，ま
たそうでないかもしれません．A4用紙での幅広の書式のため，
`@afourwide'もあります．


File: texinfo-ja.info,  Node: pagesizes,  Next: Cropmarks and Magnification,  Prev: A4 Paper,  Up: Hardcopy

19.13 `@pagesizes' [WIDTH][, HEIGHT]: カスタムページサイズ
==========================================================

ページの主なテキストの領域の高さと(オプションで)幅を，`@pagesizes'
コマンドで明示的に指定できます．Texinfoの最初付近で，タイトルページの前
に単独行で書いてください．最初が高さで必要なら幅をカンマで区切って書きま
す．以下が例です．

     @pagesizes 200mm,150mm
  そして以下も例です．
     @pagesizes 11.5in

これは，B5サイズの用紙への印刷に対し妥当です．強調しますが，このコマンド
は_テキストエリア_を指定するコマンドで，用紙サイズを指定しません
(250mmx177mmはB5で，14inx8.5inはleagalです)．

  ページのマージンを変更するような，より精密な変更に対しては，
`texinfo.tex'(または，`texinfo.cnf'*note Preparing for TeX: Preparing
for TeX.)で新しいコマンドを定義する必要があります．

  ソースファイルを変更せず`@pagesizes'を指定する方法は，*Note Format
with texi2dvi::.  また，*Note Preparing for TeX: Preparing for TeX.を参
照してください．

  `@pagesizes'は`makeinfo'では無視されます．


File: texinfo-ja.info,  Node: Cropmarks and Magnification,  Next: PDF Output,  Prev: pagesizes,  Up: Hardcopy

19.14 断裁トンボと拡大
======================

`@cropmarks'コマンドで，TeXにページの角に断裁トンボを印刷させ
(てみ)ることが可能です．タイトルページの前で，Texinfoファイルの最初の方
に，`@iftex'と`@end iftex'行の間に，単独行で，
`@cropmarks'コマンドを以下のように書いてください．

     @iftex
     @cropmarks
     @end iftex

このコマンドは，主にプリンタが複数ページを1枚のフィルムシートに植字する
ためのものですが，`@smallbook'コマンドで，7x9.25インチに設定した本
の四隅に印を付けてみることも可能です．(通常の大きさの用紙に印刷するため
の通常の大きさの出力に対して，プリンタは断裁トンボを生成しません．)異な
る印刷機は異なる方法で動作するので，冒険心でこのコマンドを使用してみるべ
きです．`texinfo.tex'にコマンドを再定義する必要があるかもしれません．

  `\mag'というTeXコマンドで，通常より大きいまたは小さいページに
TeXに植字させ(てみ)ることができます．植字される全てのものは，相対的に
大きくまたは小さく大きさを調整されます．(`\mag'は"magnification(拡
大)"を意味します．)これは，Texinfoの@-コマンドでは_ありません_が，
バックスラッシュを前置した，普通のTeXコマンドです．このコマンドは，
`@tex'と`@end tex'の間に書く必要があります(*note Raw Formatter
Commands::)．

  以下の`='と数字が付いている`\mag'コマンドは，希望する倍率の
1000倍です．例えば通常サイズの1.2倍に印刷するため，タイトルページの前で，
Texinfoファイルの最初の方に以下のように書いてください．

     @tex
     \mag=1200
     @end tex

印刷技術によっては，印刷店に通常より大きなマスターを与えることで，より良
く見える通常サイズのコピーを印刷可能です．彼らはそれにより，効率的に解像
度をあげ，縮小します．

  システムによっては，標準でない`\mag'を使用したDVIファイルは，印刷で
きなかったり，特定の拡大率でしか印刷できなかったりします．試してみたくだ
さい．


File: texinfo-ja.info,  Node: PDF Output,  Prev: Cropmarks and Magnification,  Up: Hardcopy

19.15 PDF出力
=============

普通の`tex'の代わりに，ファイルを処理する`pdftex'プログ
ラムを使用することで，TexinfoソースファイルからPDF出力ファイルを生成する
ことが可能となります．`tex foo.texi'の代わりに`pdftex
foo.texi'を実行するか，`texi2dvi'に`--pdf'オプションを与え てください．

  "PDF"は`Portable Document Format(移植可能な文書のフォーマット)'を意
味しています．それは数年前に，ドキュメントの相互変換のために，PostScript
言語をベースにして，アドビシステムズで開発されました．X window systemに
対するPDF reader (http://www.foolabs.com/xpdf/)は， definition of the
file format
(http://partners.adobe.com/asn/developer/technotes/)でそのまま自由に利用することが可能です．PDFは，バイナリ
形式なので，他の出力形式のような`@ifpdf'や`@pdf'コマンドはあ りません．

名前に`portable'があるにもかかわらず，PDFファイルはTexinfoがサポートする
普通のASCII形式の(InfoやHTML)程，実際には移植性がありません(DVIと比較し
た移植性は，議論の余地があります)．それらは，かなり大きくなりつつあり，
TeXで(デフォルトで)非常によく使用されているビットマップフォントをサポー
トしていません．それにもかかわらず，PDFファイルは画面上のドキュメントを
できる限り忠実に実際の印刷物に対して維持するので，地位を保っています．

  TexinfoのPDFサポートはかなり基本的です．


File: texinfo-ja.info,  Node: Creating and Installing Info Files,  Next: Command List,  Prev: Hardcopy,  Up: Top

20 Infoファイルの作成とインストール
***********************************

この章は，Infoファイルの作成とインストールの方法を述べます．ファイルの書
式自身の一般的な情報は，*Note Info Files::.

* Menu:

* Creating an Info File::
* Installing an Info File::


File: texinfo-ja.info,  Node: Creating an Info File,  Next: Installing an Info File,  Up: Creating and Installing Info Files

20.1 Infoファイルの作成
=======================

`makeinfo'は，TexinfoファイルをInfoファイル，HTMLファイル，またはプ
レーンテキストに変換するプログラムです．`texinfo-format-region'と，
`texinfo-format-buffer'は，TexinfoをInfoに変換するGNU Emacsの関数で す．

  InfoファイルをInfoシステムにインストールする情報は，*note Installing
an Info File::．

* Menu:

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                 in Emacs Lisp are an alternative
                                 to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                 to run better.
* makeinfo html::               Generating HTML output.


File: texinfo-ja.info,  Node: makeinfo advantages,  Next: Invoking makeinfo,  Up: Creating an Info File

20.1.1 `makeinfo'の利点
-----------------------

`makeinfo'ユーティリティは，Emacs書式化コマンドより速くTexinfoソー
スファイルからInfoファイルを作成し，より良いエラーメッセージを提供してい
ます．我々はそれを勧めています．`makeinfo'はEmacsから独立したCプロ
グラムです．`makeinfo'を使用するためにEmacsを実行する必要はなく，そ
のことは，Emacsを実行するには余りに非力なマシンでも`makeinfo'が実行
可能だということを意味しています．`makeinfo'は，三つの内の一つの方
法で実行可能です．それらは，オペレーティングシステムのシェルから，Emacs
のシェルから，またはEmacsのTexinfoモードで`C-c C-m C-r'や`C-c C-m
C-b'コマンドを入力する方法です．

  `texinfo-format-region'と`texinfo-format-buffer'コマンドは，
`makeinfo'を実行不可能なとき役に立ちます．また，状況によって短い領
域やバッファを`makeinfo'より速く書式化します．


File: texinfo-ja.info,  Node: Invoking makeinfo,  Next: makeinfo options,  Prev: makeinfo advantages,  Up: Creating an Info File

20.1.2 シェルから`makeinfo'を実行する
-------------------------------------

TexinfoファイルからInfoファイルを作成するため，`makeinfo'に続けて，
Texinfoファイルの名前を入力してください．このため，BisonのInfoファイルを
作成するためには，シェルで以下のように入力します．

     makeinfo bison.texinfo

  (`M-x shell'の入力で，Emacs内部でシェルを実行可能です．)

  オプションを指定したい場合もあります．例えば，使用している
`makeinfo'のバージョンを知りたい場合は以下を入力してください．

     makeinfo --version

  詳細は，*Note makeinfo options::.


File: texinfo-ja.info,  Node: makeinfo options,  Next: Pointer Validation,  Prev: Invoking makeinfo,  Up: Creating an Info File

20.1.3 `makeinfo'のオプション
-----------------------------

`makeinfo'コマンドはいくつかのオプションをとります．最もよく使用さ
れるオプションは，列を補充する値を設定するためのものと，脚注スタイルを指
定するために使用するものです．それぞれのコマンド行のオプションは， `--'
を前に置いた単語，または，`-'を前に置いた文字です．長いオ
プション名は，唯一に決まる程長い場合は省略可能です．

  例えば以下のシェルコマンドで，それそれの段の文字列を68文字で補充する
`bison.texinfo'に対するInfoファイルを作成するために，以下のようなシェ
ルコマンドを使用することが可能でしょう．

     makeinfo --fill-column=68 bison.texinfo

  二つ以上のオプションを，以下のように続けて書くことが可能です．

     makeinfo --no-split --fill-column=70 ...

これは，Infoファイルを，一つのおそらく大変長いファイルにまとめ，一段の文
字数を70文字に設定します．

  オプションは，以下のとおりです．

`-D VAR'
     変数VARを定義します．これは，Texinfoファイルでの`@set
     VAR'と同じです(*note set clear value::)．

`--commands-in-node-names'
     ノード名で`@'コマンドを許可します．おそらくTeXで実装できないの
     で推奨しません．また，`makeinfo'も非常に遅くなります．また，このオ
     プションは`--no-validate'が使用されているときも無視されます．詳細は，
     *Note Pointer Validation::.

`--docbook'
     InfoではなくDocBook出力を生成します．

`--enable-encoding'
     `@documentencoding'を元に，Infoやプレーンテキスト出力にアクセント
     付の文字と特殊文字を出力します．

`--error-limit=LIMIT'
`-e LIMIT'
     終了までに`makeinfo'が報告するエラーの数の最大値を設定します(続けて
     も意味が無いでしょう)．デフォルトは100です

`--fill-column=WIDTH'
`-f WIDTH'
     一段の最大文字数を指定します．これは行の右端です．おそらくこの幅で補充す
     るでしょう．(補充とは，段を補充し，指定した数と同じまたはそれより短い長
     さにするため，行を切ったり繋げたりする処理です．行は単語で切られます．)
     デフォルト値は72です．`--html'では無視されます．

`--footnote-style=STYLE'
`-s STYLE'
     脚注の形式をSTYLEに設定します．ノードの終りの形式のための
     `end'，またはノードを分ける形式の`separate'のいずれかです．こ
     のオプションで設定した値は，Texinfoファイルで`@footnotestyle'コマ
     ンド(*note Footnotes::)で設定した値に優先します．脚注形式が
     `separate'のとき，`makeinfo'は現在のノードで見つかった脚注を含
     む新しいノードを作成します．脚注形式が`end'のとき，`makeinfo'
     は現在のノードの終りに脚注の参照を置きます．`--html'では無視されま
     す．

`--force'
`-F'
     通常，入力ファイルにエラーがある場合，出力ファイルは作成されません．この
     オプションを用いると，出力ファイルが提供されます．

`--help'
`-h'
     利用可能なオプションをリストアップした使用方法のメッセージを出力し，正し
     く終了します．

`--html'
     Infoではなく，HTML出力物を生成します．*Note makeinfo html::.
     デフォルト
     で，HTML出力はソースのノードごとに一つの出力ファイルに分割し，トップレベ
     ルのInfoファイルの名前を用いたサブディレクトリに分割した出力を書き込みま
     す．

`-I DIR'
     `@include'コマンドを使用してインクルードしているファイルを見つける
     ためのディレクトリ検索リストに，DIRを追加します．デフォルトで，
     `makeinfo'はカレントディレクトリのみを探します．DIRが与えられ
     ていない場合，カレントディレクトリ`.'が追加されます．DIRでは，
     通常のパスの分離文字(Unixの`:'，MS-DOS/MS-Windowsの`;')で分割
     されている複数のディレクトリのリストが可能だということに注意してください．

`--ifhtml'
`--ifinfo'
`--ifplaintext'
`--iftex'
`--ifxml'
     指定されたフォーマットに対し，該当する出力フォーマットを生成していない場
     合でも`@ifFORMAT'と`@FORMAT'コマンドを処理します．
     例えば，`--iftex'が指定されている場合，`@iftex'と
     `@tex'ブロックが読み込まれます．これは，出力を後処理するとき役に立
     つはずです．

`--macro-expand=FILE'
`-E FILE'
     指名されたファイルに，全てのマクロを展開したTexinfoソースを出力します．
     通常，マクロの展開の結果は`makeinfo'内部で使用された後に削除されま
     す．このオプションは，`@macro'をサポートしていない古いバージョンの
     `texinfo.tex'を使用している場合，`texi2dvi'で使用されます．

`--no-headers'
     Info出力に対し，出力にメニューやノードの分離行を含めません．この結果は，
     (例えば)添付することなく電子メールで送付したり，(`INSTALL'ファイル
     のように)配布物に含めたりすることが可能な，単純なプレーンテキストファイ
     ルになります．

     HTML出力に対しても同様にメニューは削除されます．そして`--no-split'
     も指定している場合，それぞれのノードのトップへのナビゲーションリンクは含
     めません(これらはデフォルトの状況での分割された出力に含められることもあ
     りません)．*Note makeinfo html::.

     どちらの状況でも，デフォルトで標準出力に書き出します(`-o'で優先さ
     せることも可能です)．

`--no-ifhtml'
`--no-ifinfo'
`--no-ifplaintext'
`--no-iftex'
`--no-ifxml'
     指定されたフォーマットに対し，該当する出力フォーマットを生成している場合
     でも`@ifFORMAT'と`@FORMAT'コマンドを処理しません．
     例えば，`---no-ifhtml'が指定されている場合，`@ifhtml'と
     `@html'ブロックは読み込まれません．

`--no-split'
     `makeinfo'での分割ステージを抑制します．デフォルトで，大きな出力ファ
     イル(70kバイトより大きいサイズ)はより小さいサブファイルに分割されます．
     Info出力に対しそれぞれ約50kバイトになります．HTML出力に対し，それぞれの
     ファイルは一つのノードを含みます(*note makeinfo html::)．

`--no-pointer-validate'
`--no-validate'
     `makeinfo'のポインタの有効化のステージを抑制します．これは，
     `@novalidate'コマンドでも可能です(*note Use TeX: Use TeX.)．通
     常はTexinfoファイルが処理された後，相互参照が解決されていることを確かめ
     るなどのため，一貫性の調査が行われます．*Note Pointer Validation::.

`--no-warn'
     警告メッセージ(エラーメッセージ_ではない_)を抑制します．作成したファ
     イルにTexinfoの相互参照の例がある場合と，実際には存在しないノードの参照
     がある場合にこうしたいもしれません．

`--number-sections'
     印刷されたマニュアルでの，章，セクション，そして付録の番号を出力します．

`--no-number-footnotes'
     自動的な脚注への番号付けを抑制します．デフォルトで`makeinfo'は，単
     一ノード内のそれぞれの脚注に順番に番号付けを行い，それぞれのノードの開始
     時に現在の脚注番号を1にリセットします．

`--output=FILE'
`-o FILE'
     出力を，Texinfoソースで見つかる`@setfilename'コマンドで指定したファ
     イル名ではなく，FILEに指定します(*note setfilename::)．FILE
     が`-'の場合は出力は標準出力になり，`--no-split'が暗黙に指定さ
     れます．分割されれたHTML出力では，FILEはすべてのHTMLファイルが書き
     込まれるディレクトリの名前になります(*note makeinfo html::)．

`-P DIR'
     `@include'に対するディレクトリ検索リストの前にDIRを追加しま
     す．DIRが与えられない場合，カレントディレクトリ`.'が前に追加
     されます．詳細は`-I'を参照してください．

`--paragraph-indent=INDENT'
`-p INDENT'
     段落の字下げ形式をINDENTに設定します．このオプションで設定した値は，
     Texinfoファイルで`@paragraphindent'コマンドで設定した値に優先しま
     す(*note paragraphindent::)．INDENTの値は，以下のように解釈されま
     す．

    `asis'
          段落の開始で，あらゆる字下げを保存します．

    `0' or `none'
          既存の字下げを削除します．

    NUM
          それぞれの段落を，NUM個の空白で字下げします．

`--reference-limit=LIMIT'
`-r LIMIT'
     `makeinfo'が警告を報告せずに作成する，ノード参照数の値を設定します．
     ノードにこの数以上の参照がある場合，`makeinfo'は参照を作成しますが
     警告を報告します．デフォルトは1000です．

`--split-size=NUM'
     Infoファイルを最大NUM文字に保ちます．デフォルトは50,000文字です．

`-U VAR'
     VARを未定義にします．これは，Texinfoファイルでの`@clear
     VAR'と同じです(*note set clear value::)．

`--verbose'
     `makeinfo'に，行っていることのメッセージを表示させます．通常
     `makeinfo'は，エラーや警告がある場合のみメッセージを出力します．

`--version'
`-V'
     バージョンナンバーを出力し，正しく終了します．

`--xml'
     InfoではなくXML出力を生成します．



File: texinfo-ja.info,  Node: Pointer Validation,  Next: makeinfo in Emacs,  Prev: makeinfo options,  Up: Creating an Info File

20.1.4 ポインタの照合
---------------------

`--no-validate'オプションやソースファイルでの`@novalidate' コ
マンド(*note Use TeX: Use TeX.)でポインタの照合を抑制しない場合，
`makeinfo'は最終的なInfoファイルの一貫性を調べます．ほとんどこれは，
参照したノードが本当に存在していることを確かめることを意味します．調べる
ものの完全なリストは以下のようになります．

  1.
     `Next'，`Previous'，または`Up'ノードの参照が現在のファイルのノードへの参
     照で，`(dir)'のような外部での参照ではない場合，参照されるノードが存
     在する必要があります．

  2.
     全てのノードで，`Previous'ノードが`Up'ノードと異なる場合，`Previous'フィー
     ルドで指し示すノードには，このノードへ戻る`Next'フィールドが存在する必要
     があります．

  3.
     `Top'ノード以外の全てのノードには，`Up'ポインタが存在する必要があります．

  4. `Up'ポインタで参照されるノードは，`Up'で参照されるノードが`(FILE)'
     でない限り，現在のノードのメニュー項目にそれ自身の参照が存在する必要があ
     ります．

  5.
     ノードの`Next'の参照が`Up'の参照の`Next'の参照と同じでない場合，`Next'
     ポインタで参照されるノードには，現在のノードに戻る`Previous'ポインタが存
     在する必要があります．この規則で，次の章の最初のノードを指し示しているセ
     クションの最後のノードが可能になります．

  6.
     `Top'以外の全てのノードは，`Previous'や`Next'のリンクや，メニューや相互
     参照による，少なくとも一つの他のノードからの参照があるべきです．

  Texinfoドキュメントには，ノード定義で`@value'と
`@definfoenclose'のようなコマンドを使用したり，矛盾した相互参照に
対する照合のフェーズで失敗するものもあります．以下の例を考えます．

     @set nodename Node 1

     @node @value{nodename}, Node 2, Top, Top

     This is node 1.

     @node Node 2, , Node 1, Top

     This is node 2.

ここで，ノード"Node 1"はその単語と`@value'の両方で参照されます．

デフォルトでは，ノード名が出力ファイルに書かれるまでは完全に展開されない
ので，そのような場合`makeinfo'は失敗します．常に一貫してノード参照
するべきです．例えば上の例では，二番目の`@node'行にも `@value'
があるべきです．しかし，理由があって矛盾したノード名の参
照をする_必要があり_，`makeinfo'がファイルの有効化に失敗した場
合，`makeinfo'がドキュメントで見つかる全てのノード名を展開するよう
な負荷の高い作業を実行をするよう，`--commands-in-node-names'オプショ
ンを使用することが可能です．しかしこれは，プログラムがかなり遅くなります．
変換時間の2倍の増加が，Jargonファイルのような大きなファイルで測定されま
した．

  `@node'ディレクティブでの`@'-コマンドのサポートは，自由に使
える程には一般的に十分ではありません．例えば上の例では，ドキュメントのど
こかで`nodename'が再定義される場合，たとえ
`--commands-in-node-names'をオプションを呼び出していても
`makeinfo'は変換に失敗します．

  `--no-validate'が与えられた場合，`--commands-in-node-names'は
効果がありません．


File: texinfo-ja.info,  Node: makeinfo in Emacs,  Next: texinfo-format commands,  Prev: Pointer Validation,  Up: Creating an Info File

20.1.5 Emacs内部で`makeinfo'を実行する
--------------------------------------

`makeinfo-region'や`makeinfo-buffer'コマンドを使用することで， GNU
Emacs Texinfoモードで`makeinfo'を実行することが可能です．
Texinfoモードでは，コマンドはデフォルトで，`C-c C-m C-r'と`C-c C-m
C-b'に割り当てられています．

`C-c C-m C-r'
`M-x makeinfo-region'
     現在の領域をInfoに書式化します． 

`C-c C-m C-b'
`M-x makeinfo-buffer'
     現在のバッファをInfoに書式化します． 

  `makeinfo-region'や`makeinfo-buffer'を呼び出すとき，Emacsはファ
イル名のためプロンプトを出し，デフォルトとして訪問されたファイルの名前を
提示します．希望があれば，`makeinfo'処理を始める<RET>を押す前に，
ミニバッファのデフォルトファイル名を編集できます．

  Emacsの`makeinfo-region'と`makeinfo-buffer'コマンドは，一時的
なシェルバッファで`makeinfo'プログラムを実行します．`makeinfo'
がエラーを見つけた場合，Emacsはエラーメッセージを一時的なバッファに表示
します．

  `C-x `'(`next-error')の入力で，エラーメッセージを解析することが
可能です．これでEmacsは，`makeinfo'がエラーとしたTexinfoソースの行
にカーソルを移動します．`next-error'コマンドの使用の詳細は， *Note
Running `make' or Compilers Generally: (emacs)Compilation.

  さらに，`makeinfo'コマンドを実行しているシェルを殺したり，シェルバッ
ファに最新の出力を表示させたりすることも可能です．

`C-c C-m C-k'
`M-x makeinfo-kill-job'
     (`makeinfo-region'や`makeinfo-buffer'から)`makeinfo'を実
     行している，現在のジョブを殺します．

`C-c C-m C-l'
`M-x makeinfo-recenter-output-buffer'
     最新の出力を表示するため，`makeinfo'シェルバッファを再表示します．


(TeXジョブを殺したり再表示したりする類似のコマンドが，`C-c C-t
C-k'と`C-c C-t C-l'だと言うことに注意してください．*Note Texinfo Mode
Printing::.)

  `M-x edit-options'や`M-x set-variable'コマンドで
`makeinfo-options'変数を設定することや，`.emacs'初期化ファイル
で変数を設定することで，`makeinfo'に対するオプションを指定できます．

  例えば，以下のように`.emacs'ファイルに書きます．

     (setq makeinfo-options
          "--paragraph-indent=0 --no-split
           --fill-column=70 --verbose")

詳細は，
*Note Editing Variable Values: (emacs)Edit Options.，
*Note Examining and Setting Variables: (emacs)Examining.，
*Note Init File: (emacs)Init File.，そして
*Note Options for `makeinfo': makeinfo options.を参照してください．


File: texinfo-ja.info,  Node: texinfo-format commands,  Next: Batch Formatting,  Prev: makeinfo in Emacs,  Up: Creating an Info File

20.1.6 `texinfo-format...'コマンド
----------------------------------

GNU EmacsのTexinfoモードで`texinfo-format-region'コマンドを使用して，
Texinfoファイルの一部または全体を書式化することが可能です．これは，現在
の領域を書式化し，`*Info Region*'と呼ばれる一時的なバッファに書式化
されたテキストを表示します．

  同様に，`texinfo-format-buffer'コマンドでバッファを書式化します．こ
のコマンドは新しいバッファを作成し，その中にInfoファイルを生成します．
`C-x C-s'と入力すると，Texinfoの最初の方の`@setfilename'行で指
定された名前でInfoファイルを保存します．

`C-c C-e C-r'
``texinfo-format-region''
     現在の領域をInfoに書式化します． 

`C-c C-e C-b'
``texinfo-format-buffer''
     現在のバッファをInfoに書式化します． 

  `texinfo-format-region'と`texinfo-format-buffer'コマンドは，い
くつかのエラー調査を提供し，その他の関数は，書式化のエラーを見つける上で
それ以上の助けとなるものを提供するはずです．これらの手続きは付録で記述さ
れています．*Note Catching Mistakes::を参照してください．しかし，
`makeinfo'プログラムはより速い場合が多く，より多くのエラー調査を提
供します(*note makeinfo in Emacs::)．


File: texinfo-ja.info,  Node: Batch Formatting,  Next: Tag and Split Files,  Prev: texinfo-format commands,  Up: Creating an Info File

20.1.7 書式化のバッチ処理
-------------------------

`batch-texinfo-format'とEmacsバッチモードを使用して，Texinfoファイ
ルをInfoファイルに書式化することが可能です．Emacsの内部シェルを含む，あ
らゆるシェルからバッチモードでEmacsを実行することが可能です． (*Note
Command Line Switches and Arguments: (emacs)Command Switches.)

  以下は，カレントディレクトリの`.texinfo'で終る全てのファイルを書式
化するためのシェルコマンドです．

     emacs -batch -funcall batch-texinfo-format *.texinfo

Emacsは，コマンド行でリストアップされた全てのファイルを，たとえ書式化中
にエラーが発生しても処理します．

  `batch-texinfo-format'は，表示してあるようにEmacsのBatchモードだけ
で実行してください．それは対話的ではありません．成功するとバッチモードの
Emacsを強制終了します．

  `batch-texinfo-format'は，`makeinfo'がない場合と，一度に複数の
Texinfoファイルを書式化したい場合に便利です．バッチモードを使用するとき，
新しいEmacsプロセスを作成します．これは現在のEmacsとは無関係なので，そこ
で仕事を続けることが可能です．(`texinfo-format-region'や
`texinfo-format-buffer'を実行しているときは，コマンドが終了するまで
他のこと行なうためEmacsを使用することは不可能です．)


File: texinfo-ja.info,  Node: Tag and Split Files,  Next: makeinfo html,  Prev: Batch Formatting,  Up: Creating an Info File

20.1.8 タグファイルとスプリットファイル
---------------------------------------

Texinfoファイルが30,000バイト以上の場合，`texinfo-format-buffer'は
Infoファイルに対し自動的にタグ表を作成します．`makeinfo'は，常にタ
グ表を作成します．"タグ表(tag table)"を用いることで，Infoは新しいノー
ドへ他より速く移動可能です．

  さらに，Texinfoファイルが70,000バイト以上の場合，
`texinfo-format-buffer'と`makeinfo'は，大きなInfoファイルをそ
れぞれ50,000バイト程度のより小さい"間接的な(indirect)"サブファイルに
分割します．大きなファイル全体を保持する大きなバッファをEmacsが作成しな
くてもよいように，大きなファイルは小さなファイルに分割されます．代わりに
Emacsは，分割された小さなファイルが必要とするだけのメモリを確保します．
このようにして，EmacsはInfo実行中のメモリの無駄を避けます．(分割が実装さ
れる前は，Infoファイルは常に短いままになっていて，"インクルードファ
イル(include files)"は小さなInfoファイルから単一の大きな印刷マニュアルを
作成する方法として設計されていました．詳細は*Note Include Files::.  イン
クルードファイルは，`The Emacs Lisp Reference Manual'のような，大変
大きなドキュメントのためにまだ使用されて，そこでは，それぞれの章は別々の
ファイルになっています．)

ファイルが分割されるとき，Info自身は，タグ表と分割されたファイルへの参照
を含む元ファイルの短縮バージョンを利用します．分割されたファイルは，
"間接的な(indirect)"ファイルと呼ばれます．

  分割されたファイルは，`@setfilename'コマンドで指定したファイル名に，
`-1'，`-2'，`-3'などを追加して作成された名前
をになります．元ファイルの短縮バージョンは，`@setfilename'で指定さ
れた名前を持ち続けます．

  このドキュメントを書いている段階で，例えばInfoファイルはファイル
`test-texinfo'として保存され，そのファイルは以下のようになっていま す．

     Info file: test-texinfo,    -*-Text-*-
     produced by texinfo-format-buffer
     from file: new-texinfo-manual.texinfo

     ^_
     Indirect:
     test-texinfo-1: 102
     test-texinfo-2: 50422
     test-texinfo-3: 101300
     ^_^L
     Tag table:
     (Indirect)
     Node: overview^?104
     Node: info file^?1271
     Node: printed manual^?4853
     Node: conventions^?6855
     ...

(しかし，`test-texinfo'ファイルは，ここで見るよりはるかに多くのノー
ドがあります．)それぞれの分割された間接的なファイル`test-texinfo-1'，
`test-texinfo-2'，そして`test-texinfo-3'は，このファイルの
`Indirect:'以下の行でリストアップされます．タグ表は，`Tag
table:'以下の行でリストアップされます．

間接的なファイルのリストで，ファイル名に続く番号は前の間接的なファイルに
累積バイト数を記録し，ファイルリスト自身のバイト数，タグ表，またはそれぞ
れのファイルの許可テキストは記録しません．タグ表では，ノード名に続く数は
ノードの開始位置を(分割されていない)出力の最初からのバイトを記録します．

  Infoファイルを作成するため`texinfo-format-buffer'を使用している場合，
`Info-validate'コマンドを実行したくなるかもしれません．
(`makeinfo'コマンドはそれ自身良い仕事をするので，
`Info-validate'は不要です．)しかし，`M-x Info-validate'ノード
チェックコマンドを，間接ファイルでは使用することは不可能です．ファイルを
分割から避ける方法や，ノードの構造の有効化の方法の情報は，*Note Using
Info-validate::を参照してください．


File: texinfo-ja.info,  Node: makeinfo html,  Prev: Tag and Split Files,  Up: Creating an Info File

20.1.9 HTMLの生成
-----------------

Info書式での出力を生成するだけでなく，`--html'オプションを使用して，
(例えば)ウェブサイトに配置するために，HTMLフォーマットで出力を生成するこ
とが可能です．デフォルトで，HTML出力はノードのレベルで分割されています．

分割時に，HTML出力ファイルはサブディレクトリに書き出されます．サブディレ
クトリは，拡張子が削除された`@setfilename'の名前に一致して命名され
ます．例えば，`@setfilename emacs.info'に対するHTML出力は，
`emacs'という名前のサブディレクトリに書き出されます．何らかの理由で
ディレクトリが作成できない場合，`emacs.html'のようにディレクトリ名
に`.html'が追加されます(Infoファイルは，例えば`texinfo'のよう
に拡張子無しで命名されることもあるので，これは必要です)．
`NAME.html'ディレクトリも作成できない場合，`makeinfo'は
あきらめます．あらゆる状況で，ディレクトリのトップレベルの出力ファイルは，
常に`index.html'と命名されます．

  分割されない出力(`--no-split')は，`@setfilename'や
`--outfile'によって命名されます．ドキュメントを跨ったノード参照は，
分割されないHTMLではサポートされていません．

  `@ifhtml'コマンドで印が付いているされたTexinfo入力は，
`--html'オプションが供給されたときだけ出力物を生成します．
`@html'でマークアップされた入力は，そのまま出力に渡されます(HTMLで
特別重要な，入力の`<'，`>'と`&'文字の，通常のエスケープ文
字は抑制されます．)`--xml'オプションと，`@ifxml'と
`@xml'セクションと同様です．

  `--footnote-style'オプションは，HTML出力では現在は無視されます．脚
注は出力ファイルの終りにリンクされます．

  生成されたHTMLはほとんど標準的です(いわゆる，HTML 2.0,
RFC-1866)．例外と して，HTML
3.2の表が，`@multitable'コマンドで生成されますが，表を
サポートしていないブラウザでも分解可能なようにタグ付けされています．
`<html>'属性のHTML 4 `lang'属性も使用されます．ブラウザの互換
性の問題がある`makeinfo'でエラーが無かった実行結果の出力を，バグと
して報告してください．

ナビゲーションバーが，Info出力に似たものとしてノードの始まりに挿入されま
す．`--no-headers'オプションは，`--no-split'を使用している場合，
これを抑制します．分割された出力物のヘッダの`<link>'の要素は，Lynx
とHTML 1.0の機能で実装されているEmacs W3のようなブラウザで，info
のようなナビゲートをサポートしています．他のドキュメントに対する
`@xref'コマンドは，他のドキュメントがHTML 形式で利用可能であるとし
て生成され，同じHTMLドキュメントツリーの`../<info-document>/'にイン
ストールされます．


File: texinfo-ja.info,  Node: Installing an Info File,  Prev: Creating an Info File,  Up: Creating and Installing Info Files

20.2 Infoファイルのインストール
===============================

Infoファイルは，通常`info'ディレクトリに置かれます．Infoファイルを，
スタンドアローンのInfoプログラムやEmacs組込みのInfoリーダーを使用して読
むことが可能です．(Infoの紹介は，*note info: (info-ja)Top.)

* Menu:

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                 located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                 to the Info directory.
* Invoking install-info::       `install-info' options.


File: texinfo-ja.info,  Node: Directory File,  Next: New Info File,  Up: Installing an Info File

20.2.1 ディレクトリファイル`dir'
--------------------------------

Infoを動作させるため，`info'ディレクトリには，Infoシステムのための
トップレベルディレクトリを提供するファイルを含める必要があります．慣習的
に，このファイルは`dir'と呼ばれます．(このファイルの場所は，Emacsで
Infoモードに入るため`C-h i'と入力し，`info'ディレクトリへのパス
名を見るため`C-x C-f'を入力すると分かります．)

  `dir'ファイルはそれ自身がInfoファイルです．それは，システム全ての
Infoファイルに対するトップレベルメニューを含んでいます．メニューは以下の
ようになってます．

     * Menu:
     * Info:    (info).     Documentation browsing system.
     * Emacs:   (emacs).    The extensible, self-documenting
                           text editor.
     * Texinfo: (texinfo).  With one source file, make
                           either a printed manual using
                           @TeX{} or an Info file.
     ...

  これらのメニューの項目のそれぞれが，丸カッコに名前があるInfoファイルの
`Top'ノードを示します．(Infoはノード名を指定されない場合，`Top'ノードへ
行くので，このメニュー項目は`Top'ノードを指定する必要はありません．
*Note Nodes in Other Info Files: Other Info Files.)

  このため，`Info'項目は`info'ファイルの`Top'ノードを示し，
`Emacs'項目は`emacs'ファイルの`Top'ノードを示します．

  それぞれのInfoファイルでは，`Top'ノードの`Up'ポインタは`dir'ファイ
ルへの参照です．例えば，Emacsマニュアルの`Top'ノードの行は，Infoファイル
では以下のようになっています．

     File: emacs  Node: Top, Up: (DIR), Next: Distrib

この状況では，`dir'ファイル名は大文字で書かれています -- それは，
大文字または小文字で書くことが可能です．これは一般に真ではなく，
`dir'の場合だけ特別です．


File: texinfo-ja.info,  Node: New Info File,  Next: Other Info Directories,  Prev: Directory File,  Up: Installing an Info File

20.2.2 新しいInfoファイルをリストアップする
-------------------------------------------

新しいInfoファイルをシステムに加えるため，`info'ディレクトリの
`dir'ファイルのメニューを加える，メニュー項目を書く必要があります．
例えばGDBのドキュメントを加える場合，以下の新しい項目を書きます．

     * GDB: (gdb).           The source-level C debugger.

メニュー項目の最初の部分はメニュー項目名でコロンが続きます．二番目の部分
はInfoファイル名で，丸カッコの中にあり，ピリオドが続きます．三番目の部分
は記述です．

  Infoファイルの名前には，`.info'拡張子があることが多いです．そのため，
GDBのInfoファイルは`gdb'または`gdb.info'と呼んでもかまわないで
しょう．Infoリーダープログラムは，自動的に`.info'の有無の両方を試し
ます．(1) (*note New Info
File-Footnote-1::)バラバラになるのを避けるために，メニュー項目に明示的
に`.info'を書かない方が良いでしょう．例えばGDBメニュー項目は，ファ
イル名に`gdb.info'ではなく`gdb'だけを使用すべきです．


File: texinfo-ja.info,  Node: New Info File-Footnotes,  Up: New Info File

  (1) MS-DOS/MS-Windowsシステムでは，Infoは同様に，`.inf'
拡張子も試します．


File: texinfo-ja.info,  Node: Other Info Directories,  Next: Installing Dir Entries,  Prev: New Info File,  Up: Installing an Info File

20.2.3 他のディレクトリのInfoファイル
-------------------------------------

Infoファイルが`info'ディレクトリに無い場合，その場所を指定する三つ
の方法があります．

  1. `dir'ファイルで，メニューの二番目の部分にパス名を書いてください．

  2. Emacsを使用している場合，そのディレクトリで，二番目の`dir'にファイ
     ル名をリストアップしてください．そして，個人やサイトの初期化ファイルで，
     `Info-directory-list'変数にそのディレクトリ名の指定を加えてください．

     この変数は，Emacsに`dir'ファイルを探す場所を伝えます(ファイルは
     `dir'と名付ける必要があります)．Emacsは，それぞれリストアップされた
     ディレクトリからの，`dir'と名付けられたファイルをマージします．
     (Emacsバージョン18では，`Info-directory'変数で一つのディレクトリ名
     のみ設定することが可能です．)

  3. Infoディレクトリ名を，`.profile'や`.cshrc'初期化ファイルで，
     `INFOPATH'環境変数で指定してください．(この環境変数を設定した人だけ，
     この方法で指定した場所のInfoファイルを見つけることができます．)

  例えば，`/home/bob/info'ディレクトリのテストファイルにたどり着くよ
うに，標準`dir'ファイルのメニューに，以下のように項目を加えることも
可能でしょう．

     * Test: (/home/bob/info/info-test).  Bob's own test file.

この状況では，`info-test'ファイルの絶対的なファイル名は，メニュー項
目の二番目の部分に書かれます．

  別の方法として，`.emacs'ファイルに以下のように書くことも可能でしょ
う．

     (require 'info)
     (setq Info-directory-list
      (cons (expand-file-name "/home/bob/info")
            Info-directory-list))

  これは，Emacsにシステムの`dir'ファイルを，`/home/bob/info'ディ
レクトリの`dir'ファイルとマージするよう伝えます．このためInfoは，
`/home/bob/info/dir'ファイルのメニュー項目のように，
`/home/bob/info/info-test'ファイルをリストアップします．Emacsは， `M-x
info'を最初に実行したときのみマージするので，既に`info'を
実行しているEmacsのセッションで`Info-directory-list'設定したい場合，
Emacsに`dir'ファイルを再構成させるため`(setq Info-dir-contents
nil)'する必要があります．

  最後に，`.cshrc'，`.profile'や，`autoexec.bat'のような，
シェルのスタートアップファイルで`INFOPATH'環境変数を設定することで
Infoに探す場所を伝えることが可能です．シェルコマンドインタプリタとして
`sh'や`bash'のようなBourne互換シェルを使用している場合，
`INFOPATH'環境変数を`.profile'初期化ファイルで設定します．しか
し，`csh'や`tcsh'を使用している場合，`.cshrc'初期化ファイ
ルで変数を設定します．MS-DOS/MS-Windowsシステムでは，`INFOPATH'を
`autoexec.bat'ファイルかレジストリで設定する必要があります．それぞ
れのシェルで構文は異なります．

   * `.cshrc'ファイルで，`INFOPATH'変数を以下のようにして設定します．

          setenv INFOPATH .:~/info:/usr/local/emacs/info

   * `.profile'ファイルに以下を書くことで，同じ効果を得ます．

          INFOPATH=.:$HOME/info:/usr/local/emacs/info
          export INFOPATH

   * `autoexec.bat'ファイルで，以下のコマンドを書きます．(1) (*note
     Other Info Directories-Footnote-1::)

          set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info

`.'は，通常カレントディレクトリを示します．Emacsは，`INFOPATH'
環境変数をEmacs自身の`Info-directory-list'変数の初期化に使用します．
スタンドアローンのInfoリーダーは，`INFOPATH'変数でリストアップされた
あらゆるディレクトリの`dir'という名のファイルを，`(dir)Top'と
呼ばれるノードに現れる単一のメニューにマージします．

  しかし，`INFOPATH'を設定しても，最後の文字がコロン (2) (*note Other
Info Directories-Footnote-2::)の
場合，これはデフォルトの(compiled-in)パスに置換されます．これは，全ての
標準の場所をリストアップすること無く，新しいディレクトリでデフォルトのパ
スを増やす方法となります．例えば以下のようにします(`sh'構文使用)．

     INFOPATH=/local/info:
     export INFOPATH

これで，`/local/info'が最初で，それから標準ディレクトリを探します．
最初や二重のコロンは，特別扱いしません．

  `Info-directory-list'や`INFOPATH'で利用する独自の`dir'ファ
イルを作成するとき，既存の`dir'ファイルをコピーから初め，`*
Menu:'以下のテキストを必要な項目で置換するのが最も簡単な方法です．その方
法では，Infoが必要とする句読点と特別なCTRL-_文字が残ります．


File: texinfo-ja.info,  Node: Other Info Directories-Footnotes,  Up: Other Info Directories

  (1) ディ
レクトリの区切りとして`;'を使用することと，他の環境変数の値の使用と
は構文が違うことに注意してください．

  (2) MS-DOS/MS-Windowsシステムは，代わりにセミコロンを使います．


File: texinfo-ja.info,  Node: Installing Dir Entries,  Next: Invoking install-info,  Prev: Other Info Directories,  Up: Installing an Info File

20.2.4 Infoディレクトリファイルのインストール
---------------------------------------------

Infoファイルをシステムにインストールするとき，プログラム
`install-info'をInfoディレクトリファイル`dir'の更新に使用する
ことが可能です．通常，パッケージのmakefileは，Infoファイルを適切なインス
トール先にコピーした直後に`install-info'を実行します．

  Infoファイルが`install-info'で動作するように，コマンド
`@dircategory'と`@direntry'...`@end direntry'を，
Texinfoソースファイルに含めます．Infoディレクトリファイルに加えるメニュー
項目を指定するため，`@direntry'を使用してください．このマニュアル
でこれらのコマンドを使用している例は以下のようになります．

     @dircategory Texinfo documentation system
     @direntry
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     @end direntry

  これでInfoファイルに生成されたものは，以下のようになります．

     INFO-DIR-SECTION Texinfo documentation system
     START-INFO-DIR-ENTRY
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     END-INFO-DIR-ENTRY

`install-info'プログラムは，Infoファイルのこれらの行を見て，そして
なすべきことを知ることになります．

  常に`@direntry'と`@dircategory'コマンドを，Texinfo入力の最初
に，最初の`@node'コマンドの前で使用してください．入力ファイルの後
の方で使用する場合，`install-info'はそれらに注意を払いません．

  `@dircategory'をTexinfoソースファイルで1回以上使用する場合，それぞ
れの使用されたものは`current'カテゴリーを指定します．それに続く
`@direntry'コマンドはそのカテゴリーを追加します．

`@dircategory'に対するカテゴリを選択するとき，http://www.gnu.org/directory
(Free Sofware Directory)を考慮することを推奨します．プロ
グラムがそこにリストアップされていない場合や，間違っていたり不完全なまま
リストアップされている場合，カテゴリ名が同期をとれるように，ディレクトリ
管理者(<bug-directory@gnu.org>)にその状況を報告してください．

  以下はその例です．
     Emacs
     Localization
     Printing
     Software Libraries

  インストールされるすべてのプログラムのそれぞれの`Invoking'ノードは，
`@direntry'に対応すべきです．これで，伝統的な`man'システム
のように，実行可能なそれぞれのプログラムに対するドキュメントを，ユーザは
容易に見つけることができます．


File: texinfo-ja.info,  Node: Invoking install-info,  Prev: Installing Dir Entries,  Up: Installing an Info File

20.2.5 `install-info'の呼び出し
-------------------------------

`install-info'は，InfoファイルからInfoシステムのトップレベルの
`dir'ファイルにメニュー項目を挿入します(`dir'ファイルの動作の
説明は，前のセクションを参照してください)．それは，ソフトウェアのインス
トールの一部として，またシステムのマニュアル全体に対し，`dir'ファイ
ルを構築するときよく実行されます．構文は以下のようになります．

     install-info [OPTION]... [INFO-FILE [DIR-FILE]]

  INFO-FILEやDIR-FILEを指定しない場合，(以下で述べる)それらを
定義するオプションが必要です．コンパイル時のデフォルトは無く，標準入力は
使用しません．`install-info'は，呼び出し毎に一つのInfoファイルのみ
読み込み，一つの`dir'にのみ書き込みます．

  DIR-FILE(が指定されていても)存在しない場合，`install-info'は
(項目の無い)DIR-FILEを可能な場合は作成します．

  入力ファイルが，`gzip'で圧縮されている場合(*note Invoking gzip:
(gzip)Invoking gzip.)，`install-info'は自動的に読み込みのために解凍し
ます．そして，DIR-FILEが圧縮されている場合も，`install-info'
は自動的に変更を書き込んだ後，圧縮された状態にします．DIR-FILE自身
が無い場合，`install-info'は`DIR-FILE.gz'を開こうとしま す．

  オプションです．

`--delete'
     DIR-FILEからINFO-FILEの項目を削除します．DIR-FILEの項
     目のファイル名はINFO-FILEにする必要があります(その中の，オプション
     の`.info'は例外です)．新しい項目は挿入しません．

`--dir-file=NAME'
`-d NAME'
     Infoディレクトリファイルのファイル名を指定します．これは，DIR-FILE
     引数を使用することと同じです．

`--entry=TEXT'
`-e TEXT'
     Infoディレクトリ項目としてTEXTを挿入します．TEXTは，Infoメ
     ニュー項目行にゼロ以上の空白で始まる行を追加した書式にすべきです．一つ以
     上の項目を指定する場合，全て追加されます．項目を指定しない場合，Infoファ
     イル自身の情報から決定します．

`--help'
`-h'
     基本的な使用方と，利用可能な全てのオプションをリストアップした使用方法メッ
     セージを表示し，正しく終了します．

`--info-file=FILE'
`-i FILE'
     ディレクトリにインストールするInfoファイルを指定します．INFO-FILE
     引数の使用と同じです．

`--info-dir=DIR'
`-D DIR'
     `dir'が位置するディレクトリを指定します．
     `--dir-file=DIR/dir'と同じです．

`--item=TEXT'
     `--entry=TEXT'と同じです．Infoディレクトリ項目は，実際にはメ
     ニュー項目です．

`--quiet'
     警告を抑制します．

`--remove'
`-r'
     `--delete'と同じです．

`--section=SEC'
`-s SEC'
     このファイルの項目を，ディレクトリのセクションSECに書きます．一つ以
     上のセクションを指定した場合，Infoファイル自身の情報から決定されます．

`--version'
`-V'
     バージョン情報を表示し，正しく終了します．



File: texinfo-ja.info,  Node: Command List,  Next: Tips,  Prev: Creating and Installing Info Files,  Up: Top

Appendix A @-コマンドリスト
***************************

以下にTexinfoのアルファベット順の@-コマンドリストがあります．角カッコ
[ ]はオプションの引数を示します．省略`...'は，繰り
返しテキストを示します．


`@WHITESPACE'
     `@'に続くスペース，タブ，または改行は，通常の伸縮可能な単語を区切
     る空白を生成します．*Note Multiple Spaces::.

`@!'
     感嘆符を，文章の終りに実際に生成します(通常，文の終りの大文字の後です)．
     *Note Ending a Sentence::.

`@"'
`@''
     次の文字の上に，o"
     とo'のように，ウムラートや鋭いアクセントを生成しま す．*Note
     Inserting Accents::.

`@*'
     強制改行します．`@refill'コマンドで，`@*'を用いている段落を
     終了させないでください．*Note Line Breaks::.

`@,{C}'
     Cの下にc,のような，セディラアクセントを生成します． *Note
     Inserting Accents::.

`@-'
     任意のハイフネーションポイントを挿入します．*Note - and
     hyphenation::.

`@.'
     ピリオドを，文章の終りに実際に生成します(通常，文の終りの大文字の後です)．
     *Note Ending a Sentence::.

`@:'
     TeXに，直前のピリオド，疑問符，感嘆符，またはコロンで，文章が終らない
     よう指示します．TeXが文章の終りに行う，余分な空白を挿入することを妨げ
     ます．このコマンドはInfoファイル出力に効果はありません．*Note Not
     Ending a Sentence::.

`@='
     次の文字の上に長音記号(バー)アクセントを，o=の用に生成します．
     *Note Inserting Accents::.

`@?'
     疑問符を文の終りに実際に生成します(通常，文の終りの大文字の後です)．
     *Note Ending a Sentence::.

`@@'
     `@'という記号を意味します．*Note Inserting @ and braces: Braces
     Atsigns.

`@\'
     `@math'内部のバックスラッシュ(`\')を意味します． *Note `math':
     math.

`@^'
`@`'
     曲折アクセント(ハット)や低アクセントを，それぞれ次の文字の上に，o^とe`
     のように生成します．*Note Inserting Accents::.

`@{'
     左カッコ`{'を意味します．*Note Inserting @ and braces: Braces
     Atsigns.

`@}'
     右カッコ`}'，
     を意味します．*Note Inserting @ and braces: Braces Atsigns.

`@~'
     チルダアクセントを，次の文字の上に，N~のように生成します． *Note
     Inserting Accents::.

`@AA{}'
`@aa{}'
     それぞれ大文字と小文字の，スカンジナビアのA-リング文字を生成します．
     AA，aaです．*Note Inserting Accents::.

`@acronym{ABBREV}'
     `NASA'のような，いわゆる，全て大文字で書かれている省略の頭文字としてタグ
     ABBREVを付けます．*Note `acronym': acronym.

`@AE{}'
`@ae{}'
     それぞれ，大文字と小文字のAEの連字を生成します．AE，aeです． *Note
     Inserting Accents::.

`@afivepaper'
     ページの寸法をA5用紙のサイズに変更します．*Note A4 Paper::.

`@afourlatex'
`@afourpaper'
`@afourwide'
     ページの寸法をA4用紙のサイズに変更します．*Note A4 Paper::.

`@alias NEW=EXISTING'
     既存のコマンド`@EXISTING'のエイリアスとして，新しいコマンド
     `@NEW'を作成します．*Note alias::.

`@anchor{NAME}'
     相互参照のターゲットとして使用するため，NAMEを現在の位置として定義
     します．*Note `@anchor': anchor.

`@appendix TITLE'
     付録を開始します．タイトルは印刷されたマニュアルの目次に現れます．Infoで
     は，タイトルはアスタリスクで下線が付きます．*Note The
     `@unnumbered' and `@appendix' Commands: unnumbered & appendix.

`@appendixsec TITLE'
`@appendixsection TITLE'
     付録内の付録セクションを開始します．セクションのタイトルは印刷されたマニュ
     アルの目次に現れます．Infoでは，タイトルは等号で下線が付きます．
     `@appendixsection'は`@appendixsec'コマンドの長い綴のものです．
     *Note Section Commands: unnumberedsec appendixsec heading.

`@appendixsubsec TITLE'
     付録内の付録サブセクションを開始します．タイトルは印刷されたマニュアルの
     目次に現れます．Infoでは，タイトルはハイフンで下線が付きます．
     *Note Subsection Commands: unnumberedsubsec appendixsubsec
     subheading.

`@appendixsubsubsec TITLE'
     付録サブセクション内の付録サブサブセクションを開始します．タイトルは印刷
     されたマニュアルの目次に現れます．Infoでは，タイトルはピリオドで下線が付
     きます．*Note The `subsub' Commands: subsubsection.

`@asis'
     表の最初の列を("他と比較して")強調無しで印刷するため，`@table'，
     `@ftable'と`@vtable'に続けて使用します．*Note Making a Two-column
     Table: Two-column Tables.

`@author AUTHOR'
     AUTHORを左揃えに下線を引き植字します． *Note The `@title' and
     `@author' Commands: title subtitle author.

`@b{TEXT}'
     TEXTをボールドフォントで印刷します．Infoでは効果がありません．
     *Note Fonts::.

`@bullet{}'
     大きな丸い点や，それに最も近いものを生成します．*Note `@bullet':
     bullet.

`@bye'
     ファイルの書式化を停止します．書式化は`@bye'コマンドに続くファイル
     の内容を見ません．*Note Ending a File::.

`@c COMMENT'
     Texinfoでコメントを開始します．行の残りはInfoファイルにも印刷されたマニュ
     アルにも現れません．`@comment'の同義語です．*Note Comments:
     Comments.

`@cartouche'
     角が丸いボックスを描き，例や引用を強調します．`@end cartouche'とペ
     アになります．Infoでは効果はありません．*Note Drawing Cartouches
     Around Examples: cartouche.

`@center LINE-OF-TEXT'
     コマンドに続くテキスト行を中央揃えにします．*Note `@center':
     titlefont center sp.

`@centerchap LINE-OF-TEXT'
     `@chapter'に似ていますが，章のタイトルを中央揃えにします． *Note
     `@chapter': chapter.

`@chapheading TITLE'
     テキストに章のような見出しを印刷しますが，印刷されたマニュアルの目次には
     現れません．Infoでは，タイトルはアスタリスクで下線が引かれます．
     *Note `@majorheading' and `@chapheading': majorheading &
     chapheading.

`@chapter TITLE'
     章を開始します．章のタイトルは印刷されたマニュアルの目次に現れます．Info
     では，タイトルはアスタリスクで下線が引かれます．*Note `@chapter':
     chapter.

`@cindex ENTRY'
     ENTRYを概念の索引に加えます．*Note Defining the Entries of an
     Index: Index Entries.

`@cite{REFERENCE}'
     Infoファイルの仲間に無い，本やその他の参照の名前を強調します．
     *Note `@cite': cite.

`@clear FLAG'
     Texinfo書式化コマンドが`@ifset FLAG'と`@end ifset'の組
     の間のテキストの書式化するのを妨げるためと，`@value{FLAG}'
     がFLAGが設定した値を展開するのを妨げるため，FLAGを解除します．
     *Note `@set' `@clear' `@value': set clear value.

`@code{SAMPLE-CODE}'
     式，プログラムの構文上の完全なトークン，またはプログラム名を強調します．
     *Note `@code': code.

`@command{COMMAND-NAME}'
     `ls'のような，コマンド名を示します．*Note `@command': command.

`@comment COMMENT'
     Texinfoでコメントを開始します．行の残りは，Infoファイルにも印刷されたマ
     ニュアルにも現れません．`@c'と同義語です．*Note Comments::.

`@contents'
     目次を印刷します．Infoでは効果が無く，代わりにメニューが使用されます．
     *Note Generating a Table of Contents: Contents.

`@copyright{}'
     著作権のシンボルを生成します．*Note `@copyright': copyright symbol.

`@defcodeindex INDEX-NAME'
     新しい索引と索引コマンドを定義します．`@code'フォントで項目を印刷
     します．*Note Defining New Indices: New Indices.

`@defcv CATEGORY CLASS NAME'
`@defcvx CATEGORY CLASS NAME'
     オブジェクト指向プログラムのクラスに結びつけられた変数の記述を書式化しま
     す．三つの引数があります．定義されたもののカテゴリ，属するクラス，そして
     その名前です．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnx.を参照してください．

`@deffn CATEGORY NAME ARGUMENTS...'
`@deffnx CATEGORY NAME ARGUMENTS...'
     関数，対話的コマンド，または類似の引数とされる構成要素の記述を書式化しま
     す．`@deffn'は引数として，記述される構成要素のカテゴリ，この特定の
     構成要素の名前，そしてそのあらゆる引数を引数とします．*Note
     Definition Commands::.

`@defindex INDEX-NAME'
     新しい索引と索引コマンドを定義します．ローマンフォントで項目を印刷します．
     *Note Defining New Indices: New Indices.

`@definfoenclose NEWCMD, BEFORE, AFTER,'
     Infoのため，テキストの前後を文字列で囲みテキストに印を付ける，新しい@-
     コマンドNEWCMDを作成します．*Note definfoenclose::.

`@defivar CLASS INSTANCE-VARIABLE-NAME'
`@defivarx CLASS INSTANCE-VARIABLE-NAME'
     このコマンドは，オブジェクト指向プログラミングのインスタンス変数の記述を
     書式化します．このコマンドは，`@defcv {Instance Variable}
     ...'と同じです．*Note Definition Commands::.  また*Note Def Cmds
     in Detail: deffnx.を参照してください．

`@defmac MACRONAME ARGUMENTS...'
`@defmacx MACRONAME ARGUMENTS...'
     マクロの記述を書式化します．このコマンドは`@deffn Macro ...'と
     同じです．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnx.を参照してください．

`@defmethod CLASS METHOD-NAME ARGUMENTS...'
`@defmethodx CLASS METHOD-NAME ARGUMENTS...'
     オブジェクト指向プログラミングのメソッドの記述を書式化します．このコマン
     ドは`@defop Method ...'と同じです．メソッドのクラス名，メソッ
     ド名，そしてそのあらゆる引数を引数とします．*Note Definition
     Commands::.  また*Note Def Cmds in Detail:
     deffnx.を参照してください．

`@defop CATEGORY CLASS NAME ARGUMENTS...'
`@defopx CATEGORY CLASS NAME ARGUMENTS...'
     オブジェクト指向プログラミングのオペレーションの記述を書式化します．
     `@defop'は，オペレーションのカテゴリーの全体名，オペレーションのク
     ラス名，オペレーション名，そしてあらゆる引数を引数とします． *Note
     Definition Commands::.  また*Note Abstract
     Objects::を参照してくださ い．

`@defopt OPTION-NAME'
`@defoptx OPTION-NAME'
     ユーザーオプションの記述を書式化します．このコマンドは`@defvr
     {User Option} ...'と同じです．*Note Definition Commands::.  また
     *Note Def Cmds in Detail: deffnx.を参照してください．

`@defspec SPECIAL-FORM-NAME ARGUMENTS...'
`@defspecx SPECIAL-FORM-NAME ARGUMENTS...'
     スペシャルフォームの記述を書式化します．このコマンドは`@deffn
     {Special Form} ...'と同じです．*Note Definition Commands::.  また
     *Note Def Cmds in Detail: deffnx.を参照してください．

`@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...'
`@deftpx CATEGORY NAME-OF-TYPE ATTRIBUTES...'
     データ型の記述を書式化します．`@deftp'は，カテゴリー，型名
     (`int'や`float'のような単語)，そしてその型のオブジェクトの属性
     名を引数とします．*Note Definition Commands::.  また*Note Data
     Types::を参 照してください．

`@deftypefn CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
`@deftypefnx CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
     関数やその類似の，引数をとることが可能で入力も可能な構成要素の記述を書式
     化します．`@deftypefn'は，記述されている構成要素の分類，型，構成要
     素の名前，そしてあらゆる引数を引数とします．*Note Definition
     Commands::.  また*Note Def Cmds in Detail:
     deffnx.を参照してください．

`@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...'
`@deftypefunx DATA-TYPE FUNCTION-NAME ARGUMENTS...'
     入力された言語の関数の記述を書式化します．このコマンドは
     `@deftypefn Function ...'と同じです．*Note Definition Commands::.
     また*Note Def Cmds in Detail: deffnx.を参照してください．

`@deftypeivar CLASS DATA-TYPE VARIABLE-NAME'
`@deftypeivarx CLASS DATA-TYPE VARIABLE-NAME'
     オブジェクト指向プログラミングの入力されたインスタンス変数を書式化します．
     *Note Definition Commands::.  また*Note Abstract
     Objects::を参照してくださ い．

`@deftypemethod CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
`@deftypemethodx CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
     オブジェクト指向プログラミングの入力されたメソッドの記述を書式化します．
     *Note Definition Commands::.  また*Note Def Cmds in Detail:
     deffnx.を参照 してください．

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
`@deftypeopx CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     オブジェクト指向プログラミングの入力されたオペレーションの記述を書式化し
     ます．*Note Definition Commands::.  また*Note Abstract
     Objects::を参照して ください．

`@deftypevar DATA-TYPE VARIABLE-NAME'
`@deftypevarx DATA-TYPE VARIABLE-NAME'
     入力された言語の変数の記述を書式化します．このコマンドは
     `@deftypevr Variable ...'と同じです．*Note Definition Commands::.
     また*Note Def Cmds in Detail: deffnx.を参照してください．

`@deftypevr CLASSIFICATION DATA-TYPE NAME'
`@deftypevrx CLASSIFICATION DATA-TYPE NAME'
     入力された言語の変数のようなもの -- 値を記録する構成要素 --
     の記述を書
     式化します．引数として，記述された構成要素の分類，型，そして構成要素の名
     前をとります．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnx. を参照してください．

`@defun FUNCTION-NAME ARGUMENTS...'
`@defunx FUNCTION-NAME ARGUMENTS...'
     関数の記述を書式化します．このコマンドは`@deffn Function ...'
     と同じです．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnx.を参照してください．

`@defvar VARIABLE-NAME'
`@defvarx VARIABLE-NAME'
     変数の記述を書式化します．このコマンドは`@defvr Variable ...'
     と同じです．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnx.を参照してください．

`@defvr CATEGORY NAME'
`@defvrx CATEGORY NAME'
     あらゆる変数に類するものの記述を書式化します．`@defvr'は，構成要素
     のカテゴリと構成要素の名前を引数とします．*Note Definition
     Commands::.  また*Note Def Cmds in Detail:
     deffnx.を参照してください．

`@detailmenu'
     マスターメニューでリストアップされている詳細なノードで生じる，
     `makeinfo'の混乱を避けます．*Note Master Menu Parts::.

`@dfn{TERM}'
     用語使用の紹介や定義を強調します．*Note `@dfn': dfn.

`@dircategory DIRPART'
     このファイルの項目へ行べきInfoディレクトリメニューを指定します．
     *Note Installing Dir Entries::.

`@direntry'
     このファイルのInfoディレクトリメニュー項目を開始します．`@end
     direntry'と対になります．*Note Installing Dir Entries::.

`@display'
     例のようなものを開始します．`@example'に似ていますが(テキストを字
     下げし，全体に広がらない)新しいフォントを選択しません．`@end
     display'と対になります．*Note `@display': display.

`@dmn{DIMENSION}'
     測定単位を12ptのように書式化します．TeXは，DIMENSIONの前
     にスペースを挿入します．Infoでは，効果はありません．*Note `@dmn':
     dmn.

`@documentdescription'
     HTML出力に含められるドキュメントを記述しているテキストを設定します．
     `@end documentdescription'と対になります． *Note
     `@documentdescription': documentdescription.

`@documentencoding ENC'
     入力エンコードをENCとして宣言します．*Note `@documentencoding':
     documentencoding.

`@documentlanguage CC'
     ドキュメント言語を二文字のISO-639の省略型CCと宣言します． *Note
     `@documentlanguage': documentlanguage.

`@dotaccent{C}'
     文字Cの上にo.のようにドットアクセントを生成します． *Note
     Inserting Accents::.

`@dots{}'
     省略を意味する`...'を挿入します．*Note `@dots': dots.

`@email{ADDRESS[, DISPLAYED-TEXT]}'
     電子メールアドレスを示します．*Note `@email': email.

`@emph{TEXT}'
     TEXTを強調します．テキストは印刷された出力で_イタリック_で表
     示され，Infoではアスタリスクが前後に付きます．*Note Emphasizing
     Text: Emphasis.

`@end ENVIRONMENT'
     ENVIRONMENTを`@end example'のように終了します． *Note @-commands:
     Formatting Commands.

`@env{ENVIRONMENT-VARIABLE}'
     `PATH'のような環境変数名を示します．*Note `@env': env.

`@enddots{}'
     文章の終りの省略を....のように生成します． *Note `@dots{}': dots.

`@enumerate [NUMBER-OR-LETTER]'
     `@item'を使用するそれぞれの項目に対し，番号付のリストを開始します．
     オプションでNUMBER-OR-LETTERを用いたリストを開始します． `@end
     enumerate'と対になります．*Note `@enumerate': enumerate.

`@equiv{}'
     glyphを用いて，`=='のように，二つ形式が正確に等しいことを読者
     に示します．*Note Equivalence::.

`@error{}'
     glyphを用いて，`error-->'のように，以下のテキストがエラーメッセージ
     だということを読者に示します．*Note Error Glyph::.

`@evenfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@evenheading [LEFT] @| [CENTER] @| [RIGHT]'
     偶数番号で(左側)ページのページフッタと見出しを指定します．*Note
     How to Make Your Own Headings: Custom Headings.

`@everyfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@everyheading [LEFT] @| [CENTER] @| [RIGHT]'
     すべてのページのページフッタと見出しを指定します．Infoには関係しません．
     *Note How to Make Your Own Headings: Custom Headings.

`@example'
     例を開始します．テキストを字下げし，補充せず，等幅フォントを選択します．
     `@end example'と対になります．*Note `@example': example.

`@exampleindent INDENT'
     例のような環境で，INDENT個のスペースで(おそらく0)字下げします．
     *Note Paragraph Indenting: exampleindent.

`@exclamdown{}'
     上下逆の感嘆符を生成します．*Note Inserting Accents::.

`@exdent LINE-OF-TEXT'
     行が持つあらゆる字下げを削除します．*Note Undoing the Indentation
     of a Line: exdent.

`@expansion{}'
     特別なglyph`==>'で，マクロ展開の結果を読者に示します． *Note ==>
     Indicating an Expansion: expansion.

`@file{FILENAME}'
     ファイル，バッファ，ノードやディレクトリの名前を強調します．*Note
     `@file': file.

`@finalout'
     TeXが，幅を越えた行に大きな黒い警告の長方形を印刷するのを妨げます．
     *Note Overfull hboxes::.

`@findex ENTRY'
     ENTRYを関数の索引に追加します．*Note Defining the Entries of an
     Index: Index Entries.

`@flushleft'
`@flushright'
     全ての行を左寄せにしますが右端はバラバラになります．フォントはそのままで
     す．`@end flushleft'と対になります．`@flushright'の同義語で
     す．*Note `@flushleft' and `@flushright': flushleft & flushright.

`@footnote{TEXT-OF-FOOTNOTE}'
     脚注に挿入します．脚注のテキストは，TeXではページの底に印刷され，Info
     はノードの`終り'か`分割した'形式で書式化されます．*Note
     Footnotes::.

`@footnotestyle STYLE'
     Infoファイルの脚注形式を指定し，`end'は終りに置くノード形式で，
     `separate'は分割したノード形式です．*Note Footnotes::.

`@format'
     例のようなものを開始します．`@display'に似ていますが，マージンは狭
     くなりません．`@end format'と対になります．*Note `@example':
     example.

`@ftable FORMATTING-COMMAND'
     それぞれの項目に対し，`@item'を使用した二列の表を開始します．それ
     ぞれの項目は，関数の索引の最初の列に自動的に挿入されます．`@end
     ftable'と対になります．索引に対する以外，`@table'と同じです．
     *Note `@ftable' and `@vtable': ftable vtable.

`@group'
     一つの印刷されたページに，一緒に現れる必要があるテキストを保ちます．
     `@end group'と対になります．Infoでは関係ありません．*Note
     `@group': group.

`@H{C}'
     Cの上に長いハンガリーのウムラートをo''のように生成します．

`@heading TITLE'
     テキストに番号付けされていないセクションのような見出しを印刷しますが，印
     刷された目次には印刷しません．Infoでは，タイトルは等号で下線が引かれます．
     *Note Section Commands: unnumberedsec appendixsec heading.

`@headings ON-OFF-SINGLE-DOUBLE'
     印刷に対し，ページ見出しを付けたり消したりし，片面または両面のページ見出
     しを指定したりします．*Note The `@headings' Command: headings on
     off.

`@html'
     完全にHTMLモードに入ります．`@end html'と対になります．*Note Raw
     Formatter Commands::.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     ハイフネーションポイントを明示的に定義します．*Note `@-' and
     `@hyphenation': - and hyphenation.

`@i{TEXT}'
     TEXTをイタリックフォントで印刷します．Infoでは効果がありません．
     *Note Fonts::.

`@ifclear FLAG'
     FLAGがクリアされている場合，Texinfo書式化コマンドは`@ifclear
     FLAG'とそれに続く`@end ifclear'コマンドの間のテキストを書式
     化します．*Note `@set' `@clear' `@value': set clear value.

`@ifhtml'
`@ifinfo'
     印刷されたマニュアルに植字するとき，TeXが無視するテキストの展開を開始
     します．`@ifhtml'テキストはHTMLのみに現れます．`@ifinfo'出力
     はInfoと(歴史的な互換性のため)プレーンテキストの出力の両方に現れます．
     `@end ifhtml'と対になります．`@end ifinfo'も同様になります． *Note
     Conditionals::.

`@ifnothtml'
`@ifnotinfo'
`@ifnotplaintext'
`@ifnottex'
`@ifnotxml'
     一つの出力形式で無視され，他では無視されないテキストの展開を開始します．
     テキストは指定されていないフォーマットだけに現れます．`@ifnothtml'
     のテキストはHTML出力では削除される等のようになります．例外は
     `@ifnotinfo'のテキストで，それはInfo出力と同様にプレーンテキストの
     出力からも削除されます．対応する`@end ifnotFORMAT'と対になり
     ます．*Note Conditionals::.

`@ifplaintext'
     プレーンテキストの出力だけに現れるテキストの展開を開始します．
     `@end ifplaintext'と対になります．*Note Conditionals::.

`@ifset FLAG'
     FLAGが設定されている場合，Texinfo書式化コマンドは`@ifset
     FLAG'とそれに続く`@end ifset'コマンドの間のテキストを書式化
     します．*Note `@set' `@clear' `@value': set clear value.

`@iftex'
     Infoファイルに現れないが，TeXのみで処理されるテキストの展開を開始しま
     す．`@end iftex'と対になります．*Note Conditionally Visible Text:
     Conditionals.

`@ifxml'
     XML出力だけに現れるテキストの展開を開始します．`@end ifxml'と対に
     なります．*Note Conditionals::.

`@ignore'
     Infoファイルにも印刷物にも現れないテキストを展開します．`@end
     ignore'と対になります．*Note Comments and Ignored Text: Comments.

`@image{FILENAME, [WIDTH], [HEIGHT], [ALT], [EXT]}'
     外部のFILENAMEの画像を，与えられたWIDTHと/やHEIGHTの大
     きさで含め，HTMLではALTテキストを使用し，
     `FILENAME.EXT'を探します．*Note Images::.

`@include FILENAME'
     Infoファイルや印刷されたドキュメントに，ファイルFILENAMEの内容を取
     り込みます．*Note Include Files::.

`@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}'
     印刷されたマニュアルには無い，Infoファイルへの相互参照を作成します．
     *Note Cross references using `@inforef': inforef.

`\input MACRO-DEFINITIONS-FILE'
     指定されたマクロ定義ファイルを使用します．このコマンドは，TeXが
     `texinfo'マクロ定義ファイルを使用するよう，Texinfoファイルの最初の
     行でのみ使用されます．定義ファイルを読むまでTeXは`@'を理解でき
     ないので，`\input'のバックスラッシュが`@'の代わりに使用されま
     す．*Note Texinfo File Header::.

`@item'
     `@itemize'と`@enumerate'に対し印が付けられた段落の最初を示し
     ます．`@table'，`@ftable'，そして`@vtable'に対し，最初
     の列の項目のテキストの最初を示します．*Note Lists and Tables::.

`@itemize  MARK-GENERATING-CHARACTER-OR-COMMAND'
     字下げされた段落の文章を作成し，それぞれの段落の最初に左のマージンの内部
     に印をを付けます．*Note `@itemize': itemize.

`@itemx'
     `@item'に似ていますが，項目のテキストの上に余分な縦方向の空白を生
     成しません．*Note `@itemx': itemx.

`@kbd{KEYBOARD-CHARACTERS}'
     ユーザが入力する文字のテキストを示します．*Note `@kbd': kbd.

`@kbdinputstyle STYLE'
     `@kbd'が`@code'と異なるフォントを使用するとき指定します． *Note
     `@kbd': kbd.

`@key{KEY-NAME}'
     キーボードのキーの名前を示します．*Note `@key': key.

`@kindex ENTRY'
     キーの索引にENTRYを加えます．*Note Defining the Entries of an
     Index: Index Entries.

`@L{}'
`@l{}'
     ポーランドの縮めたLの文字の，大文字と小文字を生成します．それぞれ/L，
     /lです．

`@lisp'
     Lispコードの例を開始します．文字を字下げし，両端まで広げず，等幅フォント
     を選択します．`@end lisp'と対になります．*Note `@lisp': lisp.

`@lowersections'
     順番に，章をセクションに，セクションをサブセクションなどのように変更しま
     す．*Note `@raisesections' and `@lowersections': Raise/lower
     sections.

`@macro MACRONAME {PARAMS}'
     新しいTexinfoコマンド`@MACRONAME{PARAMS}'を定義しま
     す．`makeinfo'と`texi2dvi'のみでサポートされています． *Note
     Defining Macros::.

`@majorheading TITLE'
     テキストで章のような見出しを印刷しますが，印刷されたマニュアルの目次には
     印刷されません．`@chapheading'コマンドより大きな縦方向の空白を見出
     しの前に生成します．Infoでは，章の見出し行はアスタリスクで下線が引かれま
     す．*Note `@majorheading' and `@chapheading': majorheading &
     chapheading.

`@math{MATHEMATICAL-EXPRESSION}'
     数式を書式化します．*Note `@math': Inserting Mathematical
     Expressions: math.

`@menu'
     Infoでノードメニューの最初に印を付けます．印刷されたマニュアルでは効果が
     ありません．`@end menu'と対になります．*Note Menus::.

`@minus{}'
     負の符号`-'を生成します．*Note `@minus': minus.

`@multitable COLUMN-WIDTH-SPEC'
     複数列の表を開始します．`@end multitable'と対になります． *Note
     Multitable Column Widths::.

`@need N'
     現在のページの残りがNミル(千分の1インチ)より小さい場合，印刷された
     マニュアルで新しいページを開始します．*Note `@need': need.

`@node NAME, NEXT, PREVIOUS, UP'
     Infoで新しいノードの開始を定義し，TeXに対し参照の位置を供給します．
     *Note `@node': node.

`@noindent'
     テキストが新しい段落であるかのように字下げするのを妨げます． *Note
     `@noindent': noindent.

`@novalidate'
     ノード参照の有効化を抑制し，TeXの追加ファイルの作成を削除します．
     `@setfilename'の前で使用します．*Note Pointer Validation::.

`@O{}'
`@o{}'
     大文字と小文字のスラッシュの付いたOの文字を生成します．それぞれ，/O，
     /oです．

`@oddfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@oddheading [LEFT] @| [CENTER] @| [RIGHT]'
     それぞれページのフッタと見出しを，それぞれ偶数番号の(右側の)ページに指定
     します．*Note How to Make Your Own Headings: Custom Headings.

`@OE{}'
`@oe{}'
     大文字と小文字のOEの抱き文字を生成します．それぞれOE，oeです．
     *Note Inserting Accents::.

`@option{OPTION-NAME}'
     `-l'や`--help'のようなコマンドラインオプションを示します． *Note
     `@option': option.

`@page'
     印刷されたマニュアルで新しいページを開始します．Infoでは効果ありません．
     *Note `@page': page.

`@pagesizes [WIDTH][, HEIGHT]'
     ページ寸法を変更します．*Note pagesizes::.

`@paragraphindent INDENT'
     INDENT個のスペース(おそらく0)で，段落の字下げを行います．
     INDENTが`asis'の場合，ソースファイルの字下げを保持します． *Note
     Paragraph Indenting: paragraphindent.

`@pindex ENTRY'
     プログラムの索引にENTRYを加えます．*Note Defining the Entries of
     an Index: Index Entries.

`@point{}'
     バッファでのポイントの位置を，読者にglyph`-!-'で示します． *Note
     Indicating Point in a Buffer: Point Glyph.

`@pounds{}'
     ポンド通貨記号を生成します．*Note `@pounds{}': pounds.

`@print{}'
     読者にglyph，`-|'で印刷物を示します．*Note Print Glyph::.

`@printindex INDEX-NAME'
     アルファベット順の二列の索引を，印刷されたマニュアルで印刷したり，Infoで
     索引項目のアルファベット順のメニューを生成したりします．*Note
     Printing Indices & Menus::.

`@pxref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     小文字の`see'で始まる参照を印刷されたマニュアルに作成します．カッコ内の
     みで使用します．句読点を使用してコマンドを続けないでください．Info書式化
     コマンドは，必要な場合は自動的に終りの句読点を挿入します．最初の引数のみ
     必要です．*Note `@pxref': pxref.

`@questiondown{}'
     上下逆の疑問符を生成します．*Note Inserting Accents::.

`@quotation'
     実際のまたは想像上の成果物からの引用のテキストを表示するため，マージンを
     狭くします．コマンドは単独行で書いてください．`@end quotation'と組
     になります．*Note `@quotation': quotation.

`@r{TEXT}'
     TEXTをromanフォントで出力します．Infoでは効果がありません． *Note
     Fonts::.

`@raisesections'
     順番に，セクションを章に，サブセクションをセクション等のように，変更しま
     す．*Note `@raisesections' and `@lowersections': Raise/lower
     sections.

`@ref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     参照を作成します．印刷されたマニュアルでは`See'で始まりません．コマンド
     に句読点を続けてください．最初の引数のみ必要です．*Note `@ref':
     ref.

`@refill'
     Infoでは，他の処理が終った後の段落の補充と字下げが行われます．TeXでは
     効果がなく，常に補充されます．このコマンドは，全てのフォーマッターが自動
     的に補充するのでもはや不要です．*Note Refilling Paragraphs::.

`@result{}'
     式の結果を特別なglyph `=>'を用いて読者に示します． *Note
     `@result': result.

`@ringaccent{C}'
     リングアクセントを，o*のように次の文字の上に生成します． *Note
     Inserting Accents::.

`@samp{TEXT}'
     文字が並んでいる，リテラルの例となるテキストを強調します．宣言とシェルコ
     マンド全体に対し単一の文字を使用してください．*Note `@samp': samp.

`@sc{TEXT}'
     印刷物で，TEXTをTHE SMALL CAPS FONTに設定し，Infoファイルでは
     大文字にTEXTを設定します．*Note Smallcaps::.

`@section TITLE'
     章の中でセクションを開始します．印刷されたマニュアルでは，セクションタイ
     トルは番号が付き，目次に現れます．Infoでは，タイトルは等号で下線が引かれ
     ます．*Note `@section': section.

`@set FLAG [STRING]'
     FLAGをアクティブにし，Texinfo書式化コマンドは`@ifset FLAG'と`@end
     ifset'コマンドの組の間のテキストを書式化します．
     オプションで，FLAGの値をSTRINGに設定します．*Note `@set' `@clear'
     `@value': set clear value.

`@setchapternewpage ON-OFF-ODD'
     新しいページで章を開始する時，その場合は，偶数番号(右側)の新しいページを
     指定します．*Note `@setchapternewpage': setchapternewpage.

`@setcontentsaftertitlepage'
     `@contents'コマンドがない場合でも，目次を`@end titlepage'の
     後に書きます．*Note Contents::.

`@setfilename INFO-FILE-NAME'
     Infoファイルが使用する名前を提供します．このコマンドは出力を生成しません
     が，TeXの書式化でも必要です．*Note `@setfilename': setfilename.

`@setshortcontentsaftertitlepage'
     短い目次を`@end titlepage'コマンドの後に，そこに
     `@shortcontents'コマンドがない場合でも生成します．*Note Contents::.

`@settitle TITLE'
     印刷されたマニュアルのページヘッダにタイトルと，HTMLの`<head>'に対
     してデフォルトのドキュメントの記述を提供します．*Note `@settitle':
     settitle.

`@shortcontents'
     短い目次を印刷します．Infoには関係なく，それは目次ではなくメニューを使用
     するためです．`@summarycontents'の同義語です．*Note Generating a
     Table of Contents: Contents.

`@shorttitlepage TITLE'
     最小限のタイトルページを生成します． *Note `@titlepage': titlepage.

`@smallbook'
     TeXは，印刷されたマニュアルを8.5x11インチではなく7x9.25インチで生成し
     ます．*Note Printing Small Books: smallbook.  また，*Note
     small::も参 照してください．

`@smalldisplay'
     例のようなものを開始します．`@smallexample' (マージンを狭くし，補
     充しない)に似ていますが，等幅フォントを選択しません．`@end
     smalldisplay'と対になります．*Note small::.

`@smallexample'
     例を示すためテキストを字下げします．補充せず，等幅フォントを選択し，マー
     ジンを狭くします．印刷されたマニュアルでは，`@example'より小さいフォ
     ントを選択します．`@end smallexample'と対なります．*Note small::.

`@smallformat'
     例のようなものを開始します．`@smalldisplay'に似ていますが，マージ
     ンを狭くしません．`@end smallformat'と対になります．*Note small::.

`@smalllisp'
     Lispコードの例を開始します．`@smallexample'と同じです．`@end
     smalllisp'と対なります．*Note small::.

`@sp N'
     N個の空白行を省略します．*Note `@sp': sp.

`@ss{}'
     ドイツのエスツェット文字ssを生成します．*Note Inserting Accents::.

`@strong {TEXT}'
     印刷されたマニュアルで，植字を*ボールド*フォントで行ったり，Info
     でアスタリスクを周りに置くことでTEXTを強調します．*Note
     Emphasizing Text: emph & strong.

`@subheading TITLE'
     テキストに番号付けされていないセクションのような見出しを印刷しますが，印
     刷されたマニュアルの目次には印刷しません．Infoでは，タイトルはハイフンで
     下線が引かれます．*Note `@unnumberedsubsec' `@appendixsubsec'
     `@subheading': unnumberedsubsec appendixsubsec subheading.

`@subsection TITLE'
     セクション内でサブセクションを開始します．印刷されたマニュアルでは，サブ
     セクションタイトルは番号付けされ，目次に現れます．Infoでは，タイトルはハ
     イフンで下線が引かれます．*Note `@subsection': subsection.

`@subsubheading TITLE'
     テキストの番号付けされていないサブサブセクションのような見出しを印刷しま
     すが，印刷されたマニュアルの目次には印刷されません．Infoでは，タイトルは
     ピリオドで下線が引かれます．*Note The `subsub' Commands:
     subsubsection.

`@subsubsection TITLE'
     サブセクション内でサブサブセクションを開始します．印刷されたマニュアルで
     は，サブサブセクションのタイトルは番号付けされ，目次に現れます．Infoでは，
     タイトルはピリオドで下線が引かれます．*Note The `subsub' Commands:
     subsubsection.

`@subtitle TITLE'
     印刷されたマニュアルでは，ページの右寄せで通常のフォントサイズでサブタイ
     トルを設定します．Infoでは関係なく，それにはタイトルページが無いためです．
     *Note `@title' `@subtitle' and `@author' Commands: title subtitle
     author.

`@summarycontents'
     短い目次を印刷します．Infoでは関係なく，それは目次の代わりにメニューを使
     用するためです．`@shortcontents'の同義語です．*Note Generating a
     Table of Contents: Contents.

`@syncodeindex FROM-INDEX INTO-INDEX'
     最初の引数で指名された索引を，二番目の引数で指名された索引に統合し，最初
     の索引から`@code'フォントで項目を印刷します．*Note Combining
     Indices::.

`@synindex FROM-INDEX INTO-INDEX'
     最初の引数で指名された索引を二番目の引数で指名された索引に統合します．
     FROM-INDEX項目のフォントは変更しません．*Note Combining Indices::.

`@t{TEXT}'
     TEXTをタイプライターのような等幅フォントで印刷します．Infoには効果
     がありません．*Note Fonts::.

`@tab'
     列を複数列の表に分割します．*Note Multitable Rows::.

`@table FORMATTING-COMMAND'
     二列の表を開始し，それぞれの項目に対し`@item'を使用します．それぞ
     れの最初の列の項目を`@item'と同じ行に書いてください．最初の列の項
     目は，FORMATTING-COMMANDの結果と同じフォントで印刷されます． `@end
     table'と対になります．*Note Making a Two-column Table: Two-column
     Tables.  また，*Note `@ftable' and `@vtable': ftable
     vtable.と*Note `@itemx': itemx.を参照してください．

`@TeX{}'
     ロゴTeXを挿入します．*Note Inserting TeX and (C): TeX and
     copyright.

`@tex'
     完全にTeXモードに入ります．`@end tex'と対になります．*Note Raw
     Formatter Commands::.

`@thischapter'
`@thischaptername'
`@thisfile'
`@thispage'
`@thistitle'
     見出しとフッタのみで利用可能です．現在の章の番号と名前を意味し(書式は，
     `Chapter 1:
     Title')，章の名前のみ，ファイル名，現在のページ番号とドキュ
     メントのタイトルに，それぞれ対応します．*Note How to Make Your Own
     Headings: Custom Headings.

`@tie{}'
     改行が生じではならない場所に，単語内に普通のスペースを生成します．
     *Note `@tie{}': tie.

`@tieaccent{CC}'
     タイアクセントを次の二文字CCの上に`oo['のように生成しま す．*Note
     Inserting Accents::.

`@tindex ENTRY'
     ENTRYをデータ型の索引に加えます．*Note Defining the Entries of an
     Index: Index Entries.

`@title TITLE'
     印刷されたマニュアルでは，タイトルを，右寄せで通常フォントより大きいもの
     で黒い罫線で下線を引き配置します．Infoには関係なく，それはタイトルページ
     が無いためです．*Note The `@title' `@subtitle' and `@author'
     Commands: title subtitle author.

`@titlefont{TEXT}'
     印刷されたマニュアルで，TEXTを通常フォントより大きなもので印刷しま
     す．Infoでは関係なく，それにはタイトルページが無いためです． *Note
     The `@titlefont' `@center' and `@sp' Commands: titlefont center sp.

`@titlepage'
     Texinfoのタイトルぺージの最初を示します．コマンドを単独行に書いてくださ
     い．Infoでは，`@titlepage'と`@end titlepage'の間には何も現れ
     ません．*Note `@titlepage': titlepage.

`@today{}'
     現在の日付を`1 Jan 1900'の形式で挿入します．*Note How to Make Your
     Own Headings: Custom Headings.

`@top TITLE'
     `makeinfo'で書式化するInfoファイルで，ファイルの最上位の
     `@node'を識別するもので，ファイルの最上位の`@node'は
     `@top'コマンドの直前の行に書く必要があります．`makeinfo'のノー
     ドポインタの挿入機能に対して使用されます．タイトルはアスタリスクで下線が
     引かれます．`@node'行と`@top'行は，通常はどちらも
     `@ifnottex'と`@end ifnottex' で囲むべきです．TeXと
     `texinfo-format-buffer'で，`@top'コマンドは
     `@unnumbered'と単なる同義語です．*Note Creating Pointers with
     `makeinfo': makeinfo Pointer Creation.

`@u{C}'
`@ubaraccent{C}'
`@udotaccent{C}'
     文字Cの上や下に，o(，o_，.oのように，ブ
     レーブ，下線，または下ドットのアクセントを生成します．*Note
     Inserting Accents::.

`@unnumbered TITLE'
     印刷されたマニュアルで，章番号のない章を開始します．タイトルは印刷された
     マニュアルの目次に現れます．Infoでは，タイトルはアスタリスクで下線が引か
     れます．*Note `@unnumbered' and `@appendix': unnumbered & appendix.

`@unnumberedsec TITLE'
     印刷されたマニュアルで，セクション番号がないセクションを開始します．タイ
     トルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルは等号で
     下線が引かれます．*Note Section Commands: unnumberedsec
     appendixsec heading.

`@unnumberedsubsec TITLE'
     印刷されたマニュアルで，章の中に番号が無いサブセクションを開始します．タ
     イトルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルはハイ
     フンで下線が引かれます．*Note `@unnumberedsubsec'
     `@appendixsubsec' `@subheading': unnumberedsubsec appendixsubsec
     subheading.

`@unnumberedsubsubsec TITLE'
     印刷されたマニュアルで，章の中に番号が無いサブサブセクションを開始します．
     タイトルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルはピ
     リオドで下線が引かれます．*Note The `subsub' Commands:
     subsubsection.

`@uref{URL[, DISPLAYED-TEXT][, REPLACEMENT}'
     相互参照を外部のワールドワイドウェブのユニフォームリソースロケータに定義
     します．*Note `@uref': uref.

`@url{URL}'
     ワールドワイドウェブのユニフォームリソースロケータとなるテキストを示しま
     す．*Note `@url': url.

`@v{C}'
     文字Cの上にo<のようにチェックアクセントを生成します． *Note
     Inserting Accents::.

`@value{FLAG}'
     FLAGを`@set FLAG'で設定された値で置換します．*Note `@set' `@clear'
     `@value': set clear value.

`@var{METASYNTACTIC-VARIABLE}'
     それはもう一つのテキストの一部を示すメタ構文の変数を強調します．
     *Note Indicating Metasyntactic Variables: var.

`@verb{DELIM LITERAL DELIM}'
     単一の文字DELIMで分離されているLITERALを，空白やTexinfoの特
     殊文字が含めて，正確にそのまま(固定幅フォントで)出力します． *Note
     `verb': verb.

`@verbatim'
     囲まれているテキストをそのまま(固定幅フォントで)出力します．`@end
     verbatim'と対になります．*Note `verbatim': verbatim.

`@verbatiminclude FILENAME'
     FILENAMEの内容をそのまま(固定幅フォントで)出力します． *Note
     `verbatiminclude': verbatiminclude.

`@vindex ENTRY'
     ENTRYを変数の索引に追加します．*Note Defining the Entries of an
     Index: Index Entries.

`@vskip AMOUNT'
     印刷されたマニュアルに，ページの残りのテキストをページの底まで押しやるよ
     うな空白を挿入します．`0pt plus 1filll'のような引数を使用して，著作
     権のページの書式化に使用します．(`filll'の綴に注意してください．)
     `@vskip'はInfoが無視する文だけで使用してもかまいません． *Note
     Copyright::.

`@vtable FORMATTING-COMMAND'
     二列の表を開始し，それぞれの項目で`@item'を使用します．最初の列の
     それぞれの項目は，変数の索引に自動的に入ります．`@end vtable'と対
     になります．索引化以外`@table'と同じです．*Note `@ftable' and
     `@vtable': ftable vtable.

`@w{TEXT}'
     TEXTが二行に分割されるのを妨げます．`@refill'コマンドととも
     にに`@w'を使用して，段落を終了しないでください．*Note `@w': w.

`@xref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     印刷されたマニュアルで，`See'で始まる参照を生成します．コマンドに句読点
     を続けてください．最初の引数のみ必要です．*Note `@xref': xref.


File: texinfo-ja.info,  Node: Tips,  Next: Sample Texinfo Files,  Prev: Command List,  Up: Top

Appendix B 助言とヒント
***********************

Texinfoドキュメントを書くための助言として以下をあげます．

   * 過去や未来ではなく，現在の時制で書いてください．

   * 積極的に書いてください！例えば，"それは推奨される..."より"我々は
     推奨する..."と書いてください．

   * 段の補充は70または72を使用してください．長い行は読みにくいです．

   * 著作権の注意と著作権の許可を含めてください．

索引，索引，索引！
..................

異なる方法で多くの索引項目を書いてください．読者は索引が好きです．それら
は役に立ち便利です．

テキストの本体に書くように索引項目を書くのが最も簡単ですが，項目を後で書
くのを好む人もいます．どちらの場合でも，現れる段落の前に項目を書いてくだ
さい．この方法では，索引項目はページを跨ぐ段落の最初のページを示します．

  我々が貴重だと分かったより多くのヒントには以下のものがあります．

   *
     それぞれの項目が，ドキュメントの異なる場所を参照するように，それぞれの索
     引項目を異なるように書いてください．

   *
     トピックが意味深く述べられているところにのみ，索引項目を書いてください．
     例えば，バグレポートの章に"デバッグ情報"の索引があっても役に立ちません．
     デバッグ情報を知りたい誰かは，きっとその章でそれを見つけられないでしょう．

   *
     全ての概念の索引の索引項目の最初の単語を，一貫して大文字化するか，一貫し
     て小文字を使用してください．簡潔な項目は小文字を要求します．長い項目は大
     文字を要求します．大文字小文字のどちらを使用する場合でも，一貫して使用し
     てください．二つの形式を混ぜると醜くなります．

   *
     国や省略名のように，大文字化または大文字の使用が適切な場合は，索引の単語
     に対し，常にそのようにしてください．CやLispのように大文字小文字の違いを
     識別する名前に対し，適切なものを常に使用してください．

   *
     セクションコマンドの直後にセクション全体を参照する索引コマンドを書き，段
     落の前に段落を参照する索引コマンドを書いてください．

     以下の例では，空白行が索引項目"Leaping"の後にあります．

          @section The Dog and the Fox
          @cindex Jumping, in general
          @cindex Leaping

          @cindex Dog, lazy, jumped over
          @cindex Lazy dog jumped over
          @cindex Fox, jumps over dog
          @cindex Quick fox jumps over dog
          The quick brown fox jumps over the lazy dog.

     (例で，同じ概念に対する項目を異なる方法で書いていることに注意してくださ
     い -- `Lazy dog'と`Dog, lazy' -- それで読者は，異なる方法で
     概念を見つけることが可能になります．)

空白行
......

   *
     セクションコマンドと最初に続く文や段落の間や，セクションコマンドに関連し
     た索引コマンドと最初に続く文や段落の間に，索引のチップに書かれているよう
     に空白行を挿入してください．そうしない場合，フォーマッタはタイトルと段落
     を一緒にまとめるかもしれません．

   * `@table'コマンドの前と`@end table'コマンドの後に，空白行を常
     に挿入してください．しかし，`@table'コマンドの後と`@end
     table'コマンドの前には，空白行を決して挿入しないでください．

     例えば，以下のようにします．

          Types of fox:

          @table @samp
          @item Quick
          Jump over lazy dogs.

          @item Brown
          Also jump over lazy dogs.
          @end table
          @noindent
          On the other hand, ...

     同じ方法で，`@itemize' ... `@end itemize'の前後と， `@enumerate'
     ... `@end enumerate'の前後に空白行を挿入し てください．

完全なフレーズ
..............

完全なフレーズは何よりも読み易く....

   *
     完全な文として項目に分けられたリストを書いてください．または，少なくとも
     完全なフレーズにしてください．不完全な表現...厄介です...は以下の
     ようなものです．

   *
     複数の項目リストや表に対する前置きの文や文節は，完全な表現として書いてく
     ださい．"You can set:"と書かないでください．代わりに"You can set
     these
     variables:"と書いてください．前者の表現は切り離されているように感
     じます．

エディション，日付と，バージョン
................................

全てのマニュアルの三箇所に，エディションナンバー，バージョンナンバー，そ
して日付を，`@copying'のテキストに含めてください(Texinfoファイルを
読む人のためと，出力ファイルの法的な著作権のためです)．そして，
`@insertcopying'を`@titlepage'セクション(印刷されたマニュア
ルを読む人のため)とTopノード(オンラインの出力を読む人のため)で使用してく
ださい．

  こうするためには，`@set'と`@value'を使用するのが最も簡単です． *Note
`@value' Example: value Example, and *Note GNU Sample Texts::.

定義コマンド
............

定義コマンドは，`@deffn'，`@defun'，`@defmac'とその同
類で，単一の書式で記述を書くことを可能にします．

   *
     定義コマンドで定義したそれぞれの構成要素に対し，定義コマンドを一つだけ書
     いてください．自動的に索引を作成する機能によって，読者を定義に導く索引項
     目を作成します．

   * `@table' ... `@end table'を関数の概要を含む付録に使用し，
     `@deffn'や他の定義コマンドを使用しないでください．

大文字化
........

   * "Texinfo"を大文字化してください．それは名前です．`x'や`i'を
     大文字で書かないでください．

   * "Info"を大文字化してください．それは名前です．

   * TeXは`@TeX{}'コマンドを使用して書いてください．大文字の
     `T'と`X'に注意してください．このコマンドは，TeXを書いた Donald
     Knuthに希望に従ってフォーマッタに植字させます．

スペース
........

`@example' ... `@end example'と類似のコマンド内部以外で，
Texinfoファイルの書式化のためにスペースを使用しないでください．

  例えば，TeXは以下を補充します．

        @kbd{C-x v}
        @kbd{M-x vc-next-action}
           現在のバッファに対応する，
           バージョンで制御されたファイルで，
           次の論理オペレーションを実行する．

そのため以下のように見えます．

     `C-x v' `M-x vc-next-action'
     現在のバッファに対応する，バージョンで制御
     されたファイルで，次の論理オペレーションを実行する．

この場合，テキストは，表を作成する`@table'，`@item'，そして
`@itemx'で書式化するべきです．

@code，@samp，@var，そして`---'
...............................

   * コマンド名を含め，Lispシンボルの周りに`@code'を使用してください．
     例えば，以下のようにします．

          主な関数は@code{vc-next-action}で，...

   * `s'の様な文字を`@code'の直後に置くことを避けてください．その
     ような文字は醜くなります．

   * メタ変数の周りに`@var'を使用してください．それらの周りに，山カッコ
     を書かないでください．

   * 長いダッシュ`---'を示すため，続いている三つのハイフンを使用してくだ
     さい．TeXは，これらを長いダッシュとして植字し，Infoフォーマッタは，三
     つのハイフンを二つに削減します．

引用外部のピリオド
..................

句読点が引用の部分でない場合は，ピリオドとその他の句読点を引用の_外
側_に置いてください．この実行は，合州国の出版の慣習に反しますが，読者は
引用の内容と文節全体との区別が可能となります．

  例えば，終りの引用符の外側にピリオドを文に続けて書くべきです．

     Evidently, `au' is an abbreviation for ``author''.

`au'は，`author.'(単語に続くピリオドと一緒)の省略として提供さ
れて_いません_．

新しい用語の紹介
................

   *
     新しい用語を知らない読者が，それを内容から理解できるように紹介してくださ
     い．または，用語の定義を書いてください．

     例えば，以下で用語"check in"，"register"，そして"delta"はすべて，
     初めて現われます．例文を理解できるように書き換えるべきです．

          The major function assists you in checking in a file to your
          version control system and registering successive sets of
          changes to it as deltas.

   *
     読者が既に意味を知っていることを期待すべきではなく，この文節から意味を学
     ぶことを期待していることを示すため，`@dfn'コマンドを紹介している単
     語の周りに使用してください．

  設計された特別な文脈(つまりカッコの中)以外で，`@pxref'を絶対に使用
しないでください．カッコの内部で，閉じ弓カッコの直後に閉じカッコを使用し
ます．一つのフォーマッタは自動的に句読点を挿入し，もう一つはそうしません．
これは，印刷物とInfoファイルで出力は正しく見えますが，それはコマンドがカッ
コの中で使用されるときだけだということを意味します．

シェルからの呼び出し
....................

Emacs，GCC，そして`gawk'のようなプログラムをシェルから呼び出すこと
が可能です．それぞれのプログラムのドキュメントには，このことを述べている
セクションを含むべきです．残念ながら，これらのセクションのノード名とタイ
トルが全く異なっている場合，ユーザがセクションを見つけるのは困難です．

  そのため，そのようなセクションは，`Invoking Emacs'のように，単語
`Invoking'で始まる文節で命名するという慣習があります．この方法で，ユーザ
はセクションを簡単に見つけることが可能になります．(1) (*note
Tips-Footnote-1::)

ANSI Cの構文
............

C関数の呼び出しの慣習を記述するため`@example'を使用するとき，以下
のようにANSI C構文を使用してください．

     void dld_init (char *@var{path});

そしてそれに続く引数では，再び`@var'で強調されている同じ引数名で引
数の値を参照してください．

  以下のような，古いスタイルを避けてください．

     #include <dld.h>

     dld_init (path)
     char *path;

また，関数がヘッダファイルで宣言されていることを示すだけのため，宣言の上
に`#include'を書くことを避けるのが最善です．その方法では，関数宣言
の近くに`#include'があるという間違った印象を与えるかもしれません．
ヘッダファイルに宣言があることを明示的に宣言する，またはより良いものとし
て，関数を記述しているセクションの始めで，関数グループのために使用されて
いるヘッダファイルに名前をつけるかのどちらかにしてください．

悪い例
......

避けるべき悪い書き方の例のいくつかは以下のようになります．

  この例で，" ... you must `@dfn'{check in} the new
version."と言っています．それで，より良くことが運びます．

     When you are done editing the file, you must perform a
     `@dfn'{check in}.

  以下の例では，"... makes a unified interface such as VC mode
possible."と言っています．

     SCCS, RCS and other version-control systems all perform similar
     functions in broadly similar ways (it is this resemblance which
     makes a unified control mode like this possible).

  そして，この例では，`it'が何を参照しているのか指定すべきです．

     If you are working with other people, it assists in coordinating
     everyone's changes so they do not step on each other.

終りに...
.........

   * `X'をギリシャの`chi'のように，名前`Bach'の最後の発音のようにTeX
     を発音してください．しかし，Texinfoは`speck'のように"teckinfo"と発音し
     てください．

   * `@bye'の後のTexinfoファイルの終りに，独自の注釈を書いてください．
     フォーマッタは`@bye'の後のテキストを処理しません．それは，テキスト
     が`@ignore' ... `@end ignore'の内側にあるのと同じです．


File: texinfo-ja.info,  Node: Tips-Footnotes,  Up: Tips

  (1) 訳注:日本語 ではどうするべきかは知りません．


File: texinfo-ja.info,  Node: Sample Texinfo Files,  Next: Include Files,  Prev: Tips,  Up: Top

Appendix C Texinfoファイルの見本
********************************

最初の例は，最初の章(*note Short Sample::)からのもので，以下はその全体を
コメント無しにしています．二番目は，GNUのマニュアルで使用される完全なテ
キストを含んでいます．

* Menu:

* Short Sample Texinfo File::
* GNU Sample Texts::
* Verbatim Copying License::
* All-permissive Copying License::


File: texinfo-ja.info,  Node: Short Sample Texinfo File,  Next: GNU Sample Texts,  Up: Sample Texinfo Files

C.1 短い例
==========

コメントの無い完全なTexinfoファイルの短い見本は以下のようになります．最
初の章でコメント付きのこのファイルを見ることが可能です．*Note Short
Sample::.

  概略:`makeinfo'プログラムは，以下のようなTexinfoソースファイルを
InfoファイルやHTMLファイルに変換します．そして，TeXは印刷されたマニュ
アルに植字します．


     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

     @copying
     This is a short example of a complete Texinfo file.

     Copyright (C) 2002 Free Software Foundation, Inc.
     @end copying

     @titlepage
     @title Sample Title
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @c Output the table of the contents at the beginning.
     @contents

     @ifnottex
     @node Top
     @top GNU Sample

     @insertcopying
     @end ifnottex

     @menu
     * First Chapter::    The first chapter is the
                           only chapter in this sample.
     * Index::            Complete index.
     @end menu


     @node First Chapter
     @chapter First Chapter

     @cindex chapter, first

     This is the first chapter.
     @cindex index entry, another

     Here is a numbered list.

     @enumerate
     @item
     This is the first item.

     @item
     This is the second item.
     @end enumerate


     @node Index
     @unnumbered Index

     @printindex cp

     @bye


File: texinfo-ja.info,  Node: GNU Sample Texts,  Next: Verbatim Copying License,  Prev: Short Sample Texinfo File,  Up: Sample Texinfo Files

C.2 GNUの見本のテキスト
=======================

以下はGNUマニュアルで使用されるべき完全なテキストを用いたTexinfoドキュメ
ントの見本です．

法的なテキストと同様に，GNUシステムがマニュアルに影響を与える要素の数の
実際の例として提供しています．これら個別のすべての要素に慣れていなくても
心配しないでください．それらは要求されているわけではなく，完全な良いマニュ
アルではそれ無しで書かれているはずです．多くのマニュアルにはきっと(おそ
らく)利点となるので，それでも以下には含めています．

  Texinfoファイルの最小限の例は*Note Short Sample::.
最小限の例の完全な説 明は，*Note Beginning a File::.

  以下は例の注意事項です．

   * `$Id:'コメントは，CVSのため(*note Overview:
     (cvs)Top.)，またはRCS(rcsintro(1)を参照してください)のバージョン
     コントロールシステムのためで，それは以下のような文字列に展開されます．
          $Id: texinfo-ja.texi,v 1.1 2003/01/04 10:43:13 futoshi Exp $
     (これはマニュアルだけでなく，バージョンコントロールを使用するすべてのソー
     スで役に立ちます．ドキュメントのバージョンを完全に明確に引用したい場合，
     `@copying'のテキストに`$Id:'コメントを含めたいかもしれません．)

   * `@include'コマンドの`version.texi'は，Automakeで自動的に管理
     されます(*note Introduction: (automake)Top.)．それは，他
     で使用されている`VERSION'と`UPDATED'の値を設定します．配布物で
     Automakeを使用しておらず，Emacsは使用している場合，time-stamp.el
     パッケー ジが役に立つことが分かるでしょう(*note Time Stamps:
     (emacs)Time Stamps.)．

   * `@syncodeindex'コマンドでは，読者が索引項目を探し易いようにするた
     め，可能な場合は推奨されている一つの索引だけを使用するように考えます．

   * `@dircategory'は，Infoディレクトリを構築するためのものです．推奨さ
     れる様々なカテゴリの名前がある，*Note Installing Dir Entries::.

   *
     `Invoking'ノードはGNUの標準で，該当するプログラムのコマンドラインの使用
     方法についての基本的な情報を見つけたいユーザの役に立ちます．*Note
     Manual Structure Details: (standards)Manual Structure Details.

   * マニュアルが数ページの長さでない限り，GNUのマニュアルにGNU Free
     Documentation
     Licenseの項目を含めることは最善です．もちろんこの見本はそ
     れより短いのですが，従来からそうしているためFDLを含めています．
     `fdl.texi'ファイルは，GNUのマシン，Texinfo，そしてその他のGNUの配布
     物で利用可能です．

     FDLは，特定の条件の下でそれ自身を省略するために提供されていますが，その
     場合，ここで与えられてテキストを編集する必要があります．*Note GNU
     Free Documentation License::.

   *
     マニュアルに不変のセクションがある場合(もう一度，それ自身のライセンスを
     詳細に見てください)，これに対応して変更することを忘れないでください．

   *
     個人的な見解，感情，または体験を表現するドキュメントに対しては，FDLでは
     なく，文字通りそのままのコピーを許可するライセンスを使用する方が適切でしょ
     う．*Note Verbatim Copying License::.


  見本のドキュメントは以下のようになります．

     \input texinfo    @c -*-texinfo-*-
     @comment $Id: texinfo-ja.texi,v 1.1 2003/01/04 10:43:13 futoshi Exp $
     @comment %**start of header
     @setfilename sample.info
     @include version.texi
     @settitle GNU Sample @value{VERSION}
     @syncodeindex pg cp
     @comment %**end of header
     @copying
     This manual is for GNU Sample
     (version @value{VERSION}, @value{UPDATED}),
     which is an example in the Texinfo documentation.

     Copyright @copyright{} 2002 Free Software Foundation, Inc.

     @quotation
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1 or
     any later version published by the Free Software Foundation; with no
     Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
     and with the Back-Cover Texts as in (a) below.  A copy of the
     license is included in the section entitled ``GNU Free Documentation
     License.''

     (a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
     this GNU Manual, like GNU software.  Copies published by the Free
     Software Foundation raise funds for GNU development.''
     @end quotation
     @end copying

     @dircategory Texinfo documentation system
     @direntry
     * sample: (sample)Invoking sample.
     @end direntry

     @titlepage
     @title GNU Sample
     @subtitle for version @value{VERSION}, @value{UPDATED}
     @author A.U. Thor (@email{bug-texinfo@@gnu.org})
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage

     @contents

     @ifnottex
     @node Top
     @top GNU Sample

     @insertcopying
     @end ifnottex

     @menu
     * Invoking sample::
     * Copying This Manual::
     * Index::
     @end menu


     @node Invoking sample
     @chapter Invoking sample

     @pindex sample
     @cindex invoking @command{sample}

     This is a sample manual.  There is no sample program to
     invoke, but if there was, you could see its basic usage
     and command line options here.


     @node Copying This Manual
     @appendix Copying This Manual

     @menu
     * GNU Free Documentation License::  License for copying this manual.
     @end menu

     @include fdl.texi


     @node Index
     @unnumbered Index

     @printindex cp

     @bye


File: texinfo-ja.info,  Node: Verbatim Copying License,  Next: All-permissive Copying License,  Prev: GNU Sample Texts,  Up: Sample Texinfo Files

C.3 文字通りそのままのコピーライセンス
======================================

ソフトウェアのマニュアルとその他のドキュメントに対し，フリープログラムが
変更されたとき，ドキュメントも同様に更新することが可能になるように，自由
に再配布し更新する許可を与えるライセンスを使用することは重要です．

言い替えると，個人的な見解，感情，そして経験を表現するドキュメントに対し
ては，文字通りそのままのコピーだけを許可するライセンスを使用する方がより
適切でしょう．

字通りそのままのコピーだけを許可するようなライセンスの見本のテキストは以
下のようになります．これはライセンステキスト自身です．完全な見本のドキュ
メントは前のセクションを参照してください．


@copying
This document is a sample for allowing verbatim copying only.

Copyright @copyright{} 2002 Free Software Foundation, Inc.

@quotation
Permission is granted to make and distribute verbatim copies
of this entire document without royalty provided the
copyright notice and this permission notice are preserved.
@end quotation
@end copying


File: texinfo-ja.info,  Node: All-permissive Copying License,  Prev: Verbatim Copying License,  Up: Sample Texinfo Files

C.4 全く寛大なコピーライセンス
==============================

ソフトウェアのマニュアルとその他のドキュメントに対し，フリープログラムが
変更されたとき，ドキュメントも同様に更新することが可能になるように，自由
に再配布し更新する許可を与えるライセンスを使用することは重要です．

言い替えると，小さなサポートファイル，(300行以下の)短いマニュアル，そし
て(READMEファイル，INSTALLファイル等の)ラフなドキュメントに対しては，完
全なFDLは過剰でしょう．それらには単純にすべてを許可するライセンスを使用
することが可能です．

すべてを許可するようなライセンスの見本のテキストは以下のようになります．
これはライセンステキスト自身です．完全な見本のドキュメントは前のセクショ
ンを参照してください．

     Copyright (C) 2002 Free Software Foundation, Inc.

     Copying and distribution of this file, with or without modification,
     are permitted in any medium without royalty provided the copyright
     notice and this notice are preserved.


File: texinfo-ja.info,  Node: Include Files,  Next: Headings,  Prev: Sample Texinfo Files,  Up: Top

Appendix D インクルードファイル
*******************************

TeXやInfo書式化コマンドが，Texinfoファイルの`@include'コマンド
を見つけたとき，それはコマンドで名指しされたファイルの内容を処理し，作成
されているDVIやInfoファイルに組み入れます．インクルードファイルからの索
引項目は，出力ファイルの索引に組み入れられます．

インクルードファイルでは，便利な小さい部分の収集物として，単一な大きなド
キュメントを保持します．

* Menu:

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                 menus when using included files.
* Include File Requirements::   What `texinfo-multiple-files-update' expects.
* Sample Include File::         A sample outer file with included files
                                 within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                 has changed over time.


File: texinfo-ja.info,  Node: Using Include Files,  Next: texinfo-multiple-files-update,  Prev: Include Files,  Up: Include Files

D.1 インクルードファイルの使用方法
==================================

他のファイルをTexinfoファイルにインクルードするため，`@include'コ
マンドを行の最初に書き，同じ行にインクルードするファイル名を続けてくださ
い．例えば以下のようにします．

     @include buffers.texi

インクルードファイルは，単に，全体をインクルードするのを期待する，または，
"外部の(outer)"Texinfoファイルにあるテキストの一部にすべきです。それ
は，Texinfoファイルの標準的な始めと終りを含めるべきではありません．特に，
インクルードファイルを，`\input texinfo'と述べている行から始めるべ
きではありません．そうする場合，その文節は出力ファイルにそのまま挿入され
ます．同様に，インクルードファイルを`@bye'コマンドで終えるべきでは
ありません．`@bye'以降は全く書式化されません．

  過去に，インクルードファイルの最初に`@setfilename'行を書くことが要
求されていましたが，もはやそうでははありません．今では，そのような行を書
くかどうかは重要ではありません．`@setfilename'行がインクルードファ
イルに存在する場合，それは無視されます．

  慣習的に，インクルードファイルは，`@chapter'行が続く`@node'
行で始めます．それぞれのインクルードファイルは一つの章です．これで，通常
のノードとメニューを作成更新する，ノードポインタとメニューをインクルード
ファイルに作成するコマンドの使用が容易になります．しかし，単純なEmacsの
ノードとメニューを作成更新するコマンドは，複数のTexnfoファイルでは動作し
ません．このためそれらのコマンドを，インクルードファイルで始まる
`@node'行の`Next'，`Previous'，そして`Up'ポインタを補充するために
使用することは不可能です．また，ファイル全体のマスターメニューを作成する
通常のコマンドも使用不可能です．メニューと`Next'，`Previous'，そして`Up'
ポインタを手で挿入するか，GNU Emacs Texinfoモードのコマンド，
`texinfo-multiple-files-update'を使用する必要があり，それは
`@include'ファイルに対し設計されています．


File: texinfo-ja.info,  Node: texinfo-multiple-files-update,  Next: Include File Requirements,  Prev: Using Include Files,  Up: Include Files

D.2 `texinfo-multiple-files-update'
===================================

GNU Emacs Texinfoモードは，`texinfo-multiple-files-update'コマンド
を提供しています．このコマンドは，インクルードファイルの`Next'，
`Previous'，そして`Up'ポインタを，外部や全体的なTexinfoファイルに対する
ものと同様に作成更新し，それは外部ファイルのメインメニューを作成更新しま
す．オプションの引数での呼び出しに依存して，コマンドはインクルードファイ
ルやそれら全ての最初の`@node'行のポインタのみを更新します．

`M-x texinfo-multiple-files-update'
     引数無しでの呼び出し．

        -
          外部や全体的なTexnfoファイルでインクルードされる，それぞれのファイルの最
          初の`@node'行の，`Next'，`Previous'，そして`Up'ポインタの作成と更
          新．

        -
          外部や全体的なファイルの`Top'レベルのノードポインタの作成と更新．

        - 外部ファイルのメインメニューの作成と更新．

`C-u M-x texinfo-multiple-files-update'
     前置引数として`C-u'で呼び出し．

        -
          それぞれのインクルードファイルの，最初の`@node'行のポインタの作成
          と更新．

        - 外部ファイルの`Top'レベルノードポインタの作成と更新．

        -
          外部ファイルのマスターメニューの作成と挿入．マスターメニューは，全てのイ
          ンクルードファイルの全てのメニューから作成されます．

`C-u 8 M-x texinfo-multiple-files-update'
     `C-u 8'のような，数字の引数での呼び出し．

        -
          全てのインクルードファイルの，*全ての*，`Next'，`Previous'，そし
          て`Up'ポインタの作成と更新．

        - 全てのインクルードファイルの*全ての*メニューの作成と更新．

        -
          外部や全体的なファイルの`Top'レベルノードポインタの作成と更新．

        -
          外部ファイルのマスターメニューの作成．これは，一つのファイルでの引数を持
          つ`texinfo-master-menu'の呼び出しに似ています．

  対話的な使用での前置引数の使用時の注意:通常の前置引数`C-u'を用い
ると，`texinfo-multiple-files-update'コマンドはマスターメニューを挿
入します．`C-u 8'のような数字の前置引数を用いると，コマンドは
*全ての*ファイルの*全ての*ポインタとメニューを更新し，マス
ターメニューを更新します．


File: texinfo-ja.info,  Node: Include File Requirements,  Next: Sample Include File,  Prev: texinfo-multiple-files-update,  Up: Include Files

D.3 インクルードファイルの必要条件
==================================

`texinfo-multiple-files-update'コマンドの使用を計画している場合，そ
の中でインクルードファイルをリストアップしている外部のTexinfoファイルは，
Texinfoファイルの最初と最後の部分と，インクルードファイルをリストアップ
している`@include'コマンド以外，何も含めるべきではありません．それ
には索引さえ含めるべきではなく，それはインクルードファイル自身にリストアッ
プすべきです．

さらに，それぞれのインクルードファイルは，正確に一つの最上位のノード(慣
習的に，`@chapter'またはそれと同等のもの)を含む必要があり，このノー
ドはインクルードファイルの最初のノードにする必要があります．さらに，それ
ぞれのインクルードファイルの中の，それぞれのこれらの最上位レベルのノード
は，ファイル構造で同じ階層レベルにする必要があります．通常，それぞれ
`@chapter'，`@appendix'，または`@unnumbered'にします．
このため，それぞれのインクルードファイルは，一つのかつ唯一の，章や同等の
レベルのノードを含みます．

  外部ファイルは_一つの_ノード，`Top'ノードのみを含みます．それは，単
一の`Top'ノードの他の，あらゆるノードを含むべきではありません．
`texinfo-multiple-files-update'コマンドは，それらを処理しません．


File: texinfo-ja.info,  Node: Sample Include File,  Next: Include Files Evolution,  Prev: Include File Requirements,  Up: Include Files

D.4 `@include'を用いたファイルの見本
====================================

メインまたはマスターメニューを挿入する
`texinfo-multiple-files-update'を実行する前の，その中に
`@include'ファイルを用いた外部のTexinfoファイルの完全な例は以下の
ようになります．

     \input texinfo @c -*-texinfo-*-
     @setfilename  include-example.info
     @settitle Include Example

     @setchapternewpage odd
     @titlepage
     @sp 12
     @center @titlefont{Include Example}
     @sp 2
     @center by Whom Ever

     @page
     @vskip 0pt plus 1filll
     Copyright @copyright{} 2002 Free Software Foundation, Inc.
     @end titlepage

     @ifinfo
     @node Top, First, , (dir)
     @top Master Menu
     @end ifinfo

     @include foo.texinfo
     @include bar.texinfo
     @include concept-index.texinfo

     @summarycontents
     @contents

     @bye

  `foo.texinfo'のようなインクルードファイルは，以下のようになります．

     @node First, Second, , Top
     @chapter First Chapter

     Contents of first chapter ...

  完全な内容の`concept-index.texinfo'は，このように簡単になります．

     @node Concept Index
     @unnumbered Concept Index

     @printindex cp

  `The GNU Emacs Lisp Reference Manual'の外部のTexinfoソースファイル
は，`elisp.texi'という名前です．外部ファイルは，417項目の外部ファイ
ルと，41の`@include'リストを含んでいます．


File: texinfo-ja.info,  Node: Include Files Evolution,  Prev: Sample Include File,  Up: Include Files

D.5 インクルードファイルの進化
==============================

Infoが最初に作成されたとき，それは一つのサブジェクトに多くの小さなInfoファ
イルを作成することが慣習的でした．それぞれのInfoファイルは，その独自の
Texinfoファイルから書式化されました．この慣習は，情報が欲しいとき，大き
なInfoファイル全体を保つためにEmacsが大きなバッファを作成する必要がない
ことを意味します．その代わり，探している特定の情報を含む小さなInfoファイ
ルに対して，Emacsはちょうど十分なメモリを確保していました．

一つのファイルから他への参照は，ノード名同様，ファイル名で参照されていま
した．(*Note Referring to Other Info Files: Other Info Files.  また，
*Note `@xref' with Four and Five Arguments: Four and Five
Arguments.を参照してください．)

インクルードファイルは主に，単一の大きな印刷されたマニュアルを，複数のよ
り小さなInfoファイルから作成する方法として設計されました．印刷されたマニュ
アルでは，全ての参照は同じドキュメントにあり，それでTeXは自動的に参照
ページ数を決定可能でした．Info書式化コマンドは，つながった索引を作成する
ためのみにインクルードファイルを使用していました．それぞれの個別の
Texinfoファイルは，個別のInfoに書式化する必要がありました．(それゆえ，そ
れぞれ独自の`@setfilename'行が必要でした．)

しかし，現在大きなファイルは自動的に分割されるので，それはもはや小さいま
まにする必要がありません．

  最近，複数のTexinfoファイルは，`The GNU Emacs Lisp Reference
Manual'のような大きなドキュメントのためと，複数の異なる人々がドキュメン
トの異なるセクションを同時に書くプロジェクトのための使用がほとんどです．

  さらにInfo書式化コマンドは，必要な場合より小さく分割される単一の大きな
Infoファイルを作成するため，`@include'コマンドで動作するように拡張
されています．これは，異なるTexinfoファイルを名指しせずにメニューや相互
参照を書くことが可能だということを意味します．


File: texinfo-ja.info,  Node: Headings,  Next: Catching Mistakes,  Prev: Include Files,  Up: Top

Appendix E ページ見出し
***********************

ほとんどの印刷されたマニュアルには，タイトルと著作権のページ以外の全ての
ページの上側に見出しがあります．フッタを含むマニュアルもあります．(見出
しとフッタはInfoでは意味がなく，それにはページが付いていないためです．)

* Menu:

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.


File: texinfo-ja.info,  Node: Headings Introduced,  Next: Heading Format,  Prev: Headings,  Up: Headings

Headings Introduced
===================

見出しの導入
============

Texinfoは，それぞれの紙の片側に印刷されるマニュアルと，紙の両面に印刷さ
れるマニュアルに対して，標準的なページ見出しの書式を提供しています．通常
はこれらの書式を使用しますが，希望があれば独自の書式を指定することも可能
です．

更に，章を新しいページで始めるか，前の章と同じページに続けるかを指定する
ことが可能です．そして，章を新しいページで始める場合，奇数番号のページか
ら始めるように指定することが可能です．

慣習的に，本は紙の両面に印刷されます．本を開いたときは，右側のページが奇
数番号で，章は右側のページから始まります -- 前にある左側のページは必要
があれば空白のままになります．しかし，報告書は片面に印刷され，前の章が終っ
た直後に改ページされて章を開始することが多くなっています．短い情報的な報
告書では，全く新しいページで章を開始すること滅多に無く，小量の空白をテキ
ストの前に置くことで分離されています．

  `@setchapternewpage'コマンドで，章を新しいページで始めるかどうかと，
標準的な見出しの書式の一つを使用するかどうかを制御します．Texinfoには，
独自の見出しとフッタの書式を生成するために使用可能な見出しとフッタのコマ
ンドがいくつかあります．

Texinfoでは，見出しとフッタはページの上側と下側の単一行です．複数行の見
出しとフッタを作成することは不可能です．それぞれのヘッダとフッタ行は三つ
の部分に分けられます．左側の部分，真中の部分，そして右側の部分です．あら
ゆる部分または行全体は，空白のままにしてもかまいません．ヘッダとフッタ行
の左の部分にあたるテキストは左寄せになります．真中の部分のテキストは中央
揃えされます．そして右の部分のテキストは右寄せになります．


File: texinfo-ja.info,  Node: Heading Format,  Next: Heading Choice,  Prev: Headings Introduced,  Up: Headings

E.1 標準的な見出しの書式
========================

Texinfoは二つの標準的な見出しの書式を提供していて，一つは紙のそれぞれの
ページの片面に印刷されたマニュアルに対するもので，もう一つは紙の両面に印
刷されたマニュアルに対するものです．

デフォルトではTexinfoファイルのフッタは指定されず，フッタは空白のままで
す．

片面印刷の標準的な書式は，左側の部分に章の名前を含み，真中の部分が空白で，
右側の部分がページ番号となっているヘッダから成り立ちます．

  片面ページは以下のようになります．

       _______________________
      |                       |
      | chapter   page number |
      |                       |
      | Start of text ...     |
      | ...                   |
      |                       |

両面印刷の標準的な書式はページ番号が偶数か奇数かに依存します．慣習では，
偶数番号のページは左側，奇数番号のページは右側になります．(TeXは，左
右の余白の幅を調整します．通常は，その幅で正しいのですが，両面印刷のとき
はページが正しく結びつけられているか調べた方が良いでしょう -- プリンタ
によっては，奇数ページの余白より右側の余白が大きくなる偶数ページで出力を
生成するものもあります．)

標準的な両面の書式では，左側(偶数番号)のページの左側の部分はページ番号を
含み，真中の部分は空白で，右側の部分は(`@settitle'コマンドで指定さ
れた)タイトルを含みます．右側(奇数番号)のページの左側の部分は章の名前を
含み，真中の部分は空白で，右側の部分はページ番号を含みます．

  両側に開いた本の二ページは，以下のようになります．

       _______________________     _______________________
      |                       |   |                       |
      | page number     title |   | chapter   page number |
      |                       |   |                       |
      | Start of text ...     |   | More  text ...        |
      | ...                   |   | ...                   |
      |                       |   |                       |

章の名前は，単語"Chapter"(1) (*note Heading
Format-Footnote-1::)，章の番号，そしてコロンが前置されます．これで，マニュアルの
現在の場所を記録し追跡することがより簡単になります．


File: texinfo-ja.info,  Node: Heading Format-Footnotes,  Up: Heading Format

  (1) 訳注:これは`txi-??.tex'で変更 可能です．


File: texinfo-ja.info,  Node: Heading Choice,  Next: Custom Headings,  Prev: Heading Format,  Up: Headings

E.2 見出しの形式の指定
======================

TeXは，`@end titlepage'コマンドに至るまで，標準的なTexinfoファ
イルに対しページ見出しの生成を開始しません．このため，タイトルと著作権の
ページは番号が付きません．`@end titlepage'コマンドは，
`@titlepage'セクションの前にある`@setchapternewpage'コマンド
で指定された標準的な書式によって，TeXにページ見出しの生成を開始させま
す．

  可能性は四つあります．

`@setchapternewpage'コマンド無し
     章を新しいページで開始する片面見出しの書式をTeXに指定します．これは，
     `@setchapternewpage on'と同じです．

`@setchapternewpage on'
     章を新しいページで開始する片面見出しの書式を指定します．

`@setchapternewpage off'
     新しい章を，前の章のページの最後と同じページで，いくらか縦方向の空白を開
     けてTeXが開始します．また，TeXは片面ページで植字します．
     (`@headings double'コマンドでヘッダの書式を優先することが可能です．
     *Note The `@headings' Command: headings on
     off.を参照してください．)

`@setchapternewpage odd'
     章を新しいページで開始する両面の書式を指定します．

Texinfoには`@setchapternewpage even'コマンドはありません．


File: texinfo-ja.info,  Node: Custom Headings,  Prev: Heading Choice,  Up: Headings

E.3 独自の見出しの作成方法
==========================

Texinfoで提供される標準的な見出しを使用したり，独自のものを指定したりす
ることが可能です．デフォルトではTexinfoにはフッタが無いので，指定した場
合，主なテキストに対して利用可能なページサイズがわずかに減少します．

  Texinfoは見出しとフッタを指定する六つのコマンドを提供します．
   * `@everyheading'と`@everyfooting'は，偶数と奇数の番号のページ
     の両方に，同じページヘッダとフッタを生成します．

   * `@evenheading'と`@evenfooting'コマンドは，偶数番号(左側)のペー
     ジにヘッダとフッタを生成します．

   * `@oddheading'と`@oddfooting'コマンドは，奇数番号(右側)のペー
     ジにヘッダとフッタを生成します．

  Texinfoファイルの`@end titlepage'コマンド直後に，カスタムの見出し
指定を書いてください．前もって定義している見出しコマンドを，独自の指定を
定義する前に`@headings off'コマンドで中止する必要があります．

偶数と奇数の番号のページの両方の全てのヘッダに，章の名前を左側に，ページ
番号を真中に，日付を右側に置くようにTeXに伝える方法は以下のようになり
ます．

     @headings off
     @everyheading @thischapter @| @thispage @| @today{}

真中の部分と左の部分，そして右の部分と真中の部分を，部分同士の間に
`@|'を挿入して分離する必要があります．そうしない場合，指定コマンド
は，一つのテキストの終りの部分と次の始めの部分の位置を伝えることができま
せん．

  それぞれの部分には，テキストや@-コマンドを含めることが可能です．本体の
ページの，通常の段落にある部分のようにテキストは印刷されます．@-コマン
ドはページ番号，日付，章の名前，または何にでも，それ自身が置換されます．

  六つの見出しとフッタのコマンドには以下のものがあります．

`@everyheading LEFT @| CENTER @| RIGHT'
`@everyfooting LEFT @| CENTER @| RIGHT'
     `every'コマンドは，偶数と奇数の番号のページ両方の書式を指定します．これ
     らのコマンドは，それぞれの紙の片面に印刷されるドキュメントや，対称なヘッ
     ダとフッタにしたいドキュメントに対するものです．

`@evenheading LEFT @| CENTER @| RIGHT'
`@oddheading  LEFT @| CENTER @| RIGHT'
`@evenfooting LEFT @| CENTER @| RIGHT'
`@oddfooting  LEFT @| CENTER @| RIGHT'
     `even'と`odd'コマンドは，偶数番号のページと奇数番号のページの書式を指定
     します．これらのコマンドは，本と，それぞれの紙の両面に印刷されるマニュア
     ルに対するものです．

  章とセクションの名前とページ番号を供給するため，`@this...'シリー
ズの@-コマンドを使用してください．見出しフッタの，左揃え，中央揃え，右
揃えの中や，`@iftex'と`@end iftex'コマンドの間の部分以外の
Texinfoファイルで，`@this...'コマンドを使用することも可能です．

  `@this...'コマンドは以下のようになります．

`@thispage'
     現在のページ番号を展開します．

`@thischaptername'
     現在の章の名前を展開します．

`@thischapter'
     現在の章の番号と名前を，書式`Chapter 1: Title'に展開します．

`@thistitle'
     ドキュメントの名前を`@settitle'で指定されているものに展開します．

`@thisfile'
     `@include'ファイルに対してのみです．現在の`@include'ファイル
     の名前に展開します．現在のTexinfoソースファイルが`@include'ファイ
     ルではない場合，このコマンドには効果がありません．`@include'ファイ
     ルではない場合，このコマンドは現在のTexinfoソースファイルの名前を提供
     _しません_．( `@include'ファイルの詳細は，*Note Include Files::.)

`@today{}'コマンドも使用可能で，それは現在の日付を`1 Jan 1900'の
書式で展開します． 

その他の@-コマンドとテキストは，ページの本体に書かれているかのようにヘッ
ダとフッタに印刷されます．それは，特にドラフトを書いているとき，テキスト
を組み入れることに役立ちます．

     @headings off
     @everyheading @emph{Draft!} @| @thispage @| @thischapter
     @everyfooting @| @| Version: 0.27: @today{}

  余りに長いタイトルへの注意:
それらは他のヘッダやフッタの部分に重なり，隠
してしまう可能性があります．


File: texinfo-ja.info,  Node: Catching Mistakes,  Next: Refilling Paragraphs,  Prev: Headings,  Up: Top

Appendix F 書式化の失敗
***********************

ドキュメントの内容のミス以外に，Texinfoで犯すミスは二種類あるはずです．
@-コマンドでミスを犯し，ノードと章の構造でミスを犯します．

Emacsには@-コマンドのミスを捕らえる二つのツールと，構造のミスを捕らえる
二つの方法があります．

  @-コマンドの問題を見つけるため，問題の有る領域でTeXや領域の書式化コ
マンドを実行することが可能です．これらのコマンドを，書いているときにそれ
ぞれの領域で本当に実行することが可能です．

  ノードと章の構造の問題を見つけるため，`C-c C-s'
(`texinfo-show-structure')に関連する`occur'コマンドを使用する
ことが可能で，そして，`M-x Info-validate'を使用することが可能です．

* Menu:

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.


File: texinfo-ja.info,  Node: makeinfo Preferred,  Next: Debugging with Info,  Prev: Catching Mistakes,  Up: Catching Mistakes

`makeinfo' Find Errors
======================

`makeinfo'が見つけるエラー
==========================

  `makeinfo'プログラムはエラーを捕らえそれらを報告する優れた仕事を行
います -- `texinfo-format-region'や`texinfo-format-buffer'よ
り遥かに優れています．さらに，自動的にノードポインタとメニューを作成更新
する様々な機能は，ヒューマンエラーの発生の多くを取り除きます．

ポインタとメニューを作成したり挿入したりする更新コマンドを，できる限り使
用してください．そして，`makeinfo'(または，Texinfoモードの表現の
`makeinfo-region'と`makeinfo-buffer')を，ファイルを書式化した
り他のエラーを調べるために使用してください．これは，Texinfoで仕事をする
ための最善の方法です．しかし，`makeinfo'を使用できない，または，問
題が大変難問な場合，この付録で記述されているツールを使用したいと思うかも
しれません．


File: texinfo-ja.info,  Node: Debugging with Info,  Next: Debugging with TeX,  Prev: makeinfo Preferred,  Up: Catching Mistakes

F.1 Infoの書式化でエラーを捕らえる
==================================

Texinfoファイルの一部を書いた後，領域の書式化が正確かどうかを見るために，
`texinfo-format-region'や`makeinfo-region'コマンドを使用するこ
とが可能です．

  しかしほとんどの場合，とある理由で`makeinfo-region'コマンドが使えな
いためにこのセクションを読んでいることでしょう．それゆえ，このセクション
の残りは，`texinfo-format-region'の使用を想定します．

  @-コマンドでミスを犯した場合，`texinfo-format-region'はエラー時ま
たはその後で処理を停止し，エラーメッセージを表示します．エラーが発生した
バッファを見るために，`*Info Region*'バッファに切替えてください．カー
ソルはエラーの位置の後にあります．また，エラーが発生した(または，より正
確にはそれが検出された)後，テキストは書式化されません．

  例えば偶然，`@end menu'の代わりに最後に`s'が付いたコマンド `@end
menus'でメニューを終了した場合，以下のようなエラーメッセージ
を得るでしょう．

     @end menus is not handled by texinfo

カーソルはバッファ内の，エラーが発生した場所やそこからそう遠くない場所で
止まります．バッファは以下のようになります．

     ---------- Buffer: *Info Region* ----------
     * Menu:

     * Using texinfo-show-structure::  How to use
                                      `texinfo-show-structure'
                                      to catch mistakes.
     * Running Info-Validate::         How to check for
                                      unreferenced nodes.
     @end menus
     -!-
     ---------- Buffer: *Info Region* ----------

  `texinfo-format-region'コマンドは，ちょっと変わったエラーメッセージ
を提供することもあります．例えば，書式化で相互参照の追跡で失敗したとしま
す．

     (@xref{Catching Mistakes, for more info.)

この場合，`texinfo-format-region'は，足りない閉じカッコを検出してい
ますが，メッセージは，`Unbalanced braces'ではなく`Unbalanced
parentheses'になります．これは，書式化コマンドが弓カッコの不一致を，それ
があたかもカッコであるかのように探すためです．

  `texinfo-format-region'はミスの検出に失敗するときもあります．例えば，
以下では，閉じカッコと閉じ弓カッコが置き換わっています．

     (@xref{Catching Mistakes), for more info.}

書式化では以下を生成します．
     (*Note for more info.: Catching Mistakes)

  このエラーを検出する唯一の方法は，以下のように参照を実現することです．

     (*Note Catching Mistakes::, for more info.)

  ついでに，Infoでこのノードを読んでいて，`f <RET>'
(`Info-follow-reference')を入力した場合，以下のエラーメッセージを生
成するでしょう．

     No such node: "Catching Mistakes) The only way ...

これは，Infoがエラーの例を，このノードの最初の相互参照として提供するため
で，Infoの`f'コマンドの直後に<RET>を入力した場合，Infoは参照ノー
ドに行こうと試みるでしょう．`f catch <TAB> <RET>'と入力した
場合，Infoは正確に書かれている例のノード名を認知し，`Catching Mistakes'
ノードへ連れて行くでしょう．(これを試みる場合，`l'(`Info-last')
を入力し，`Catching Mistakes'に戻ることができます．)


File: texinfo-ja.info,  Node: Debugging with TeX,  Next: Using texinfo-show-structure,  Prev: Debugging with Info,  Up: Catching Mistakes

F.2 TeX書式化でエラーを捕らえる
===============================

TeXでファイルを書式化しているときにミスを捕らえることも可能です．

  通常，`texinfo-format-buffer'は，TeXより有意義なエラーメッセージ
を表示するときもあるので，同じファイルで`texinfo-format-buffer'(や，
それより良い`makeinfo-buffer')を実行後にこうしたいと思うことでしょ
う．(*Note Debugging with Info::, for more information.)

  例えば，TexinfoファイルでTeXを実行した時の一部を以下に示します．

     ---------- Buffer: texinfo.texi ----------
     name of the Texinfo file as an extension.  The
     @samp{??} are `wildcards' that cause the shell to
     substitute all the raw index files.  (@xref{sorting
     indices, for more information about sorting
     indices.)@refill
     ---------- Buffer: texinfo.texi ----------

(相互参照に閉じカッコがありません．)TeXは停止した後，以下の出力を生成
します．

     ---------- Buffer: *tex-shell* ----------
     Runaway argument?
     {sorting indices, for more information about sorting
     indices.) @refill @ETC.
     ! Paragraph ended before @xref was complete.
     <to be read again>
                       @par
     l.27

     ?
     ---------- Buffer: *tex-shell* ----------

  この状況では，TeXは正確で理解可能なエラーメッセージを生成しました．

     Paragraph ended before @xref was complete.

`@par'は，Texinfoと関係が無いTeXの内部コマンドです．`l.27'
は，TeXが問題をTexinfoファイルの27行で検出したという意味です．
`?'は，この状況でTeXが使用するプロンプトです．

  残念ながらTeXは常に役に立つ訳ではなく，間違ったものを発見するために，
本当にシャーロック ホームズになる必要があります．

いずれにせよ，このような問題に遭遇した場合，三つのことを行うことが可能で
す．

  1. `?'プロンプトで<RET>を入力することで，実行を続けこのエラーを無
     視するようTeXに伝えることが可能です．

  2. `?'プロンプトで`r <RET>'を入力することで，実行を続け，最善
     の方法として全てのエラーを無視するようTeXに伝えることが可能です．

     これは最善のことが多くなっています．しかし，用心してください．その結果が
     ファイルの残り全体となるように考え，一つのエラーが更なるエラーメッセージ
     として連続して生成される可能性が有ります．そのようなエラーメッセージの雪
     崩を生成している時にTeXを止めるため，`C-c'(または，Emacsの内部シェ
     ルで実行している場合は`C-c C-c')を入力してください．

  3. `?'プロンプトで`x <RET>'を入力することで，この実行を停止す
     るようTeXに伝えることが可能です．

  Emacs内部でTeXを実行している場合，シェルバッファとTeXが`?'プ
ロンプトを出している行を切替える必要があります．

  TeXは，問題があってもエラーメッセージを生成せずにファイルを書式化する
ときもあります．これは通常，コマンドが終っていないがTeXは処理を続けら
れる場合に生じます．例えば，`@end itemize'コマンドで項目分けリスト
を終了するのに失敗した場合，TeXは印刷出力可能なDVIファイルを書き出し
ます．TeXが与えるエラーメッセージは幾分不可思議な以下のようなコメント
だけです．

     (@end occurred inside a group at level 1)

しかし，DVIファイルを印刷した場合，項目分けリストに続くファイルのテキス
トが，項目分けリストの最後の項目の部分であるかのように全部字下げされてい
ることが分かります．エラーメッセージは，TeXがファイルで`@end'
コマンドを見つかることを期待していたが，必要とされる場所を特定できなかっ
たということです．

  エラーが見つけにくいと悪名高いもう一つのソースは，`@end group'コマ
ンドが無いことです．理解できないエラーで困惑している場合，最初に `@end
group'コマンドが無いものを探してください．

  Texinfoファイルにヘッダが足りない場合，TeXは実行の最初で停止し，以下
のような出力を表示します．`*'はTeXが入力を待っていることを示して
います．

     This is TeX, Version 3.14159 (Web2c 7.0)
     (test.texinfo [1])
     *

この状況では，アスタリスクの後で`\end <RET>'を単純に入力してくだ
さい．そして，Texinfoファイルのヘッダ行を書き，もう一度TeXコマンドを
実行してください．(バックスラッシュ`\'の使用に注意してください．
TeXは`@'の代わりに`\'を使用します．そしてこの状況では，
Texinfoではなく直接TeXで作業しているのです．)


File: texinfo-ja.info,  Node: Using texinfo-show-structure,  Next: Using occur,  Prev: Debugging with TeX,  Up: Catching Mistakes

F.3 `texinfo-show-structure'の使用
==================================

Texinfoファイルの，ノード，章，セクション，そしてサブセクションの記録追
跡は，常に簡単なわけではありません．これは，他人が書いたTexinfoファイル
を修正追加している場合は，特に真になります．

  GNU EmacsのTexinfoモードでは，`texinfo-show-structure'コマンドは，
構造を指定する@-コマンドで始まる全ての行をリストアップします．
`@chapter'，`@section'，`@appendix'等です．引数(対話的
な場合は，前置引数`C-u')を用いることで，コマンドは`@node'
行も表示します．`texinfo-show-structure'コマンドは，Texinfoモードで
`C-c C-s'に，デフォルトでバインドされています．

  行は，`*Occur*'と呼ばれるバッファに，階層レベルで字下げされて表示さ
れます．例えば以下は，このマニュアルでの`texinfo-show-structure'を
実行したものが生成したものの一部になります．

     Lines matching "^@\\(chapter \\|sect\\|subs\\|subh\\|
     unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
     in buffer texinfo.texi.
     ...
     4177:@chapter Nodes
     4198:    @heading Two Paths
     4231:    @section Node and Menu Illustration
     4337:    @section The @code{@@node} Command
     4393:        @subheading Choosing Node and Pointer Names
     4417:        @subsection How to Write an @code{@@node} Line
     4469:        @subsection @code{@@node} Line Tips
     ...

  これは，`texinfo.txi'ファイルの4337，4393，そして4417行が，それぞれ
`@section'，`@subheading'，そして`@subsection'で始まっ
ていることを告げています．カーソルを`*Occur*'ウィンドウに移動した場
合，Texinfoファイルで対応する場所にジャンプするため，行の一つにカーソル
を置き，`C-c C-c'コマンド(`occur-mode-goto-occurrence')を使用す
ることで可能となります．`occur-mode-goto-occurrence'に関する詳細は，
*Note Using Occur: (emacs)Other Repeating Search.

  `*Occur*'ウィンドウの最初の行は，TEXINFO-HEADING-PATTERNで指
定された"正規表現(regular expression)"の記述です．この正規表現は，
`texinfo-show-structure'が探すパターンです．詳細は，*Note Using Regular
Expressions: (emacs)Regexps.

  `texinfo-show-structure'コマンドを呼び出すとき，Emacsはバッファ全体
の構造を表示します．バッファの一部のみ，例えば一つの章の構造を見たい場合，
領域をマークするため`C-x n n' (`narrow-to-region')コマンドを使
用してください．(*Note Narrowing: (emacs)Narrowing.)これ
は，上記の生成で使用された例の方法です．(再びバッファ全体を見るため，
`C-x n w' (`widen')を使用してください．)

  `C-u C-c C-s'と入力して，前置引数を用いて
`texinfo-show-structure'を呼び出す場合，`@chapter'，
`@section'のような@-サインコマンドで始まる行と同様に，
`@node'で始まる行をリストアップします．

  `*Occur*'ウィンドウのリストを見ることで，Texinfoファイルの構造を思
い出すことが可能です．そして，間違った名前のノードや飛ばしたセクションが
ある場合，ミスを修正することが可能です．


File: texinfo-ja.info,  Node: Using occur,  Next: Running Info-Validate,  Prev: Using texinfo-show-structure,  Up: Catching Mistakes

F.4 `occur'の使用
=================

`texinfo-show-structure'コマンドが，余りに多い情報を生成するときも
あります．おそらく，Texinfoファイルの全体的な構造を思い出したいとき，
`texinfo-show-structure'が生成した詳細なリストに圧倒されます．この
状況では，`occur'コマンドを直接使用することが可能です．こうするため，
以下のように入力します．

     M-x occur

その後で，"regexp"の形式で入力を促されたとき，一致させたいパターンの
正規表現を入力してください．(*Note Regular Expressions:
(emacs)Regexps.)`occur'コマンドは，バッファの現在のカー
ソル位置からバッファの終りまで作用します．バッファ全体で`occur'を実
行したい場合，カーソルをバッファの最初に置いてください．

  例えば，行の中に`@chapter'を含む全ての行を見たい場合，
`@chapter'を入力してください．これは章のリストを生成します．それは，
行の真中に`@chapter'がある文も全てリストアップします．

  単語`@chapter'で始まるこれらの行のみを見たい場合，`occur'で入
力を促されたとき，`^@chapter'を入力してください．単語や文節で終る
全ての行を見たい場合，例えば`catching mistakes$'のように，`$'
で単語の終りを終えてください．これは，同じ章やセクションの一部や，その理
由から同じ`Up'ポインタを持っている全てのノードを見たいとき役に立つはずで
す．

  詳細は，*Note Using Occur: (emacs)Other Repeating Search.


File: texinfo-ja.info,  Node: Running Info-Validate,  Prev: Using occur,  Up: Catching Mistakes

F.5 悪いノード参照を見つける
============================

あらゆる`Next'，`Previous'，`Up'やその他のノードポインタがノードを指し示
すことに失敗しているかどうかを調査するため，`Info-validate'を使用す
ることが可能です．このコマンドは，全てのノードポインタが存在するノードを
指し示していることを調べます．`Info-validate'コマンドは，Texinfoファ
イルではなくInfoファイルでのみ動作します．

  `makeinfo'プログラムは自動的にポインタの有効の調査を行うので，
`makeinfo'を使用している場合，`Info-validate'を使用する必要は
ありません．`makeinfo'が実行不可能で，その代わりに
`texinfo-format-region'や`texinfo-format-buffer'を使用している
場合や，スクラッチからInfoファイルを書く場合のみ，`Info-validate'を
使用する必要があります．

* Menu:

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.


File: texinfo-ja.info,  Node: Using Info-validate,  Next: Unsplit,  Prev: Running Info-Validate,  Up: Running Info-Validate

F.5.1 `Info-validate'の実行
---------------------------

`Info-validate'を使用するため，調査したいInfoファイルに移動し，以下
を入力してください．

     M-x Info-validate

`Info-validate'コマンドは大文字の`I'が要求されることに注意してくだ
さい．また，`Info-validate'を実行する前にタグ表を作成する必要がある
かもしれません．*Note Tagifying::.

  ファイルが有効な場合，"File appears valid"というメッセージを受け取りま
す．しかし，ノードを指し示さないポインタがある場合，`*problems in info
file*'と呼ばれるバッファにエラーメッセージが表示されます．

  例えば，`Info-validate'は，このマニュアルの最初のノードのみを含むテ
ストファイルで実行されたとします．メッセージの一つは以下のようになります．

     In node "Overview", invalid Next: Texinfo Mode

この意味は，`Overview'と呼ばれるノードに何も指し示さない`Next'ポイ
ンタがあるということを意味します(テストファイルには一つのノードしかない
ので，この場合はそうなります．)．

  さて，我々が`Texinfo Mode'という名のノードをテストケースに加えます
が，このノードの`Previous'を指定しないとします．そのとき我々は以下のよう
なエラーメッセージを得ます．

     In node "Texinfo Mode", should have Previous: Overview

これは，全ての`Next'ポインタは，戻るための(`Next'を示すノードにある)
`Previous'に一致すべきだからです．

  `Info-validate'は，全てのメニュー項目と相互参照が実際にノードを指し
示していることも調査します．

  `Info-validate'はタグ表が必要で，分割されたファイルでは動作しません．
(`texinfo-format-buffer'コマンドは，大きなファイルを自動的に分割し
ます．)大きなファイルで`Info-validate'を使用するため，Infoファイル
が分割されないように，引数を用いて`texinfo-format-buffer'を実行する
必要があります．そして，分割されていないファイルのためタグ表を作成する必
要があります．


File: texinfo-ja.info,  Node: Unsplit,  Next: Tagifying,  Prev: Using Info-validate,  Up: Running Info-Validate

F.5.2 分割されないファイルの作成
--------------------------------

`Info-validate'は，タグ表を持った単一のInfoファイルのでのみ実行可能
です．コマンドは，マスターファイルが分割されたとき生成されたサブファイル
では，間接的に動作しません．(70,000バイトかそれくらい以上の)大きなファイ
ルがある場合，間接的なサブファイルを生成しないような方法で
`texinfo-format-buffer'や`makeinfo-buffer'コマンドを実行する必
要があります．Infoファイルのためのタグ表も作成する必要があります．これを
行った後で`Info-validate'を実行し，悪い参照ノードを探すことが可能に
なります．

  第一段階は分割されないInfoファイルを作成することです．
`texinfo-format-buffer'がTexinfoファイルをより小さなInfoファイルに
分割することを避けるため，`M-x texinfo-format-buffer'コマンドに前置
引数を与えてください．

     C-u M-x texinfo-format-buffer

または，以下のようにします．

     C-u C-c C-e C-b

こうしたとき，Texinfoはファイルを分割せず，そのタグ表を生成しません．


File: texinfo-ja.info,  Node: Tagifying,  Next: Splitting,  Prev: Unsplit,  Up: Running Info-Validate

F.5.3 ファイルのタグ付け
------------------------

分割されていないInfoファイルを作成後，そのためのタグ表を作成する必要があ
ります．タグ付けしたいInfoファイルに移動し，以下を入力してください．

     M-x Info-tagify

(`Info-tagify'の大文字の`I'に注意してください．)これで，有効化
が可能なタグ表を持つInfoファイルを作成します．

  第三段階はInfoファイルを確認することです．

     M-x Info-validate

(`Info-validate'の大文字の`I'に注意してください．)簡単にいうと，
ステップは以下のようになります．

     C-u M-x texinfo-format-buffer
     M-x Info-tagify
     M-x Info-validate

  ノード構造を有効にした後，通常の方法で`texinfo-format-buffer'を再実
行し，そしてそれでタグ表を構築しファイルを自動的に分割する，または手動で
タグ表と分割されたファイルを作成することができます．


File: texinfo-ja.info,  Node: Splitting,  Prev: Tagifying,  Up: Running Info-Validate

F.5.4 ファイルを手動で分割
--------------------------

大きなファイルを分割したり，`texinfo-format-buffer'や
`makeinfo-buffer'コマンドで自動的にそれを行ったりすべきです．(一般
的に，書式化コマンドの一つでこの仕事を行います．*Note Creating an Info
File::.)

  分割されたファイルは，間接的なサブファイルと呼ばれています．

  Infoファイルはメモリを節約するため分割されます．小さなファイルでは，
Emacsは情報を保つため大きなバッファを作成しません．

Infoファイルが30ノード以上ある場合，そのためにタグ表も作成すべきです．タ
グ表作成の詳細は，*Note Using Info-validate::.
(また，通常タグ表は，書式
化コマンドで自動的に作成されます．手動で作業をした場合のみ，タグ表を作成
する必要があります．ほとんどの場合，`Info-validate'で作業した大きな
分割されていないファイルでこれを行います．)

タグ付けと分割を行いたいファイルに移動し，二つのコマンドを入力してくださ
い．

     M-x Info-tagify
     M-x Info-split

(`Info'の`I'が大文字であることに注意してください．)

  `Info-split'コマンドを使用するとき，バッファは間接的なサブファイル
を列挙する(小さな)Infoファイルに編集されます．このファイルは，移動した元
ファイルに保存されます．間接的なサブファイルは，元ファイルと同じディレク
トリに書き込まれ，元ファイル名に`-'と数字が追加されたファイル名にな
ります．

プライマリファイルはInfoファイルとして機能しますが，それはタグ表とサブファ
イルのディレクトリだけを含みます．


File: texinfo-ja.info,  Node: Refilling Paragraphs,  Next: Command Syntax,  Prev: Catching Mistakes,  Up: Top

Appendix G 段落の補充
*********************

`@refill'コマンドは補充し，オプションで段落の最初の行を字下げを行
ないます．(1) (*note Refilling
Paragraphs-Footnote-1::)`@refill'コマンドはもはや重要ではありませ
んがかつて必要だったので，我々はそれをここで記述します．多くの古い
Texinfoファイルで見ることになるでしょう．

  補充がない場合，長い@-構成物を含む段落は，フォーマッタが@-コマンドを削
除することで他の行より短くなるものもあるので，書式化後見栄えが悪くなりま
す．以前は，`texinfo-format-region'コマンドや
`texinfo-format-buffer'コマンドは，段落を自動的に補充しませんでした．
`@refill'コマンドを全ての段落の終りに，これらのフォーマッタがそれ
を補充するように書く必要がありました．(TeXと`makeinfo'の両方が，
常に段落を自動的に補充していました．)現在は，全てのInfoフォーマッタは補
充と字下げが必要なそれらの段落を自動的に補充し字下げします．

  `@refill'コマンドは，全ての他の処理が終了した_後_，
`texinfo-format-region'と`texinfo-format-buffer'にInfoファイル
の段落を補充させます．このため，`@*'や`@w{ ... }'を含
む段落では，補充の動作がこれら二つのコマンドに優先されるので，
`@refill'を使用することは不可能です．

  現在，`texinfo-format-region'と`texinfo-format-buffer'コマンド
は，`@refill'を補充が必要なそれぞれの段落に自動的に加えます．
`@*'や`@w{ ...}'を含む段落の終りに`@refill'
を加えないので，それらは補充も字下げもされません．


File: texinfo-ja.info,  Node: Refilling Paragraphs-Footnotes,  Up: Refilling Paragraphs

  (1) おそらくコマンドは，`@refillandindent'コマンド
と呼ばれるべきですが，`@refill'はより短く，名前は字下げが可能にな
る前に選ばれていました．


File: texinfo-ja.info,  Node: Command Syntax,  Next: Obtaining TeX,  Prev: Refilling Paragraphs,  Up: Top

Appendix H @-コマンドの構文
***************************

文字`@'は，特別なTexinfoコマンドを開始するために使用されます．(そ
れは，プレーンTeXに`\'があるのと同じ意味です．)Texinfoは四つの形
式の@-コマンドがあります．

1. アルファベットでないコマンド．
     これらのコマンドは，@に句読点やアルファベット以外の文字が続いたものから
     成り立ちます．アルファベットでないコマンドはほとんど，常に段落内のテキス
     トの一部で，全く引数をとりません．二文字(@ともう一文字)は，完全にそれ自
     身になります．カッコは続きません．アルファベットでないコマンドは以下のも
     のです．`@.'，`@:'，`@*'，`@SPACE'，
     `@TAB'，`@NL'，`@@'，`@{'，そして `@}'．

2. 引数をとらないアルファベットコマンド．
     これらのコマンドは，@で始まる，単語が続き，左右のカッコが続きます．これ
     らのコマンドは，ドキュメントに特別なシンボルを挿入します．それらに引数は
     必要ありません．例えば，`@dots{}' => `...'， `@equiv{}' =>
     `=='，`@TeX{}' => `TeX'，そして`@bullet{}' => `*'です．

3. カッコ内に引数が必要なアルファベットコマンド．
     これらのコマンドは，@で始まり，文字や単語が続き，カッコ内に引数が続きま
     す．例えば，コマンド`@dfn'は用語の紹介や使用の定義を示します．それ
     は以下のように使用されます．`Texinfoでは，@@-コマンドは
     @dfn{mark-up}コマンドです．'

4. 行全体を占有する，アルファベットコマンド．
     これらのコマンドは行全体を占有します．行を@で開始し，コマンドの名前(単
     語)が続きます．例えば，`@center'や`@cindex'です．引数が必要
     無い場合，単語は行の終りが続きます．引数がある場合，コマンド名とスペース
     で分けられています．カッコは使用しません．

このため，アルファベットコマンドは，異なる引数の構文を持つクラスに分類さ
れます．その名前の外見からコマンドが属するクラスは分かりませんが，コマン
ドの意味は分かります．コマンドがglyphを意味する場合，それはクラス2で引数
はいりません．それが，段落の部分としての他のテキストと一緒に使用されるコ
マンドを意味する場合，コマンドはクラス3でカッコ内に引数が続きます．それ
以外の場合，それはクラス4で，その引数として行の残りを使用します．

クラス3と4のコマンドが異なる構文を持っている目的は，Texinfoファイルを読
み易くし，GNU Emacsの段落と補充コマンドが正確に動作する助けとするためで
す．この規則に一つの例外があります．それは`@refill'コマンドで，そ
れは段落の終りで，最後のピリオドや句読点文字の直後に常に使用されます．
`@refill'は引数をとらず，カッコは要求され_ません_．
`@refill'は，行の最初に現われないので，Emacs 段落コマンドは決して
混乱しません．


File: texinfo-ja.info,  Node: Obtaining TeX,  Next: Copying This Manual,  Prev: Command Syntax,  Up: Top

Appendix I TeXの入手方法
************************

TeXは自由に再配布できます．anonymous ftpや物理媒体でUnixシステムのた
めのTeXを入手可能です．核となる材料は，Web2c TeX配布物から構成され
ます(`http://tug.org/web2c')．

  anonymous
ftpで取得するための説明とその他の利用可能な配布物の情報は以下
の通りです．
     `ftp://tug.org/tex/unixtex.ftp'
     `http://tug.org/unixtex.ftp'

  Free Software
Foundationは，Texinfoマニュアルの印刷に適したソースコード
CD-ROMでの核となる配布物を提供します．注文するために以下に連絡してくださ
い．

     Free Software Foundation, Inc.
     59 Temple Place Suite 330
     Boston, MA   02111-1307
     USA
     Telephone: +1-617-542-5942
     Fax: (including Japan) +1-617-542-2652
     Free Dial Fax (in Japan):
           0031-13-2473 (KDD)
           0066-3382-0158 (IDC)
     Electronic mail: `gnu@gnu.org'

  その他多くのTeX配布物が利用可能です．`http://tug.org/'を参照して
ください．


File: texinfo-ja.info,  Node: Copying This Manual,  Next: Command and Variable Index,  Prev: Obtaining TeX,  Up: Top

Appendix J このマニュアルのコピーに付いて
*****************************************

* Menu:

* GNU Free Documentation License::  License for copying this manual.


File: texinfo-ja.info,  Node: GNU Free Documentation License,  Up: Copying This Manual

J.1 GNU Free Documentation License
==================================

                        Version 1.1, March 2000

     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has less than five).

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications",
          preserve the section's title, and preserve in the section all
          the substance and tone of each of the contributor
          acknowledgments and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgments", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

J.1.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts
       being LIST.  A copy of the license is included in the section
       entitled ``GNU Free Documentation License''.

  If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

  If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: texinfo-ja.info,  Node: Command and Variable Index,  Next: Concept Index,  Prev: Copying This Manual,  Up: Top

コマンドと変数の索引
********************

これは，Emacs Lisp関数に関連して分類された全ての@-コマンドと，いくつか
の変数のリストです．リストを使いやすくするために，コマンドは`@'を
取り除いてリストアップされています．

 [index ]
* Menu:

* ! (end of sentence):                   Ending a Sentence.   (line   6)
* " (umlaut accent):                     Inserting Accents.   (line  13)
* ' (umlaut accent):                     Inserting Accents.   (line  13)
* (newline):                             Multiple Spaces.     (line   6)
* (space):                               Multiple Spaces.     (line   6)
* (tab):                                 Multiple Spaces.     (line   6)
* * (force line break):                  Line Breaks.         (line   6)
* , (cedilla accent):                    Inserting Accents.   (line  13)
* - (discretionary hyphen):              - and hyphenation.   (line   6)
* .  (end of sentence):                  Ending a Sentence.   (line   6)
* <colon> (suppress widening):           Not Ending a Sentence.
                                                              (line  14)
* = (macron accent):                     Inserting Accents.   (line  13)
* ? (end of sentence):                   Ending a Sentence.   (line   6)
* @ (literal @):                         Inserting An Atsign. (line   6)
* \ (literal \ in @math):                math.                (line  28)
* \emergencystretch:                     Overfull hboxes.     (line  29)
* \input (raw TeX startup):              Minimum.             (line  23)
* \mag (raw TeX magnification):          Cropmarks and Magnification.
                                                              (line  22)
* ^ (circumflex accent):                 Inserting Accents.   (line  13)
* ` (grave accent):                      Inserting Accents.   (line  13)
* AA:                                    Inserting Accents.   (line  33)
* aa:                                    Inserting Accents.   (line  33)
* acronym:                               acronym.             (line   6)
* ae:                                    Inserting Accents.   (line  33)
* AE:                                    Inserting Accents.   (line  33)
* afourlatex:                            A4 Paper.            (line  23)
* afourpaper:                            A4 Paper.            (line   6)
* afourwide:                             A4 Paper.            (line  23)
* alias:                                 alias.               (line   6)
* anchor:                                anchor.              (line   6)
* appendix:                              unnumbered & appendix.
                                                              (line   6)
* appendixsec:                           unnumberedsec appendixsec heading.
                                                              (line   6)
* appendixsection:                       unnumberedsec appendixsec heading.
                                                              (line  17)
* appendixsubsec:                        unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* appendixsubsubsec:                     subsubsection.       (line   6)
* apply:                                 Sample Function Definition.
                                                              (line  13)
* asis:                                  table.               (line  17)
* author:                                title subtitle author.
                                                              (line   6)
* b (bold font):                         Fonts.               (line   6)
* buffer-end:                            Def Cmd Template.    (line  71)
* bullet:                                bullet.              (line   6)
* bye <1>:                               Ending a File.       (line   6)
* bye:                                   File End.            (line   6)
* c (comment):                           Comments.            (line   6)
* cartouche:                             cartouche.           (line   6)
* center:                                titlefont center sp. (line   6)
* centerchap:                            chapter.             (line  24)
* chapheading:                           majorheading & chapheading.
                                                              (line   6)
* chapter:                               chapter.             (line   6)
* cindex:                                Indexing Commands.   (line  53)
* cite:                                  cite.                (line   6)
* code:                                  code.                (line   6)
* columnfractions:                       Multitable Column Widths.
                                                              (line  11)
* command:                               command.             (line   6)
* comment:                               Comments.            (line   6)
* contents:                              Contents.            (line   6)
* copying:                               copying.             (line   6)
* copyright <1>:                         copyright symbol.    (line   6)
* copyright:                             copying.             (line  36)
* cropmarks:                             Cropmarks and Magnification.
                                                              (line   6)
* defcodeindex:                          New Indices.         (line   6)
* defcv:                                 Abstract Objects.    (line  16)
* deffn:                                 Functions Commands.  (line   9)
* deffnx:                                deffnx.              (line   6)
* defindex:                              New Indices.         (line   6)
* definfoenclose:                        definfoenclose.      (line   6)
* defivar:                               Abstract Objects.    (line  36)
* defmac:                                Functions Commands.  (line  62)
* defmethod:                             Abstract Objects.    (line 101)
* defop:                                 Abstract Objects.    (line  54)
* defopt:                                Variables Commands.  (line  54)
* defspec:                               Functions Commands.  (line  66)
* deftp:                                 Data Types.          (line   8)
* deftypefn:                             Typed Functions.     (line   9)
* deftypefun:                            Typed Functions.     (line  69)
* deftypeivar:                           Abstract Objects.    (line  48)
* deftypeop:                             Abstract Objects.    (line  94)
* deftypevar:                            Typed Variables.     (line  39)
* deftypevr:                             Typed Variables.     (line  11)
* defun:                                 Functions Commands.  (line  39)
* defvar:                                Variables Commands.  (line  36)
* defvr:                                 Variables Commands.  (line   8)
* dfn:                                   dfn.                 (line   6)
* dircategory:                           Installing Dir Entries.
                                                              (line  11)
* direntry:                              Installing Dir Entries.
                                                              (line  11)
* display:                               display.             (line   6)
* dmn:                                   dmn.                 (line   6)
* documentdescription:                   documentdescription. (line   6)
* documentencoding:                      documentencoding.    (line   6)
* documentlanguage:                      documentlanguage.    (line   6)
* dotaccent:                             Inserting Accents.   (line  13)
* dotless:                               Inserting Accents.   (line  33)
* dots:                                  dots.                (line   6)
* email:                                 email.               (line   6)
* emph:                                  emph & strong.       (line   6)
* end <1>:                               Quotations and Examples.
                                                              (line  12)
* end:                                   Introducing Lists.   (line  22)
* end titlepage:                         end titlepage.       (line   6)
* enddots:                               dots.                (line   6)
* enumerate:                             enumerate.           (line   6)
* env:                                   env.                 (line   6)
* equiv:                                 Equivalence.         (line   6)
* error:                                 Error Glyph.         (line   6)
* evenfooting:                           Custom Headings.     (line  48)
* evenheading:                           Custom Headings.     (line  48)
* everyfooting:                          Custom Headings.     (line  42)
* everyheading:                          Custom Headings.     (line  42)
* example:                               example.             (line   6)
* exampleindent:                         exampleindent.       (line   6)
* exclamdown:                            Inserting Accents.   (line  33)
* exdent:                                exdent.              (line   6)
* expansion:                             expansion.           (line   6)
* file:                                  file.                (line   6)
* filll TeX dimension:                   Copyright.           (line  11)
* finalout:                              Overfull hboxes.     (line  42)
* findex:                                Indexing Commands.   (line  56)
* flushleft:                             flushleft & flushright.
                                                              (line   6)
* flushright:                            flushleft & flushright.
                                                              (line   6)
* foobar:                                Optional Arguments.  (line  21)
* footnote:                              Footnotes.           (line   6)
* footnotestyle:                         Footnote Styles.     (line  42)
* format:                                format.              (line   6)
* forward-word:                          Def Cmd Template.    (line  29)
* ftable:                                ftable vtable.       (line   6)
* group:                                 group.               (line   6)
* H (Hungarian umlaut accent):           Inserting Accents.   (line  13)
* hbox:                                  Overfull hboxes.     (line  13)
* heading:                               unnumberedsec appendixsec heading.
                                                              (line   6)
* headings:                              headings on off.     (line   6)
* headword:                              definfoenclose.      (line  55)
* html:                                  Raw Formatter Commands.
                                                              (line  36)
* hyphenation:                           - and hyphenation.   (line   6)
* i (italic font):                       Fonts.               (line   6)
* ifclear:                               ifset ifclear.       (line  46)
* ifhtml <1>:                            Conditional Commands.
                                                              (line  16)
* ifhtml:                                Raw Formatter Commands.
                                                              (line  36)
* ifinfo:                                Conditional Commands.
                                                              (line  10)
* ifnothtml:                             Conditional Not Commands.
                                                              (line   6)
* ifnotinfo:                             Conditional Not Commands.
                                                              (line   6)
* ifnotplaintext:                        Conditional Not Commands.
                                                              (line   6)
* ifnottex:                              Conditional Not Commands.
                                                              (line   6)
* ifnotxml:                              Conditional Not Commands.
                                                              (line   6)
* ifplaintext:                           Conditional Commands.
                                                              (line  16)
* ifset:                                 ifset ifclear.       (line   6)
* iftex:                                 Conditional Commands.
                                                              (line  16)
* ifxml <1>:                             Conditional Commands.
                                                              (line  16)
* ifxml:                                 Raw Formatter Commands.
                                                              (line  41)
* ignore:                                Comments.            (line  19)
* image:                                 Images.              (line   6)
* include:                               Using Include Files. (line   6)
* Info-validate:                         Running Info-Validate.
                                                              (line   6)
* inforef:                               inforef.             (line   6)
* insertcopying:                         insertcopying.       (line   6)
* isearch-backward:                      deffnx.              (line  22)
* isearch-forward:                       deffnx.              (line  21)
* item <1>:                              itemize.             (line  21)
* item <2>:                              Multitable Rows.     (line   6)
* item:                                  table.               (line  26)
* itemize:                               itemize.             (line   6)
* itemx:                                 itemx.               (line   6)
* kbd:                                   kbd.                 (line   6)
* kbdinputstyle:                         kbd.                 (line  20)
* key:                                   key.                 (line   6)
* kindex:                                Indexing Commands.   (line  62)
* L:                                     Inserting Accents.   (line  33)
* l:                                     Inserting Accents.   (line  33)
* lisp:                                  lisp.                (line   6)
* lowersections:                         Raise/lower sections.
                                                              (line   6)
* macro:                                 Defining Macros.     (line   6)
* majorheading:                          majorheading & chapheading.
                                                              (line   6)
* makeinfo-buffer:                       makeinfo in Emacs.   (line  17)
* makeinfo-kill-job:                     makeinfo in Emacs.   (line  39)
* makeinfo-recenter-output-buffer:       makeinfo in Emacs.   (line  44)
* makeinfo-region:                       makeinfo in Emacs.   (line  13)
* math:                                  math.                (line   6)
* menu:                                  Menus.               (line   6)
* minus:                                 minus.               (line   6)
* multitable:                            Multi-column Tables. (line   6)
* need:                                  need.                (line   6)
* next-error:                            makeinfo in Emacs.   (line  29)
* node:                                  node.                (line   6)
* noindent:                              noindent.            (line   6)
* novalidate:                            Format with tex/texindex.
                                                              (line  85)
* O:                                     Inserting Accents.   (line  33)
* o:                                     Inserting Accents.   (line  33)
* occur:                                 Using occur.         (line   6)
* occur-mode-goto-occurrence:            Showing the Structure.
                                                              (line  22)
* oddfooting:                            Custom Headings.     (line  48)
* oddheading:                            Custom Headings.     (line  48)
* oe:                                    Inserting Accents.   (line  33)
* OE:                                    Inserting Accents.   (line  33)
* option:                                option.              (line   6)
* page:                                  page.                (line   6)
* page, within @titlepage:               titlepage.           (line  16)
* pagesizes:                             pagesizes.           (line   6)
* paragraphindent:                       paragraphindent.     (line   6)
* phoo:                                  definfoenclose.      (line  32)
* pindex:                                Indexing Commands.   (line  65)
* point:                                 Point Glyph.         (line   6)
* pounds:                                pounds.              (line   6)
* print:                                 Print Glyph.         (line   6)
* printindex:                            Printing Indices & Menus.
                                                              (line   6)
* pxref:                                 pxref.               (line   6)
* questiondown:                          Inserting Accents.   (line  33)
* quotation:                             quotation.           (line   6)
* r (Roman font):                        Fonts.               (line   6)
* raisesections:                         Raise/lower sections.
                                                              (line   6)
* ref:                                   ref.                 (line   6)
* refill:                                Refilling Paragraphs.
                                                              (line   6)
* result:                                result.              (line   6)
* ringaccent:                            Inserting Accents.   (line  13)
* rmacro:                                Defining Macros.     (line  42)
* samp:                                  samp.                (line   6)
* sc (small caps font):                  Smallcaps.           (line   6)
* section:                               section.             (line   6)
* setchapternewpage:                     setchapternewpage.   (line   6)
* setcontentsaftertitlepage:             Contents.            (line  47)
* setfilename:                           setfilename.         (line   6)
* setshortcontentsaftertitlepage:        Contents.            (line  47)
* settitle:                              settitle.            (line   6)
* shortcontents:                         Contents.            (line   6)
* shorttitlepage:                        titlepage.           (line  44)
* smallbook:                             smallbook.           (line   6)
* smalldisplay <1>:                      small.               (line   6)
* smalldisplay:                          display.             (line  16)
* smallexample:                          small.               (line   6)
* smallformat <1>:                       format.              (line  15)
* smallformat:                           small.               (line   6)
* smalllisp:                             small.               (line   6)
* sp (line spacing):                     sp.                  (line   6)
* sp (titlepage line spacing):           titlefont center sp. (line   6)
* ss:                                    Inserting Accents.   (line  33)
* strong:                                emph & strong.       (line   6)
* subheading:                            unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* subsection:                            subsection.          (line   6)
* subsubheading:                         subsubsection.       (line   6)
* subsubsection:                         subsubsection.       (line   6)
* subtitle:                              title subtitle author.
                                                              (line   6)
* summarycontents:                       Contents.            (line   6)
* syncodeindex:                          syncodeindex.        (line   8)
* synindex:                              synindex.            (line   6)
* t (typewriter font):                   Fonts.               (line   6)
* tab:                                   Multitable Rows.     (line   6)
* table:                                 Two-column Tables.   (line   6)
* tex:                                   Raw Formatter Commands.
                                                              (line  19)
* tex (command):                         tex.                 (line   6)
* texinfo-all-menus-update:              Updating Commands.   (line 103)
* texinfo-every-node-update:             Updating Commands.   (line  98)
* texinfo-format-buffer <1>:             Info Formatting.     (line  22)
* texinfo-format-buffer:                 texinfo-format commands.
                                                              (line   6)
* texinfo-format-region <1>:             texinfo-format commands.
                                                              (line   6)
* texinfo-format-region:                 Info Formatting.     (line  13)
* texinfo-indent-menu-description:       Other Updating Commands.
                                                              (line  43)
* texinfo-insert-@code:                  Inserting.           (line  15)
* texinfo-insert-@dfn:                   Inserting.           (line  19)
* texinfo-insert-@end:                   Inserting.           (line  23)
* texinfo-insert-@example:               Inserting.           (line  58)
* texinfo-insert-@item:                  Inserting.           (line  29)
* texinfo-insert-@kbd:                   Inserting.           (line  33)
* texinfo-insert-@node:                  Inserting.           (line  37)
* texinfo-insert-@noindent:              Inserting.           (line  42)
* texinfo-insert-@samp:                  Inserting.           (line  46)
* texinfo-insert-@table:                 Inserting.           (line  50)
* texinfo-insert-@var:                   Inserting.           (line  54)
* texinfo-insert-braces:                 Inserting.           (line  62)
* texinfo-insert-node-lines:             Other Updating Commands.
                                                              (line  10)
* texinfo-make-menu:                     Updating Commands.   (line  87)
* texinfo-master-menu:                   Updating Commands.   (line  52)
* texinfo-multiple-files-update:         texinfo-multiple-files-update.
                                                              (line   6)
* texinfo-multiple-files-update (in brief): Other Updating Commands.
                                                              (line  34)
* texinfo-sequential-node-update:        Other Updating Commands.
                                                              (line  51)
* texinfo-show-structure <1>:            Using texinfo-show-structure.
                                                              (line   6)
* texinfo-show-structure:                Showing the Structure.
                                                              (line  17)
* texinfo-start-menu-description:        Inserting.           (line  86)
* texinfo-tex-buffer:                    Printing.            (line  22)
* texinfo-tex-print:                     Printing.            (line  42)
* texinfo-tex-region:                    Printing.            (line  27)
* texinfo-update-node:                   Updating Commands.   (line  78)
* thischapter:                           Custom Headings.     (line  69)
* thischaptername:                       Custom Headings.     (line  66)
* thisfile:                              Custom Headings.     (line  75)
* thispage:                              Custom Headings.     (line  63)
* thistitle:                             Custom Headings.     (line  72)
* tie (unbreakable interword space):     tie.                 (line   6)
* tieaccent:                             Inserting Accents.   (line  13)
* tindex:                                Indexing Commands.   (line  68)
* title:                                 title subtitle author.
                                                              (line   6)
* titlefont:                             titlefont center sp. (line   6)
* titlepage:                             titlepage.           (line   6)
* today:                                 Custom Headings.     (line  83)
* top:                                   The Top Node.        (line  12)
* top (@-command):                       makeinfo top command.
                                                              (line   6)
* u (breve accent):                      Inserting Accents.   (line  13)
* ubaraccent:                            Inserting Accents.   (line  13)
* udotaccent:                            Inserting Accents.   (line  13)
* unmacro:                               Defining Macros.     (line  54)
* unnumbered:                            unnumbered & appendix.
                                                              (line   6)
* unnumberedsec:                         unnumberedsec appendixsec heading.
                                                              (line   6)
* unnumberedsubsec:                      unnumberedsubsec appendixsubsec subheading.
                                                              (line   6)
* unnumberedsubsubsec:                   subsubsection.       (line   6)
* up-list:                               Inserting.           (line  67)
* uref:                                  uref.                (line   6)
* url:                                   url.                 (line   6)
* v (check accent):                      Inserting Accents.   (line  13)
* value:                                 set value.           (line   6)
* var:                                   var.                 (line   6)
* verb:                                  verb.                (line   6)
* verbatim:                              verbatim.            (line   6)
* verbatiminclude:                       verbatiminclude.     (line   6)
* vindex:                                Indexing Commands.   (line  59)
* vskip TeX vertical skip:               Copyright.           (line  11)
* vtable:                                ftable vtable.       (line   6)
* w (prevent line break):                w.                   (line   6)
* xml:                                   Raw Formatter Commands.
                                                              (line  41)
* xref:                                  xref.                (line   3)
* { (literal {):                         Inserting Braces.    (line   6)
* } (literal }):                         Inserting Braces.    (line   6)
* ~ (tilde accent):                      Inserting Accents.   (line  13)

