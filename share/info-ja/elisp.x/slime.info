-*- coding: utf-8 -*-
これは slime.info、slime-ja.texi より makeinfo バージョン
4.8 によって作成されました。

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* SLIME: (slime.info). Emacsのためのより優れたLisp対話モード.
END-INFO-DIR-ENTRY


File: slime.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

SLIME
*****

SLIMEは、"Emacsのためのより優れたLisp対話モード(Superior
Lisp Interaction Mode for Emacs)"である。

SLIMEと同様に、このマニュアルも作成中である。これは、リリースしてい
ないバージョンのSLIMEを文書化している。

SLIMEに関する作業を行なったハッカーたちのリストは、*Note
Credits::。

* Menu:

* Introduction::
* Getting started::
* slime-mode::
* REPL::
* Debugger::
* Extras::
* Customization::
* Credits::

 --- The Detailed Node Listing ---

Getting started

* Platforms::
* Downloading::
* Installation::
* Running::

Downloading SLIME

* CVS::
* CVS Incantations::

Downloading from CVS

* CVS Incantations::

`slime-mode'

* User-interface conventions::
* Commands::
* Semantic indentation::
* Reader conditionals::

User-interface conventions

* Temporary buffers::
* Key bindings::
* inferior-lisp::

Commands

* Compilation::
* Finding definitions::
* Lisp Evaluation::
* Documentation::
* Programming Helpers::
* Recovery::
* Cross-reference::
* Inspector::
* Profiling::

REPL: the ``top level''

* REPL commands::
* Input Navigation::
* Shortcuts::

SLDB: the SLIME debugger

* Examining frames::
* Restarts::
* Frame Navigation::
* Miscellaneous::

Extras

* slime-autodoc-mode::
* Multiple connections::
* Typeout frames::

Customization

* Emacs-side customization::
* Lisp-side::

Emacs-side

* Hooks::

Lisp-side (Swank)

* Communication style::
* Other configurables::


File: slime.info,  Node: Introduction,  Next: Getting started,  Prev: Top,  Up: Top

1 Introduction
**************

SLIMEは、"Emacsのためのより優れたLisp対話モード(Superior
Lisp Interaction Mode for Emacs)"である。

   SLIMEは、Common
Lispでの対話的なプログラミングのための新たなサポー
トを用いてEmacsを拡張する。その機能は、標準の`lisp-mode'を補う
Emacsのマイナーモードである`slime-mode'を中心としている。
`lisp-mode'がLispのソースファイルの編集をサポートする一方で、
`slime-mode'はコンパイル、デバッグ、文書検索などに対して、動作中
のCommon
Lispプロセスとの対話のためのサポートを加える。

   `slime-mode'プログラミング環境は、Emacs本来のEmacs
Lisp環境の例に
従う。我々は、(ILISPのような)他の類似のシステムからの良いア
イディアや、いくつかの我々自身による新たなアイディアも含めている。

   SLIMEは二つの部分から構築されている: Emacs
Lispで書かれたユーザイン ターフェイスと、Common
Lispで書かれたサポート用のサーバプログラムであ
る。二つの部分はソケットを用いてともに接続されており、RPCの
ようなプロトコルを使って通信する。

   Lispサーバは主に移植可能なCommon
Lispで書かれている。必要な実装特有の
機能は、適切に定義されたインターフェイスによって指定され、それぞれの
Lispの実装に対して別々に実装されている。このことによって、SLIMEは容
易に移植可能となっている。


File: slime.info,  Node: Getting started,  Next: slime-mode,  Prev: Introduction,  Up: Top

2 Getting started
*****************

この章は、どのようにSLIMEを起動して動作させるかについて記述する。

* Menu:

* Platforms::
* Downloading::
* Installation::
* Running::


File: slime.info,  Node: Platforms,  Next: Downloading,  Prev: Getting started,  Up: Getting started

2.1 Supported Platforms
=======================

SLIMEは広範囲のオペレーティングシステムとLispの実装をサポートする。
SLIMEはUnixシステム、Mac OSX、そしてMicrosoft
Windows上で動作する。 GNU
Emacsのバージョン20と21、そしてXEmacsのバージョン21をサポートする。

サポートしているLispの実装は、大まかにもっとも良くサポートするものから
並べると以下の通りである:

   * CMU Common Lisp (CMUCL)

   * Steel Bank Common Lisp (SBCL)

   * OpenMCL

   * LispWorks

   * Allegro Common Lisp (ACL)

   * CLISP

   * Armed Bear Common Lisp (ABCL)

多くの機能は異なる実装上でも同じように動作するが、いくつかは変化しやす
い。これらは、コンパイラの注釈を置く際の正確さ、XREFのサポー
ト、そして("restart
frame"のような)上級のデバッガコマンド含んでいる。


File: slime.info,  Node: Downloading,  Next: Installation,  Prev: Platforms,  Up: Getting started

2.2 Downloading SLIME
=====================

リリースされたSLIMEのバージョンを用いるか、あるいは我々のCVSリポ
ジトリを直接アクセスするかを選択できる。我々のウェブサイトから、最新の
リリースされたバージョンをダウンロードできる:

   `http://www.common-lisp.net/project/slime/'

我々は、`slime-devel'メーリングリストに参加しているユーザはCVS
バージョンのコードを使うことを推奨する。

* Menu:

* CVS::
* CVS Incantations::


File: slime.info,  Node: CVS,  Next: CVS Incantations,  Prev: Downloading,  Up: Downloading

2.2.1 Downloading from CVS
--------------------------

SLIMEは`common-lisp.net'のCVSリポジトリから利用可能である。
あなたには、まさに最新のコードか、あるいは`FAIRLY-STABLE'というタ
グの付いたスナップショットのどちらかを用いる選択肢がある。

最新のバージョンは`FAIRLY-STABLE'バージョンよりも多くの機能をもち、
よりバグが少ない傾向があるが、大手術の間は不安定である可能性がある。経
験からお勧めできることとして、我々は、あなたが`slime-devel'メーリ
ングリストを追っているなら、最新版を用いる方がより幸せに暮らせるのでは
ないかと思う(我々は重要なハックを行なっているときには注を送信する)。そ
のメーリングリストを追っていない場合、あなたは最新のコードの状況がわか
らないだろうから、`FAIRLY-STABLE'を追うか、リリースされた版を用い
ることが安全な選択である。

CVSからチェックアウトする場合、忘れずに時おり`cvs
update'する
こと。改善は断続的にcommitされ、`FAIRLY-STABLE'タグは時とともに前
方へ移動する(ほぼ一月に一度)。

* Menu:

* CVS Incantations::


File: slime.info,  Node: CVS Incantations,  Prev: CVS,  Up: Downloading

2.2.2 CVS incantations
----------------------

SLIMEをダウンロードするには、最初にあなたの`CVSROOT'を設定して、
リポジトリにログインする。

     export CVSROOT=:pserver:anonymous@common-lisp.net:/project/slime/cvsroot
     cvs login
   _(パスワードは`anonymous')_

   最新版は以下のようにチェックアウトできる:
     cvs checkout slime

あるいは、`FAIRLY-STABLE'版は以下のようにチェックアウトできる:

     cvs checkout -rFAIRLY-STABLE slime

あなたが現在実行中のバージョンから何が新しくなったかを知りたい場合、リ
ポジトリの`ChangeLog'に対してローカル版をdiffすることができる:

     cvs diff -rHEAD ChangeLog      # or: -rFAIRLY-STABLE


File: slime.info,  Node: Installation,  Next: Running,  Prev: Downloading,  Up: Getting started

2.3 Installation
================

コマンド行から開始できるLispの実装を用いる場合、インストールはあなたの
`~/.emacs'の中に数行を加えるだけである:

     (setq inferior-lisp-program "_あなたのLispシステムへのパス_")
     (add-to-list 'load-path "_あなたの`slime'ディレクトリのパス_")
     (require 'slime)
     (slime-setup)

SLIMEを使おうとしている場合、我々はEmacsにILISPパッケージ
をロードしないことを勧める。そうすることはLispソースファイルに対するキ
ーマップに多くの余計なバインディングを加え、SLIMEによって起動された
Lispプロセスを混乱させたり、正しく動作しなくなるかもしれない。


File: slime.info,  Node: Running,  Prev: Installation,  Up: Getting started

2.4 Running SLIME
=================

SLIMEはEmacsコマンド`M-x
slime'で開始する。これはLispプロセスを
開始するために`inferior-lisp'パッケージを使い、("Swank"として知
られる)Lisp側のサーバをロードして起動し、EmacsとLispの間にソケット接続
を確立する。最後に、Lispの式を評価するために入力できるところにREPL
バッファが作られる。

この時点でSLIMEは動作しており、あなたは探検を始めることができる。


File: slime.info,  Node: slime-mode,  Next: REPL,  Prev: Getting started,  Up: Top

3 `slime-mode'
**************

SLIMEのコマンドは、Emacsの`lisp-mode'と結合して使われるマイナ
ーモードである`slime-mode'を通じて提供される。この章は、
`slime-mode'とそれに関係があるものについて記述する。

* Menu:

* User-interface conventions::
* Commands::
* Semantic indentation::
* Reader conditionals::


File: slime.info,  Node: User-interface conventions,  Next: Commands,  Prev: slime-mode,  Up: slime-mode

3.1 User-interface conventions
==============================

快適にSLIMEを使うためには、いくつかの"グローバルな"ユーザインター
フェイスの特徴を理解することが重要である。もっとも重要な原則はこの節に
記述されている。

* Menu:

* Temporary buffers::
* Key bindings::
* inferior-lisp::


File: slime.info,  Node: Temporary buffers,  Next: Key bindings,  Prev: User-interface conventions,  Up: User-interface conventions

3.1.1 Temporary buffers
-----------------------

いくつかのSLIMEのコマンドは、結果を表示するための一時的なバッファを
作る。通常は、これらのバッファは独特の特殊目的のメジャーモードをもつが、
ある種の慣習は全体を通して守られている。

一時的なバッファは`q'を押して消すことができる。これはそのバッファ
をkillして、ウィンドウをそのバッファが表示される前の状態に戻す。一時的
なバッファは`kill-buffer'のような通常のコマンドでもkillできるが、
その場合、以前のウィンドウの状態は戻らないだろう。

`RET'を押すと、"もっとも明白な有益なことがらを行なう"ことになっ
ている。たとえば、aproposバッファではその地点にあるシンボルの完全な記
述を印字し、XREFバッファではその地点を参照するためにソースコ
ードを表示する。この慣習は、aproposのリスト、コンパイル結果等のEmacs自
身のバッファに由来する。

Lispのシンボルを含んでいる一時的なバッファは、それら自身のあらゆる特別
なモードに加えて`slime-mode'を用いる。これは、シンボルの説明や関
数定義の調査などのために、通常のSLIMEコマンドを利用可能にする。


File: slime.info,  Node: Key bindings,  Next: inferior-lisp,  Prev: Temporary buffers,  Up: User-interface conventions

3.1.2 Key bindings
------------------

一般に、我々はキーバインディングをEmacsのスタイルと全体的に調和するよ
うにしている。我々は、いくぶん普通ではない我々独自の以下の規約ももって
いる:
三つのキーシーケンスを入力しているとき、最後のキーはコントロール
を押しながらでも押さなくても入力できる。たとえば、
`slime-describe-symbol'コマンドは`C-c C-d
d'にバインドされて いるが、`C-c C-d
C-d'とタイプすることでも動作する。三つのキー全て
に対してcontrolを押したままにすることを好む人々とそうでない人々がいる
ため、我々は単に両方のキーシーケンスをバインドする。そして、キーのプレ
フィックスを二つ用いればキーを使い果たしてしまう恐れはない。

この規則には一つの例外があり、おそらくあなたの足をすくうだろう。我々は
キーシーケンスのどんな場所でもけっして`C-h'をバインドしないので、
`C-c C-d C-h'は`C-c C-d
h'と同じことは行なわない。これは、
Emacsはプレフィックスをタイプして`C-h'を続けるとそのプレフィックス
で始まる全てのバインディングを表示するという組み込みのデフォルトをもつ
ので、`C-c C-d
C-h'は実際には全てのドキュメンテーションコマンドに
対するバインディングをリストするためである。この機能は大被害をもたらす
のにあまりにも役立ちすぎる!


File: slime.info,  Node: inferior-lisp,  Prev: Key bindings,  Up: User-interface conventions

3.1.3 `*inferior-lisp*' buffer
------------------------------

内部的には、SLIMEはLispプロセスを起動するために`inferior-lisp'
パッケージを用いる。これはいくつかのユーザの目に見える帰結をもたらすが、
いくつかは良いものであり、いくつかはそれほどでもないものである。混乱を
避けるためには、その相互作用を理解することが有益である。

バッファ`*inferior-lisp*'は、Lispプロセスの自身のトップレベルを含
む。このLispへの直接のアクセスはトラブルシューティングに有益であり、あ
る程度のSLIMEの統合が`inferior-slime-mode'を用いて利用可能であ
る。しかし、通常の使用では、我々は、完全に統合されたSLIME
REPLを
使い`*inferior-lisp*'バッファを無視することを勧める。

`inferior-lisp'の残念な特性は、いくつかの独自のコマンドを直接
`lisp-mode'キーマップに挿入するので、容易には無効にできないことで
ある。このことはLispソースバッファを若干精神分裂病的にしており、
SLIMEと`inferior-lisp'のコマンドの両方がキーにバインドされてば
らばらに動作することになっている。

SLIMEは多くのキーバインディングを無効にするので、実用上は、
`inferior-lisp'コマンドをうっかり用いることはないだろう。
`*inferior-lisp*'バッファをポップアップするコマンドを見つけた場合、
そのコマンドはSLIMEに属するものではなく、おそらく我々の同等物を調べ
るべきだろう。


File: slime.info,  Node: Commands,  Next: Semantic indentation,  Prev: User-interface conventions,  Up: slime-mode

3.2 Commands
============

* Menu:

* Compilation::
* Finding definitions::
* Lisp Evaluation::
* Documentation::
* Programming Helpers::
* Recovery::
* Cross-reference::
* Inspector::
* Profiling::


File: slime.info,  Node: Compilation,  Next: Finding definitions,  Prev: Commands,  Up: Commands

3.2.1 Compilation commands
--------------------------

SLIMEは関数、ファイル、そしてパッケージをコンパイルするための特別の
コマンドをもっている。特別な部分は、Lispコンパイラによって提供される注
や警告が横取りされ、直接にLispソースバッファ内の対応する式の上に注釈づ
けられるところである(これが何を意味するかを試してみてほしい)。

`C-c C-k'
     `slime-compile-and-load-file'
     カレントバッファのソースファイルをコンパイルしてロードする。

`C-c M-k'
     `slime-compile-file'
     カレントバッファのソースファイルをコンパイルする(ロードは行なわない)。

`C-c C-c'
     `slime-compile-defun'
     その地点のトップレベルのフォームをコンパイルする。


注釈はソースフォームへの下線として示される。注釈に関連するコンパイラの
メッセージは、そのテキストの上にマウスを置くか、あるいは下のセレクショ
ンコマンドを用いるかのどちらかで読める。

`M-n'
`M-p'
     `slime-next-note, slime-previous-note'
     これらのコマンドはコンパイラの注釈の間のポイントを移動し、新たな注釈を
     表示する。

`C-c M-c'
     `slime-remove-notes'
     そのバッファから全ての注釈を取り除く。



File: slime.info,  Node: Finding definitions,  Next: Lisp Evaluation,  Prev: Compilation,  Up: Commands

3.2.2 Finding definitions ("Meta-Point").
-----------------------------------------

よく知られている`M-.'コマンドが提供されている。総称関数に対して、
このコマンドは全てのメソッドを発見し、いくつかのシステムでは
(`DEFSTRUCT'定義まで構造体のアクセサをトレースするような)その他の
素晴らしいことを行なう。

`M-.'
     `slime-edit-definition'
     その地点のシンボルの定義の場所に行く。

`M-,'
     `slime-pop-find-definition-stack'
     `M-.'で見つかった定義から戻る。これは、`M-.'が複数回用いられる
     と、複数の段階の逆戻りを行なう。



File: slime.info,  Node: Lisp Evaluation,  Next: Documentation,  Prev: Finding definitions,  Up: Commands

3.2.3 Lisp Evaluation
---------------------

これらのコマンドのそれぞれは、異なった方法でLispの式を評価する。デフォ
ルトでは、メッセージの中に結果を表示するが、前置引数を指定すると、結果
は代わりにREPLの中に印字されるようになる。

`C-M-x'
     `slime-eval-defun'
     トップレベルのフォームを評価する。

`C-c C-e'
     `slime-eval-last-expression'
     ポイントの前の式を評価する。

`C-c C-p'
     `slime-pprint-eval-last-expression'
     ポイントの前の式を評価し、その結果をプリティプリントする。

`C-c C-r'
     `slime-eval-region'
     そのリージョンを評価する。

`C-c :'
     `slime-interactive-eval'
     ミニバッファから読み込んだ式を評価する。

`M-x slime-scratch'
     `*slime-scratch*'バッファを作る。このバッファでは、Emacsの
     `*scratch*'バッファのように、Lispの式を入力して`C-j'を用いて
     評価できる。



File: slime.info,  Node: Documentation,  Next: Programming Helpers,  Prev: Lisp Evaluation,  Up: Commands

3.2.4 Documentation
-------------------

SLIMEのオンライン文書コマンドはEmacs
Lispの例に従う。それらのコマン
ドは全て共通のプレフィックス`C-c
C-d'を共有し、最後のキーを修正あ
るいは非修正にできるようになっている(*Note Key
bindings::)。

`C-c C-d d'
     `slime-describe-symbol'
     ポイントがある位置のシンボルを説明する。

`C-c C-d a'
     `slime-apropos'
     apropos検索。部分文字列のマッチや存在する文書文字列についてLispシンボ
     ル名を検索する。デフォルトでは、全てのパッケージの外部シンボルが検索さ
     れる。前置引数を用いると、特定のパッケージを選択したり、エキスポートさ
     れていないシンボルを含めるかどうかを選択できる。

`C-c C-d z'
     `slime-apropos-all'
     `slime-apropos'と同様だが、デフォルトで内部シンボルも含める。

`C-c C-d p'
     `slime-apropos-package'
     あるパッケージ内の全てのシンボルのaproposの結果を示す。このコマンドは
     高いレベルでパッケージをブラウズするためのものである。パッケージ名補完
     を用いると、初歩的なSmalltalkっぽいイメージブラウザとしても機能する。

`C-c C-d h'
     `slime-hyperspec-lookup'
     `Common Lisp
     Hyperspec'の中で、ポイントがある地点のシンボルを調べ
     る。これは、適切な節を表示するために、よく知られている
     `hyperspec.el'をウェブブラウザの中で用いる。HyperspecはWeb上か
     `common-lisp-hyperspec-root'の中のどちらかで見つかり、ブラウザは
     `browse-url-browser-function'によって選ばれる。

`C-c C-d ~'
     `common-lisp-hyperspec-format'
     `Common Lisp
     Hyperspec'の中でフォーマット文字を調べる。


File: slime.info,  Node: Programming Helpers,  Next: Recovery,  Prev: Documentation,  Up: Commands

3.2.5 Programming Helpers
-------------------------

`M-TAB'
     `slime-complete-symbol'
     ポイントの地点のシンボルを補完する。三つの補完のスタイルがSLIMEで利
     用可能であり、デフォルトは通常のEmacsの補完とは異なることに注意するこ
     と。*Note Emacs-side customization::。

`C-c M-i'
     `slime-fuzzy-complete-symbol'
     その地点の短縮に対して選ばれそうな補完のリストを示す。これは第三の補完
     方法であり、`slime-complete-symbol'がデフォルトとするより伝統
     的な補完とは非常に異なる。それはシンボルを一部分ずつではなく全てを一度
     に補完しようと試みる。たとえば、"mvb"は
     "`multiple-value-bind'"を、"norm-df"は
     "`least-positive-normalized-double-float'"を発見するだろう。こ
     れは、`slime-complete-symbol'に対して用いられる補完の方法として選
     ぶこともできる。

`SPC'
     `slime-space'
     スペースキーは空白を挿入し、また、ポイントの地点の関数に対する引数リス
     トが存在する場合、それを調べて表示する。

`C-c C-s'
     `slime-insert-arglist'
     ポイントの地点の関数に対する引数リストが存在する場合、それを調べてカレ
     ントバッファに挿入する。

`C-c C-m'
     `slime-macroexpand-1'
     ポイントの地点の式を一度だけマクロ展開する。

`C-c M-m'
     `slime-macroexpand-all'
     ポイントの地点の式を完全にマクロ展開する。

`C-c C-t'
     `slime-toggle-trace-fdefinition'
     ポイントの地点の関数のトレースをトグルする

`C-c M-d'
     `slime-disassemble-symbol'
     ポイントの地点のシンボルの関数定義を逆アセンブルする。



File: slime.info,  Node: Recovery,  Next: Cross-reference,  Prev: Programming Helpers,  Up: Commands

3.2.6 Abort/Recovery
--------------------

`C-c C-b'
     `slime-interrupt'
     Lispを中断する(`SIGINT'を送信する)。

`C-c ~'
     `slime-sync-package-and-default-directory'
     EmacsからLispへ現在のパッケージと作業ディレクトリを同期する。

`C-c M-p'
     `slime-repl-set-package'
     REPLの現在のパッケージを設定する。



File: slime.info,  Node: Cross-reference,  Next: Inspector,  Prev: Recovery,  Up: Commands

3.2.7 Cross-reference
---------------------

SLIMEのクロスリファレンスコマンドはLispシステムによって提供されるサ
ポートに基づいており、Lisp間で非常に異なる。XREFサポートが組
み込まれていないシステムに対しては、SLIMEは、`CMU AI
Repository'からとられ、SLIMEにバンドルされている移植可能な
XREFパッケージに尋ねる。

各コマンドはポイントがあるシンボル上で動作するか、あるいは存在しない場
合は入力を要求する。前置引数を用いると、それらはつねに入力を要求する。
ここで示したキーバインディングを入力するか、最後のキー上でコントロール
修飾を用いることが可能である。*Note Key bindings::。

`C-c C-w c'
     `slime-who-calls'
     関数の呼び出し元を示す。

`C-c C-w r'
     `slime-who-references'
     グローバル変数への参照を示す。

`C-c C-w b'
     `slime-who-binds'
     グローバル変数の束縛を示す。

`C-c C-w s'
     `slime-who-sets'
     グローバル変数への代入を示す。

`C-c C-w m'
     `slime-who-macroexpands'
     マクロの展開を示す。

`M-x slime-who-specializes'
     あるクラスに特殊化された全ての既知のメソッドを示す。


   また、"List
callers/callees"コマンドもある。これらは呼び出しグラフを
見つけ出すために、低いレベルでヒープ上の関数オブジェクトを探索すること
によって動作する。それらはいくつかのLispシステムでのみ利用可能であり、
正確なXREF情報が利用できない場合の代替としてとても有用である。

`C-c <'
     `slime-list-callers'
     ある関数を呼び出す関数をリストする。

`C-c >'
     `slime-list-callees'
     ある関数から呼び出される関数をリストする。


File: slime.info,  Node: Inspector,  Next: Profiling,  Prev: Cross-reference,  Up: Commands

3.2.8 Inspector
---------------

SLIMEのインスペクタは、Lisp関数`INSPECT'のEmacsに基づくバージョ
ンである。インスペクトされたオブジェクトは、スロット毎に一行を用いてバッ
ファ内に示される。

`C-c I'
     `slime-inspect'
     ミニバッファに入力された式の値をインスペクトする。

インスペクタで利用可能なコマンドは以下のとおり:

`RET'
     `slime-inspector-inspect-object-at-point'
     ポイントがある地点のスロットをインスペクトする。インスペクタは再帰的に
     呼び出される。

`d'
     `slime-inspector-describe'
     ポイントがある地点のスロットを説明する。

`l'
     `slime-inspector-pop'
     前のオブジェクトに戻る(`RET'から戻る)。

`n'
     `slime-inspector-next'
     `l'の逆である。同様に`SPC'にバインドされる。

`q'
     `slime-inspector-quit'
     インスペクタバッファを終了する。



File: slime.info,  Node: Profiling,  Prev: Inspector,  Up: Commands

3.2.9 Profiling
---------------

`M-x slime-toggle-profile-fdefinition'
     関数のプロファイリングをトグルする。

`M-x slime-profile-package'
     パッケージ内の全ての関数をプロファイルする。

`M-x slime-unprofile-all'
     全ての関数のプロファイルを終了する。

`M-x slime-profile-report'
     プロファイラのデータを報告する。

`M-x slime-profile-reset'
     プロファイラのデータをリセットする。


File: slime.info,  Node: Semantic indentation,  Next: Reader conditionals,  Prev: Commands,  Up: slime-mode

3.3 Semantic indentation
========================

SLIMEは、どのようにLispシステム中のマクロをインデントするかを自動的
に発見する。これを行なうために、Lisp側はシステムの中の全てのマクロをス
キャンし、`&body'引数をもつ全てのものをEmacsへ報告する。それから
Emacsは、最初に引数に四つの空白を、"body"引数に通常どおり空白を二つ
だけ置いて、これらを特別にインデントする。

これは"おそらく動作する"だろう。あなたがラッキーな種類の人であれば、
この節の残りを読む必要はない。

実装を単純にするために、SLIMEは、同じsymbol-nameだが異なるパッケー
ジをもつマクロを区別しない。このことはそれをEmacsのインデントコードと
うまくフィットさせる。しかし、同じsymbol-nameをもつマクロがいくつかあ
る場合、それらは全て同じ方法で、それらの引数リストの一つのスタイルを無
作為に使ってインデントされるだろう。以下を用いて、どのシンボルが衝突を
伴うのかを発見できる:

     (swank:print-indentation-lossage)

衝突でイライラする場合、神経衰弱になる必要はなく、単にあなたの趣味に合
うようにElispシンボルの`common-lisp-indent-function'属性を無効に
すればよい。SLIMEはあなたの特別な設定を無効にすることはなく、単に良
いデフォルトを与えようとする。

より微妙な問題は、不完全なキャッシュが処理性能のために使われることであ
る。(1)
理想的な世界では、Emacsからのそれぞれのコマンドの後に、Lispはインデン
トの変更のために自動的にそれぞれのシンボルをスキャンするかもしれない。
しかし、これは毎回行なうにはあまりに高価である。その代わりに、Lispは、
つねにホームパッケージが要求元のEmacsのバッファによって用いられている
ものと一致するシンボルを単純にスキャンする。これは、多くの対話的に定義
されたマクロのインデントをピックアップすることで十分である。その残りを
捕らえるために、新たなLispパッケージがコマンド間で作られるたびごとに各
シンボルの完全なスキャンを作る -
それは新たなシステムがロードされよう
としているというようなことがらの面倒をみる。

全てのシンボルをインデント情報のために強制的にスキャンさせるには、
`M-x slime-update-indentation'を使うことができる。

   ---------- Footnotes ----------

   (1)
_もちろん_汚い最適化を行なう前に、我々は実際に遅過
ぎることを確かめた。


File: slime.info,  Node: Reader conditionals,  Prev: Semantic indentation,  Up: slime-mode

3.4 Reader conditional fontification
====================================

SLIMEはソースバッファ内でリーダの条件式を自動的に評価し、現在のLisp
の接続に対してはスキップされるコードを"グレイアウト"する。


File: slime.info,  Node: REPL,  Next: Debugger,  Prev: slime-mode,  Up: Top

4 REPL: the "top level"
***********************

SLIMEは特別なRead-Eval-Printループ(REPL,
"トップレベル"として
も知られる)を用いる。REPLユーザインターフェイスはEmacs
Lispで書かれ
ており、伝統的な`comint'に基づくLispとの相互作用よりもより良い
Emacsへの統合を与える:

   *
     REPL式の中で通知されたコンディションはSLDBを用いてデバッグされる。

   *
     戻り値は、別々のEmacsのフェース(カラー)によって印字された出力とは区別
     される。

   *
     Emacsはマーカを用いてREPLプロンプトを管理する。これは、Lispの出力が
     正しい場所に挿入されることと、ユーザの入力と混じり合わないことを確実に
     する。

* Menu:

* REPL commands::
* Input Navigation::
* Shortcuts::


File: slime.info,  Node: REPL commands,  Next: Input Navigation,  Prev: REPL,  Up: REPL

4.1 REPL commands
=================

`RET'
     `slime-repl-return'
     Lispからの現在の入力が完結したものである場合、それを評価する。完結して
     いない場合、新たな行を開始し、インデントする。前置引数が与えられると、
     入力は完結しているかどうかをチェックせずに評価される。

`C-RET'
     `slime-repl-closing-return'
     全てのマッチしていない括弧を閉じて、Lispの中で現在の入力を評価する。
     `M-RET'へもバインドされている。

`C-j'
     `slime-repl-newline-and-indent'
     新たな行を開始してインデントする。

`C-c C-c'
     `slime-interrupt'
     `SIGINT'でLispプロセスを中断する。

`TAB'
     `slime-complete-symbol'
     ポイント地点のシンボルを補完する。

`C-c C-o'
     `slime-repl-clear-output'
     バッファから前の式の出力と結果を取り除く。

`C-c C-t'
     `slime-repl-clear-buffer'
     プロンプトだけを残して、バッファ全体をクリアする。



File: slime.info,  Node: Input Navigation,  Next: Shortcuts,  Prev: REPL commands,  Up: REPL

4.2 Input navigation
====================

`C-a'
     `slime-repl-bol'
     行の先頭に行くが、REPLプロンプトのところで停止する。

`M-n'
`M-p'
`M-s'
`M-r'
     `slime-repl-{next,previous}-input'
     `slime-repl-{next,previous}-matching-input'
     `comint'スタイルの入力ヒストリコマンドである。

`C-c C-n'
`C-c C-p'
     `slime-repl-next-prompt, slime-repl-previous-prompt'
     REPLバッファで、現在のプロンプトと一つ前のプロンプトの間を移動する。

`C-M-a'
`C-M-e'
     `slime-repl-beginning-of-defun, slime-repl-end-of-defun'
     これらのコマンドは`beginning-of-defun'や`end-of-defun'と似て
     いるが、REPLの入力領域内で使われると、代わりにそれぞれ先頭あるいは末
     尾へ直接行く。



File: slime.info,  Node: Shortcuts,  Prev: Input Navigation,  Up: REPL

4.3 Shortcuts
=============

"ショートカット"は、名前によって呼び出される特別なREPLコマンドの集
合である。ショートカットを呼び出すには、最初にREPLプロンプトで
`,'
(コンマ)を押して、それからプロンプトに対してショートカットの名
前を入力する。

ショートカットは、ディレクトリとLispシステムのコンパイルやロードとの切
り替えのようなものごとを扱う。正確なショートカットの集合は現在はまだこ
のマニュアルには文書化されていないが、それらを対話的にリストするために
`help'ショートカットを用いることができる。


File: slime.info,  Node: Debugger,  Next: Extras,  Prev: REPL,  Up: Top

5 SLDB: the SLIME debugger
**************************

SLIMEは、カスタムメイドのSLDBと呼ばれるEmacsに基づくデバッガをも
つ。Lispシステム内で通知されるコンディションは、Lispの
`*DEBUGGER-HOOK*'を通じてEmacsの中でSLDBを呼び出す。

コンディションが通知されると、SLDBはバッファをポップアップする。バッ
ファはコンディションの説明、再起動のリスト、そしてバックトレースを表示
する。再起動を呼び出したり、バックトレースを調査したり、スタックフレー
ムの周囲を調べたりするためのコマンドが提供される。

* Menu:

* Examining frames::
* Restarts::
* Frame Navigation::
* Miscellaneous::


File: slime.info,  Node: Examining frames,  Next: Restarts,  Prev: Debugger,  Up: Debugger

5.1 Examining frames
====================

以下は、ポイントの地点のスタックフレームを調べるためのコマンドである。

`t'
     `sldb-toggle-details'
     ローカル変数と`CATCH'タグの表示をトグルする。

`v'
     `sldb-show-source'
     フレームの現在のソース式を見る。その式はLispソースファイルのバッファ中
     に表示される。

`e'
     `sldb-eval-in-frame'
     フレームの中で式を評価する。その式は、そのフレームの中で利用可能なロー
     カル変数を参照することができる。

`d'
     `sldb-pprint-eval-in-frame'
     フレームの中で式を評価し、一時的なバッファの中でその結果をプリティプリ
     ントする。

`D'
     `sldb-disassemble'
     フレームの関数を逆アセンブルする。フレームの中のインストラクションポイ
     ンタのような情報を含む。

`i'
     `sldb-inspect-in-frame'
     そのフレームの中で式を評価した結果を検査する。

`l'
     `sldb-list-locals'
     フレーム内のローカル変数とそのバインディングをリストする。



File: slime.info,  Node: Restarts,  Next: Frame Navigation,  Prev: Examining frames,  Up: Debugger

5.2 Invoking restarts
=====================

`a'
     `sldb-abort'
     `ABORT'再起動を呼び出す。

`q'
     `sldb-quit'
     "Quit" -
     トップレベルのSLIMEリクエストループがcatchするタグへ
     `THROW'する。

`c'
     `sldb-continue'
     `CONTINUE'再起動を呼び出す。

`0 ... 9'
     数によって再起動を呼び出す。


再起動は、バッファ内のそれらの上で`RET'または`Mouse-2'を押すこ
とでも呼び出せる。


File: slime.info,  Node: Frame Navigation,  Next: Miscellaneous,  Prev: Restarts,  Up: Debugger

5.3 Navigating between frames
=============================

`n'

`p'
     `sldb-down, sldb-up'
     フレーム間を移動する。

`M-n'

`M-p'
     `sldb-details-{down,up}'
     "砂糖つきで"フレーム間を移動する:
     元のフレームの詳細を隠し、詳細と次
     のソースコードを表示する。砂糖つきの移動は、現在のフレームだけの詳細と
     ソースコードを見られるようにする。



File: slime.info,  Node: Miscellaneous,  Prev: Frame Navigation,  Up: Debugger

5.4 Miscellaneous Commands
==========================

`r'
     `sldb-restart-frame'
     もともと呼ばれたときと同じ引数を用いてフレームで再起動を実行する(このコ
     マンドはすべての実装で利用可能なわけではない)。

`R'
     `sldb-return-from-frame'
     ミニバッファから入力された値を伴ってそのフレームから戻る(このコマンドは
     すべての実装で利用可能なわけではない)。

`s'
     `sldb-step'
     フレーム中の次の式にステップする(このコマンドはすべての実装で利用可能な
     わけではない)。

`B'
     `sldb-break-with-default-debugger'
     SLDBを脱出して、そのLispシステムのデフォルトのデバッガを用いてそのコ
     ンディションをデバッグする。

`:'
     `slime-interactive-eval'
     ミニバッファに入力された式を評価する。



File: slime.info,  Node: Extras,  Next: Customization,  Prev: Debugger,  Up: Top

6 Extras
********

* Menu:

* slime-autodoc-mode::
* Multiple connections::
* Typeout frames::


File: slime.info,  Node: slime-autodoc-mode,  Next: Multiple connections,  Prev: Extras,  Up: Extras

6.1 `slime-autodoc-mode'
========================

`slime-autodoc-mode'は、ポイントの近くのシンボルに関する情報を自動
的に示すための付加的なマイナーモードである。関数名に対しては、その引数
リストが表示され、グローバル変数に対しては、その値が表示される。これは
Emacs Lispのための`eldoc-mode'のクローンである。

このモードは`~/.emacs'の`slime-setup'呼び出しの中で有効にする
ことができる:

     (slime-setup :autodoc t)


File: slime.info,  Node: Multiple connections,  Next: Typeout frames,  Prev: slime-autodoc-mode,  Up: Extras

6.2 Multiple connections
========================

SLIMEは同時に複数のLispプロセスへ接続できる。前置引数とともに呼び出
されると、`M-x
slime'コマンドは、Lispプロセスが実行中である場合、追
加のLispプロセスを作成しようとする。これはしばしば便利であるが、あなた
のSLIMEコマンドが希望するLispの中で実行されることを確実にするために
ある種の理解を必要とする。

いくつかのバッファは特定のLispプロセスに結び付いている。それぞれのLisp
への接続は自身のREPLバッファをもち、入力されたすべての式、あ
るいはそのバッファ内で呼び出されたSLIMEコマンドは関連する接続へ送ら
れる。SLIMEによって作られたその他のバッファも同様にそれらの元となる
接続へ結びつけられる。それにはSLDBバッファ、aproposの結果のリストな
どが含まれる。これらのバッファはLispプロセスとの何らかの相互作用の結果
なので、それらの中のコマンドはつねに同じプロセスへ戻っていく。

`slime-mode'ソースバッファのようなその他の場所で実行されるコマンド
は、通常は"デフォルト"の接続を用いる。通常、これはもっとも最近に確立
された接続だが、"接続リスト"バッファを通じて再設定することができる:

`C-c C-x c'
     `slime-list-connections'
     確立された接続をリストするバッファをポップアップする。

`slime-list-connections'によって表示されたバッファは、各接続の一行
の要約を与える。要約はその接続のシリアル番号、そのLisp実装の名前、そし
てそのLispプロセスのその他の詳細なことがらを示す。現在の"デフォルト
の"接続はアスタリスクを伴って示される。

connection-listバッファで利用可能なコマンドは以下のとおり:

`RET'
     `slime-goto-connection'
     ポイントがある地点の接続のREPLバッファをポップアップする。

`d'
     `slime-connection-list-make-default'
     ポイントがある地点の接続を"デフォルトの"接続にする。その後で
     `slime-mode'ソースバッファ内のコマンドに対して使われる。

`g'
     `slime-update-connection-list'
     バッファ内の接続リストを更新する。

`q'
     `slime-temp-buffer-quit'
     接続リストを終了する(バッファをkillして、ウィンドウのコンフィグレーショ
     ンを元に戻す)。



File: slime.info,  Node: Typeout frames,  Prev: Multiple connections,  Up: Extras

6.3 Typeout frames
==================

"typeoutフレーム"は、SLIMEコマンドからのメッセージを表示するために
エコー領域(ミニバッファ)の代わりに使われる特別なEmacsのフレームである。
これはオプションの機能である。エコー領域に勝るtypeoutフレームの長所は、
より多くのテキストを保持できること、スクロールが可能なこと、そしてキー
を押したときにその内容が消えないことである。引数リスト、マクロ展開など
のように潜在的に長いメッセージはすべてtypeoutフレームへ送られる。

`M-x slime-ensure-typeout-frame'
     typeoutフレームが存在することを確実にする。必要ならば作成する。

typeoutフレームが閉じられている場合、エコー領域が再び通常のように用いら
れる。

起動時にtypeoutフレームが自動的に作成されるようにするために、
`slime-connected-hook'を使える:

     (add-hook 'slime-connected-hook 'slime-ensure-typeout-frame)


File: slime.info,  Node: Customization,  Next: Credits,  Prev: Extras,  Up: Top

7 Customization
***************

* Menu:

* Emacs-side customization::
* Lisp-side::


File: slime.info,  Node: Emacs-side customization,  Next: Lisp-side,  Prev: Customization,  Up: Customization

7.1 Emacs-side
==============

SLIMEのEmacs部分はEmacsの`customize'システムを用いて、`M-x
customize-group slime
RET'を使うだけでコンフィグレーションを行なえる。
customizeシステムは自己記述的であるので、我々はこのマニュアルではいくつ
かの重要な、あるいは不明瞭なコンフィグレーションオプションだけをカバー
する。

`slime-truncate-lines'
     SLIMEによってポップアップされる行ごとのサマリバッファ中の
     `truncate-lines'に対して用いられる値である。これはデフォルトでは
     `t'であり、そのことでバックトレース、aproposのリストなどで行が折り
     返されないことが確実になっている。しかし、それは情報が画面からあふれる
     ことを引き起こし得る。

`slime-multiprocessing'
     Lispシステムの中でマルチプロセッシング(スレッド)を使いたい場合、これを
     `t'にセットするべきである。その場合、Lispサーバの開始時にあらゆる
     必要な初期化が行なわれる。

`slime-complete-symbol-function'
     Lispシンボルの補完のために使うための関数。三つの補完スタイルが利用可能
     である。デフォルトの`slime-complete-symbol*'は、シンボル名のハイフ
     ンで分離された単語部分を"並列に"補完を行なう。(1)
     形式的には、これは、
     "`a-b-c'"は正規表現"`^a.*-b.*-c.*'"
     (ここで"ドット"はハ
     イフン以外のあらゆるものにマッチする)にマッチするあらゆるシンボルに補完
     することができるということを意味する。例によってもっと直観的に理解でき
     るだろう:
        * `m-v-b'は補完すると`multiple-value-bind'になる。

        * `w-open'は曖昧である: `with-open-file'あるいは
          `with-open-stream'のいずれかに補完される。シンボルはもっとも長い共
          通の補完(`with-open-')へ展開され、ポイントは曖昧である最初の地点
          (この場合は末尾)に置かれる。

        * `w--stream'は補完すると`with-open-stream'になる。
     代替としては`slime-simple-complete-symbol'があり、それは通常の
     Emacsの方法で補完を行なう。最後に、`slime-fuzzy-complete-symbol'が
     ある。これは上記の二つとはきわめて異なり、短縮されたシンボルに対する最
     良のマッチを見つけようと試みる。それ独自のキーバインディングももち、デ
     フォルトでは`C-c
     M-i'である。さらに詳細な情報は、 *Note
     slime-fuzzy-complete-symbol::。

`slime-translate-to-lisp-filename-function'
`slime-translate-from-lisp-filename-function'
     これらの関数は、EmacsとLispシステムの間でファイル名を変換するために使う
     ことができる。ファイルシステムを共有しているが異なるディレクトリ構造(異
     なる"マウントポイント")を用いる別のマシン上でEmacsとLispを実行してい
     る場合、これらは有益である。これは、SMBに基づくファイル共有の
     多くでは普通のことである。


* Menu:

* Hooks::

   ---------- Footnotes ----------

   (1) この補完のス タイルはChris
McConnellによる`completer.el'をモデルとしている。そ
のパッケージはILISPにバンドルされている。


File: slime.info,  Node: Hooks,  Prev: Emacs-side customization,  Up: Emacs-side customization

7.1.1 Hooks
-----------

`slime-mode-hook'
     このフックは、バッファが`slime-mode'に入るたびに実行される。これは、
     Lispソースバッファの中でバッファローカルなコンフィグレーションを設定す
     るのにとても有用である。使い方の一例は`slime-autodoc-mode'を有効に
     することである(*Note slime-autodoc-mode::)。

`slime-connected-hook'
     このフックは、SLIMEがLispサーバに対する接続を確立したときに実行され
     る。使い方の一例はTypeoutフレーム(*Note Typeout
     frames::)を作ることであ る。

`sldb-hook'
     このフックは、SLDBが呼び出されたあとに実行される。フック関数は、初期
     化された後にSLDBバッファから呼び出される。使い方の一例はこのフックに
     `sldb-print-condition'を加えることであり、それによって、SLDBを
     用いてデバッグされるすべてのコンディションがREPLバッファ内に記録され
     る。



File: slime.info,  Node: Lisp-side,  Prev: Emacs-side customization,  Up: Customization

7.2 Lisp-side (Swank)
=====================

("Swank"として知られている)
SLIMEのLispサーバ側は、設定可能ないく
つかの変数を提供する。初期化ファイル`~/.swank.lisp'は起動時に自動
的に評価され、これらの変数を設定するために使うことができる。

* Menu:

* Communication style::
* Other configurables::


File: slime.info,  Node: Communication style,  Next: Other configurables,  Prev: Lisp-side,  Up: Lisp-side

7.2.1 Communication style
-------------------------

もっとも重要な設定可能な変数は`SWANK:*COMMUNICATION-STYLE*'であり、
LispがEmacsからのプロトコルメッセージを読み込んで処理するメカニズムを指
定する。この通信スタイルの選択はSLIMEの操作に全体的な影響をもつ。

   使用可能な通信スタイルは以下のとおり:

`:FD-HANDLER'
     このスタイルは古典的なUnixスタイルの"`select()'ループ"を用いる。
     Swankは(CMUCLやSBCLでの`SERVE-EVENT'のように)
     イベントディスパッチフレームワークに通信ソケットを登録し、データが利用
     可能になるとコールバックを受け取る。このスタイルでは、Emacsからのリクエ
     ストは、Lispがイベントループに入ったときに検出され処理される。このスタ
     イルは単純で予測可能である。

`:SIGIO'
     このスタイルは、`SIGIO'シグナルハンドラを伴う"signal-driven
     I/O"を用いる。LispはEmacsからシグナルを伴う要求を受け取り、その要求に対
     応するために実施中のあらゆることがらに割り込みが発生する。Emacsは他のこ
     とを実施していてビジーである間でもLispの中で操作することができるので、
     このスタイルには応答性が良いという利点がある。(コンパイルのように)一つ
     の長時間かかる要求を送信して、それからそれが完了する前にいくつかの短い
     要求で割り込むように、Emacsが並行に要求を発行することも可能にする。欠点
     は、Lispコードでの他の`SIGIO'の使用と干渉する可能性があること、都
     合の悪い瞬間にLispに割り込むことによって大破壊を引き起こすかもしれない
     ことである。

`:SPAWN'
     このスタイルは、独立したスレッドでそれぞれの要求を実行するためにLispシ
     ステムのマルチプロセッシングサポートを使用する。このスタイルは
     `:SIGIO'と同じような属性をもつが、シグナルを用いることはなく、
     Emacsによって発行されたすべての要求は並列に実行することができる。


デフォルトの要求ハンドリングスタイルはあなたのLispシステムの能力にした
がって選択される。一般的な優先順位は`:SPAWN',
次に`:SIGIO', それから`:FD-HANDLER'である。
`SWANK-BACKEND:PREFERRED-COMMUNICATION-STYLE'を呼び出すことでデフォ
ルトのスタイルをチェックすることができる。あなたのSwank初期化ファイルの
中で`SWANK:*COMMUNICATION-STYLE*'を設定することで、そのデフォルト
を無効にすることもできる。


File: slime.info,  Node: Other configurables,  Prev: Communication style,  Up: Lisp-side

7.2.2 Other configurables
-------------------------

以下のLisp変数はあなたの`~/.swank.lisp'ファイルを通じて設定するこ
とができる:

`SWANK:*CONFIGURE-EMACS-INDENTATION*'
     この変数は、マクロの中の`&body'引数に対するインデントスタイルを検
     出してEmacsへ送るかどうかをコントロールする。デフォルトでは有効になって
     いる。

`SWANK:*GLOBALLY-REDIRECT-IO*'
     真である場合、標準ストリーム(`*standard-output*'など)がEmacsの
     REPLへグローバルにリダイレクトされる。`NIL'であるときには(デフォ
     ルト)、これらのストリームは要求を扱う間には動的な束縛を使って一時的にだ
     けEmacsへリダイレクトされる。Emacsからの標準入力を読み込ませようとする
     ことでLispの元のREPLと不正な相互作用が生じる可能性があるため、
     `*standard-input*'がグローバルにリダイレクトされることは現在はまっ
     たくないことに注意しよう。

`SWANK:*GLOBAL-DEBUGGER*'
     真である場合(デフォルト)、`*DEBUGGER-HOOK*'がグローバルに
     `SWANK:SWANK-DEBUGGER-HOOK'へ設定され、SLIMEがそのLispイメージ
     の中のすべてのデバッグを扱うことを引き起こす。これはマルチスレッドやコ
     ールバック駆動のアプリケーションをデバッグするためである。

`SWANK:*SLDB-PPRINT-FRAMES*'
     `*PRINT-PRETTY*'は、SLDBでのバックトレースのフォーマット中には
     この値に束縛される。デフォルト値は`NIL'である。

`SWANK:*USE-DEDICATED-OUTPUT-STREAM*'
     この変数はLispからEmacsへの印字された出力の送信に対する最適化を制御する。
     `t'である場合(デフォルト)、LispがEmacsへ印字された出力を送信するた
     めだけに独立したソケットが確立される。その最適化がない場合、後にデコー
     ドしなければならないプロトコルメッセージの中の出力をEmacsへ送る必要があ
     り、Lispが多量の出力を"吐き出し"始めると、これはつねにもちこたえるわ
     けではない。

`SWANK:*LOG-EVENTS*'
     この変数を`t'に設定すると、Emacsと交換するすべてのプロトコルメッセ
     ージは`*TERMINAL-IO*'へ印字される。これは、低レベルなデバッグのた
     めに、また、"ワイヤ上で"どのようにSLIMEが動作するのかを観察するた
     めに有用である。`*TERMINAL-IO*'の出力は、あなたのLispシステム自身
     のリスナーの中(通常はバッファ`*inferior-lisp*'の中である)で見るこ
     とができる。



File: slime.info,  Node: Credits,  Prev: Customization,  Up: Top

8 Credits
*********

_The soppy ending..._

Hackers of the good hack
========================

SLIMEはEric MarsdenによるSLIMの拡張(Extension)である。これ
を書いている時点で、SLIMEの作者とコードに貢献した人は以下の通り:

   …`hyperspec.el', `CLOCC', そして`CMU AI Repository'にバ
ンドルされているコードは含んでいない。

`slime-devel'メーリングリストの多くの人々はSLIMEに対してコード
以外の貢献を行なっている。それでも、人生は難しい:
マニュアルに名前を載
せるにはコードを送らなければならない`:-)'。

Thanks!
=======

我々は、場所の提供と手助けに対して、そして"Sourceforge地獄"から救助し
てくれたことに対して`common-lisp.net'の良い人々に借りがある。

我々がサポートするLispの実装者からは非常な援助をいただいた。
`cmucl-imp'リスト上のCMUCL保守担当者、Dan Barlow(1)、SBCLの
Christophe Rhodes、OpenMCLのGary
Byers、LispWorks(寛大にもMemetricの Alain
Picardによって後援された)のMartin Simmons、ABCLのPeter
Graves、そしてFranzのCraig NorvellとKevin Layerに感謝する。

   ---------- Footnotes ----------

   (1)
Danは"我々"の一員であるので、当然ながらこれらの感謝は
彼のSBCLハッカーの側面へのものである。



Tag Table:
Node: Top249
Node: Introduction1816
Node: Getting started3520
Node: Platforms3817
Node: Downloading4861
Node: CVS5510
Node: CVS Incantations6908
Node: Installation7762
Node: Running8632
Node: slime-mode9239
Node: User-interface conventions9694
Node: Temporary buffers10159
Node: Key bindings11690
Node: inferior-lisp13424
Node: Commands15195
Node: Compilation15513
Node: Finding definitions17042
Node: Lisp Evaluation17845
Node: Documentation19000
Node: Programming Helpers21051
Ref: slime-fuzzy-complete-symbol21502
Node: Recovery23028
Node: Cross-reference23509
Node: Inspector25539
Node: Profiling26649
Node: Semantic indentation27210
Ref: Semantic indentation-Footnote-130097
Node: Reader conditionals30211
Node: REPL30565
Node: REPL commands31517
Node: Input Navigation32695
Node: Shortcuts33607
Node: Debugger34397
Node: Examining frames35235
Node: Restarts36526
Node: Frame Navigation37118
Node: Miscellaneous37677
Node: Extras38702
Node: slime-autodoc-mode38882
Node: Multiple connections39535
Node: Typeout frames42299
Node: Customization43471
Node: Emacs-side customization43640
Ref: Emacs-side customization-Footnote-147165
Node: Hooks47336
Node: Lisp-side48507
Node: Communication style48973
Node: Other configurables51956
Node: Credits54858
Ref: Credits-Footnote-156188

End Tag Table
